from argparse import ArgumentParser
import datetime
from pathlib import Path
from subprocess import run
from typing import List


def main(
    instance_set: List[str],
    output_instance_set: str,
):
  instances = set()
  for instance_set_name in instance_set:
    instance_set_file = Path("data") / "instance_sets" / f"{instance_set_name}.txt"
    with instance_set_file.open("r") as f:
      instance_ids = f.read().splitlines()
      instances.update(instance_ids)

  
  code_patches_dir = Path("data") / "code_patches"
  code_patch_files = list(code_patches_dir.rglob("*.json"))
  for code_patch_file in code_patch_files:
    instance_id = code_patch_file.stem
    instances.discard(instance_id)
  
  sorted_instances = sorted(instances)
  output_path = Path("data") / "instance_sets" / f"{output_instance_set}.txt"
  todays_date = datetime.datetime.now().strftime("%Y-%m-%d")
  commit_sha = run(["git", "rev-parse", "HEAD"], capture_output=True, text=True).stdout.strip()
  with output_path.open("w") as f:
    comment = [ "# This instance set was generated by filtering out solved instances from the following instance sets:" ] + [
                  f"#   {instance_set_name}"
                  for instance_set_name in instance_set
               ] + [ f"# Created on: {todays_date}",
                    f"# Current commit SHA: {commit_sha}",
               ]
    f.write("\n".join(comment))
    f.write("\n")
    f.write("\n".join(sorted_instances))

  print(f"Wrote {len(sorted_instances)} instances to {output_instance_set}")
  

if __name__ == '__main__':
    """
  Read one or more instance sets and filter out the solved instance ids.
  Print the instance ids that have not been solved to a new instance set.
  """
    parser = ArgumentParser()
    parser.add_argument(
        "--instance_set",
        nargs="+",
        type=str,
        help="Instance set(s) to filter",
    )
    parser.add_argument(
       "--output_instance_set",
        type=str,
        help="Output instance set"
    )

    args = parser.parse_args()
    main(**vars(args))
