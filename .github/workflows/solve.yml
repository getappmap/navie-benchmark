name: Run the benchmark

on:
  workflow_dispatch:
    inputs:
      llm:
        description: "LLM model to use"
        type: choice
        required: true
        options:
          - gpt-4o
          - claude-3.5
      instance_set:
        description: "Instance set to solve"
        type: string
      runner:
        description: "Runner type"
        required: true
        default: ubuntu-latest
        type: choice
        options:
          - ubuntu-latest
          - swe-bench-ubuntu-latest
          - SWE-Bench_Larger
      num_runners:
        description: "Number of runners to split the workload across"
        required: true
        default: "1"
      name:
        description: "Assign a name to the workflow run"
        type: string
        required: false

  pull_request:
    types: [opened, synchronize]

run-name: ${{ inputs.name || github.event.pull_request.title || github.event.workflow.name }}

permissions:
  contents: read
  pull-requests: read
  packages: write

jobs:
  show-inputs:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Display Input Values
        run: |
          echo "llm: ${{ github.event.inputs.llm }}"
          echo "instance_set: ${{ github.event.inputs.instance_set }}"
          echo "runner: ${{ github.event.inputs.runner }}"
          echo "num_runners: ${{ github.event.inputs.num_runners }}"
          echo "name: ${{ github.event.inputs.name }}"
  build-appmap-js:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # Cache the appmap-js build
      - name: Cache appmap-js build
        uses: actions/cache@v4
        id: cache-appmap-js
        with:
          lookup-only: true
          path: |
            submodules/appmap-js/node_modules
            submodules/appmap-js/packages/*/built
            submodules/appmap-js/packages/*/dist
            submodules/appmap-js/packages/*/node_modules
          key: appmap-js-dist-${{ runner.os }}-${{ hashFiles('.git/modules/submodules/appmap-js/HEAD') }}

      - name: Set up Node.js
        if: steps.cache-appmap-js.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3

      - name: Build submodules
        if: steps.cache-appmap-js.outputs.cache-hit != 'true'
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
        run: |
          cd submodules/appmap-js
          git checkout -- .
          yarn
          yarn build
          chmod +x packages/cli/built/cli.js

  prepare-matrix:
    runs-on: ubuntu-latest
    env:
      NUM_RUNNERS: ${{ inputs.num_runners }}
    outputs:
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}
    steps:
      - name: Prepare matrix
        id: prepare-matrix
        run: |
          num_runners=${NUM_RUNNERS:-1}
          echo "Number of runners: $num_runners"
          indices=$(seq 0 $(($num_runners - 1)) | jq -R 'tonumber' | jq -s -c)
          echo "Matrix: $indices"
          echo "matrix=$indices" >> $GITHUB_OUTPUT

  solve:
    needs:
      - build-appmap-js
      - prepare-matrix
    runs-on: ${{ inputs.runner || 'ubuntu-latest' }}
    strategy:
      matrix:
        index: ${{ fromJson(needs['prepare-matrix'].outputs.matrix) }}
    env:
      NUM_RUNNERS: ${{ inputs.num_runners }}
      INSTANCE_SET: ${{ inputs.instance_set }}
      LLM: ${{ inputs.llm }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      # Restore the appmap-js build
      - name: Restore appmap-js build
        uses: actions/cache/restore@v4
        id: cache-appmap-js
        with:
          fail-on-cache-miss: true
          path: |
            submodules/appmap-js/node_modules
            submodules/appmap-js/packages/*/built
            submodules/appmap-js/packages/*/dist
            submodules/appmap-js/packages/*/node_modules
          key: appmap-js-dist-${{ runner.os }}-${{ hashFiles('.git/modules/submodules/appmap-js/HEAD') }}

      - name: Set up Node.js
        if: steps.cache-appmap-js.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Solve instances
        run: |
          pip install virtualenv
          virtualenv venv
          . ./venv/bin/activate
          pip install -e .

          export PYTHONPATH=$PYTHONPATH:$(pwd)
          export APPMAP_COMMAND="node $(pwd)/submodules/appmap-js/packages/cli/built/cli.js"

          git config --global init.defaultBranch main
          git config --global user.email "actions@example.com"
          git config --global user.name "GitHub Workflow"

          llm="${LLM:-gpt-4o}"
          if [[ $llm == "gpt-4o" ]]; then
            export APPMAP_NAVIE_MODEL="gpt-4o"
            export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          elif [[ $llm == "claude-3.5" ]]; then
            export APPMAP_NAVIE_MODEL="claude-3-5-sonnet-20240620"
            export ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          fi

          instance_set="${INSTANCE_SET:-smoke}"
          num_runners="${NUM_RUNNERS:-1}"
          runner_index="${{ matrix.index }}"

          python -m solver.prepare_images \
            --instance_set "${instance_set}" \
            --num_runners "${num_runners}" \
            --runner_index "${runner_index}"

          python -m solver.solve \
            --instance_set "${instance_set}" \
            --num_runners "${num_runners}" \
            --runner_index "${runner_index}" \

      - name: Report predictions
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: predictions
          path: predictions.jsonl

      - name: Report harness logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: harness-logs
          path: logs

      - name: Report solver logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: solver-logs
          path: |
            solve
            !solve/*/source

      - name: Report patch files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: patch-files
          path:
            solve/**/*.patch

  evaluate:
    needs: solve
    runs-on: ${{ inputs.runner || 'ubuntu-latest' }}
    env:
      INSTANCE_SET: ${{ inputs.instance_set }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install virtualenv
          virtualenv venv
          . ./venv/bin/activate
          pip install -e .

      - name: Evaluate predictions
        run: |
          . ./venv/bin/activate

          export PYTHONPATH=$PYTHONPATH:$(pwd)
          instance_set="${INSTANCE_SET:-smoke}"

          python -m solver.prepare_images \
            --instance_set "${instance_set}" \
            --no_push

          python -m swebench.harness.run_evaluation \
            --instance_set "${instance_set}" \
            --predictions_path predictions.jsonl \
            --run_id "${instance_set}"

      - name: Report evaluation logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: evaluation-output
          path: "*.json"