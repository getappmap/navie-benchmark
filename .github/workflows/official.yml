name: Official solver

on:
  workflow_dispatch:
    inputs:
      llm:
        description: "LLM model to use"
        type: choice
        required: true
        options:
          - gpt-4o-2024-08-06
          - gpt-4o-2024-05-13
          - claude-3-5-sonnet-20240620
      instance_set:
        description: "Instance set to solve"
        type: string
      context_token_limit:
        description: "Context token limit"
        type: choice
        required: true
        options:
          - "8000"
          - "16000"
          - "32000"
          - "64000"
        default: "8000"
      context_token_limit_increase:
        description: "Percent to increase the token limit on each retry"
        type: choice
        required: true
        default: "20"
        options:
          - "0"
          - "10"
          - "20"
          - "30"
          - "40"
          - "50"
      temperature_increase:
        description: "Amount to increase the temperature on each retry"
        type: choice
        required: true
        default: "0.05"
        options:
          - "0"
          - "0.05"
          - "0.1"
          - "0.15"
          - "0.2"
      test_patch_solve_threshold:
        description: "Minimum number of test patches to discover, on a single runner, in order to continue solving for tests"
        type: number
        required: true
        default: 2
      max_test_solve_iterations:
        description: "Maximum number of iterations to solve for tests"
        type: number
        required: true
        default: 5
      num_runners:
        description: "Number of runners"
        type: number
        required: true
      name:
        description: "Assign a name to the workflow run"
        type: string
        required: false

run-name: ${{ inputs.name }}

permissions:
  contents: read
  pull-requests: read
  packages: read

jobs:
  show-inputs:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Display Input Values
        run: |
          echo "llm: ${{ github.event.inputs.llm }}"
          echo "instance_set: ${{ github.event.inputs.instance_set }}"
          echo "context_token_limit: ${{ github.event.inputs.context_token_limit }}"
          echo "context_token_limit_increase: ${{ github.event.inputs.context_token_limit_increase }}"
          echo "temperature_increase: ${{ github.event.inputs.temperature_increase }}"
          echo "test_patch_solve_threshold: ${{ github.event.inputs.test_patch_solve_threshold }}"
          echo "max_test_solve_iterations: ${{ github.event.inputs.max_test_solve_iterations }}"
          echo "num_runners: ${{ github.event.inputs.num_runners }}"
          echo "name: ${{ github.event.inputs.name }}"

  build-appmap-js:
    uses: ./.github/workflows/build_appmap_js.yml

  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}
    steps:
      - name: Prepare matrix
        id: prepare-matrix
        run: |
          num_runners=${{ inputs.num_runners }}
          echo "Number of runners: $num_runners"
          indices=$(seq 0 $(($num_runners - 1)) | jq -R 'tonumber' | jq -s -c)
          echo "Matrix: $indices"
          echo "matrix=$indices" >> $GITHUB_OUTPUT

  solve:
    needs:
      - build-appmap-js
      - prepare-matrix
    runs-on: SWE-Bench_Larger
    # Run for 24 hours, which is as long as the GH token is valid for.
    timeout-minutes: 1440
    continue-on-error: true
    strategy:
      matrix:
        index: ${{ fromJson(needs['prepare-matrix'].outputs.matrix) }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      # Restore the appmap-js build
      - name: Restore appmap-js build
        uses: actions/cache/restore@v4
        id: cache-appmap-js
        with:
          fail-on-cache-miss: true
          path: |
            submodules/appmap-js/node_modules
            submodules/appmap-js/packages/*/built
            submodules/appmap-js/packages/*/dist
            submodules/appmap-js/packages/*/node_modules
          key: appmap-js-dist-${{ runner.os }}-${{ hashFiles('.git/modules/submodules/appmap-js/HEAD') }}

      - name: Set up Node.js
        if: steps.cache-appmap-js.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Solve
        run: |
          pip install virtualenv
          virtualenv venv
          . ./venv/bin/activate
          pip install -e .

          export PYTHONPATH=$PYTHONPATH:$(pwd)
          export APPMAP_COMMAND="node $(pwd)/submodules/appmap-js/packages/cli/built/cli.js"

          git config --global init.defaultBranch main
          git config --global user.email "actions@example.com"
          git config --global user.name "GitHub Workflow"

          llm=${{ inputs.llm }}
          export APPMAP_NAVIE_MODEL="${llm}"
          if [[ $llm == "gpt-4o"* || $llm == "o1-"* ]]; then
            export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          elif [[ $llm == "claude"* ]]; then
            export ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          fi

          instance_set="${{ inputs.instance_set }}"
          context_tokens="${{ inputs.context_token_limit }}"
          context_token_limit_increase="${{ inputs.context_token_limit_increase }}"
          temperature=0
          temperature_increase="${{ inputs.temperature_increase }}"
          test_patch_solve_threshold="${{ inputs.test_patch_solve_threshold }}"
          max_test_solve_iterations="${{ inputs.max_test_solve_iterations }}"
          num_runners="${{ inputs.num_runners }}"
          runner_index="${{ matrix.index }}"

          python -m solver.solve_loop \
            --instance_set "${instance_set}" \
            --context_tokens "${context_tokens}" \
            --temperature "${temperature}" \
            --temperature_increase "${temperature_increase}" \
            --test_patch_solve_threshold "${test_patch_solve_threshold}" \
            --context_token_limit_increase "${context_token_limit_increase}" \
            --max_test_solve_iterations "${max_test_solve_iterations}" \
            --num_runners "${num_runners}" \
            --runner_index "${runner_index}"

      - name: Report archive
        uses: actions/upload-artifact@v4
        if: always()
        with:
          retention-days: 14
          name: archive-${{ matrix.index }}
          path: |
            archive


  report:
    needs:
      - solve
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: archive
          pattern: 'archive-*'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Report
        run: |
          pip install virtualenv
          virtualenv venv
          . ./venv/bin/activate
          pip install -e .

          export PYTHONPATH=$PYTHONPATH:$(pwd)

          python -m solver.report --archive_dir archive
    
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report.csv
