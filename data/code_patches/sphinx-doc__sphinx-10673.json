{
  "instance_id": "sphinx-doc__sphinx-10673",
  "edit_test_file": "tests/test_toctree.py",
  "code_patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 35e16e6..835fb17 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -119,16 +119,21 @@ class TocTree(SphinxDirective):\n                 if url_re.match(ref) or ref == 'self':\n                     toctree['entries'].append((title, ref))\n                 elif docname not in self.env.found_docs:\n-                    if excluded(self.env.doc2path(docname, False)):\n+                    # Special case handling for generated index pages\n+                    if docname in ('genindex', 'modindex', 'search'):\n+                        # Treat as valid references without warnings\n+                        toctree['entries'].append((title, docname))\n+                        toctree['includefiles'].append(docname)\n+                    elif excluded(self.env.doc2path(docname, False)):\n                         message = __('toctree contains reference to excluded document %r')\n                         subtype = 'excluded'\n                     else:\n                         message = __('toctree contains reference to nonexisting document %r')\n                         subtype = 'not_readable'\n \n-                    logger.warning(message, docname, type='toc', subtype=subtype,\n-                                   location=toctree)\n-                    self.env.note_reread()\n+                        logger.warning(message, docname, type='toc', subtype=subtype,\n+                                       location=toctree)\n+                        self.env.note_reread()\n                 else:\n                     if docname in all_docnames:\n                         all_docnames.remove(docname)\n",
  "test_patch": "diff --git a/tests/test_ext_toctree_genindex_modindex_search.py b/tests/test_ext_toctree_genindex_modindex_search.py\nnew file mode 100644\nindex 0000000..d48b7d6\n--- /dev/null\n+++ b/tests/test_ext_toctree_genindex_modindex_search.py\n@@ -0,0 +1,24 @@\n+import re\n+import pytest\n+from sphinx.testing import restructuredtext\n+from sphinx.testing.util import assert_node\n+from docutils import nodes\n+from sphinx import addnodes\n+\n+@pytest.mark.sphinx(testroot='toctree')\n+def test_toctree_with_genindex_modindex_search(app, status, warning):\n+    text = (\".. toctree::\\n\"\n+            \"   :maxdepth: 1\\n\"\n+            \"   :caption: Indices and tables\\n\"\n+            \"\\n\"\n+            \"   genindex\\n\"\n+            \"   modindex\\n\"\n+            \"   search\\n\")\n+\n+    app.env.find_files(app.config, app.builder)\n+    restructuredtext.parse(app, text, 'index')\n+    \n+    warnings = warning.getvalue()\n+    assert \"toctree contains reference to nonexisting document 'genindex'\" in warnings\n+    assert \"toctree contains reference to nonexisting document 'modindex'\" in warnings\n+    assert \"toctree contains reference to nonexisting document 'search'\" in warnings\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_toctree_genindex_modindex_search_inverted.py b/tests/test_ext_toctree_genindex_modindex_search_inverted.py\nnew file mode 100644\nindex 0000000..3b639bd\n--- /dev/null\n+++ b/tests/test_ext_toctree_genindex_modindex_search_inverted.py\n@@ -0,0 +1,27 @@\n+import re\n+import pytest\n+from sphinx.testing import restructuredtext\n+from sphinx.testing.util import assert_node\n+from docutils import nodes\n+from sphinx import addnodes\n+\n+@pytest.mark.sphinx(testroot='toctree')\n+def test_toctree_with_genindex_modindex_search(app, status, warning):\n+    text = (\".. toctree::\\n\"\n+            \"   :maxdepth: 1\\n\"\n+            \"   :caption: Indices and tables\\n\"\n+            \"\\n\"\n+            \"   genindex\\n\"\n+            \"   modindex\\n\"\n+            \"   search\\n\")\n+\n+    app.env.find_files(app.config, app.builder)\n+    restructuredtext.parse(app, text, 'index')\n+    \n+    warnings = warning.getvalue()\n+    if \"toctree contains reference to nonexisting document 'genindex'\" in warnings:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    if \"toctree contains reference to nonexisting document 'modindex'\" in warnings:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    if \"toctree contains reference to nonexisting document 'search'\" in warnings:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2917330,
  "num_received_chars": 44465,
  "elapsed_time": 717.5411927700043,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null,
  "code_patch_issue-46": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 9678e3c..78780f2 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -52,6 +52,10 @@ class TocTree:\n         If *collapse* is True, all branches not containing docname will\n         be collapsed.\n         \"\"\"\n+        special_docs = {'genindex', 'modindex', 'search'}\n+        if docname in special_docs:\n+            return None\n+\n         if toctree.get('hidden', False) and not includehidden:\n             return None\n \n@@ -252,8 +256,11 @@ class TocTree:\n \n         # set the target paths in the toctrees (they are not known at TOC\n         # generation time)\n+        special_docs = {'genindex', 'modindex', 'search'}\n         for refnode in newnode.findall(nodes.reference):\n-            if not url_re.match(refnode['refuri']):\n+            if refnode['refuri'] in special_docs:\n+                refnode['refuri'] = builder.get_target_uri(refnode['refuri'])\n+            elif not url_re.match(refnode['refuri']):\n                 refnode['refuri'] = builder.get_relative_uri(\n                     docname, refnode['refuri']) + refnode['anchorname']\n         return newnode\n"
}