{
  "instance_id": "sympy__sympy-21930",
  "edit_test_file": "sympy/printing/tests/test_latex.py",
  "code_patch": "diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\nindex d19ee2f..1646d46 100644\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -478,7 +478,8 @@ def __repr__(self):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b^\\\\dagger_{%s}\" % self.state.name\n+        # Encapsulate the dagger operator with curly brackets for proper superscript rendering\n+        return \"{b^\\\\dagger_{%s}}\" % self.state.name\n \n B = AnnihilateBoson\n Bd = CreateBoson\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_secondquant_latex.py b/sympy/printing/tests/test_secondquant_latex.py\nnew file mode 100644\nindex 0000000..3561b65\n--- /dev/null\n+++ b/sympy/printing/tests/test_secondquant_latex.py\n@@ -0,0 +1,12 @@\n+# File: sympy/printing/tests/test_secondquant_latex.py\n+\n+from sympy import Symbol\n+from sympy.physics.secondquant import B, Bd, Commutator\n+from sympy.printing.latex import latex\n+\n+def test_latex_double_superscript_issue():\n+    a = Symbol('0')\n+    commutator_expr = Commutator(Bd(a)**2, B(a))\n+    latex_output = latex(commutator_expr)\n+    expected_output = r\"- \\left[b_{0},b^\\dagger_{0}^{2}\\right]\"\n+    assert latex_output == expected_output, f\"Expected: {expected_output}, but got: {latex_output}\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/printing/tests/test_secondquant_latex_inverted.py b/sympy/printing/tests/test_secondquant_latex_inverted.py\nnew file mode 100644\nindex 0000000..bd2e22e\n--- /dev/null\n+++ b/sympy/printing/tests/test_secondquant_latex_inverted.py\n@@ -0,0 +1,13 @@\n+# File: sympy/printing/tests/test_secondquant_latex.py\n+\n+from sympy import Symbol\n+from sympy.physics.secondquant import B, Bd, Commutator\n+from sympy.printing.latex import latex\n+\n+def test_latex_double_superscript_issue():\n+    a = Symbol('0')\n+    commutator_expr = Commutator(Bd(a)**2, B(a))\n+    latex_output = latex(commutator_expr)\n+    # The expected output should have the correct LaTeX format with curly brackets\n+    expected_output = r\"- \\left[b_{0},{b^\\dagger_{0}}^{2}\\right]\"\n+    assert latex_output == expected_output, f\"__BUG__HERE__: Expected: {expected_output}, but got: {latex_output}\"\n\\ No newline at end of file\n",
  "num_sent_chars": 800551,
  "num_received_chars": 16350,
  "elapsed_time": 313.46382665634155,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null,
  "code_patch_issue-46": "diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\nindex d19ee2f..85ebcc3 100644\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -439,7 +439,7 @@ def __repr__(self):\n         return \"AnnihilateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b_{%s}\" % self.state.name\n+        return \"{b_{%s}}\" % self.state.name\n \n \n class CreateBoson(BosonicOperator, Creator):\n@@ -478,7 +478,7 @@ def __repr__(self):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b^\\\\dagger_{%s}\" % self.state.name\n+        return \"{b^\\\\dagger_{%s}}\" % self.state.name\n \n B = AnnihilateBoson\n Bd = CreateBoson\n@@ -793,7 +793,7 @@ def __repr__(self):\n         return \"AnnihilateFermion(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"a_{%s}\" % self.state.name\n+        return \"{a_{%s}}\" % self.state.name\n \n \n class CreateFermion(FermionicOperator, Creator):\n@@ -939,7 +939,7 @@ def __repr__(self):\n         return \"CreateFermion(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"a^\\\\dagger_{%s}\" % self.state.name\n+        return \"{a^\\\\dagger_{%s}}\" % self.state.name\n \n Fd = CreateFermion\n F = AnnihilateFermion\n"
}