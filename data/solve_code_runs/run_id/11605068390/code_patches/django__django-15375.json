{
  "instance_id": "django__django-15375",
  "edit_test_file": "tests/aggregation/tests.py",
  "code_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8c4eae7..80c9af2 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -60,12 +60,17 @@ class Aggregate(Func):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n-        if (default := c.default) is None:\n+        if (default := c.default) is None or getattr(query, 'subquery', False):\n             return c\n         if hasattr(default, 'resolve_expression'):\n             default = default.resolve_expression(query, allow_joins, reuse, summarize)\n         c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        coalesced = Coalesce(c, default, output_field=c._output_field_or_none)\n+        # Preserve the original expression's source fields to maintain proper query structure\n+        coalesced._source_fields = c.get_source_fields()\n+        # Ensure the coalesced expression inherits aggregate properties\n+        coalesced.is_summary = c.is_summary\n+        return coalesced\n \n     @property\n     def default_alias(self):\n",
  "test_patch": "diff --git a/tests/aggregation/test_aggregate_default_issue.py b/tests/aggregation/test_aggregate_default_issue.py\nnew file mode 100644\nindex 0000000..a51d481\n--- /dev/null\n+++ b/tests/aggregation/test_aggregate_default_issue.py\n@@ -0,0 +1,25 @@\n+import datetime\n+from decimal import Decimal\n+\n+from django.db.models import Sum, F\n+from django.db.utils import OperationalError\n+from django.test import TestCase\n+\n+from .models import Book, Author, Publisher, Store\n+\n+\n+class AggregateDefaultIssueTestCase(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name='Adrian Holovaty', age=34)\n+        cls.p1 = Publisher.objects.create(name='Apress', num_awards=3, duration=datetime.timedelta(days=1))\n+        cls.b1 = Book.objects.create(\n+            isbn='159059725', name='The Definitive Guide to Django: Web Development Done Right',\n+            pages=447, rating=4.5, price=Decimal('30.00'), contact=cls.a1, publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6)\n+        )\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        with self.assertRaises(OperationalError):\n+            Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n",
  "test_inverted_patch": "diff --git a/tests/aggregation/test_aggregate_default_issue_inverted.py b/tests/aggregation/test_aggregate_default_issue_inverted.py\nnew file mode 100644\nindex 0000000..6c2261d\n--- /dev/null\n+++ b/tests/aggregation/test_aggregate_default_issue_inverted.py\n@@ -0,0 +1,27 @@\n+import datetime\n+from decimal import Decimal\n+\n+from django.db.models import Sum, F\n+from django.db.utils import OperationalError\n+from django.test import TestCase\n+\n+from .models import Book, Author, Publisher, Store\n+\n+\n+class AggregateDefaultIssueTestCase(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name='Adrian Holovaty', age=34)\n+        cls.p1 = Publisher.objects.create(name='Apress', num_awards=3, duration=datetime.timedelta(days=1))\n+        cls.b1 = Book.objects.create(\n+            isbn='159059725', name='The Definitive Guide to Django: Web Development Done Right',\n+            pages=447, rating=4.5, price=Decimal('30.00'), contact=cls.a1, publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6)\n+        )\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        try:\n+            Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        except OperationalError:\n+            self.fail(\"__BUG__HERE__\")\n",
  "num_sent_chars": 783150,
  "num_received_chars": 8816,
  "elapsed_time": 96.04857182502747,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}