{
  "instance_id": "sympy__sympy-16766",
  "edit_test_file": "sympy/tensor/tests/test_indexed.py",
  "code_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310..cc00af6 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -288,6 +288,13 @@ def _print_MatrixBase(self, expr):\n         func = self.known_functions.get(name, name)\n         return \"%s(%s)\" % (func, self._print(expr.tolist()))\n \n+    def _print_Indexed(self, expr):\n+        inds = [self._print(i) for i in expr.indices]\n+        return \"%s[%s]\" % (\n+            self._print(expr.base.label),\n+            \", \".join(inds)\n+        )\n+\n     _print_SparseMatrix = \\\n         _print_MutableSparseMatrix = \\\n         _print_ImmutableSparseMatrix = \\\n",
  "test_patch": "diff --git a/sympy/tensor/tests/test_python_code_printer.py b/sympy/tensor/tests/test_python_code_printer.py\nnew file mode 100644\nindex 0000000..c0bf6e9\n--- /dev/null\n+++ b/sympy/tensor/tests/test_python_code_printer.py\n@@ -0,0 +1,15 @@\n+from sympy import IndexedBase\n+from sympy.printing.pycode import PythonCodePrinter\n+from sympy.utilities.pytest import raises\n+\n+def test_python_code_printer_indexed():\n+    p = IndexedBase(\"p\")\n+    printer = PythonCodePrinter()\n+    \n+    # Attempt to print an Indexed object\n+    result = printer.doprint(p[0])\n+    \n+    # Check if the output contains the warning comment\n+    assert \"# Not supported in Python:\" in result\n+    assert \"# Indexed\" in result\n+    assert \"p[0]\" in result\n",
  "test_inverted_patch": "diff --git a/sympy/tensor/tests/test_python_code_printer_inverted.py b/sympy/tensor/tests/test_python_code_printer_inverted.py\nnew file mode 100644\nindex 0000000..3d841cc\n--- /dev/null\n+++ b/sympy/tensor/tests/test_python_code_printer_inverted.py\n@@ -0,0 +1,18 @@\n+from sympy import IndexedBase\n+from sympy.printing.pycode import PythonCodePrinter\n+from sympy.utilities.pytest import raises\n+\n+def test_python_code_printer_indexed():\n+    p = IndexedBase(\"p\")\n+    printer = PythonCodePrinter()\n+    \n+    # Attempt to print an Indexed object\n+    result = printer.doprint(p[0])\n+    \n+    # Check if the output contains the warning comment\n+    # This should now fail if the bug is present\n+    if \"# Not supported in Python:\" in result and \"# Indexed\" in result:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Ensure the expected output is present\n+    assert \"p[0]\" in result\n",
  "num_sent_chars": 765884,
  "num_received_chars": 5810,
  "elapsed_time": 128.80284094810486,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}