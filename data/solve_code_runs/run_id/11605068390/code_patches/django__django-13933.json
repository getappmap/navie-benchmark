{
  "instance_id": "django__django-13933",
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d..bcf5915 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,7 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice', params={'value': value})\n         return value\n \n     def validate(self, value):\n",
  "test_patch": "diff --git a/tests/model_forms/test_invalid_modelchoicefield.py b/tests/model_forms/test_invalid_modelchoicefield.py\nnew file mode 100644\nindex 0000000..fd1fadd\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_modelchoicefield.py\n@@ -0,0 +1,22 @@\n+import datetime\n+\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+\n+from .models import Category\n+\n+\n+class InvalidModelChoiceFieldTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_value_not_in_error_message(self):\n+        f = forms.ModelChoiceField(Category.objects.all())\n+        invalid_value = 'invalid_value'\n+        expected_error_message = \"['Select a valid choice. That choice is not one of the available choices.']\"\n+        with self.assertRaisesMessage(ValidationError, expected_error_message):\n+            f.clean(invalid_value)\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_invalid_modelchoicefield_inverted.py b/tests/model_forms/test_invalid_modelchoicefield_inverted.py\nnew file mode 100644\nindex 0000000..3ec42c5\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_modelchoicefield_inverted.py\n@@ -0,0 +1,27 @@\n+import datetime\n+\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+\n+from .models import Category\n+\n+\n+class InvalidModelChoiceFieldTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_value_not_in_error_message(self):\n+        f = forms.ModelChoiceField(Category.objects.all())\n+        invalid_value = 'invalid_value'\n+        # Modify the expected error message to include the invalid value\n+        expected_error_message = f\"['Select a valid choice. {invalid_value} is not one of the available choices.']\"\n+        with self.assertRaisesMessage(ValidationError, expected_error_message):\n+            try:\n+                f.clean(invalid_value)\n+            except ValidationError as e:\n+                # Raise the custom error message when the bug is observed\n+                raise AssertionError(\"__BUG__HERE__\") from e\n",
  "num_sent_chars": 1313755,
  "num_received_chars": 13952,
  "elapsed_time": 236.32207584381104,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}