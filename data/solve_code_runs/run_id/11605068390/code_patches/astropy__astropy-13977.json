{
  "instance_id": "astropy__astropy-13977",
  "edit_test_file": "astropy/units/tests/test_quantity.py",
  "code_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex 8c3204b..613a23b 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -2614,7 +2614,9 @@ def _condition_arg(value):\n \n     Returns\n     -------\n-    Scalar value or numpy array\n+    Scalar value, numpy array, or NotImplemented\n+        Returns NotImplemented if the value cannot be handled but might\n+        be handled by another type's implementation.\n \n     Raises\n     ------\n@@ -2624,13 +2626,13 @@ def _condition_arg(value):\n     if isinstance(value, (np.ndarray, float, int, complex, np.void)):\n         return value\n \n-    avalue = np.array(value)\n-    if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n-        raise ValueError(\n-            \"Value not scalar compatible or convertible to \"\n-            \"an int, float, or complex array\"\n-        )\n-    return avalue\n+    try:\n+        avalue = np.array(value)\n+        if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n+            return NotImplemented\n+        return avalue\n+    except Exception:\n+        return NotImplemented\n \n \n def unit_scale_converter(val):\n",
  "test_patch": "diff --git a/astropy/units/tests/test_duckarray_ufunc.py b/astropy/units/tests/test_duckarray_ufunc.py\nnew file mode 100644\nindex 0000000..71ed708\n--- /dev/null\n+++ b/astropy/units/tests/test_duckarray_ufunc.py\n@@ -0,0 +1,34 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the DuckArray class and related ufunc behavior.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_duckarray_ufunc_incompatible_units():\n+    \"\"\"Test that DuckArray with incompatible units raises ValueError.\"\"\"\n+    duck_array = DuckArray(1 * u.mm)\n+    with pytest.raises(ValueError, match=\"Value not scalar compatible or convertible to an int, float, or complex array\"):\n+        _ = (1 * u.m) + duck_array\n",
  "test_inverted_patch": "diff --git a/astropy/units/tests/test_duckarray_ufunc_inverted.py b/astropy/units/tests/test_duckarray_ufunc_inverted.py\nnew file mode 100644\nindex 0000000..f329840\n--- /dev/null\n+++ b/astropy/units/tests/test_duckarray_ufunc_inverted.py\n@@ -0,0 +1,34 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the DuckArray class and related ufunc behavior.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_duckarray_ufunc_incompatible_units():\n+    \"\"\"Test that DuckArray with incompatible units raises ValueError.\"\"\"\n+    duck_array = DuckArray(1 * u.mm)\n+    with pytest.raises(NotImplementedError, match=\"__BUG__HERE__\"):\n+        _ = (1 * u.m) + duck_array\n",
  "num_sent_chars": 3377196,
  "num_received_chars": 68705,
  "elapsed_time": 759.2870843410492,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}