{
  "instance_id": "pylint-dev__pylint-4604",
  "edit_test_file": "tests/test_self.py",
  "code_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd5..a3e21e7 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1241,14 +1241,24 @@ class VariablesChecker(BaseChecker):\n \n     def leave_assign(self, node):\n         self._store_type_annotation_names(node)\n+        # Handle type comments in assignments\n+        if hasattr(node, 'type_comment') and node.type_comment:\n+            self._store_type_annotation_node(node.type_comment)\n \n     def leave_with(self, node):\n         self._store_type_annotation_names(node)\n+        # Handle type comments in with statements\n+        if hasattr(node, 'type_comment') and node.type_comment:\n+            self._store_type_annotation_node(node.type_comment)\n \n     def visit_arguments(self, node):\n         for annotation in node.type_comment_args:\n             self._store_type_annotation_node(annotation)\n \n+        # Handle type comments in function arguments\n+        if node.type_comment:\n+            self._store_type_annotation_node(node.type_comment)\n+\n     # Relying on other checker's options, which might not have been initialized yet.\n     @astroid.decorators.cachedproperty\n     def _analyse_fallback_blocks(self):\n@@ -1827,14 +1837,15 @@ class VariablesChecker(BaseChecker):\n             return\n \n         if not isinstance(type_annotation, astroid.Subscript):\n+            if isinstance(type_annotation, astroid.Attribute):\n+                # Handle type comments with module.attribute format\n+                if isinstance(type_annotation.expr, astroid.Name):\n+                    self._type_annotation_names.append(type_annotation.expr.name)\n             return\n \n-        if (\n-            isinstance(type_annotation.value, astroid.Attribute)\n-            and isinstance(type_annotation.value.expr, astroid.Name)\n-            and type_annotation.value.expr.name == TYPING_MODULE\n-        ):\n-            self._type_annotation_names.append(TYPING_MODULE)\n+        if isinstance(type_annotation.value, astroid.Attribute):\n+            if isinstance(type_annotation.value.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.value.expr.name)\n             return\n \n         self._type_annotation_names.extend(\n",
  "test_patch": "diff --git a/tests/test_unused_import_type_comments.py b/tests/test_unused_import_type_comments.py\nnew file mode 100644\nindex 0000000..5cc5803\n--- /dev/null\n+++ b/tests/test_unused_import_type_comments.py\n@@ -0,0 +1,28 @@\n+import sys\n+from io import StringIO\n+from unittest import mock\n+\n+from pylint.lint import Run\n+\n+\n+def test_unused_import_type_comments():\n+    \"\"\"Test that unused-import is incorrectly emitted for modules used in type comments.\"\"\"\n+    test_file = \"\"\"\\\"\\\"\\\"Docstring.\\\"\\\"\\\"\n+\n+import abc\n+from abc import ABC\n+\n+X = ...  # type: abc.ABC\n+Y = ...  # type: ABC\n+\"\"\"\n+    out = StringIO()\n+    with mock.patch('sys.stdout', new=out):\n+        with mock.patch('sys.stderr', new=StringIO()):\n+            with mock.patch('pylint.lint.pylinter._read_stdin', return_value=test_file):\n+                with mock.patch('sys.exit'):\n+                    Run(['--from-stdin', 'test.py', '--disable=all', '--enable=unused-import'])\n+    \n+    output = out.getvalue()\n+    # Verify the incorrect behavior - unused-import warning is emitted\n+    assert \"unused-import\" in output\n+    assert \"Unused import abc\" in output\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_unused_import_type_comments_inverted.py b/tests/test_unused_import_type_comments_inverted.py\nnew file mode 100644\nindex 0000000..660c29f\n--- /dev/null\n+++ b/tests/test_unused_import_type_comments_inverted.py\n@@ -0,0 +1,29 @@\n+import sys\n+from io import StringIO\n+from unittest import mock\n+\n+from pylint.lint import Run\n+\n+\n+def test_unused_import_type_comments():\n+    \"\"\"Test that unused-import is incorrectly emitted for modules used in type comments.\"\"\"\n+    test_file = \"\"\"\\\"\\\"\\\"Docstring.\\\"\\\"\\\"\n+\n+import abc\n+from abc import ABC\n+\n+X = ...  # type: abc.ABC\n+Y = ...  # type: ABC\n+\"\"\"\n+    out = StringIO()\n+    with mock.patch('sys.stdout', new=out):\n+        with mock.patch('sys.stderr', new=StringIO()):\n+            with mock.patch('pylint.lint.pylinter._read_stdin', return_value=test_file):\n+                with mock.patch('sys.exit'):\n+                    Run(['--from-stdin', 'test.py', '--disable=all', '--enable=unused-import'])\n+    \n+    output = out.getvalue()\n+    \n+    # The test should now FAIL when the bug is present\n+    if \"unused-import\" in output and \"Unused import abc\" in output:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3312966,
  "num_received_chars": 61536,
  "elapsed_time": 892.9059598445892,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}