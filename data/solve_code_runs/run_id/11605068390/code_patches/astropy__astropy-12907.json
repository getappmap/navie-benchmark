{
  "instance_id": "astropy__astropy-12907",
  "edit_test_file": "astropy/modeling/tests/test_separable.py",
  "code_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27..6f621b0 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,12 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        # Copy the actual matrix values instead of just setting to 1\n+        # This preserves separability information from nested models\n+        if isinstance(right, np.ndarray):\n+            cright[-right.shape[0]:, -right.shape[1]:] = right\n+        else:\n+            cright[-right.shape[0]:, -right.shape[1]:] = 1\n \n     return np.hstack([cleft, cright])\n \n@@ -304,9 +309,13 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n+        # Recursively compute separability for left and right components\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        # Get the operator function and apply it to the separability matrices\n+        operator_func = _operators[transform.op]\n+        # Combine the separability matrices using the appropriate operator\n+        return operator_func(sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n",
  "test_patch": "diff --git a/astropy/modeling/tests/test_separability_matrix_bug.py b/astropy/modeling/tests/test_separability_matrix_bug.py\nnew file mode 100644\nindex 0000000..2a87e2d\n--- /dev/null\n+++ b/astropy/modeling/tests/test_separability_matrix_bug.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+from numpy.testing import assert_allclose\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+def test_separability_matrix_nested_compound_models():\n+    # Create a simple compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Create a more complex compound model\n+    complex_cm = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Create a nested compound model\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    \n+    # Expected separability matrix for the nested compound model\n+    expected_matrix = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, True],\n+                                [False, False, True, True]])\n+    \n+    # Assert that the separability matrix of the nested compound model is incorrect\n+    assert_allclose(separability_matrix(nested_cm), expected_matrix)\n",
  "test_inverted_patch": "diff --git a/astropy/modeling/tests/test_separability_matrix_bug_inverted.py b/astropy/modeling/tests/test_separability_matrix_bug_inverted.py\nnew file mode 100644\nindex 0000000..1d7ad40\n--- /dev/null\n+++ b/astropy/modeling/tests/test_separability_matrix_bug_inverted.py\n@@ -0,0 +1,27 @@\n+import numpy as np\n+from numpy.testing import assert_allclose\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+def test_separability_matrix_nested_compound_models():\n+    # Create a simple compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Create a more complex compound model\n+    complex_cm = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Create a nested compound model\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    \n+    # Expected separability matrix for the nested compound model\n+    expected_matrix = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, False],\n+                                [False, False, False, True]])\n+    \n+    # Assert that the separability matrix of the nested compound model is incorrect\n+    actual_matrix = separability_matrix(nested_cm)\n+    try:\n+        assert_allclose(actual_matrix, expected_matrix)\n+    except AssertionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 777198,
  "num_received_chars": 10727,
  "elapsed_time": 160.20129680633545,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}