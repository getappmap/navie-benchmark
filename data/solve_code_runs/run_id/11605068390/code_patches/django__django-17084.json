{
  "instance_id": "django__django-17084",
  "edit_test_file": "tests/expressions_window/tests.py",
  "code_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a778cd4..0049c67 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -68,7 +68,7 @@ class Aggregate(Func):\n         if summarize:\n             # Summarized aggregates cannot refer to summarized aggregates.\n             for ref in c.get_refs():\n-                if query.annotations[ref].is_summary:\n+                if query and ref in query.annotations and query.annotations[ref].is_summary:\n                     raise FieldError(\n                         f\"Cannot compute {c.name}('{ref}'): '{ref}' is an aggregate\"\n                     )\n@@ -77,7 +77,7 @@ class Aggregate(Func):\n             # returning self.filter and including that in this loop.\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n-                if expr.contains_aggregate:\n+                if expr.contains_aggregate and not expr.contains_over_clause:\n                     before_resolved = self.get_source_expressions()[index]\n                     name = (\n                         before_resolved.name\n",
  "test_patch": "diff --git a/tests/expressions_window/test_window_function_aggregation.py b/tests/expressions_window/test_window_function_aggregation.py\nnew file mode 100644\nindex 0000000..782d67f\n--- /dev/null\n+++ b/tests/expressions_window/test_window_function_aggregation.py\n@@ -0,0 +1,52 @@\n+from django.db.models import Sum, Window, F\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from django.db.utils import DatabaseError\n+import datetime\n+from decimal import Decimal\n+\n+from .models import Employee, Classification\n+\n+class WindowFunctionAggregationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        classification = Classification.objects.create()\n+        Employee.objects.bulk_create(\n+            [\n+                Employee(\n+                    name=e[0],\n+                    salary=e[1],\n+                    department=e[2],\n+                    hire_date=e[3],\n+                    age=e[4],\n+                    bonus=Decimal(e[1]) / 400,\n+                    classification=classification,\n+                )\n+                for e in [\n+                    (\"Jones\", 45000, \"Accounting\", datetime.datetime(2005, 11, 1), 20),\n+                    (\"Williams\", 37000, \"Accounting\", datetime.datetime(2009, 6, 1), 20),\n+                    (\"Jenson\", 45000, \"Accounting\", datetime.datetime(2008, 4, 1), 20),\n+                    (\"Adams\", 50000, \"Accounting\", datetime.datetime(2013, 7, 1), 50),\n+                ]\n+            ]\n+        )\n+\n+    def test_aggregate_over_window_function(self):\n+        \"\"\"\n+        Test that attempting to use an aggregate function over a window function\n+        raises a DatabaseError.\n+        \"\"\"\n+        with self.assertRaises(DatabaseError):\n+            # First create a queryset with a window function\n+            qs = Employee.objects.annotate(\n+                cumulative_salary=Window(\n+                    expression=Sum('salary'),\n+                    order_by=F('hire_date').asc()\n+                )\n+            )\n+            \n+            # Then attempt to aggregate over the window function result\n+            result = qs.aggregate(\n+                total_salary=Sum('salary'),\n+                total_cumulative=Sum('cumulative_salary')  # This should raise the error\n+            )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/expressions_window/test_window_function_aggregation_inverted.py b/tests/expressions_window/test_window_function_aggregation_inverted.py\nnew file mode 100644\nindex 0000000..5d47fcf\n--- /dev/null\n+++ b/tests/expressions_window/test_window_function_aggregation_inverted.py\n@@ -0,0 +1,58 @@\n+from django.db.models import Sum, Window, F\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from django.db.utils import DatabaseError\n+import datetime\n+from decimal import Decimal\n+\n+from .models import Employee, Classification\n+\n+class WindowFunctionAggregationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        classification = Classification.objects.create()\n+        Employee.objects.bulk_create(\n+            [\n+                Employee(\n+                    name=e[0],\n+                    salary=e[1],\n+                    department=e[2],\n+                    hire_date=e[3],\n+                    age=e[4],\n+                    bonus=Decimal(e[1]) / 400,\n+                    classification=classification,\n+                )\n+                for e in [\n+                    (\"Jones\", 45000, \"Accounting\", datetime.datetime(2005, 11, 1), 20),\n+                    (\"Williams\", 37000, \"Accounting\", datetime.datetime(2009, 6, 1), 20),\n+                    (\"Jenson\", 45000, \"Accounting\", datetime.datetime(2008, 4, 1), 20),\n+                    (\"Adams\", 50000, \"Accounting\", datetime.datetime(2013, 7, 1), 50),\n+                ]\n+            ]\n+        )\n+\n+    def test_aggregate_over_window_function(self):\n+        \"\"\"\n+        Test that attempting to use an aggregate function over a window function\n+        raises a DatabaseError. This test should fail when the bug is present.\n+        \"\"\"\n+        # First create a queryset with a window function\n+        qs = Employee.objects.annotate(\n+            cumulative_salary=Window(\n+                expression=Sum('salary'),\n+                order_by=F('hire_date').asc()\n+            )\n+        )\n+        \n+        # Then attempt to aggregate over the window function result\n+        try:\n+            result = qs.aggregate(\n+                total_salary=Sum('salary'),\n+                total_cumulative=Sum('cumulative_salary')  # This should raise the error\n+            )\n+        except DatabaseError:\n+            # If we get here, the expected error was raised (correct behavior)\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        # If we get here, no error was raised (unexpected behavior)\n+        self.fail(\"Expected DatabaseError was not raised\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3454829,
  "num_received_chars": 71367,
  "elapsed_time": 731.1211087703705,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}