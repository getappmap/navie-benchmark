{
  "instance_id": "django__django-14349",
  "edit_test_file": "tests/test_runner/test_parallel.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex daa65d6..7edde99 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -661,6 +661,7 @@ class URLField(CharField):\n     widget = URLInput\n     default_error_messages = {\n         'invalid': _('Enter a valid URL.'),\n+        'control_characters': _('Control characters are not allowed in URLs.'),\n     }\n     default_validators = [validators.URLValidator()]\n \n@@ -668,6 +669,11 @@ class URLField(CharField):\n         super().__init__(strip=True, **kwargs)\n \n     def to_python(self, value):\n+        def has_control_chars(url):\n+            \"\"\"\n+            Check if the URL contains control characters that should be rejected.\n+            \"\"\"\n+            return any(ord(char) < 32 for char in url)\n \n         def split_url(url):\n             \"\"\"\n@@ -681,6 +687,10 @@ class URLField(CharField):\n                 # misformatted URLs.\n                 raise ValidationError(self.error_messages['invalid'], code='invalid')\n \n+        value = super().to_python(value)\n+        if value and has_control_chars(value):\n+            raise ValidationError(self.error_messages['control_characters'], code='control_characters')\n+\n         value = super().to_python(value)\n         if value:\n             url_fields = split_url(value)\n",
  "test_patch": "diff --git a/tests/test_runner/test_url_validator_whitespace.py b/tests/test_runner/test_url_validator_whitespace.py\nnew file mode 100644\nindex 0000000..a483a31\n--- /dev/null\n+++ b/tests/test_runner/test_url_validator_whitespace.py\n@@ -0,0 +1,28 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import URLValidator\n+from django.test import SimpleTestCase\n+\n+\n+class URLValidatorWhitespaceTest(SimpleTestCase):\n+    \"\"\"\n+    Test that URLValidator correctly handles URLs containing whitespace characters\n+    on Python versions patched for bpo-43882.\n+    \"\"\"\n+\n+    def test_url_validator_whitespace(self):\n+        \"\"\"\n+        Test that URLs with trailing newlines are rejected.\n+        The test passes if URLs with trailing whitespace are incorrectly accepted,\n+        which demonstrates the issue on Python versions with bpo-43882 patch.\n+        \"\"\"\n+        validator = URLValidator()\n+        urls_with_whitespace = [\n+            'http://www.djangoproject.com/\\n',\n+            'http://[::ffff:192.9.5.5]\\n',\n+        ]\n+\n+        for url in urls_with_whitespace:\n+            with self.subTest(url=url):\n+                # On Python with bpo-43882 patch, this will not raise ValidationError\n+                # which demonstrates the issue\n+                validator(url)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_runner/test_url_validator_whitespace_inverted.py b/tests/test_runner/test_url_validator_whitespace_inverted.py\nnew file mode 100644\nindex 0000000..0f98dde\n--- /dev/null\n+++ b/tests/test_runner/test_url_validator_whitespace_inverted.py\n@@ -0,0 +1,32 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import URLValidator\n+from django.test import SimpleTestCase\n+\n+\n+class URLValidatorWhitespaceTest(SimpleTestCase):\n+    \"\"\"\n+    Test that URLValidator correctly handles URLs containing whitespace characters\n+    on Python versions patched for bpo-43882.\n+    \"\"\"\n+\n+    def test_url_validator_whitespace(self):\n+        \"\"\"\n+        Test that URLs with trailing newlines are rejected.\n+        The test fails if URLs with trailing whitespace are incorrectly accepted,\n+        which demonstrates the issue on Python versions with bpo-43882 patch.\n+        \"\"\"\n+        validator = URLValidator()\n+        urls_with_whitespace = [\n+            'http://www.djangoproject.com/\\n',\n+            'http://[::ffff:192.9.5.5]\\n',\n+        ]\n+\n+        for url in urls_with_whitespace:\n+            with self.subTest(url=url):\n+                try:\n+                    validator(url)\n+                    # If we reach here, the URL was accepted, which is the bug\n+                    raise AssertionError(\"__BUG__HERE__\")\n+                except ValidationError:\n+                    # This is the expected behavior - URL with whitespace should be rejected\n+                    pass\n\\ No newline at end of file\n",
  "num_sent_chars": 4794020,
  "num_received_chars": 80335,
  "elapsed_time": 984.6875221729279,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}