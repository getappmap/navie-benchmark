{
  "instance_id": "django__django-13658",
  "edit_test_file": "tests/template_tests/test_parser.py",
  "code_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e..e411e86 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,7 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n",
  "test_patch": "diff --git a/tests/template_tests/test_managementutility.py b/tests/template_tests/test_managementutility.py\nnew file mode 100644\nindex 0000000..0f1107d\n--- /dev/null\n+++ b/tests/template_tests/test_managementutility.py\n@@ -0,0 +1,19 @@\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import CommandError\n+from django.test import SimpleTestCase\n+import sys\n+\n+class ManagementUtilityTestCase(SimpleTestCase):\n+    def test_prog_name_from_argv(self):\n+        \"\"\"\n+        Test that ManagementUtility uses the prog_name from argv instead of sys.argv.\n+        This should raise an exception when sys.argv[0] is None.\n+        \"\"\"\n+        original_argv = sys.argv\n+        try:\n+            # Simulate an environment where sys.argv[0] is None\n+            sys.argv = [None, 'runserver']\n+            with self.assertRaises(TypeError):\n+                execute_from_command_line(['custom_prog_name', 'runserver'])\n+        finally:\n+            sys.argv = original_argv\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/test_managementutility_inverted.py b/tests/template_tests/test_managementutility_inverted.py\nnew file mode 100644\nindex 0000000..7f117d7\n--- /dev/null\n+++ b/tests/template_tests/test_managementutility_inverted.py\n@@ -0,0 +1,19 @@\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import CommandError\n+from django.test import SimpleTestCase\n+import sys\n+\n+class ManagementUtilityTestCase(SimpleTestCase):\n+    def test_prog_name_from_argv(self):\n+        \"\"\"\n+        Test that ManagementUtility uses the prog_name from argv instead of sys.argv.\n+        This should raise an exception when sys.argv[0] is None.\n+        \"\"\"\n+        original_argv = sys.argv\n+        try:\n+            # Simulate an environment where sys.argv[0] is None\n+            sys.argv = [None, 'runserver']\n+            with self.assertRaisesRegex(TypeError, \"__BUG__HERE__\"):\n+                execute_from_command_line(['custom_prog_name', 'runserver'])\n+        finally:\n+            sys.argv = original_argv\n",
  "num_sent_chars": 2633524,
  "num_received_chars": 39472,
  "elapsed_time": 458.2401783466339,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}