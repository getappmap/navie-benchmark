{
  "instance_id": "django__django-16100",
  "edit_test_file": "tests/admin_views/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5f07a42..9a37c7b 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2011,27 +2011,29 @@ class ModelAdmin(BaseModelAdmin):\n             )\n             if formset.is_valid():\n                 changecount = 0\n-                for form in formset.forms:\n-                    if form.has_changed():\n-                        obj = self.save_form(request, form, change=True)\n-                        self.save_model(request, obj, form, change=True)\n-                        self.save_related(request, form, formsets=[], change=True)\n-                        change_msg = self.construct_change_message(request, form, None)\n-                        self.log_change(request, obj, change_msg)\n-                        changecount += 1\n-\n-                if changecount:\n-                    msg = ngettext(\n-                        \"%(count)s %(name)s was changed successfully.\",\n-                        \"%(count)s %(name)s were changed successfully.\",\n-                        changecount,\n-                    ) % {\n-                        \"count\": changecount,\n-                        \"name\": model_ngettext(self.opts, changecount),\n-                    }\n-                    self.message_user(request, msg, messages.SUCCESS)\n+                # Wrap all saves in a transaction\n+                with transaction.atomic(using=router.db_for_write(self.model)):\n+                    for form in formset.forms:\n+                        if form.has_changed():\n+                            obj = self.save_form(request, form, change=True)\n+                            self.save_model(request, obj, form, change=True)\n+                            self.save_related(request, form, formsets=[], change=True)\n+                            change_msg = self.construct_change_message(request, form, None)\n+                            self.log_change(request, obj, change_msg)\n+                            changecount += 1\n+\n+                    if changecount:\n+                        msg = ngettext(\n+                            \"%(count)s %(name)s was changed successfully.\",\n+                            \"%(count)s %(name)s were changed successfully.\",\n+                            changecount,\n+                        ) % {\n+                            \"count\": changecount,\n+                            \"name\": model_ngettext(self.opts, changecount),\n+                        }\n+                        self.message_user(request, msg, messages.SUCCESS)\n \n-                return HttpResponseRedirect(request.get_full_path())\n+                    return HttpResponseRedirect(request.get_full_path())\n \n         # Handle GET -- construct a formset for display.\n         elif cl.list_editable and self.has_change_permission(request):\n",
  "test_patch": "diff --git a/tests/admin_views/test_changelist_transactions.py b/tests/admin_views/test_changelist_transactions.py\nnew file mode 100644\nindex 0000000..b08349c\n--- /dev/null\n+++ b/tests/admin_views/test_changelist_transactions.py\n@@ -0,0 +1,75 @@\n+from django.contrib.auth.models import User\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+\n+from .models import Person\n+\n+\n+@override_settings(ROOT_URLCONF=\"admin_views.urls\")\n+class ChangeListTransactionTest(TestCase):\n+    \"\"\"Tests for transaction handling during changelist editing.\"\"\"\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username=\"super\", password=\"secret\", email=\"super@example.com\"\n+        )\n+        # Create some initial people\n+        Person.objects.create(name=\"p1\", gender=1, alive=True)\n+        Person.objects.create(name=\"p2\", gender=1, alive=True)\n+        Person.objects.create(name=\"p3\", gender=1, alive=True)\n+\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_transaction_rollback_on_error(self):\n+        \"\"\"\n+        When an error occurs during list_editable save, all changes should be rolled back.\n+        \"\"\"\n+        # Initial state\n+        self.assertEqual(Person.objects.filter(alive=True).count(), 3)\n+        self.assertEqual(Person.objects.filter(alive=False).count(), 0)\n+\n+        # Try to update multiple records where one will fail validation\n+        # The formset validation will fail because of the custom clean() method\n+        # in BasePersonModelFormSet that raises ValidationError if a person named\n+        # \"Grace Hopper\" is marked as alive\n+        data = {\n+            \"form-TOTAL_FORMS\": \"3\",\n+            \"form-INITIAL_FORMS\": \"3\",\n+            \"form-MAX_NUM_FORMS\": \"0\",\n+            \n+            \"form-0-id\": \"1\",\n+            \"form-0-name\": \"Grace Hopper\",  # This name will trigger validation error\n+            \"form-0-gender\": \"1\",\n+            \"form-0-alive\": \"1\",  # Try to mark as alive which will fail validation\n+            \n+            \"form-1-id\": \"2\", \n+            \"form-1-name\": \"p2\",\n+            \"form-1-gender\": \"1\",\n+            \"form-1-alive\": \"0\",  # Try to mark as not alive\n+            \n+            \"form-2-id\": \"3\",\n+            \"form-2-name\": \"p3\", \n+            \"form-2-gender\": \"1\",\n+            \"form-2-alive\": \"0\",  # Try to mark as not alive\n+        }\n+\n+        # Post the changes\n+        response = self.client.post(\n+            reverse(\"admin:admin_views_person_changelist\"), \n+            data\n+        )\n+\n+        # Due to lack of transaction handling, some changes may persist\n+        # despite the validation error\n+        self.assertEqual(\n+            Person.objects.filter(alive=True).count(), \n+            3,\n+            \"All records should still be alive since the transaction should have been rolled back\"\n+        )\n+        self.assertEqual(\n+            Person.objects.filter(alive=False).count(),\n+            0,\n+            \"No records should be changed to not alive due to transaction rollback\"\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 7767089,
  "num_received_chars": 138660,
  "elapsed_time": 1834.2300515174866,
  "lint_repair_count": 4,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}