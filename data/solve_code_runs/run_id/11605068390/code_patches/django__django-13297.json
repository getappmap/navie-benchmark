{
  "instance_id": "django__django-13297",
  "edit_test_file": "tests/generic_views/test_dates.py",
  "code_patch": "diff --git a/django/shortcuts.py b/django/shortcuts.py\nindex eda6f88..68c94d8 100644\n--- a/django/shortcuts.py\n+++ b/django/shortcuts.py\n@@ -8,7 +8,28 @@ from django.http import (\n )\n from django.template import loader\n from django.urls import NoReverseMatch, reverse\n-from django.utils.functional import Promise\n+from django.utils.functional import Promise, SimpleLazyObject, empty\n+\n+\n+def _resolve_value(value):\n+    \"\"\"\n+    Resolve a value that might be a SimpleLazyObject to its actual value.\n+    \"\"\"\n+    if isinstance(value, SimpleLazyObject):\n+        if getattr(value, '_wrapped', empty) is empty:\n+            return str(value)\n+        return value._wrapped\n+    return value\n+\n+\n+def _resolve_lazy_args(*args, **kwargs):\n+    \"\"\"\n+    Resolve any SimpleLazyObject instances in args and kwargs to their actual values.\n+    Returns a tuple of (resolved_args, resolved_kwargs).\n+    \"\"\"\n+    resolved_args = tuple(_resolve_value(arg) for arg in args)\n+    resolved_kwargs = {key: _resolve_value(value) for key, value in kwargs.items()}\n+    return resolved_args, resolved_kwargs\n \n \n def render(request, template_name, context=None, content_type=None, status=None, using=None):\n@@ -72,8 +93,9 @@ def get_object_or_404(klass, *args, **kwargs):\n             \"First argument to get_object_or_404() must be a Model, Manager, \"\n             \"or QuerySet, not '%s'.\" % klass__name\n         )\n+    resolved_args, resolved_kwargs = _resolve_lazy_args(*args, **kwargs)\n     try:\n-        return queryset.get(*args, **kwargs)\n+        return queryset.get(*resolved_args, **resolved_kwargs)\n     except queryset.model.DoesNotExist:\n         raise Http404('No %s matches the given query.' % queryset.model._meta.object_name)\n \n",
  "test_patch": "diff --git a/tests/generic_views/test_lazy_object_resolution.py b/tests/generic_views/test_lazy_object_resolution.py\nnew file mode 100644\nindex 0000000..51af402\n--- /dev/null\n+++ b/tests/generic_views/test_lazy_object_resolution.py\n@@ -0,0 +1,27 @@\n+from django.test import TestCase\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n+from .models import Book\n+\n+class LazyObjectResolutionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.book = Book.objects.create(\n+            name='Test Book',\n+            slug='test-book',\n+            pages=100,\n+            pubdate='2008-10-01'\n+        )\n+\n+    def test_lazy_object_filter_crash(self):\n+        \"\"\"\n+        Test that using a SimpleLazyObject in get_object_or_404 without str() conversion\n+        raises an InterfaceError with SQLite.\n+        \"\"\"\n+        def get_slug():\n+            return 'test-book'\n+            \n+        lazy_slug = SimpleLazyObject(get_slug)\n+        \n+        with self.assertRaisesMessage(Exception, 'Error binding parameter 0 - probably unsupported type'):\n+            get_object_or_404(Book, slug=lazy_slug)\n",
  "test_inverted_patch": "diff --git a/tests/generic_views/test_lazy_object_resolution_inverted.py b/tests/generic_views/test_lazy_object_resolution_inverted.py\nnew file mode 100644\nindex 0000000..470dab1\n--- /dev/null\n+++ b/tests/generic_views/test_lazy_object_resolution_inverted.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n+from .models import Book\n+\n+class LazyObjectResolutionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.book = Book.objects.create(\n+            name='Test Book',\n+            slug='test-book',\n+            pages=100,\n+            pubdate='2008-10-01'\n+        )\n+\n+    def test_lazy_object_filter_crash(self):\n+        \"\"\"\n+        Test that using a SimpleLazyObject in get_object_or_404 without str() conversion\n+        should work correctly. If it raises an InterfaceError with SQLite, that's a bug.\n+        \"\"\"\n+        def get_slug():\n+            return 'test-book'\n+            \n+        lazy_slug = SimpleLazyObject(get_slug)\n+        \n+        try:\n+            # This should work without needing str() conversion\n+            book = get_object_or_404(Book, slug=lazy_slug)\n+        except Exception as e:\n+            if 'Error binding parameter 0 - probably unsupported type' in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different exception\n+            \n+        # If we get here, verify we got the correct book\n+        self.assertEqual(book.slug, 'test-book')\n\\ No newline at end of file\n",
  "num_sent_chars": 2070512,
  "num_received_chars": 43628,
  "elapsed_time": 549.5953497886658,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 5,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}