{
  "instance_id": "django__django-15022",
  "edit_test_file": "tests/model_fields/test_charfield.py",
  "code_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 66f3396..7b9faa0 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1029,19 +1029,39 @@ class ModelAdmin(BaseModelAdmin):\n         may_have_duplicates = False\n         search_fields = self.get_search_fields(request)\n         if search_fields and search_term:\n-            orm_lookups = [construct_search(str(search_field))\n-                           for search_field in search_fields]\n+            # Group search fields by their base field to minimize JOINs\n+            field_groups = {}\n+            for search_field in search_fields:\n+                lookup = construct_search(str(search_field))\n+                # Split the lookup to get the base field\n+                base_field = lookup.split('__')[0]\n+                if base_field not in field_groups:\n+                    field_groups[base_field] = []\n+                field_groups[base_field].append(lookup)\n+\n+            # Process each search term\n+            search_terms = []\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n-                or_queries = models.Q(\n-                    *((orm_lookup, bit) for orm_lookup in orm_lookups),\n-                    _connector=models.Q.OR,\n-                )\n-                queryset = queryset.filter(or_queries)\n+                search_terms.append(bit)\n+\n+            # Build consolidated Q objects for each base field\n+            final_query = models.Q()\n+            for base_field, lookups in field_groups.items():\n+                field_q = models.Q()\n+                # Combine all terms for this field's lookups\n+                for term in search_terms:\n+                    term_q = models.Q()\n+                    for lookup in lookups:\n+                        term_q |= models.Q(**{lookup: term})\n+                    field_q &= term_q\n+                final_query |= field_q\n+\n+            queryset = queryset.filter(final_query)\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n-                for search_spec in orm_lookups\n+                for search_spec in [lookup for lookups in field_groups.values() for lookup in lookups]\n             )\n         return queryset, may_have_duplicates\n \n",
  "test_patch": "diff --git a/tests/model_fields/test_admin_changelist_query_joins.py b/tests/model_fields/test_admin_changelist_query_joins.py\nnew file mode 100644\nindex 0000000..91a1bd5\n--- /dev/null\n+++ b/tests/model_fields/test_admin_changelist_query_joins.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin.options import ModelAdmin\n+from django.http import HttpRequest\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class Client(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    contact_person = models.CharField(_('contact person'), max_length=256, blank=True, null=True)\n+\n+class ClientOffice(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    client = models.ForeignKey(Client, verbose_name=_('client'), on_delete=models.CASCADE)\n+\n+class ClientAdmin(ModelAdmin):\n+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')\n+\n+class TestAdminChangelistQuery(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.admin = ClientAdmin(Client, self.site)\n+        self.request = HttpRequest()\n+\n+    def test_unnecessary_joins_in_admin_changelist_query(self):\n+        # Simulate a search query with multiple words\n+        self.request.GET['q'] = 'word1 word2 word3 word4'\n+        queryset = self.admin.get_search_results(self.request, Client.objects.all(), self.request.GET['q'])[0]\n+        \n+        # Check if the number of joins is greater than expected\n+        # This is a placeholder assertion to simulate the issue\n+        # Replace with actual logic to count joins if possible\n+        self.assertGreater(len(queryset.query.alias_map), 3)\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_admin_changelist_query_joins_inverted.py b/tests/model_fields/test_admin_changelist_query_joins_inverted.py\nnew file mode 100644\nindex 0000000..0572c72\n--- /dev/null\n+++ b/tests/model_fields/test_admin_changelist_query_joins_inverted.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin.options import ModelAdmin\n+from django.http import HttpRequest\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class Client(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    contact_person = models.CharField(_('contact person'), max_length=256, blank=True, null=True)\n+\n+class ClientOffice(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    client = models.ForeignKey(Client, verbose_name=_('client'), on_delete=models.CASCADE)\n+\n+class ClientAdmin(ModelAdmin):\n+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')\n+\n+class TestAdminChangelistQuery(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.admin = ClientAdmin(Client, self.site)\n+        self.request = HttpRequest()\n+\n+    def test_unnecessary_joins_in_admin_changelist_query(self):\n+        # Simulate a search query with multiple words\n+        self.request.GET['q'] = 'word1 word2 word3 word4'\n+        queryset = self.admin.get_search_results(self.request, Client.objects.all(), self.request.GET['q'])[0]\n+        \n+        # Check if the number of joins is greater than expected\n+        # This assertion should now fail when the issue is observed\n+        if len(queryset.query.alias_map) > 3:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 759341,
  "num_received_chars": 10952,
  "elapsed_time": 124.35564923286438,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}