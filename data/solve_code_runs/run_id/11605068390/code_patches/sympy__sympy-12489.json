{
  "instance_id": "sympy__sympy-12489",
  "edit_test_file": "sympy/combinatorics/tests/test_permutations.py",
  "code_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4ac1c2e..1b58631 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -924,8 +924,8 @@ def __new__(cls, *args, **kwargs):\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n@@ -944,7 +944,7 @@ def _af_new(perm):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_permutation_subclass.py b/sympy/combinatorics/tests/test_permutation_subclass.py\nnew file mode 100644\nindex 0000000..9deaf63\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_permutation_subclass.py\n@@ -0,0 +1,30 @@\n+from sympy.combinatorics.permutations import Permutation\n+from sympy.utilities.pytest import raises\n+\n+def test_permutation_subclass():\n+    # Create a subclass of Permutation\n+    class MyPermutation(Permutation):\n+        def __init__(self, *args, **kwargs):\n+            super(MyPermutation, self).__init__()\n+            self.custom_attr = \"custom\"\n+\n+    # Create an instance of the subclass\n+    p = MyPermutation([0, 2, 1])\n+    \n+    # Test multiplication - should return MyPermutation but returns Permutation\n+    q = MyPermutation([1, 0, 2])\n+    result = p * q\n+    \n+    # This assertion passes, showing the issue - result is a Permutation, not MyPermutation\n+    assert isinstance(result, Permutation)\n+    assert not isinstance(result, MyPermutation)\n+    \n+    # Test other operations that use _af_new internally\n+    result2 = p**2  # Uses _af_new via __pow__\n+    assert isinstance(result2, Permutation)\n+    assert not isinstance(result2, MyPermutation)\n+    \n+    # Even direct instantiation returns a Permutation\n+    result3 = MyPermutation.from_inversion_vector([1, 0])\n+    assert isinstance(result3, Permutation)\n+    assert not isinstance(result3, MyPermutation)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_permutation_subclass_inverted.py b/sympy/combinatorics/tests/test_permutation_subclass_inverted.py\nnew file mode 100644\nindex 0000000..7c83ded\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_permutation_subclass_inverted.py\n@@ -0,0 +1,35 @@\n+from sympy.combinatorics.permutations import Permutation\n+from sympy.utilities.pytest import raises\n+\n+def test_permutation_subclass():\n+    # Create a subclass of Permutation\n+    class MyPermutation(Permutation):\n+        def __init__(self, *args, **kwargs):\n+            super(MyPermutation, self).__init__()\n+            self.custom_attr = \"custom\"\n+\n+    # Create an instance of the subclass\n+    p = MyPermutation([0, 2, 1])\n+    \n+    # Test multiplication - should return MyPermutation\n+    q = MyPermutation([1, 0, 2])\n+    result = p * q\n+    \n+    # This should fail if the bug is present\n+    if not isinstance(result, MyPermutation):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Test power operation - should return MyPermutation\n+    result2 = p**2  # Uses _af_new via __pow__\n+    if not isinstance(result2, MyPermutation):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Test class method instantiation - should return MyPermutation\n+    result3 = MyPermutation.from_inversion_vector([1, 0])\n+    if not isinstance(result3, MyPermutation):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification that custom attributes are preserved\n+    assert hasattr(result, 'custom_attr'), \"Custom attributes should be preserved\"\n+    assert hasattr(result2, 'custom_attr'), \"Custom attributes should be preserved\"\n+    assert hasattr(result3, 'custom_attr'), \"Custom attributes should be preserved\"\n\\ No newline at end of file\n",
  "num_sent_chars": 3408124,
  "num_received_chars": 58660,
  "elapsed_time": 765.6297836303711,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}