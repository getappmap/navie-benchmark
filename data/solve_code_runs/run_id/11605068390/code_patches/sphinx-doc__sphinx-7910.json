{
  "instance_id": "sphinx-doc__sphinx-7910",
  "edit_test_file": "tests/test_ext_autodoc_mock.py",
  "code_patch": "diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py\nindex 10b1ff3..c904ea9 100644\n--- a/sphinx/ext/napoleon/__init__.py\n+++ b/sphinx/ext/napoleon/__init__.py\n@@ -13,6 +13,7 @@ from typing import Any, Dict, List\n from sphinx import __display_version__ as __version__\n from sphinx.application import Sphinx\n from sphinx.ext.napoleon.docstring import GoogleDocstring, NumpyDocstring\n+from sphinx.util.inspect import unwrap_all\n \n \n class Config:\n@@ -426,7 +427,9 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,\n     if name != '__weakref__' and has_doc and is_member:\n         cls_is_owner = False\n         if what == 'class' or what == 'exception':\n-            qualname = getattr(obj, '__qualname__', '')\n+            # Unwrap decorated methods to get the original function\n+            unwrapped_obj = unwrap_all(obj)\n+            qualname = getattr(unwrapped_obj, '__qualname__', '')\n             cls_path, _, _ = qualname.rpartition('.')\n             if cls_path:\n                 try:\n@@ -434,11 +437,11 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,\n                         import importlib\n                         import functools\n \n-                        mod = importlib.import_module(obj.__module__)\n+                        mod = importlib.import_module(unwrapped_obj.__module__)\n                         mod_path = cls_path.split('.')\n                         cls = functools.reduce(getattr, mod_path, mod)\n                     else:\n-                        cls = obj.__globals__[cls_path]\n+                        cls = unwrapped_obj.__globals__[cls_path]\n                 except Exception:\n                     cls_is_owner = False\n                 else:\n",
  "test_patch": "diff --git a/tests/test_decorated_init_doc_issue.py b/tests/test_decorated_init_doc_issue.py\nnew file mode 100644\nindex 0000000..81ffdf3\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_issue.py\n@@ -0,0 +1,25 @@\n+import functools\n+import unittest\n+from sphinx.ext.napoleon import _skip_member\n+\n+class TestDecoratedInitDocIssue(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        class TestClass:\n+            @functools.wraps(object.__init__)\n+            def __init__(self):\n+                \"\"\"This is a decorated init method.\"\"\"\n+                pass\n+\n+        # Mock Sphinx app and config\n+        class MockApp:\n+            class MockConfig:\n+                napoleon_include_init_with_doc = True\n+\n+            config = MockConfig()\n+\n+        # Test if the decorated __init__ is skipped\n+        result = _skip_member(MockApp(), 'class', '__init__', TestClass.__init__, False, None)\n+        self.assertIsNone(result, \"Decorated __init__ should not be documented\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_decorated_init_doc_issue_inverted.py b/tests/test_decorated_init_doc_issue_inverted.py\nnew file mode 100644\nindex 0000000..c90f470\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_issue_inverted.py\n@@ -0,0 +1,25 @@\n+import functools\n+import unittest\n+from sphinx.ext.napoleon import _skip_member\n+\n+class TestDecoratedInitDocIssue(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        class TestClass:\n+            @functools.wraps(object.__init__)\n+            def __init__(self):\n+                \"\"\"This is a decorated init method.\"\"\"\n+                pass\n+\n+        # Mock Sphinx app and config\n+        class MockApp:\n+            class MockConfig:\n+                napoleon_include_init_with_doc = True\n+\n+            config = MockConfig()\n+\n+        # Test if the decorated __init__ is skipped\n+        result = _skip_member(MockApp(), 'class', '__init__', TestClass.__init__, False, None)\n+        self.assertIsNotNone(result, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3813982,
  "num_received_chars": 68849,
  "elapsed_time": 658.8367764949799,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}