{
  "instance_id": "django__django-14725",
  "edit_test_file": "tests/model_formsets/tests.py",
  "code_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 75b0646..fbae2ee 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -209,6 +209,9 @@ class BaseFormSet(RenderableFormMixin):\n         # the minimum forms.\n         if i >= self.initial_form_count() and i >= self.min_num:\n             defaults['empty_permitted'] = True\n+            # If can_add is False, make extra forms non-editable\n+            if not self.can_add:\n+                defaults['empty_permitted'] = False\n         defaults.update(kwargs)\n         form = self.form(**defaults)\n         self.add_fields(form, i)\n@@ -418,7 +421,17 @@ class BaseFormSet(RenderableFormMixin):\n         will not be associated with a particular form; it will be accessible\n         via formset.non_form_errors()\n         \"\"\"\n-        pass\n+        if not self.can_add:\n+            # Count how many new forms are being submitted\n+            new_forms_count = len([form for form in self.forms[self.initial_form_count():]\n+                                 if form.has_changed() and not self._should_delete_form(form)])\n+            if new_forms_count > 0:\n+                raise ValidationError(\n+                    ngettext(\n+                        \"Adding new objects is not permitted. One new object was submitted.\",\n+                        \"Adding new objects is not permitted. %(count)d new objects were submitted.\",\n+                        new_forms_count) % {'count': new_forms_count},\n+                    code='no_new_objects_allowed')\n \n     def has_changed(self):\n         \"\"\"Return True if data in any form differs from initial.\"\"\"\n@@ -478,7 +491,7 @@ class BaseFormSet(RenderableFormMixin):\n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None, validate_max=False,\n                     min_num=None, validate_min=False, absolute_max=None,\n-                    can_delete_extra=True, renderer=None):\n+                    can_delete_extra=True, can_add=True, renderer=None):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\n@@ -503,6 +516,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n         'max_num': max_num,\n         'absolute_max': absolute_max,\n         'validate_min': validate_min,\n+        'can_add': can_add,\n         'validate_max': validate_max,\n         'renderer': renderer or get_default_renderer(),\n     }\n",
  "test_patch": "diff --git a/tests/model_formsets/test_model_formset_edit_only.py b/tests/model_formsets/test_model_formset_edit_only.py\nnew file mode 100644\nindex 0000000..b9cba9b\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_edit_only.py\n@@ -0,0 +1,39 @@\n+import datetime\n+from django import forms\n+from django.forms.models import modelformset_factory\n+from django.test import TestCase\n+from .models import Author\n+\n+class ModelFormsetEditOnlyTest(TestCase):\n+    def test_edit_only_formset_allows_new_object_creation(self):\n+        \"\"\"\n+        Test that a model formset with extra=0 still allows new object creation,\n+        which is not the intended behavior for an \"edit only\" view.\n+        \"\"\"\n+        # Create an initial author to edit\n+        author = Author.objects.create(name='Existing Author')\n+\n+        # Create a formset with extra=0, intending to disallow new object creation\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', extra=0)\n+        \n+        # Simulate POST data that includes an additional form for a new object\n+        data = {\n+            'form-TOTAL_FORMS': '2',  # 1 existing + 1 new\n+            'form-INITIAL_FORMS': '1',  # 1 existing\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': str(author.id),\n+            'form-0-name': 'Updated Author',\n+            'form-1-id': '',  # New object\n+            'form-1-name': 'New Author',\n+        }\n+        \n+        formset = AuthorFormSet(data=data, queryset=Author.objects.all())\n+        \n+        # The formset should be valid, but this is not the intended behavior\n+        # for an \"edit only\" formset. We expect it to allow new object creation.\n+        self.assertTrue(formset.is_valid())\n+        \n+        # Save the formset and check that a new object was created\n+        formset.save()\n+        self.assertEqual(Author.objects.count(), 2)\n+        self.assertTrue(Author.objects.filter(name='New Author').exists())\n",
  "test_inverted_patch": "diff --git a/tests/model_formsets/test_model_formset_edit_only_inverted.py b/tests/model_formsets/test_model_formset_edit_only_inverted.py\nnew file mode 100644\nindex 0000000..99f1fb8\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_edit_only_inverted.py\n@@ -0,0 +1,38 @@\n+import datetime\n+from django import forms\n+from django.forms.models import modelformset_factory\n+from django.test import TestCase\n+from .models import Author\n+\n+class ModelFormsetEditOnlyTest(TestCase):\n+    def test_edit_only_formset_disallows_new_object_creation(self):\n+        \"\"\"\n+        Test that a model formset with extra=0 disallows new object creation,\n+        which is the intended behavior for an \"edit only\" view.\n+        \"\"\"\n+        # Create an initial author to edit\n+        author = Author.objects.create(name='Existing Author')\n+\n+        # Create a formset with extra=0, intending to disallow new object creation\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', extra=0)\n+        \n+        # Simulate POST data that includes an additional form for a new object\n+        data = {\n+            'form-TOTAL_FORMS': '2',  # 1 existing + 1 new\n+            'form-INITIAL_FORMS': '1',  # 1 existing\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': str(author.id),\n+            'form-0-name': 'Updated Author',\n+            'form-1-id': '',  # New object\n+            'form-1-name': 'New Author',\n+        }\n+        \n+        formset = AuthorFormSet(data=data, queryset=Author.objects.all())\n+        \n+        # The formset should not be valid, as new object creation is not allowed\n+        if formset.is_valid():\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Ensure no new object was created\n+        self.assertEqual(Author.objects.count(), 1)\n+        self.assertFalse(Author.objects.filter(name='New Author').exists())\n",
  "num_sent_chars": 3256093,
  "num_received_chars": 71340,
  "elapsed_time": 716.0975897312164,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}