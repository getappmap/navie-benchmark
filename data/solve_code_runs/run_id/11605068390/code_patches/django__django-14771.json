{
  "instance_id": "django__django-14771",
  "edit_test_file": "tests/apps/tests.py",
  "code_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c04..0fa1d59 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,13 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+    args = [sys.executable]\n+    # Add warning options\n+    args.extend('-W%s' % o for o in sys.warnoptions)\n+    # Add Python implementation options (-X options)\n+    if hasattr(sys, '_xoptions'):\n+        args.extend('-X%s' % ('='.join(item) if len(item) > 1 else item[0])\n+                   for item in (opt.split('=', 1) for opt in sys._xoptions))\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n",
  "test_patch": "diff --git a/tests/apps/test_xoptions_autoreload.py b/tests/apps/test_xoptions_autoreload.py\nnew file mode 100644\nindex 0000000..20ab470\n--- /dev/null\n+++ b/tests/apps/test_xoptions_autoreload.py\n@@ -0,0 +1,47 @@\n+import sys\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+from pathlib import Path\n+import os\n+\n+class XOptionsAutoreloadTests(SimpleTestCase):\n+    \"\"\"Test that -X options are not preserved during auto-reloading.\"\"\"\n+\n+    def setUp(self):\n+        # Create a temporary manage.py file since the test relies on it\n+        self.manage_py_path = Path(__file__).parent / 'manage.py'\n+        with open(self.manage_py_path, 'w') as f:\n+            f.write('# Temporary manage.py for testing\\n')\n+\n+    def tearDown(self):\n+        # Clean up the temporary manage.py file\n+        if self.manage_py_path.exists():\n+            os.unlink(self.manage_py_path)\n+\n+    def test_xoptions_not_preserved(self):\n+        \"\"\"\n+        Test that -X utf8 option is not preserved during auto-reloading,\n+        which causes encoding inconsistency.\n+        \"\"\"\n+        # Store original sys.argv and _xoptions\n+        old_argv = sys.argv\n+        old_xoptions = dict(sys._xoptions)\n+\n+        try:\n+            # Simulate running with -X utf8 option\n+            sys._xoptions['utf8'] = ''\n+            sys.argv = [str(self.manage_py_path), 'runserver']\n+\n+            # Get the reload arguments\n+            reload_args = autoreload.get_child_arguments()\n+\n+            # Check that -X options are not included in the reload arguments\n+            x_options = [arg for arg in reload_args if arg.startswith('-X')]\n+            self.assertEqual(x_options, [], \n+                'X options should not be preserved in reload arguments')\n+\n+        finally:\n+            # Restore original state\n+            sys.argv = old_argv\n+            sys._xoptions.clear()\n+            sys._xoptions.update(old_xoptions)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/apps/test_xoptions_autoreload_inverted.py b/tests/apps/test_xoptions_autoreload_inverted.py\nnew file mode 100644\nindex 0000000..189ec1d\n--- /dev/null\n+++ b/tests/apps/test_xoptions_autoreload_inverted.py\n@@ -0,0 +1,49 @@\n+import sys\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+from pathlib import Path\n+import os\n+\n+class XOptionsAutoreloadTests(SimpleTestCase):\n+    \"\"\"Test that -X options should be preserved during auto-reloading.\"\"\"\n+\n+    def setUp(self):\n+        # Create a temporary manage.py file since the test relies on it\n+        self.manage_py_path = Path(__file__).parent / 'manage.py'\n+        with open(self.manage_py_path, 'w') as f:\n+            f.write('# Temporary manage.py for testing\\n')\n+\n+    def tearDown(self):\n+        # Clean up the temporary manage.py file\n+        if self.manage_py_path.exists():\n+            os.unlink(self.manage_py_path)\n+\n+    def test_xoptions_should_be_preserved(self):\n+        \"\"\"\n+        Test that -X utf8 option should be preserved during auto-reloading\n+        to maintain consistent encoding behavior.\n+        \"\"\"\n+        # Store original sys.argv and _xoptions\n+        old_argv = sys.argv\n+        old_xoptions = dict(sys._xoptions)\n+\n+        try:\n+            # Simulate running with -X utf8 option\n+            sys._xoptions['utf8'] = ''\n+            sys.argv = [str(self.manage_py_path), 'runserver']\n+\n+            # Get the reload arguments\n+            reload_args = autoreload.get_child_arguments()\n+\n+            # Check that -X options are included in the reload arguments\n+            x_options = [arg for arg in reload_args if arg.startswith('-X')]\n+            \n+            # This should now fail when the bug is present (i.e., when -X options are not preserved)\n+            if not x_options or '-Xutf8' not in x_options:\n+                raise AssertionError('__BUG__HERE__')\n+\n+        finally:\n+            # Restore original state\n+            sys.argv = old_argv\n+            sys._xoptions.clear()\n+            sys._xoptions.update(old_xoptions)\n\\ No newline at end of file\n",
  "num_sent_chars": 3285636,
  "num_received_chars": 40782,
  "elapsed_time": 513.459531545639,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}