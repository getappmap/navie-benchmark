{
  "instance_id": "django__django-14608",
  "edit_test_file": "tests/forms_tests/tests/test_formsets.py",
  "code_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c355..1b0d455 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,7 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n \n     def clean(self):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formsets_errors.py b/tests/forms_tests/tests/test_formsets_errors.py\nnew file mode 100644\nindex 0000000..03857ea\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formsets_errors.py\n@@ -0,0 +1,62 @@\n+import datetime\n+from collections import Counter\n+from unittest import mock\n+\n+from django.core.exceptions import ValidationError\n+from django.forms import (\n+    BaseForm, CharField, DateField, FileField, Form, IntegerField,\n+    SplitDateTimeField, formsets,\n+)\n+from django.forms.formsets import BaseFormSet, all_valid, formset_factory\n+from django.forms.utils import ErrorList\n+from django.forms.widgets import HiddenInput\n+from django.test import SimpleTestCase\n+\n+\n+class Choice(Form):\n+    choice = CharField()\n+    votes = IntegerField()\n+\n+\n+ChoiceFormSet = formset_factory(Choice)\n+\n+\n+class FavoriteDrinkForm(Form):\n+    name = CharField()\n+\n+\n+class BaseFavoriteDrinksFormSet(BaseFormSet):\n+    def clean(self):\n+        seen_drinks = []\n+\n+        for drink in self.cleaned_data:\n+            if drink['name'] in seen_drinks:\n+                raise ValidationError('You may only specify a drink once.')\n+\n+            seen_drinks.append(drink['name'])\n+\n+\n+# A FormSet that takes a list of favorite drinks and raises an error if\n+# there are any duplicates.\n+FavoriteDrinksFormSet = formset_factory(FavoriteDrinkForm, formset=BaseFavoriteDrinksFormSet, extra=3)\n+\n+\n+class FormsFormsetErrorTestCase(SimpleTestCase):\n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non form errors in FormSets do not have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIn('You may only specify a drink once.', non_form_errors)\n+        # Check that the 'nonform' CSS class is not present\n+        self.assertNotIn('nonform', non_form_errors.as_ul())\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_formsets_errors_inverted.py b/tests/forms_tests/tests/test_formsets_errors_inverted.py\nnew file mode 100644\nindex 0000000..4d861e6\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formsets_errors_inverted.py\n@@ -0,0 +1,63 @@\n+import datetime\n+from collections import Counter\n+from unittest import mock\n+\n+from django.core.exceptions import ValidationError\n+from django.forms import (\n+    BaseForm, CharField, DateField, FileField, Form, IntegerField,\n+    SplitDateTimeField, formsets,\n+)\n+from django.forms.formsets import BaseFormSet, all_valid, formset_factory\n+from django.forms.utils import ErrorList\n+from django.forms.widgets import HiddenInput\n+from django.test import SimpleTestCase\n+\n+\n+class Choice(Form):\n+    choice = CharField()\n+    votes = IntegerField()\n+\n+\n+ChoiceFormSet = formset_factory(Choice)\n+\n+\n+class FavoriteDrinkForm(Form):\n+    name = CharField()\n+\n+\n+class BaseFavoriteDrinksFormSet(BaseFormSet):\n+    def clean(self):\n+        seen_drinks = []\n+\n+        for drink in self.cleaned_data:\n+            if drink['name'] in seen_drinks:\n+                raise ValidationError('You may only specify a drink once.')\n+\n+            seen_drinks.append(drink['name'])\n+\n+\n+# A FormSet that takes a list of favorite drinks and raises an error if\n+# there are any duplicates.\n+FavoriteDrinksFormSet = formset_factory(FavoriteDrinkForm, formset=BaseFavoriteDrinksFormSet, extra=3)\n+\n+\n+class FormsFormsetErrorTestCase(SimpleTestCase):\n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non form errors in FormSets have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIn('You may only specify a drink once.', non_form_errors)\n+        # Check that the 'nonform' CSS class is present\n+        if 'nonform' not in non_form_errors.as_ul():\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 778515,
  "num_received_chars": 7085,
  "elapsed_time": 94.03494477272034,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}