{
  "instance_id": "django__django-14539",
  "edit_test_file": "tests/utils_tests/test_html.py",
  "code_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8..2710192 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -267,24 +267,26 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n             trimmed_something = False\n             # Trim wrapping punctuation.\n             for opening, closing in WRAPPING_PUNCTUATION:\n-                if middle.startswith(opening):\n+                # Handle HTML entities in the URL by unescaping first\n+                middle_unescaped = html.unescape(middle)\n+                if middle_unescaped.startswith(opening):\n                     middle = middle[len(opening):]\n                     lead += opening\n                     trimmed_something = True\n                 # Keep parentheses at the end only if they're balanced.\n-                if (middle.endswith(closing) and\n-                        middle.count(closing) == middle.count(opening) + 1):\n+                if (middle_unescaped.endswith(closing) and\n+                        middle_unescaped.count(closing) == middle_unescaped.count(opening) + 1):\n                     middle = middle[:-len(closing)]\n                     trail = closing + trail\n                     trimmed_something = True\n             # Trim trailing punctuation (after trimming wrapping punctuation,\n-            # as encoded entities contain ';'). Unescape entities to avoid\n-            # breaking them by removing ';'.\n+            # as encoded entities contain ';'). Keep entities escaped.\n             middle_unescaped = html.unescape(middle)\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n-                trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n+                # Calculate the length of trailing punctuation in escaped form\n+                trail = middle[-(len(middle_unescaped) - len(stripped)):] + trail\n+                middle = middle[:-(len(middle_unescaped) - len(stripped))]\n                 trimmed_something = True\n         return lead, middle, trail\n \n@@ -316,12 +318,13 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n             # Make URL we want to point to.\n             url = None\n             nofollow_attr = ' rel=\"nofollow\"' if nofollow else ''\n-            if simple_url_re.match(middle):\n-                url = smart_urlquote(html.unescape(middle))\n-            elif simple_url_2_re.match(middle):\n-                url = smart_urlquote('http://%s' % html.unescape(middle))\n-            elif ':' not in middle and is_email_simple(middle):\n-                local, domain = middle.rsplit('@', 1)\n+            middle_unescaped = html.unescape(middle)\n+            if simple_url_re.match(middle_unescaped):\n+                url = smart_urlquote(middle_unescaped)\n+            elif simple_url_2_re.match(middle_unescaped):\n+                url = smart_urlquote('http://%s' % middle_unescaped)\n+            elif ':' not in middle_unescaped and is_email_simple(middle_unescaped):\n+                local, domain = middle_unescaped.rsplit('@', 1)\n                 try:\n                     domain = punycode(domain)\n                 except UnicodeError:\n",
  "test_patch": "diff --git a/tests/utils_tests/test_urlize_html_escape.py b/tests/utils_tests/test_urlize_html_escape.py\nnew file mode 100644\nindex 0000000..dc7113c\n--- /dev/null\n+++ b/tests/utils_tests/test_urlize_html_escape.py\n@@ -0,0 +1,19 @@\n+from django.test import SimpleTestCase\n+from django.utils.html import urlize\n+\n+\n+class UrlizeHtmlEscapeTests(SimpleTestCase):\n+    def test_urlize_html_escape_with_trailing_punctuation(self):\n+        \"\"\"\n+        urlize() should correctly handle HTML escaped characters with trailing punctuation.\n+        The function incorrectly includes 'lt' as part of the trailing punctuation\n+        when it should be part of the URL.\n+        \"\"\"\n+        text = 'Search for google.com/?q=1&lt! and see.'\n+        actual_output = urlize(text)\n+        # This assertion verifies the incorrect behavior where 'lt' is treated as\n+        # trailing text instead of being part of the URL\n+        self.assertEqual(\n+            actual_output,\n+            'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>lt! and see.'\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_urlize_html_escape_inverted.py b/tests/utils_tests/test_urlize_html_escape_inverted.py\nnew file mode 100644\nindex 0000000..ed28c20\n--- /dev/null\n+++ b/tests/utils_tests/test_urlize_html_escape_inverted.py\n@@ -0,0 +1,19 @@\n+from django.test import SimpleTestCase\n+from django.utils.html import urlize\n+\n+\n+class UrlizeHtmlEscapeTests(SimpleTestCase):\n+    def test_urlize_html_escape_with_trailing_punctuation(self):\n+        \"\"\"\n+        urlize() should correctly handle HTML escaped characters with trailing punctuation.\n+        The function incorrectly includes 'lt' as part of the trailing punctuation\n+        when it should be part of the URL.\n+        \"\"\"\n+        text = 'Search for google.com/?q=1&lt! and see.'\n+        actual_output = urlize(text)\n+        expected_output = 'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+        \n+        if actual_output == 'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>lt! and see.':\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        self.assertEqual(actual_output, expected_output)\n\\ No newline at end of file\n",
  "num_sent_chars": 931508,
  "num_received_chars": 16777,
  "elapsed_time": 440.0730810165405,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}