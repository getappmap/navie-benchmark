{
  "instance_id": "django__django-11265",
  "edit_test_file": "tests/filtered_relation/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d69c244..2d63ebf 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1656,6 +1656,8 @@ class Query(BaseExpression):\n         We will turn this into equivalent of:\n             WHERE NOT (pk IN (SELECT parent_id FROM thetable\n                               WHERE name = 'foo' AND parent_id IS NOT NULL))\n+                              \n+        The method also preserves FilteredRelation annotations in the subquery.\n \n         It might be worth it to consider using WHERE NOT EXISTS as that has\n         saner null handling, and is easier for the backend's optimizer to\n@@ -1666,6 +1668,12 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n+        # Copy filtered relations and annotations from parent query\n+        query._filtered_relations = self._filtered_relations.copy()\n+        query.annotations = self.annotations.copy()\n+        query.annotation_select_mask = (\n+            self.annotation_select_mask.copy() if self.annotation_select_mask is not None else None\n+        )\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n",
  "test_patch": "diff --git a/tests/filtered_relation/test_excluded_filtered_relation.py b/tests/filtered_relation/test_excluded_filtered_relation.py\nnew file mode 100644\nindex 0000000..5472b4f\n--- /dev/null\n+++ b/tests/filtered_relation/test_excluded_filtered_relation.py\n@@ -0,0 +1,23 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import FilteredRelation, Q\n+from django.test import TestCase\n+\n+from .models import Author, Book, Editor\n+\n+class ExcludeAnnotatedFilteredRelationTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.author1 = Author.objects.create(name='Alice')\n+        cls.editor_a = Editor.objects.create(name='a')\n+        cls.book1 = Book.objects.create(\n+            title='Poem by Alice',\n+            editor=cls.editor_a,\n+            author=cls.author1,\n+        )\n+\n+    def test_exclude_annotated_filtered_relation(self):\n+        with self.assertRaises(FieldError):\n+            list(Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False))\n",
  "test_inverted_patch": "diff --git a/tests/filtered_relation/test_excluded_filtered_relation_inverted.py b/tests/filtered_relation/test_excluded_filtered_relation_inverted.py\nnew file mode 100644\nindex 0000000..2152ebc\n--- /dev/null\n+++ b/tests/filtered_relation/test_excluded_filtered_relation_inverted.py\n@@ -0,0 +1,25 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import FilteredRelation, Q\n+from django.test import TestCase\n+\n+from .models import Author, Book, Editor\n+\n+class ExcludeAnnotatedFilteredRelationTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.author1 = Author.objects.create(name='Alice')\n+        cls.editor_a = Editor.objects.create(name='a')\n+        cls.book1 = Book.objects.create(\n+            title='Poem by Alice',\n+            editor=cls.editor_a,\n+            author=cls.author1,\n+        )\n+\n+    def test_exclude_annotated_filtered_relation(self):\n+        try:\n+            list(Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False))\n+        except FieldError:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 754913,
  "num_received_chars": 9567,
  "elapsed_time": 105.72597193717957,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}