{
  "instance_id": "mwaskom__seaborn-3187",
  "edit_test_file": "tests/_core/test_scales.py",
  "code_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf..f1d9751 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -378,7 +378,21 @@ class ContinuousBase(Scale):\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n-            labels = axis.major.formatter.format_ticks(locs)\n+\n+            # Get the formatter and ensure it has seen the data range\n+            formatter = axis.major.formatter\n+            if hasattr(formatter, \"set_locs\"):\n+                formatter.set_locs(locs)\n+\n+            # Handle offset text if using a ScalarFormatter\n+            if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                if formatter.get_useOffset():\n+                    offset = formatter.get_offset()\n+                    if offset:\n+                        formatter.set_offset_string(offset)\n+\n+            # Format the tick labels\n+            labels = formatter.format_ticks(locs)\n             new._legend = list(locs), list(labels)\n \n         return new\n",
  "test_patch": "diff --git a/tests/_core/test_legend_formatting.py b/tests/_core/test_legend_formatting.py\nnew file mode 100644\nindex 0000000..4ee84ed\n--- /dev/null\n+++ b/tests/_core/test_legend_formatting.py\n@@ -0,0 +1,37 @@\n+import numpy as np\n+import pandas as pd\n+import matplotlib as mpl\n+from matplotlib.ticker import ScalarFormatter\n+\n+from seaborn._core.scales import (\n+    Continuous,\n+    PseudoAxis,\n+)\n+from seaborn._core.properties import IntervalProperty\n+\n+\n+class TestLegendFormatting:\n+\n+    def test_large_range_legend_formatting(self):\n+        \"\"\"Test that large numbers in legend are missing their offset value\"\"\"\n+        \n+        # Create test data with large values (in millions)\n+        x = pd.Series([1_000_000, 2_000_000, 3_000_000], name=\"x\", dtype=float)\n+        \n+        # Set up the scale\n+        s = Continuous()._setup(x, IntervalProperty())\n+        \n+        # Create a PseudoAxis with ScalarFormatter\n+        axis = PseudoAxis(s._matplotlib_scale)\n+        formatter = ScalarFormatter()\n+        axis.set_major_formatter(formatter)\n+        \n+        # Get the legend values\n+        axis.set_view_interval(x.min(), x.max())\n+        locs = axis.major.locator()\n+        labels = axis.major.formatter.format_ticks(locs)\n+        \n+        # The issue: labels should include offset (e.g., \"1 x 10^6\")\n+        # but instead just show bare numbers\n+        assert all(label.find('10^6') == -1 for label in labels), \\\n+            \"Expected labels without offset notation, but found offset notation\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/_core/test_legend_formatting_inverted.py b/tests/_core/test_legend_formatting_inverted.py\nnew file mode 100644\nindex 0000000..ea03a6b\n--- /dev/null\n+++ b/tests/_core/test_legend_formatting_inverted.py\n@@ -0,0 +1,43 @@\n+import numpy as np\n+import pandas as pd\n+import matplotlib as mpl\n+from matplotlib.ticker import ScalarFormatter\n+\n+from seaborn._core.scales import (\n+    Continuous,\n+    PseudoAxis,\n+)\n+from seaborn._core.properties import IntervalProperty\n+\n+\n+class TestLegendFormatting:\n+\n+    def test_large_range_legend_formatting(self):\n+        \"\"\"Test that large numbers in legend include their offset value\"\"\"\n+        \n+        # Create test data with large values (in millions)\n+        x = pd.Series([1_000_000, 2_000_000, 3_000_000], name=\"x\", dtype=float)\n+        \n+        # Set up the scale\n+        s = Continuous()._setup(x, IntervalProperty())\n+        \n+        # Create a PseudoAxis with ScalarFormatter\n+        axis = PseudoAxis(s._matplotlib_scale)\n+        formatter = ScalarFormatter(useOffset=True)\n+        formatter.set_scientific(True)  # Force scientific notation\n+        axis.set_major_formatter(formatter)\n+        \n+        # Get the legend values\n+        axis.set_view_interval(x.min(), x.max())\n+        locs = axis.major.locator()\n+        labels = axis.major.formatter.format_ticks(locs)\n+        \n+        # The labels should include offset notation (e.g., \"1 \u00d7 10^6\")\n+        # Check if any label contains scientific notation\n+        has_scientific_notation = any(\n+            ('10' in label or '\u00d7' in label or 'e' in label.lower())\n+            for label in labels\n+        )\n+        \n+        if not has_scientific_notation:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4062740,
  "num_received_chars": 78674,
  "elapsed_time": 851.8635370731354,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}