{
  "instance_id": "django__django-13568",
  "edit_test_file": "tests/auth_tests/test_checks.py",
  "code_patch": "diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 65fc266..0fc11a1 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -4,6 +4,7 @@ from types import MethodType\n from django.apps import apps\n from django.conf import settings\n from django.core import checks\n+from django.db.models import UniqueConstraint\n \n from .management import _get_builtin_permissions\n \n@@ -52,7 +53,12 @@ def check_user_model(app_configs=None, **kwargs):\n         )\n \n     # Check that the username field is unique\n-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)\n+    has_unique_constraint = any(\n+        isinstance(constraint, UniqueConstraint) and cls.USERNAME_FIELD in constraint.fields\n+        for constraint in cls._meta.constraints\n+    )\n+    if not (username_field.unique or has_unique_constraint):\n         if (settings.AUTHENTICATION_BACKENDS ==\n                 ['django.contrib.auth.backends.ModelBackend']):\n             errors.append(\n",
  "test_patch": "diff --git a/tests/auth_tests/test_unique_constraints.py b/tests/auth_tests/test_unique_constraints.py\nnew file mode 100644\nindex 0000000..bd7e841\n--- /dev/null\n+++ b/tests/auth_tests/test_unique_constraints.py\n@@ -0,0 +1,39 @@\n+from django.contrib.auth.checks import check_user_model\n+from django.contrib.auth.models import AbstractBaseUser\n+from django.core import checks\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings, override_system_checks\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('auth_tests', attr_name='apps')\n+@override_system_checks([check_user_model])\n+class UniqueConstraintUsernameTests(SimpleTestCase):\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithUniqueConstraint')\n+    def test_username_unique_constraint_triggers_error(self):\n+        \"\"\"\n+        A model using UniqueConstraint for USERNAME_FIELD instead of unique=True\n+        should not trigger auth.E003.\n+        \"\"\"\n+        class CustomUserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            \n+            USERNAME_FIELD = 'username'\n+            \n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['username'],\n+                        name='user_username_unq'\n+                    )\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserWithUniqueConstraint.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserWithUniqueConstraint,\n+                id='auth.E003',\n+            ),\n+        ])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_unique_constraints_inverted.py b/tests/auth_tests/test_unique_constraints_inverted.py\nnew file mode 100644\nindex 0000000..22627cd\n--- /dev/null\n+++ b/tests/auth_tests/test_unique_constraints_inverted.py\n@@ -0,0 +1,39 @@\n+from django.contrib.auth.checks import check_user_model\n+from django.contrib.auth.models import AbstractBaseUser\n+from django.core import checks\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings, override_system_checks\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('auth_tests', attr_name='apps')\n+@override_system_checks([check_user_model])\n+class UniqueConstraintUsernameTests(SimpleTestCase):\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithUniqueConstraint')\n+    def test_username_unique_constraint_should_not_trigger_error(self):\n+        \"\"\"\n+        A model using UniqueConstraint for USERNAME_FIELD instead of unique=True\n+        should not trigger auth.E003, as UniqueConstraint is a valid way to ensure\n+        uniqueness.\n+        \"\"\"\n+        class CustomUserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            \n+            USERNAME_FIELD = 'username'\n+            \n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['username'],\n+                        name='user_username_unq'\n+                    )\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        \n+        # The test should fail if auth.E003 is present, as this indicates\n+        # the system is not recognizing UniqueConstraint as a valid way\n+        # to ensure uniqueness\n+        if any(error.id == 'auth.E003' for error in errors):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 639308,
  "num_received_chars": 6502,
  "elapsed_time": 111.52099609375,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}