{
  "instance_id": "scikit-learn__scikit-learn-25747",
  "edit_test_file": "sklearn/tests/test_pipeline.py",
  "code_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c..1027a2e 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -55,7 +55,7 @@ def _wrap_in_pandas_container(\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(data_to_wrap) == len(index):\n             data_to_wrap.index = index\n         return data_to_wrap\n \n",
  "test_patch": "diff --git a/sklearn/tests/test_feature_union_pandas_transform.py b/sklearn/tests/test_feature_union_pandas_transform.py\nnew file mode 100644\nindex 0000000..379f3cd\n--- /dev/null\n+++ b/sklearn/tests/test_feature_union_pandas_transform.py\n@@ -0,0 +1,26 @@\n+import pandas as pd\n+import pytest\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from sklearn.pipeline import make_union\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: pd.Series = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_with_pandas_transform_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # This works.\n+    set_config(transform_output=\"default\")\n+    make_union(MyTransformer()).fit_transform(data)\n+\n+    # This does not work.\n+    set_config(transform_output=\"pandas\")\n+    with pytest.raises(ValueError, match=\"Length mismatch: Expected axis has 4 elements, new values have 96 elements\"):\n+        make_union(MyTransformer()).fit_transform(data)\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_feature_union_pandas_transform_inverted.py b/sklearn/tests/test_feature_union_pandas_transform_inverted.py\nnew file mode 100644\nindex 0000000..c0eea6a\n--- /dev/null\n+++ b/sklearn/tests/test_feature_union_pandas_transform_inverted.py\n@@ -0,0 +1,26 @@\n+import pandas as pd\n+import pytest\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from sklearn.pipeline import make_union\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: pd.Series = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_with_pandas_transform_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # This works.\n+    set_config(transform_output=\"default\")\n+    make_union(MyTransformer()).fit_transform(data)\n+\n+    # This should now fail with the specific error message.\n+    set_config(transform_output=\"pandas\")\n+    with pytest.raises(ValueError, match=\"__BUG__HERE__\"):\n+        make_union(MyTransformer()).fit_transform(data)\n",
  "num_sent_chars": 3453227,
  "num_received_chars": 37924,
  "elapsed_time": 923.8852031230927,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}