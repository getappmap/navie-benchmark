{
  "instance_id": "scikit-learn__scikit-learn-13328",
  "edit_test_file": "sklearn/linear_model/tests/test_huber.py",
  "code_patch": "diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 65c6864..d3606a0 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -251,7 +251,7 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):\n         self : object\n         \"\"\"\n         X, y = check_X_y(\n-            X, y, copy=False, accept_sparse=['csr'], y_numeric=True)\n+            X, y, copy=False, accept_sparse=['csr'], y_numeric=True, dtype=np.float64)\n         if sample_weight is not None:\n             sample_weight = np.array(sample_weight)\n             check_consistent_length(y, sample_weight)\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_huber_regressor_bool.py b/sklearn/linear_model/tests/test_huber_regressor_bool.py\nnew file mode 100644\nindex 0000000..e3aa32c\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_huber_regressor_bool.py\n@@ -0,0 +1,13 @@\n+import numpy as np\n+import pytest\n+from sklearn.datasets import make_regression\n+from sklearn.linear_model import HuberRegressor\n+\n+def test_huber_regressor_with_boolean_X():\n+    # Generate random data\n+    X, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)\n+    X_bool = X > 0\n+\n+    # Expect a TypeError when fitting HuberRegressor with boolean predictors\n+    with pytest.raises(TypeError):\n+        huber = HuberRegressor().fit(X_bool, y)\n",
  "test_inverted_patch": "diff --git a/sklearn/linear_model/tests/test_huber_regressor_bool_inverted.py b/sklearn/linear_model/tests/test_huber_regressor_bool_inverted.py\nnew file mode 100644\nindex 0000000..dcf1f97\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_huber_regressor_bool_inverted.py\n@@ -0,0 +1,18 @@\n+import numpy as np\n+import pytest\n+from sklearn.datasets import make_regression\n+from sklearn.linear_model import HuberRegressor\n+\n+def test_huber_regressor_with_boolean_X():\n+    # Generate random data\n+    X, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)\n+    X_bool = X > 0\n+\n+    # The test should fail with a specific error message when the bug is observed\n+    try:\n+        huber = HuberRegressor().fit(X_bool, y)\n+        # If no error is raised, explicitly fail the test\n+        pytest.fail(\"__BUG__HERE__\")\n+    except TypeError:\n+        # If a TypeError is raised, it means the bug is present, and the test should fail\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3481887,
  "num_received_chars": 39884,
  "elapsed_time": 555.8633716106415,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}