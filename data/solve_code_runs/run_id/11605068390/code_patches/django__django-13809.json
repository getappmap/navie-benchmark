{
  "instance_id": "django__django-13809",
  "edit_test_file": "tests/admin_scripts/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088..02a5ddf 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -25,7 +25,7 @@ class Command(BaseCommand):\n     help = \"Starts a lightweight Web server for development.\"\n \n     # Validation is called explicitly each time the server is reloaded.\n-    requires_system_checks = []\n+    requires_system_checks = '__all__'\n     stealth_options = ('shutdown_message',)\n \n     default_addr = '127.0.0.1'\n@@ -114,8 +114,9 @@ class Command(BaseCommand):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks...\\n\\n\")\n-        self.check(display_num_errors=True)\n+        if not options['skip_checks']:\n+            self.stdout.write(\"Performing system checks...\\n\\n\")\n+            self.check(display_num_errors=True)\n         # Need to check migrations here, so can't use the\n         # requires_migrations_check attribute.\n         self.check_migrations()\n",
  "test_patch": "diff --git a/tests/admin_scripts/add_skip_checks_option_test.py b/tests/admin_scripts/add_skip_checks_option_test.py\nnew file mode 100644\nindex 0000000..364ef76\n--- /dev/null\n+++ b/tests/admin_scripts/add_skip_checks_option_test.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n+class TestRunserverSkipChecks(unittest.TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.cmd = RunserverCommand(stdout=self.output)\n+\n+    @mock.patch('django.core.management.base.connections')\n+    def test_runserver_skip_checks_option(self, mock_connections):\n+        \"\"\"\n+        Test that the --skip-checks option is not recognized by the runserver command.\n+        \"\"\"\n+        with self.assertRaises(TypeError) as cm:\n+            call_command(self.cmd, skip_checks=True)\n+        \n+        self.assertIn(\"Unknown option(s) for runserver command: skip_checks.\", str(cm.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/admin_scripts/add_skip_checks_option_test_inverted.py b/tests/admin_scripts/add_skip_checks_option_test_inverted.py\nnew file mode 100644\nindex 0000000..6a5d8ad\n--- /dev/null\n+++ b/tests/admin_scripts/add_skip_checks_option_test_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n+class TestRunserverSkipChecks(unittest.TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.cmd = RunserverCommand(stdout=self.output)\n+\n+    @mock.patch('django.core.management.base.connections')\n+    def test_runserver_skip_checks_option(self, mock_connections):\n+        \"\"\"\n+        Test that the --skip-checks option is not recognized by the runserver command.\n+        \"\"\"\n+        with self.assertRaises(TypeError) as cm:\n+            call_command(self.cmd, skip_checks=True)\n+        \n+        # Altered assertion to make the test fail when the issue is observed\n+        self.assertIn(\"__BUG__HERE__\", str(cm.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 4725934,
  "num_received_chars": 76445,
  "elapsed_time": 3240.86412858963,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}