{
  "instance_id": "pydata__xarray-6938",
  "edit_test_file": "xarray/tests/test_groupby.py",
  "code_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c775d05..428d330 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3694,7 +3694,8 @@ class Dataset(\n         ----------\n         dims_dict : dict-like\n             Dictionary whose keys are current dimension names and whose values\n-            are new names.\n+            are new names. Each value must be a hashable but not a string if it\n+            is also a dimension in this dataset.\n         **dims_kwargs : {existing_dim: new_dim, ...}, optional\n             The keyword arguments form of ``dims_dict``.\n             One of dims_dict or dims_kwargs must be provided.\n@@ -3770,22 +3771,24 @@ class Dataset(\n         variables: dict[Hashable, Variable] = {}\n         indexes: dict[Hashable, Index] = {}\n         for k, v in self.variables.items():\n-            dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)\n+            # Create a deep copy of the variable to avoid modifying the original\n+            var = v.copy(deep=True)\n+            dims = tuple(dims_dict.get(dim, dim) for dim in var.dims)\n             if k in result_dims:\n-                var = v.to_index_variable()\n-                var.dims = dims\n+                # Convert to index variable while preserving original dims\n+                idx_var = var.to_index_variable()\n+                idx_var = idx_var._replace(dims=dims)\n                 if k in self._indexes:\n                     indexes[k] = self._indexes[k]\n-                    variables[k] = var\n+                    variables[k] = idx_var\n                 else:\n-                    index, index_vars = create_default_index_implicit(var)\n+                    index, index_vars = create_default_index_implicit(idx_var)\n                     indexes.update({name: index for name in index_vars})\n                     variables.update(index_vars)\n                     coord_names.update(index_vars)\n             else:\n-                var = v.to_base_variable()\n-                var.dims = dims\n-                variables[k] = var\n+                # Set new dims on the copy without modifying original\n+                variables[k] = var._replace(dims=dims)\n \n         return self._replace_with_new_dims(variables, coord_names, indexes=indexes)\n \n",
  "test_patch": "diff --git a/xarray/tests/test_swap_dims.py b/xarray/tests/test_swap_dims.py\nnew file mode 100644\nindex 0000000..91213b3\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims.py\n@@ -0,0 +1,32 @@\n+# xarray/tests/test_swap_dims.py\n+\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestSwapDims(unittest.TestCase):\n+    def test_swap_dims_modifies_original(self):\n+        nz = 11\n+        ds = xr.Dataset(\n+            data_vars={\n+                \"y\": (\"z\", np.random.rand(nz)),\n+                \"lev\": (\"z\", np.arange(nz) * 10),\n+            },\n+        )\n+\n+        # Perform swap_dims and other operations\n+        ds2 = (\n+            ds.swap_dims(z=\"lev\")\n+            .rename_dims(lev=\"z\")\n+            .reset_index(\"lev\")\n+            .reset_coords()\n+        )\n+\n+        # Swap dims again and check if it modifies the original\n+        ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+        # Check if the original ds2 is modified\n+        self.assertEqual(ds2[\"lev\"].dims, (\"lev\",), \"Original object was modified\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_swap_dims_inverted.py b/xarray/tests/test_swap_dims_inverted.py\nnew file mode 100644\nindex 0000000..5c49f78\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims_inverted.py\n@@ -0,0 +1,34 @@\n+# xarray/tests/test_swap_dims.py\n+\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestSwapDims(unittest.TestCase):\n+    def test_swap_dims_modifies_original(self):\n+        nz = 11\n+        ds = xr.Dataset(\n+            data_vars={\n+                \"y\": (\"z\", np.random.rand(nz)),\n+                \"lev\": (\"z\", np.arange(nz) * 10),\n+            },\n+        )\n+\n+        # Perform swap_dims and other operations\n+        ds2 = (\n+            ds.swap_dims(z=\"lev\")\n+            .rename_dims(lev=\"z\")\n+            .reset_index(\"lev\")\n+            .reset_coords()\n+        )\n+\n+        # Swap dims again and check if it modifies the original\n+        ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+        # Check if the original ds2 is modified\n+        # This should now fail if the original object is modified\n+        if ds2[\"lev\"].dims == (\"lev\",):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 870538,
  "num_received_chars": 11203,
  "elapsed_time": 140.0989806652069,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}