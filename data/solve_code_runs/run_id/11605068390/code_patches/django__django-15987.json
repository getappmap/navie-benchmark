{
  "instance_id": "django__django-15987",
  "edit_test_file": "tests/fixtures_regress/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13..7e1c678 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,12 +362,27 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+\n+        # Convert all paths to their absolute real paths for comparison\n+        normalized_fixture_dirs = []\n+        for path in fixture_dirs:\n+            # Handle both string and Path objects\n+            if isinstance(path, (str, os.PathLike)):\n+                path_str = str(path)\n+                # Get absolute normalized path\n+                real_path = os.path.realpath(path_str)\n+                normalized_fixture_dirs.append(real_path)\n+\n+        # Check for duplicates using normalized paths\n+        if len(normalized_fixture_dirs) != len(set(normalized_fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n-            if app_dir in fixture_dirs:\n+            # Normalize app_dir for comparison\n+            app_dir_real = os.path.realpath(app_dir)\n+            if app_dir_real in normalized_fixture_dirs:\n                 raise ImproperlyConfigured(\n                     \"'%s' is a default fixture directory for the '%s' app \"\n                     \"and cannot be listed in settings.FIXTURE_DIRS.\"\n@@ -380,7 +395,7 @@ class Command(BaseCommand):\n                 dirs.append(app_dir)\n         dirs.extend(fixture_dirs)\n         dirs.append(\"\")\n-        return [os.path.realpath(d) for d in dirs]\n+        return [os.path.realpath(str(d)) for d in dirs]\n \n     def parse_name(self, fixture_name):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py\nnew file mode 100644\nindex 0000000..ac00a06\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py\n@@ -0,0 +1,18 @@\n+# tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py\n+\n+import os\n+from pathlib import Path\n+from django.core import management\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n+\n+_cur_dir = os.path.dirname(os.path.abspath(__file__))\n+\n+class TestFixtureDirsDuplicateDetection(TestCase):\n+    def test_fixture_dirs_with_path_duplicates(self):\n+        \"\"\"\n+        Test that when FIXTURE_DIRS contains Path instances, duplicates are not detected.\n+        \"\"\"\n+        with self.settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures_1\", Path(_cur_dir) / \"fixtures_1\"]):\n+            with self.assertRaisesMessage(ImproperlyConfigured, \"settings.FIXTURE_DIRS contains duplicates.\"):\n+                management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n",
  "test_inverted_patch": "diff --git a/tests/fixtures_regress/test_fixture_dirs_duplicate_detection_inverted.py b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection_inverted.py\nnew file mode 100644\nindex 0000000..8c43a00\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection_inverted.py\n@@ -0,0 +1,20 @@\n+# tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py\n+\n+import os\n+from pathlib import Path\n+from django.core import management\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n+\n+_cur_dir = os.path.dirname(os.path.abspath(__file__))\n+\n+class TestFixtureDirsDuplicateDetection(TestCase):\n+    def test_fixture_dirs_with_path_duplicates(self):\n+        \"\"\"\n+        Test that when FIXTURE_DIRS contains Path instances, duplicates are detected.\n+        \"\"\"\n+        with self.settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures_1\", Path(_cur_dir) / \"fixtures_1\"]):\n+            try:\n+                management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+            except ImproperlyConfigured as e:\n+                self.fail(f\"__BUG__HERE__: {str(e)}\")\n",
  "num_sent_chars": 1217705,
  "num_received_chars": 17813,
  "elapsed_time": 209.69654655456543,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}