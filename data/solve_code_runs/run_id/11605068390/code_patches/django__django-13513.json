{
  "instance_id": "django__django-13513",
  "edit_test_file": "tests/urlpatterns/tests.py",
  "code_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7b..48ed285 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -397,9 +397,11 @@ class ExceptionReporter:\n     def get_traceback_frames(self):\n         def explicit_or_implicit_cause(exc_value):\n             explicit = getattr(exc_value, '__cause__', None)\n-            suppress_context = getattr(exc_value, '__suppress_context__', None)\n-            implicit = getattr(exc_value, '__context__', None)\n-            return explicit or (None if suppress_context else implicit)\n+            if explicit is not None:\n+                return explicit\n+            if getattr(exc_value, '__suppress_context__', False):\n+                return None\n+            return getattr(exc_value, '__context__', None)\n \n         # Get the exception and all its causes\n         exceptions = []\n",
  "test_patch": "diff --git a/tests/urlpatterns/test_debug_error_view.py b/tests/urlpatterns/test_debug_error_view.py\nnew file mode 100644\nindex 0000000..c1d488f\n--- /dev/null\n+++ b/tests/urlpatterns/test_debug_error_view.py\n@@ -0,0 +1,25 @@\n+# File: tests/urlpatterns/test_debug_error_view.py\n+\n+from django.test import SimpleTestCase, RequestFactory\n+from django.views import View\n+from django.views.debug import ExceptionReporter\n+\n+class TestView(View):\n+    def get(self, request, *args, **kwargs):\n+        try:\n+            raise RuntimeError('my error')\n+        except Exception as exc:\n+            raise ValueError('my new error') from None\n+\n+class TestDebugErrorViewSuppressContext(SimpleTestCase):\n+    def test_suppress_context(self):\n+        request = RequestFactory().get('/')\n+        view = TestView.as_view()\n+        \n+        try:\n+            view(request)\n+        except ValueError as exc:\n+            reporter = ExceptionReporter(request, exc.__class__, exc, exc.__traceback__)\n+            traceback_data = reporter.get_traceback_data()\n+            # Assert that the traceback data contains the suppressed context\n+            self.assertIn('RuntimeError', str(traceback_data))\n",
  "test_inverted_patch": "diff --git a/tests/urlpatterns/test_debug_error_view_inverted.py b/tests/urlpatterns/test_debug_error_view_inverted.py\nnew file mode 100644\nindex 0000000..7b264a6\n--- /dev/null\n+++ b/tests/urlpatterns/test_debug_error_view_inverted.py\n@@ -0,0 +1,26 @@\n+# File: tests/urlpatterns/test_debug_error_view.py\n+\n+from django.test import SimpleTestCase, RequestFactory\n+from django.views import View\n+from django.views.debug import ExceptionReporter\n+\n+class TestView(View):\n+    def get(self, request, *args, **kwargs):\n+        try:\n+            raise RuntimeError('my error')\n+        except Exception as exc:\n+            raise ValueError('my new error') from None\n+\n+class TestDebugErrorViewSuppressContext(SimpleTestCase):\n+    def test_suppress_context(self):\n+        request = RequestFactory().get('/')\n+        view = TestView.as_view()\n+        \n+        try:\n+            view(request)\n+        except ValueError as exc:\n+            reporter = ExceptionReporter(request, exc.__class__, exc, exc.__traceback__)\n+            traceback_data = reporter.get_traceback_data()\n+            # Assert that the traceback data does not contain the suppressed context\n+            if 'RuntimeError' in str(traceback_data):\n+                raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3289900,
  "num_received_chars": 34147,
  "elapsed_time": 476.3840842247009,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}