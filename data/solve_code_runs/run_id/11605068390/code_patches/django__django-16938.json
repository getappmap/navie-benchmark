{
  "instance_id": "django__django-16938",
  "edit_test_file": "tests/m2m_through/tests.py",
  "code_patch": "diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py\nindex 1d3269c..a0e86e8 100644\n--- a/django/core/serializers/xml_serializer.py\n+++ b/django/core/serializers/xml_serializer.py\n@@ -147,7 +147,10 @@ class Serializer(base.Serializer):\n                     self.xml.endElement(\"object\")\n \n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).iterator()\n+                    # Get a clean queryset without select_related\n+                    qs = getattr(obj, field.name).all()\n+                    qs = qs.select_related(None)  # Clear any select_related\n+                    return qs.iterator()\n \n             else:\n \n@@ -155,7 +158,10 @@ class Serializer(base.Serializer):\n                     self.xml.addQuickElement(\"object\", attrs={\"pk\": str(value.pk)})\n \n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).only(\"pk\").iterator()\n+                    # Get a clean queryset without select_related, only fetch pk\n+                    qs = getattr(obj, field.name).all()\n+                    qs = qs.select_related(None)  # Clear any select_related\n+                    return qs.only(\"pk\").iterator()\n \n             m2m_iter = getattr(obj, \"_prefetched_objects_cache\", {}).get(\n                 field.name,\n",
  "test_patch": "diff --git a/tests/m2m_through/test_serialization_m2m_select_related.py b/tests/m2m_through/test_serialization_m2m_select_related.py\nnew file mode 100644\nindex 0000000..715b947\n--- /dev/null\n+++ b/tests/m2m_through/test_serialization_m2m_select_related.py\n@@ -0,0 +1,43 @@\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")  # follow master when retrieving object by default\n+        return qs\n+\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+\n+class SerializationM2MSelectRelatedTest(TestCase):\n+    def test_serialization_m2m_with_custom_manager_select_related(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        with self.assertRaises(FieldError) as context:\n+            serializers.serialize(\"json\", [test])\n+\n+        self.assertIn(\n+            \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\",\n+            str(context.exception),\n+        )\n",
  "test_inverted_patch": "diff --git a/tests/m2m_through/test_serialization_m2m_select_related_inverted.py b/tests/m2m_through/test_serialization_m2m_select_related_inverted.py\nnew file mode 100644\nindex 0000000..97a5a58\n--- /dev/null\n+++ b/tests/m2m_through/test_serialization_m2m_select_related_inverted.py\n@@ -0,0 +1,44 @@\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")  # follow master when retrieving object by default\n+        return qs\n+\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+\n+class SerializationM2MSelectRelatedTest(TestCase):\n+    def test_serialization_m2m_with_custom_manager_select_related(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        try:\n+            serializers.serialize(\"json\", [test])\n+        except FieldError as e:\n+            self.assertIn(\n+                \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\",\n+                str(e),\n+            )\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3685328,
  "num_received_chars": 74028,
  "elapsed_time": 716.5659852027893,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}