{
  "instance_id": "sympy__sympy-21379",
  "edit_test_file": "sympy/core/tests/test_expr.py",
  "code_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 1c7ef70..d45b842 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -2559,6 +2559,14 @@ def extract_branch_factor(self, allow_half=False):\n         return res, n\n \n     def _eval_is_polynomial(self, syms):\n+        from sympy.functions.elementary.piecewise import Piecewise\n+        from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n+\n+        # Check for Piecewise inside hyperbolic functions\n+        if (any(isinstance(arg, HyperbolicFunction) for arg in self.args) and\n+            any(isinstance(arg, Piecewise) for arg in self.atoms())):\n+            return False\n+\n         if self.free_symbols.intersection(syms) == set():\n             return True\n         return False\n",
  "test_patch": "diff --git a/sympy/core/tests/test_polynomial_error.py b/sympy/core/tests/test_polynomial_error.py\nnew file mode 100644\nindex 0000000..fe672d7\n--- /dev/null\n+++ b/sympy/core/tests/test_polynomial_error.py\n@@ -0,0 +1,11 @@\n+from sympy import symbols, exp, sinh, Piecewise\n+from sympy.core.cache import clear_cache\n+from sympy.testing.pytest import raises\n+from sympy.polys.polyerrors import PolynomialError\n+\n+def test_polynomial_error_with_subs():\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    \n+    with raises(PolynomialError):\n+        expr.subs({1: 1.0})\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_polynomial_error_inverted.py b/sympy/core/tests/test_polynomial_error_inverted.py\nnew file mode 100644\nindex 0000000..01ad234\n--- /dev/null\n+++ b/sympy/core/tests/test_polynomial_error_inverted.py\n@@ -0,0 +1,14 @@\n+from sympy import symbols, exp, sinh, Piecewise\n+from sympy.core.cache import clear_cache\n+from sympy.testing.pytest import raises\n+from sympy.polys.polyerrors import PolynomialError\n+\n+def test_polynomial_error_with_subs():\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    \n+    # Alter the test to fail when the issue is observed\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 5160455,
  "num_received_chars": 115010,
  "elapsed_time": 1661.6167168617249,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}