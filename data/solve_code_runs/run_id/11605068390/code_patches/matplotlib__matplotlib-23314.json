{
  "instance_id": "matplotlib__matplotlib-23314",
  "edit_test_file": "lib/mpl_toolkits/tests/test_mplot3d.py",
  "code_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f8aa99d..dd08cf7 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -202,7 +202,8 @@ class FigureBase(Artist):\n \n         artists.remove(self.patch)\n         artists = sorted(\n-            (artist for artist in artists if not artist.get_animated()),\n+            (artist for artist in artists if not artist.get_animated() and\n+             (artist.get_visible() or not hasattr(artist, 'get_projection'))),\n             key=lambda artist: artist.get_zorder())\n         for ax in self._localaxes:\n             locator = ax.get_axes_locator()\n@@ -2902,7 +2903,8 @@ class Figure(FigureBase):\n         if not self.get_visible():\n             return\n \n-        artists = self._get_draw_artists(renderer)\n+        artists = [artist for artist in self._get_draw_artists(renderer)\n+                  if artist.get_visible() or not hasattr(artist, 'get_projection')]\n         try:\n             renderer.open_group('figure', gid=self.get_gid())\n             if self.axes and self.get_layout_engine() is not None:\n",
  "test_patch": "diff --git a/lib/mpl_toolkits/tests/test_3d_subplot_visibility.py b/lib/mpl_toolkits/tests/test_3d_subplot_visibility.py\nnew file mode 100644\nindex 0000000..2039147\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_3d_subplot_visibility.py\n@@ -0,0 +1,25 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_3d_subplot_visibility():\n+    \"\"\"\n+    Test that reproduces the issue where set_visible(False) doesn't work\n+    for 3D subplots.\n+    \"\"\"\n+    # Create figure with two 3D subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n+    \n+    # Add some data to both subplots\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    \n+    # Try to hide the first subplot\n+    ax1.set_visible(False)\n+    \n+    # Force a draw to ensure visibility changes are applied\n+    fig.canvas.draw()\n+    \n+    # Assert that the subplot is still visible (reproducing the bug)\n+    # If the visibility was working correctly, this would fail\n+    assert ax1.get_visible() is False and ax1.patch.get_visible() is True\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/mpl_toolkits/tests/test_3d_subplot_visibility_inverted.py b/lib/mpl_toolkits/tests/test_3d_subplot_visibility_inverted.py\nnew file mode 100644\nindex 0000000..a65a2ab\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_3d_subplot_visibility_inverted.py\n@@ -0,0 +1,29 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_3d_subplot_visibility():\n+    \"\"\"\n+    Test that verifies set_visible(False) functionality for 3D subplots.\n+    The test should fail when the bug is present (subplot remains visible).\n+    \"\"\"\n+    # Create figure with two 3D subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n+    \n+    # Add some data to both subplots\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    \n+    # Try to hide the first subplot\n+    ax1.set_visible(False)\n+    \n+    # Force a draw to ensure visibility changes are applied\n+    fig.canvas.draw()\n+    \n+    # Check if the subplot and its patch are both invisible\n+    # This should raise an error when the bug is present\n+    if ax1.get_visible() is False and ax1.patch.get_visible() is True:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification that both the axis and patch are invisible\n+    assert ax1.get_visible() is False and ax1.patch.get_visible() is False\n\\ No newline at end of file\n",
  "num_sent_chars": 2782931,
  "num_received_chars": 46100,
  "elapsed_time": 774.0217940807343,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}