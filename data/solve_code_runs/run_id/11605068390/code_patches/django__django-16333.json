{
  "instance_id": "django__django-16333",
  "edit_test_file": "tests/auth_tests/test_forms.py",
  "code_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8..4c9a4f5 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()\n         return user\n \n \n",
  "test_patch": "diff --git a/tests/auth_tests/test_user_creation_form_m2m.py b/tests/auth_tests/test_user_creation_form_m2m.py\nnew file mode 100644\nindex 0000000..9037c48\n--- /dev/null\n+++ b/tests/auth_tests/test_user_creation_form_m2m.py\n@@ -0,0 +1,33 @@\n+import datetime\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import User, Group\n+from django.test import TestCase\n+\n+class UserCreationFormM2MTest(TestCase):\n+    def test_m2m_field_not_saved(self):\n+        # Create a group to be used in the ManyToManyField\n+        group = Group.objects.create(name=\"Test Group\")\n+\n+        # Define a custom UserCreationForm with a ManyToManyField\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = User\n+                fields = UserCreationForm.Meta.fields + (\"groups\",)\n+\n+        # Prepare form data including the ManyToManyField\n+        data = {\n+            \"username\": \"testuser\",\n+            \"password1\": \"testpassword\",\n+            \"password2\": \"testpassword\",\n+            \"groups\": [group.pk],\n+        }\n+        form = CustomUserCreationForm(data)\n+\n+        # Check if the form is valid\n+        self.assertTrue(form.is_valid())\n+\n+        # Save the form\n+        user = form.save()\n+\n+        # Check if the ManyToManyField data was not saved\n+        self.assertEqual(user.groups.count(), 0)\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_user_creation_form_m2m_inverted.py b/tests/auth_tests/test_user_creation_form_m2m_inverted.py\nnew file mode 100644\nindex 0000000..fcf6439\n--- /dev/null\n+++ b/tests/auth_tests/test_user_creation_form_m2m_inverted.py\n@@ -0,0 +1,35 @@\n+import datetime\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import User, Group\n+from django.test import TestCase\n+\n+class UserCreationFormM2MTest(TestCase):\n+    def test_m2m_field_not_saved(self):\n+        # Create a group to be used in the ManyToManyField\n+        group = Group.objects.create(name=\"Test Group\")\n+\n+        # Define a custom UserCreationForm with a ManyToManyField\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = User\n+                fields = UserCreationForm.Meta.fields + (\"groups\",)\n+\n+        # Prepare form data including the ManyToManyField\n+        data = {\n+            \"username\": \"testuser\",\n+            \"password1\": \"testpassword\",\n+            \"password2\": \"testpassword\",\n+            \"groups\": [group.pk],\n+        }\n+        form = CustomUserCreationForm(data)\n+\n+        # Check if the form is valid\n+        self.assertTrue(form.is_valid())\n+\n+        # Save the form\n+        user = form.save()\n+\n+        # Check if the ManyToManyField data was saved\n+        # This should now fail if the bug is present\n+        if user.groups.count() == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 770889,
  "num_received_chars": 5534,
  "elapsed_time": 83.77122497558594,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}