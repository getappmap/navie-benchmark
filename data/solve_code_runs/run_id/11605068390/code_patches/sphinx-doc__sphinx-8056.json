{
  "instance_id": "sphinx-doc__sphinx-8056",
  "edit_test_file": "tests/test_ext_math.py",
  "code_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06..909988c 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -256,6 +256,16 @@ class GoogleDocstring:\n             if match:\n                 _name = match.group(1)\n                 _type = match.group(2)\n+            elif colon and after:\n+                # Handle NumPy style with multiple parameters\n+                names = [n.strip() for n in before.split(',')]\n+                if len(names) > 1:\n+                    # Multiple parameters sharing the same type\n+                    _type = after.split(':', 1)[0].strip()\n+                    _desc = after.split(':', 1)[1].strip() if ':' in after else ''\n+                    # Join multiple parameters with commas\n+                    _name = ', '.join(self._escape_args_and_kwargs(n) for n in names)\n+                    return _name, _type, [_desc] if _desc else []\n \n         _name = self._escape_args_and_kwargs(_name)\n \n@@ -392,15 +402,27 @@ class GoogleDocstring:\n         lines = []\n         for _name, _type, _desc in fields:\n             _desc = self._strip_empty(_desc)\n-            if any(_desc):\n-                _desc = self._fix_field_desc(_desc)\n-                field = ':%s %s: ' % (field_role, _name)\n-                lines.extend(self._format_block(field, _desc))\n+            if ',' in _name:\n+                # Handle multiple parameters\n+                names = [n.strip() for n in _name.split(',')]\n+                for name in names:\n+                    if any(_desc):\n+                        _desc = self._fix_field_desc(_desc)\n+                        field = ':%s %s: ' % (field_role, name)\n+                        lines.extend(self._format_block(field, _desc))\n+                    else:\n+                        lines.append(':%s %s:' % (field_role, name))\n+                    if _type:\n+                        lines.append(':%s %s: %s' % (type_role, name, _type))\n             else:\n-                lines.append(':%s %s:' % (field_role, _name))\n-\n-            if _type:\n-                lines.append(':%s %s: %s' % (type_role, _name, _type))\n+                if any(_desc):\n+                    _desc = self._fix_field_desc(_desc)\n+                    field = ':%s %s: ' % (field_role, _name)\n+                    lines.extend(self._format_block(field, _desc))\n+                else:\n+                    lines.append(':%s %s:' % (field_role, _name))\n+                if _type:\n+                    lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n",
  "test_patch": "diff --git a/tests/test_ext_napoleon_multiline_params.py b/tests/test_ext_napoleon_multiline_params.py\nnew file mode 100644\nindex 0000000..3acdba0\n--- /dev/null\n+++ b/tests/test_ext_napoleon_multiline_params.py\n@@ -0,0 +1,64 @@\n+\"\"\"\n+    test_ext_napoleon_multiline_params\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test napoleon extension with multiple parameters on same line.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import unittest\n+from sphinx.ext.napoleon import Config, NumpyDocstring\n+\n+\n+class TestNumpyMultilineParams(unittest.TestCase):\n+    def test_multiple_params_same_line(self):\n+        \"\"\"Test that multiple parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        # The current problematic behavior shows parameters separately\n+        expected = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+    def test_multiple_params_same_line_optional(self):\n+        \"\"\"Test that multiple optional parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        # The current problematic behavior doesn't show 'optional' modifier correctly\n+        expected = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_napoleon_multiline_params_inverted.py b/tests/test_ext_napoleon_multiline_params_inverted.py\nnew file mode 100644\nindex 0000000..82877b2\n--- /dev/null\n+++ b/tests/test_ext_napoleon_multiline_params_inverted.py\n@@ -0,0 +1,61 @@\n+\"\"\"\n+    test_ext_napoleon_multiline_params\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test napoleon extension with multiple parameters on same line.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import unittest\n+from sphinx.ext.napoleon import Config, NumpyDocstring\n+\n+\n+class TestNumpyMultilineParams(unittest.TestCase):\n+    def test_multiple_params_same_line(self):\n+        \"\"\"Test that multiple parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        :param array_like x1: Input arrays, description of `x1`, `x2`.\n+        :param array_like x2: Input arrays, description of `x1`, `x2`.\"\"\"\n+        \n+        if actual.strip() != expected.strip():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+    def test_multiple_params_same_line_optional(self):\n+        \"\"\"Test that multiple optional parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        :param array_like x1: Input arrays, description of `x1`, `x2`.\n+        :param array_like x2: Input arrays, description of `x1`, `x2`.\n+        :param optional: x1, x2\"\"\"\n+        \n+        if actual.strip() != expected.strip():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 5871014,
  "num_received_chars": 115460,
  "elapsed_time": 917.0188610553741,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}