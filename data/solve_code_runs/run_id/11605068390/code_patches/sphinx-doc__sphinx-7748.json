{
  "instance_id": "sphinx-doc__sphinx-7748",
  "edit_test_file": "tests/test_util_inspect.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be9..93b909e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,39 +1037,50 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n+    def _find_signature(self, encoding: str = None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n                 continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n-            if base not in valid_names:\n-                continue\n-            # re-prepare docstring to ignore more leading indentation\n-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            # process lines until we hit a non-signature line\n+            sig_lines = []\n+            for j, line in enumerate(doclines):\n+                if not line.strip():  # skip empty lines\n+                    continue\n+                match = py_ext_sig_re.match(line)\n+                if not match:\n+                    break  # stop at first non-signature line\n+                exmod, path, base, args, retann = match.groups()\n+                # the base name must match ours\n+                valid_names = [self.objpath[-1]]  # type: ignore\n+                if isinstance(self, ClassDocumenter):\n+                    valid_names.append('__init__')\n+                    if hasattr(self.object, '__mro__'):\n+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+                if base not in valid_names:\n+                    break\n+                sig_lines.append(j)\n+                results.append((args, retann))\n+            \n+            if sig_lines:\n+                # re-prepare docstring to ignore signature lines\n+                remaining_lines = [line for idx, line in enumerate(doclines)\n+                                 if idx not in sig_lines]\n+                if remaining_lines:\n+                    tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                    self._new_docstrings[i] = prepare_docstring('\\n'.join(remaining_lines),\n+                                                              tabsize=tab_width)\n+                else:\n+                    self._new_docstrings[i] = []\n+                break  # Found signatures in this docstring block, stop processing\n+        return results\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1085,9 +1096,16 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results:\n+                # Format all signatures and join them with newlines\n+                signatures = []\n+                for args, retann in results:\n+                    self.args, self.retann = args, retann\n+                    sig = super().format_signature(**kwargs)  # type: ignore\n+                    if sig:\n+                        signatures.append(sig)\n+                return '\\n'.join(signatures)\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature.py b/tests/test_ext_autodoc_docstring_signature.py\nnew file mode 100644\nindex 0000000..f8c5113\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature.py\n@@ -0,0 +1,28 @@\n+\"\"\"\n+    test_ext_autodoc_docstring_signature\n+    ~~~~~~~~~~~~~~~\n+\n+    Tests autodoc_docstring_signature with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_with_overloaded_methods():\n+    class SwigWrappedClass:\n+        def overloaded_method(self, arg1):\n+            \"\"\"overloaded_method(int arg1)\n+            overloaded_method(float arg1)\n+            \"\"\"\n+            pass\n+\n+    # Simulate the behavior of autodoc_docstring_signature\n+    docstring = SwigWrappedClass.overloaded_method.__doc__\n+    first_signature = docstring.splitlines()[0]\n+\n+    # The issue is that only the first signature is picked up\n+    assert first_signature == \"overloaded_method(int arg1)\"\n+    # The test should pass when the issue is observed, i.e., only the first signature is picked up\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature_inverted.py b/tests/test_ext_autodoc_docstring_signature_inverted.py\nnew file mode 100644\nindex 0000000..2d5cb80\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature_inverted.py\n@@ -0,0 +1,29 @@\n+\"\"\"\n+    test_ext_autodoc_docstring_signature\n+    ~~~~~~~~~~~~~~~\n+\n+    Tests autodoc_docstring_signature with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_with_overloaded_methods():\n+    class SwigWrappedClass:\n+        def overloaded_method(self, arg1):\n+            \"\"\"overloaded_method(int arg1)\n+            overloaded_method(float arg1)\n+            \"\"\"\n+            pass\n+\n+    # Simulate the behavior of autodoc_docstring_signature\n+    docstring = SwigWrappedClass.overloaded_method.__doc__\n+    first_signature = docstring.splitlines()[0]\n+\n+    # The issue is that only the first signature is picked up\n+    # The test should fail when the issue is observed, i.e., only the first signature is picked up\n+    if first_signature == \"overloaded_method(int arg1)\":\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4277245,
  "num_received_chars": 103699,
  "elapsed_time": 986.6482434272766,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}