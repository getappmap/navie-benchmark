{
  "instance_id": "pydata__xarray-3151",
  "edit_test_file": "xarray/tests/test_combine.py",
  "code_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903..6a57317 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -501,14 +501,23 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                                    fill_value=fill_value)\n \n         # Check the overall coordinates are monotonically increasing\n+        # but only for dimensions that were actually concatenated\n         for dim in concatenated.dims:\n             if dim in concatenated:\n+                # Skip monotonicity check for dimensions that weren't concatenated\n+                # (i.e., those that are identical across datasets)\n+                if dim not in concat_dims:\n+                    continue\n+\n                 indexes = concatenated.indexes.get(dim)\n                 if not (indexes.is_monotonic_increasing\n                         or indexes.is_monotonic_decreasing):\n-                    raise ValueError(\"Resulting object does not have monotonic\"\n-                                     \" global indexes along dimension {}\"\n-                                     .format(dim))\n+                    raise ValueError(\n+                        \"Resulting object does not have monotonic global \"\n+                        \"indexes along dimension {}. Coordinates along this \"\n+                        \"dimension were different between datasets and \"\n+                        \"require monotonic ordering for combination.\"\n+                        .format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n \n     return merge(concatenated_grouped_by_data_vars, compat=compat,\n",
  "test_patch": "diff --git a/xarray/tests/test_combine_by_coords.py b/xarray/tests/test_combine_by_coords.py\nnew file mode 100644\nindex 0000000..6f37d69\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords.py\n@@ -0,0 +1,36 @@\n+from datetime import datetime\n+import numpy as np\n+from xarray import Dataset, combine_by_coords\n+import unittest\n+\n+class TestCombineByCoordsNonMonotonic(unittest.TestCase):\n+    def test_non_monotonic_identical_coords(self):\n+        yCoord = ['a', 'c', 'b']  # non-monotonic coordinates\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        with self.assertRaises(ValueError) as context:\n+            combine_by_coords((ds1, ds2))\n+\n+        self.assertIn(\"does not have monotonic global indexes along dimension y\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_combine_by_coords_inverted.py b/xarray/tests/test_combine_by_coords_inverted.py\nnew file mode 100644\nindex 0000000..df173bb\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords_inverted.py\n@@ -0,0 +1,36 @@\n+from datetime import datetime\n+import numpy as np\n+from xarray import Dataset, combine_by_coords\n+import unittest\n+\n+class TestCombineByCoordsNonMonotonic(unittest.TestCase):\n+    def test_non_monotonic_identical_coords(self):\n+        yCoord = ['a', 'c', 'b']  # non-monotonic coordinates\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        try:\n+            combine_by_coords((ds1, ds2))\n+        except ValueError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3286749,
  "num_received_chars": 43157,
  "elapsed_time": 510.3776664733887,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}