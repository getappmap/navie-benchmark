{
  "instance_id": "matplotlib__matplotlib-20488",
  "edit_test_file": "lib/matplotlib/tests/test_colors.py",
  "code_patch": "diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex 95bb42d..b1aff65 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -533,8 +533,16 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):\n                 # that may have moved input values in/out of range\n                 s_vmin, s_vmax = vrange\n                 if isinstance(self.norm, mcolors.LogNorm):\n+                    # Handle very small positive values\n                     if s_vmin < 0:\n                         s_vmin = max(s_vmin, np.finfo(scaled_dtype).eps)\n+                    elif s_vmin == 0:\n+                        s_vmin = np.finfo(scaled_dtype).eps\n+                    # Handle very large ranges that could cause overflow\n+                    if np.log(s_vmax) - np.log(s_vmin) > 1000:\n+                        # Scale the range to avoid overflow while preserving order\n+                        scale_factor = np.exp(500)  # Mid-point in log space\n+                        s_vmin = max(s_vmin, s_vmax/scale_factor)\n                 with cbook._setattr_cm(self.norm,\n                                        vmin=s_vmin,\n                                        vmax=s_vmax,\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_log_norm_validation.py b/lib/matplotlib/tests/test_log_norm_validation.py\nnew file mode 100644\nindex 0000000..14ff029\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_log_norm_validation.py\n@@ -0,0 +1,26 @@\n+import numpy as np\n+import pytest\n+from matplotlib.colors import LogNorm\n+import matplotlib.pyplot as plt\n+\n+def test_log_norm_huge_range():\n+    \"\"\"\n+    Test that LogNorm raises ValueError when dealing with very large ranges\n+    that result in non-finite transformed values.\n+    \"\"\"\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Create data with a huge range\n+    data = np.full((5, 5), -1, dtype=np.float64) \n+    data[0:2, :] = 1E20  # Very large values\n+    \n+    # Create image with LogNorm\n+    norm = LogNorm(vmin=100, vmax=data.max())\n+    im = ax.imshow(data, norm=norm, interpolation='nearest', cmap='viridis')\n+    \n+    # Force a draw which should trigger the ValueError\n+    with pytest.raises(ValueError, match=\"Invalid vmin or vmax\"):\n+        fig.canvas.draw()\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_log_norm_validation_inverted.py b/lib/matplotlib/tests/test_log_norm_validation_inverted.py\nnew file mode 100644\nindex 0000000..31dd563\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_log_norm_validation_inverted.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm\n+import pytest\n+\n+def test_huge_range_log():\n+    \"\"\"\n+    Test that LogNorm handles very large ranges correctly.\n+    This test should fail when LogNorm cannot handle huge ranges properly.\n+    \"\"\"\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Create data with a huge range\n+    data = np.full((5, 5), -1, dtype=np.float64)\n+    data[0:2, :] = 1E20  # Very large values\n+    \n+    # Create image with LogNorm\n+    norm = LogNorm(vmin=100, vmax=data.max())\n+    im = ax.imshow(data, norm=norm, interpolation='nearest', cmap='viridis')\n+    \n+    try:\n+        # Try to draw the figure\n+        fig.canvas.draw()\n+    except ValueError as e:\n+        if str(e) == \"Invalid vmin or vmax\":\n+            raise ValueError(\"__BUG__HERE__\") from e\n+    finally:\n+        plt.close(fig)\n",
  "num_sent_chars": 2242061,
  "num_received_chars": 33543,
  "elapsed_time": 412.5780746936798,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}