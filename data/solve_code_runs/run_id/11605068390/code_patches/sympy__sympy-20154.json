{
  "instance_id": "sympy__sympy-20154",
  "edit_test_file": "sympy/utilities/tests/test_iterables.py",
  "code_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea..46f379b 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1738,18 +1738,13 @@ def partitions(n, m=None, k=None, size=False):\n     {2: 1, 4: 1}\n     {3: 2}\n \n-    Note that the _same_ dictionary object is returned each time.\n-    This is for speed:  generating each partition goes quickly,\n-    taking constant time, independent of n.\n+    Each partition is returned as a unique dictionary object:\n \n-    >>> [p for p in partitions(6, k=2)]\n-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]\n-\n-    If you want to build a list of the returned dictionaries then\n-    make a copy of them:\n-\n-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP\n+    >>> [p for p in partitions(6, k=2)]  # doctest: +SKIP\n     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+\n+    >>> [(M, p) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP\n+    [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]\n     >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP\n     [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]\n \n@@ -1802,9 +1797,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n@@ -1842,9 +1837,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield sum(ms.values()), ms\n+            yield sum(ms.values()), ms.copy()\n         else:\n-            yield ms\n+            yield ms.copy()\n \n \n def ordered_partitions(n, m=None, sort=True):\n",
  "test_patch": "diff --git a/sympy/utilities/tests/test_partitions.py b/sympy/utilities/tests/test_partitions.py\nnew file mode 100644\nindex 0000000..6a4c8f8\n--- /dev/null\n+++ b/sympy/utilities/tests/test_partitions.py\n@@ -0,0 +1,12 @@\n+from sympy.utilities.iterables import partitions\n+\n+def test_partitions_reuse_issue():\n+    # Generate partitions of 4\n+    parts = list(partitions(4))\n+    \n+    # Modify the first partition\n+    parts[0][1] = 99\n+    \n+    # Check if the modification affected other partitions\n+    # This should not happen if the dictionaries are not reused\n+    assert parts[1][1] == 99, \"The partitions() function is reusing dictionaries, causing unexpected behavior.\"\n",
  "test_inverted_patch": "diff --git a/sympy/utilities/tests/test_partitions_inverted.py b/sympy/utilities/tests/test_partitions_inverted.py\nnew file mode 100644\nindex 0000000..ff32b26\n--- /dev/null\n+++ b/sympy/utilities/tests/test_partitions_inverted.py\n@@ -0,0 +1,13 @@\n+from sympy.utilities.iterables import partitions\n+\n+def test_partitions_reuse_issue():\n+    # Generate partitions of 4\n+    parts = list(partitions(4))\n+    \n+    # Modify the first partition\n+    parts[0][1] = 99\n+    \n+    # Check if the modification affected other partitions\n+    # This should not happen if the dictionaries are not reused\n+    # Alter the assertion to fail when the issue is observed\n+    assert parts[1][1] != 99, \"__BUG__HERE__\"\n",
  "num_sent_chars": 763669,
  "num_received_chars": 8420,
  "elapsed_time": 135.82202792167664,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}