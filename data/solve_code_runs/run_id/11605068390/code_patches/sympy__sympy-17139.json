{
  "instance_id": "sympy__sympy-17139",
  "edit_test_file": "sympy/strategies/tests/test_core.py",
  "code_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 7ca05f0..5336501 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -1072,6 +1072,9 @@ def futrig(e, **kwargs):\n     from ``trigsimp``. By default, hyperbolics subexpressions\n     will be simplified, but this can be disabled by setting\n     ``hyper=False``.\n+    \n+    For expressions with complex exponents, the original expression\n+    is returned unchanged to avoid invalid operations.\n \n     Examples\n     ========\n@@ -1115,12 +1118,21 @@ def _futrig(e, **kwargs):\n     from sympy.simplify.fu import (\n         TR1, TR2, TR3, TR2i, TR10, L, TR10i,\n         TR8, TR6, TR15, TR16, TR111, TR5, TRmorrie, TR11, TR14, TR22,\n-        TR12)\n+        TR12, I)\n     from sympy.core.compatibility import _nodes\n \n     if not e.has(TrigonometricFunction):\n         return e\n \n+    # Check for complex exponents in the expression\n+    def has_complex_exponent(expr):\n+        if expr.is_Pow:\n+            return expr.exp.has(I) or expr.exp.is_complex\n+        return any(has_complex_exponent(arg) for arg in expr.args) if expr.args else False\n+\n+    if has_complex_exponent(e):\n+        return e\n+\n     if e.is_Mul:\n         coeff, e = e.as_independent(TrigonometricFunction)\n     else:\n",
  "test_patch": "diff --git a/sympy/strategies/tests/test_complex_trig_simplify.py b/sympy/strategies/tests/test_complex_trig_simplify.py\nnew file mode 100644\nindex 0000000..a8c2b16\n--- /dev/null\n+++ b/sympy/strategies/tests/test_complex_trig_simplify.py\n@@ -0,0 +1,16 @@\n+from sympy.strategies.core import (null_safe, exhaust, memoize, condition,\n+        chain, tryit, do_one, debug, switch, minimize)\n+from sympy import Symbol, cos, I, simplify\n+from sympy.core.expr import Expr\n+\n+def test_complex_trig_simplify():\n+    \"\"\"Test that simplifying cos(x)**I raises appropriate TypeError\"\"\"\n+    x = Symbol('x')\n+    expr = cos(x)**I\n+    \n+    # Verify that attempting to simplify raises TypeError about complex I\n+    try:\n+        simplify(expr)\n+        assert False, \"Expected TypeError was not raised\"\n+    except TypeError as e:\n+        assert str(e) == \"Invalid comparison of complex I\"\n",
  "test_inverted_patch": "diff --git a/sympy/strategies/tests/test_complex_trig_simplify_inverted.py b/sympy/strategies/tests/test_complex_trig_simplify_inverted.py\nnew file mode 100644\nindex 0000000..0452af4\n--- /dev/null\n+++ b/sympy/strategies/tests/test_complex_trig_simplify_inverted.py\n@@ -0,0 +1,19 @@\n+from sympy.strategies.core import (null_safe, exhaust, memoize, condition,\n+        chain, tryit, do_one, debug, switch, minimize)\n+from sympy import Symbol, cos, I, simplify\n+from sympy.core.expr import Expr\n+\n+def test_complex_trig_simplify():\n+    \"\"\"Test that simplifying cos(x)**I works correctly\"\"\"\n+    x = Symbol('x')\n+    expr = cos(x)**I\n+    \n+    try:\n+        result = simplify(expr)\n+        # The simplification should work without raising TypeError\n+        # If we get here, the bug is fixed\n+        \n+    except TypeError as e:\n+        if str(e) == \"Invalid comparison of complex I\":\n+            raise AssertionError(\"__BUG__HERE__\") \n+        raise e  # Re-raise if it's a different TypeError\n\\ No newline at end of file\n",
  "num_sent_chars": 4522283,
  "num_received_chars": 88904,
  "elapsed_time": 1034.142187833786,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}