{
  "instance_id": "django__django-15563",
  "edit_test_file": "tests/basic/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5c78c6e..2499fdc 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,6 +987,34 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n+\n+        # Handle multi-table inheritance updates\n+        parents = self.model._meta.parents\n+        if len(parents) > 1:  # Multiple inheritance case\n+            base_table = self.model._meta.db_table\n+            updates = []\n+            # Update each parent table through proper inheritance chain\n+            for parent, field in parents.items():\n+                parent_query = self.query.chain(sql.UpdateQuery)\n+                parent_updates = {}\n+                # Filter updates relevant to this parent\n+                for key, value in kwargs.items():\n+                    parent_field = parent._meta.get_field(key) if hasattr(parent._meta, 'get_field') else None\n+                    if parent_field and parent_field.model == parent:\n+                        parent_updates[key] = value\n+                if parent_updates:\n+                    parent_query.add_update_values(parent_updates)\n+                    parent_query.annotations = {}\n+                    updates.append((parent_query, parent_updates))\n+\n+            # Execute updates through proper inheritance chain\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = 0\n+                for parent_query, _ in updates:\n+                    rows = parent_query.get_compiler(self.db).execute_sql(CURSOR)\n+                return rows\n+\n+        # Normal update path for single inheritance or no inheritance\n         query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n",
  "test_patch": "diff --git a/tests/basic/test_queryset_update_multiple_inheritance.py b/tests/basic/test_queryset_update_multiple_inheritance.py\nnew file mode 100644\nindex 0000000..e29b7fc\n--- /dev/null\n+++ b/tests/basic/test_queryset_update_multiple_inheritance.py\n@@ -0,0 +1,39 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define the models as described in the issue\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+class Child(Base, OtherBase):\n+    pass\n+\n+class QuerysetUpdateMultipleInheritanceTest(TestCase):\n+    def test_queryset_update_multiple_inheritance(self):\n+        # Create instances of OtherBase\n+        OtherBase.objects.create(field_otherbase=100)\n+        OtherBase.objects.create(field_otherbase=101)\n+\n+        # Create instances of Child\n+        Child.objects.create(field_base=0, field_otherbase=0)\n+        Child.objects.create(field_base=1, field_otherbase=1)\n+\n+        # Update Child instances\n+        Child.objects.update(field_otherbase=55)\n+\n+        # Check if the update affected Child instances\n+        child_values = list(Child.objects.values('field_otherbase'))\n+        self.assertEqual(child_values, [{'field_otherbase': 0}, {'field_otherbase': 1}])\n+\n+        # Check if the update affected OtherBase instances\n+        otherbase_values = list(OtherBase.objects.filter(otherbase_id__in=[1, 2]).values('field_otherbase'))\n+        self.assertEqual(otherbase_values, [{'field_otherbase': 55}, {'field_otherbase': 55}])\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/basic/test_queryset_update_multiple_inheritance_inverted.py b/tests/basic/test_queryset_update_multiple_inheritance_inverted.py\nnew file mode 100644\nindex 0000000..1502672\n--- /dev/null\n+++ b/tests/basic/test_queryset_update_multiple_inheritance_inverted.py\n@@ -0,0 +1,41 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define the models as described in the issue\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+class Child(Base, OtherBase):\n+    pass\n+\n+class QuerysetUpdateMultipleInheritanceTest(TestCase):\n+    def test_queryset_update_multiple_inheritance(self):\n+        # Create instances of OtherBase\n+        OtherBase.objects.create(field_otherbase=100)\n+        OtherBase.objects.create(field_otherbase=101)\n+\n+        # Create instances of Child\n+        Child.objects.create(field_base=0, field_otherbase=0)\n+        Child.objects.create(field_base=1, field_otherbase=1)\n+\n+        # Update Child instances\n+        Child.objects.update(field_otherbase=55)\n+\n+        # Check if the update affected Child instances\n+        child_values = list(Child.objects.values('field_otherbase'))\n+        # This assertion should fail if the bug is present\n+        if child_values == [{'field_otherbase': 0}, {'field_otherbase': 1}]:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Check if the update affected OtherBase instances\n+        otherbase_values = list(OtherBase.objects.filter(otherbase_id__in=[1, 2]).values('field_otherbase'))\n+        self.assertEqual(otherbase_values, [{'field_otherbase': 55}, {'field_otherbase': 55}])\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 5090974,
  "num_received_chars": 106392,
  "elapsed_time": 1575.5752112865448,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}