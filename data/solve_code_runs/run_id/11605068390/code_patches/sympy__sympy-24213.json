{
  "instance_id": "sympy__sympy-24213",
  "edit_test_file": "sympy/physics/units/tests/test_dimensions.py",
  "code_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880..5705c82 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n",
  "test_patch": "diff --git a/sympy/physics/units/tests/test_dimension_addition.py b/sympy/physics/units/tests/test_dimension_addition.py\nnew file mode 100644\nindex 0000000..5fc6185\n--- /dev/null\n+++ b/sympy/physics/units/tests/test_dimension_addition.py\n@@ -0,0 +1,22 @@\n+from sympy.physics.units import Quantity\n+from sympy.physics.units.definitions import meter, second\n+from sympy.physics.units.definitions.dimension_definitions import velocity, acceleration, time\n+from sympy.physics.units.systems.si import SI\n+from sympy.testing.pytest import raises\n+\n+\n+def test_collect_factor_dimension_addition():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    raises(ValueError, lambda: SI._collect_factor_and_dimension(expr1))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/physics/units/tests/test_dimension_addition_inverted.py b/sympy/physics/units/tests/test_dimension_addition_inverted.py\nnew file mode 100644\nindex 0000000..963b369\n--- /dev/null\n+++ b/sympy/physics/units/tests/test_dimension_addition_inverted.py\n@@ -0,0 +1,31 @@\n+from sympy.physics.units import Quantity\n+from sympy.physics.units.definitions import meter, second\n+from sympy.physics.units.definitions.dimension_definitions import velocity, acceleration, time\n+from sympy.physics.units.systems.si import SI\n+\n+\n+def test_collect_factor_dimension_addition():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    \n+    # The dimensions should be equivalent (velocity = acceleration * time)\n+    # If the bug is present, this will raise a ValueError\n+    try:\n+        SI._collect_factor_and_dimension(expr1)\n+    except ValueError as e:\n+        if \"Dimension of\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here, the bug is not present\n\\ No newline at end of file\n",
  "num_sent_chars": 4488029,
  "num_received_chars": 66694,
  "elapsed_time": 827.5827488899231,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}