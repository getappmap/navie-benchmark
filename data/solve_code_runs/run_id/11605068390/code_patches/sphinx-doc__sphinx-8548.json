{
  "instance_id": "sphinx-doc__sphinx-8548",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b3..861bd0e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -756,6 +756,14 @@ class Documenter:\n                     # keep documented attributes\n                     keep = True\n                 isattr = True\n+            elif self.options.inherited_members and isinstance(self, ClassDocumenter):\n+                # For inherited members, check parent class namespaces\n+                for cls in self.object.__mro__[1:]:\n+                    parent_namespace = cls.__module__ + '.' + cls.__qualname__\n+                    if (parent_namespace, membername) in attr_docs:\n+                        keep = True\n+                        isattr = True\n+                        break\n             elif want_all and isprivate:\n                 if has_doc or self.options.undoc_members:\n                     if self.options.private_members is None:\n@@ -1599,7 +1607,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n+            return False, [ObjectMember(m.name, m.value, docstring=self.get_attr_doc(m))\n                            for m in members.values()]\n         else:\n             return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_inherited_attributes.py b/tests/test_ext_autodoc_inherited_attributes.py\nnew file mode 100644\nindex 0000000..1438de5\n--- /dev/null\n+++ b/tests/test_ext_autodoc_inherited_attributes.py\n@@ -0,0 +1,40 @@\n+\"\"\"\n+    test_ext_autodoc_inherited_attributes\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension's handling of inherited attributes.\n+\n+    :copyright: Copyright 2011-2023 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_attributes_not_shown(app):\n+    \"\"\"Test that inherited attributes are not shown even with inherited-members enabled.\n+    \n+    This test verifies the issue where autodoc fails to show inherited attributes\n+    when using the inherited-members option, because it doesn't check base class\n+    namespaces for docstrings.\n+    \"\"\"\n+    options = {\n+        \"members\": None,\n+        \"inherited-members\": True,\n+    }\n+    \n+    actual = do_autodoc(app, 'class', 'target.inheritance.Derived', options)\n+    \n+    # The inherited method shows up (working correctly)\n+    assert '   .. py:method:: Derived.inheritedmeth()' in actual\n+    \n+    # But the inherited attribute doesn't show up (demonstrating the issue)\n+    assert '   .. py:attribute:: Derived.inheritedattr' not in actual\n+    \n+    # The inherited attribute's docstring should be found in the base class\n+    # but isn't because autodoc doesn't check the base class namespace\n+    assert 'Inherited attribute docstring' not in '\\n'.join(actual)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_inherited_attributes_inverted.py b/tests/test_ext_autodoc_inherited_attributes_inverted.py\nnew file mode 100644\nindex 0000000..f1f4d5d\n--- /dev/null\n+++ b/tests/test_ext_autodoc_inherited_attributes_inverted.py\n@@ -0,0 +1,41 @@\n+\"\"\"\n+    test_ext_autodoc_inherited_attributes\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension's handling of inherited attributes.\n+\n+    :copyright: Copyright 2011-2023 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_attributes_not_shown(app):\n+    \"\"\"Test that inherited attributes should be shown with inherited-members enabled.\n+    \n+    This test verifies that autodoc properly shows inherited attributes\n+    when using the inherited-members option, by checking base class\n+    namespaces for docstrings.\n+    \"\"\"\n+    options = {\n+        \"members\": None,\n+        \"inherited-members\": True,\n+    }\n+    \n+    actual = do_autodoc(app, 'class', 'target.inheritance.Derived', options)\n+    \n+    # The inherited method shows up (working correctly)\n+    assert '   .. py:method:: Derived.inheritedmeth()' in actual\n+    \n+    # The inherited attribute should show up since inherited-members is True\n+    if '   .. py:attribute:: Derived.inheritedattr' not in actual:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # The inherited attribute's docstring should be found in the base class\n+    if 'Inherited attribute docstring' not in '\\n'.join(actual):\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3711068,
  "num_received_chars": 68872,
  "elapsed_time": 829.2924320697784,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}