{
  "instance_id": "matplotlib__matplotlib-24026",
  "edit_test_file": "lib/matplotlib/tests/test_cycles.py",
  "code_patch": "diff --git a/lib/matplotlib/rcsetup.py b/lib/matplotlib/rcsetup.py\nindex 0a0e0bb..2d506e2 100644\n--- a/lib/matplotlib/rcsetup.py\n+++ b/lib/matplotlib/rcsetup.py\n@@ -279,9 +279,15 @@ def validate_color_or_auto(s):\n     return validate_color(s)\n \n \n-def validate_color_for_prop_cycle(s):\n-    # N-th color cycle syntax can't go into the color cycle.\n-    if isinstance(s, str) and re.match(\"^C[0-9]$\", s):\n+def validate_color_for_prop_cycle(s, allow_cycle_reference=False):\n+    \"\"\"\n+    Validate colors for property cycle.\n+\n+    If allow_cycle_reference is True, color cycle references like 'C0' are allowed.\n+    Otherwise they are rejected to prevent recursive color definitions.\n+    \"\"\"\n+    # N-th color cycle syntax can't go into the color cycle unless explicitly allowed\n+    if not allow_cycle_reference and isinstance(s, str) and re.match(\"^C[0-9]$\", s):\n         raise ValueError(f\"Cannot put cycle reference ({s!r}) in prop_cycler\")\n     return validate_color(s)\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_stackplot_cycler.py b/lib/matplotlib/tests/test_stackplot_cycler.py\nnew file mode 100644\nindex 0000000..47d365d\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_stackplot_cycler.py\n@@ -0,0 +1,13 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+import pytest\n+\n+def test_stackplot_cycler_issue():\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    with pytest.raises(ValueError, match=\"Cannot put cycle reference\"):\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_stackplot_cycler_inverted.py b/lib/matplotlib/tests/test_stackplot_cycler_inverted.py\nnew file mode 100644\nindex 0000000..22f01c3\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_stackplot_cycler_inverted.py\n@@ -0,0 +1,14 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+import pytest\n+\n+def test_stackplot_cycler_issue():\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # The test should now fail when the issue is observed\n+    with pytest.raises(ValueError, match=\"__BUG__HERE__\"):\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n",
  "num_sent_chars": 8158225,
  "num_received_chars": 105186,
  "elapsed_time": 1334.0133786201477,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}