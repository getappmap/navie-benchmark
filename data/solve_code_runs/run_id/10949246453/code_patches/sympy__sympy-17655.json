{
  "instance_id": "sympy__sympy-17655",
  "edit_test_file": "sympy/geometry/tests/test_point.py",
  "code_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c4..ee56dee 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -199,6 +199,13 @@ def __add__(self, other):\n         >>> Point(1, 2) + (.1, .2)\n         Point2D(1.1, 2.2)\n \n+        This method can now handle cases where it receives a product of\n+        a scalar and a Point object, regardless of the order of multiplication.\n+\n+        >>> 2 * Point(1, 2) + Point(3, 4)\n+        Point2D(5, 8)\n+        Point2D(1.1, 2.2)\n+\n         If this is not desired, the `translate` method can be used or\n         another Point can be added:\n \n@@ -278,6 +285,10 @@ def __mul__(self, factor):\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, factor):\n+        \"\"\"Multiply point's coordinates by a factor (right multiplication).\"\"\"\n+        return self.__mul__(factor)\n+\n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]\n@@ -302,6 +313,13 @@ def _normalize_dimension(cls, *points, **kwargs):\n             dim = max(i.ambient_dimension for i in points)\n         if all(i.ambient_dimension == dim for i in points):\n             return list(points)\n+        \n+        # Handle Mul objects that represent scalar multiplication of Points\n+        from sympy import Mul\n+        points = [p.args[1] if isinstance(p, Mul) and isinstance(p.args[1], Point) else p for p in points]\n+        \n+        kwargs['dim'] = dim\n+        kwargs['on_morph'] = kwargs.get('on_morph', 'warn')\n         kwargs['dim'] = dim\n         kwargs['on_morph'] = kwargs.get('on_morph', 'warn')\n         return [Point(i, **kwargs) for i in points]\n",
  "test_patch": "diff --git a/sympy/geometry/tests/test_point_multiplication.py b/sympy/geometry/tests/test_point_multiplication.py\nnew file mode 100644\nindex 0000000..c5e9c50\n--- /dev/null\n+++ b/sympy/geometry/tests/test_point_multiplication.py\n@@ -0,0 +1,19 @@\n+from sympy import sympify\n+from sympy.geometry import Point\n+from sympy.geometry.exceptions import GeometryError\n+from sympy.utilities.pytest import raises\n+\n+def test_point_multiplication_order():\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # This should work fine\n+    result1 = point1 + point2 * scalar\n+\n+    # This should raise a GeometryError\n+    with raises(GeometryError):\n+        result2 = point1 + scalar * point2\n+\n+    # Ensure that the working case actually produces a result\n+    assert isinstance(result1, Point)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/geometry/tests/test_point_multiplication_inverted.py b/sympy/geometry/tests/test_point_multiplication_inverted.py\nnew file mode 100644\nindex 0000000..1489e98\n--- /dev/null\n+++ b/sympy/geometry/tests/test_point_multiplication_inverted.py\n@@ -0,0 +1,24 @@\n+from sympy import sympify\n+from sympy.geometry import Point\n+from sympy.geometry.exceptions import GeometryError\n+\n+def test_point_multiplication_order():\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # This should work fine\n+    result1 = point1 + point2 * scalar\n+    assert isinstance(result1, Point), \"Expected result1 to be a Point\"\n+\n+    # This should now work without raising an exception\n+    try:\n+        result2 = point1 + scalar * point2\n+    except GeometryError:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Ensure that both cases produce the same result\n+    assert result1 == result2, \"__BUG__HERE__\"\n+\n+    # Additional check to ensure both operations are equivalent\n+    assert point2 * scalar == scalar * point2, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1602994,
  "num_received_chars": 88314,
  "elapsed_time": 631.5176892280579,
  "lint_repair_count": 7,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}