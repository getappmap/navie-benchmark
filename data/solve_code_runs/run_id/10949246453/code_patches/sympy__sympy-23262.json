{
  "instance_id": "sympy__sympy-23262",
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "code_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex da67263..9ad8874 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -951,6 +951,7 @@ def _recursive_to_string(doprint, arg):\n     printer with SymPy types (so that the printer safely can use SymPy-methods).\"\"\"\n     from sympy.matrices.common import MatrixOperations\n     from sympy.core.basic import Basic\n+    from sympy.core.containers import Tuple\n \n     if isinstance(arg, (Basic, MatrixOperations)):\n         return doprint(arg)\n@@ -959,9 +960,17 @@ def _recursive_to_string(doprint, arg):\n             left, right = \"[]\"\n         elif isinstance(arg, tuple):\n             left, right = \"()\"\n+            if len(arg) == 1:\n+                # Add trailing comma for single-element tuples\n+                return left + _recursive_to_string(doprint, arg[0]) + \",\" + right\n+        elif isinstance(arg, Tuple):\n+            left, right = \"()\"\n+            if len(arg) == 1:\n+                # Add trailing comma for single-element Tuple objects\n+                return left + _recursive_to_string(doprint, arg[0]) + \",\" + right\n         else:\n             raise NotImplementedError(\"unhandled type: %s, %s\" % (type(arg), arg))\n-        return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n+        return left + ', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n     elif isinstance(arg, str):\n         return arg\n     else:\n",
  "test_patch": "diff --git a/sympy/utilities/tests/test_tuple_generation.py b/sympy/utilities/tests/test_tuple_generation.py\nnew file mode 100644\nindex 0000000..ef3d787\n--- /dev/null\n+++ b/sympy/utilities/tests/test_tuple_generation.py\n@@ -0,0 +1,29 @@\n+import inspect\n+from sympy import lambdify\n+\n+def test_single_element_tuple_generation():\n+    # Generate a lambda function that returns a tuple with a single element\n+    lambda_func = lambdify([], tuple([1]))\n+    \n+    # Get the source code of the generated function\n+    source_code = inspect.getsource(lambda_func)\n+    \n+    # Check if the generated code is incorrect (missing comma for single-element tuple)\n+    assert 'return (1)' in source_code, \"Expected incorrect tuple generation for single element\"\n+    \n+    # Verify that the function actually returns an integer instead of a tuple\n+    result = lambda_func()\n+    assert isinstance(result, int), \"Expected an integer to be returned, not a tuple\"\n+    assert result == 1, \"Expected the result to be 1\"\n+\n+    # Test that multi-element tuples are still generated correctly\n+    lambda_func_multi = lambdify([], tuple([1, 2]))\n+    source_code_multi = inspect.getsource(lambda_func_multi)\n+    \n+    # Check if the generated code is correct for multi-element tuple\n+    assert 'return (1, 2)' in source_code_multi, \"Expected correct tuple generation for multiple elements\"\n+    \n+    # Verify that the function returns a tuple for multiple elements\n+    result_multi = lambda_func_multi()\n+    assert isinstance(result_multi, tuple), \"Expected a tuple to be returned for multiple elements\"\n+    assert result_multi == (1, 2), \"Expected the result to be (1, 2)\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/utilities/tests/test_tuple_generation_inverted.py b/sympy/utilities/tests/test_tuple_generation_inverted.py\nnew file mode 100644\nindex 0000000..45637e8\n--- /dev/null\n+++ b/sympy/utilities/tests/test_tuple_generation_inverted.py\n@@ -0,0 +1,32 @@\n+import inspect\n+from sympy import lambdify\n+\n+def test_single_element_tuple_generation():\n+    # Generate a lambda function that returns a tuple with a single element\n+    lambda_func = lambdify([], tuple([1]))\n+    \n+    # Get the source code of the generated function\n+    source_code = inspect.getsource(lambda_func)\n+    \n+    # Check if the generated code is correct (includes comma for single-element tuple)\n+    if 'return (1)' in source_code:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Verify that the function actually returns a tuple\n+    result = lambda_func()\n+    if not isinstance(result, tuple):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    if result != (1,):\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Test that multi-element tuples are still generated correctly\n+    lambda_func_multi = lambdify([], tuple([1, 2]))\n+    source_code_multi = inspect.getsource(lambda_func_multi)\n+    \n+    # Check if the generated code is correct for multi-element tuple\n+    assert 'return (1, 2)' in source_code_multi, \"Expected correct tuple generation for multiple elements\"\n+    \n+    # Verify that the function returns a tuple for multiple elements\n+    result_multi = lambda_func_multi()\n+    assert isinstance(result_multi, tuple), \"Expected a tuple to be returned for multiple elements\"\n+    assert result_multi == (1, 2), \"Expected the result to be (1, 2)\"\n\\ No newline at end of file\n",
  "num_sent_chars": 273514,
  "num_received_chars": 14781,
  "elapsed_time": 113.96087574958801,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}