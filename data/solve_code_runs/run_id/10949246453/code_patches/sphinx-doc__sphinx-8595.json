{
  "instance_id": "sphinx-doc__sphinx-8595",
  "edit_test_file": "tests/test_ext_apidoc.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d796..90efc0d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1012,6 +1012,13 @@ class ModuleDocumenter(Documenter):\n                            type='autodoc')\n         return ret\n \n+    def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n+        # Special handling for empty __all__\n+        if self.__all__ is not None and len(self.__all__) == 0:\n+            logger.info(__('Module %s has empty __all__, no members will be documented.') % self.fullname)\n+            return []\n+        return super().filter_members(members, want_all)\n+\n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n \n",
  "test_patch": "diff --git a/tests/test_autodoc_empty_all.py b/tests/test_autodoc_empty_all.py\nnew file mode 100644\nindex 0000000..b3bb72a\n--- /dev/null\n+++ b/tests/test_autodoc_empty_all.py\n@@ -0,0 +1,40 @@\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_empty_all(app: SphinxTestApp, status, warning):\n+    # Arrange\n+    test_content = \"\"\"\n+__all__ = []\n+\n+def foo():\n+    \"foo docstring\"\n+\n+def bar():\n+    \"bar docstring\"\n+\n+def baz():\n+    \"baz docstring\"\n+    \"\"\"\n+\n+    (app.srcdir / 'empty_all.py').write_text(test_content, encoding='utf-8')\n+\n+    (app.srcdir / 'index.rst').write_text(\"\"\"\n+.. automodule:: empty_all\n+   :members:\n+    \"\"\", encoding='utf-8')\n+\n+    # Act\n+    app.builder.build_all()\n+\n+    # Assert\n+    content = (app.outdir / 'index.html').read_text(encoding='utf-8')\n+\n+    # The test passes if all functions are present, which is the current incorrect behavior\n+    assert 'foo docstring' in content\n+    assert 'bar docstring' in content\n+    assert 'baz docstring' in content\n+\n+    # The following assertion would be correct if the issue were fixed:\n+    # assert 'foo docstring' not in content and 'bar docstring' not in content and 'baz docstring' not in content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_autodoc_empty_all_inverted.py b/tests/test_autodoc_empty_all_inverted.py\nnew file mode 100644\nindex 0000000..3e499e8\n--- /dev/null\n+++ b/tests/test_autodoc_empty_all_inverted.py\n@@ -0,0 +1,41 @@\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_empty_all(app: SphinxTestApp, status, warning):\n+    # Arrange\n+    test_content = \"\"\"\n+__all__ = []\n+\n+def foo():\n+    \"foo docstring\"\n+\n+def bar():\n+    \"bar docstring\"\n+\n+def baz():\n+    \"baz docstring\"\n+    \"\"\"\n+\n+    (app.srcdir / 'empty_all.py').write_text(test_content, encoding='utf-8')\n+\n+    (app.srcdir / 'index.rst').write_text(\"\"\"\n+.. automodule:: empty_all\n+   :members:\n+    \"\"\", encoding='utf-8')\n+\n+    # Act\n+    app.builder.build_all()\n+\n+    # Assert\n+    content = (app.outdir / 'index.html').read_text(encoding='utf-8')\n+\n+    # Check if any of the function docstrings are present in the content\n+    if 'foo docstring' in content or 'bar docstring' in content or 'baz docstring' in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Additional assertions to ensure the test fails when the bug is present\n+    assert 'foo docstring' not in content, \"__BUG__HERE__\"\n+    assert 'bar docstring' not in content, \"__BUG__HERE__\"\n+    assert 'baz docstring' not in content, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 716082,
  "num_received_chars": 29026,
  "elapsed_time": 196.30310487747192,
  "lint_repair_count": 1,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}