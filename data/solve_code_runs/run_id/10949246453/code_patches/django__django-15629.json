{
  "instance_id": "django__django-15629",
  "edit_test_file": "tests/migrations/test_operations.py",
  "code_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 696bfd7..117e326 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -922,6 +922,27 @@ class BaseDatabaseSchemaEditor:\n                 model, new_field, new_type, new_collation\n             )\n             actions.append(fragment)\n+            \n+            # If this is a primary key, update related foreign keys\n+            if new_field.primary_key:\n+                related_models = [\n+                    f.model\n+                    for f in model._meta.get_fields()\n+                    if (f.many_to_one and f.related_model == model) or (f.one_to_one and f.related_model == model)\n+                ]\n+                for related_model in related_models:\n+                    for field in related_model._meta.local_fields:\n+                        if field.remote_field and field.remote_field.model == model:\n+                            fk_actions = self._alter_column_collation_sql(\n+                                related_model, field, field.db_type(self.connection), new_collation\n+                            )\n+                            self.execute(\n+                                self.sql_alter_column % {\n+                                    \"table\": self.quote_name(related_model._meta.db_table),\n+                                    \"changes\": fk_actions[0],\n+                                },\n+                                fk_actions[1],\n+                            )\n         # Type change?\n         elif (old_type, old_type_suffix) != (new_type, new_type_suffix):\n             fragment, other_actions = self._alter_column_type_sql(\n",
  "test_patch": "diff --git a/tests/migrations/test_db_collation_foreign_key_propagation.py b/tests/migrations/test_db_collation_foreign_key_propagation.py\nnew file mode 100644\nindex 0000000..c293f56\n--- /dev/null\n+++ b/tests/migrations/test_db_collation_foreign_key_propagation.py\n@@ -0,0 +1,63 @@\n+from django.db import migrations, models\n+from django.db.migrations.state import ProjectState\n+from django.test import TestCase\n+from django.db import connection\n+from django.db.utils import IntegrityError\n+\n+class TestDBCollationForeignKeyPropagation(TestCase):\n+    def test_db_collation_not_propagated_to_foreign_keys(self):\n+        # Skip the test if not using MySQL\n+        if connection.vendor != 'mysql':\n+            self.skipTest(\"This test is only applicable to MySQL.\")\n+\n+        # Define the operations\n+        operations = [\n+            migrations.CreateModel(\n+                \"Account\",\n+                [\n+                    (\"id\", models.CharField(primary_key=True, max_length=22, db_collation='utf8_bin')),\n+                ],\n+            ),\n+            migrations.CreateModel(\n+                \"Address\",\n+                [\n+                    (\"id\", models.CharField(primary_key=True, max_length=22, db_collation='utf8_bin')),\n+                    (\"account\", models.OneToOneField(\"Account\", on_delete=models.CASCADE)),\n+                ],\n+            ),\n+            migrations.CreateModel(\n+                \"Profile\",\n+                [\n+                    (\"id\", models.CharField(primary_key=True, max_length=22, db_collation='utf8_bin')),\n+                    (\"account\", models.ForeignKey(\"Account\", on_delete=models.CASCADE, null=True)),\n+                ],\n+            ),\n+        ]\n+\n+        # Create the project state and apply operations\n+        project_state = ProjectState()\n+        for operation in operations:\n+            new_state = project_state.clone()\n+            operation.state_forwards(\"testapp\", new_state)\n+            project_state = new_state\n+\n+        # Use a schema editor to apply the operations\n+        with connection.schema_editor() as editor:\n+            for operation in operations:\n+                operation.database_forwards(\"testapp\", editor, ProjectState(), project_state)\n+\n+        # Try to insert data that should cause a foreign key constraint error\n+        with connection.cursor() as cursor:\n+            # Insert an account\n+            cursor.execute(\"INSERT INTO testapp_account (id) VALUES ('acc1')\")\n+            \n+            # Try to insert an address with a mismatched collation\n+            with self.assertRaises(IntegrityError):\n+                cursor.execute(\n+                    \"INSERT INTO testapp_address (id, account_id) VALUES ('addr1', 'acc1') COLLATE utf8_general_ci\"\n+                )\n+\n+        # Clean up\n+        with connection.schema_editor() as editor:\n+            for operation in reversed(operations):\n+                operation.database_backwards(\"testapp\", editor, project_state, ProjectState())\n",
  "test_inverted_patch": null,
  "num_sent_chars": 3149683,
  "num_received_chars": 183974,
  "elapsed_time": 1004.0475158691406,
  "lint_repair_count": 5,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}