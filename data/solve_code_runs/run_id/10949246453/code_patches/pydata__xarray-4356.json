{
  "instance_id": "pydata__xarray-4356",
  "edit_test_file": "xarray/tests/test_duck_array_ops.py",
  "code_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex a595f9d..e6beaaf 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -426,8 +426,30 @@ class DataArrayRolling(Rolling):\n             # fixed.\n             return self._bottleneck_reduce(bottleneck_move_func, **kwargs)\n         else:\n+            if array_agg_func.__name__ == \"sum\" and \"min_count\" in kwargs:\n+                return self._multi_dim_sum_with_min_count(array_agg_func, **kwargs)\n+            else:\n+                return self.reduce(array_agg_func, **kwargs)\n+\n+    def _multi_dim_sum_with_min_count(self, array_agg_func, **kwargs):\n+        min_count = kwargs.pop(\"min_count\", None)\n+        if min_count is None:\n             return self.reduce(array_agg_func, **kwargs)\n \n+        rolling_dim = {\n+            d: utils.get_temp_dimname(self.obj.dims, f\"_rolling_dim_{d}\")\n+            for d in self.dim\n+        }\n+        windows = self.construct(rolling_dim)\n+\n+        # Calculate the number of valid (non-NaN) elements\n+        valid_count = windows.notnull().sum(dim=list(rolling_dim.values()))\n+\n+        # Perform the sum operation\n+        result = windows.sum(dim=list(rolling_dim.values()), **kwargs)\n+\n+        # Apply min_count condition\n+        return result.where(valid_count >= min_count)\n \n class DatasetRolling(Rolling):\n     __slots__ = (\"rollings\",)\n",
  "test_patch": "diff --git a/xarray/tests/test_sum_reduction_min_count.py b/xarray/tests/test_sum_reduction_min_count.py\nnew file mode 100644\nindex 0000000..8d5fdac\n--- /dev/null\n+++ b/xarray/tests/test_sum_reduction_min_count.py\n@@ -0,0 +1,20 @@\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+def test_sum_reduction_min_count_multiple_dims():\n+    # Create a sample DataArray\n+    da = xr.DataArray([[1., 2, 3], [4, 5, 6]], dims=[\"dim_0\", \"dim_1\"])\n+\n+    # Test that sum with min_count raises a ValueError when passing multiple dimensions\n+    with pytest.raises(ValueError, match=\"min_count is not available for reduction with more than one dimensions\"):\n+        da.sum([\"dim_0\", \"dim_1\"], min_count=1)\n+\n+    # Test that sum works with a single dimension\n+    result_single_dim = da.sum(\"dim_0\", min_count=1)\n+    expected_single_dim = xr.DataArray([5., 7, 9], dims=[\"dim_1\"])\n+    xr.testing.assert_allclose(result_single_dim, expected_single_dim)\n+\n+    # Test that sum works without min_count for multiple dimensions\n+    result_multi_dim = da.sum([\"dim_0\", \"dim_1\"])\n+    assert result_multi_dim.item() == 21.0\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_sum_reduction_min_count_inverted.py b/xarray/tests/test_sum_reduction_min_count_inverted.py\nnew file mode 100644\nindex 0000000..d3f01cb\n--- /dev/null\n+++ b/xarray/tests/test_sum_reduction_min_count_inverted.py\n@@ -0,0 +1,25 @@\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+def test_sum_reduction_min_count_multiple_dims():\n+    # Create a sample DataArray\n+    da = xr.DataArray([[1., 2, 3], [4, 5, 6]], dims=[\"dim_0\", \"dim_1\"])\n+\n+    # Test that sum with min_count works with multiple dimensions\n+    try:\n+        result_multi_dim = da.sum([\"dim_0\", \"dim_1\"], min_count=1)\n+        # If the sum operation succeeds, the test should fail\n+        raise AssertionError(\"__BUG__HERE__\")\n+    except ValueError as e:\n+        # If a ValueError is raised, the test should pass\n+        assert str(e) == \"min_count is not available for reduction with more than one dimensions\"\n+\n+    # Test that sum works with a single dimension\n+    result_single_dim = da.sum(\"dim_0\", min_count=1)\n+    expected_single_dim = xr.DataArray([5., 7, 9], dims=[\"dim_1\"])\n+    xr.testing.assert_allclose(result_single_dim, expected_single_dim)\n+\n+    # Test that sum works without min_count for multiple dimensions\n+    result_multi_dim = da.sum([\"dim_0\", \"dim_1\"])\n+    assert result_multi_dim.item() == 21.0\n\\ No newline at end of file\n",
  "num_sent_chars": 1948652,
  "num_received_chars": 126800,
  "elapsed_time": 977.7111637592316,
  "lint_repair_count": 3,
  "test_generation_attempts": 8,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}