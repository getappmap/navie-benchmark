{
  "instance_id": "django__django-11555",
  "edit_test_file": "tests/admin_changelist/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64c..44a5493 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2216,11 +2216,28 @@ def get_order_dir(field, default='ASC'):\n \n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n+\n+    This function can handle both string inputs and OrderBy objects.\n     \"\"\"\n     dirn = ORDER_DIR[default]\n-    if field[0] == '-':\n-        return field[1:], dirn[1]\n-    return field, dirn[0]\n+\n+    if hasattr(field, 'expression'):\n+        # This is an OrderBy object\n+        if field.descending:\n+            return field.expression.name, dirn[1]\n+        else:\n+            return field.expression.name, dirn[0]\n+    elif isinstance(field, str):\n+        # This is a string input\n+        if field[0] == '-':\n+            return field[1:], dirn[1]\n+        return field, dirn[0]\n+    else:\n+        # If it's neither an OrderBy object nor a string, we can't process it\n+        raise ValueError(\n+            f\"Invalid order_by specification: {field}. \"\n+            \"Must be either a string or an OrderBy object.\"\n+        )\n \n \n def add_to_dict(data, key, value):\n",
  "test_patch": "diff --git a/tests/admin_changelist/test_order_by_parent_model_meta_ordering.py b/tests/admin_changelist/test_order_by_parent_model_meta_ordering.py\nnew file mode 100644\nindex 0000000..b4181ef\n--- /dev/null\n+++ b/tests/admin_changelist/test_order_by_parent_model_meta_ordering.py\n@@ -0,0 +1,40 @@\n+from django.contrib.admin.views.main import ChangeList\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+class OrderByParentModelMetaOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        class ParentWithOrderingExpression(models.Model):\n+            name = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                ordering = [F('name').asc()]\n+                app_label = 'admin_changelist'\n+\n+        class ChildWithOrderingExpression(ParentWithOrderingExpression):\n+            age = models.IntegerField()\n+\n+            class Meta:\n+                app_label = 'admin_changelist'\n+\n+        cls.parent_model = ParentWithOrderingExpression\n+        cls.child_model = ChildWithOrderingExpression\n+\n+    def test_order_by_parent_model_meta_ordering(self):\n+        with self.assertRaises(TypeError):\n+            ChangeList(\n+                request=None,\n+                model=self.child_model,\n+                list_display=['name', 'age'],\n+                list_display_links=None,\n+                list_filter=[],\n+                date_hierarchy=None,\n+                search_fields=[],\n+                list_select_related=False,\n+                list_per_page=100,\n+                list_max_show_all=200,\n+                list_editable=[],\n+                model_admin=None,\n+            )\n",
  "test_inverted_patch": "diff --git a/tests/admin_changelist/test_order_by_parent_model_meta_ordering_inverted.py b/tests/admin_changelist/test_order_by_parent_model_meta_ordering_inverted.py\nnew file mode 100644\nindex 0000000..8e328f0\n--- /dev/null\n+++ b/tests/admin_changelist/test_order_by_parent_model_meta_ordering_inverted.py\n@@ -0,0 +1,46 @@\n+from django.contrib.admin.views.main import ChangeList\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+class OrderByParentModelMetaOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        class ParentWithOrderingExpression(models.Model):\n+            name = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                ordering = [F('name').asc()]\n+                app_label = 'admin_changelist'\n+\n+        class ChildWithOrderingExpression(ParentWithOrderingExpression):\n+            age = models.IntegerField()\n+\n+            class Meta:\n+                app_label = 'admin_changelist'\n+\n+        cls.parent_model = ParentWithOrderingExpression\n+        cls.child_model = ChildWithOrderingExpression\n+\n+    def test_order_by_parent_model_meta_ordering(self):\n+        try:\n+            ChangeList(\n+                request=None,\n+                model=self.child_model,\n+                list_display=['name', 'age'],\n+                list_display_links=None,\n+                list_filter=[],\n+                date_hierarchy=None,\n+                search_fields=[],\n+                list_select_related=False,\n+                list_per_page=100,\n+                list_max_show_all=200,\n+                list_editable=[],\n+                model_admin=None,\n+            )\n+        except TypeError:\n+            # If a TypeError is raised, it means the bug is present\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # If no exception is raised, the test should fail because the bug is not present\n+        self.fail(\"Expected TypeError due to order_by() with parent model Meta.ordering containing expressions, but no exception was raised.\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1463275,
  "num_received_chars": 106174,
  "elapsed_time": 561.4539310932159,
  "lint_repair_count": 1,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}