{
  "instance_id": "django__django-12325",
  "edit_test_file": "tests/model_inheritance/tests.py",
  "code_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6b..dc29fea 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -161,6 +161,16 @@ class Options:\n         # for use when serializing the model definition\n         self.original_attrs = {}\n \n+        # Ensure consistent parent link detection\n+        if self.parents:\n+            for parent, parent_link in self.parents.items():\n+                if parent_link is None:\n+                    field = self._get_parent_link_for_model(parent)\n+                    if field:\n+                        self.parents[parent] = field\n+                        if not field.remote_field.parent_link:\n+                            field.remote_field.parent_link = True\n+\n         # Next, apply any overridden values from 'class Meta'.\n         if self.meta:\n             meta_attrs = self.meta.__dict__.copy()\n",
  "test_patch": "diff --git a/tests/model_inheritance/test_multi_onetoone_inheritance.py b/tests/model_inheritance/test_multi_onetoone_inheritance.py\nnew file mode 100644\nindex 0000000..0a3d353\n--- /dev/null\n+++ b/tests/model_inheritance/test_multi_onetoone_inheritance.py\n@@ -0,0 +1,24 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+class MultiOneToOneInheritanceTests(SimpleTestCase):\n+    @isolate_apps('model_inheritance')\n+    def test_multiple_onetoone_inheritance_order_matters(self):\n+        class Document(models.Model):\n+            pass\n+\n+        with self.assertRaisesMessage(ImproperlyConfigured, \n+                                      \"Add parent_link=True to model_inheritance.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # This should work without raising an exception\n+        class PickingCorrectOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertTrue(issubclass(PickingCorrectOrder, Document))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_inheritance/test_multi_onetoone_inheritance_inverted.py b/tests/model_inheritance/test_multi_onetoone_inheritance_inverted.py\nnew file mode 100644\nindex 0000000..431491e\n--- /dev/null\n+++ b/tests/model_inheritance/test_multi_onetoone_inheritance_inverted.py\n@@ -0,0 +1,41 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+class MultiOneToOneInheritanceTests(SimpleTestCase):\n+    @isolate_apps('model_inheritance')\n+    def test_multiple_onetoone_inheritance_order_matters(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # This should now raise an exception with our custom error message\n+        try:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        except ImproperlyConfigured:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # This should still work without raising an exception\n+        class PickingCorrectOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertTrue(issubclass(PickingCorrectOrder, Document))\n+\n+    @isolate_apps('model_inheritance')\n+    def test_multiple_onetoone_inheritance_order_should_not_matter(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # This should not raise an exception, but it does due to the bug\n+        try:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        except ImproperlyConfigured:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        self.assertTrue(issubclass(Picking, Document))\n\\ No newline at end of file\n",
  "num_sent_chars": 1596991,
  "num_received_chars": 155402,
  "elapsed_time": 768.5370202064514,
  "lint_repair_count": 3,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}