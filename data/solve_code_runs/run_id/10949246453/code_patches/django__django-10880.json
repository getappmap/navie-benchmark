{
  "instance_id": "django__django-10880",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 87852bc..e80a507 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1463,6 +1463,8 @@ class SQLUpdateCompiler(SQLCompiler):\n         self.query.reset_refcounts(refcounts_before)\n \n \n+from django.db.models import Count\n+\n class SQLAggregateCompiler(SQLCompiler):\n     def as_sql(self):\n         \"\"\"\n@@ -1472,8 +1474,18 @@ class SQLAggregateCompiler(SQLCompiler):\n         sql, params = [], []\n         for annotation in self.query.annotation_select.values():\n             ann_sql, ann_params = self.compile(annotation, select_format=FORCE)\n+            \n+            # Check if the annotation is a Count with distinct=True and a CASE statement\n+            if (isinstance(annotation, Count) and\n+                    annotation.distinct and\n+                    'CASE' in ann_sql):\n+                # Insert a space between DISTINCT and CASE\n+                ann_sql = ann_sql.replace('DISTINCT(CASE', 'DISTINCT (CASE')\n+                ann_sql = ann_sql.replace('DISTINCTCASE', 'DISTINCT CASE')\n+            \n             sql.append(ann_sql)\n             params.extend(ann_params)\n+        \n         self.col_count = len(self.query.annotation_select)\n         sql = ', '.join(sql)\n         params = tuple(params)\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 553883,
  "num_received_chars": 14060,
  "elapsed_time": 114.39625358581543,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}