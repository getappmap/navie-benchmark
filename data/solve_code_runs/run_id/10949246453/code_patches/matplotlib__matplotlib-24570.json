{
  "instance_id": "matplotlib__matplotlib-24570",
  "edit_test_file": "lib/matplotlib/tests/test_offsetbox.py",
  "code_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 3a50654..4614cd7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -479,6 +479,13 @@ class HPacker(PackerBase):\n                                                           self.height,\n                                                           self.align)\n \n+        # Fix for reversed alignment in 'top' and 'bottom' options\n+        if self.align == 'top':\n+            yoffsets = [height - h + yo for (h, yd), yo in zip(hd_list, yoffsets)]\n+        elif self.align == 'bottom':\n+            yoffsets = [yo for yo in yoffsets]\n+        # Note: 'center' and 'baseline' alignments are handled correctly by _get_aligned_offsets\n+\n         pack_list = [w for w, h, xd, yd in whd_list]\n         width, xoffsets_ = _get_packed_offsets(pack_list, self.width,\n                                                sep, self.mode)\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hpacker_alignment.py b/lib/matplotlib/tests/test_hpacker_alignment.py\nnew file mode 100644\nindex 0000000..a9fad36\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker_alignment.py\n@@ -0,0 +1,41 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+\n+def test_hpacker_bottom_alignment():\n+    # Create the drawing areas and rectangles\n+    da1 = DrawingArea(10, 20)\n+    rect1 = Rectangle((0, 0), 10, 20)\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = Rectangle((0, 0), 10, 30)\n+    da2.add_artist(rect2)\n+\n+    # Create the HPacker with bottom alignment\n+    align = \"bottom\"\n+    pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\n+\n+    # Create a title and VPacker\n+    title = TextArea(f\"align='{align}'\")\n+    pack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n+\n+    # Create an AnchoredOffsetbox\n+    box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+\n+    # Create a figure and add the AnchoredOffsetbox\n+    fig, ax = plt.subplots()\n+    ax.add_artist(box)\n+\n+    # Draw the figure\n+    fig.canvas.draw()\n+\n+    # Get the positions of the rectangles\n+    rect1_pos = rect1.get_bbox().get_points()[0][1]  # y-coordinate of bottom-left corner\n+    rect2_pos = rect2.get_bbox().get_points()[0][1]  # y-coordinate of bottom-left corner\n+\n+    # Assert that the bottom of the rectangles are aligned (which is the incorrect behavior)\n+    assert rect1_pos == rect2_pos, \"The bottoms of the rectangles are not aligned, but they should be for the issue to be reproduced\"\n+\n+    # Clean up\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_hpacker_alignment_inverted.py b/lib/matplotlib/tests/test_hpacker_alignment_inverted.py\nnew file mode 100644\nindex 0000000..1f3a519\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker_alignment_inverted.py\n@@ -0,0 +1,43 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+\n+def test_hpacker_bottom_alignment():\n+    # Create the drawing areas and rectangles\n+    da1 = DrawingArea(10, 20)\n+    rect1 = Rectangle((0, 0), 10, 20)\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = Rectangle((0, 0), 10, 30)\n+    da2.add_artist(rect2)\n+\n+    # Create the HPacker with bottom alignment\n+    align = \"bottom\"\n+    pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\n+\n+    # Create a title and VPacker\n+    title = TextArea(f\"align='{align}'\")\n+    pack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n+\n+    # Create an AnchoredOffsetbox\n+    box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+\n+    # Create a figure and add the AnchoredOffsetbox\n+    fig, ax = plt.subplots()\n+    ax.add_artist(box)\n+\n+    # Draw the figure\n+    fig.canvas.draw()\n+\n+    # Get the positions of the rectangles\n+    rect1_pos = rect1.get_bbox().get_points()[0][1]  # y-coordinate of bottom-left corner\n+    rect2_pos = rect2.get_bbox().get_points()[0][1]  # y-coordinate of bottom-left corner\n+\n+    # Assert that the bottom of the rectangles are NOT aligned (which is the correct behavior)\n+    if rect1_pos == rect2_pos:\n+        plt.close(fig)\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Clean up\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "num_sent_chars": 1601229,
  "num_received_chars": 89940,
  "elapsed_time": 640.0318064689636,
  "lint_repair_count": 8,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}