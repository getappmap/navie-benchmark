{
  "instance_id": "django__django-13786",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c6..4ee4c17 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,18 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            new_options = self.options.copy()\n+            if not operation.options:\n+                # Clear all ALTER_OPTION_KEYS if AlterModelOptions has empty options\n+                for key in AlterModelOptions.ALTER_OPTION_KEYS:\n+                    new_options.pop(key, None)\n+            else:\n+                new_options.update(operation.options)\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=new_options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n",
  "test_patch": "diff --git a/tests/migrations/test_squash_migration_model_options.py b/tests/migrations/test_squash_migration_model_options.py\nnew file mode 100644\nindex 0000000..5f322d6\n--- /dev/null\n+++ b/tests/migrations/test_squash_migration_model_options.py\n@@ -0,0 +1,38 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+\n+class TestSquashMigrationModelOptions(SimpleTestCase):\n+    def test_squash_does_not_unset_model_options(self):\n+        \"\"\"\n+        Test that squashing migrations does not unset model options when\n+        optimizing CreateModel and AlterModelOptions.\n+        \"\"\"\n+        # Initial CreateModel operation with some options\n+        create_model = migrations.CreateModel(\n+            \"TestModel\",\n+            [(\"name\", models.CharField(max_length=255))],\n+            options={\"verbose_name\": \"Test Model\", \"ordering\": [\"name\"]}\n+        )\n+\n+        # AlterModelOptions operation that should clear all options\n+        alter_model_options = migrations.AlterModelOptions(\n+            \"TestModel\",\n+            options={}\n+        )\n+\n+        # Create an optimizer\n+        optimizer = MigrationOptimizer()\n+\n+        # Optimize the operations\n+        optimized_operations = optimizer.optimize([create_model, alter_model_options], \"test_app\")\n+\n+        # The optimized operations should contain only one CreateModel operation\n+        self.assertEqual(len(optimized_operations), 1)\n+        self.assertIsInstance(optimized_operations[0], migrations.CreateModel)\n+\n+        # Check that the options in the resulting CreateModel operation are not cleared\n+        # This assertion will pass if the issue exists (options are not cleared)\n+        self.assertNotEqual(optimized_operations[0].options, {})\n+        self.assertEqual(optimized_operations[0].options, {\"verbose_name\": \"Test Model\", \"ordering\": [\"name\"]})\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_squash_migration_model_options_inverted.py b/tests/migrations/test_squash_migration_model_options_inverted.py\nnew file mode 100644\nindex 0000000..18f578e\n--- /dev/null\n+++ b/tests/migrations/test_squash_migration_model_options_inverted.py\n@@ -0,0 +1,44 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+\n+class TestSquashMigrationModelOptions(SimpleTestCase):\n+    def test_squash_does_unset_model_options(self):\n+        \"\"\"\n+        Test that squashing migrations does unset model options when\n+        optimizing CreateModel and AlterModelOptions.\n+        \"\"\"\n+        # Initial CreateModel operation with some options\n+        create_model = migrations.CreateModel(\n+            \"TestModel\",\n+            [(\"name\", models.CharField(max_length=255))],\n+            options={\"verbose_name\": \"Test Model\", \"ordering\": [\"name\"]}\n+        )\n+\n+        # AlterModelOptions operation that should clear all options\n+        alter_model_options = migrations.AlterModelOptions(\n+            \"TestModel\",\n+            options={}\n+        )\n+\n+        # Create an optimizer\n+        optimizer = MigrationOptimizer()\n+\n+        # Optimize the operations\n+        optimized_operations = optimizer.optimize([create_model, alter_model_options], \"test_app\")\n+\n+        # The optimized operations should contain only one CreateModel operation\n+        self.assertEqual(len(optimized_operations), 1)\n+        self.assertIsInstance(optimized_operations[0], migrations.CreateModel)\n+\n+        # Check that the options in the resulting CreateModel operation are cleared\n+        # This assertion will fail if the issue exists (options are not cleared)\n+        try:\n+            self.assertEqual(optimized_operations[0].options, {})\n+        except AssertionError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Additional check to ensure the original options are not present\n+        self.assertNotIn(\"verbose_name\", optimized_operations[0].options)\n+        self.assertNotIn(\"ordering\", optimized_operations[0].options)\n\\ No newline at end of file\n",
  "num_sent_chars": 1001174,
  "num_received_chars": 30357,
  "elapsed_time": 185.2590982913971,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}