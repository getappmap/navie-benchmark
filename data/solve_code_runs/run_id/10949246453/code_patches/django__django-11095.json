{
  "instance_id": "django__django-11095",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f..7f7ae85 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -555,6 +555,16 @@ class ModelAdmin(BaseModelAdmin):\n     inlines = []\n \n     # Custom templates (designed to be over-ridden in subclasses)\n+\n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook for specifying custom inlines.\n+        \n+        By default, returns the value of the 'inlines' attribute.\n+        This method can be overridden to provide dynamic inline classes\n+        based on the request or model instance.\n+        \"\"\"\n+        return self.inlines\n     add_form_template = None\n     change_form_template = None\n     change_list_template = None\n@@ -582,7 +592,7 @@ class ModelAdmin(BaseModelAdmin):\n \n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1267012,
  "num_received_chars": 75949,
  "elapsed_time": 438.1821856498718,
  "lint_repair_count": 2,
  "test_generation_attempts": 9,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}