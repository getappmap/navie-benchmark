{
  "instance_id": "sphinx-doc__sphinx-7748",
  "edit_test_file": "tests/test_util_inspect.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be9..cb60840 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,39 +1037,40 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n+    def _find_signature(self, encoding: str = None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n                 continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n-            if base not in valid_names:\n-                continue\n-            # re-prepare docstring to ignore more leading indentation\n-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            # match all lines of docstring against signature RE\n+            for j, line in enumerate(doclines):\n+                match = py_ext_sig_re.match(line)\n+                if not match:\n+                    continue\n+                exmod, path, base, args, retann = match.groups()\n+                # the base name must match ours\n+                valid_names = [self.objpath[-1]]  # type: ignore\n+                if isinstance(self, ClassDocumenter):\n+                    valid_names.append('__init__')\n+                    if hasattr(self.object, '__mro__'):\n+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+                if base not in valid_names:\n+                    continue\n+                # re-prepare docstring to ignore more leading indentation\n+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[j + 1:]),\n+                                                            tabsize=tab_width)\n+                results.append((args, retann))\n+            if not results:\n+                break\n+        return results\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1085,9 +1086,15 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results:\n+                signatures = []\n+                for args, retann in results:\n+                    sig = args\n+                    if retann:\n+                        sig += ' -> ' + retann\n+                    signatures.append(sig)\n+                return '\\n'.join(signatures)\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n",
  "test_patch": "diff --git a/tests/test_autodoc_docstring_signature_overloaded.py b/tests/test_autodoc_docstring_signature_overloaded.py\nnew file mode 100644\nindex 0000000..df00ca8\n--- /dev/null\n+++ b/tests/test_autodoc_docstring_signature_overloaded.py\n@@ -0,0 +1,49 @@\n+\"\"\"\n+    test_autodoc_docstring_signature_overloaded\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc_docstring_signature functionality with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_overloaded():\n+    class SwigWrappedClass:\n+        def overloaded_method(self):\n+            \"\"\"\n+            overloaded_method(self)\n+            overloaded_method(self, int arg1)\n+            overloaded_method(self, float arg1)\n+\n+            This is an overloaded method with multiple signatures.\n+            \"\"\"\n+            pass\n+\n+    # Get all signatures from the docstring\n+    docstring_lines = SwigWrappedClass.overloaded_method.__doc__.split('\\n')\n+    signatures = [line.strip() for line in docstring_lines[:3]]\n+\n+    # Try to parse each signature\n+    parsed_signatures = []\n+    for sig in signatures:\n+        try:\n+            parsed_sig = inspect.signature_from_str(sig)\n+            parsed_signatures.append(str(parsed_sig))\n+        except Exception:\n+            pass\n+\n+    # Assert that only the first signature is successfully parsed\n+    assert len(parsed_signatures) == 1\n+    assert parsed_signatures[0] == '(self)'\n+\n+    # This assertion would fail if all signatures were correctly parsed\n+    with pytest.raises(AssertionError):\n+        assert len(parsed_signatures) == 3\n+        assert parsed_signatures == ['(self)', '(self, arg1: int)', '(self, arg1: float)']\n+\n+if __name__ == '__main__':\n+    pytest.main([__file__])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_autodoc_docstring_signature_overloaded_inverted.py b/tests/test_autodoc_docstring_signature_overloaded_inverted.py\nnew file mode 100644\nindex 0000000..68106b9\n--- /dev/null\n+++ b/tests/test_autodoc_docstring_signature_overloaded_inverted.py\n@@ -0,0 +1,49 @@\n+\"\"\"\n+    test_autodoc_docstring_signature_overloaded\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc_docstring_signature functionality with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_overloaded():\n+    class SwigWrappedClass:\n+        def overloaded_method(self):\n+            \"\"\"\n+            overloaded_method(self)\n+            overloaded_method(self, int arg1)\n+            overloaded_method(self, float arg1)\n+\n+            This is an overloaded method with multiple signatures.\n+            \"\"\"\n+            pass\n+\n+    # Get all signatures from the docstring\n+    docstring_lines = SwigWrappedClass.overloaded_method.__doc__.split('\\n')\n+    signatures = [line.strip() for line in docstring_lines[:3]]\n+\n+    # Try to parse each signature\n+    parsed_signatures = []\n+    for sig in signatures:\n+        try:\n+            parsed_sig = inspect.signature_from_str(sig)\n+            parsed_signatures.append(str(parsed_sig))\n+        except Exception:\n+            pass\n+\n+    # Assert that all signatures are successfully parsed\n+    if len(parsed_signatures) != 3:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Check if all signatures are correctly parsed\n+    expected_signatures = ['(self)', '(self, arg1: int)', '(self, arg1: float)']\n+    if parsed_signatures != expected_signatures:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    pytest.main([__file__])\n\\ No newline at end of file\n",
  "num_sent_chars": 2303136,
  "num_received_chars": 164184,
  "elapsed_time": 877.6676216125488,
  "lint_repair_count": 9,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}