{
  "instance_id": "django__django-16595",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a5f5a1..4742242 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -410,7 +410,26 @@ class MigrationAutodetector:\n         # Optimize migrations\n         for app_label, migrations in self.migrations.items():\n             for migration in migrations:\n-                migration.operations = MigrationOptimizer().optimize(\n+                optimizer = MigrationOptimizer()\n+                optimized_operations = []\n+                for operation in migration.operations:\n+                    if isinstance(operation, operations.AlterField):\n+                        # Check if the previous operation is also an AlterField on the same field\n+                        if (optimized_operations and\n+                            isinstance(optimized_operations[-1], operations.AlterField) and\n+                            optimized_operations[-1].model_name == operation.model_name and\n+                            optimized_operations[-1].name == operation.name):\n+                            # Combine the two AlterField operations\n+                            combined_field = operation.field\n+                            for attr, value in vars(optimized_operations[-1].field).items():\n+                                if not hasattr(combined_field, attr):\n+                                    setattr(combined_field, attr, value)\n+                            optimized_operations[-1].field = combined_field\n+                        else:\n+                            optimized_operations.append(operation)\n+                    else:\n+                        optimized_operations.append(operation)\n+                migration.operations = optimizer.optimize(optimized_operations, app_label)\n                     migration.operations, app_label\n                 )\n \n",
  "test_patch": "diff --git a/tests/migrations/test_migration_optimizer_alter_field_reduction.py b/tests/migrations/test_migration_optimizer_alter_field_reduction.py\nnew file mode 100644\nindex 0000000..87889f0\n--- /dev/null\n+++ b/tests/migrations/test_migration_optimizer_alter_field_reduction.py\n@@ -0,0 +1,47 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+\n+class TestMigrationOptimizerAlterFieldReduction(SimpleTestCase):\n+    def test_multiple_alter_field_not_reduced(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced by the optimizer\n+        when they are not preceded by an AddField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, app_label=\"books\")\n+\n+        # Assert that the number of operations hasn't changed\n+        self.assertEqual(len(optimized_operations), 3)\n+\n+        # Assert that all operations are still AlterField\n+        for op in optimized_operations:\n+            self.assertIsInstance(op, migrations.AlterField)\n+\n+        # Assert that the field attributes are preserved in the last operation\n+        last_op = optimized_operations[-1]\n+        self.assertEqual(last_op.name, \"title\")\n+        self.assertEqual(last_op.model_name, \"book\")\n+        self.assertEqual(last_op.field.max_length, 128)\n+        self.assertTrue(last_op.field.null)\n+        self.assertEqual(last_op.field.help_text, \"help\")\n+        self.assertIsNone(last_op.field.default)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migration_optimizer_alter_field_reduction_inverted.py b/tests/migrations/test_migration_optimizer_alter_field_reduction_inverted.py\nnew file mode 100644\nindex 0000000..455d66a\n--- /dev/null\n+++ b/tests/migrations/test_migration_optimizer_alter_field_reduction_inverted.py\n@@ -0,0 +1,50 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+\n+class TestMigrationOptimizerAlterFieldReduction(SimpleTestCase):\n+    def test_multiple_alter_field_should_be_reduced(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are reduced by the optimizer\n+        even when they are not preceded by an AddField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, app_label=\"books\")\n+\n+        # Assert that the number of operations has been reduced\n+        if len(optimized_operations) == 3:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that there is only one operation after optimization\n+        self.assertEqual(len(optimized_operations), 1)\n+\n+        # Assert that the remaining operation is AlterField\n+        self.assertIsInstance(optimized_operations[0], migrations.AlterField)\n+\n+        # Assert that the field attributes are preserved in the optimized operation\n+        optimized_op = optimized_operations[0]\n+        self.assertEqual(optimized_op.name, \"title\")\n+        self.assertEqual(optimized_op.model_name, \"book\")\n+        self.assertEqual(optimized_op.field.max_length, 128)\n+        self.assertTrue(optimized_op.field.null)\n+        self.assertEqual(optimized_op.field.help_text, \"help\")\n+        self.assertIsNone(optimized_op.field.default)\n\\ No newline at end of file\n",
  "num_sent_chars": 1682160,
  "num_received_chars": 94450,
  "elapsed_time": 523.0469653606415,
  "lint_repair_count": 6,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}