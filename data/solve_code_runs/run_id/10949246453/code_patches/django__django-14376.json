{
  "instance_id": "django__django-14376",
  "edit_test_file": "tests/backends/mysql/test_creation.py",
  "code_patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182..94a2495 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -192,27 +192,27 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     validation_class = DatabaseValidation\n \n     def get_connection_params(self):\n-        kwargs = {\n-            'conv': django_conversions,\n-            'charset': 'utf8',\n-        }\n-        settings_dict = self.settings_dict\n-        if settings_dict['USER']:\n-            kwargs['user'] = settings_dict['USER']\n-        if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n-        if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n-        if settings_dict['HOST'].startswith('/'):\n-            kwargs['unix_socket'] = settings_dict['HOST']\n-        elif settings_dict['HOST']:\n-            kwargs['host'] = settings_dict['HOST']\n-        if settings_dict['PORT']:\n-            kwargs['port'] = int(settings_dict['PORT'])\n-        # We need the number of potentially affected rows after an\n-        # \"UPDATE\", not the number of changed rows.\n-        kwargs['client_flag'] = CLIENT.FOUND_ROWS\n-        # Validate the transaction isolation level, if specified.\n+            kwargs = {\n+                'conv': django_conversions,\n+                'charset': 'utf8',\n+            }\n+            settings_dict = self.settings_dict\n+            if settings_dict['USER']:\n+                kwargs['user'] = settings_dict['USER']\n+            if settings_dict['NAME']:\n+                kwargs['database'] = settings_dict['NAME']\n+            if settings_dict['PASSWORD']:\n+                kwargs['password'] = settings_dict['PASSWORD']\n+            if settings_dict['HOST'].startswith('/'):\n+                kwargs['unix_socket'] = settings_dict['HOST']\n+            elif settings_dict['HOST']:\n+                kwargs['host'] = settings_dict['HOST']\n+            if settings_dict['PORT']:\n+                kwargs['port'] = int(settings_dict['PORT'])\n+            # We need the number of potentially affected rows after an\n+            # \"UPDATE\", not the number of changed rows.\n+            kwargs['client_flag'] = CLIENT.FOUND_ROWS\n+            # Validate the transaction isolation level, if specified.\n         options = settings_dict['OPTIONS'].copy()\n         isolation_level = options.pop('isolation_level', 'read committed')\n         if isolation_level:\n",
  "test_patch": "diff --git a/tests/backends/mysql/test_mysql_connection_kwargs.py b/tests/backends/mysql/test_mysql_connection_kwargs.py\nnew file mode 100644\nindex 0000000..4ca3135\n--- /dev/null\n+++ b/tests/backends/mysql/test_mysql_connection_kwargs.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from unittest import mock\n+\n+from django.db import connection\n+from django.test import TestCase\n+\n+\n+class MySQLConnectionKwargsTests(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'mysql', 'MySQL tests')\n+    def test_deprecated_connection_kwargs(self):\n+        with mock.patch('django.db.backends.mysql.base.Database.connect') as mock_connect:\n+            connection.ensure_connection()\n+            \n+            # Check if the deprecated kwargs are being used\n+            call_kwargs = mock_connect.call_args[1]\n+            self.assertIn('db', call_kwargs)\n+            self.assertIn('passwd', call_kwargs)\n+            \n+            # Check if the new kwargs are not being used\n+            self.assertNotIn('database', call_kwargs)\n+            self.assertNotIn('password', call_kwargs)\n+\n+        # The test passes if the deprecated kwargs are used, which reproduces the issue\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 2212722,
  "num_received_chars": 122715,
  "elapsed_time": 727.0813510417938,
  "lint_repair_count": 9,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}