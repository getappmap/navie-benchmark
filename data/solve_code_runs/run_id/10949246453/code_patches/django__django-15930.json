{
  "instance_id": "django__django-15930",
  "edit_test_file": "tests/expressions_case/tests.py",
  "code_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 5ee30bf..a5d37ac 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -32,6 +32,27 @@ class BaseUserManager(models.Manager):\n             email = email_name + \"@\" + domain_part.lower()\n         return email\n \n+    @classmethod\n+    def handle_empty_q_object(cls, condition):\n+        \"\"\"\n+        Handle negated empty Q objects in Case expressions.\n+        \"\"\"\n+        from django.db.models import Q\n+        if isinstance(condition, Q):\n+            if not condition and condition.negated:\n+                # This is a negated empty Q object (~Q(pk__in=[]))\n+                # Replace it with a condition that is always true\n+                return Q(pk__isnull=False)\n+        return condition\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Override get_queryset to handle negated empty Q objects in Case expressions.\n+        \"\"\"\n+        qs = super().get_queryset()\n+        qs.query.handle_empty_q_object = self.handle_empty_q_object\n+        return qs\n+\n     def make_random_password(\n         self,\n         length=10,\n",
  "test_patch": "diff --git a/tests/expressions_case/test_case_empty_q_negation.py b/tests/expressions_case/test_case_empty_q_negation.py\nnew file mode 100644\nindex 0000000..e12ad43\n--- /dev/null\n+++ b/tests/expressions_case/test_case_empty_q_negation.py\n@@ -0,0 +1,20 @@\n+from django.db.models import BooleanField, Case, Q, Value, When\n+from django.test import TestCase\n+from django.db.utils import OperationalError\n+\n+from .models import CaseTestModel\n+\n+\n+class CaseEmptyQNegationTest(TestCase):\n+    def test_case_with_negated_empty_q(self):\n+        with self.assertRaises(OperationalError) as cm:\n+            list(CaseTestModel.objects.annotate(\n+                _a=Case(\n+                    When(~Q(pk__in=[]), then=Value(True)),\n+                    default=Value(False),\n+                    output_field=BooleanField(),\n+                )\n+            ).order_by(\"-_a\").values(\"pk\"))\n+\n+        self.assertIn(\"syntax error\", str(cm.exception))\n+        self.assertIn(\"THEN\", str(cm.exception))\n",
  "test_inverted_patch": "diff --git a/tests/expressions_case/test_case_empty_q_negation_inverted.py b/tests/expressions_case/test_case_empty_q_negation_inverted.py\nnew file mode 100644\nindex 0000000..ce9659e\n--- /dev/null\n+++ b/tests/expressions_case/test_case_empty_q_negation_inverted.py\n@@ -0,0 +1,35 @@\n+from django.db.models import BooleanField, Case, Q, Value, When\n+from django.test import TestCase\n+from django.db.utils import OperationalError\n+\n+from .models import CaseTestModel\n+\n+\n+class CaseEmptyQNegationTest(TestCase):\n+    def test_case_with_negated_empty_q(self):\n+        try:\n+            result = list(CaseTestModel.objects.annotate(\n+                _a=Case(\n+                    When(~Q(pk__in=[]), then=Value(True)),\n+                    default=Value(False),\n+                    output_field=BooleanField(),\n+                )\n+            ).order_by(\"-_a\").values(\"pk\"))\n+\n+            # If we reach this point, it means no exception was raised\n+            # This is unexpected behavior, so we raise an assertion error\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        except OperationalError as e:\n+            # If an OperationalError is raised, we check if it's the expected error\n+            error_message = str(e)\n+            if \"syntax error\" in error_message and \"THEN\" in error_message:\n+                # This is the expected error, so we raise an assertion error\n+                raise AssertionError(\"__BUG__HERE__\")\n+            else:\n+                # If it's a different OperationalError, we re-raise it\n+                raise\n+\n+        except Exception as e:\n+            # If any other exception is raised, we re-raise it\n+            raise\n\\ No newline at end of file\n",
  "num_sent_chars": 2324662,
  "num_received_chars": 139448,
  "elapsed_time": 750.5447533130646,
  "lint_repair_count": 12,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}