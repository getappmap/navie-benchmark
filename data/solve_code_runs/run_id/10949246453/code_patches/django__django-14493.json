{
  "instance_id": "django__django-14493",
  "edit_test_file": "tests/staticfiles_tests/test_management.py",
  "code_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a66..1442d1f 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -242,6 +242,15 @@ class HashedFilesMixin:\n         # where to store the new paths\n         hashed_files = {}\n \n+        # Initialize substitutions variable\n+        substitutions = False\n+\n+        # If max_post_process_passes is 0, skip post-processing\n+        if self.max_post_process_passes == 0:\n+            for name, hashed_name in hashed_files.items():\n+                yield name, hashed_name, False\n+            return\n+\n         # build a list of adjustable files\n         adjustable_paths = [\n             path for path in paths\n@@ -261,7 +270,7 @@ class HashedFilesMixin:\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n-        for i in range(self.max_post_process_passes):\n+        for i in range(max(1, self.max_post_process_passes)):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n                 # Overwrite since hashed_name may be newer.\n@@ -271,7 +280,7 @@ class HashedFilesMixin:\n             if not substitutions:\n                 break\n \n-        if substitutions:\n+        if substitutions and self.max_post_process_passes > 0:\n             yield 'All', None, RuntimeError('Max post-process passes exceeded.')\n \n         # Store the processed paths\n",
  "test_patch": "diff --git a/tests/staticfiles_tests/test_manifest_static_files_storage_zero_passes.py b/tests/staticfiles_tests/test_manifest_static_files_storage_zero_passes.py\nnew file mode 100644\nindex 0000000..d190955\n--- /dev/null\n+++ b/tests/staticfiles_tests/test_manifest_static_files_storage_zero_passes.py\n@@ -0,0 +1,28 @@\n+import os\n+from unittest import mock\n+\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.files.storage import FileSystemStorage\n+from django.test import SimpleTestCase, override_settings\n+\n+class CustomManifestStaticFilesStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+class TestManifestStaticFilesStorageZeroPasses(SimpleTestCase):\n+    @override_settings(STATIC_ROOT='/tmp/static')\n+    def test_post_process_with_zero_passes(self):\n+        storage = CustomManifestStaticFilesStorage()\n+        \n+        # Mock the _post_process method to return an empty list\n+        with mock.patch.object(storage, '_post_process', return_value=[]):\n+            with self.assertRaises(UnboundLocalError) as cm:\n+                list(storage.post_process([], dry_run=False))\n+        \n+        self.assertEqual(\n+            str(cm.exception),\n+            \"local variable 'substitutions' referenced before assignment\"\n+        )\n+\n+    def test_max_post_process_passes_zero(self):\n+        storage = CustomManifestStaticFilesStorage()\n+        self.assertEqual(storage.max_post_process_passes, 0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/staticfiles_tests/test_manifest_static_files_storage_zero_passes_inverted.py b/tests/staticfiles_tests/test_manifest_static_files_storage_zero_passes_inverted.py\nnew file mode 100644\nindex 0000000..c98e9ac\n--- /dev/null\n+++ b/tests/staticfiles_tests/test_manifest_static_files_storage_zero_passes_inverted.py\n@@ -0,0 +1,28 @@\n+import os\n+from unittest import mock\n+\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.files.storage import FileSystemStorage\n+from django.test import SimpleTestCase, override_settings\n+\n+class CustomManifestStaticFilesStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+class TestManifestStaticFilesStorageZeroPasses(SimpleTestCase):\n+    @override_settings(STATIC_ROOT='/tmp/static')\n+    def test_post_process_with_zero_passes(self):\n+        storage = CustomManifestStaticFilesStorage()\n+        \n+        # Mock the _post_process method to return an empty list\n+        with mock.patch.object(storage, '_post_process', return_value=[]):\n+            try:\n+                list(storage.post_process([], dry_run=False))\n+            except UnboundLocalError as e:\n+                if str(e) == \"local variable 'substitutions' referenced before assignment\":\n+                    raise AssertionError(\"__BUG__HERE__\") from e\n+            else:\n+                self.fail(\"Expected UnboundLocalError was not raised\")\n+\n+    def test_max_post_process_passes_zero(self):\n+        storage = CustomManifestStaticFilesStorage()\n+        self.assertEqual(storage.max_post_process_passes, 0)\n\\ No newline at end of file\n",
  "num_sent_chars": 1944938,
  "num_received_chars": 129038,
  "elapsed_time": 708.5595548152924,
  "lint_repair_count": 6,
  "test_generation_attempts": 6,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}