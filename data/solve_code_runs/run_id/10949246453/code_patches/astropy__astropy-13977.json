{
  "instance_id": "astropy__astropy-13977",
  "edit_test_file": "astropy/units/tests/test_quantity_ufuncs.py",
  "code_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex 8c3204b..0524932 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -2614,23 +2614,23 @@ def _condition_arg(value):\n \n     Returns\n     -------\n-    Scalar value or numpy array\n+    Scalar value, numpy array, or NotImplemented\n \n-    Raises\n-    ------\n-    ValueError\n-        If value is not as expected\n+    Notes\n+    -----\n+    Returns NotImplemented if the value is not scalar compatible or\n+    convertible to an int, float, or complex array.\n     \"\"\"\n     if isinstance(value, (np.ndarray, float, int, complex, np.void)):\n         return value\n \n-    avalue = np.array(value)\n-    if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n-        raise ValueError(\n-            \"Value not scalar compatible or convertible to \"\n-            \"an int, float, or complex array\"\n-        )\n-    return avalue\n+    try:\n+        avalue = np.array(value)\n+        if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n+            return NotImplemented\n+        return avalue\n+    except Exception:\n+        return NotImplemented\n \n \n def unit_scale_converter(val):\n",
  "test_patch": "diff --git a/astropy/units/tests/test_quantity_ufunc_compatibility.py b/astropy/units/tests/test_quantity_ufunc_compatibility.py\nnew file mode 100644\nindex 0000000..ffc60f2\n--- /dev/null\n+++ b/astropy/units/tests/test_quantity_ufunc_compatibility.py\n@@ -0,0 +1,43 @@\n+# astropy/units/tests/test_quantity_ufunc_compatibility.py\n+\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+from astropy.units import Quantity\n+\n+class DuckArray:\n+    def __init__(self, ndarray):\n+        self.ndarray = ndarray\n+\n+    @property\n+    def unit(self):\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+class TestQuantityUfuncCompatibility:\n+    def test_quantity_ufunc_with_duck_array(self):\n+        # This operation works as expected\n+        result1 = DuckArray(1 * u.mm) + (1 * u.m)\n+        assert isinstance(result1, DuckArray)\n+        assert result1.unit == u.mm\n+        assert result1.ndarray.value == 1001\n+\n+        # This operation also works as expected\n+        result2 = (1 * u.mm) + DuckArray(1 * u.mm)\n+        assert isinstance(result2, DuckArray)\n+        assert result2.unit == u.mm\n+        assert result2.ndarray.value == 2\n+\n+        # This operation should raise a ValueError\n+        with pytest.raises(ValueError, match=\"Value not scalar compatible or convertible to an int, float, or complex array\"):\n+            (1 * u.m) + DuckArray(1 * u.mm)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/units/tests/test_quantity_ufunc_compatibility_inverted.py b/astropy/units/tests/test_quantity_ufunc_compatibility_inverted.py\nnew file mode 100644\nindex 0000000..38b0ba6\n--- /dev/null\n+++ b/astropy/units/tests/test_quantity_ufunc_compatibility_inverted.py\n@@ -0,0 +1,59 @@\n+# astropy/units/tests/test_quantity_ufunc_compatibility.py\n+\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+from astropy.units import Quantity\n+\n+class DuckArray:\n+    def __init__(self, ndarray):\n+        self.ndarray = ndarray\n+\n+    @property\n+    def unit(self):\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+class TestQuantityUfuncCompatibility:\n+    def test_quantity_ufunc_with_duck_array(self):\n+        # This operation works as expected\n+        result1 = DuckArray(1 * u.mm) + (1 * u.m)\n+        assert isinstance(result1, DuckArray)\n+        assert result1.unit == u.mm\n+        assert result1.ndarray.value == 1001\n+\n+        # This operation also works as expected\n+        result2 = (1 * u.mm) + DuckArray(1 * u.mm)\n+        assert isinstance(result2, DuckArray)\n+        assert result2.unit == u.mm\n+        assert result2.ndarray.value == 2\n+\n+        # This operation should return NotImplemented instead of raising ValueError\n+        try:\n+            (1 * u.m) + DuckArray(1 * u.mm)\n+        except ValueError as e:\n+            if \"Value not scalar compatible or convertible to an int, float, or complex array\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+        else:\n+            # If no ValueError is raised, the test should pass\n+            pass\n+\n+    def test_quantity_ufunc_returns_notimplemented(self):\n+        # This test explicitly checks if NotImplemented is returned\n+        q = Quantity(1, u.m)\n+        da = DuckArray(Quantity(1, u.mm))\n+        \n+        result = q.__array_ufunc__(np.add, '__call__', q, da)\n+        \n+        if result is not NotImplemented:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1747934,
  "num_received_chars": 90713,
  "elapsed_time": 626.2269251346588,
  "lint_repair_count": 3,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}