{
  "instance_id": "sphinx-doc__sphinx-10323",
  "edit_test_file": "tests/test_directive_code.py",
  "code_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex dc44ed3..400e9a1 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -414,6 +414,13 @@ class LiteralInclude(SphinxDirective):\n             reader = LiteralIncludeReader(filename, self.options, self.config)\n             text, lines = reader.read(location=location)\n \n+            # Process the content with prepended and appended text\n+            from sphinx.util.nodes import process_literalinclude_content\n+            prepend = self.options.get('prepend')\n+            append = self.options.get('append')\n+            dedent = self.options.get('dedent')\n+            text = process_literalinclude_content(text, prepend, append, dedent)\n+\n             retnode: Element = nodes.literal_block(text, text, source=filename)\n             retnode['force'] = 'force' in self.options\n             self.set_source_info(retnode)\n\ndiff --git a/sphinx/util/nodes.py b/sphinx/util/nodes.py\nindex 4abc3af..60b0404 100644\n--- a/sphinx/util/nodes.py\n+++ b/sphinx/util/nodes.py\n@@ -18,6 +18,34 @@ from sphinx.util import logging\n if TYPE_CHECKING:\n     from sphinx.builders import Builder\n     from sphinx.domain import IndexEntry\n+\n+def detect_indentation(text: str) -> int:\n+    \"\"\"Detect the indentation level of the first non-empty line in the given text.\"\"\"\n+    for line in text.splitlines():\n+        if line.strip():\n+            return len(line) - len(line.lstrip())\n+    return 0\n+\n+def apply_indentation(text: str, indent: int) -> str:\n+    \"\"\"Apply the given indentation to each line of the text.\"\"\"\n+    return '\\n'.join((' ' * indent + line if line.strip() else line)\n+                     for line in text.splitlines())\n+\n+def process_literalinclude_content(content: str, prepend: Optional[str], append: Optional[str], dedent: Optional[int]) -> str:\n+    \"\"\"Process literalinclude content with prepended and appended text, preserving indentation.\"\"\"\n+    content_indent = detect_indentation(content)\n+    \n+    if dedent:\n+        content = '\\n'.join(line[min(dedent, len(line) - len(line.lstrip())):]\n+                            for line in content.splitlines())\n+    \n+    if prepend:\n+        content = apply_indentation(prepend, content_indent) + '\\n' + content\n+    \n+    if append:\n+        content = content + '\\n' + apply_indentation(append, content_indent)\n+    \n+    return content\n     from sphinx.environment import BuildEnvironment\n     from sphinx.util.tags import Tags\n \n",
  "test_patch": "diff --git a/tests/test_literalinclude_indentation.py b/tests/test_literalinclude_indentation.py\nnew file mode 100644\nindex 0000000..a191d62\n--- /dev/null\n+++ b/tests/test_literalinclude_indentation.py\n@@ -0,0 +1,56 @@\n+import os\n+import pytest\n+from sphinx.testing.util import etree_parse\n+from sphinx.testing.path import path\n+\n+@pytest.mark.sphinx('xml', testroot='directive-code')\n+def test_literalinclude_prepend_indentation(app, status, warning):\n+    # Prepare test files\n+    test_dir = (app.srcdir / 'test_literalinclude_prepend')\n+    test_dir.makedirs(exist_ok=True)\n+    \n+    (test_dir / 'index.rst').write_text('''\n+.. literalinclude:: pom.xml\n+   :language: xml\n+   :prepend:       <plugin>\n+   :start-at: <groupId>com.github.ekryd.sortpom</groupId>\n+   :end-at: </plugin>\n+''')\n+\n+    (test_dir / 'pom.xml').write_text('''\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>com.github.ekryd.sortpom</groupId>\n+        <artifactId>sortpom-maven-plugin</artifactId>\n+        <version>2.15.0</version>\n+        <configuration>\n+          <verifyFailOn>strict</verifyFailOn>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n+''')\n+\n+    app.builder.build(['test_literalinclude_prepend/index'])\n+    \n+    # Parse the generated XML\n+    xml_path = app.outdir / 'test_literalinclude_prepend' / 'index.xml'\n+    etree = etree_parse(xml_path)\n+    literal_block = etree.find('.//literal_block')\n+    \n+    # Check if the indentation is incorrect as described in the issue\n+    expected_incorrect_output = '''<plugin>\n+        <groupId>com.github.ekryd.sortpom</groupId>\n+        <artifactId>sortpom-maven-plugin</artifactId>\n+        <version>2.15.0</version>\n+        <configuration>\n+          <verifyFailOn>strict</verifyFailOn>\n+        </configuration>\n+      </plugin>'''\n+    \n+    assert literal_block.text.strip() == expected_incorrect_output.strip(), \\\n+        \"The literalinclude output should have incorrect indentation as described in the issue\"\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 2209416,
  "num_received_chars": 159147,
  "elapsed_time": 850.1441111564636,
  "lint_repair_count": 8,
  "test_generation_attempts": 9,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}