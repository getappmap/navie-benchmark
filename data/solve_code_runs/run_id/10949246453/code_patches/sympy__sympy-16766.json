{
  "instance_id": "sympy__sympy-16766",
  "edit_test_file": "sympy/printing/tests/test_pycode.py",
  "code_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310..dffa6e5 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,17 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base = self._print(expr.base.label)\n+        indices = [self._print(idx) for idx in expr.indices]\n+        return f\"{base}[{', '.join(indices)}]\"\n+\n+    def _print_IndexedBase(self, expr):\n+        return self._print(expr.label)\n+\n+    def _print_Idx(self, expr):\n+        return self._print(expr.label)\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_indexed_pycode.py b/sympy/printing/tests/test_indexed_pycode.py\nnew file mode 100644\nindex 0000000..fd00a73\n--- /dev/null\n+++ b/sympy/printing/tests/test_indexed_pycode.py\n@@ -0,0 +1,28 @@\n+from sympy import IndexedBase, symbols\n+from sympy.printing.pycode import PythonCodePrinter, pycode\n+\n+def test_print_Indexed():\n+    p = IndexedBase('p')\n+    i, j = symbols('i j')\n+    \n+    printer = PythonCodePrinter()\n+    \n+    # Test single index\n+    expr = p[i]\n+    result = printer.doprint(expr)\n+    assert '# Not supported in Python:' in result\n+    assert '# Indexed' in result\n+    assert 'p[i]' in result\n+    \n+    # Test multiple indices\n+    expr = p[i, j]\n+    result = printer.doprint(expr)\n+    assert '# Not supported in Python:' in result\n+    assert '# Indexed' in result\n+    assert 'p[i, j]' in result\n+    \n+    # Test using pycode function\n+    result = pycode(p[0])\n+    assert '# Not supported in Python:' in result\n+    assert '# Indexed' in result\n+    assert 'p[0]' in result\n",
  "test_inverted_patch": "diff --git a/sympy/printing/tests/test_indexed_pycode_inverted.py b/sympy/printing/tests/test_indexed_pycode_inverted.py\nnew file mode 100644\nindex 0000000..afd99e0\n--- /dev/null\n+++ b/sympy/printing/tests/test_indexed_pycode_inverted.py\n@@ -0,0 +1,37 @@\n+from sympy import IndexedBase, symbols\n+from sympy.printing.pycode import PythonCodePrinter, pycode\n+\n+def test_print_Indexed():\n+    p = IndexedBase('p')\n+    i, j = symbols('i j')\n+    \n+    printer = PythonCodePrinter()\n+    \n+    # Test single index\n+    expr = p[i]\n+    result = printer.doprint(expr)\n+    if '# Not supported in Python:' in result and '# Indexed' in result and 'p[i]' in result:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Test multiple indices\n+    expr = p[i, j]\n+    result = printer.doprint(expr)\n+    if '# Not supported in Python:' in result and '# Indexed' in result and 'p[i, j]' in result:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Test using pycode function\n+    result = pycode(p[0])\n+    if '# Not supported in Python:' in result and '# Indexed' in result and 'p[0]' in result:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Test the expected correct output\n+    expr = p[i]\n+    result = printer.doprint(expr)\n+    assert result == \"p[i]\", f\"Expected 'p[i]', but got '{result}'\"\n+    \n+    expr = p[i, j]\n+    result = printer.doprint(expr)\n+    assert result == \"p[i, j]\", f\"Expected 'p[i, j]', but got '{result}'\"\n+    \n+    result = pycode(p[0])\n+    assert result == \"p[0]\", f\"Expected 'p[0]', but got '{result}'\"\n",
  "num_sent_chars": 402940,
  "num_received_chars": 19553,
  "elapsed_time": 154.76807522773743,
  "lint_repair_count": 1,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}