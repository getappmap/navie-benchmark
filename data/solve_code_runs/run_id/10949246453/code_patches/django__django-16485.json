{
  "instance_id": "django__django-16485",
  "edit_test_file": "tests/model_fields/test_decimalfield.py",
  "code_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08..22d3048 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -163,6 +163,13 @@ def floatformat(text, arg=-1):\n     except ValueError:\n         return input_val\n \n+    # Check if the input is zero\n+    if d.is_zero():\n+        if p == 0:\n+            return mark_safe(formats.number_format(\"0\", 0, use_l10n=use_l10n, force_grouping=force_grouping))\n+        elif p < 0:\n+            return mark_safe(formats.number_format(\"0\", 0, use_l10n=use_l10n, force_grouping=force_grouping))\n+\n     try:\n         m = int(d) - d\n     except (ValueError, OverflowError, InvalidOperation):\n@@ -183,7 +190,7 @@ def floatformat(text, arg=-1):\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    prec = max(1, abs(p) + units + 1)  # Ensure prec is at least 1\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n",
  "test_patch": "diff --git a/tests/model_fields/test_floatformat_edge_cases.py b/tests/model_fields/test_floatformat_edge_cases.py\nnew file mode 100644\nindex 0000000..2983e51\n--- /dev/null\n+++ b/tests/model_fields/test_floatformat_edge_cases.py\n@@ -0,0 +1,15 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+\n+class FloatformatEdgeCaseTests(SimpleTestCase):\n+    def test_floatformat_zero_decimal(self):\n+        \"\"\"\n+        Test that floatformat() raises ValueError for '0.00' with precision 0.\n+        \"\"\"\n+        with self.assertRaisesMessage(ValueError, \"valid range for prec is [1, MAX_PREC]\"):\n+            floatformat('0.00', 0)\n+\n+        with self.assertRaisesMessage(ValueError, \"valid range for prec is [1, MAX_PREC]\"):\n+            floatformat(Decimal('0.00'), 0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_floatformat_edge_cases_inverted.py b/tests/model_fields/test_floatformat_edge_cases_inverted.py\nnew file mode 100644\nindex 0000000..9263144\n--- /dev/null\n+++ b/tests/model_fields/test_floatformat_edge_cases_inverted.py\n@@ -0,0 +1,28 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+\n+class FloatformatEdgeCaseTests(SimpleTestCase):\n+    def test_floatformat_zero_decimal(self):\n+        \"\"\"\n+        Test that floatformat() doesn't raise ValueError for '0.00' with precision 0.\n+        \"\"\"\n+        try:\n+            result = floatformat('0.00', 0)\n+        except ValueError as e:\n+            if str(e) == \"valid range for prec is [1, MAX_PREC]\":\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different ValueError\n+\n+        try:\n+            result = floatformat(Decimal('0.00'), 0)\n+        except ValueError as e:\n+            if str(e) == \"valid range for prec is [1, MAX_PREC]\":\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different ValueError\n+\n+        # If we reach here, it means no ValueError was raised, which is the expected behavior\n+        # We'll add some assertions to check the result\n+        self.assertIsInstance(result, str)\n+        self.assertNotEqual(result, '')  # Ensure some result was returned\n\\ No newline at end of file\n",
  "num_sent_chars": 763245,
  "num_received_chars": 40303,
  "elapsed_time": 293.8623058795929,
  "lint_repair_count": 0,
  "test_generation_attempts": 7,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}