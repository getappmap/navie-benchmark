{
  "instance_id": "django__django-14349",
  "edit_test_file": "tests/validation/test_validators.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex daa65d6..d3b337f 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -661,13 +661,26 @@ class URLField(CharField):\n     widget = URLInput\n     default_error_messages = {\n         'invalid': _('Enter a valid URL.'),\n+        'invalid_characters': _('URL cannot contain newline or tab characters.'),\n     }\n     default_validators = [validators.URLValidator()]\n \n     def __init__(self, **kwargs):\n         super().__init__(strip=True, **kwargs)\n \n+    def _check_url_for_invalid_characters(self, value):\n+        \"\"\"\n+        Check if the URL contains newline or tab characters.\n+        \"\"\"\n+        if '\\n' in value or '\\r' in value or '\\t' in value:\n+            raise ValidationError(\n+                self.error_messages['invalid_characters'],\n+                code='invalid_characters'\n+            )\n+\n     def to_python(self, value):\n+        value = super().to_python(value)\n+        self._check_url_for_invalid_characters(value)\n \n         def split_url(url):\n             \"\"\"\n",
  "test_patch": "diff --git a/tests/validation/test_url_validator_newline_handling.py b/tests/validation/test_url_validator_newline_handling.py\nnew file mode 100644\nindex 0000000..ef8974c\n--- /dev/null\n+++ b/tests/validation/test_url_validator_newline_handling.py\n@@ -0,0 +1,29 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import URLValidator\n+from django.test import SimpleTestCase\n+\n+\n+class TestURLValidatorNewlineHandling(SimpleTestCase):\n+    def test_url_validator_newline_handling(self):\n+        validator = URLValidator()\n+        \n+        # URLs with newline characters that should raise ValidationError\n+        urls_with_newlines = [\n+            'http://www.djangoproject.com/\\n',\n+            'http://[::ffff:192.9.5.5]\\n',\n+        ]\n+\n+        for url in urls_with_newlines:\n+            with self.subTest(url=url):\n+                # The test passes if ValidationError is not raised,\n+                # which reproduces the issue described\n+                validator(url)\n+\n+        # To ensure the validator still works for valid URLs\n+        valid_url = 'https://www.example.com'\n+        validator(valid_url)\n+\n+        # To ensure the validator still rejects clearly invalid URLs\n+        invalid_url = 'not a url'\n+        with self.assertRaises(ValidationError):\n+            validator(invalid_url)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/validation/test_url_validator_newline_handling_inverted.py b/tests/validation/test_url_validator_newline_handling_inverted.py\nnew file mode 100644\nindex 0000000..d3d054f\n--- /dev/null\n+++ b/tests/validation/test_url_validator_newline_handling_inverted.py\n@@ -0,0 +1,32 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import URLValidator\n+from django.test import SimpleTestCase\n+\n+\n+class TestURLValidatorNewlineHandling(SimpleTestCase):\n+    def test_url_validator_newline_handling(self):\n+        validator = URLValidator()\n+        \n+        # URLs with newline characters that should raise ValidationError\n+        urls_with_newlines = [\n+            'http://www.djangoproject.com/\\n',\n+            'http://[::ffff:192.9.5.5]\\n',\n+        ]\n+\n+        for url in urls_with_newlines:\n+            with self.subTest(url=url):\n+                try:\n+                    validator(url)\n+                    raise AssertionError(\"__BUG__HERE__\")\n+                except ValidationError:\n+                    # This is the expected behavior\n+                    pass\n+\n+        # To ensure the validator still works for valid URLs\n+        valid_url = 'https://www.example.com'\n+        validator(valid_url)\n+\n+        # To ensure the validator still rejects clearly invalid URLs\n+        invalid_url = 'not a url'\n+        with self.assertRaises(ValidationError):\n+            validator(invalid_url)\n\\ No newline at end of file\n",
  "num_sent_chars": 1163027,
  "num_received_chars": 51466,
  "elapsed_time": 367.0181419849396,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}