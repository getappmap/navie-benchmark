{
  "instance_id": "sphinx-doc__sphinx-10466",
  "edit_test_file": "tests/test_util_docutils.py",
  "code_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex e8bc547..3c2f2e9 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -32,9 +32,15 @@ class Message:\n     \"\"\"An entry of translatable message.\"\"\"\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        self.locations = self._unique_locations(locations)\n         self.uuids = uuids\n \n+    @staticmethod\n+    def _unique_locations(locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n+        \"\"\"Convert locations to a unique list.\"\"\"\n+        unique_locations = list(dict.fromkeys(locations))\n+        return sorted(unique_locations, key=lambda x: (x[0], x[1]))\n+\n \n class Catalog:\n     \"\"\"Catalog of translatable messages.\"\"\"\n",
  "test_patch": "diff --git a/tests/test_message_location_deduplication.py b/tests/test_message_location_deduplication.py\nnew file mode 100644\nindex 0000000..cb30063\n--- /dev/null\n+++ b/tests/test_message_location_deduplication.py\n@@ -0,0 +1,56 @@\n+import unittest\n+from sphinx.builders.gettext import Message\n+\n+class TestMessageLocationDeduplication(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        # Create a Message object with duplicate locations\n+        text = \"Type\"\n+        locations = [\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/metas/properties.rst\", 92),\n+            (\"../../manual/render/shader_nodes/vector/vector_rotate.rst\", 38),\n+        ]\n+        uuids = [\"uuid1\", \"uuid2\", \"uuid3\", \"uuid4\", \"uuid5\"]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Assert that the locations list contains duplicates\n+        self.assertEqual(len(message.locations), 5)\n+        self.assertEqual(message.locations.count((\"../../manual/modeling/hair.rst\", 0)), 3)\n+\n+        # Assert that the locations list is in the original order (not deduplicated)\n+        self.assertEqual(message.locations, locations)\n+\n+    def test_multiple_duplicate_locations(self):\n+        # Create a Message object with multiple sets of duplicate locations\n+        text = \"Another message\"\n+        locations = [\n+            (\"../../manual/movie_clip/tracking/clip/toolbar/solve.rst\", 96),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/fluid/type/domain/cache.rst\", 0),\n+        ]\n+        uuids = [f\"uuid{i}\" for i in range(1, len(locations) + 1)]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Assert that the locations list contains duplicates\n+        self.assertEqual(len(message.locations), 12)\n+        self.assertEqual(message.locations.count((\"../../manual/physics/dynamic_paint/brush.rst\", 0)), 4)\n+        self.assertEqual(message.locations.count((\"../../manual/physics/dynamic_paint/canvas.rst\", 0)), 6)\n+\n+        # Assert that the locations list is in the original order (not deduplicated)\n+        self.assertEqual(message.locations, locations)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_message_location_deduplication_inverted.py b/tests/test_message_location_deduplication_inverted.py\nnew file mode 100644\nindex 0000000..9a3ca7f\n--- /dev/null\n+++ b/tests/test_message_location_deduplication_inverted.py\n@@ -0,0 +1,58 @@\n+import unittest\n+from sphinx.builders.gettext import Message\n+\n+class TestMessageLocationDeduplication(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        # Create a Message object with duplicate locations\n+        text = \"Type\"\n+        locations = [\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/metas/properties.rst\", 92),\n+            (\"../../manual/render/shader_nodes/vector/vector_rotate.rst\", 38),\n+        ]\n+        uuids = [\"uuid1\", \"uuid2\", \"uuid3\", \"uuid4\", \"uuid5\"]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Check if the locations list contains duplicates\n+        if len(message.locations) == 5 and message.locations.count((\"../../manual/modeling/hair.rst\", 0)) == 3:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that the locations list is deduplicated\n+        self.assertEqual(len(message.locations), 3)\n+        self.assertEqual(message.locations.count((\"../../manual/modeling/hair.rst\", 0)), 1)\n+\n+    def test_multiple_duplicate_locations(self):\n+        # Create a Message object with multiple sets of duplicate locations\n+        text = \"Another message\"\n+        locations = [\n+            (\"../../manual/movie_clip/tracking/clip/toolbar/solve.rst\", 96),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/canvas.rst\", 0),\n+            (\"../../manual/physics/fluid/type/domain/cache.rst\", 0),\n+        ]\n+        uuids = [f\"uuid{i}\" for i in range(1, len(locations) + 1)]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Check if the locations list contains duplicates\n+        if len(message.locations) == 12 and message.locations.count((\"../../manual/physics/dynamic_paint/brush.rst\", 0)) == 4 and message.locations.count((\"../../manual/physics/dynamic_paint/canvas.rst\", 0)) == 6:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that the locations list is deduplicated\n+        self.assertEqual(len(message.locations), 4)\n+        self.assertEqual(message.locations.count((\"../../manual/physics/dynamic_paint/brush.rst\", 0)), 1)\n+        self.assertEqual(message.locations.count((\"../../manual/physics/dynamic_paint/canvas.rst\", 0)), 1)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 838164,
  "num_received_chars": 36963,
  "elapsed_time": 245.23558616638184,
  "lint_repair_count": 1,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}