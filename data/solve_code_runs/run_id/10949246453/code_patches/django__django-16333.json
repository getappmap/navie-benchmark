{
  "instance_id": "django__django-16333",
  "edit_test_file": "tests/model_forms/tests.py",
  "code_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8..c21e2da 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,17 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()\n+        else:\n+            # Append save_m2m() to the user's save() method.\n+            old_save_m2m = self.save_m2m\n+\n+            def save_m2m():\n+                old_save_m2m()\n+                user.save()\n+\n+            self.save_m2m = save_m2m\n+            user.save_m2m = self.save_m2m\n         return user\n \n \n",
  "test_patch": "diff --git a/tests/model_forms/test_user_creation_form_m2m_save.py b/tests/model_forms/test_user_creation_form_m2m_save.py\nnew file mode 100644\nindex 0000000..1709306\n--- /dev/null\n+++ b/tests/model_forms/test_user_creation_form_m2m_save.py\n@@ -0,0 +1,33 @@\n+# tests/model_forms/test_user_creation_form_m2m_save.py\n+\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import Group\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+\n+User = get_user_model()\n+\n+class CustomUserCreationForm(UserCreationForm):\n+    class Meta(UserCreationForm.Meta):\n+        model = User\n+        fields = UserCreationForm.Meta.fields + ('groups',)\n+\n+class UserCreationFormM2MSaveTest(TestCase):\n+    def setUp(self):\n+        self.group = Group.objects.create(name='Test Group')\n+\n+    def test_user_creation_form_m2m_save(self):\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpassword123',\n+            'password2': 'testpassword123',\n+            'groups': [self.group.pk],\n+        }\n+        form = CustomUserCreationForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+\n+        user = form.save()\n+        self.assertFalse(user.groups.exists())\n+\n+        # The test passes if the group is not saved, which demonstrates the issue\n+        self.assertEqual(user.groups.count(), 0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_user_creation_form_m2m_save_inverted.py b/tests/model_forms/test_user_creation_form_m2m_save_inverted.py\nnew file mode 100644\nindex 0000000..e021a01\n--- /dev/null\n+++ b/tests/model_forms/test_user_creation_form_m2m_save_inverted.py\n@@ -0,0 +1,37 @@\n+# tests/model_forms/test_user_creation_form_m2m_save.py\n+\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import Group\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+\n+User = get_user_model()\n+\n+class CustomUserCreationForm(UserCreationForm):\n+    class Meta(UserCreationForm.Meta):\n+        model = User\n+        fields = UserCreationForm.Meta.fields + ('groups',)\n+\n+class UserCreationFormM2MSaveTest(TestCase):\n+    def setUp(self):\n+        self.group = Group.objects.create(name='Test Group')\n+\n+    def test_user_creation_form_m2m_save(self):\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpassword123',\n+            'password2': 'testpassword123',\n+            'groups': [self.group.pk],\n+        }\n+        form = CustomUserCreationForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+\n+        user = form.save()\n+        \n+        # The test should now fail if the group is not saved\n+        if not user.groups.exists():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Additional assertions to ensure the group was saved correctly\n+        self.assertEqual(user.groups.count(), 1)\n+        self.assertEqual(user.groups.first(), self.group)\n\\ No newline at end of file\n",
  "num_sent_chars": 971505,
  "num_received_chars": 26324,
  "elapsed_time": 192.83509707450867,
  "lint_repair_count": 1,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}