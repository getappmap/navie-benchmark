{
  "instance_id": "scikit-learn__scikit-learn-25747",
  "edit_test_file": "sklearn/tests/test_pipeline.py",
  "code_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c..a12bdee 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -34,7 +34,13 @@ def _wrap_in_pandas_container(\n         `range(n_features)`.\n \n     index : array-like, default=None\n-        Index for data.\n+        Index for data. If provided and the length doesn't match the data,\n+        a new default index will be created.\n+\n+    Returns\n+    -------\n+    dataframe : DataFrame\n+        Container with column names or unchanged `output`.\n \n     Returns\n     -------\n@@ -52,14 +58,28 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n-    if isinstance(data_to_wrap, pd.DataFrame):\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n-            data_to_wrap.index = index\n+            try:\n+                data_to_wrap.index = index\n+            except ValueError as e:\n+                if \"Length mismatch\" in str(e):\n+                    # Create a new default index if lengths don't match\n+                    data_to_wrap.index = pd.RangeIndex(len(data_to_wrap))\n+                else:\n+                    raise ValueError(f\"Failed to set index: {e}\")\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    try:\n+        return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    except ValueError as e:\n+        if \"Length of values\" in str(e) and index is not None:\n+            # Create a new default index if lengths don't match\n+            return pd.DataFrame(data_to_wrap, columns=columns)\n+        else:\n+            raise ValueError(f\"Failed to create DataFrame: {e}\")\n \n \n def _get_output_config(method, estimator=None):\n",
  "test_patch": "diff --git a/sklearn/tests/test_feature_union_pandas_transform.py b/sklearn/tests/test_feature_union_pandas_transform.py\nnew file mode 100644\nindex 0000000..9d6eb95\n--- /dev/null\n+++ b/sklearn/tests/test_feature_union_pandas_transform.py\n@@ -0,0 +1,33 @@\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import make_union\n+from sklearn.utils._set_output import _SetOutputMixin\n+from sklearn import set_config\n+\n+\n+class MyTransformer(BaseEstimator, TransformerMixin, _SetOutputMixin):\n+    def fit(self, X, y=None, **kwargs):\n+        return self\n+\n+    def transform(self, X):\n+        return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+\n+@pytest.mark.parametrize(\"transform_output\", [\"default\", \"pandas\"])\n+def test_feature_union_pandas_transform(transform_output):\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    set_config(transform_output=transform_output)\n+    \n+    if transform_output == \"default\":\n+        # This should work without errors\n+        result = make_union(MyTransformer()).fit_transform(data)\n+        assert isinstance(result, np.ndarray)\n+    else:\n+        # This should raise a ValueError\n+        with pytest.raises(ValueError, match=\"Length mismatch: Expected axis has 4 elements, new values have 96 elements\"):\n+            make_union(MyTransformer()).fit_transform(data)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_feature_union_pandas_transform_inverted.py b/sklearn/tests/test_feature_union_pandas_transform_inverted.py\nnew file mode 100644\nindex 0000000..91598ef\n--- /dev/null\n+++ b/sklearn/tests/test_feature_union_pandas_transform_inverted.py\n@@ -0,0 +1,41 @@\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import make_union\n+from sklearn.utils._set_output import _SetOutputMixin\n+from sklearn import set_config\n+\n+\n+class MyTransformer(BaseEstimator, TransformerMixin, _SetOutputMixin):\n+    def fit(self, X, y=None, **kwargs):\n+        return self\n+\n+    def transform(self, X):\n+        return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+\n+@pytest.mark.parametrize(\"transform_output\", [\"default\", \"pandas\"])\n+def test_feature_union_pandas_transform(transform_output):\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    set_config(transform_output=transform_output)\n+    \n+    if transform_output == \"default\":\n+        # This should work without errors\n+        result = make_union(MyTransformer()).fit_transform(data)\n+        assert isinstance(result, np.ndarray)\n+    else:\n+        # This should now fail with a specific error message\n+        try:\n+            result = make_union(MyTransformer()).fit_transform(data)\n+        except ValueError as e:\n+            if \"Length mismatch: Expected axis has 4 elements, new values have 96 elements\" in str(e):\n+                raise ValueError(\"__BUG__HERE__\") from e\n+            else:\n+                raise  # Re-raise if it's a different ValueError\n+        else:\n+            # If no exception was raised, the test should fail\n+            pytest.fail(\"Expected ValueError was not raised\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1335410,
  "num_received_chars": 69727,
  "elapsed_time": 448.0745053291321,
  "lint_repair_count": 0,
  "test_generation_attempts": 8,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}