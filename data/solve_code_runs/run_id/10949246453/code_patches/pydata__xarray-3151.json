{
  "instance_id": "pydata__xarray-3151",
  "edit_test_file": "xarray/tests/test_combine.py",
  "code_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903..b1fdea0 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -51,6 +51,7 @@ def _infer_tile_ids_from_nested_list(entry, current_pos):\n def _infer_concat_order_from_coords(datasets):\n \n     concat_dims = []\n+    identical_dims = []\n     tile_ids = [() for ds in datasets]\n \n     # All datasets have same variables because they've been grouped as such\n@@ -68,8 +69,9 @@ def _infer_concat_order_from_coords(datasets):\n \n             # If dimension coordinate values are same on every dataset then\n             # should be leaving this dimension alone (it's just a \"bystander\")\n-            if not all(index.equals(indexes[0]) for index in indexes[1:]):\n-\n+            if all(index.equals(indexes[0]) for index in indexes[1:]):\n+                identical_dims.append(dim)\n+            else:\n                 # Infer order datasets should be arranged in along this dim\n                 concat_dims.append(dim)\n \n@@ -134,7 +136,7 @@ def _check_shape_tile_ids(combined_tile_ids):\n                              \"lengths along dimension\" + str(dim))\n \n \n-def _combine_nd(combined_ids, concat_dims, data_vars='all',\n+def _combine_nd(combined_ids, concat_dims, identical_dims, data_vars='all',\n                 coords='different', compat='no_conflicts',\n                 fill_value=dtypes.NA):\n     \"\"\"\n@@ -152,6 +154,8 @@ def _combine_nd(combined_ids, concat_dims, data_vars='all',\n     concat_dims : sequence of str\n         The dimensions along which the datasets should be concatenated. Must be\n         in order, and the length must match the length of the tuples used as\n+    identical_dims : sequence of str\n+        The dimensions that are identical across all datasets.\n         keys in combined_ids. If the string is a dimension name then concat\n         along that dimension, if it is None then merge.\n \n",
  "test_patch": "diff --git a/xarray/tests/test_combine_non_monotonic_coords.py b/xarray/tests/test_combine_non_monotonic_coords.py\nnew file mode 100644\nindex 0000000..332f495\n--- /dev/null\n+++ b/xarray/tests/test_combine_non_monotonic_coords.py\n@@ -0,0 +1,31 @@\n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+def test_combine_by_coords_non_monotonic():\n+    # Create two datasets with non-monotonic y coordinates\n+    yCoord = ['a', 'c', 'b']\n+    \n+    ds1 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(3, 3))\n+        ),\n+        coords=dict(\n+            x=[1, 2, 3],\n+            y=yCoord\n+        )\n+    )\n+\n+    ds2 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(4, 3))\n+        ),\n+        coords = dict(\n+            x=[4, 5, 6, 7],\n+            y=yCoord\n+        )\n+    )\n+\n+    # Test that combine_by_coords raises a ValueError\n+    with pytest.raises(ValueError, match=\"Resulting object does not have monotonic global indexes along dimension y\"):\n+        xr.combine_by_coords([ds1, ds2])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_combine_non_monotonic_coords_inverted.py b/xarray/tests/test_combine_non_monotonic_coords_inverted.py\nnew file mode 100644\nindex 0000000..d13f336\n--- /dev/null\n+++ b/xarray/tests/test_combine_non_monotonic_coords_inverted.py\n@@ -0,0 +1,42 @@\n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+def test_combine_by_coords_non_monotonic():\n+    # Create two datasets with non-monotonic y coordinates\n+    yCoord = ['a', 'c', 'b']\n+    \n+    ds1 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(3, 3))\n+        ),\n+        coords=dict(\n+            x=[1, 2, 3],\n+            y=yCoord\n+        )\n+    )\n+\n+    ds2 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(4, 3))\n+        ),\n+        coords = dict(\n+            x=[4, 5, 6, 7],\n+            y=yCoord\n+        )\n+    )\n+\n+    # Test that combine_by_coords does not raise a ValueError\n+    try:\n+        result = xr.combine_by_coords([ds1, ds2])\n+    except ValueError as e:\n+        if \"Resulting object does not have monotonic global indexes along dimension y\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        else:\n+            raise  # Re-raise if it's a different ValueError\n+\n+    # Additional assertions to ensure the combine operation worked correctly\n+    assert isinstance(result, xr.Dataset), \"Result should be an xarray Dataset\"\n+    assert result.dims['x'] == 7, \"Combined x dimension should have length 7\"\n+    assert list(result.y.values) == yCoord, \"Y coordinate values should be preserved\"\n+    assert np.all(result.x.values == [1, 2, 3, 4, 5, 6, 7]), \"X coordinate values should be combined correctly\"\n\\ No newline at end of file\n",
  "num_sent_chars": 581245,
  "num_received_chars": 36564,
  "elapsed_time": 264.34523129463196,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}