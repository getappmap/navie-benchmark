{
  "instance_id": "pydata__xarray-6599",
  "edit_test_file": "xarray/tests/test_computation.py",
  "code_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe0..fdf2969 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1918,29 +1918,34 @@ def polyval(\n \n \n def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n-    \"\"\"Converts all datetime64 variables to float64\n+    \"\"\"Converts all datetime64 and timedelta64 variables to float64\n \n     Parameters\n     ----------\n     data : DataArray or Dataset\n-        Variables with possible datetime dtypes.\n+        Variables with possible datetime or timedelta dtypes.\n \n     Returns\n     -------\n     DataArray or Dataset\n-        Variables with datetime64 dtypes converted to float64.\n+        Variables with datetime64 and timedelta64 dtypes converted to float64.\n     \"\"\"\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n         if x.dtype.kind in \"mM\":\n-            return x.copy(\n-                data=datetime_to_numeric(\n-                    x.data,\n-                    offset=np.datetime64(\"1970-01-01\"),\n-                    datetime_unit=\"ns\",\n-                ),\n-            )\n+            if x.dtype.kind == \"M\":\n+                return x.copy(\n+                    data=datetime_to_numeric(\n+                        x.data,\n+                        offset=np.datetime64(\"1970-01-01\"),\n+                        datetime_unit=\"ns\",\n+                    ),\n+                )\n+            elif x.dtype.kind == \"m\":\n+                return x.copy(\n+                    data=x.data.astype(np.float64) / np.timedelta64(1, 'ns').astype(np.float64)\n+                )\n         return x\n \n     if isinstance(data, Dataset):\n",
  "test_patch": "diff --git a/xarray/tests/test_polyval_timedelta64.py b/xarray/tests/test_polyval_timedelta64.py\nnew file mode 100644\nindex 0000000..2d8dbcd\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta64.py\n@@ -0,0 +1,51 @@\n+# xarray/tests/test_polyval_timedelta64.py\n+\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_polyval_timedelta64():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    result = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Assert that the result has the incorrect shape (axis, azimuth_time) instead of (azimuth_time, axis)\n+    assert result.shape == (3, 6)\n+\n+    # Assert that the values are incorrect (using the first few values from the issue description)\n+    np.testing.assert_allclose(\n+        result.values[:, 0],\n+        [1.59620685e+30, 1.11164807e+30, 1.90975722e+30],\n+        rtol=1e-6\n+    )\n+\n+    # Assert that the coordinates are incorrect (timedelta instead of datetime)\n+    assert result.coords[\"azimuth_time\"].dtype == np.dtype('timedelta64[ns]')\n+\n+if __name__ == \"__main__\":\n+    pytest.main([__file__])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_polyval_timedelta64_inverted.py b/xarray/tests/test_polyval_timedelta64_inverted.py\nnew file mode 100644\nindex 0000000..3a0e438\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta64_inverted.py\n@@ -0,0 +1,56 @@\n+# xarray/tests/test_polyval_timedelta64.py\n+\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_polyval_timedelta64():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    result = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Check if the result has the correct shape (azimuth_time, axis)\n+    if result.shape != (6, 3):\n+        raise AssertionError(\"__BUG__HERE__: Incorrect result shape\")\n+\n+    # Check if the values are correct (using the first few values from the expected output)\n+    expected_values = np.array([\n+        [4447392.16, 1450539.74, 5299608.57],\n+        [4505537.25588366, 1448882.82238152, 5250846.359196],\n+        [4563174.92026797, 1446979.12250014, 5201491.44401733]\n+    ])\n+    \n+    if not np.allclose(result.values[:3], expected_values, rtol=1e-6):\n+        raise AssertionError(\"__BUG__HERE__: Incorrect result values\")\n+\n+    # Check if the coordinates are correct (datetime instead of timedelta)\n+    if result.coords[\"azimuth_time\"].dtype != np.dtype('datetime64[ns]'):\n+        raise AssertionError(\"__BUG__HERE__: Incorrect coordinate dtype\")\n+\n+if __name__ == \"__main__\":\n+    pytest.main([__file__])\n\\ No newline at end of file\n",
  "num_sent_chars": 3336046,
  "num_received_chars": 84307,
  "elapsed_time": 649.3561644554138,
  "lint_repair_count": 12,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}