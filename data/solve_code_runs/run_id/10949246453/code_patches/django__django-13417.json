{
  "instance_id": "django__django-13417",
  "edit_test_file": "tests/model_fields/test_foreignkey.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd831..452c653 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1218,14 +1218,26 @@ class QuerySet:\n     def ordered(self):\n         \"\"\"\n         Return True if the QuerySet is ordered -- i.e. has an order_by()\n-        clause or a default ordering on the model (or is empty).\n+        clause or a default ordering on the model that will be applied\n+        (considering the effects of annotations and GROUP BY).\n         \"\"\"\n         if isinstance(self, EmptyQuerySet):\n             return True\n-        if self.query.extra_order_by or self.query.order_by:\n-            return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        \n+        has_explicit_ordering = bool(self.query.extra_order_by or self.query.order_by)\n+        has_default_ordering = self.query.default_ordering and self.query.get_meta().ordering\n+        \n+        # Check if there are annotations that would introduce GROUP BY\n+        has_group_by = bool(self.query.annotation_select)\n+        \n+        if has_explicit_ordering:\n             return True\n+        elif has_group_by:\n+            # If we have GROUP BY, check if there's ordering that would be applied after grouping\n+            return bool(self.query.order_by)\n+        elif has_default_ordering:\n+            # Default ordering is only effective if there's no GROUP BY\n+            return not has_group_by\n         else:\n             return False\n \n",
  "test_patch": "diff --git a/tests/model_fields/test_queryset_ordered_property_with_groupby.py b/tests/model_fields/test_queryset_ordered_property_with_groupby.py\nnew file mode 100644\nindex 0000000..729dd73\n--- /dev/null\n+++ b/tests/model_fields/test_queryset_ordered_property_with_groupby.py\n@@ -0,0 +1,41 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Count\n+\n+class OrderedModel(models.Model):\n+    name = models.CharField(max_length=50)\n+    \n+    class Meta:\n+        ordering = ['name']\n+\n+class QuerySetOrderedPropertyWithGroupByTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        OrderedModel.objects.bulk_create([\n+            OrderedModel(name='A'),\n+            OrderedModel(name='B'),\n+            OrderedModel(name='C'),\n+        ])\n+\n+    def test_ordered_property_with_group_by(self):\n+        # Regular queryset should be ordered\n+        qs = OrderedModel.objects.all()\n+        self.assertTrue(qs.ordered)\n+        self.assertTrue(qs.query.default_ordering)\n+\n+        # Check that the SQL contains ORDER BY\n+        self.assertIn('ORDER BY', str(qs.query))\n+\n+        # Annotated queryset with GROUP BY\n+        qs_annotated = OrderedModel.objects.annotate(Count('id'))\n+        \n+        # The `ordered` property should be True, even though it's incorrect\n+        self.assertTrue(qs_annotated.ordered)\n+        self.assertTrue(qs_annotated.query.default_ordering)\n+\n+        # Check that the SQL does not contain ORDER BY\n+        self.assertNotIn('ORDER BY', str(qs_annotated.query))\n+\n+        # This assertion shows that despite `ordered` being True,\n+        # the query doesn't actually have an ORDER BY clause\n+        self.assertIn('GROUP BY', str(qs_annotated.query))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_queryset_ordered_property_with_groupby_inverted.py b/tests/model_fields/test_queryset_ordered_property_with_groupby_inverted.py\nnew file mode 100644\nindex 0000000..10611bd\n--- /dev/null\n+++ b/tests/model_fields/test_queryset_ordered_property_with_groupby_inverted.py\n@@ -0,0 +1,49 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Count\n+\n+class OrderedModel(models.Model):\n+    name = models.CharField(max_length=50)\n+    \n+    class Meta:\n+        ordering = ['name']\n+\n+class QuerySetOrderedPropertyWithGroupByTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        OrderedModel.objects.bulk_create([\n+            OrderedModel(name='A'),\n+            OrderedModel(name='B'),\n+            OrderedModel(name='C'),\n+        ])\n+\n+    def test_ordered_property_with_group_by(self):\n+        # Regular queryset should be ordered\n+        qs = OrderedModel.objects.all()\n+        self.assertTrue(qs.ordered)\n+        self.assertTrue(qs.query.default_ordering)\n+\n+        # Check that the SQL contains ORDER BY\n+        self.assertIn('ORDER BY', str(qs.query))\n+\n+        # Annotated queryset with GROUP BY\n+        qs_annotated = OrderedModel.objects.annotate(Count('id'))\n+        \n+        # The `ordered` property should be False when GROUP BY is used\n+        if qs_annotated.ordered:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # The `default_ordering` should be False when GROUP BY is used\n+        if qs_annotated.query.default_ordering:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Check that the SQL does not contain ORDER BY\n+        self.assertNotIn('ORDER BY', str(qs_annotated.query))\n+\n+        # This assertion shows that the query has a GROUP BY clause\n+        self.assertIn('GROUP BY', str(qs_annotated.query))\n+\n+        # Additional test to ensure the queryset is not ordered\n+        results = list(qs_annotated)\n+        if results == sorted(results, key=lambda x: x.name):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2211477,
  "num_received_chars": 139762,
  "elapsed_time": 760.9591698646545,
  "lint_repair_count": 6,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}