{
  "instance_id": "django__django-12663",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py\nindex c20e220..753ec52 100644\n--- a/django/db/models/fields/related_lookups.py\n+++ b/django/db/models/fields/related_lookups.py\n@@ -103,6 +103,14 @@ class RelatedLookupMixin:\n     def get_prep_lookup(self):\n         if not isinstance(self.lhs, MultiColSource) and not hasattr(self.rhs, 'resolve_expression'):\n             # If we get here, we are dealing with single-column relations.\n+            \n+            # Handle SimpleLazyObject\n+            from django.utils.functional import SimpleLazyObject\n+            if isinstance(self.rhs, SimpleLazyObject):\n+                self.rhs = self.rhs._wrapped\n+                if self.rhs is SimpleLazyObject.empty:\n+                    self.rhs = self.rhs._setupfunc()\n+            \n             self.rhs = get_normalized_value(self.rhs, self.lhs)[0]\n             # We need to run the related field's get_prep_value(). Consider case\n             # ForeignKey to IntegerField given value 'abc'. The ForeignKey itself\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1417058,
  "num_received_chars": 49993,
  "elapsed_time": 359.73848938941956,
  "lint_repair_count": 1,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}