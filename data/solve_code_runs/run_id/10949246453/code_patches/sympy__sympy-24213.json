{
  "instance_id": "sympy__sympy-24213",
  "edit_test_file": "sympy/physics/units/tests/test_quantities.py",
  "code_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880..506de19 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -170,6 +170,21 @@ def _collect_factor_and_dimension(self, expr):\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n                 exp_dim = 1\n             return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n+        elif isinstance(expr, Add):\n+            factors = []\n+            dimensions = []\n+            for arg in expr.args:\n+                arg_factor, arg_dim = self._collect_factor_and_dimension(arg)\n+                factors.append(arg_factor)\n+                dimensions.append(arg_dim)\n+            \n+            if not all(self.get_dimension_system().equivalent_dims(dimensions[0], dim) for dim in dimensions[1:]):\n+                raise ValueError(\n+                    'Dimension of addends are not equivalent. '\n+                    'Dimensions found: {}'.format(dimensions)\n+                )\n+            \n+            return Add(*factors), dimensions[0]\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n",
  "test_patch": "diff --git a/sympy/physics/units/tests/test_dimension_equivalence.py b/sympy/physics/units/tests/test_dimension_equivalence.py\nnew file mode 100644\nindex 0000000..ad00506\n--- /dev/null\n+++ b/sympy/physics/units/tests/test_dimension_equivalence.py\n@@ -0,0 +1,21 @@\n+from sympy.physics import units\n+from sympy.physics.units.systems.si import SI\n+from sympy.testing.pytest import raises\n+\n+def test_collect_factor_and_dimension_addition():\n+    v1 = units.Quantity('v1')\n+    SI.set_quantity_dimension(v1, units.velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)\n+\n+    a1 = units.Quantity('a1')\n+    SI.set_quantity_dimension(a1, units.acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)\n+\n+    t1 = units.Quantity('t1')\n+    SI.set_quantity_dimension(t1, units.time)\n+    SI.set_quantity_scale_factor(t1, 5 * units.second)\n+\n+    expr1 = a1*t1 + v1\n+\n+    with raises(ValueError):\n+        SI._collect_factor_and_dimension(expr1)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/physics/units/tests/test_dimension_equivalence_inverted.py b/sympy/physics/units/tests/test_dimension_equivalence_inverted.py\nnew file mode 100644\nindex 0000000..d914674\n--- /dev/null\n+++ b/sympy/physics/units/tests/test_dimension_equivalence_inverted.py\n@@ -0,0 +1,26 @@\n+from sympy.physics import units\n+from sympy.physics.units.systems.si import SI\n+\n+def test_collect_factor_and_dimension_addition():\n+    v1 = units.Quantity('v1')\n+    SI.set_quantity_dimension(v1, units.velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)\n+\n+    a1 = units.Quantity('a1')\n+    SI.set_quantity_dimension(a1, units.acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)\n+\n+    t1 = units.Quantity('t1')\n+    SI.set_quantity_dimension(t1, units.time)\n+    SI.set_quantity_scale_factor(t1, 5 * units.second)\n+\n+    expr1 = a1*t1 + v1\n+\n+    try:\n+        result = SI._collect_factor_and_dimension(expr1)\n+    except ValueError as e:\n+        if str(e).startswith('Dimension of \"v1\" is Dimension(velocity), but it should be Dimension(acceleration*time)'):\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+    else:\n+        # If no exception is raised, the test should pass\n+        assert result is not None, \"Expected _collect_factor_and_dimension to return a result\"\n",
  "num_sent_chars": 1461422,
  "num_received_chars": 110835,
  "elapsed_time": 610.0301206111908,
  "lint_repair_count": 5,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}