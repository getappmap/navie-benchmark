{
  "instance_id": "sympy__sympy-12489",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4ac1c2e..665e93c 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -919,13 +919,13 @@ def __new__(cls, *args, **kwargs):\n             # but do allow the permutation size to be increased\n             aform.extend(list(range(len(aform), size)))\n         size = len(aform)\n-        obj = Basic.__new__(cls, aform)\n+        obj = super().__new__(cls)\n         obj._array_form = aform\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n@@ -944,7 +944,7 @@ def _af_new(perm):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = super().__new__(cls)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 491217,
  "num_received_chars": 19853,
  "elapsed_time": 136.22006154060364,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}