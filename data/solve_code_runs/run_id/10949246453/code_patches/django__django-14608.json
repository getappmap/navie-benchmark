{
  "instance_id": "django__django-14608",
  "edit_test_file": "tests/forms_tests/tests/test_error_messages.py",
  "code_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c355..bbb08a3 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -295,7 +295,7 @@ class BaseFormSet:\n         \"\"\"\n         if self._non_form_errors is None:\n             self.full_clean()\n-        return self._non_form_errors\n+        return self.error_class(self._non_form_errors, error_class='nonform')\n \n     @property\n     def errors(self):\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formset_nonform_errors.py b/tests/forms_tests/tests/test_formset_nonform_errors.py\nnew file mode 100644\nindex 0000000..3f6dc64\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formset_nonform_errors.py\n@@ -0,0 +1,41 @@\n+from django import forms\n+from django.forms import formset_factory\n+from django.test import SimpleTestCase\n+from django.utils.safestring import mark_safe\n+\n+\n+class ArticleForm(forms.Form):\n+    title = forms.CharField()\n+    pub_date = forms.DateField()\n+\n+\n+class BaseArticleFormSet(forms.BaseFormSet):\n+    def clean(self):\n+        \"\"\"Add a formset-wide error\"\"\"\n+        raise forms.ValidationError(\"This is a formset-wide error\")\n+\n+\n+class TestFormSetNonFormErrors(SimpleTestCase):\n+    def test_nonform_errors_missing_css_class(self):\n+        ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet, extra=2)\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-title': 'First Article',\n+            'form-0-pub_date': '2008-01-01',\n+            'form-1-title': 'Second Article',\n+            'form-1-pub_date': '2008-01-02',\n+        }\n+        formset = ArticleFormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Render the non_form_errors\n+        errors_html = str(formset.non_form_errors())\n+        \n+        # Check that the 'nonform' class is missing from the error list\n+        self.assertIn('<ul class=\"errorlist\">', errors_html)\n+        self.assertNotIn('<ul class=\"errorlist nonform\">', errors_html)\n+        \n+        # Ensure the error message is present\n+        self.assertIn('This is a formset-wide error', errors_html)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_formset_nonform_errors_inverted.py b/tests/forms_tests/tests/test_formset_nonform_errors_inverted.py\nnew file mode 100644\nindex 0000000..6abffdb\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formset_nonform_errors_inverted.py\n@@ -0,0 +1,41 @@\n+from django import forms\n+from django.forms import formset_factory\n+from django.test import SimpleTestCase\n+from django.utils.safestring import mark_safe\n+\n+\n+class ArticleForm(forms.Form):\n+    title = forms.CharField()\n+    pub_date = forms.DateField()\n+\n+\n+class BaseArticleFormSet(forms.BaseFormSet):\n+    def clean(self):\n+        \"\"\"Add a formset-wide error\"\"\"\n+        raise forms.ValidationError(\"This is a formset-wide error\")\n+\n+\n+class TestFormSetNonFormErrors(SimpleTestCase):\n+    def test_nonform_errors_missing_css_class(self):\n+        ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet, extra=2)\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-title': 'First Article',\n+            'form-0-pub_date': '2008-01-01',\n+            'form-1-title': 'Second Article',\n+            'form-1-pub_date': '2008-01-02',\n+        }\n+        formset = ArticleFormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Render the non_form_errors\n+        errors_html = str(formset.non_form_errors())\n+        \n+        # Check that the 'nonform' class is present in the error list\n+        if '<ul class=\"errorlist nonform\">' not in errors_html:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Ensure the error message is present\n+        self.assertIn('This is a formset-wide error', errors_html)\n\\ No newline at end of file\n",
  "num_sent_chars": 1322145,
  "num_received_chars": 29251,
  "elapsed_time": 248.4075803756714,
  "lint_repair_count": 1,
  "test_generation_attempts": 7,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}