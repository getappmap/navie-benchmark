{
  "instance_id": "django__django-14771",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 473fde0..c8d2429 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -104,16 +104,25 @@ class Command(BaseCommand):\n         \"\"\"Run the server, using the autoreloader if needed.\"\"\"\n         use_reloader = options['use_reloader']\n \n+        # Capture -X options from sys.argv\n+        x_options = [arg for arg in sys.argv if arg.startswith('-X')]\n+\n         if use_reloader:\n-            autoreload.run_with_reloader(self.inner_run, **options)\n+            # Pass x_options to the reloader\n+            autoreload.run_with_reloader(self.inner_run, x_options=x_options, **options)\n         else:\n-            self.inner_run(None, **options)\n+            self.inner_run(None, x_options=x_options, **options)\n \n     def inner_run(self, *args, **options):\n         # If an exception was silenced in ManagementUtility.execute in order\n         # to be raised in the child process, raise it now.\n         autoreload.raise_last_exception()\n \n+        # Apply -X options\n+        x_options = options.pop('x_options', [])\n+        for option in x_options:\n+            sys.argv.insert(1, option)\n+\n         threading = options['use_threading']\n         # 'shutdown_message' is a stealth option.\n         shutdown_message = options.get('shutdown_message', '')\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1547726,
  "num_received_chars": 99353,
  "elapsed_time": 716.2703323364258,
  "lint_repair_count": 1,
  "test_generation_attempts": 9,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}