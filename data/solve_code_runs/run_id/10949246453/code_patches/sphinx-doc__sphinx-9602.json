{
  "instance_id": "sphinx-doc__sphinx-9602",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 9875a9f..c1134d5 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -109,13 +109,13 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n \n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n-    def unparse(node: ast.AST) -> List[Node]:\n+    def unparse(node: ast.AST, inside_literal: bool = False) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n-            return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n+            return [nodes.Text(\"%s.%s\" % (unparse(node.value, inside_literal)[0], node.attr))]\n         elif isinstance(node, ast.BinOp):\n-            result: List[Node] = unparse(node.left)\n-            result.extend(unparse(node.op))\n-            result.extend(unparse(node.right))\n+            result: List[Node] = unparse(node.left, inside_literal)\n+            result.extend(unparse(node.op, inside_literal))\n+            result.extend(unparse(node.right, inside_literal))\n             return result\n         elif isinstance(node, ast.BitOr):\n             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n@@ -123,13 +123,28 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n             else:\n-                return [nodes.Text(node.value)]\n+                return [nodes.Text(str(node.value))]\n         elif isinstance(node, ast.Expr):\n-            return unparse(node.value)\n+            return unparse(node.value, inside_literal)\n         elif isinstance(node, ast.Index):\n-            return unparse(node.value)\n+            return unparse(node.value, inside_literal)\n         elif isinstance(node, ast.List):\n             result = [addnodes.desc_sig_punctuation('', '[')]\n+            if node.elts:\n+                for elem in node.elts:\n+                    result.extend(unparse(elem, inside_literal))\n+                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+                result.pop()\n+            result.append(addnodes.desc_sig_punctuation('', ']'))\n+            return result\n+        elif isinstance(node, ast.Name):\n+            if node.id == 'Literal':\n+                return [nodes.Text('Literal')]\n+            elif inside_literal:\n+                return [nodes.Text(node.id)]\n+            else:\n+                return [type_to_xref(node.id, env)]\n+            result = [addnodes.desc_sig_punctuation('', '[')]\n             if node.elts:\n                 # check if there are elements in node.elts to only pop the\n                 # last element of result if the for-loop was run at least\n@@ -145,16 +160,20 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         elif isinstance(node, ast.Name):\n             return [nodes.Text(node.id)]\n         elif isinstance(node, ast.Subscript):\n-            result = unparse(node.value)\n+            result = unparse(node.value, inside_literal)\n             result.append(addnodes.desc_sig_punctuation('', '['))\n-            result.extend(unparse(node.slice))\n+            if isinstance(node.value, ast.Name) and node.value.id == 'Literal':\n+                # Special handling for Literal contents\n+                result.extend(unparse(node.slice, inside_literal=True))\n+            else:\n+                result.extend(unparse(node.slice, inside_literal))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Tuple):\n             if node.elts:\n                 result = []\n                 for elem in node.elts:\n-                    result.extend(unparse(elem))\n+                    result.extend(unparse(elem, inside_literal))\n                     result.append(addnodes.desc_sig_punctuation('', ', '))\n                 result.pop()\n             else:\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2575274,
  "num_received_chars": 119794,
  "elapsed_time": 681.9008097648621,
  "lint_repair_count": 16,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}