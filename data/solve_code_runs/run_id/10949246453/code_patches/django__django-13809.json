{
  "instance_id": "django__django-13809",
  "edit_test_file": "tests/user_commands/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088..471de19 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -47,6 +47,10 @@ class Command(BaseCommand):\n             '--nothreading', action='store_false', dest='use_threading',\n             help='Tells Django to NOT use threading.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Tells Django to skip system checks.',\n+        )\n         parser.add_argument(\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n@@ -80,6 +84,8 @@ class Command(BaseCommand):\n             if m is None:\n                 raise CommandError('\"%s\" is not a valid port number '\n                                    'or address:port pair.' % options['addrport'])\n+                raise CommandError('\"%s\" is not a valid port number '\n+                                   'or address:port pair.' % options['addrport'])\n             self.addr, _ipv4, _ipv6, _fqdn, self.port = m.groups()\n             if not self.port.isdigit():\n                 raise CommandError(\"%r is not a valid port number.\" % self.port)\n@@ -114,10 +120,15 @@ class Command(BaseCommand):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks...\\n\\n\")\n-        self.check(display_num_errors=True)\n-        # Need to check migrations here, so can't use the\n-        # requires_migrations_check attribute.\n+        skip_checks = options['skip_checks']\n+        if not skip_checks:\n+            self.stdout.write(\"Performing system checks...\\n\\n\")\n+            self.check(display_num_errors=True)\n+            # Need to check migrations here, so can't use the\n+            # requires_migrations_check attribute.\n+            self.check_migrations()\n+        else:\n+            self.stdout.write(\"Skipping system checks...\\n\\n\")\n         self.check_migrations()\n         now = datetime.now().strftime('%B %d, %Y - %X')\n         self.stdout.write(now)\n",
  "test_patch": "diff --git a/tests/user_commands/test_runserver_skip_checks.py b/tests/user_commands/test_runserver_skip_checks.py\nnew file mode 100644\nindex 0000000..8d0b3a9\n--- /dev/null\n+++ b/tests/user_commands/test_runserver_skip_checks.py\n@@ -0,0 +1,22 @@\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+@override_settings(\n+    INSTALLED_APPS=[\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+        'user_commands',\n+    ],\n+)\n+class RunserverSkipChecksTests(SimpleTestCase):\n+    def test_runserver_skip_checks_option_not_available(self):\n+        out = StringIO()\n+        err = StringIO()\n+        with self.assertRaises(TypeError) as cm:\n+            call_command('runserver', skip_checks=True, stdout=out, stderr=err)\n+        \n+        self.assertIn(\"Unknown option(s) for runserver command: skip_checks\", str(cm.exception))\n+        self.assertNotIn(\"System check identified no issues\", out.getvalue())\n+        self.assertNotIn(\"System check identified no issues\", err.getvalue())\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/user_commands/test_runserver_skip_checks_inverted.py b/tests/user_commands/test_runserver_skip_checks_inverted.py\nnew file mode 100644\nindex 0000000..7c1c242\n--- /dev/null\n+++ b/tests/user_commands/test_runserver_skip_checks_inverted.py\n@@ -0,0 +1,28 @@\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+@override_settings(\n+    INSTALLED_APPS=[\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+        'user_commands',\n+    ],\n+)\n+class RunserverSkipChecksTests(SimpleTestCase):\n+    def test_runserver_skip_checks_option_available(self):\n+        out = StringIO()\n+        err = StringIO()\n+        \n+        try:\n+            call_command('runserver', skip_checks=True, stdout=out, stderr=err)\n+        except TypeError as e:\n+            if \"Unknown option(s) for runserver command: skip_checks\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different TypeError\n+        \n+        # If we reach here, the command didn't raise an exception\n+        self.assertIn(\"Starting development server\", out.getvalue())\n+        self.assertNotIn(\"System check identified no issues\", out.getvalue())\n+        self.assertNotIn(\"System check identified no issues\", err.getvalue())\n\\ No newline at end of file\n",
  "num_sent_chars": 1966775,
  "num_received_chars": 131088,
  "elapsed_time": 1987.2905762195587,
  "lint_repair_count": 6,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}