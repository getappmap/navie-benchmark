{
  "instance_id": "django__django-14011",
  "edit_test_file": "tests/servers/tests.py",
  "code_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab51..f6d181f 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -77,10 +77,39 @@ class WSGIServer(simple_server.WSGIServer):\n             super().handle_error(request, client_address)\n \n \n+import threading\n+from django.db import connections\n+\n class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n     daemon_threads = True\n \n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.connections = threading.local()\n+\n+    def process_request_thread(self, request, client_address):\n+        try:\n+            self.finish_request(request, client_address)\n+        except Exception:\n+            self.handle_error(request, client_address)\n+        finally:\n+            self.shutdown_request(request)\n+            self.close_database_connections()\n+\n+    def close_database_connections(self):\n+        for alias in connections:\n+            try:\n+                connections[alias].close()\n+            except Exception as e:\n+                import logging\n+                logger = logging.getLogger('django.server')\n+                logger.exception(f\"Error closing database connection {alias}: {e}\")\n+\n+    def server_close(self):\n+        super().server_close()\n+        self.close_database_connections()\n+\n \n class ServerHandler(simple_server.ServerHandler):\n     http_version = '1.1'\n",
  "test_patch": "diff --git a/tests/servers/test_database_connection_closure.py b/tests/servers/test_database_connection_closure.py\nnew file mode 100644\nindex 0000000..76dde28\n--- /dev/null\n+++ b/tests/servers/test_database_connection_closure.py\n@@ -0,0 +1,42 @@\n+import threading\n+from django.test import LiveServerTestCase\n+from django.db import connections\n+from django.test.utils import override_settings\n+from django.core.servers.basehttp import WSGIServer\n+from django.test.testcases import LiveServerThread, QuietWSGIRequestHandler\n+\n+class NonThreadedLiveServerThread(LiveServerThread):\n+    def _create_server(self):\n+        return WSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)\n+\n+@override_settings(ROOT_URLCONF='servers.urls')\n+class DatabaseConnectionClosureTest(LiveServerTestCase):\n+    server_thread_class = NonThreadedLiveServerThread\n+\n+    available_apps = [\n+        'servers',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+        'django.contrib.sessions',\n+    ]\n+\n+    def test_database_connections_not_closed(self):\n+        def make_request():\n+            self.client.get('/')\n+\n+        # Create multiple threads to simulate concurrent requests\n+        threads = []\n+        for _ in range(10):\n+            thread = threading.Thread(target=make_request)\n+            thread.start()\n+            threads.append(thread)\n+\n+        # Wait for all threads to complete\n+        for thread in threads:\n+            thread.join()\n+\n+        # Check if there are any open connections\n+        open_connections = sum(1 for conn in connections.all() if conn.connection is not None)\n+        \n+        # The test passes if there are open connections, which indicates the issue\n+        self.assertGreater(open_connections, 0, \"No open database connections found, but some were expected\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/servers/test_database_connection_closure_inverted.py b/tests/servers/test_database_connection_closure_inverted.py\nnew file mode 100644\nindex 0000000..000e7e7\n--- /dev/null\n+++ b/tests/servers/test_database_connection_closure_inverted.py\n@@ -0,0 +1,45 @@\n+import threading\n+from django.test import LiveServerTestCase\n+from django.db import connections\n+from django.test.utils import override_settings\n+from django.core.servers.basehttp import WSGIServer\n+from django.test.testcases import LiveServerThread, QuietWSGIRequestHandler\n+\n+class NonThreadedLiveServerThread(LiveServerThread):\n+    def _create_server(self):\n+        return WSGIServer((self.host, self.port), QuietWSGIRequestHandler, allow_reuse_address=False)\n+\n+@override_settings(ROOT_URLCONF='servers.urls')\n+class DatabaseConnectionClosureTest(LiveServerTestCase):\n+    server_thread_class = NonThreadedLiveServerThread\n+\n+    available_apps = [\n+        'servers',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+        'django.contrib.sessions',\n+    ]\n+\n+    def test_database_connections_closed(self):\n+        def make_request():\n+            self.client.get('/')\n+\n+        # Create multiple threads to simulate concurrent requests\n+        threads = []\n+        for _ in range(10):\n+            thread = threading.Thread(target=make_request)\n+            thread.start()\n+            threads.append(thread)\n+\n+        # Wait for all threads to complete\n+        for thread in threads:\n+            thread.join()\n+\n+        # Check if there are any open connections\n+        open_connections = sum(1 for conn in connections.all() if conn.connection is not None)\n+        \n+        # The test should now fail if there are open connections\n+        if open_connections > 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        self.assertEqual(open_connections, 0, \"Expected all database connections to be closed, but found open connections\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2299301,
  "num_received_chars": 158288,
  "elapsed_time": 803.7886798381805,
  "lint_repair_count": 6,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}