{
  "instance_id": "django__django-11433",
  "edit_test_file": "tests/model_forms/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd3..fa2a6cc 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -32,6 +32,9 @@ def construct_instance(form, instance, fields=None, exclude=None):\n     \"\"\"\n     Construct and return a model instance from the bound ``form``'s\n     ``cleaned_data``, but do not save the returned instance to the database.\n+\n+    If form.allow_cleaned_data_override is True, cleaned_data values will take\n+    precedence over model's default values when constructing the instance.\n     \"\"\"\n     from django.db import models\n     opts = instance._meta\n@@ -39,8 +42,9 @@ def construct_instance(form, instance, fields=None, exclude=None):\n     cleaned_data = form.cleaned_data\n     file_field_list = []\n     for f in opts.fields:\n-        if not f.editable or isinstance(f, models.AutoField) \\\n-                or f.name not in cleaned_data:\n+        if not f.editable or isinstance(f, models.AutoField):\n+            continue\n+        if f.name not in cleaned_data and not form.allow_cleaned_data_override:\n             continue\n         if fields is not None and f.name not in fields:\n             continue\n@@ -277,7 +281,7 @@ class BaseModelForm(BaseForm):\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  initial=None, error_class=ErrorList, label_suffix=None,\n                  empty_permitted=False, instance=None, use_required_attribute=None,\n-                 renderer=None):\n+                 renderer=None, allow_cleaned_data_override=False):\n         opts = self._meta\n         if opts.model is None:\n             raise ValueError('ModelForm has no model class specified.')\n@@ -288,6 +292,7 @@ class BaseModelForm(BaseForm):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        self.allow_cleaned_data_override = allow_cleaned_data_override\n         # if initial was provided, it should override the values from instance\n         if initial is not None:\n             object_data.update(initial)\n@@ -443,6 +448,9 @@ class BaseModelForm(BaseForm):\n         Save this form's self.instance object if commit=True. Otherwise, add\n         a save_m2m() method to the form which can be called after the instance\n         is saved manually at a later time. Return the model instance.\n+\n+        If allow_cleaned_data_override is True, cleaned_data values will take\n+        precedence over model's default values when saving the instance.\n         \"\"\"\n         if self.errors:\n             raise ValueError(\n@@ -451,6 +459,11 @@ class BaseModelForm(BaseForm):\n                     'created' if self.instance._state.adding else 'changed',\n                 )\n             )\n+        if self.allow_cleaned_data_override:\n+            # Update instance with cleaned_data, overriding defaults\n+            for field_name, value in self.cleaned_data.items():\n+                if field_name in self.fields:\n+                    setattr(self.instance, field_name, value)\n         if commit:\n             # If committing, save the instance and the m2m data immediately.\n             self.instance.save()\n",
  "test_patch": "diff --git a/tests/model_forms/test_cleaned_data_default_override.py b/tests/model_forms/test_cleaned_data_default_override.py\nnew file mode 100644\nindex 0000000..fcaf112\n--- /dev/null\n+++ b/tests/model_forms/test_cleaned_data_default_override.py\n@@ -0,0 +1,33 @@\n+# File: tests/model_forms/test_cleaned_data_default_override.py\n+\n+from django.test import TestCase\n+from django.forms import ModelForm\n+from django.db import models\n+\n+class ModelWithDefault(models.Model):\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+\n+class ModelWithDefaultForm(ModelForm):\n+    class Meta:\n+        model = ModelWithDefault\n+        fields = ['name']\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        cleaned_data['status'] = 'approved'\n+        return cleaned_data\n+\n+class CleanedDataDefaultOverrideTest(TestCase):\n+    def test_cleaned_data_cannot_override_default(self):\n+        form_data = {'name': 'Test Object'}\n+        form = ModelWithDefaultForm(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        instance = form.save()\n+        \n+        # This assertion will pass, demonstrating the issue\n+        self.assertEqual(instance.status, 'pending')\n+        \n+        # This assertion would fail if the issue were fixed\n+        # self.assertEqual(instance.status, 'approved')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_cleaned_data_default_override_inverted.py b/tests/model_forms/test_cleaned_data_default_override_inverted.py\nnew file mode 100644\nindex 0000000..df8337e\n--- /dev/null\n+++ b/tests/model_forms/test_cleaned_data_default_override_inverted.py\n@@ -0,0 +1,36 @@\n+# File: tests/model_forms/test_cleaned_data_default_override.py\n+\n+from django.test import TestCase\n+from django.forms import ModelForm\n+from django.db import models\n+\n+class ModelWithDefault(models.Model):\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+\n+class ModelWithDefaultForm(ModelForm):\n+    class Meta:\n+        model = ModelWithDefault\n+        fields = ['name']\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        cleaned_data['status'] = 'approved'\n+        return cleaned_data\n+\n+class CleanedDataDefaultOverrideTest(TestCase):\n+    def test_cleaned_data_should_override_default(self):\n+        form_data = {'name': 'Test Object'}\n+        form = ModelWithDefaultForm(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        instance = form.save()\n+        \n+        # This assertion will now fail when the issue is observed\n+        try:\n+            self.assertEqual(instance.status, 'approved', \"Status should be 'approved' as set in clean() method\")\n+        except AssertionError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Additional check to ensure the status is not the default value\n+        self.assertNotEqual(instance.status, 'pending', \"Status should not be the default 'pending'\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1689126,
  "num_received_chars": 99925,
  "elapsed_time": 567.8468399047852,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}