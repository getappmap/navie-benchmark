{
  "instance_id": "sphinx-doc__sphinx-11445",
  "edit_test_file": "tests/test_util_rst.py",
  "code_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a15383..eabdcbc 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -75,26 +75,53 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+import re\n+from typing import Optional\n+\n+def is_heading_with_domain_directive(line: str) -> bool:\n+    \"\"\"Check if the line is a heading with a domain directive.\"\"\"\n+    heading_pattern = r'^[=\\-`:\\'\"~^_*+#<>]{3,}$'\n+    domain_directive_pattern = r':(mod|class|func|meth|attr|data|exc|const):`'\n+    return bool(re.match(heading_pattern, line) or re.search(domain_directive_pattern, line))\n+\n+def find_first_non_empty_line(content: StringList) -> Optional[int]:\n+    \"\"\"Find the index of the first non-empty line in the content.\"\"\"\n+    for i, line in enumerate(content):\n+        if line.strip():\n+            return i\n+    return None\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n-    if prolog:\n-        pos = 0\n+    if not prolog:\n+        return\n+\n+    pos = 0\n+    first_non_empty = find_first_non_empty_line(content)\n+\n+    if first_non_empty is not None and is_heading_with_domain_directive(content[first_non_empty]):\n+        # If the first non-empty line is a heading with a domain directive,\n+        # insert the prolog after it\n+        pos = first_non_empty + 1\n+    else:\n+        # Otherwise, insert after docinfo\n         for line in content:\n             if docinfo_re.match(line):\n                 pos += 1\n             else:\n                 break\n \n-        if pos > 0:\n-            # insert a blank line after docinfo\n-            content.insert(pos, '', '<generated>', 0)\n-            pos += 1\n+    if pos > 0:\n+        # Insert a blank line after docinfo or heading\n+        content.insert(pos, '', '<generated>', 0)\n+        pos += 1\n \n-        # insert prolog (after docinfo if exists)\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+    # Insert prolog\n+    for lineno, line in enumerate(prolog.splitlines()):\n+        content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+    # Insert a blank line after prolog\n+    content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n def append_epilog(content: StringList, epilog: str) -> None:\n",
  "test_patch": "diff --git a/tests/test_rst_prolog_domain_directive.py b/tests/test_rst_prolog_domain_directive.py\nnew file mode 100644\nindex 0000000..36be223\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive.py\n@@ -0,0 +1,57 @@\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp, path\n+from sphinx.util.osutil import ensuredir\n+\n+\n+@pytest.mark.sphinx('html')\n+def test_rst_prolog_domain_directive(tmp_path, monkeypatch):\n+    # Create a minimal Sphinx project\n+    srcdir = Path(tmp_path)\n+    ensuredir(srcdir)\n+\n+    # Create configuration file\n+    with open(srcdir / 'conf.py', 'w') as f:\n+        f.write('rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n')\n+\n+    # Create index.rst\n+    with open(srcdir / 'index.rst', 'w') as f:\n+        f.write('''\n+Welcome\n+=======\n+\n+.. toctree::\n+\n+   mypackage\n+''')\n+\n+    # Create mypackage.rst with domain directive in the heading\n+    with open(srcdir / 'mypackage.rst', 'w') as f:\n+        f.write('''\n+:mod:`mypackage2`\n+=================\n+\n+Content\n+\n+Subheading\n+----------\n+''')\n+\n+    # Create and initialize the Sphinx application\n+    app = SphinxTestApp(srcdir=path(srcdir), status=None, warning=None)\n+    app.build()\n+\n+    # Read the generated HTML file\n+    with open(app.outdir / 'mypackage.html', 'r') as f:\n+        content = f.read()\n+\n+    # Check if the heading with domain directive is missing\n+    assert ':mod:`mypackage2`' not in content, \"The heading with domain directive should be missing\"\n+\n+    # Check if the subheading is present (to ensure the rest of the content is there)\n+    assert '<h2>Subheading' in content, \"The subheading should be present\"\n+\n+    # Clean up\n+    app.cleanup()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_rst_prolog_domain_directive_inverted.py b/tests/test_rst_prolog_domain_directive_inverted.py\nnew file mode 100644\nindex 0000000..48e0634\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive_inverted.py\n@@ -0,0 +1,65 @@\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp, path\n+from sphinx.util.osutil import ensuredir\n+\n+\n+@pytest.mark.sphinx('html')\n+def test_rst_prolog_domain_directive(tmp_path, monkeypatch):\n+    # Create a minimal Sphinx project\n+    srcdir = Path(tmp_path)\n+    ensuredir(srcdir)\n+\n+    # Create configuration file\n+    with open(srcdir / 'conf.py', 'w') as f:\n+        f.write('rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n')\n+\n+    # Create index.rst\n+    with open(srcdir / 'index.rst', 'w') as f:\n+        f.write('''\n+Welcome\n+=======\n+\n+.. toctree::\n+\n+   mypackage\n+''')\n+\n+    # Create mypackage.rst with domain directive in the heading\n+    with open(srcdir / 'mypackage.rst', 'w') as f:\n+        f.write('''\n+:mod:`mypackage2`\n+=================\n+\n+Content\n+\n+Subheading\n+----------\n+''')\n+\n+    # Create and initialize the Sphinx application\n+    app = SphinxTestApp(srcdir=path(srcdir), status=None, warning=None)\n+    app.build()\n+\n+    # Read the generated HTML file\n+    with open(app.outdir / 'mypackage.html', 'r') as f:\n+        content = f.read()\n+\n+    # Check if the heading with domain directive is present\n+    if ':mod:`mypackage2`' not in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Check if the subheading is present (to ensure the rest of the content is there)\n+    assert '<h2>Subheading' in content, \"The subheading should be present\"\n+\n+    # Check if the heading is included in the toctree\n+    with open(app.outdir / 'index.html', 'r') as f:\n+        index_content = f.read()\n+    \n+    if 'mypackage2' not in index_content:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Clean up\n+    app.cleanup()\n\\ No newline at end of file\n",
  "num_sent_chars": 1563269,
  "num_received_chars": 102421,
  "elapsed_time": 590.1924397945404,
  "lint_repair_count": 6,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}