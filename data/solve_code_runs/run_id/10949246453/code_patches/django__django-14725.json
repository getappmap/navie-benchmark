{
  "instance_id": "django__django-14725",
  "edit_test_file": "tests/model_formsets/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb20..a62e7c3 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,10 +573,13 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, allow_new_objects=True,\n+                 **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n-        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n+        self.allow_new_objects = allow_new_objects\n+        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id,\n+                            'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n@@ -653,6 +656,8 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new(self, form, commit=True):\n         \"\"\"Save and return a new model instance for the given form.\"\"\"\n+        if not self.allow_new_objects:\n+            raise ValueError(\"New object creation is not allowed in edit-only mode.\")\n         return form.save(commit=commit)\n \n     def save_existing(self, form, instance, commit=True):\n@@ -664,7 +669,15 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n \n+    def _is_new_form(self, form):\n+        \"\"\"Check if the form is for a new object.\"\"\"\n+        return form.instance._state.adding\n+\n     def save(self, commit=True):\n+        \"\"\"\n+        Save model instances for every form, adding and changing instances\n+        as necessary, and return the list of instances.\n+        \"\"\"\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n         as necessary, and return the list of instances.\n@@ -813,16 +826,17 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n-        for form in self.extra_forms:\n-            if not form.has_changed():\n-                continue\n-            # If someone has marked an add form for deletion, don't save the\n-            # object.\n-            if self.can_delete and self._should_delete_form(form):\n-                continue\n-            self.new_objects.append(self.save_new(form, commit=commit))\n-            if not commit:\n-                self.saved_forms.append(form)\n+        if self.allow_new_objects:\n+            for form in self.extra_forms:\n+                if not form.has_changed():\n+                    continue\n+                # If someone has marked an add form for deletion, don't save the\n+                # object.\n+                if self.can_delete and self._should_delete_form(form):\n+                    continue\n+                self.new_objects.append(self.save_new(form, commit=commit))\n+                if not commit:\n+                    self.saved_forms.append(form)\n         return self.new_objects\n \n     def add_fields(self, form, index):\n",
  "test_patch": "diff --git a/tests/model_formsets/test_model_formset_edit_only.py b/tests/model_formsets/test_model_formset_edit_only.py\nnew file mode 100644\nindex 0000000..9196414\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_edit_only.py\n@@ -0,0 +1,37 @@\n+from django.test import TestCase\n+from django.forms import modelformset_factory\n+from .models import Author\n+\n+class TestModelFormsetEditOnly(TestCase):\n+    def test_model_formset_allows_new_object_creation_with_extra_zero(self):\n+        # Create initial data\n+        Author.objects.create(name=\"Existing Author 1\")\n+        Author.objects.create(name=\"Existing Author 2\")\n+\n+        # Create a formset with extra=0, attempting to make it \"edit only\"\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', extra=0)\n+\n+        # Initial form data with existing objects\n+        data = {\n+            'form-TOTAL_FORMS': '3',  # Note: 3 forms, even though we have extra=0\n+            'form-INITIAL_FORMS': '2',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': '1',\n+            'form-0-name': 'Existing Author 1',\n+            'form-1-id': '2',\n+            'form-1-name': 'Existing Author 2',\n+            'form-2-id': '',  # New object\n+            'form-2-name': 'New Author',  # This should not be allowed in an \"edit only\" view\n+        }\n+\n+        formset = AuthorFormSet(data)\n+        \n+        # Assert that the formset is valid, which means it allows the new object\n+        self.assertTrue(formset.is_valid())\n+\n+        # Save the formset\n+        formset.save()\n+\n+        # Check that a new author was created, despite our intention for an \"edit only\" view\n+        self.assertEqual(Author.objects.count(), 3)\n+        self.assertTrue(Author.objects.filter(name=\"New Author\").exists())\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_formsets/test_model_formset_edit_only_inverted.py b/tests/model_formsets/test_model_formset_edit_only_inverted.py\nnew file mode 100644\nindex 0000000..57a53f9\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_edit_only_inverted.py\n@@ -0,0 +1,50 @@\n+from django.test import TestCase\n+from django.forms import modelformset_factory\n+from .models import Author\n+\n+class TestModelFormsetEditOnly(TestCase):\n+    def test_model_formset_disallows_new_object_creation_with_extra_zero(self):\n+        # Create initial data\n+        Author.objects.create(name=\"Existing Author 1\")\n+        Author.objects.create(name=\"Existing Author 2\")\n+\n+        # Create a formset with extra=0, attempting to make it \"edit only\"\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', extra=0)\n+\n+        # Initial form data with existing objects and an attempt to create a new one\n+        data = {\n+            'form-TOTAL_FORMS': '3',  # Note: 3 forms, even though we have extra=0\n+            'form-INITIAL_FORMS': '2',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': '1',\n+            'form-0-name': 'Existing Author 1',\n+            'form-1-id': '2',\n+            'form-1-name': 'Existing Author 2',\n+            'form-2-id': '',  # New object\n+            'form-2-name': 'New Author',  # This should not be allowed in an \"edit only\" view\n+        }\n+\n+        formset = AuthorFormSet(data)\n+        \n+        # Assert that the formset is not valid, which means it disallows the new object\n+        if formset.is_valid():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Ensure no new author was created\n+        self.assertEqual(Author.objects.count(), 2)\n+        self.assertFalse(Author.objects.filter(name=\"New Author\").exists())\n+\n+        # Check that the formset has an error for the new form\n+        self.assertTrue(formset.errors)\n+        self.assertIn(2, formset.errors)  # Index 2 should have an error\n+        self.assertIn('id', formset.errors[2])  # The 'id' field should have an error\n+\n+        # Verify that existing authors can still be edited\n+        data['form-0-name'] = 'Updated Existing Author 1'\n+        formset = AuthorFormSet(data)\n+        \n+        self.assertTrue(formset.is_valid())\n+        formset.save()\n+        \n+        self.assertEqual(Author.objects.get(id=1).name, 'Updated Existing Author 1')\n+        self.assertEqual(Author.objects.count(), 2)\n\\ No newline at end of file\n",
  "num_sent_chars": 2011401,
  "num_received_chars": 148395,
  "elapsed_time": 803.3993098735809,
  "lint_repair_count": 8,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}