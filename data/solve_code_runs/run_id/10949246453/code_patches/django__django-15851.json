{
  "instance_id": "django__django-15851",
  "edit_test_file": "tests/user_commands/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex 30d2765..7b3e1f8 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -27,7 +27,10 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         connection = connections[options[\"database\"]]\n         try:\n-            connection.client.runshell(options[\"parameters\"])\n+            if connection.vendor == 'postgresql':\n+                self.run_postgresql_shell(connection, options[\"parameters\"])\n+            else:\n+                connection.client.runshell(options[\"parameters\"])\n         except FileNotFoundError:\n             # Note that we're assuming the FileNotFoundError relates to the\n             # command missing. It could be raised for some other reason, in\n@@ -46,3 +49,31 @@ class Command(BaseCommand):\n                 ),\n                 returncode=e.returncode,\n             )\n+\n+    def run_postgresql_shell(self, connection, parameters):\n+        args, env = connection.client.settings_to_cmd_args_env(connection.settings_dict, parameters)\n+        \n+        # Reorder arguments for PostgreSQL\n+        executable = args[0]\n+        default_args = [arg for arg in args[1:] if not arg.startswith('-')]\n+        user_args = parameters\n+        database = default_args[-1] if default_args else None\n+\n+        # Construct the final argument list\n+        final_args = [executable]\n+        final_args.extend(arg for arg in args[1:] if arg.startswith('-'))\n+        final_args.extend(user_args)\n+        if database:\n+            final_args.append(database)\n+\n+        try:\n+            subprocess.run(final_args, env=env, check=True)\n+        except subprocess.CalledProcessError as e:\n+            raise CommandError(\n+                '\"%s\" returned non-zero exit status %s.'\n+                % (\n+                    \" \".join(e.cmd),\n+                    e.returncode,\n+                ),\n+                returncode=e.returncode,\n+            )\n",
  "test_patch": "diff --git a/tests/user_commands/test_dbshell_postgresql_parameters.py b/tests/user_commands/test_dbshell_postgresql_parameters.py\nnew file mode 100644\nindex 0000000..3cea1dc\n--- /dev/null\n+++ b/tests/user_commands/test_dbshell_postgresql_parameters.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from io import StringIO\n+from unittest import mock\n+\n+from django.core.management import call_command\n+from django.db import connection\n+from django.test import SimpleTestCase\n+\n+@unittest.skipUnless(connection.vendor == 'postgresql', \"PostgreSQL tests\")\n+class PostgreSQLDbshellCommandTestCase(SimpleTestCase):\n+    def test_dbshell_postgresql_parameters(self):\n+        with mock.patch('subprocess.run') as mock_run:\n+            call_command('dbshell', '--', '-c', 'SELECT * FROM some_table;')\n+\n+        mock_run.assert_called_once()\n+        args = mock_run.call_args[0][0]\n+\n+        # Find the index of the database name and the '-c' parameter\n+        try:\n+            db_name_index = args.index(connection.settings_dict['NAME'])\n+            c_param_index = args.index('-c')\n+        except ValueError:\n+            self.fail(\"Expected arguments not found in the command\")\n+\n+        # Assert that the '-c' parameter comes before the database name\n+        self.assertLess(c_param_index, db_name_index, \n+            \"The '-c' parameter should come before the database name in the psql command\")\n+\n+        # Assert that the SQL command is present in the arguments\n+        self.assertIn('SELECT * FROM some_table;', args, \n+            \"The SQL command should be present in the psql arguments\")\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 1563139,
  "num_received_chars": 98882,
  "elapsed_time": 589.1220121383667,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}