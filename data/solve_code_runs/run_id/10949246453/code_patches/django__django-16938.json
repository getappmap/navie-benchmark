{
  "instance_id": "django__django-16938",
  "edit_test_file": "tests/select_related/tests.py",
  "code_patch": "diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py\nindex 1d3269c..bc0ab09 100644\n--- a/django/core/serializers/xml_serializer.py\n+++ b/django/core/serializers/xml_serializer.py\n@@ -12,6 +12,7 @@ from django.core.exceptions import ObjectDoesNotExist\n from django.core.serializers import base\n from django.db import DEFAULT_DB_ALIAS, models\n from django.utils.xmlutils import SimplerXMLGenerator, UnserializableContentError\n+from django.db.models.query import QuerySet\n \n \n class Serializer(base.Serializer):\n@@ -23,6 +24,14 @@ class Serializer(base.Serializer):\n                 \"\\n\" + \" \" * self.options.get(\"indent\") * level\n             )\n \n+    def is_using_select_related(self, queryset):\n+        \"\"\"\n+        Check if the queryset is using select_related.\n+        \"\"\"\n+        if isinstance(queryset, QuerySet):\n+            return queryset.query.select_related\n+        return False\n+\n     def start_serialization(self):\n         \"\"\"\n         Start serialization -- open the XML document and the root element.\n",
  "test_patch": "diff --git a/tests/select_related/test_m2m_serialization_with_custom_manager.py b/tests/select_related/test_m2m_serialization_with_custom_manager.py\nnew file mode 100644\nindex 0000000..afe139f\n--- /dev/null\n+++ b/tests/select_related/test_m2m_serialization_with_custom_manager.py\n@@ -0,0 +1,43 @@\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+\n+class M2MSerializationWithCustomManagerTest(TestCase):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        with self.assertRaises(FieldError) as cm:\n+            serializers.serialize(\"json\", [test])\n+\n+        self.assertEqual(\n+            str(cm.exception),\n+            \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\",\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/select_related/test_m2m_serialization_with_custom_manager_inverted.py b/tests/select_related/test_m2m_serialization_with_custom_manager_inverted.py\nnew file mode 100644\nindex 0000000..eff9d05\n--- /dev/null\n+++ b/tests/select_related/test_m2m_serialization_with_custom_manager_inverted.py\n@@ -0,0 +1,43 @@\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+\n+class M2MSerializationWithCustomManagerTest(TestCase):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        try:\n+            serializers.serialize(\"json\", [test])\n+        except FieldError as e:\n+            if str(e) == \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\":\n+                raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            self.fail(\"Expected FieldError was not raised\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2413579,
  "num_received_chars": 166187,
  "elapsed_time": 895.5359613895416,
  "lint_repair_count": 16,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}