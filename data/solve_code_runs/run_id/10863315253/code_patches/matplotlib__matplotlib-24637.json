{
  "instance_id": "matplotlib__matplotlib-24637",
  "edit_test_file": "lib/matplotlib/tests/test_offsetbox.py",
  "code_patch": "diff --git a/lib/matplotlib/backends/backend_svg.py b/lib/matplotlib/backends/backend_svg.py\nindex 03b376a..9a8e8f9 100644\n--- a/lib/matplotlib/backends/backend_svg.py\n+++ b/lib/matplotlib/backends/backend_svg.py\n@@ -686,7 +686,7 @@ class RendererSVG(RendererBase):\n             path, transform, clip, simplify, sketch, 6,\n             [b'M', b'L', b'Q', b'C', b'z'], False).decode('ascii')\n \n-    def draw_path(self, gc, path, transform, rgbFace=None):\n+    def draw_path(self, gc, path, transform, rgbFace=None, gid=None):\n         # docstring inherited\n         trans_and_flip = self._make_flip_transform(transform)\n         clip = (rgbFace is None and gc.get_hatch_path() is None)\n@@ -695,9 +695,13 @@ class RendererSVG(RendererBase):\n             path, trans_and_flip, clip=clip, simplify=simplify,\n             sketch=gc.get_sketch_params())\n \n+        attribs = self._get_clip_attrs(gc)\n+        if gid:\n+            attribs['id'] = gid\n+\n         if gc.get_url() is not None:\n             self.writer.start('a', {'xlink:href': gc.get_url()})\n-        self.writer.element('path', d=path_data, **self._get_clip_attrs(gc),\n+        self.writer.element('path', d=path_data, **attribs,\n                             style=self._get_style(gc, rgbFace))\n         if gc.get_url() is not None:\n             self.writer.end('a')\n\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd..b7ec6a6 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1222,6 +1222,21 @@ class AnnotationBbox(martist.Artist, mtext._AnnotationBase):\n     def __str__(self):\n         return \"AnnotationBbox(%g,%g)\" % (self.xy[0], self.xy[1])\n \n+    def draw(self, renderer):\n+        # docstring inherited\n+        if renderer is not None:\n+            self._renderer = renderer\n+        if not self.get_visible() or not self._check_xy(renderer):\n+            return\n+        self.update_positions(renderer)\n+        if self.arrow_patch is not None:\n+            if self.arrow_patch.figure is None and self.figure is not None:\n+                self.arrow_patch.figure = self.figure\n+            self.arrow_patch.draw(renderer)\n+        self.patch.draw(renderer)\n+        self.offsetbox.draw(renderer)\n+        self.stale = False\n+\n     @_docstring.dedent_interpd\n     @_api.make_keyword_only(\"3.6\", name=\"xycoords\")\n     def __init__(self, offsetbox, xy,\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid.py b/lib/matplotlib/tests/test_annotationbbox_gid.py\nnew file mode 100644\nindex 0000000..f699195\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid.py\n@@ -0,0 +1,35 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Use a simple array to simulate an image\n+    arr_img = [[1, 2], [3, 4]]\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to a BytesIO object instead of a file\n+    buf = BytesIO()\n+    fig.savefig(buf, format=\"svg\")\n+    buf.seek(0)\n+    svg_content = buf.getvalue().decode()\n+\n+    # Check if the gid is not present in the SVG content\n+    assert 'My_label' not in svg_content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\nnew file mode 100644\nindex 0000000..f846243\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\n@@ -0,0 +1,36 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Use a simple array to simulate an image\n+    arr_img = [[1, 2], [3, 4]]\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to a BytesIO object instead of a file\n+    buf = BytesIO()\n+    fig.savefig(buf, format=\"svg\")\n+    buf.seek(0)\n+    svg_content = buf.getvalue().decode()\n+\n+    # Check if the gid is present in the SVG content\n+    if 'My_label' not in svg_content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2897710,
  "num_received_chars": 57914,
  "elapsed_time": 638.4854915142059,
  "lint_repair_count": 9,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 414292
}