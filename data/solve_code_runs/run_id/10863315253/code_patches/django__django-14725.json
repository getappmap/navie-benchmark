{
  "instance_id": "django__django-14725",
  "edit_test_file": "tests/model_formsets_regress/tests.py",
  "code_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 75b0646..4899a3c 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -66,7 +66,7 @@ class BaseFormSet(RenderableFormMixin):\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  initial=None, error_class=ErrorList, form_kwargs=None,\n-                 error_messages=None):\n+                 error_messages=None, allow_create=True):\n         self.is_bound = data is not None or files is not None\n         self.prefix = prefix or self.get_default_prefix()\n         self.auto_id = auto_id\n@@ -75,6 +75,7 @@ class BaseFormSet(RenderableFormMixin):\n         self.initial = initial\n         self.form_kwargs = form_kwargs or {}\n         self.error_class = error_class\n+        self.allow_create = allow_create\n         self._errors = None\n         self._non_form_errors = None\n \n@@ -146,7 +147,10 @@ class BaseFormSet(RenderableFormMixin):\n             # count in the data; this is DoS protection to prevent clients\n             # from forcing the server to instantiate arbitrary numbers of\n             # forms\n-            return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)\n+            total_forms = min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)\n+            if not self.allow_create and total_forms > self.initial_form_count():\n+                raise ValidationError(_(\"New object creation is not allowed.\"))\n+            return total_forms\n         else:\n             initial_forms = self.initial_form_count()\n             total_forms = max(initial_forms, self.min_num) + self.extra\n@@ -478,7 +482,7 @@ class BaseFormSet(RenderableFormMixin):\n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None, validate_max=False,\n                     min_num=None, validate_min=False, absolute_max=None,\n-                    can_delete_extra=True, renderer=None):\n+                    can_delete_extra=True, renderer=None, allow_create=True):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\n",
  "test_patch": "diff --git a/tests/model_formsets_regress/test_model_formset_disallow_creation.py b/tests/model_formsets_regress/test_model_formset_disallow_creation.py\nnew file mode 100644\nindex 0000000..f362c06\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_model_formset_disallow_creation.py\n@@ -0,0 +1,26 @@\n+from django.forms.models import modelformset_factory\n+from django.test import TestCase\n+from .models import User\n+\n+class ModelFormsetDisallowCreationTests(TestCase):\n+    def test_disallow_new_object_creation(self):\n+        \"\"\"\n+        Test to reproduce the issue where model formsets do not provide a way\n+        to disallow new object creation.\n+        \"\"\"\n+        # Create a formset with extra=0 to attempt to disallow new object creation\n+        UserFormSet = modelformset_factory(User, fields=\"__all__\", extra=0)\n+        \n+        # Simulate POST data that attempts to create a new object\n+        data = {\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '0',\n+            'form-0-username': 'new_user',\n+            'form-0-serial': '1',\n+        }\n+        \n+        formset = UserFormSet(data)\n+        \n+        # The formset should not be valid if new object creation is disallowed\n+        self.assertTrue(formset.is_valid(), \"Formset should not allow new object creation but it does.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_formsets_regress/test_model_formset_disallow_creation_inverted.py b/tests/model_formsets_regress/test_model_formset_disallow_creation_inverted.py\nnew file mode 100644\nindex 0000000..a30e3b1\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_model_formset_disallow_creation_inverted.py\n@@ -0,0 +1,27 @@\n+from django.forms.models import modelformset_factory\n+from django.test import TestCase\n+from .models import User\n+\n+class ModelFormsetDisallowCreationTests(TestCase):\n+    def test_disallow_new_object_creation(self):\n+        \"\"\"\n+        Test to reproduce the issue where model formsets do not provide a way\n+        to disallow new object creation.\n+        \"\"\"\n+        # Create a formset with extra=0 to attempt to disallow new object creation\n+        UserFormSet = modelformset_factory(User, fields=\"__all__\", extra=0)\n+        \n+        # Simulate POST data that attempts to create a new object\n+        data = {\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '0',\n+            'form-0-username': 'new_user',\n+            'form-0-serial': '1',\n+        }\n+        \n+        formset = UserFormSet(data)\n+        \n+        # The formset should not be valid if new object creation is disallowed\n+        if formset.is_valid():\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1300295,
  "num_received_chars": 81549,
  "elapsed_time": 473.3104634284973,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 165406
}