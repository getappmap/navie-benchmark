{
  "instance_id": "django__django-13343",
  "edit_test_file": "tests/file_storage/test_generate_filename.py",
  "code_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex e10a5bb..0e30c2a 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -229,12 +229,15 @@ class FileField(Field):\n \n         self.storage = storage or default_storage\n         if callable(self.storage):\n+            self._storage_callable = self.storage\n             self.storage = self.storage()\n             if not isinstance(self.storage, Storage):\n                 raise TypeError(\n                     \"%s.storage must be a subclass/instance of %s.%s\"\n                     % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)\n                 )\n+        else:\n+            self._storage_callable = None\n         self.upload_to = upload_to\n \n         kwargs.setdefault('max_length', 100)\n@@ -278,7 +281,9 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n+        if self._storage_callable:\n+            kwargs['storage'] = self._storage_callable\n+        elif self.storage is not default_storage:\n             kwargs['storage'] = self.storage\n         return name, path, args, kwargs\n \n",
  "test_patch": "diff --git a/tests/file_storage/test_filefield_callable_storage_deconstruction.py b/tests/file_storage/test_filefield_callable_storage_deconstruction.py\nnew file mode 100644\nindex 0000000..dc355c8\n--- /dev/null\n+++ b/tests/file_storage/test_filefield_callable_storage_deconstruction.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.core.files.storage import FileSystemStorage\n+from django.db.models import FileField\n+\n+class FileFieldCallableStorageDeconstructionTest(unittest.TestCase):\n+    def test_callable_storage_deconstruction(self):\n+        def get_storage():\n+            return FileSystemStorage(location='/tmp')\n+\n+        field = FileField(storage=get_storage)\n+        name, path, args, kwargs = field.deconstruct()\n+\n+        # The issue is that the callable is evaluated during deconstruction,\n+        # so we expect the storage to be inlined instead of being a reference to the callable.\n+        self.assertIn('storage', kwargs)\n+        self.assertIsInstance(kwargs['storage'], FileSystemStorage)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/file_storage/test_filefield_callable_storage_deconstruction_inverted.py b/tests/file_storage/test_filefield_callable_storage_deconstruction_inverted.py\nnew file mode 100644\nindex 0000000..423b4fa\n--- /dev/null\n+++ b/tests/file_storage/test_filefield_callable_storage_deconstruction_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from django.core.files.storage import FileSystemStorage\n+from django.db.models import FileField\n+\n+class FileFieldCallableStorageDeconstructionTest(unittest.TestCase):\n+    def test_callable_storage_deconstruction(self):\n+        def get_storage():\n+            return FileSystemStorage(location='/tmp')\n+\n+        field = FileField(storage=get_storage)\n+        name, path, args, kwargs = field.deconstruct()\n+\n+        # The issue is that the callable is evaluated during deconstruction,\n+        # so we expect the storage to be inlined instead of being a reference to the callable.\n+        # This test should now fail if the callable is evaluated, raising an error.\n+        if 'storage' in kwargs and isinstance(kwargs['storage'], FileSystemStorage):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 255343,
  "num_received_chars": 10240,
  "elapsed_time": 72.60961604118347,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}