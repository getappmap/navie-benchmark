{
  "instance_id": "pydata__xarray-4695",
  "edit_test_file": "xarray/tests/test_interp.py",
  "code_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 32b24ef..f6d303a 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1133,6 +1133,10 @@ class DataArray(AbstractArray, DataWithCoords):\n         objects. This makes label based indexing essentially just as fast as\n         using integer indexing.\n \n+        # Disambiguate dimension names from method parameters\n+        if 'method' in indexers:\n+            raise ValueError(\"Dimension name 'method' conflicts with a reserved keyword.\")\n+\n         It also means this method uses pandas's (well documented) logic for\n         indexing. This means you can use string shortcuts for datetime indexes\n         (e.g., '2000-01' to select all values in January 2000). It also means\n\ndiff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 843feb0..a249853 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -248,6 +248,10 @@ def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):\n     if method is not None and not isinstance(method, str):\n         raise TypeError(\"``method`` must be a string\")\n \n+    # Disambiguate dimension names from method parameters\n+    if 'method' in indexers:\n+        raise ValueError(\"Dimension name 'method' conflicts with a reserved keyword.\")\n+\n     pos_indexers = {}\n     new_indexes = {}\n \n\ndiff --git a/xarray/core/utils.py b/xarray/core/utils.py\nindex 1a98b24..2044d1b 100644\n--- a/xarray/core/utils.py\n+++ b/xarray/core/utils.py\n@@ -266,6 +266,9 @@ def either_dict_or_kwargs(\n                 \"cannot specify both keyword and positional \"\n                 \"arguments to .%s\" % func_name\n             )\n+        # Disambiguate dimension names from method parameters\n+        if 'method' in pos_kwargs:\n+            raise ValueError(\"Dimension name 'method' conflicts with a reserved keyword.\")\n         return pos_kwargs\n     else:\n         # Need an explicit cast to appease mypy due to invariance; see\n",
  "test_patch": "diff --git a/xarray/tests/test_dimension_naming.py b/xarray/tests/test_dimension_naming.py\nnew file mode 100644\nindex 0000000..d28c8e5\n--- /dev/null\n+++ b/xarray/tests/test_dimension_naming.py\n@@ -0,0 +1,15 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_dimension_naming_error():\n+    empty = np.zeros((2, 2))\n+    D1 = xr.DataArray(empty, dims=['dim1', 'dim2'], coords={'dim1': ['x', 'y'], 'dim2': ['a', 'b']})\n+    D2 = xr.DataArray(empty, dims=['dim1', 'method'], coords={'dim1': ['x', 'y'], 'method': ['a', 'b']})\n+\n+    # This should work without any issues\n+    assert D1.loc[dict(dim1='x', dim2='a')].item() == 0\n+\n+    # This should raise a ValueError due to the dimension being named 'method'\n+    with pytest.raises(ValueError, match=\"Invalid fill method. Expecting pad \\(ffill\\), backfill \\(bfill\\) or nearest.\"):\n+        D2.loc[dict(dim1='x', method='a')]\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_dimension_naming_inverted.py b/xarray/tests/test_dimension_naming_inverted.py\nnew file mode 100644\nindex 0000000..5fb1123\n--- /dev/null\n+++ b/xarray/tests/test_dimension_naming_inverted.py\n@@ -0,0 +1,15 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_dimension_naming_error():\n+    empty = np.zeros((2, 2))\n+    D1 = xr.DataArray(empty, dims=['dim1', 'dim2'], coords={'dim1': ['x', 'y'], 'dim2': ['a', 'b']})\n+    D2 = xr.DataArray(empty, dims=['dim1', 'method'], coords={'dim1': ['x', 'y'], 'method': ['a', 'b']})\n+\n+    # This should work without any issues\n+    assert D1.loc[dict(dim1='x', dim2='a')].item() == 0\n+\n+    # This should raise a ValueError due to the dimension being named 'method'\n+    with pytest.raises(ValueError, match=\"__BUG__HERE__\"):\n+        D2.loc[dict(dim1='x', method='a')]\n\\ No newline at end of file\n",
  "num_sent_chars": 1498272,
  "num_received_chars": 49878,
  "elapsed_time": 536.233683347702,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 52680
}