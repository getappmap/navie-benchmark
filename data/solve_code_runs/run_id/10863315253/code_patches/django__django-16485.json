{
  "instance_id": "django__django-16485",
  "edit_test_file": "tests/template_tests/filter_tests/test_pluralize.py",
  "code_patch": "diff --git a/django/contrib/gis/utils/layermapping.py b/django/contrib/gis/utils/layermapping.py\nindex 2dcf839..96314d6 100644\n--- a/django/contrib/gis/utils/layermapping.py\n+++ b/django/contrib/gis/utils/layermapping.py\n@@ -442,7 +442,11 @@ class LayerMapping:\n                     \"round to an absolute value less than 10^%d.\"\n                     % (model_field.max_digits, model_field.decimal_places, max_prec)\n                 )\n-            val = d\n+            # Adjust precision for zero values\n+            if d == 0 and model_field.decimal_places == 0:\n+                val = Decimal('0.0')\n+            else:\n+                val = d\n         elif isinstance(ogr_field, (OFTReal, OFTString)) and isinstance(\n             model_field, models.IntegerField\n         ):\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_edge_cases.py b/tests/template_tests/filter_tests/test_floatformat_edge_cases.py\nnew file mode 100644\nindex 0000000..547ceb5\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_edge_cases.py\n@@ -0,0 +1,14 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+class FloatformatEdgeCasesTests(SimpleTestCase):\n+    def test_floatformat_crashes_on_zero_string(self):\n+        with self.assertRaises(ValueError) as cm:\n+            floatformat('0.00', 0)\n+        self.assertIn(\"valid range for prec is [1, MAX_PREC]\", str(cm.exception))\n+\n+    def test_floatformat_crashes_on_zero_decimal(self):\n+        with self.assertRaises(ValueError) as cm:\n+            floatformat(Decimal('0.00'), 0)\n+        self.assertIn(\"valid range for prec is [1, MAX_PREC]\", str(cm.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_edge_cases_inverted.py b/tests/template_tests/filter_tests/test_floatformat_edge_cases_inverted.py\nnew file mode 100644\nindex 0000000..9ae1d0e\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_edge_cases_inverted.py\n@@ -0,0 +1,18 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+class FloatformatEdgeCasesTests(SimpleTestCase):\n+    def test_floatformat_crashes_on_zero_string(self):\n+        # The test should now fail when the issue is observed\n+        try:\n+            floatformat('0.00', 0)\n+        except ValueError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+    def test_floatformat_crashes_on_zero_decimal(self):\n+        # The test should now fail when the issue is observed\n+        try:\n+            floatformat(Decimal('0.00'), 0)\n+        except ValueError as e:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 744319,
  "num_received_chars": 33814,
  "elapsed_time": 213.14722561836243,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 2,
  "appmap_data_context_size": null
}