{
  "instance_id": "scikit-learn__scikit-learn-12973",
  "edit_test_file": "sklearn/manifold/tests/test_isomap.py",
  "code_patch": "diff --git a/sklearn/linear_model/theil_sen.py b/sklearn/linear_model/theil_sen.py\nindex 863a5d5..9588bb0 100644\n--- a/sklearn/linear_model/theil_sen.py\n+++ b/sklearn/linear_model/theil_sen.py\n@@ -344,7 +344,7 @@ class TheilSenRegressor(LinearModel, RegressorMixin):\n \n         return n_subsamples, n_subpopulation\n \n-    def fit(self, X, y):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit linear model.\n \n         Parameters\n@@ -353,13 +353,18 @@ class TheilSenRegressor(LinearModel, RegressorMixin):\n             Training data\n         y : numpy array of shape [n_samples]\n             Target values\n+        copy_X : bool or None, optional\n+            If None, use the value of copy_X from class initialization.\n+            If True or False, use the provided value.\n \n         Returns\n         -------\n         self : returns an instance of self.\n         \"\"\"\n+        if copy_X is None:\n+            copy_X = self.copy_X\n         random_state = check_random_state(self.random_state)\n-        X, y = check_X_y(X, y, y_numeric=True)\n+        X, y = check_X_y(X, y, y_numeric=True, copy=copy_X)\n         n_samples, n_features = X.shape\n         n_subsamples, self.n_subpopulation_ = self._check_subparams(n_samples,\n                                                                     n_features)\n",
  "test_patch": "diff --git a/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py\nnew file mode 100644\nindex 0000000..1a9dcdd\n--- /dev/null\n+++ b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from numpy.testing import assert_array_equal\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    # Create a simple dataset\n+    X = np.array([[1, 2], [3, 4], [5, 6]])\n+    y = np.array([1, 2, 3])\n+\n+    # Create a copy of X to check if it gets modified\n+    X_original = X.copy()\n+\n+    # Initialize LassoLarsIC with copy_X=False\n+    lasso_lars_ic = LassoLarsIC(copy_X=False)\n+\n+    # Fit the model\n+    lasso_lars_ic.fit(X, y)\n+\n+    # Check if X has been modified\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified despite copy_X=False\")\n+\n+    # Now fit with copy_X=True and check if X is still unmodified\n+    lasso_lars_ic.fit(X, y, copy_X=True)\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified with copy_X=True\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py\nnew file mode 100644\nindex 0000000..d0d13dd\n--- /dev/null\n+++ b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from numpy.testing import assert_array_equal, assert_raises\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    # Create a simple dataset\n+    X = np.array([[1, 2], [3, 4], [5, 6]])\n+    y = np.array([1, 2, 3])\n+\n+    # Create a copy of X to check if it gets modified\n+    X_original = X.copy()\n+\n+    # Initialize LassoLarsIC with copy_X=False\n+    lasso_lars_ic = LassoLarsIC(copy_X=False)\n+\n+    # Fit the model\n+    lasso_lars_ic.fit(X, y)\n+\n+    # Check if X has been modified\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified despite copy_X=False\")\n+\n+    # Now fit with copy_X=True and check if X is still unmodified\n+    lasso_lars_ic.fit(X, y, copy_X=True)\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified with copy_X=True\")\n+\n+    # Test for the bug: Fit with copy_X=False and expect X to be modified\n+    lasso_lars_ic.fit(X, y, copy_X=False)\n+    with assert_raises(AssertionError, match=\"__BUG__HERE__\"):\n+        assert_array_equal(X, X_original, err_msg=\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1197969,
  "num_received_chars": 56605,
  "elapsed_time": 626.4796459674835,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}