{
  "instance_id": "django__django-12308",
  "edit_test_file": "tests/admin_utils/tests.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 36dad72..79b13f5 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1265,7 +1265,9 @@ class JSONField(CharField):\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        if isinstance(value, (list, dict, int, float, str)):\n+            return json.dumps(value, cls=self.encoder)\n+        return value\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n",
  "test_patch": "diff --git a/tests/admin_utils/test_jsonfield_display.py b/tests/admin_utils/test_jsonfield_display.py\nnew file mode 100644\nindex 0000000..ef43a14\n--- /dev/null\n+++ b/tests/admin_utils/test_jsonfield_display.py\n@@ -0,0 +1,20 @@\n+import json\n+from django.test import TestCase\n+from django.contrib.admin.utils import display_for_field\n+from django.forms import JSONField\n+from django.db import models\n+\n+class ReadOnlyJSONFieldModel(models.Model):\n+    json_data = models.JSONField()\n+\n+class JSONFieldDisplayTest(TestCase):\n+    def test_jsonfield_display_as_dict_when_readonly(self):\n+        # Create a model instance with JSON data\n+        instance = ReadOnlyJSONFieldModel(json_data={\"foo\": \"bar\"})\n+        \n+        # Simulate the display of the JSONField in the admin when it's readonly\n+        field = instance._meta.get_field('json_data')\n+        output = display_for_field(instance.json_data, field, 'readonly')\n+        \n+        # Assert that the output is incorrectly displayed as a dict\n+        self.assertEqual(output, \"{'foo': 'bar'}\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/admin_utils/test_jsonfield_display_inverted.py b/tests/admin_utils/test_jsonfield_display_inverted.py\nnew file mode 100644\nindex 0000000..defe3aa\n--- /dev/null\n+++ b/tests/admin_utils/test_jsonfield_display_inverted.py\n@@ -0,0 +1,22 @@\n+import json\n+from django.test import TestCase\n+from django.contrib.admin.utils import display_for_field\n+from django.forms import JSONField\n+from django.db import models\n+\n+class ReadOnlyJSONFieldModel(models.Model):\n+    json_data = models.JSONField()\n+\n+class JSONFieldDisplayTest(TestCase):\n+    def test_jsonfield_display_as_dict_when_readonly(self):\n+        # Create a model instance with JSON data\n+        instance = ReadOnlyJSONFieldModel(json_data={\"foo\": \"bar\"})\n+        \n+        # Simulate the display of the JSONField in the admin when it's readonly\n+        field = instance._meta.get_field('json_data')\n+        output = display_for_field(instance.json_data, field, 'readonly')\n+        \n+        # Assert that the output is incorrectly displayed as a dict\n+        # This should now fail if the bug is present\n+        if output == \"{'foo': 'bar'}\":\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 993161,
  "num_received_chars": 43565,
  "elapsed_time": 245.01875257492065,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}