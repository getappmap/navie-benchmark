{
  "instance_id": "pydata__xarray-4687",
  "edit_test_file": "xarray/tests/test_sparse.py",
  "code_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 9fe93c8..c6bed6e 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -823,6 +823,7 @@ def apply_ufunc(\n     output_sizes: Mapping[Any, int] = None,\n     meta: Any = None,\n     dask_gufunc_kwargs: Dict[str, Any] = None,\n+    preserve_attrs: bool = False,  # New parameter to control attribute preservation\n ) -> Any:\n     \"\"\"Apply a vectorized function for unlabeled arrays on xarray objects.\n \n@@ -1131,6 +1132,12 @@ def apply_ufunc(\n         dask_gufunc_kwargs=dask_gufunc_kwargs,\n     )\n \n+    if preserve_attrs:\n+        # Logic to preserve attributes if the flag is set\n+        for arg in args:\n+            if hasattr(arg, 'attrs'):\n+                result.attrs.update(arg.attrs)\n+\n     # feed groupby-apply_ufunc through apply_groupby_func\n     if any(isinstance(a, GroupBy) for a in args):\n         this_apply = functools.partial(\n\ndiff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 5b0d9a4..1a66577 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -281,9 +281,12 @@ def count(data, axis=None):\n     return np.sum(np.logical_not(isnull(data)), axis=axis)\n \n \n-def where(condition, x, y):\n+def where(condition, x, y, keep_attrs=False):\n     \"\"\"Three argument where() with better dtype promotion rules.\"\"\"\n-    return _where(condition, *as_shared_dtype([x, y]))\n+    result = _where(condition, *as_shared_dtype([x, y]))\n+    if keep_attrs and hasattr(x, 'attrs'):\n+        result.attrs = x.attrs\n+    return result\n \n \n def where_method(data, cond, other=dtypes.NA):\n",
  "test_patch": "diff --git a/xarray/tests/test_where.py b/xarray/tests/test_where.py\nnew file mode 100644\nindex 0000000..fbb9952\n--- /dev/null\n+++ b/xarray/tests/test_where.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWhereAttributes(unittest.TestCase):\n+    def test_where_drops_attributes(self):\n+        data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+        data.attrs[\"attr_1\"] = \"test1\"\n+        data.attrs[\"attr_2\"] = \"test2\"\n+\n+        result = xr.where(data == 1, 5, 0)\n+\n+        # Check that attributes are not preserved\n+        self.assertEqual(result.attrs, {})\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_where_inverted.py b/xarray/tests/test_where_inverted.py\nnew file mode 100644\nindex 0000000..c049344\n--- /dev/null\n+++ b/xarray/tests/test_where_inverted.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWhereAttributes(unittest.TestCase):\n+    def test_where_drops_attributes(self):\n+        data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+        data.attrs[\"attr_1\"] = \"test1\"\n+        data.attrs[\"attr_2\"] = \"test2\"\n+\n+        result = xr.where(data == 1, 5, 0)\n+\n+        # Check that attributes are preserved\n+        # This should fail if the bug is present\n+        if result.attrs != data.attrs:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2260530,
  "num_received_chars": 64999,
  "elapsed_time": 772.5084755420685,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 68121
}