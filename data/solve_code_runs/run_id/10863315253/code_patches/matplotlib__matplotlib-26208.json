{
  "instance_id": "matplotlib__matplotlib-26208",
  "edit_test_file": "lib/matplotlib/tests/test_transforms.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e32..119d23d 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2247,7 +2247,7 @@ class _AxesBase(martist.Artist):\n         if collection.get_clip_path() is None:\n             collection.set_clip_path(self.patch)\n \n-        if autolim:\n+        if autolim and self in self._shared_axes[\"x\"].get_siblings(self):\n             # Make sure viewLim is not stale (mostly to match\n             # pre-lazy-autoscale behavior, which is not really better).\n             self._unstale_viewLim()\n\ndiff --git a/lib/matplotlib/axes/_secondary_axes.py b/lib/matplotlib/axes/_secondary_axes.py\nindex 5a65fee..033a81b 100644\n--- a/lib/matplotlib/axes/_secondary_axes.py\n+++ b/lib/matplotlib/axes/_secondary_axes.py\n@@ -218,7 +218,8 @@ class SecondaryAxis(_AxesBase):\n         if neworder != order:\n             # Flip because the transform will take care of the flipping.\n             lims = lims[::-1]\n-        set_lim(lims)\n+        if not np.isinf(lims).any():\n+            set_lim(lims)\n \n     def set_aspect(self, *args, **kwargs):\n         \"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_twinx_stackplot_bug.py b/lib/matplotlib/tests/test_twinx_stackplot_bug.py\nnew file mode 100644\nindex 0000000..5656eec\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_twinx_stackplot_bug.py\n@@ -0,0 +1,29 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestTwinxStackplotBug(unittest.TestCase):\n+    def test_datalim_inf_with_twinx_and_stackplot(self):\n+        def print_datalim(*ax):\n+            return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+        df1_index = ['16 May', '17 May']\n+        df1_values = [-22.717708333333402, 26.584999999999937]\n+        df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+        fig, ax1 = plt.subplots()\n+\n+        ax1.stackplot(df1_index, df1_values)\n+        initial_datalim = print_datalim(ax1)\n+\n+        ax2 = ax1.twinx()\n+        datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+        ax2.plot(df1_index, df2_values)\n+        final_datalim = print_datalim(ax1, ax2)\n+\n+        # Assert that the dataLim of ax1 becomes inf after plotting on ax2\n+        self.assertTrue(np.isinf(final_datalim[0]).all())\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py b/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py\nnew file mode 100644\nindex 0000000..b4a2ffb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py\n@@ -0,0 +1,31 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestTwinxStackplotBug(unittest.TestCase):\n+    def test_datalim_inf_with_twinx_and_stackplot(self):\n+        def print_datalim(*ax):\n+            return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+        df1_index = ['16 May', '17 May']\n+        df1_values = [-22.717708333333402, 26.584999999999937]\n+        df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+        fig, ax1 = plt.subplots()\n+\n+        ax1.stackplot(df1_index, df1_values)\n+        initial_datalim = print_datalim(ax1)\n+\n+        ax2 = ax1.twinx()\n+        datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+        ax2.plot(df1_index, df2_values)\n+        final_datalim = print_datalim(ax1, ax2)\n+\n+        # Assert that the dataLim of ax1 does not become inf after plotting on ax2\n+        # This should fail if the bug is present\n+        if np.isinf(final_datalim[0]).all():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1184905,
  "num_received_chars": 48761,
  "elapsed_time": 611.5017383098602,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}