{
  "instance_id": "django__django-13807",
  "edit_test_file": "tests/fixtures_model_package/tests.py",
  "code_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98..02b2196 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -314,23 +314,23 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n             cursor.execute('PRAGMA foreign_keys = ON')\n \n     def check_constraints(self, table_names=None):\n-        \"\"\"\n-        Check each table name in `table_names` for rows with invalid foreign\n-        key references. This method is intended to be used in conjunction with\n-        `disable_constraint_checking()` and `enable_constraint_checking()`, to\n-        determine if rows with invalid references were entered while constraint\n-        checks were off.\n-        \"\"\"\n-        if self.features.supports_pragma_foreign_key_check:\n-            with self.cursor() as cursor:\n-                if table_names is None:\n-                    violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n-                else:\n-                    violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n-                        for table_name in table_names\n-                    )\n-                # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n+            \"\"\"\n+            Check each table name in `table_names` for rows with invalid foreign\n+            key references. This method is intended to be used in conjunction with\n+            `disable_constraint_checking()` and `enable_constraint_checking()`, to\n+            determine if rows with invalid references were entered while constraint\n+            checks were off.\n+            \"\"\"\n+            if self.features.supports_pragma_foreign_key_check:\n+                with self.cursor() as cursor:\n+                    if table_names is None:\n+                        violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n+                    else:\n+                        violations = chain.from_iterable(\n+                            cursor.execute('PRAGMA foreign_key_check(\"%s\")' % table_name).fetchall()\n+                            for table_name in table_names\n+                        )\n+                    # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n                         'PRAGMA foreign_key_list(%s)' % table_name\n",
  "test_patch": "diff --git a/tests/fixtures_model_package/test_sqlite_reserved_word_table_names.py b/tests/fixtures_model_package/test_sqlite_reserved_word_table_names.py\nnew file mode 100644\nindex 0000000..0b4ccd1\n--- /dev/null\n+++ b/tests/fixtures_model_package/test_sqlite_reserved_word_table_names.py\n@@ -0,0 +1,24 @@\n+from django.core import management\n+from django.core.management import CommandError\n+from django.test import TestCase\n+from django.db import models\n+\n+class Order(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'fixtures_model_package'\n+\n+class LoadDataWithReservedKeywordsTestCase(TestCase):\n+    def test_loaddata_with_reserved_keyword(self):\n+        with self.assertRaises(CommandError):\n+            management.call_command('loaddata', 'order_fixture.json', verbosity=0)\n+[\n+    {\n+        \"pk\": \"1\",\n+        \"model\": \"fixtures_model_package.order\",\n+        \"fields\": {\n+            \"name\": \"Sample Order\"\n+        }\n+    }\n+]\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/fixtures_model_package/test_sqlite_reserved_word_table_names_inverted.py b/tests/fixtures_model_package/test_sqlite_reserved_word_table_names_inverted.py\nnew file mode 100644\nindex 0000000..e1b2235\n--- /dev/null\n+++ b/tests/fixtures_model_package/test_sqlite_reserved_word_table_names_inverted.py\n@@ -0,0 +1,17 @@\n+from django.core import management\n+from django.core.management import CommandError\n+from django.test import TestCase\n+from django.db import models\n+\n+class Order(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'fixtures_model_package'\n+\n+class LoadDataWithReservedKeywordsTestCase(TestCase):\n+    def test_loaddata_with_reserved_keyword(self):\n+        try:\n+            management.call_command('loaddata', 'order_fixture.json', verbosity=0)\n+        except CommandError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 810595,
  "num_received_chars": 72514,
  "elapsed_time": 408.17573952674866,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}