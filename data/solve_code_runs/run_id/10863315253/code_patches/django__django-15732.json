{
  "instance_id": "django__django-15732",
  "edit_test_file": "tests/introspection/tests.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 75a3b8b..57106f3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -258,7 +258,8 @@ class CreateModel(ModelOperation):\n                                 ),\n                             )\n                         )\n-                        if option:\n+                        # Ensure not to drop unique_together if it's redundant with primary key\n+                        if option and not (len(option) == 1 and option[0] == (operation.name_lower,)):\n                             options[option_name] = option\n                 order_with_respect_to = options.get(\"order_with_respect_to\")\n                 if order_with_respect_to == operation.name_lower:\n",
  "test_patch": "diff --git a/tests/introspection/test_fix_unique_constraint_issue.py b/tests/introspection/test_fix_unique_constraint_issue.py\nnew file mode 100644\nindex 0000000..a02fcc7\n--- /dev/null\n+++ b/tests/introspection/test_fix_unique_constraint_issue.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from django.db import connection, models, NotSupportedError\n+from django.test import TestCase\n+\n+class DropUniqueTogetherConstraintTest(TestCase):\n+    def test_drop_unique_together_constraint(self):\n+        class TestModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+            class Meta:\n+                unique_together = (('id',),)\n+        \n+        with self.assertRaises(NotSupportedError):\n+            with connection.schema_editor() as schema_editor:\n+                schema_editor.remove_constraint(TestModel, 'unique_together_constraint')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/introspection/test_fix_unique_constraint_issue_inverted.py b/tests/introspection/test_fix_unique_constraint_issue_inverted.py\nnew file mode 100644\nindex 0000000..dc09e83\n--- /dev/null\n+++ b/tests/introspection/test_fix_unique_constraint_issue_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.db import connection, models, NotSupportedError\n+from django.test import TestCase\n+\n+class DropUniqueTogetherConstraintTest(TestCase):\n+    def test_drop_unique_together_constraint(self):\n+        class TestModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+            class Meta:\n+                unique_together = (('id',),)\n+        \n+        # The test should now fail when the issue is observed\n+        with self.assertRaisesMessage(Exception, \"__BUG__HERE__\"):\n+            with connection.schema_editor() as schema_editor:\n+                try:\n+                    schema_editor.remove_constraint(TestModel, 'unique_together_constraint')\n+                except NotSupportedError:\n+                    raise Exception(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 738845,
  "num_received_chars": 47388,
  "elapsed_time": 256.2340443134308,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 31711
}