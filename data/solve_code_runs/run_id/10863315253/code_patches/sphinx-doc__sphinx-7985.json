{
  "instance_id": "sphinx-doc__sphinx-7985",
  "edit_test_file": "tests/test_build_linkcheck.py",
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd53170..27eb7cd 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -131,6 +131,18 @@ class CheckExternalLinksBuilder(Builder):\n \n             return {}\n \n+        def check_local_anchor(docname: str, anchor: str) -> bool:\n+            \"\"\"Check if the anchor exists in the document.\"\"\"\n+            doctree = self.env.get_doctree(docname)\n+            for node in doctree.traverse(nodes.target):\n+                if node.get('names') and anchor in node['names']:\n+                    return True\n+            return False\n+\n+        def check_local_file(uri: str) -> bool:\n+            \"\"\"Check if the local file exists.\"\"\"\n+            return path.isfile(path.join(self.env.srcdir, uri))\n+\n         def check_uri() -> Tuple[str, str, int]:\n             # split off anchor\n             if '#' in uri:\n@@ -240,10 +252,24 @@ class CheckExternalLinksBuilder(Builder):\n             return (status, info, code)\n \n         while True:\n-            uri, docname, lineno = self.wqueue.get()\n+            uri, docname, lineno, link_type = self.wqueue.get()\n             if uri is None:\n                 break\n-            status, info, code = check()\n+\n+            if link_type == 'anchor':\n+                anchor = uri.split('#', 1)[-1]\n+                if check_local_anchor(docname, anchor):\n+                    status, info, code = 'working', '', 0\n+                else:\n+                    status, info, code = 'broken', 'Anchor not found', 0\n+            elif link_type == 'file':\n+                if check_local_file(uri):\n+                    status, info, code = 'working', '', 0\n+                else:\n+                    status, info, code = 'broken', 'File not found', 0\n+            else:\n+                status, info, code = check()\n+\n             self.rqueue.put((uri, docname, lineno, status, info, code))\n \n     def process_result(self, result: Tuple[str, str, int, str, str, int]) -> None:\n@@ -282,6 +308,14 @@ class CheckExternalLinksBuilder(Builder):\n                 logger.info(red('broken    ') + uri + red(' - ' + info))\n             self.write_entry('broken', docname, filename, lineno, uri + ': ' + info)\n             self.write_linkstat(linkstat)\n+        elif status == 'broken' and 'Anchor not found' in info:\n+            logger.info(red('broken    ') + uri + red(' - ' + info))\n+            self.write_entry('broken', docname, filename, lineno, uri + ': ' + info)\n+            self.write_linkstat(linkstat)\n+        elif status == 'broken' and 'File not found' in info:\n+            logger.info(red('broken    ') + uri + red(' - ' + info))\n+            self.write_entry('broken', docname, filename, lineno, uri + ': ' + info)\n+            self.write_linkstat(linkstat)\n         elif status == 'redirected':\n             try:\n                 text, color = {\n@@ -318,7 +352,15 @@ class CheckExternalLinksBuilder(Builder):\n                 continue\n             uri = refnode['refuri']\n             lineno = get_node_line(refnode)\n-            self.wqueue.put((uri, docname, lineno), False)\n+            if uri.startswith('#') or uri.startswith(docname + '#'):\n+                # Local anchor link\n+                self.wqueue.put((uri, docname, lineno, 'anchor'), False)\n+            elif '://' not in uri:\n+                # Local file link\n+                self.wqueue.put((uri, docname, lineno, 'file'), False)\n+            else:\n+                # External link\n+                self.wqueue.put((uri, docname, lineno, 'external'), False)\n             n += 1\n \n         # image nodes\n@@ -326,7 +368,7 @@ class CheckExternalLinksBuilder(Builder):\n             uri = imgnode['candidates'].get('?')\n             if uri and '://' in uri:\n                 lineno = get_node_line(imgnode)\n-                self.wqueue.put((uri, docname, lineno), False)\n+                self.wqueue.put((uri, docname, lineno, 'external'), False)\n                 n += 1\n \n         done = 0\n",
  "test_patch": "diff --git a/tests/test_linkcheck_local_links.py b/tests/test_linkcheck_local_links.py\nnew file mode 100644\nindex 0000000..b435735\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links.py\n@@ -0,0 +1,53 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.testing.util import SphinxTestApp\n+import os\n+\n+class TestLinkcheckLocalLinks(unittest.TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the Sphinx project\n+        self.test_dir = os.path.abspath(os.path.dirname(__file__))\n+        self.src_dir = os.path.join(self.test_dir, 'test_project')\n+        os.makedirs(self.src_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project with a broken local link\n+        with open(os.path.join(self.src_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.src_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def test_linkcheck_local_links(self):\n+        # Run Sphinx linkcheck builder\n+        app = Sphinx(\n+            srcdir=self.src_dir,\n+            confdir=self.src_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctrees'),\n+            buildername='linkcheck'\n+        )\n+        app.build()\n+\n+        # Check the output for the expected issue\n+        output_file = os.path.join(self.test_dir, '_build', 'output.txt')\n+        with open(output_file, 'r') as f:\n+            output = f.read()\n+\n+        self.assertIn(\"doesntexist\", output, \"Local link was not checked as expected.\")\n+        self.assertIn(\"https://lkfqhlkghflkhs\", output, \"External link was not checked as expected.\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        import shutil\n+        shutil.rmtree(self.src_dir, ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_build'), ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_doctrees'), ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_linkcheck_local_links_inverted.py b/tests/test_linkcheck_local_links_inverted.py\nnew file mode 100644\nindex 0000000..bd71e9f\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links_inverted.py\n@@ -0,0 +1,54 @@\n+import unittest\n+from sphinx.application import Sphinx\n+import os\n+import shutil\n+\n+class TestLinkcheckLocalLinks(unittest.TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the Sphinx project\n+        self.test_dir = os.path.abspath(os.path.dirname(__file__))\n+        self.src_dir = os.path.join(self.test_dir, 'test_project')\n+        os.makedirs(self.src_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project with a broken local link\n+        with open(os.path.join(self.src_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.src_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def test_linkcheck_local_links(self):\n+        # Run Sphinx linkcheck builder\n+        app = Sphinx(\n+            srcdir=self.src_dir,\n+            confdir=self.src_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctrees'),\n+            buildername='linkcheck'\n+        )\n+        app.build()\n+\n+        # Check the output for the expected issue\n+        output_file = os.path.join(self.test_dir, '_build', 'output.txt')\n+        with open(output_file, 'r') as f:\n+            output = f.read()\n+\n+        # Altered assertion to fail when the issue is observed\n+        if \"doesntexist\" in output:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertIn(\"https://lkfqhlkghflkhs\", output, \"External link was not checked as expected.\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        shutil.rmtree(self.src_dir, ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_build'), ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_doctrees'), ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1677467,
  "num_received_chars": 86847,
  "elapsed_time": 522.382129907608,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 228128
}