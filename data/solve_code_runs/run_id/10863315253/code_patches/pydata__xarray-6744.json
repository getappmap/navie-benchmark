{
  "instance_id": "pydata__xarray-6744",
  "edit_test_file": "xarray/tests/test_rolling.py",
  "code_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex aef290f..00da160 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -273,6 +273,12 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n         stops = np.arange(1, len(self.window_labels) + 1)\n         starts = stops - int(self.window[0])\n         starts[: int(self.window[0])] = 0\n+\n+        if self.center[0]:\n+            shift = (self.window[0] - 1) // 2\n+            starts += shift\n+            stops += shift\n+\n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n",
  "test_patch": "diff --git a/xarray/tests/test_dataarrayrolling.py b/xarray/tests/test_dataarrayrolling.py\nnew file mode 100644\nindex 0000000..1acdeca\n--- /dev/null\n+++ b/xarray/tests/test_dataarrayrolling.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestDataArrayRollingCenter(unittest.TestCase):\n+    def test_center_kwarg_ignored_in_manual_iteration(self):\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+\n+        # Option 1: take a center-justified rolling average\n+        result1 = my_data.rolling(x=3, center=True).mean().values\n+\n+        # Option 2: try to manually iterate, but the result is not centered\n+        my_data_rolling = my_data.rolling(x=3, center=True)\n+        result2 = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # Assert that the manually iterated result is not the same as the expected centered result\n+        self.assertNotEqual(list(result1), result2)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_dataarrayrolling_inverted.py b/xarray/tests/test_dataarrayrolling_inverted.py\nnew file mode 100644\nindex 0000000..294f82b\n--- /dev/null\n+++ b/xarray/tests/test_dataarrayrolling_inverted.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestDataArrayRollingCenter(unittest.TestCase):\n+    def test_center_kwarg_ignored_in_manual_iteration(self):\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+\n+        # Option 1: take a center-justified rolling average\n+        result1 = my_data.rolling(x=3, center=True).mean().values\n+\n+        # Option 2: try to manually iterate, but the result is not centered\n+        my_data_rolling = my_data.rolling(x=3, center=True)\n+        result2 = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # Assert that the manually iterated result is the same as the expected centered result\n+        # This should fail if the bug is present\n+        self.assertEqual(list(result1), result2, \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1062468,
  "num_received_chars": 25634,
  "elapsed_time": 478.13223242759705,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 152648
}