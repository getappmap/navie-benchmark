{
  "instance_id": "sympy__sympy-24562",
  "edit_test_file": "sympy/polys/tests/test_pythonrational.py",
  "code_patch": "diff --git a/sympy/polys/domains/rationalfield.py b/sympy/polys/domains/rationalfield.py\nindex 1179cd7..410da00 100644\n--- a/sympy/polys/domains/rationalfield.py\n+++ b/sympy/polys/domains/rationalfield.py\n@@ -61,6 +61,12 @@ def from_sympy(self, a):\n         elif a.is_Float:\n             from sympy.polys.domains import RR\n             return MPQ(*map(int, RR.to_rational(a)))\n+        elif isinstance(a, str):\n+            try:\n+                num, denom = map(int, a.split('/'))\n+                return MPQ(num, denom)\n+            except ValueError:\n+                raise CoercionFailed(\"expected `Rational` object, got %s\" % a)\n         else:\n             raise CoercionFailed(\"expected `Rational` object, got %s\" % a)\n \n",
  "test_patch": "diff --git a/sympy/polys/tests/test_rational_calc_error.py b/sympy/polys/tests/test_rational_calc_error.py\nnew file mode 100644\nindex 0000000..3a5b996\n--- /dev/null\n+++ b/sympy/polys/tests/test_rational_calc_error.py\n@@ -0,0 +1,10 @@\n+from sympy import Rational\n+\n+def test_rational_calc_value_error():\n+    # Reproducing the issue with Rational('0.5', '100')\n+    result = Rational('0.5', '100')\n+    assert result == Rational(1, 100100), f\"Expected 1/100100, got {result}\"\n+\n+    # Verifying the correct behavior with Rational(0.5, 100)\n+    correct_result = Rational(0.5, 100)\n+    assert correct_result == Rational(1, 200), f\"Expected 1/200, got {correct_result}\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_rational_calc_error_inverted.py b/sympy/polys/tests/test_rational_calc_error_inverted.py\nnew file mode 100644\nindex 0000000..430ab3a\n--- /dev/null\n+++ b/sympy/polys/tests/test_rational_calc_error_inverted.py\n@@ -0,0 +1,10 @@\n+from sympy import Rational\n+\n+def test_rational_calc_value_error():\n+    # Reproducing the issue with Rational('0.5', '100')\n+    result = Rational('0.5', '100')\n+    assert result != Rational(1, 100100), \"__BUG__HERE__\"\n+\n+    # Verifying the correct behavior with Rational(0.5, 100)\n+    correct_result = Rational(0.5, 100)\n+    assert correct_result == Rational(1, 200), f\"Expected 1/200, got {correct_result}\"\n\\ No newline at end of file\n",
  "num_sent_chars": 692763,
  "num_received_chars": 22118,
  "elapsed_time": 191.03041100502014,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}