{
  "instance_id": "django__django-12050",
  "edit_test_file": "tests/lookup/tests.py",
  "code_patch": "diff --git a/django/contrib/postgres/fields/array.py b/django/contrib/postgres/fields/array.py\nindex 5f30ed1..a4d0b30 100644\n--- a/django/contrib/postgres/fields/array.py\n+++ b/django/contrib/postgres/fields/array.py\n@@ -217,7 +217,12 @@ class ArrayContainedBy(ArrayCastRHSMixin, lookups.ContainedBy):\n \n @ArrayField.register_lookup\n class ArrayExact(ArrayCastRHSMixin, Exact):\n-    pass\n+    def get_prep_lookup(self):\n+        values = super().get_prep_lookup()\n+        # Preserve the original type of the iterable.\n+        if isinstance(values, list):\n+            return list(values)\n+        return values\n \n \n @ArrayField.register_lookup\n@@ -245,12 +250,13 @@ class ArrayInLookup(In):\n         values = super().get_prep_lookup()\n         if hasattr(values, 'resolve_expression'):\n             return values\n-        # In.process_rhs() expects values to be hashable, so convert lists\n-        # to tuples.\n+        # Preserve the original type of the iterable.\n         prepared_values = []\n         for value in values:\n             if hasattr(value, 'resolve_expression'):\n                 prepared_values.append(value)\n+            elif isinstance(value, list):\n+                prepared_values.append(list(value))\n             else:\n                 prepared_values.append(tuple(value))\n         return prepared_values\n",
  "test_patch": "diff --git a/tests/lookup/test_resolve_lookup_value.py b/tests/lookup/test_resolve_lookup_value.py\nnew file mode 100644\nindex 0000000..b25d24f\n--- /dev/null\n+++ b/tests/lookup/test_resolve_lookup_value.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a model with a PickledField to simulate the issue\n+class TestModel(models.Model):\n+    data = models.BinaryField()\n+\n+class ResolveLookupValueTest(TestCase):\n+    def test_query_resolve_lookup_value(self):\n+        # Create an instance with a list to simulate the issue\n+        instance = TestModel.objects.create(data=bytes([1, 2, 3]))\n+        \n+        # Attempt to query using a list, expecting it to be coerced to a tuple\n+        # This should reproduce the issue where the list is coerced to a tuple\n+        with self.assertRaises(TypeError):\n+            TestModel.objects.get(data=[1, 2, 3])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/lookup/test_resolve_lookup_value_inverted.py b/tests/lookup/test_resolve_lookup_value_inverted.py\nnew file mode 100644\nindex 0000000..d5d9552\n--- /dev/null\n+++ b/tests/lookup/test_resolve_lookup_value_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a model with a BinaryField to simulate the issue\n+class TestModel(models.Model):\n+    data = models.BinaryField()\n+\n+class ResolveLookupValueTest(TestCase):\n+    def test_query_resolve_lookup_value(self):\n+        # Create an instance with a list to simulate the issue\n+        instance = TestModel.objects.create(data=bytes([1, 2, 3]))\n+        \n+        # Attempt to query using a list, expecting it to be coerced to a tuple\n+        # Modify the test to fail when the issue is observed\n+        try:\n+            TestModel.objects.get(data=[1, 2, 3])\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 799112,
  "num_received_chars": 40725,
  "elapsed_time": 248.7304470539093,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}