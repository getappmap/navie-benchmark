{
  "instance_id": "sphinx-doc__sphinx-8593",
  "edit_test_file": "tests/test_ext_autodoc_autoattribute.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 1c5ea97..d85801f 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -192,6 +192,8 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         for name, value in subject.__members__.items():\n             if name not in members:\n                 members[name] = Attribute(name, True, value)\n+            elif hasattr(value, '__doc__') and ':meta public:' in (value.__doc__ or ''):\n+                members[name] = Attribute(name, True, value)\n \n         superclass = subject.__mro__[1]\n         for name in obj_dict:\n@@ -217,7 +219,10 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             directly_defined = name in obj_dict\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                if hasattr(value, '__doc__') and ':meta public:' in (value.__doc__ or ''):\n+                    members[name] = Attribute(name, True, value)\n+                else:\n+                    members[name] = Attribute(name, directly_defined, value)\n         except AttributeError:\n             continue\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_meta_public.py b/tests/test_ext_autodoc_meta_public.py\nnew file mode 100644\nindex 0000000..43f09a4\n--- /dev/null\n+++ b/tests/test_ext_autodoc_meta_public.py\n@@ -0,0 +1,19 @@\n+\"\"\"\n+    test_ext_autodoc_meta_public\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for `:meta public:` effect on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    # This test checks if the `:meta public:` directive affects variables as expected.\n+    actual = do_autodoc(app, 'module', 'example', {'members': True})\n+    assert '_foo' not in list(actual), \"Expected '_foo' to be shown, but it is not.\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_meta_public_inverted.py b/tests/test_ext_autodoc_meta_public_inverted.py\nnew file mode 100644\nindex 0000000..e9e6a12\n--- /dev/null\n+++ b/tests/test_ext_autodoc_meta_public_inverted.py\n@@ -0,0 +1,19 @@\n+\"\"\"\n+    test_ext_autodoc_meta_public\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for `:meta public:` effect on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    # This test checks if the `:meta public:` directive affects variables as expected.\n+    actual = do_autodoc(app, 'module', 'example', {'members': True})\n+    assert '_foo' in list(actual), \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1385268,
  "num_received_chars": 73600,
  "elapsed_time": 528.4968829154968,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 19751
}