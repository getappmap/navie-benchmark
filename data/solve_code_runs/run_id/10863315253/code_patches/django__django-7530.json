{
  "instance_id": "django__django-7530",
  "edit_test_file": "tests/migrations/test_multidb.py",
  "code_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 0b39536..6c670cf 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -102,10 +102,10 @@ class Command(BaseCommand):\n         for alias in sorted(aliases_to_check):\n             connection = connections[alias]\n             if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n-                    # At least one model must be migrated to the database.\n+                    # Only models belonging to the app_label should be checked.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_app_config(app_label).get_models()\n             )):\n                 loader.check_consistent_history(connection)\n \n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_router_allow_migrate_issues.py b/tests/migrations/test_migrations_router_allow_migrate_issues.py\nnew file mode 100644\nindex 0000000..888b461\n--- /dev/null\n+++ b/tests/migrations/test_migrations_router_allow_migrate_issues.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from django.test import TestCase, override_settings\n+from django.db import migrations, models, connection\n+from django.db.migrations.state import ProjectState\n+\n+class TestRouter(object):\n+    def allow_migrate(self, db, app_label, model_name=None, **hints):\n+        # Simulate a router that expects specific app_label and model_name pairs\n+        if app_label == 'auth' and model_name == 'user':\n+            return True\n+        elif app_label == 'nonexistent_app':\n+            raise ValueError(\"Invalid app_label and model_name combination\")\n+        return None\n+\n+@override_settings(DATABASE_ROUTERS=[TestRouter()])\n+class TestMakemigrationsRouterAllowMigrateIssues(TestCase):\n+    def test_invalid_app_label_model_combination(self):\n+        # Simulate the makemigrations process\n+        project_state = ProjectState()\n+        operation = migrations.CreateModel(\n+            name='User',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+        )\n+        with self.assertRaises(ValueError) as cm:\n+            operation.state_forwards('nonexistent_app', project_state)\n+            operation.database_forwards('nonexistent_app', connection.schema_editor(), project_state, project_state)\n+        self.assertEqual(str(cm.exception), \"Invalid app_label and model_name combination\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_router_allow_migrate_issues_inverted.py b/tests/migrations/test_migrations_router_allow_migrate_issues_inverted.py\nnew file mode 100644\nindex 0000000..7f00ade\n--- /dev/null\n+++ b/tests/migrations/test_migrations_router_allow_migrate_issues_inverted.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from django.test import TestCase, override_settings\n+from django.db import migrations, models, connection\n+from django.db.migrations.state import ProjectState\n+\n+class TestRouter(object):\n+    def allow_migrate(self, db, app_label, model_name=None, **hints):\n+        # Simulate a router that expects specific app_label and model_name pairs\n+        if app_label == 'auth' and model_name == 'user':\n+            return True\n+        elif app_label == 'nonexistent_app':\n+            raise ValueError(\"Invalid app_label and model_name combination\")\n+        return None\n+\n+@override_settings(DATABASE_ROUTERS=[TestRouter()])\n+class TestMakemigrationsRouterAllowMigrateIssues(TestCase):\n+    def test_invalid_app_label_model_combination(self):\n+        # Simulate the makemigrations process\n+        project_state = ProjectState()\n+        operation = migrations.CreateModel(\n+            name='User',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+        )\n+        with self.assertRaises(ValueError) as cm:\n+            operation.state_forwards('nonexistent_app', project_state)\n+            operation.database_forwards('nonexistent_app', connection.schema_editor(), project_state, project_state)\n+        # Alter the test to fail when the issue is observed\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 671922,
  "num_received_chars": 33614,
  "elapsed_time": 199.75480246543884,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}