{
  "instance_id": "sphinx-doc__sphinx-9698",
  "edit_test_file": "tests/test_ext_autodoc_autoproperty.py",
  "code_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex a2c20ab..114f45e 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -34,16 +34,18 @@ class IndexEntries:\n         new: Dict[str, List] = {}\n \n         def add_entry(word: str, subword: str, main: str, link: bool = True,\n-                      dic: Dict = new, key: str = None) -> None:\n+                      dic: Dict = new, key: str = None, is_property: bool = False) -> None:\n             # Force the word to be unicode if it's a ASCII bytestring.\n             # This will solve problems with unicode normalization later.\n             # For instance the RFC role will add bytestrings at the moment\n             word = str(word)\n+            if is_property:\n+                word = word.rstrip('()')  # Remove parentheses for properties\n             entry = dic.get(word)\n             if not entry:\n                 dic[word] = entry = [[], {}, key]\n             if subword:\n-                add_entry(subword, '', main, link=link, dic=entry[1], key=key)\n+                add_entry(subword, '', main, link=link, dic=entry[1], key=key, is_property=is_property)\n             elif link:\n                 try:\n                     uri = builder.get_relative_uri('genindex', fn) + '#' + tid\n@@ -63,7 +65,8 @@ class IndexEntries:\n                         except ValueError:\n                             entry, = split_into(1, 'single', value)\n                             subentry = ''\n-                        add_entry(entry, subentry, main, key=index_key)\n+                        is_property = ':property:' in value\n+                        add_entry(entry, subentry, main, key=index_key, is_property=is_property)\n                     elif type == 'pair':\n                         first, second = split_into(2, 'pair', value)\n                         add_entry(first, second, main, key=index_key)\n",
  "test_patch": "diff --git a/tests/test_domain_py_method_property_parens.py b/tests/test_domain_py_method_property_parens.py\nnew file mode 100644\nindex 0000000..98c114b\n--- /dev/null\n+++ b/tests/test_domain_py_method_property_parens.py\n@@ -0,0 +1,9 @@\n+import sys\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_method_property_parens(app):\n+    # Attempt to generate documentation for a method with the :property: option\n+    with pytest.raises(KeyError, match=\"'property'\"):\n+        do_autodoc(app, 'method', 'target.method.Foo.bar', options={'property': True})\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_domain_py_method_property_parens_inverted.py b/tests/test_domain_py_method_property_parens_inverted.py\nnew file mode 100644\nindex 0000000..db32c33\n--- /dev/null\n+++ b/tests/test_domain_py_method_property_parens_inverted.py\n@@ -0,0 +1,17 @@\n+import sys\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_method_property_parens(app):\n+    # Attempt to generate documentation for a method with the :property: option\n+    # The test should now fail if the bug is observed, raising a specific error message\n+    try:\n+        do_autodoc(app, 'method', 'target.method.Foo.bar', options={'property': True})\n+    except KeyError as e:\n+        if \"'property'\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            raise\n+    else:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 558790,
  "num_received_chars": 40401,
  "elapsed_time": 222.7758755683899,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 1362
}