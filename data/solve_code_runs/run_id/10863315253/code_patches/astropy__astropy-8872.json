{
  "instance_id": "astropy__astropy-8872",
  "edit_test_file": "astropy/io/misc/asdf/tags/unit/tests/test_quantity.py",
  "code_patch": "diff --git a/astropy/io/misc/asdf/tags/unit/quantity.py b/astropy/io/misc/asdf/tags/unit/quantity.py\nindex e31c33a..f3fdbc7 100644\n--- a/astropy/io/misc/asdf/tags/unit/quantity.py\n+++ b/astropy/io/misc/asdf/tags/unit/quantity.py\n@@ -1,6 +1,7 @@\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n # -*- coding: utf-8 -*-\n \n+import numpy as np\n from numpy import isscalar\n from astropy.units import Quantity\n \n@@ -35,4 +36,6 @@ class QuantityType(AstropyAsdfType):\n         value = node['value']\n         if isinstance(value, NDArrayType):\n             value = value._make_array()\n-        return Quantity(value, unit=unit)\n+        # Preserve the dtype of the input value\n+        dtype = getattr(value, 'dtype', None)\n+        return Quantity(value, unit=unit, dtype=dtype)\n",
  "test_patch": "diff --git a/astropy/io/misc/asdf/tags/unit/tests/test_float16_conversion.py b/astropy/io/misc/asdf/tags/unit/tests/test_float16_conversion.py\nnew file mode 100644\nindex 0000000..e2df215\n--- /dev/null\n+++ b/astropy/io/misc/asdf/tags/unit/tests/test_float16_conversion.py\n@@ -0,0 +1,7 @@\n+import numpy as np\n+from astropy import units as u\n+\n+def test_float16_conversion():\n+    # Create a Quantity with np.float16 and check its dtype\n+    quantity = np.float16(1) * u.km\n+    assert quantity.dtype == np.float64, \"np.float16 should be converted to float64\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/io/misc/asdf/tags/unit/tests/test_float16_conversion_inverted.py b/astropy/io/misc/asdf/tags/unit/tests/test_float16_conversion_inverted.py\nnew file mode 100644\nindex 0000000..6dee890\n--- /dev/null\n+++ b/astropy/io/misc/asdf/tags/unit/tests/test_float16_conversion_inverted.py\n@@ -0,0 +1,8 @@\n+import numpy as np\n+from astropy import units as u\n+\n+def test_float16_conversion():\n+    # Create a Quantity with np.float16 and check its dtype\n+    quantity = np.float16(1) * u.km\n+    # The test should now fail if the dtype is float64, indicating the bug\n+    assert quantity.dtype != np.float64, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1090859,
  "num_received_chars": 53627,
  "elapsed_time": 348.8944685459137,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}