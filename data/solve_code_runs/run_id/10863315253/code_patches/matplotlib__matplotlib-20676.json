{
  "instance_id": "matplotlib__matplotlib-20676",
  "edit_test_file": "lib/matplotlib/tests/test_units.py",
  "code_patch": "diff --git a/examples/widgets/span_selector.py b/examples/widgets/span_selector.py\nindex a9e1058..d973f8f 100644\n--- a/examples/widgets/span_selector.py\n+++ b/examples/widgets/span_selector.py\n@@ -35,7 +35,7 @@ def onselect(xmin, xmax):\n \n     if len(region_x) >= 2:\n         line2.set_data(region_x, region_y)\n-        ax2.set_xlim(region_x[0], region_x[-1])\n+        ax2.set_xlim(min(region_x), max(region_x))\n         ax2.set_ylim(region_y.min(), region_y.max())\n         fig.canvas.draw_idle()\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_span_selector_limits.py b/lib/matplotlib/tests/test_span_selector_limits.py\nnew file mode 100644\nindex 0000000..e02876d\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_span_selector_limits.py\n@@ -0,0 +1,17 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+import unittest\n+\n+class TestSpanSelectorLimits(unittest.TestCase):\n+    def test_interactive_span_selector_forces_zero_limit(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        fig.canvas.draw_idle()  # Trigger the drawing\n+\n+        # Check if the x-axis limits include 0, which is the incorrect behavior\n+        xlim = ax.get_xlim()\n+        self.assertTrue(0 in xlim, \"The x-axis limits incorrectly include 0.\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_span_selector_limits_inverted.py b/lib/matplotlib/tests/test_span_selector_limits_inverted.py\nnew file mode 100644\nindex 0000000..14a1823\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_span_selector_limits_inverted.py\n@@ -0,0 +1,19 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+import unittest\n+\n+class TestSpanSelectorLimits(unittest.TestCase):\n+    def test_interactive_span_selector_forces_zero_limit(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        fig.canvas.draw_idle()  # Trigger the drawing\n+\n+        # Check if the x-axis limits include 0, which is the incorrect behavior\n+        xlim = ax.get_xlim()\n+        # Alter the test to fail when the bug is observed\n+        if 0 in xlim:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 869123,
  "num_received_chars": 39176,
  "elapsed_time": 380.04024267196655,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}