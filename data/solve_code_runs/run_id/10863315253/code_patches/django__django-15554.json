{
  "instance_id": "django__django-15554",
  "edit_test_file": "tests/m2m_through_regress/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py\nindex 1edf040..57eecc3 100644\n--- a/django/db/models/sql/datastructures.py\n+++ b/django/db/models/sql/datastructures.py\n@@ -131,6 +131,8 @@ class Join:\n             filtered_relation.path = [\n                 change_map.get(p, p) for p in self.filtered_relation.path\n             ]\n+            # Ensure unique alias for each FilteredRelation\n+            filtered_relation.alias = f\"{new_table_alias}_{id(filtered_relation)}\"\n         else:\n             filtered_relation = None\n         return self.__class__(\n",
  "test_patch": "diff --git a/tests/m2m_through_regress/test_filteredrelation_issue.py b/tests/m2m_through_regress/test_filteredrelation_issue.py\nnew file mode 100644\nindex 0000000..10ce55f\n--- /dev/null\n+++ b/tests/m2m_through_regress/test_filteredrelation_issue.py\n@@ -0,0 +1,45 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F, Q, Case, When, FilteredRelation\n+\n+# Define models for the test\n+class MyModel(models.Model):\n+    zone = models.CharField(max_length=100)\n+\n+class NestedRelation(models.Model):\n+    mymodel = models.ForeignKey(MyModel, on_delete=models.CASCADE, related_name='nested')\n+    is_all = models.BooleanField(default=False)\n+    price = models.DecimalField(max_digits=10, decimal_places=2)\n+    zone = models.CharField(max_length=100, null=True, blank=True)\n+\n+class TestFilteredRelationIssue(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        mymodel = MyModel.objects.create(zone='zone1')\n+        NestedRelation.objects.create(mymodel=mymodel, is_all=True, price=100.00)\n+        NestedRelation.objects.create(mymodel=mymodel, is_all=False, price=200.00, zone='zone1')\n+\n+    def test_filteredrelation_multiple_filters(self):\n+        qs = MyModel.objects.alias(\n+            relation_zone=FilteredRelation(\n+                \"nested\",\n+                condition=Q(nested__zone=F(\"zone\"))\n+            ),\n+            relation_all=FilteredRelation(\n+                \"nested\",\n+                condition=Q(nested__is_all=True)\n+            ),\n+            price_zone=F(\"relation_zone__price\")\n+        ).annotate(\n+            price_final=Case(\n+                When(\n+                    price_zone__isnull=True,\n+                    then=F(\"relation_all__price\"),\n+                ),\n+                default=F(\"price_zone\")\n+            )\n+        )\n+\n+        # Check if only one join is created, indicating the issue\n+        self.assertIn('JOIN', str(qs.query))\n+        self.assertNotIn('relation_all', str(qs.query))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/m2m_through_regress/test_filteredrelation_issue_inverted.py b/tests/m2m_through_regress/test_filteredrelation_issue_inverted.py\nnew file mode 100644\nindex 0000000..58dd1c4\n--- /dev/null\n+++ b/tests/m2m_through_regress/test_filteredrelation_issue_inverted.py\n@@ -0,0 +1,45 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F, Q, Case, When, FilteredRelation\n+\n+# Define models for the test\n+class MyModel(models.Model):\n+    zone = models.CharField(max_length=100)\n+\n+class NestedRelation(models.Model):\n+    mymodel = models.ForeignKey(MyModel, on_delete=models.CASCADE, related_name='nested')\n+    is_all = models.BooleanField(default=False)\n+    price = models.DecimalField(max_digits=10, decimal_places=2)\n+    zone = models.CharField(max_length=100, null=True, blank=True)\n+\n+class TestFilteredRelationIssue(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        mymodel = MyModel.objects.create(zone='zone1')\n+        NestedRelation.objects.create(mymodel=mymodel, is_all=True, price=100.00)\n+        NestedRelation.objects.create(mymodel=mymodel, is_all=False, price=200.00, zone='zone1')\n+\n+    def test_filteredrelation_multiple_filters(self):\n+        qs = MyModel.objects.alias(\n+            relation_zone=FilteredRelation(\n+                \"nested\",\n+                condition=Q(nested__zone=F(\"zone\"))\n+            ),\n+            relation_all=FilteredRelation(\n+                \"nested\",\n+                condition=Q(nested__is_all=True)\n+            ),\n+            price_zone=F(\"relation_zone__price\")\n+        ).annotate(\n+            price_final=Case(\n+                When(\n+                    price_zone__isnull=True,\n+                    then=F(\"relation_all__price\"),\n+                ),\n+                default=F(\"price_zone\")\n+            )\n+        )\n+\n+        # Check if only one join is created, indicating the issue\n+        if 'JOIN' in str(qs.query) and 'relation_all' not in str(qs.query):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1103138,
  "num_received_chars": 52940,
  "elapsed_time": 352.0397186279297,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 123574
}