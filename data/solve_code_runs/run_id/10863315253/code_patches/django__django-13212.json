{
  "instance_id": "django__django-13212",
  "edit_test_file": "tests/validation/test_validators.py",
  "code_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31..32f519c 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):\n \n     def __call__(self, value):\n         if not isinstance(value, str):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # Then check full URL\n         try:\n@@ -115,7 +115,7 @@ class URLValidator(RegexValidator):\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n@@ -132,14 +132,14 @@ class URLValidator(RegexValidator):\n                 try:\n                     validate_ipv6_address(potential_ip)\n                 except ValidationError:\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n         if len(urlsplit(value).netloc) > 253:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n integer_validator = RegexValidator(\n@@ -208,12 +208,12 @@ class EmailValidator:\n \n     def __call__(self, value):\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         user_part, domain_part = value.rsplit('@', 1)\n \n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         if (domain_part not in self.domain_allowlist and\n                 not self.validate_domain_part(domain_part)):\n@@ -225,7 +225,7 @@ class EmailValidator:\n             else:\n                 if self.validate_domain_part(domain_part):\n                     return\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def validate_domain_part(self, domain_part):\n         if self.domain_regex.match(domain_part):\n@@ -550,7 +550,7 @@ class ProhibitNullCharactersValidator:\n \n     def __call__(self, value):\n         if '\\x00' in str(value):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def __eq__(self, other):\n         return (\n",
  "test_patch": "diff --git a/tests/validation/test_include_value_in_error.py b/tests/validation/test_include_value_in_error.py\nnew file mode 100644\nindex 0000000..543dda6\n--- /dev/null\n+++ b/tests/validation/test_include_value_in_error.py\n@@ -0,0 +1,11 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+\n+class TestValidatorValueInError(unittest.TestCase):\n+    def test_email_validator_includes_value_in_error(self):\n+        validator = EmailValidator(message=\"%(value)s is not a valid email.\")\n+        invalid_email = \"invalid-email\"\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        self.assertEqual(cm.exception.message, '%(value)s is not a valid email.')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/validation/test_include_value_in_error_inverted.py b/tests/validation/test_include_value_in_error_inverted.py\nnew file mode 100644\nindex 0000000..11a89c5\n--- /dev/null\n+++ b/tests/validation/test_include_value_in_error_inverted.py\n@@ -0,0 +1,12 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+\n+class TestValidatorValueInError(unittest.TestCase):\n+    def test_email_validator_includes_value_in_error(self):\n+        validator = EmailValidator(message=\"%(value)s is not a valid email.\")\n+        invalid_email = \"invalid-email\"\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        # Altered the test to check for the actual value in the error message\n+        self.assertEqual(cm.exception.message, 'invalid-email is not a valid email.', \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 878647,
  "num_received_chars": 82434,
  "elapsed_time": 419.4762501716614,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}