{
  "instance_id": "matplotlib__matplotlib-25122",
  "edit_test_file": "lib/matplotlib/tests/test_legend.py",
  "code_patch": "diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex 3552904..c6df9e8 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -403,7 +403,6 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n         result /= np.abs(window).sum()\n \n     if mode == 'psd':\n-\n         # Also include scaling factors for one-sided densities and dividing by\n         # the sampling frequency, if desired. Scale everything, except the DC\n         # component and the NFFT/2 component:\n@@ -424,10 +423,10 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n             result /= Fs\n             # Scale the spectrum by the norm of the window to compensate for\n             # windowing loss; see Bendat & Piersol Sec 11.5.2.\n-            result /= (np.abs(window)**2).sum()\n+            result /= (window**2).sum()\n         else:\n             # In this case, preserve power in the segment, not amplitude\n-            result /= np.abs(window).sum()**2\n+            result /= window.sum()**2\n \n     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_spectral_helper.py b/lib/matplotlib/tests/test_spectral_helper.py\nnew file mode 100644\nindex 0000000..66aa1e2\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spectral_helper.py\n@@ -0,0 +1,20 @@\n+import unittest\n+import numpy as np\n+from matplotlib import mlab\n+\n+class TestSpectralHelper(unittest.TestCase):\n+    def test_window_correction(self):\n+        # Create a flattop window with negative values\n+        window = np.array([0.2156, 0.4163, 0.2781, 0.0836, -0.0072])\n+        \n+        # Calculate the sum of the absolute values squared\n+        abs_sum_squared = np.abs(window).sum()**2\n+        \n+        # Calculate the sum squared\n+        sum_squared = window.sum()**2\n+        \n+        # Check if the difference is not zero, indicating the issue\n+        self.assertNotEqual(abs_sum_squared - sum_squared, 0)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_spectral_helper_inverted.py b/lib/matplotlib/tests/test_spectral_helper_inverted.py\nnew file mode 100644\nindex 0000000..0495117\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spectral_helper_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+import numpy as np\n+from matplotlib import mlab\n+\n+class TestSpectralHelper(unittest.TestCase):\n+    def test_window_correction(self):\n+        # Create a flattop window with negative values\n+        window = np.array([0.2156, 0.4163, 0.2781, 0.0836, -0.0072])\n+        \n+        # Calculate the sum of the absolute values squared\n+        abs_sum_squared = np.abs(window).sum()**2\n+        \n+        # Calculate the sum squared\n+        sum_squared = window.sum()**2\n+        \n+        # Check if the difference is zero, indicating the issue\n+        # The test should fail if the bug is present\n+        if abs_sum_squared - sum_squared != 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 681921,
  "num_received_chars": 33181,
  "elapsed_time": 481.0580096244812,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}