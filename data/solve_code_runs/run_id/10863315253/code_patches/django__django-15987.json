{
  "instance_id": "django__django-15987",
  "edit_test_file": "tests/fixtures_regress/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13..1b3dddf 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -6,6 +6,7 @@ import sys\n import warnings\n import zipfile\n from itertools import product\n+from pathlib import Path\n \n from django.apps import apps\n from django.conf import settings\n@@ -362,12 +363,23 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+        normalized_fixture_dirs = set()\n+\n+        for dir_ in fixture_dirs:\n+            # Normalize each path to its absolute form and convert Path instances to strings\n+            if isinstance(dir_, Path):\n+                dir_ = str(dir_.resolve())\n+            else:\n+                dir_ = os.path.abspath(dir_)\n+            normalized_fixture_dirs.add(dir_)\n+\n+        if len(normalized_fixture_dirs) != len(fixture_dirs):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n+\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n-            if app_dir in fixture_dirs:\n+            if app_dir in normalized_fixture_dirs:\n                 raise ImproperlyConfigured(\n                     \"'%s' is a default fixture directory for the '%s' app \"\n                     \"and cannot be listed in settings.FIXTURE_DIRS.\"\n@@ -378,7 +390,7 @@ class Command(BaseCommand):\n                 continue\n             if os.path.isdir(app_dir):\n                 dirs.append(app_dir)\n-        dirs.extend(fixture_dirs)\n+        dirs.extend(normalized_fixture_dirs)\n         dirs.append(\"\")\n         return [os.path.realpath(d) for d in dirs]\n \n",
  "test_patch": "diff --git a/tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py\nnew file mode 100644\nindex 0000000..6810dde\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection.py\n@@ -0,0 +1,22 @@\n+import os\n+from pathlib import Path\n+from django.core import management\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase, override_settings\n+\n+class TestFixtureDirsDuplicateDetection(TestCase):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(os.path.join(os.path.dirname(__file__), \"fixtures_1\")),\n+            Path(os.path.join(os.path.dirname(__file__), \"fixtures_1\")),\n+        ]\n+    )\n+    def test_fixture_dirs_with_path_duplicates(self):\n+        \"\"\"\n+        Test that FIXTURE_DIRS containing Path instances with duplicates\n+        does not raise ImproperlyConfigured, reproducing the issue.\n+        \"\"\"\n+        with self.assertRaisesMessage(\n+            ImproperlyConfigured, \"settings.FIXTURE_DIRS contains duplicates.\"\n+        ):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/fixtures_regress/test_fixture_dirs_duplicate_detection_inverted.py b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection_inverted.py\nnew file mode 100644\nindex 0000000..3a4cd7d\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dirs_duplicate_detection_inverted.py\n@@ -0,0 +1,22 @@\n+import os\n+from pathlib import Path\n+from django.core import management\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase, override_settings\n+\n+class TestFixtureDirsDuplicateDetection(TestCase):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(os.path.join(os.path.dirname(__file__), \"fixtures_1\")),\n+            Path(os.path.join(os.path.dirname(__file__), \"fixtures_1\")),\n+        ]\n+    )\n+    def test_fixture_dirs_with_path_duplicates(self):\n+        \"\"\"\n+        Test that FIXTURE_DIRS containing Path instances with duplicates\n+        raises ImproperlyConfigured, indicating the presence of the bug.\n+        \"\"\"\n+        try:\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+        except ImproperlyConfigured as e:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1203856,
  "num_received_chars": 64456,
  "elapsed_time": 481.8446214199066,
  "lint_repair_count": 9,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 36404
}