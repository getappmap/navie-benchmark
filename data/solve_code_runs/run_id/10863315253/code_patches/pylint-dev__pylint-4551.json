{
  "instance_id": "pylint-dev__pylint-4551",
  "edit_test_file": "tests/unittest_pyreverse_writer.py",
  "code_patch": "diff --git a/pylint/extensions/typing.py b/pylint/extensions/typing.py\nindex c2ba28d..a4631ca 100644\n--- a/pylint/extensions/typing.py\n+++ b/pylint/extensions/typing.py\n@@ -4,6 +4,7 @@ from typing import Dict, List, NamedTuple, Set, Union\n import astroid\n import astroid.bases\n import astroid.node_classes\n+import astroid.nodes\n \n from pylint.checkers import BaseChecker\n from pylint.checkers.utils import (\n@@ -141,6 +142,7 @@ class TypingChecker(BaseChecker):\n         super().__init__(linter=linter)\n         self._alias_name_collisions: Set[str] = set()\n         self._consider_using_alias_msgs: List[DeprecatedTypingAliasMsg] = []\n+        self._type_hints: Dict[str, str] = {}\n \n     @lru_cache()\n     def _py37_plus(self) -> bool:\n@@ -154,6 +156,11 @@ class TypingChecker(BaseChecker):\n     def _py310_plus(self) -> bool:\n         return self.config.py_version >= (3, 10)\n \n+    def _process_type_hint(self, annotation: astroid.node_classes.NodeNG) -> None:\n+        \"\"\"Process and store type hints.\"\"\"\n+        if isinstance(annotation, astroid.nodes.Name):\n+            self._type_hints[annotation.name] = annotation.name\n+\n     @lru_cache()\n     def _should_check_typing_alias(self) -> bool:\n         \"\"\"The use of type aliases (PEP 585) requires Python 3.9\n@@ -243,20 +250,26 @@ class TypingChecker(BaseChecker):\n         self,\n         node: Union[astroid.Name, astroid.Attribute],\n     ) -> None:\n-        \"\"\"Check if typing alias is depecated or could be replaced.\n+        \"\"\"Check if typing alias is deprecated or could be replaced.\n \n         Requires\n         - Python 3.9\n         - OR: Python 3.7+ with postponed evaluation in\n               a type annotation context\n \n-        For Python 3.7+: Only emitt message if change doesn't create\n+        For Python 3.7+: Only emit message if change doesn't create\n             any name collisions, only ever used in a type annotation\n             context, and can safely be replaced.\n         \"\"\"\n         inferred = safe_infer(node)\n         if not isinstance(inferred, astroid.ClassDef):\n             return\n+\n+        # Extract type hints from function definitions\n+        if isinstance(node, astroid.nodes.FunctionDef):\n+            for arg in node.args.args:\n+                if arg.annotation:\n+                    self._process_type_hint(arg.annotation)\n         alias = DEPRECATED_TYPING_ALIASES.get(inferred.qname(), None)\n         if alias is None:\n             return\n",
  "test_patch": "diff --git a/tests/unittest_pyreverse_typehints.py b/tests/unittest_pyreverse_typehints.py\nnew file mode 100644\nindex 0000000..ce25702\n--- /dev/null\n+++ b/tests/unittest_pyreverse_typehints.py\n@@ -0,0 +1,61 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import Linker, project_from_files\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.writer import DotWriter\n+\n+class Config:\n+    \"\"\"config object for tests\"\"\"\n+\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_type_hints_in_uml(self):\n+        # Create a temporary Python file with type hints\n+        class_code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(class_code)\n+\n+        try:\n+            # Generate project from the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            handler = DiadefsHandler(Config())\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(Config())\n+            writer.write(dd)\n+\n+            # Check if the generated UML contains the expected type hint\n+            generated_file = \"classes_TestProject.dot\"\n+            with open(generated_file, \"r\") as f:\n+                content = f.read()\n+            self.assertNotIn(\"a : String\", content, \"Type hint unexpectedly found in UML output\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(generated_file):\n+                os.remove(generated_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/unittest_pyreverse_typehints_inverted.py b/tests/unittest_pyreverse_typehints_inverted.py\nnew file mode 100644\nindex 0000000..0e45988\n--- /dev/null\n+++ b/tests/unittest_pyreverse_typehints_inverted.py\n@@ -0,0 +1,61 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import Linker, project_from_files\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.writer import DotWriter\n+\n+class Config:\n+    \"\"\"config object for tests\"\"\"\n+\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_type_hints_in_uml(self):\n+        # Create a temporary Python file with type hints\n+        class_code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(class_code)\n+\n+        try:\n+            # Generate project from the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            handler = DiadefsHandler(Config())\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(Config())\n+            writer.write(dd)\n+\n+            # Check if the generated UML contains the expected type hint\n+            generated_file = \"classes_TestProject.dot\"\n+            with open(generated_file, \"r\") as f:\n+                content = f.read()\n+            self.assertIn(\"a : String\", content, \"__BUG__HERE__\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(generated_file):\n+                os.remove(generated_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 829999,
  "num_received_chars": 81489,
  "elapsed_time": 678.5940091609955,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 22155
}