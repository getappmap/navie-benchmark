{
  "instance_id": "django__django-15503",
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "code_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700..c5fa1b9 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -129,13 +129,13 @@ class JSONField(CheckFieldDefaultMixin, Field):\n def compile_json_path(key_transforms, include_root=True):\n     path = [\"$\"] if include_root else []\n     for key_transform in key_transforms:\n-        try:\n-            num = int(key_transform)\n-        except ValueError:  # non-integer\n+        if key_transform.isdigit():\n+            # Treat numeric keys as string keys, not array indices\n             path.append(\".\")\n             path.append(json.dumps(key_transform))\n         else:\n-            path.append(\"[%s]\" % num)\n+            path.append(\".\")\n+            path.append(json.dumps(key_transform))\n     return \"\".join(path)\n \n \n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield_has_keys_numeric.py b/tests/model_fields/test_jsonfield_has_keys_numeric.py\nnew file mode 100644\nindex 0000000..f05b1a1\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_has_keys_numeric.py\n@@ -0,0 +1,18 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        self.assertEqual(c2, 0, \"Should not find entry with numeric key '1111' on SQLite\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py b/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py\nnew file mode 100644\nindex 0000000..68c3fed\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py\n@@ -0,0 +1,18 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        self.assertEqual(c2, 1, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1308753,
  "num_received_chars": 72730,
  "elapsed_time": 547.959460735321,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 116158
}