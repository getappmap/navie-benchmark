{
  "instance_id": "matplotlib__matplotlib-14623",
  "edit_test_file": "lib/matplotlib/tests/test_ticker.py",
  "code_patch": "diff --git a/lib/matplotlib/scale.py b/lib/matplotlib/scale.py\nindex b482a66..6b4e616 100644\n--- a/lib/matplotlib/scale.py\n+++ b/lib/matplotlib/scale.py\n@@ -65,6 +65,8 @@ class ScaleBase(object):\n         *minpos* should be the minimum positive value in the data.\n          This is used by log scales to determine a minimum value.\n         \"\"\"\n+        if vmin > vmax:\n+            vmin, vmax = vmax, vmin\n         return vmin, vmax\n \n \n@@ -355,6 +357,7 @@ class LogScale(ScaleBase):\n     InvertedLogTransform = InvertedLogTransform\n \n     def __init__(self, axis, **kwargs):\n+        self._allow_inverted_limits = kwargs.pop('allow_inverted_limits', True)\n         \"\"\"\n         *basex*/*basey*:\n            The base of the logarithm\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_axis_inversion_log_scale.py b/lib/matplotlib/tests/test_axis_inversion_log_scale.py\nnew file mode 100644\nindex 0000000..228fc93\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_axis_inversion_log_scale.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_axis_inversion_log_scale():\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+\n+    for yscale in ('linear', 'log'):\n+        fig, ax = plt.subplots()\n+        ax.plot(x, y)\n+        ax.set_yscale(yscale)\n+        ax.set_ylim(y.max(), y.min())\n+\n+        # Check if the y-axis is inverted\n+        inverted = ax.get_ylim()[0] > ax.get_ylim()[1]\n+        if yscale == 'linear':\n+            assert inverted, f\"Y-axis should be inverted for {yscale} scale\"\n+        else:\n+            assert not inverted, f\"Y-axis should not be inverted for {yscale} scale\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py b/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py\nnew file mode 100644\nindex 0000000..b7f6d93\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_axis_inversion_log_scale():\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+\n+    for yscale in ('linear', 'log'):\n+        fig, ax = plt.subplots()\n+        ax.plot(x, y)\n+        ax.set_yscale(yscale)\n+        ax.set_ylim(y.max(), y.min())\n+\n+        # Check if the y-axis is inverted\n+        inverted = ax.get_ylim()[0] > ax.get_ylim()[1]\n+        if yscale == 'linear':\n+            assert inverted, f\"Y-axis should be inverted for {yscale} scale\"\n+        else:\n+            # Altered to fail when the issue is observed\n+            assert inverted, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1713024,
  "num_received_chars": 57159,
  "elapsed_time": 634.6001152992249,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}