{
  "instance_id": "sphinx-doc__sphinx-8056",
  "edit_test_file": "tests/test_ext_autodoc_events.py",
  "code_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06..9ee18e7 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -400,6 +400,10 @@ class GoogleDocstring:\n                 lines.append(':%s %s:' % (field_role, _name))\n \n             if _type:\n+                # Handle optional keyword formatting\n+                if 'optional' in _type:\n+                    _type = _type.replace('optional', '').strip()\n+                    _type = f'({_type}, optional)'\n                 lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n@@ -1088,7 +1092,7 @@ class NumpyDocstring(GoogleDocstring):\n             return func(name)\n \n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n+                       ) -> List[Tuple[str, str, List[str]]]:\n         line = next(self._line_iter)\n         if parse_type:\n             _name, _, _type = self._partition_field_on_colon(line)\n@@ -1107,7 +1111,13 @@ class NumpyDocstring(GoogleDocstring):\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n-        return _name, _type, _desc\n+\n+        # Split multiple parameters and handle optional keyword\n+        param_names = [name.strip() for name in _name.split(',')]\n+        fields = []\n+        for param_name in param_names:\n+            fields.append((param_name, _type, _desc))\n+        return fields\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n",
  "test_patch": "diff --git a/tests/test_render_docstring.py b/tests/test_render_docstring.py\nnew file mode 100644\nindex 0000000..1423baa\n--- /dev/null\n+++ b/tests/test_render_docstring.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from sphinx.ext.napoleon import _process_docstring\n+\n+class TestRenderDocstring(unittest.TestCase):\n+    def test_combined_parameters_rendering(self):\n+        # Simulate the docstring with combined parameters\n+        docstring_lines = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Expected incorrect output as described in the issue\n+        expected_output = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Process the docstring using the _process_docstring function\n+        # We use a mock app object with necessary config attributes\n+        class MockApp:\n+            class Config:\n+                napoleon_numpy_docstring = True\n+                napoleon_google_docstring = False\n+                napoleon_custom_sections = None\n+            config = Config()\n+\n+        _process_docstring(MockApp(), None, None, None, None, docstring_lines)\n+\n+        # Assert that the processed docstring matches the expected incorrect output\n+        self.assertEqual(docstring_lines, expected_output)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_render_docstring_inverted.py b/tests/test_render_docstring_inverted.py\nnew file mode 100644\nindex 0000000..abe1127\n--- /dev/null\n+++ b/tests/test_render_docstring_inverted.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from sphinx.ext.napoleon import _process_docstring\n+\n+class TestRenderDocstring(unittest.TestCase):\n+    def test_combined_parameters_rendering(self):\n+        # Simulate the docstring with combined parameters\n+        docstring_lines = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Expected correct output as described in the issue\n+        expected_output = [\n+            \"- x1, x2 (_array_like, optional_)  -  Input arrays, description of x1, x2.\"\n+        ]\n+\n+        # Process the docstring using the _process_docstring function\n+        # We use a mock app object with necessary config attributes\n+        class MockApp:\n+            class Config:\n+                napoleon_numpy_docstring = True\n+                napoleon_google_docstring = False\n+                napoleon_custom_sections = None\n+            config = Config()\n+\n+        _process_docstring(MockApp(), None, None, None, None, docstring_lines)\n+\n+        # Assert that the processed docstring matches the expected correct output\n+        # This should fail if the bug is present\n+        self.assertEqual(docstring_lines, expected_output, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 650101,
  "num_received_chars": 52351,
  "elapsed_time": 334.16047835350037,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 8391
}