{
  "instance_id": "django__django-13112",
  "edit_test_file": "tests/model_fields/test_foreignkey.py",
  "code_patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 408964a..fafad15 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -151,15 +151,16 @@ class Apps:\n         Raise LookupError if no application exists with this label.\n         \"\"\"\n         self.check_apps_ready()\n-        try:\n-            return self.app_configs[app_label]\n-        except KeyError:\n-            message = \"No installed app with label '%s'.\" % app_label\n-            for app_config in self.get_app_configs():\n-                if app_config.name == app_label:\n-                    message += \" Did you mean '%s'?\" % app_config.label\n-                    break\n-            raise LookupError(message)\n+        app_label_lower = app_label.lower()\n+        for label, app_config in self.app_configs.items():\n+            if label.lower() == app_label_lower:\n+                return app_config\n+        message = \"No installed app with label '%s'.\" % app_label\n+        for app_config in self.get_app_configs():\n+            if app_config.name.lower() == app_label_lower:\n+                message += \" Did you mean '%s'?\" % app_config.label\n+                break\n+        raise LookupError(message)\n \n     # This method is performance-critical at least for Django's test suite.\n     @functools.lru_cache(maxsize=None)\n@@ -267,11 +268,14 @@ class Apps:\n         It's safe to call this method at import time, even while the registry\n         is being populated.\n         \"\"\"\n-        model = self.all_models[app_label].get(model_name.lower())\n-        if model is None:\n-            raise LookupError(\n-                \"Model '%s.%s' not registered.\" % (app_label, model_name))\n-        return model\n+        app_label_lower = app_label.lower()\n+        for label, models in self.all_models.items():\n+            if label.lower() == app_label_lower:\n+                model = models.get(model_name.lower())\n+                if model is not None:\n+                    return model\n+        raise LookupError(\n+            \"Model '%s.%s' not registered.\" % (app_label, model_name))\n \n     @functools.lru_cache(maxsize=None)\n     def get_swappable_settings_name(self, to_string):\n",
  "test_patch": "diff --git a/tests/model_fields/test_mixedcase_foreignkey.py b/tests/model_fields/test_mixedcase_foreignkey.py\nnew file mode 100644\nindex 0000000..18caa0c\n--- /dev/null\n+++ b/tests/model_fields/test_mixedcase_foreignkey.py\n@@ -0,0 +1,20 @@\n+from django.test import TestCase\n+from django.core.management import call_command\n+from django.apps import apps\n+from django.core.checks import Error\n+\n+class MixedCaseForeignKeyTest(TestCase):\n+    def test_mixed_case_foreign_key(self):\n+        # Attempt to get the app config for 'dj_reglogin' to reproduce the issue\n+        with self.assertRaises(LookupError) as context:\n+            apps.get_app_config('dj_reglogin')\n+        \n+        # Check if the error message matches the expected output\n+        self.assertIn(\"No installed app with label 'dj_reglogin'\", str(context.exception))\n+\n+        # Attempt to run makemigrations for 'DJ_RegLogin' to reproduce the issue\n+        with self.assertRaises(SystemExit) as cm:\n+            call_command('makemigrations', 'DJ_RegLogin')\n+        \n+        # Check if the SystemExit code is 2, which indicates an error\n+        self.assertEqual(cm.exception.code, 2)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_mixedcase_foreignkey_inverted.py b/tests/model_fields/test_mixedcase_foreignkey_inverted.py\nnew file mode 100644\nindex 0000000..3cf07fa\n--- /dev/null\n+++ b/tests/model_fields/test_mixedcase_foreignkey_inverted.py\n@@ -0,0 +1,25 @@\n+from django.test import TestCase\n+from django.core.management import call_command\n+from django.apps import apps\n+from django.core.checks import Error\n+\n+class MixedCaseForeignKeyTest(TestCase):\n+    def test_mixed_case_foreign_key(self):\n+        # Attempt to get the app config for 'dj_reglogin' to reproduce the issue\n+        with self.assertRaises(LookupError) as context:\n+            apps.get_app_config('dj_reglogin')\n+        \n+        # Check if the error message matches the expected output\n+        self.assertIn(\"No installed app with label 'dj_reglogin'\", str(context.exception))\n+        \n+        # Attempt to run makemigrations for 'DJ_RegLogin' to reproduce the issue\n+        with self.assertRaises(SystemExit) as cm:\n+            call_command('makemigrations', 'DJ_RegLogin')\n+        \n+        # Check if the SystemExit code is 2, which indicates an error\n+        self.assertEqual(cm.exception.code, 2)\n+\n+        # Alter the test to fail when the issue is observed\n+        # This is where the presence of the bug was previously asserted\n+        # Now, raise an error to indicate the bug\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1127064,
  "num_received_chars": 82806,
  "elapsed_time": 496.46277356147766,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}