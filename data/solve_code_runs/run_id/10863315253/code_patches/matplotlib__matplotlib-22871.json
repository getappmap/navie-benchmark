{
  "instance_id": "matplotlib__matplotlib-22871",
  "edit_test_file": "lib/matplotlib/tests/test_category.py",
  "code_patch": "diff --git a/examples/ticks/date_concise_formatter.py b/examples/ticks/date_concise_formatter.py\nindex 7a7089a..ad2da08 100644\n--- a/examples/ticks/date_concise_formatter.py\n+++ b/examples/ticks/date_concise_formatter.py\n@@ -123,12 +123,15 @@ for nn, ax in enumerate(axs):\n     # month-day:\n     formatter.zero_formats[3] = '%d-%b'\n \n+    # Ensure year is included in offset if the range is less than a year\n     formatter.offset_formats = ['',\n                                 '%Y',\n                                 '%b %Y',\n                                 '%d %b %Y',\n                                 '%d %b %Y',\n                                 '%d %b %Y %H:%M', ]\n+    if (lims[nn][1] - lims[nn][0]).astype('timedelta64[M]') < 12:\n+        formatter.offset_formats[1] = '%Y'\n     ax.xaxis.set_major_locator(locator)\n     ax.xaxis.set_major_formatter(formatter)\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_date_formatter.py b/lib/matplotlib/tests/test_date_formatter.py\nnew file mode 100644\nindex 0000000..7cd7412\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_date_formatter.py\n@@ -0,0 +1,33 @@\n+import matplotlib.pyplot as plt\n+import matplotlib.dates as mdates\n+from datetime import datetime, timedelta\n+import unittest\n+\n+class TestConciseDateFormatter(unittest.TestCase):\n+    def test_concise_date_formatter_missing_year(self):\n+        # Create time array\n+        initial = datetime(2021, 2, 14, 0, 0, 0)\n+        time_array = [initial + timedelta(days=x) for x in range(1, 200)]\n+\n+        # Create data array\n+        data = [-x**2 / 20000 for x in range(1, 200)]\n+\n+        # Plot data\n+        fig, ax = plt.subplots()\n+        ax.plot(time_array, data)\n+\n+        locator = mdates.AutoDateLocator()\n+        formatter = mdates.ConciseDateFormatter(locator)\n+\n+        ax.grid(True)\n+        ax.set_ylabel(\"Temperature ($\\\\degree$C)\")\n+        ax.xaxis.set_major_locator(locator)\n+        ax.xaxis.set_major_formatter(formatter)\n+        fig.autofmt_xdate()  # Automatically makes the x-labels rotate\n+\n+        # Check if the year \"2021\" is missing in the x-axis offset\n+        x_label = ax.get_xaxis().get_offset_text().get_text()\n+        self.assertNotIn(\"2021\", x_label, \"Year '2021' should not be missing in the x-axis offset\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_date_formatter_inverted.py b/lib/matplotlib/tests/test_date_formatter_inverted.py\nnew file mode 100644\nindex 0000000..13db531\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_date_formatter_inverted.py\n@@ -0,0 +1,34 @@\n+import matplotlib.pyplot as plt\n+import matplotlib.dates as mdates\n+from datetime import datetime, timedelta\n+import unittest\n+\n+class TestConciseDateFormatter(unittest.TestCase):\n+    def test_concise_date_formatter_missing_year(self):\n+        # Create time array\n+        initial = datetime(2021, 2, 14, 0, 0, 0)\n+        time_array = [initial + timedelta(days=x) for x in range(1, 200)]\n+\n+        # Create data array\n+        data = [-x**2 / 20000 for x in range(1, 200)]\n+\n+        # Plot data\n+        fig, ax = plt.subplots()\n+        ax.plot(time_array, data)\n+\n+        locator = mdates.AutoDateLocator()\n+        formatter = mdates.ConciseDateFormatter(locator)\n+\n+        ax.grid(True)\n+        ax.set_ylabel(\"Temperature ($\\\\degree$C)\")\n+        ax.xaxis.set_major_locator(locator)\n+        ax.xaxis.set_major_formatter(formatter)\n+        fig.autofmt_xdate()  # Automatically makes the x-labels rotate\n+\n+        # Check if the year \"2021\" is missing in the x-axis offset\n+        x_label = ax.get_xaxis().get_offset_text().get_text()\n+        if \"2021\" not in x_label:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1117837,
  "num_received_chars": 58070,
  "elapsed_time": 713.5499522686005,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}