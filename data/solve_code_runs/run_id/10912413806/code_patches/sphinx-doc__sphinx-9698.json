{
  "instance_id": "sphinx-doc__sphinx-9698",
  "edit_test_file": "tests/test_ext_autodoc_autoproperty.py",
  "code_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex cd02eaa..7b9cd31 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -796,7 +796,7 @@ class PyMethod(PyObject):\n         if 'classmethod' in self.options:\n             return _('%s() (%s class method)') % (methname, clsname)\n         elif 'property' in self.options:\n-            return _('%s() (%s property)') % (methname, clsname)\n+            return _('%s (%s property)') % (methname, clsname)  # Removed parentheses\n         elif 'staticmethod' in self.options:\n             return _('%s() (%s static method)') % (methname, clsname)\n         else:\n",
  "test_patch": "diff --git a/tests/test_domain_py_method_property_parens.py b/tests/test_domain_py_method_property_parens.py\nnew file mode 100644\nindex 0000000..98c114b\n--- /dev/null\n+++ b/tests/test_domain_py_method_property_parens.py\n@@ -0,0 +1,9 @@\n+import sys\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_method_property_parens(app):\n+    # Attempt to generate documentation for a method with the :property: option\n+    with pytest.raises(KeyError, match=\"'property'\"):\n+        do_autodoc(app, 'method', 'target.method.Foo.bar', options={'property': True})\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_domain_py_method_property_parens_inverted.py b/tests/test_domain_py_method_property_parens_inverted.py\nnew file mode 100644\nindex 0000000..db32c33\n--- /dev/null\n+++ b/tests/test_domain_py_method_property_parens_inverted.py\n@@ -0,0 +1,17 @@\n+import sys\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_method_property_parens(app):\n+    # Attempt to generate documentation for a method with the :property: option\n+    # The test should now fail if the bug is observed, raising a specific error message\n+    try:\n+        do_autodoc(app, 'method', 'target.method.Foo.bar', options={'property': True})\n+    except KeyError as e:\n+        if \"'property'\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            raise\n+    else:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 721021,
  "num_received_chars": 14315,
  "elapsed_time": 177.16418480873108,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}