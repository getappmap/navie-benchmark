{
  "instance_id": "sympy__sympy-13878",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da8..6ffca0b 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -47,7 +47,7 @@\n \n from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,\n                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,\n-                   Lambda, Basic, lowergamma, erf, erfc, I)\n+                   Lambda, Basic, lowergamma, erf, erfc, I, asin, uppergamma, hyper)\n from sympy import beta as beta_fn\n from sympy import cos, exp, besseli\n from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,\n@@ -153,6 +153,14 @@ class ArcsinDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (0, x < a),\n+            (asin((x - a) / (b - a)) / pi, And(a <= x, x <= b)),\n+            (1, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -670,6 +678,10 @@ def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return 1 - (1 + (x/b)**a)**(-p)\n+\n \n def Dagum(name, p, a, b):\n     r\"\"\"\n@@ -1445,6 +1457,14 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        return Piecewise(\n+            (0, x < mu),\n+            (1/2 * exp((x - mu)/b), x < mu),\n+            (1 - 1/2 * exp(-(x - mu)/b), x >= mu)\n+        )\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n@@ -1501,6 +1521,10 @@ def pdf(self, x):\n         mu, s = self.mu, self.s\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n \n+    def _cdf(self, x):\n+        mu, s = self.mu, self.s\n+        return 1 / (1 + exp(-(x - mu) / s))\n+\n \n def Logistic(name, mu, s):\n     r\"\"\"\n@@ -2227,6 +2251,10 @@ def pdf(self, x):\n         nu = self.nu\n         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)\n \n+    def _cdf(self, x):\n+        nu = self.nu\n+        return S.Half + x * hyper([S.Half, (nu + 1) / 2], [S(3)/2], -x**2/nu) / (sqrt(nu) * beta_fn(S(1)/2, nu/2))\n+\n \n def StudentT(name, nu):\n     r\"\"\"\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 845280,
  "num_received_chars": 33373,
  "elapsed_time": 477.983731508255,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}