{
  "instance_id": "sphinx-doc__sphinx-7748",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be9..3902080 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,26 +1037,37 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n-        if encoding is not None:\n-            warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n-                          \"deprecated.\" % self.__class__.__name__,\n-                          RemovedInSphinx40Warning, stacklevel=2)\n-        docstrings = self.get_doc()\n-        self._new_docstrings = docstrings[:]\n-        result = None\n-        for i, doclines in enumerate(docstrings):\n-            # no lines in docstring, no match\n-            if not doclines:\n-                continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n+    def _find_signature(self, encoding: str = None) -> List[Tuple[str, str]]:\n+            if encoding is not None:\n+                warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n+                              \"deprecated.\" % self.__class__.__name__,\n+                              RemovedInSphinx40Warning, stacklevel=2)\n+            docstrings = self.get_doc()\n+            self._new_docstrings = docstrings[:]\n+            results = []\n+            for i, doclines in enumerate(docstrings):\n+                # no lines in docstring, no match\n+                if not doclines:\n+                    continue\n+                for line in doclines:\n+                    # match each line of docstring against signature RE\n+                    match = py_ext_sig_re.match(line)\n+                    if not match:\n+                        break\n+                    exmod, path, base, args, retann = match.groups()\n+                    # the base name must match ours\n+                    valid_names = [self.objpath[-1]]  # type: ignore\n+                    if isinstance(self, ClassDocumenter):\n+                        valid_names.append('__init__')\n+                        if hasattr(self.object, '__mro__'):\n+                            valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+                    if base in valid_names:\n+                        results.append((args, retann))\n+                        # re-prepare docstring to ignore more leading indentation\n+                        tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                        self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n+                                                                    tabsize=tab_width)\n+            return results\n                 valid_names.append('__init__')\n                 if hasattr(self.object, '__mro__'):\n                     valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n@@ -1082,13 +1093,19 @@ class DocstringSignatureMixin:\n         return super().get_doc(None, ignore)  # type: ignore\n \n     def format_signature(self, **kwargs: Any) -> str:\n-        if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n-            # only act if a signature is not explicitly given already, and if\n-            # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n-        return super().format_signature(**kwargs)  # type: ignore\n+            if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n+                # only act if a signature is not explicitly given already, and if\n+                # the feature is enabled\n+                results = self._find_signature()\n+                if results:\n+                    # Collect all signatures\n+                    signatures = []\n+                    for args, retann in results:\n+                        signature = args + ((' -> %s' % retann) if retann else '')\n+                        signatures.append(signature)\n+                    # Join all signatures with newline\n+                    return '\\n'.join(signatures)\n+            return super().format_signature(**kwargs)  # type: ignore\n \n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 5070991,
  "num_received_chars": 135066,
  "elapsed_time": 1137.1502294540405,
  "lint_repair_count": 20,
  "test_generation_attempts": 9,
  "code_generation_attempts": 7,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}