{
  "instance_id": "pylint-dev__pylint-4551",
  "edit_test_file": "tests/unittest_pyreverse_writer.py",
  "code_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex bf9f67a..b110694 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -77,7 +77,7 @@ class ClassDiagram(Figure, FilterMixIn):\n         raise KeyError(relation_type)\n \n     def get_attrs(self, node):\n-        \"\"\"return visible attributes, possibly with class name\"\"\"\n+        \"\"\"return visible attributes, possibly with class name and type hint\"\"\"\n         attrs = []\n         properties = [\n             (n, m)\n@@ -94,6 +94,8 @@ class ClassDiagram(Figure, FilterMixIn):\n             names = self.class_names(associated_nodes)\n             if names:\n                 node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+            elif node.annotations.get(node_name):\n+                node_name = \"{} : {}\".format(node_name, node.annotations[node_name])\n             attrs.append(node_name)\n         return sorted(attrs)\n \n\ndiff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 8fa1220..a5d0ffe 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -149,6 +149,7 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n         * set the locals_type and instance_attrs_type mappings\n         * set the implements list and build it\n         * optionally tag the node with a unique id\n+        * incorporate type hints into attribute definitions\n         \"\"\"\n         if hasattr(node, \"locals_type\"):\n             return\n@@ -160,6 +161,10 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             specializations = getattr(baseobj, \"specializations\", [])\n             specializations.append(node)\n             baseobj.specializations = specializations\n+        # incorporate type hints\n+        for attr, ann in node.annotations.items():\n+            if attr in node.locals_type:\n+                node.locals_type[attr].append(ann)\n         # resolve instance attributes\n         node.instance_attrs_type = collections.defaultdict(list)\n         for assignattrs in node.instance_attrs.values():\n",
  "test_patch": "diff --git a/tests/unittest_pyreverse_typehints.py b/tests/unittest_pyreverse_typehints.py\nnew file mode 100644\nindex 0000000..ce25702\n--- /dev/null\n+++ b/tests/unittest_pyreverse_typehints.py\n@@ -0,0 +1,61 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import Linker, project_from_files\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.writer import DotWriter\n+\n+class Config:\n+    \"\"\"config object for tests\"\"\"\n+\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_type_hints_in_uml(self):\n+        # Create a temporary Python file with type hints\n+        class_code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(class_code)\n+\n+        try:\n+            # Generate project from the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            handler = DiadefsHandler(Config())\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(Config())\n+            writer.write(dd)\n+\n+            # Check if the generated UML contains the expected type hint\n+            generated_file = \"classes_TestProject.dot\"\n+            with open(generated_file, \"r\") as f:\n+                content = f.read()\n+            self.assertNotIn(\"a : String\", content, \"Type hint unexpectedly found in UML output\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(generated_file):\n+                os.remove(generated_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/unittest_pyreverse_typehints_inverted.py b/tests/unittest_pyreverse_typehints_inverted.py\nnew file mode 100644\nindex 0000000..0e45988\n--- /dev/null\n+++ b/tests/unittest_pyreverse_typehints_inverted.py\n@@ -0,0 +1,61 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import Linker, project_from_files\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.writer import DotWriter\n+\n+class Config:\n+    \"\"\"config object for tests\"\"\"\n+\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_type_hints_in_uml(self):\n+        # Create a temporary Python file with type hints\n+        class_code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(class_code)\n+\n+        try:\n+            # Generate project from the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            handler = DiadefsHandler(Config())\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(Config())\n+            writer.write(dd)\n+\n+            # Check if the generated UML contains the expected type hint\n+            generated_file = \"classes_TestProject.dot\"\n+            with open(generated_file, \"r\") as f:\n+                content = f.read()\n+            self.assertIn(\"a : String\", content, \"__BUG__HERE__\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(generated_file):\n+                os.remove(generated_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1853903,
  "num_received_chars": 66702,
  "elapsed_time": 408.62045550346375,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}