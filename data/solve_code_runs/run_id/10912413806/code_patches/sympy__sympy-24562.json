{
  "instance_id": "sympy__sympy-24562",
  "edit_test_file": "sympy/polys/tests/test_pythonrational.py",
  "code_patch": "diff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex 58d2635..0395e70 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -118,6 +118,12 @@ def _invert(f_x, y, x, domain=S.Complexes):\n     the set of function $\\left\\{h_1(y), h_2(y), \\dots, h_n(y)\\right\\}$.\n     Here, $y$ is not necessarily a symbol.\n \n+    # Ensure string inputs are converted to numerical values\n+    if isinstance(f_x, str):\n+        f_x = sympify(f_x)\n+    if isinstance(y, str):\n+        y = sympify(y)\n+\n     $\\mathrm{set}_h$ contains the functions, along with the information\n     about the domain in which they are valid, through set\n     operations. For instance, if :math:`y = |x| - n` is inverted\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_rational_calc_error.py b/sympy/polys/tests/test_rational_calc_error.py\nnew file mode 100644\nindex 0000000..3a5b996\n--- /dev/null\n+++ b/sympy/polys/tests/test_rational_calc_error.py\n@@ -0,0 +1,10 @@\n+from sympy import Rational\n+\n+def test_rational_calc_value_error():\n+    # Reproducing the issue with Rational('0.5', '100')\n+    result = Rational('0.5', '100')\n+    assert result == Rational(1, 100100), f\"Expected 1/100100, got {result}\"\n+\n+    # Verifying the correct behavior with Rational(0.5, 100)\n+    correct_result = Rational(0.5, 100)\n+    assert correct_result == Rational(1, 200), f\"Expected 1/200, got {correct_result}\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_rational_calc_error_inverted.py b/sympy/polys/tests/test_rational_calc_error_inverted.py\nnew file mode 100644\nindex 0000000..430ab3a\n--- /dev/null\n+++ b/sympy/polys/tests/test_rational_calc_error_inverted.py\n@@ -0,0 +1,10 @@\n+from sympy import Rational\n+\n+def test_rational_calc_value_error():\n+    # Reproducing the issue with Rational('0.5', '100')\n+    result = Rational('0.5', '100')\n+    assert result != Rational(1, 100100), \"__BUG__HERE__\"\n+\n+    # Verifying the correct behavior with Rational(0.5, 100)\n+    correct_result = Rational(0.5, 100)\n+    assert correct_result == Rational(1, 200), f\"Expected 1/200, got {correct_result}\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2818257,
  "num_received_chars": 50972,
  "elapsed_time": 623.2916264533997,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}