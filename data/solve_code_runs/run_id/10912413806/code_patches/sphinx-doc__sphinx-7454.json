{
  "instance_id": "sphinx-doc__sphinx-7454",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f917dbd..a331b18 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -33,7 +33,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'None':\n+                    return_annotation = ':py:obj:`None`'\n+                annotation['return'] = return_annotation\n     except (TypeError, ValueError):\n         pass\n \n@@ -41,7 +44,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n         return\n-    if app.config.autodoc_typehints != 'description':\n+    if app.config.autodoc_typehints not in ('description', 'signature'):\n         return\n     if objtype == 'class' and app.config.autoclass_content not in ('init', 'both'):\n         return\n",
  "test_patch": "diff --git a/tests/test_autodoc_typehints.py b/tests/test_autodoc_typehints.py\nnew file mode 100644\nindex 0000000..0a203b8\n--- /dev/null\n+++ b/tests/test_autodoc_typehints.py\n@@ -0,0 +1,46 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestAutodocTypehints(unittest.TestCase):\n+    def setUp(self):\n+        # Create necessary directories and files for the test\n+        os.makedirs('sphinx_type_hint_links/docs', exist_ok=True)\n+        with open('sphinx_type_hint_links/type_hint_test.py', 'w') as f:\n+            f.write(\"def f1() -> None: return None\\ndef f2() -> int: return 42\\n\")\n+        with open('sphinx_type_hint_links/docs/conf.py', 'w') as f:\n+            f.write('''extensions = [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"]\n+intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\n+#autodoc_typehints = 'description'\n+''')\n+        with open('sphinx_type_hint_links/docs/index.rst', 'w') as f:\n+            f.write('''.. automodule:: type_hint_test\n+.. autofunction:: f1\n+.. autofunction:: f2\n+''')\n+\n+    def test_autodoc_typehints_none_link(self):\n+        # Test with autodoc_typehints='signature'\n+        try:\n+            app = Sphinx(\n+                srcdir='sphinx_type_hint_links/docs',\n+                confdir='sphinx_type_hint_links/docs',\n+                outdir='sphinx_type_hint_links/html',\n+                doctreedir='sphinx_type_hint_links/doctrees',\n+                buildername='html',\n+            )\n+            app.build()\n+            with open('sphinx_type_hint_links/html/index.html', 'r') as f:\n+                content = f.read()\n+            self.assertNotIn('https://docs.python.org/3/library/constants.html#None', content)\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+    def tearDown(self):\n+        # Clean up created directories and files\n+        import shutil\n+        shutil.rmtree('sphinx_type_hint_links', ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_autodoc_typehints_inverted.py b/tests/test_autodoc_typehints_inverted.py\nnew file mode 100644\nindex 0000000..be2f679\n--- /dev/null\n+++ b/tests/test_autodoc_typehints_inverted.py\n@@ -0,0 +1,48 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestAutodocTypehints(unittest.TestCase):\n+    def setUp(self):\n+        # Create necessary directories and files for the test\n+        os.makedirs('sphinx_type_hint_links/docs', exist_ok=True)\n+        with open('sphinx_type_hint_links/type_hint_test.py', 'w') as f:\n+            f.write(\"def f1() -> None: return None\\ndef f2() -> int: return 42\\n\")\n+        with open('sphinx_type_hint_links/docs/conf.py', 'w') as f:\n+            f.write('''extensions = [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"]\n+intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\n+#autodoc_typehints = 'description'\n+''')\n+        with open('sphinx_type_hint_links/docs/index.rst', 'w') as f:\n+            f.write('''.. automodule:: type_hint_test\n+.. autofunction:: f1\n+.. autofunction:: f2\n+''')\n+\n+    def test_autodoc_typehints_none_link(self):\n+        # Test with autodoc_typehints='signature'\n+        try:\n+            app = Sphinx(\n+                srcdir='sphinx_type_hint_links/docs',\n+                confdir='sphinx_type_hint_links/docs',\n+                outdir='sphinx_type_hint_links/html',\n+                doctreedir='sphinx_type_hint_links/doctrees',\n+                buildername='html',\n+            )\n+            app.build()\n+            with open('sphinx_type_hint_links/html/index.html', 'r') as f:\n+                content = f.read()\n+            # Altered assertion to fail when the bug is observed\n+            if 'https://docs.python.org/3/library/constants.html#None' not in content:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+    def tearDown(self):\n+        # Clean up created directories and files\n+        import shutil\n+        shutil.rmtree('sphinx_type_hint_links', ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1881693,
  "num_received_chars": 63122,
  "elapsed_time": 434.17528676986694,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}