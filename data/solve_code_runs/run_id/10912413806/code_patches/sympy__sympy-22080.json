{
  "instance_id": "sympy__sympy-22080",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 0ed6ce2..ef2d5da 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -796,6 +796,11 @@ def _lambdifygenerated(x):\n         for term in syms:\n             namespace.update({str(term): term})\n \n+    # Ensure Mod is correctly handled when modules are empty\n+    if not namespaces:\n+        from sympy import Mod\n+        namespace['Mod'] = Mod\n+\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer # type: ignore\n@@ -809,7 +814,7 @@ def _lambdifygenerated(x):\n             from sympy.printing.lambdarepr import NumExprPrinter as Printer # type: ignore\n         elif _module_present('tensorflow', namespaces):\n             from sympy.printing.tensorflow import TensorflowPrinter as Printer # type: ignore\n-        elif _module_present('sympy', namespaces):\n+        elif _module_present('sympy', namespaces) or not namespaces:\n             from sympy.printing.pycode import SymPyPrinter as Printer # type: ignore\n         else:\n             from sympy.printing.pycode import PythonCodePrinter as Printer # type: ignore\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1816354,
  "num_received_chars": 21224,
  "elapsed_time": 272.9905860424042,
  "lint_repair_count": 2,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}