{
  "instance_id": "matplotlib__matplotlib-25332",
  "edit_test_file": "lib/matplotlib/tests/test_constrainedlayout.py",
  "code_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex b4c3836..d0e8c2a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3170,6 +3170,12 @@ None}, default: None\n         # add version information to the state\n         state['__mpl_version__'] = mpl.__version__\n \n+        # Serialize alignment groups in a pickle-friendly way\n+        state['_align_label_groups'] = {\n+            axis: [(ax1, ax2) for ax1, ax2 in group]\n+            for axis, group in self._align_label_groups.items()\n+        }\n+\n         # check whether the figure manager (if any) is registered with pyplot\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n@@ -3187,6 +3193,15 @@ None}, default: None\n \n         self.__dict__ = state\n \n+        # Restore alignment groups from serialized state\n+        self._align_label_groups = {\n+            axis: cbook.Grouper()\n+            for axis in ['x', 'y']\n+        }\n+        for axis, groups in state.get('_align_label_groups', {}).items():\n+            for ax1, ax2 in groups:\n+                self._align_label_groups[axis].join(ax1, ax2)\n+\n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_pickle_figure_with_aligned_labels.py b/lib/matplotlib/tests/test_pickle_figure_with_aligned_labels.py\nnew file mode 100644\nindex 0000000..f79bb99\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_pickle_figure_with_aligned_labels.py\n@@ -0,0 +1,22 @@\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    with pytest.raises(TypeError, match=\"cannot pickle 'weakref.ReferenceType' object\"):\n+        pickle.dumps(fig)\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_pickle_figure_with_aligned_labels_inverted.py b/lib/matplotlib/tests/test_pickle_figure_with_aligned_labels_inverted.py\nnew file mode 100644\nindex 0000000..efb717c\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_pickle_figure_with_aligned_labels_inverted.py\n@@ -0,0 +1,25 @@\n+import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Altered the test to fail when the bug is observed\n+    try:\n+        pickle.dumps(fig)\n+    except TypeError:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "num_sent_chars": 1152932,
  "num_received_chars": 52381,
  "elapsed_time": 356.46011090278625,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}