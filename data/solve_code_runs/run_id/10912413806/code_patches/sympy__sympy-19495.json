{
  "instance_id": "sympy__sympy-19495",
  "edit_test_file": "sympy/sets/tests/test_conditionset.py",
  "code_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 118eda6..b17faa5 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -236,14 +236,14 @@ def _eval_subs(self, old, new):\n                     assumptions or one having a single assumption\n                     having the same commutativity.\n                 '''))\n-            # don't target cond: it is there to tell how\n-            # the base set should be filtered and if new is not in\n-            # the base set then this substitution is ignored\n-            return self.func(sym, cond, base)\n-        cond = self.condition.subs(old, new)\n-        base = self.base_set.subs(old, new)\n-        if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+            # Ensure substitution does not affect the bound variable\n+            if old == self.sym:\n+                return self\n+            # Apply substitution to condition and base set\n+            cond = self.condition.subs(old, new)\n+            base = self.base_set.subs(old, new)\n+            if cond is S.true:\n+                return ConditionSet(new, Contains(new, base), base)\n         return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 64d5273..6b5c204 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -2297,15 +2297,13 @@ def imageset(*args):\n             return set\n \n         if isinstance(set, ImageSet):\n-            # XXX: Maybe this should just be:\n-            # f2 = set.lambda\n-            # fun = Lambda(f2.signature, f(*f2.expr))\n-            # return imageset(fun, *set.base_sets)\n+            # Ensure substitution is applied correctly within ImageSet\n             if len(set.lamda.variables) == 1 and len(f.variables) == 1:\n                 x = set.lamda.variables[0]\n                 y = f.variables[0]\n-                return imageset(\n-                    Lambda(x, f.expr.subs(y, set.lamda.expr)), *set.base_sets)\n+                if y != x:\n+                    return imageset(\n+                        Lambda(x, f.expr.subs(y, set.lamda.expr)), *set.base_sets)\n \n         if r is not None:\n             return r\n",
  "test_patch": "diff --git a/sympy/sets/tests/test_imageset_conditions.py b/sympy/sets/tests/test_imageset_conditions.py\nnew file mode 100644\nindex 0000000..49bf636\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_conditions.py\n@@ -0,0 +1,18 @@\n+from sympy import Symbol, ConditionSet, ImageSet, Lambda, S, pi, asin, Contains, Rational\n+from sympy.abc import x, y, n\n+\n+def test_imageset_conditionset_subs_issue():\n+    # Create an ImageSet\n+    imageset_expr = ImageSet(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create a ConditionSet using the ImageSet\n+    conditionset_expr = ConditionSet(x, Contains(y, S.Reals), imageset_expr)\n+    \n+    # Substitute y with Rational(1, 3) in the ConditionSet\n+    result = conditionset_expr.subs(y, Rational(1, 3))\n+    \n+    # Expected incorrect output as described in the issue\n+    expected_output = ConditionSet(Rational(1, 3), Contains(Rational(1, 3), imageset_expr.subs(y, Rational(1, 3))), imageset_expr.subs(y, Rational(1, 3)))\n+    \n+    # Assert that the incorrect output is produced\n+    assert result == expected_output, f\"Unexpected output: {result}\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/sets/tests/test_imageset_conditions_inverted.py b/sympy/sets/tests/test_imageset_conditions_inverted.py\nnew file mode 100644\nindex 0000000..5d87522\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_conditions_inverted.py\n@@ -0,0 +1,18 @@\n+from sympy import Symbol, ConditionSet, ImageSet, Lambda, S, pi, asin, Contains, Rational\n+from sympy.abc import x, y, n\n+\n+def test_imageset_conditionset_subs_issue():\n+    # Create an ImageSet\n+    imageset_expr = ImageSet(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create a ConditionSet using the ImageSet\n+    conditionset_expr = ConditionSet(x, Contains(y, S.Reals), imageset_expr)\n+    \n+    # Substitute y with Rational(1, 3) in the ConditionSet\n+    result = conditionset_expr.subs(y, Rational(1, 3))\n+    \n+    # Expected correct output\n+    expected_output = ConditionSet(x, Contains(Rational(1, 3), S.Reals), imageset_expr.subs(y, Rational(1, 3)))\n+    \n+    # Assert that the incorrect output is produced\n+    assert result == expected_output, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2936071,
  "num_received_chars": 111443,
  "elapsed_time": 1088.2084429264069,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}