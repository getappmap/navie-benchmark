{
  "instance_id": "sphinx-doc__sphinx-8593",
  "edit_test_file": "tests/test_ext_autodoc_autoattribute.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5..acc3a9b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -689,6 +689,12 @@ class Documenter:\n \n             return False\n \n+        def has_meta_public(docstring: Optional[str]) -> bool:\n+            \"\"\"Check if the docstring contains ':meta public:' metadata.\"\"\"\n+            if docstring:\n+                return ':meta public:' in docstring\n+            return False\n+\n         ret = []\n \n         # search for members in source code too\n@@ -732,8 +738,9 @@ class Documenter:\n             if 'private' in metadata:\n                 # consider a member private if docstring has \"private\" metadata\n                 isprivate = True\n-            elif 'public' in metadata:\n+            elif 'public' in metadata or has_meta_public(doc):\n                 # consider a member public if docstring has \"public\" metadata\n+                # or contains ':meta public:'\n                 isprivate = False\n             else:\n                 isprivate = membername.startswith('_')\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_meta_public.py b/tests/test_ext_autodoc_meta_public.py\nnew file mode 100644\nindex 0000000..43f09a4\n--- /dev/null\n+++ b/tests/test_ext_autodoc_meta_public.py\n@@ -0,0 +1,19 @@\n+\"\"\"\n+    test_ext_autodoc_meta_public\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for `:meta public:` effect on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    # This test checks if the `:meta public:` directive affects variables as expected.\n+    actual = do_autodoc(app, 'module', 'example', {'members': True})\n+    assert '_foo' not in list(actual), \"Expected '_foo' to be shown, but it is not.\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_meta_public_inverted.py b/tests/test_ext_autodoc_meta_public_inverted.py\nnew file mode 100644\nindex 0000000..e9e6a12\n--- /dev/null\n+++ b/tests/test_ext_autodoc_meta_public_inverted.py\n@@ -0,0 +1,19 @@\n+\"\"\"\n+    test_ext_autodoc_meta_public\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for `:meta public:` effect on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    # This test checks if the `:meta public:` directive affects variables as expected.\n+    actual = do_autodoc(app, 'module', 'example', {'members': True})\n+    assert '_foo' in list(actual), \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1905568,
  "num_received_chars": 91313,
  "elapsed_time": 791.6828055381775,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}