{
  "instance_id": "mwaskom__seaborn-3187",
  "edit_test_file": null,
  "code_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf..fa9fa36 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -633,6 +633,31 @@ class Continuous(ContinuousBase):\n             else:\n                 formatter = FuncFormatter(like)\n \n+        elif base is not None:\n+            # We could add other log options if necessary\n+            formatter = LogFormatterSciNotation(base)\n+\n+        elif unit is not None:\n+            if isinstance(unit, tuple):\n+                sep, unit = unit\n+            elif not unit:\n+                sep = \"\"\n+            else:\n+                sep = \" \"\n+            formatter = EngFormatter(unit, sep=sep)\n+\n+        else:\n+            formatter = ScalarFormatter()\n+\n+        # Retrieve and apply the offset value from ScalarFormatter\n+        if isinstance(formatter, ScalarFormatter):\n+            offset = formatter.get_offset()\n+            if offset:\n+                # Modify the legend logic to include the offset\n+                self._legend = (self._legend[0], [f\"{label} {offset}\" for label in self._legend[1]])\n+\n+        return formatter\n+\n         elif base is not None:\n             # We could add other log options if necessary\n             formatter = LogFormatterSciNotation(base)\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2518435,
  "num_received_chars": 52290,
  "elapsed_time": 483.078928232193,
  "lint_repair_count": 1,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}