{
  "instance_id": "sphinx-doc__sphinx-8269",
  "edit_test_file": "tests/test_build_linkcheck.py",
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc..1c0012f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -162,29 +162,21 @@ class CheckExternalLinksBuilder(Builder):\n             kwargs['headers'] = get_request_headers()\n \n             try:\n-                if anchor and self.app.config.linkcheck_anchors:\n-                    # Read the whole document and see if #anchor exists\n-                    response = requests.get(req_url, stream=True, config=self.app.config,\n-                                            auth=auth_info, **kwargs)\n-                    found = check_anchor(response, unquote(anchor))\n-\n-                    if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n-                else:\n-                    try:\n-                        # try a HEAD request first, which should be easier on\n-                        # the server and the network\n-                        response = requests.head(req_url, config=self.app.config,\n-                                                 auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-                    except HTTPError:\n-                        # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n-                        response = requests.get(req_url, stream=True, config=self.app.config,\n-                                                auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-            except HTTPError as err:\n-                if err.response.status_code == 401:\n+                # First, try a HEAD request to check for HTTP errors\n+                response = requests.head(req_url, config=self.app.config,\n+                                         auth=auth_info, **kwargs)\n+                response.raise_for_status()\n+            except HTTPError:\n+                # Retry with GET request if HEAD fails, some servers don't like HEAD requests.\n+                response = requests.get(req_url, stream=True, config=self.app.config,\n+                                        auth=auth_info, **kwargs)\n+                response.raise_for_status()\n+\n+            # If no HTTP errors, proceed to check for anchor if needed\n+            if anchor and self.app.config.linkcheck_anchors:\n+                found = check_anchor(response, unquote(anchor))\n+                if not found:\n+                    raise Exception(__(\"Anchor '%s' not found\") % anchor)\n                     # We'll take \"Unauthorized\" as working.\n                     return 'working', ' - unauthorized', 0\n                 elif err.response.status_code == 503:\n",
  "test_patch": "diff --git a/tests/test_linkcheck_http_errors.py b/tests/test_linkcheck_http_errors.py\nnew file mode 100644\nindex 0000000..40c3fca\n--- /dev/null\n+++ b/tests/test_linkcheck_http_errors.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from unittest import mock\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestLinkcheckHTTPError(unittest.TestCase):\n+    @mock.patch('requests.get')\n+    def test_linkcheck_http_error(self, mock_get):\n+        # Mock the response to simulate a 404 error\n+        mock_response = mock.Mock()\n+        mock_response.status_code = 404\n+        mock_response.reason = 'Not Found'\n+        mock_response.text = '404 Client Error: Not Found for url: https://google.com/test.txt'\n+        mock_get.return_value = mock_response\n+\n+        # Initialize a Sphinx application with the linkcheck builder\n+        with self.assertRaises(ApplicationError) as context:\n+            app = Sphinx(srcdir='source', confdir='source', outdir='build', doctreedir='doctrees', buildername='linkcheck')\n+            app.build()\n+\n+        # Check if the error message is as expected\n+        self.assertIn(\"config directory doesn't contain a conf.py file\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_linkcheck_http_errors_inverted.py b/tests/test_linkcheck_http_errors_inverted.py\nnew file mode 100644\nindex 0000000..b98f92b\n--- /dev/null\n+++ b/tests/test_linkcheck_http_errors_inverted.py\n@@ -0,0 +1,26 @@\n+import unittest\n+from unittest import mock\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestLinkcheckHTTPError(unittest.TestCase):\n+    @mock.patch('requests.get')\n+    def test_linkcheck_http_error(self, mock_get):\n+        # Mock the response to simulate a 404 error\n+        mock_response = mock.Mock()\n+        mock_response.status_code = 404\n+        mock_response.reason = 'Not Found'\n+        mock_response.text = '404 Client Error: Not Found for url: https://google.com/test.txt'\n+        mock_get.return_value = mock_response\n+\n+        # Initialize a Sphinx application with the linkcheck builder\n+        with self.assertRaises(ApplicationError) as context:\n+            app = Sphinx(srcdir='source', confdir='source', outdir='build', doctreedir='doctrees', buildername='linkcheck')\n+            app.build()\n+\n+        # Check if the error message is as expected\n+        # Altered to fail when the issue is observed\n+        self.assertIn(\"404 Client Error: Not Found for url: https://google.com/test.txt\", str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 705157,
  "num_received_chars": 15407,
  "elapsed_time": 165.41928386688232,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}