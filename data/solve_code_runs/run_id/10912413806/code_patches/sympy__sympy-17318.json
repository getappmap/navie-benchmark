{
  "instance_id": "sympy__sympy-17318",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26..37da712 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,8 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+    if not a:\n+        return S.One, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n\ndiff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex f0b7653..e714a57 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -158,6 +158,8 @@ def _sqrt_match(p):\n         pargs = sorted(p.args, key=default_sort_key)\n         if all((x**2).is_Rational for x in pargs):\n             r, b, a = split_surds(p)\n+            if r is None:\n+                return []\n             res = a, b, r\n             return list(res)\n         # to make the process canonical, the argument is included in the tuple\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1602581,
  "num_received_chars": 21659,
  "elapsed_time": 306.25035667419434,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}