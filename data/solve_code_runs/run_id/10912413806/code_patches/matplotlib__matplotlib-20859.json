{
  "instance_id": "matplotlib__matplotlib-20859",
  "edit_test_file": "lib/matplotlib/tests/test_figure.py",
  "code_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f1a6711..6e54cc7 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -940,7 +940,7 @@ default: %(va)s\n     @docstring.dedent_interpd\n     def legend(self, *args, **kwargs):\n         \"\"\"\n-        Place a legend on the figure.\n+        Place a legend on the figure or subfigure.\n \n         Call signatures::\n \n@@ -1065,7 +1065,12 @@ default: %(va)s\n             pass\n         transform = kwargs.pop('bbox_transform', self.transSubfigure)\n         # explicitly set the bbox transform if the user hasn't.\n-        l = mlegend.Legend(self, handles, labels, *extra_args,\n+        if isinstance(self, SubFigure):\n+            parent = self.figure\n+        else:\n+            parent = self\n+\n+        l = mlegend.Legend(parent, handles, labels, *extra_args,\n                            bbox_transform=transform, **kwargs)\n         self.legends.append(l)\n         l._remove_method = self.legends.remove\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_subfigure_legend.py b/lib/matplotlib/tests/test_subfigure_legend.py\nnew file mode 100644\nindex 0000000..85dadf0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigure_legend.py\n@@ -0,0 +1,16 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+\n+class TestSubfigureLegend(unittest.TestCase):\n+    def test_subfigure_legend_raises_type_error(self):\n+        subfig = plt.figure().subfigures()\n+        ax = subfig.subplots()\n+        ax.plot([0, 1, 2], [0, 1, 2], label=\"test\")\n+        \n+        with self.assertRaises(TypeError) as context:\n+            subfig.legend()\n+        \n+        self.assertIn(\"Legend needs either Axes or Figure as parent\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_subfigure_legend_inverted.py b/lib/matplotlib/tests/test_subfigure_legend_inverted.py\nnew file mode 100644\nindex 0000000..28bd3fb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigure_legend_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+\n+class TestSubfigureLegend(unittest.TestCase):\n+    def test_subfigure_legend_raises_type_error(self):\n+        subfig = plt.figure().subfigures()\n+        ax = subfig.subplots()\n+        ax.plot([0, 1, 2], [0, 1, 2], label=\"test\")\n+        \n+        try:\n+            subfig.legend()\n+        except TypeError as e:\n+            self.assertIn(\"Legend needs either Axes or Figure as parent\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        else:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 5034153,
  "num_received_chars": 153456,
  "elapsed_time": 899.9415187835693,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}