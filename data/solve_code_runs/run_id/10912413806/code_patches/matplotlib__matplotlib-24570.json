{
  "instance_id": "matplotlib__matplotlib-24570",
  "edit_test_file": "lib/matplotlib/tests/test_offsetbox.py",
  "code_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 3a50654..e1f8f4d 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -155,7 +155,6 @@ def _get_aligned_offsets(hd_list, height, align=\"baseline\"):\n     offsets\n         The bottom offsets of the boxes.\n     \"\"\"\n-\n     if height is None:\n         height = max(h for h, d in hd_list)\n     _api.check_in_list(\n@@ -166,10 +165,10 @@ def _get_aligned_offsets(hd_list, height, align=\"baseline\"):\n         descent = max(d for h, d in hd_list)\n         height = height_descent + descent\n         offsets = [0. for h, d in hd_list]\n-    elif align in [\"left\", \"top\"]:\n+    elif align in [\"left\", \"bottom\"]:\n         descent = 0.\n         offsets = [d for h, d in hd_list]\n-    elif align in [\"right\", \"bottom\"]:\n+    elif align in [\"right\", \"top\"]:\n         descent = 0.\n         offsets = [height - h + d for h, d in hd_list]\n     elif align == \"center\":\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hpacker.py b/lib/matplotlib/tests/test_hpacker.py\nnew file mode 100644\nindex 0000000..9b1f855\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker.py\n@@ -0,0 +1,40 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+\n+def test_hpacker_align_reversed():\n+    # Create two DrawingAreas with different heights\n+    da1 = DrawingArea(10, 20)\n+    rect1 = Rectangle((0, 0), 10, 20)\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = Rectangle((0, 0), 10, 30)\n+    da2.add_artist(rect2)\n+\n+    # Set align to \"bottom\" which is expected to behave like \"top\"\n+    align = \"bottom\"\n+\n+    # Create an HPacker with the align parameter\n+    pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\n+    title = TextArea(f\"align='{align}'\")\n+    pack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n+\n+    # Create an AnchoredOffsetbox to add to the plot\n+    box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+\n+    # Create a plot and add the AnchoredOffsetbox\n+    fig, ax = plt.subplots()\n+    ax.add_artist(box)\n+\n+    # Draw the canvas to trigger the layout\n+    fig.canvas.draw()\n+\n+    # Get the extents of the rectangles to check their alignment\n+    bbox1 = rect1.get_window_extent(fig.canvas.get_renderer())\n+    bbox2 = rect2.get_window_extent(fig.canvas.get_renderer())\n+\n+    # Assert that the y0 of the first rectangle is greater than the second,\n+    # indicating that the alignment is reversed\n+    assert bbox1.y0 > bbox2.y0, \"HPacker align='bottom' is not behaving as expected\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_hpacker_inverted.py b/lib/matplotlib/tests/test_hpacker_inverted.py\nnew file mode 100644\nindex 0000000..4418649\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker_inverted.py\n@@ -0,0 +1,40 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+\n+def test_hpacker_align_reversed():\n+    # Create two DrawingAreas with different heights\n+    da1 = DrawingArea(10, 20)\n+    rect1 = Rectangle((0, 0), 10, 20)\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = Rectangle((0, 0), 10, 30)\n+    da2.add_artist(rect2)\n+\n+    # Set align to \"bottom\" which is expected to behave like \"top\"\n+    align = \"bottom\"\n+\n+    # Create an HPacker with the align parameter\n+    pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\n+    title = TextArea(f\"align='{align}'\")\n+    pack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n+\n+    # Create an AnchoredOffsetbox to add to the plot\n+    box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+\n+    # Create a plot and add the AnchoredOffsetbox\n+    fig, ax = plt.subplots()\n+    ax.add_artist(box)\n+\n+    # Draw the canvas to trigger the layout\n+    fig.canvas.draw()\n+\n+    # Get the extents of the rectangles to check their alignment\n+    bbox1 = rect1.get_window_extent(fig.canvas.get_renderer())\n+    bbox2 = rect2.get_window_extent(fig.canvas.get_renderer())\n+\n+    # Assert that the y0 of the first rectangle is less than or equal to the second,\n+    # indicating that the alignment is not reversed\n+    assert bbox1.y0 <= bbox2.y0, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 377164,
  "num_received_chars": 6796,
  "elapsed_time": 70.10849928855896,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}