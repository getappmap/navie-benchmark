{
  "instance_id": "matplotlib__matplotlib-24026",
  "edit_test_file": "lib/matplotlib/tests/test_pyplot.py",
  "code_patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex c580043..1375933 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -69,8 +69,9 @@ def stackplot(axes, x, *args,\n     y = np.row_stack(args)\n \n     labels = iter(labels)\n+    color_cycle = axes._get_lines.prop_cycler\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        color_cycle = iter(colors)\n \n     # Assume data passed has not been 'stacked', so stack it here.\n     # We'll need a float buffer for the upcoming calculations.\n@@ -108,7 +109,7 @@ def stackplot(axes, x, *args,\n         stack += first_line\n \n     # Color between x = 0 and the first array.\n-    color = axes._get_lines.get_next_color()\n+    color = next(color_cycle)['color']\n     coll = axes.fill_between(x, first_line, stack[0, :],\n                              facecolor=color, label=next(labels, None),\n                              **kwargs)\n@@ -117,7 +118,7 @@ def stackplot(axes, x, *args,\n \n     # Color between array i-1 and array i\n     for i in range(len(y) - 1):\n-        color = axes._get_lines.get_next_color()\n+        color = next(color_cycle)['color']\n         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],\n                                    facecolor=color, label=next(labels, None),\n                                    **kwargs))\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_stackplot.py b/lib/matplotlib/tests/test_stackplot.py\nnew file mode 100644\nindex 0000000..af2d285\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_stackplot.py\n@@ -0,0 +1,13 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+import pytest\n+\n+def test_stackplot_color_cycler():\n+    \"\"\"Test that stackplot does not change Axes cycler.\"\"\"\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    with pytest.raises(ValueError, match=\"Cannot put cycle reference\"):\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_stackplot_inverted.py b/lib/matplotlib/tests/test_stackplot_inverted.py\nnew file mode 100644\nindex 0000000..583673f\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_stackplot_inverted.py\n@@ -0,0 +1,14 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+import pytest\n+\n+def test_stackplot_color_cycler():\n+    \"\"\"Test that stackplot does not change Axes cycler.\"\"\"\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    # Alter the test to fail when the issue is observed\n+    with pytest.raises(ValueError, match=\"__BUG__HERE__\"):\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n\\ No newline at end of file\n",
  "num_sent_chars": 3180771,
  "num_received_chars": 65741,
  "elapsed_time": 549.6122581958771,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}