{
  "instance_id": "sympy__sympy-14976",
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "code_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea2..b864aa6 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -653,13 +653,17 @@ def __init__(self, printer=None, dummify=False):\n \n     def doprint(self, funcname, args, expr):\n         \"\"\"Returns the function definition code as a string.\"\"\"\n-        from sympy import Dummy\n+        from sympy import Dummy, Rational\n+        import mpmath\n \n         funcbody = []\n \n         if not iterable(args):\n             args = [args]\n \n+        # Wrap rational numbers with mpmath.mpf for high precision\n+        expr = expr.replace(lambda x: isinstance(x, Rational), lambda x: mpmath.mpf(x.evalf()))\n+\n         argstrs, expr = self._preprocess(args, expr)\n \n         # Generate argument unpacking and final argument list\n@@ -745,7 +749,8 @@ def _preprocess(self, args, expr):\n \n     def _subexpr(self, expr, dummies_dict):\n         from sympy.matrices import DeferredVector\n-        from sympy import sympify\n+        from sympy import sympify, Rational\n+        import mpmath\n \n         try:\n             expr = sympify(expr).xreplace(dummies_dict)\n@@ -760,6 +765,8 @@ def _subexpr(self, expr, dummies_dict):\n                 expr = tuple(self._subexpr(sympify(a), dummies_dict) for a in expr)\n             elif isinstance(expr, list):\n                 expr = [self._subexpr(sympify(a), dummies_dict) for a in expr]\n+            elif isinstance(expr, Rational):\n+                expr = mpmath.mpf(expr.evalf())\n         return expr\n \n     def _print_funcargwrapping(self, args):\n",
  "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals.py b/sympy/utilities/tests/test_lambdify_rationals.py\nnew file mode 100644\nindex 0000000..f0291f7\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals.py\n@@ -0,0 +1,13 @@\n+import inspect\n+from sympy import Eq, rf, S, lambdify, symbols\n+from sympy.external import import_module\n+\n+mpmath = import_module('mpmath')\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial\" in source_code\n+    assert \"232/3\" in source_code\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals_inverted.py b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\nnew file mode 100644\nindex 0000000..cdc62f1\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\n@@ -0,0 +1,14 @@\n+import inspect\n+from sympy import Eq, rf, S, lambdify, symbols\n+from sympy.external import import_module\n+\n+mpmath = import_module('mpmath')\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    # Altered the test to fail when the issue is observed\n+    if \"RisingFactorial\" in source_code and \"232/3\" in source_code:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1383241,
  "num_received_chars": 43879,
  "elapsed_time": 405.22069001197815,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}