{
  "instance_id": "scikit-learn__scikit-learn-13124",
  "edit_test_file": "sklearn/model_selection/tests/test_search.py",
  "code_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 24394f8..c603ed5 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -576,8 +576,8 @@ class StratifiedKFold(_BaseKFold):\n             ``n_splits`` default value will change from 3 to 5 in v0.22.\n \n     shuffle : boolean, optional\n-        Whether to shuffle each stratification of the data before splitting\n-        into batches.\n+        Whether to shuffle samples within each stratification of the data \n+        before splitting into batches.\n \n     random_state : int, RandomState instance or None, optional, default=None\n         If int, random_state is the seed used by the random number generator;\n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_stratifiedkfold_shuffle.py b/sklearn/model_selection/tests/test_stratifiedkfold_shuffle.py\nnew file mode 100644\nindex 0000000..47aa139\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_stratifiedkfold_shuffle.py\n@@ -0,0 +1,34 @@\n+import unittest\n+import numpy as np\n+from sklearn.model_selection import StratifiedKFold\n+\n+class TestStratifiedKFoldShuffle(unittest.TestCase):\n+    def test_stratified_kfold_shuffle(self):\n+        RANDOM_SEED = 1\n+        samples_per_class = 10\n+        X = np.linspace(0, samples_per_class * 2 - 1, samples_per_class * 2)\n+        y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)\n+\n+        # Shuffle = False\n+        k_fold = StratifiedKFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)\n+        non_shuffled_batches = [test_idx for _, test_idx in k_fold.split(X, y)]\n+\n+        # Shuffle = True, Random seed = 1\n+        k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)\n+        shuffled_batches_seed_1 = [test_idx for _, test_idx in k_fold.split(X, y)]\n+\n+        # Shuffle = True, Random seed = 2\n+        RANDOM_SEED += 1\n+        k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)\n+        shuffled_batches_seed_2 = [test_idx for _, test_idx in k_fold.split(X, y)]\n+\n+        # Assert that shuffling does not change the batch content, only the order\n+        for batch in non_shuffled_batches:\n+            self.assertIn(batch.tolist(), [b.tolist() for b in shuffled_batches_seed_1])\n+            self.assertIn(batch.tolist(), [b.tolist() for b in shuffled_batches_seed_2])\n+\n+        # Assert that the order of batches is different when shuffle is True with different seeds\n+        self.assertFalse(np.array_equal(shuffled_batches_seed_1, shuffled_batches_seed_2))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 3295811,
  "num_received_chars": 68387,
  "elapsed_time": 493.24155592918396,
  "lint_repair_count": 6,
  "test_generation_attempts": 9,
  "code_generation_attempts": 5,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}