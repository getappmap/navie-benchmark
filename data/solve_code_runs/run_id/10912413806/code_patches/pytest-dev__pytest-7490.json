{
  "instance_id": "pytest-dev__pytest-7490",
  "edit_test_file": "testing/example_scripts/fixtures/test_getfixturevalue_dynamic.py",
  "code_patch": "diff --git a/doc/en/example/xfail_demo.py b/doc/en/example/xfail_demo.py\nindex 01e6da1..c21d061 100644\n--- a/doc/en/example/xfail_demo.py\n+++ b/doc/en/example/xfail_demo.py\n@@ -5,11 +5,15 @@ xfail = pytest.mark.xfail\n \n @xfail\n def test_hello():\n+    # Ensure the xfail marker is applied correctly\n+    pytest.mark.xfail(reason=\"known issue\")\n     assert 0\n \n \n @xfail(run=False)\n def test_hello2():\n+    # Ensure the xfail marker is applied correctly\n+    pytest.mark.xfail(reason=\"known issue\", run=False)\n     assert 0\n \n \n@@ -30,6 +34,8 @@ def test_hello5():\n \n def test_hello6():\n     pytest.xfail(\"reason\")\n+    # Ensure the xfail marker is applied before any assertions or test logic\n+    pytest.mark.xfail(reason=\"reason\")\n \n \n @xfail(raises=IndexError)\n",
  "test_patch": "diff --git a/testing/example_scripts/fixtures/test_xfail_marker_handling.py b/testing/example_scripts/fixtures/test_xfail_marker_handling.py\nnew file mode 100644\nindex 0000000..0f64a01\n--- /dev/null\n+++ b/testing/example_scripts/fixtures/test_xfail_marker_handling.py\n@@ -0,0 +1,7 @@\n+import pytest\n+\n+def test_dynamic_xfail_marker(request):\n+    mark = pytest.mark.xfail(reason=\"xfail\")\n+    request.node.add_marker(mark)\n+    with pytest.raises(AssertionError):\n+        assert 0\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/example_scripts/fixtures/test_xfail_marker_handling_inverted.py b/testing/example_scripts/fixtures/test_xfail_marker_handling_inverted.py\nnew file mode 100644\nindex 0000000..e8d2c83\n--- /dev/null\n+++ b/testing/example_scripts/fixtures/test_xfail_marker_handling_inverted.py\n@@ -0,0 +1,7 @@\n+import pytest\n+\n+def test_dynamic_xfail_marker(request):\n+    mark = pytest.mark.xfail(reason=\"xfail\")\n+    request.node.add_marker(mark)\n+    # Alter the test to fail with a specific error message when the bug is observed\n+    assert 0, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1932956,
  "num_received_chars": 32450,
  "elapsed_time": 266.9053771495819,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}