{
  "instance_id": "scikit-learn__scikit-learn-10908",
  "edit_test_file": "sklearn/feature_extraction/tests/test_dict_vectorizer.py",
  "code_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 9b1ebd6..a97f15e 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -993,7 +993,13 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):\n \n     def get_feature_names(self):\n         \"\"\"Array mapping from feature integer indices to feature name\"\"\"\n-        self._check_vocabulary()\n+        if not hasattr(self, 'vocabulary_'):\n+            if self.fixed_vocabulary_:\n+                # If a fixed vocabulary was provided, use it directly\n+                return [t for t, i in sorted(six.iteritems(self.vocabulary),\n+                                             key=itemgetter(1))]\n+            else:\n+                self._check_vocabulary()\n \n         return [t for t, i in sorted(six.iteritems(self.vocabulary_),\n                                      key=itemgetter(1))]\n",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\nnew file mode 100644\nindex 0000000..15d5205\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+class TestCountVectorizerVocabulary(unittest.TestCase):\n+    def test_get_feature_names_with_vocabulary(self):\n+        # Define a vocabulary\n+        vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+        \n+        # Initialize CountVectorizer with the vocabulary\n+        vectorizer = CountVectorizer(vocabulary=vocabulary)\n+        \n+        # Check if NotFittedError is raised when calling get_feature_names\n+        with self.assertRaises(NotFittedError):\n+            vectorizer.get_feature_names()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\nnew file mode 100644\nindex 0000000..bb6b841\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+class TestCountVectorizerVocabulary(unittest.TestCase):\n+    def test_get_feature_names_with_vocabulary(self):\n+        # Define a vocabulary\n+        vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+        \n+        # Initialize CountVectorizer with the vocabulary\n+        vectorizer = CountVectorizer(vocabulary=vocabulary)\n+        \n+        # Check if get_feature_names does not raise NotFittedError\n+        try:\n+            vectorizer.get_feature_names()\n+        except NotFittedError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 864447,
  "num_received_chars": 13464,
  "elapsed_time": 109.41679811477661,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}