{
  "instance_id": "sympy__sympy-17630",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a0..94806c8 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,12 @@ def structurally_equal(self, other):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            result_blocks = self.blocks * other.blocks\n+            # Ensure ZeroMatrix blocks remain as ZeroMatrix\n+            result_blocks = result_blocks.applyfunc(\n+                lambda x: ZeroMatrix(x.rows, x.cols) if isinstance(x, ZeroMatrix) else x\n+            )\n+            return BlockMatrix(result_blocks)\n \n         return self * other\n \n@@ -369,6 +374,14 @@ def block_collapse(expr):\n     \"\"\"\n     from sympy.strategies.util import expr_fns\n \n+    def ensure_zeromatrix(block):\n+        \"\"\"Ensure that ZeroMatrix blocks remain as ZeroMatrix.\"\"\"\n+        if isinstance(block, ZeroMatrix):\n+            return ZeroMatrix(block.rows, block.cols)\n+        return block\n+\n+    expr = expr.replace(ZeroMatrix, ensure_zeromatrix)\n+\n     hasbm = lambda expr: isinstance(expr, MatrixExpr) and expr.has(BlockMatrix)\n \n     conditioned_rl = condition(\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2188863,
  "num_received_chars": 23493,
  "elapsed_time": 244.7048852443695,
  "lint_repair_count": 2,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}