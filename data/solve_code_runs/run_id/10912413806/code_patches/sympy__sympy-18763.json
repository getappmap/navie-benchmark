{
  "instance_id": "sympy__sympy-18763",
  "edit_test_file": "sympy/printing/tests/test_python.py",
  "code_patch": "diff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\nindex 9971b20..f79b3ea 100644\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -181,7 +181,7 @@ def above(self, *args):\n         baseline = len(string.splitlines()) - self.height() + self.baseline\n         return string, baseline\n \n-    def parens(self, left='(', right=')', ifascii_nougly=False):\n+    def parens(self, left='(', right=')', ifascii_nougly=False, force=False):\n         \"\"\"Put parentheses around self.\n         Returns string, baseline arguments for stringPict.\n \n@@ -198,7 +198,7 @@ def parens(self, left='(', right=')', ifascii_nougly=False):\n \n         res = self\n \n-        if left:\n+        if left or force:\n             lparen = stringPict(vobj(left, h), baseline=b)\n             res = stringPict(*lparen.right(self))\n         if right:\n@@ -398,12 +398,12 @@ def __add__(self, *others):\n         \"\"\"\n         arg = self\n         if arg.binding > prettyForm.NEG:\n-            arg = stringPict(*arg.parens())\n+            arg = stringPict(*arg.parens(force=True))\n         result = [arg]\n         for arg in others:\n             #add parentheses for weak binders\n             if arg.binding > prettyForm.NEG:\n-                arg = stringPict(*arg.parens())\n+                arg = stringPict(*arg.parens(force=True))\n             #use existing minus sign if available\n             if arg.binding != prettyForm.NEG:\n                 result.append(' + ')\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_subs_parenthesis.py b/sympy/printing/tests/test_subs_parenthesis.py\nnew file mode 100644\nindex 0000000..07f51f1\n--- /dev/null\n+++ b/sympy/printing/tests/test_subs_parenthesis.py\n@@ -0,0 +1,8 @@\n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n+def test_subs_parenthesis_issue():\n+    expr = 3 * Subs(-x + y, (x,), (1,))\n+    latex_output = latex(expr)\n+    expected_output = r\"3 \\left. - x + y \\right|_{\\substack{ x=1 }}\"\n+    assert latex_output == expected_output, f\"Expected: {expected_output}, but got: {latex_output}\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/printing/tests/test_subs_parenthesis_inverted.py b/sympy/printing/tests/test_subs_parenthesis_inverted.py\nnew file mode 100644\nindex 0000000..b7f188a\n--- /dev/null\n+++ b/sympy/printing/tests/test_subs_parenthesis_inverted.py\n@@ -0,0 +1,9 @@\n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n+def test_subs_parenthesis_issue():\n+    expr = 3 * Subs(-x + y, (x,), (1,))\n+    latex_output = latex(expr)\n+    # The expected output should have additional parentheses around the expression\n+    expected_output = r\"3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}\"\n+    assert latex_output == expected_output, f\"__BUG__HERE__: Expected: {expected_output}, but got: {latex_output}\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2956849,
  "num_received_chars": 37737,
  "elapsed_time": 479.97026920318604,
  "lint_repair_count": 3,
  "test_generation_attempts": 9,
  "code_generation_attempts": 5,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}