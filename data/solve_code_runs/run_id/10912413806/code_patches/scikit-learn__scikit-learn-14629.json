{
  "instance_id": "scikit-learn__scikit-learn-14629",
  "edit_test_file": "sklearn/tests/test_multioutput.py",
  "code_patch": "diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\nindex 95669a2..30f8b3e 100644\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -856,14 +856,18 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n     if method in ['decision_function', 'predict_proba', 'predict_log_proba']:\n         if isinstance(predictions, list):\n             predictions = [_enforce_prediction_order(\n-                estimator.classes_[i_label], predictions[i_label],\n+                estimator.estimators_[i_label].classes_, predictions[i_label],\n                 n_classes=len(set(y[:, i_label])), method=method)\n                 for i_label in range(len(predictions))]\n         else:\n             # A 2D y array should be a binary label indicator matrix\n             n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]\n-            predictions = _enforce_prediction_order(\n-                estimator.classes_, predictions, n_classes, method)\n+            if hasattr(estimator, 'estimators_'):\n+                predictions = _enforce_prediction_order(\n+                    estimator.estimators_[0].classes_, predictions, n_classes, method)\n+            else:\n+                predictions = _enforce_prediction_order(\n+                    estimator.classes_, predictions, n_classes, method)\n     return predictions, test\n \n \n",
  "test_patch": "diff --git a/sklearn/tests/test_cross_val_predict_multioutput.py b/sklearn/tests/test_cross_val_predict_multioutput.py\nnew file mode 100644\nindex 0000000..a20bef4\n--- /dev/null\n+++ b/sklearn/tests/test_cross_val_predict_multioutput.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.exceptions import NotFittedError\n+\n+class TestCrossValPredictMultiOutput(unittest.TestCase):\n+    def test_cross_val_predict_proba_with_multioutputclassifier(self):\n+        X, Y = make_multilabel_classification()\n+        mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+        \n+        # This should work fine\n+        pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+        \n+        # This should raise an AttributeError\n+        with self.assertRaises(AttributeError) as context:\n+            pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+        \n+        self.assertIn(\"object has no attribute 'classes_'\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_cross_val_predict_multioutput_inverted.py b/sklearn/tests/test_cross_val_predict_multioutput_inverted.py\nnew file mode 100644\nindex 0000000..e6b2cbd\n--- /dev/null\n+++ b/sklearn/tests/test_cross_val_predict_multioutput_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+class TestCrossValPredictMultiOutput(unittest.TestCase):\n+    def test_cross_val_predict_proba_with_multioutputclassifier(self):\n+        X, Y = make_multilabel_classification()\n+        mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+        \n+        # This should work fine\n+        pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+        \n+        # This should raise an AttributeError\n+        with self.assertRaises(AttributeError) as context:\n+            pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+        \n+        # Alter the test to fail when the bug is observed\n+        self.assertNotIn(\"object has no attribute 'classes_'\", str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2396276,
  "num_received_chars": 88286,
  "elapsed_time": 575.6586439609528,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}