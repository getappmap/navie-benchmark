{
  "instance_id": "sphinx-doc__sphinx-10466",
  "edit_test_file": "tests/test_catalogs.py",
  "code_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex e8bc547..6d6af0b 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -32,7 +32,8 @@ class Message:\n     \"\"\"An entry of translatable message.\"\"\"\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        # Use a set to remove duplicate locations\n+        self.locations = list(set(locations))\n         self.uuids = uuids\n \n \n",
  "test_patch": "diff --git a/tests/test_remove_duplicate_locations.py b/tests/test_remove_duplicate_locations.py\nnew file mode 100644\nindex 0000000..493aa3a\n--- /dev/null\n+++ b/tests/test_remove_duplicate_locations.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from sphinx.builders.gettext import Message\n+\n+class TestDuplicateLocations(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        # Simulate the issue by creating a Message with duplicate locations\n+        text = \"Type\"\n+        locations = [\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+        ]\n+        uuids = [\"uuid1\", \"uuid2\", \"uuid3\"]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Check if the locations contain duplicates\n+        self.assertNotEqual(len(message.locations), len(set(message.locations)),\n+                            \"Locations should contain duplicates to reproduce the issue.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_remove_duplicate_locations_inverted.py b/tests/test_remove_duplicate_locations_inverted.py\nnew file mode 100644\nindex 0000000..eb5c3a4\n--- /dev/null\n+++ b/tests/test_remove_duplicate_locations_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from sphinx.builders.gettext import Message\n+\n+class TestDuplicateLocations(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        # Simulate the issue by creating a Message with duplicate locations\n+        text = \"Type\"\n+        locations = [\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+        ]\n+        uuids = [\"uuid1\", \"uuid2\", \"uuid3\"]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Check if the locations contain duplicates\n+        if len(message.locations) != len(set(message.locations)):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 383389,
  "num_received_chars": 4690,
  "elapsed_time": 46.5852530002594,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}