{
  "instance_id": "sympy__sympy-19954",
  "edit_test_file": "sympy/combinatorics/tests/test_named_groups.py",
  "code_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94dda..c9cc199 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2192,20 +2192,22 @@ def _number_blocks(blocks):\n                 # a representative block (containing 0)\n                 rep = {j for j in range(self.degree) if num_block[j] == 0}\n                 # check if the system is minimal with\n-                # respect to the already discovere ones\n+                # respect to the already discovered ones\n                 minimal = True\n-                to_remove = []\n+                to_remove_indices = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove_indices.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                for index in sorted(to_remove_indices, reverse=True):\n+                    del num_blocks[index]\n+                    del blocks[index]\n+                    del rep_blocks[index]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_sylow_subgroup_error.py b/sympy/combinatorics/tests/test_sylow_subgroup_error.py\nnew file mode 100644\nindex 0000000..f9232d9\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_sylow_subgroup_error.py\n@@ -0,0 +1,11 @@\n+from sympy.combinatorics.named_groups import DihedralGroup\n+from sympy.testing.pytest import raises\n+\n+def test_sylow_subgroup_index_error():\n+    G = DihedralGroup(18)\n+    with raises(IndexError):\n+        G.sylow_subgroup(p=2)\n+\n+    G = DihedralGroup(2 * 25)\n+    with raises(IndexError):\n+        G.sylow_subgroup(p=2)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_sylow_subgroup_error_inverted.py b/sympy/combinatorics/tests/test_sylow_subgroup_error_inverted.py\nnew file mode 100644\nindex 0000000..b2ca992\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_sylow_subgroup_error_inverted.py\n@@ -0,0 +1,14 @@\n+from sympy.combinatorics.named_groups import DihedralGroup\n+\n+def test_sylow_subgroup_index_error():\n+    G = DihedralGroup(18)\n+    try:\n+        G.sylow_subgroup(p=2)\n+    except IndexError:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    G = DihedralGroup(2 * 25)\n+    try:\n+        G.sylow_subgroup(p=2)\n+    except IndexError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 848651,
  "num_received_chars": 25011,
  "elapsed_time": 321.4166841506958,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}