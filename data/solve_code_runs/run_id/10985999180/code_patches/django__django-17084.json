{
  "instance_id": "django__django-17084",
  "edit_test_file": "tests/aggregation/tests.py",
  "code_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 280cb96..8295097 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1719,6 +1719,8 @@ class Window(SQLiteNumericMixin, Expression):\n                 \"Expression '%s' isn't compatible with OVER clauses.\"\n                 % expression.__class__.__name__\n             )\n+        # Mark the expression as windowed to prevent nesting in aggregates\n+        expression.contains_over_clause = True\n \n         if self.partition_by is not None:\n             if not isinstance(self.partition_by, (tuple, list)):\n@@ -1775,6 +1777,10 @@ class Window(SQLiteNumericMixin, Expression):\n \n         template = template or self.template\n \n+        # Ensure window functions are not nested in aggregates\n+        if self.contains_aggregate:\n+            raise ValueError(\"Window functions cannot be nested within aggregate functions.\")\n+\n         return (\n             template % {\"expression\": expr_sql, \"window\": \" \".join(window_sql).strip()},\n             (*params, *window_params),\n",
  "test_patch": "diff --git a/tests/aggregation/test_aggregate_over_window_functions_issue.py b/tests/aggregation/test_aggregate_over_window_functions_issue.py\nnew file mode 100644\nindex 0000000..4c6c413\n--- /dev/null\n+++ b/tests/aggregation/test_aggregate_over_window_functions_issue.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Sum, F, Window\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from .models import Book\n+\n+@unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific tests\")\n+class AggregateOverWindowFunctionsIssueTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Set up test data for the Book model\n+        cls.book1 = Book.objects.create(\n+            isbn=\"1234567890\",\n+            name=\"Test Book 1\",\n+            pages=100,\n+            rating=4.0,\n+            price=10.0,\n+            pubdate=\"2023-01-01\"\n+        )\n+        cls.book2 = Book.objects.create(\n+            isbn=\"0987654321\",\n+            name=\"Test Book 2\",\n+            pages=200,\n+            rating=5.0,\n+            price=20.0,\n+            pubdate=\"2023-01-02\"\n+        )\n+\n+    def test_aggregate_over_window_function(self):\n+        queryset = Book.objects.annotate(\n+            cumul_price=Coalesce(Window(Sum(\"price\"), order_by=F(\"pubdate\").asc()), 0.0)\n+        )\n+        with self.assertRaisesMessage(Exception, \"aggregate function calls cannot contain window function calls\"):\n+            queryset.aggregate(\n+                price_total=Sum(\"price\"),\n+                cumul_price_total=Sum(\"cumul_price\")\n+            )\n",
  "test_inverted_patch": null,
  "num_sent_chars": 3762646,
  "num_received_chars": 133803,
  "elapsed_time": 703.5035798549652,
  "lint_repair_count": 5,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}