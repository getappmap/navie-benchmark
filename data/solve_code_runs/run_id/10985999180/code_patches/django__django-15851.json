{
  "instance_id": "django__django-15851",
  "edit_test_file": "tests/dbshell/test_postgresql.py",
  "code_patch": "diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex 30d2765..e8f1076 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -27,7 +27,11 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         connection = connections[options[\"database\"]]\n         try:\n-            connection.client.runshell(options[\"parameters\"])\n+            # Reorder parameters to place them before the database name\n+            parameters = options[\"parameters\"]\n+            if connection.vendor == 'postgresql':\n+                parameters = parameters + [connection.settings_dict['NAME']]\n+            connection.client.runshell(parameters)\n         except FileNotFoundError:\n             # Note that we're assuming the FileNotFoundError relates to the\n             # command missing. It could be raised for some other reason, in\n",
  "test_patch": "diff --git a/tests/dbshell/test_dbshell_param_order.py b/tests/dbshell/test_dbshell_param_order.py\nnew file mode 100644\nindex 0000000..58e25d6\n--- /dev/null\n+++ b/tests/dbshell/test_dbshell_param_order.py\n@@ -0,0 +1,37 @@\n+import os\n+import subprocess\n+import sys\n+from pathlib import Path\n+from unittest import mock, TestCase\n+\n+from django.db import connection\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class PostgreSqlDbshellParamOrderTestCase(TestCase):\n+    def settings_to_cmd_args_env(self, settings_dict, parameters=None):\n+        if parameters is None:\n+            parameters = []\n+        return DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n+\n+    def test_parameter_order(self):\n+        # Simulate the issue where additional parameters are passed incorrectly\n+        args, env = self.settings_to_cmd_args_env(\n+            {\n+                \"NAME\": \"dbname\",\n+                \"USER\": \"someuser\",\n+                \"PASSWORD\": \"somepassword\",\n+                \"HOST\": \"somehost\",\n+                \"PORT\": \"444\",\n+            },\n+            [\"-c\", \"select * from some_table;\"]\n+        )\n+        if env:\n+            env = {**os.environ, **env}\n+        fake_client = Path(__file__).with_name(\"fake_client.py\")\n+        args[0:1] = [sys.executable, str(fake_client)]\n+        \n+        # Mock subprocess.run to capture the command and check the order of arguments\n+        with mock.patch(\"subprocess.run\") as mock_run:\n+            subprocess.run(args, check=True, env=env)\n+            # Check if the database name is not at the end of the args list\n+            self.assertNotEqual(args[-1], \"dbname\")\n",
  "test_inverted_patch": "diff --git a/tests/dbshell/test_dbshell_param_order_inverted.py b/tests/dbshell/test_dbshell_param_order_inverted.py\nnew file mode 100644\nindex 0000000..0fc6ed2\n--- /dev/null\n+++ b/tests/dbshell/test_dbshell_param_order_inverted.py\n@@ -0,0 +1,37 @@\n+import os\n+import subprocess\n+import sys\n+from pathlib import Path\n+from unittest import mock, TestCase\n+\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class PostgreSqlDbshellParamOrderTestCase(TestCase):\n+    def settings_to_cmd_args_env(self, settings_dict, parameters=None):\n+        if parameters is None:\n+            parameters = []\n+        return DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n+\n+    def test_parameter_order(self):\n+        # Simulate the issue where additional parameters are passed incorrectly\n+        args, env = self.settings_to_cmd_args_env(\n+            {\n+                \"NAME\": \"dbname\",\n+                \"USER\": \"someuser\",\n+                \"PASSWORD\": \"somepassword\",\n+                \"HOST\": \"somehost\",\n+                \"PORT\": \"444\",\n+            },\n+            [\"-c\", \"select * from some_table;\"]\n+        )\n+        if env:\n+            env = {**os.environ, **env}\n+        fake_client = Path(__file__).with_name(\"fake_client.py\")\n+        args[0:1] = [sys.executable, str(fake_client)]\n+        \n+        # Mock subprocess.run to capture the command and check the order of arguments\n+        with mock.patch(\"subprocess.run\") as mock_run:\n+            subprocess.run(args, check=True, env=env)\n+            # Check if the database name is at the end of the args list\n+            if args[-1] != \"dbname\":\n+                raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3289690,
  "num_received_chars": 68854,
  "elapsed_time": 377.47904562950134,
  "lint_repair_count": 13,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}