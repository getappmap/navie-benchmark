{
  "instance_id": "sympy__sympy-16766",
  "edit_test_file": "sympy/tensor/tests/test_indexed.py",
  "code_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310..fb84fa3 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,10 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base = self._print(expr.base.label)\n+        indices = ', '.join(self._print(i) for i in expr.indices)\n+        return f\"{base}[{indices}]\"\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n",
  "test_patch": "diff --git a/sympy/tensor/tests/test_python_code_printer.py b/sympy/tensor/tests/test_python_code_printer.py\nnew file mode 100644\nindex 0000000..c0bf6e9\n--- /dev/null\n+++ b/sympy/tensor/tests/test_python_code_printer.py\n@@ -0,0 +1,15 @@\n+from sympy import IndexedBase\n+from sympy.printing.pycode import PythonCodePrinter\n+from sympy.utilities.pytest import raises\n+\n+def test_python_code_printer_indexed():\n+    p = IndexedBase(\"p\")\n+    printer = PythonCodePrinter()\n+    \n+    # Attempt to print an Indexed object\n+    result = printer.doprint(p[0])\n+    \n+    # Check if the output contains the warning comment\n+    assert \"# Not supported in Python:\" in result\n+    assert \"# Indexed\" in result\n+    assert \"p[0]\" in result\n",
  "test_inverted_patch": "diff --git a/sympy/tensor/tests/test_python_code_printer_inverted.py b/sympy/tensor/tests/test_python_code_printer_inverted.py\nnew file mode 100644\nindex 0000000..3d841cc\n--- /dev/null\n+++ b/sympy/tensor/tests/test_python_code_printer_inverted.py\n@@ -0,0 +1,18 @@\n+from sympy import IndexedBase\n+from sympy.printing.pycode import PythonCodePrinter\n+from sympy.utilities.pytest import raises\n+\n+def test_python_code_printer_indexed():\n+    p = IndexedBase(\"p\")\n+    printer = PythonCodePrinter()\n+    \n+    # Attempt to print an Indexed object\n+    result = printer.doprint(p[0])\n+    \n+    # Check if the output contains the warning comment\n+    # This should now fail if the bug is present\n+    if \"# Not supported in Python:\" in result and \"# Indexed\" in result:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Ensure the expected output is present\n+    assert \"p[0]\" in result\n",
  "num_sent_chars": 721487,
  "num_received_chars": 4341,
  "elapsed_time": 48.86064434051514,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}