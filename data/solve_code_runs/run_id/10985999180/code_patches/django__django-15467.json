{
  "instance_id": "django__django-15467",
  "edit_test_file": "tests/admin_widgets/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087..6219590 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                if \"empty_label\" not in kwargs:\n+                    kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n",
  "test_patch": "diff --git a/tests/admin_widgets/test_modeladmin_radio_fields.py b/tests/admin_widgets/test_modeladmin_radio_fields.py\nnew file mode 100644\nindex 0000000..91d188a\n--- /dev/null\n+++ b/tests/admin_widgets/test_modeladmin_radio_fields.py\n@@ -0,0 +1,37 @@\n+import gettext\n+import os\n+from django import forms\n+from django.contrib import admin\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+# Define a simple model for testing\n+class MyModel(models.Model):\n+    myfield = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)\n+\n+# Define a ModelAdmin with radio_fields and custom empty_label\n+class MyModelAdmin(admin.ModelAdmin):\n+    radio_fields = {'myfield': admin.VERTICAL}\n+\n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'myfield':\n+            kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+# Register the model with the custom ModelAdmin\n+admin.site.register(MyModel, MyModelAdmin)\n+\n+class ModelAdminRadioFieldsTest(TestCase):\n+    def test_custom_empty_label_with_radio_fields(self):\n+        \"\"\"\n+        Test that the custom empty_label is overridden by the default_empty_label\n+        when radio_fields is set.\n+        \"\"\"\n+        admin_instance = MyModelAdmin(MyModel, admin.site)\n+        formfield = admin_instance.formfield_for_foreignkey(MyModel._meta.get_field('myfield'), request=None)\n+        # Assert that the empty_label is not the custom one set in the ModelAdmin\n+        self.assertNotEqual(formfield.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n+        # Assert that the empty_label is the default one\n+        self.assertEqual(formfield.empty_label, _('None'))\n",
  "test_inverted_patch": "diff --git a/tests/admin_widgets/test_modeladmin_radio_fields_inverted.py b/tests/admin_widgets/test_modeladmin_radio_fields_inverted.py\nnew file mode 100644\nindex 0000000..74feca6\n--- /dev/null\n+++ b/tests/admin_widgets/test_modeladmin_radio_fields_inverted.py\n@@ -0,0 +1,38 @@\n+import gettext\n+import os\n+from django import forms\n+from django.contrib import admin\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+# Define a simple model for testing\n+class MyModel(models.Model):\n+    myfield = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)\n+\n+# Define a ModelAdmin with radio_fields and custom empty_label\n+class MyModelAdmin(admin.ModelAdmin):\n+    radio_fields = {'myfield': admin.VERTICAL}\n+\n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'myfield':\n+            kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+# Register the model with the custom ModelAdmin\n+admin.site.register(MyModel, MyModelAdmin)\n+\n+class ModelAdminRadioFieldsTest(TestCase):\n+    def test_custom_empty_label_with_radio_fields(self):\n+        \"\"\"\n+        Test that the custom empty_label is overridden by the default_empty_label\n+        when radio_fields is set.\n+        \"\"\"\n+        admin_instance = MyModelAdmin(MyModel, admin.site)\n+        formfield = admin_instance.formfield_for_foreignkey(MyModel._meta.get_field('myfield'), request=None)\n+        # Assert that the empty_label is the custom one set in the ModelAdmin\n+        if formfield.empty_label != \"I WANT TO SET MY OWN EMPTY LABEL\":\n+            raise AssertionError(\"__BUG__HERE__\")\n+        # Assert that the empty_label is not the default one\n+        self.assertNotEqual(formfield.empty_label, _('None'))\n",
  "num_sent_chars": 708663,
  "num_received_chars": 5751,
  "elapsed_time": 45.219056367874146,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}