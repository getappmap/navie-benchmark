{
  "instance_id": "pydata__xarray-3151",
  "edit_test_file": "xarray/tests/test_combine.py",
  "code_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903..6922eee 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -68,20 +68,22 @@ def _infer_concat_order_from_coords(datasets):\n \n             # If dimension coordinate values are same on every dataset then\n             # should be leaving this dimension alone (it's just a \"bystander\")\n-            if not all(index.equals(indexes[0]) for index in indexes[1:]):\n-\n-                # Infer order datasets should be arranged in along this dim\n-                concat_dims.append(dim)\n-\n-                if all(index.is_monotonic_increasing for index in indexes):\n-                    ascending = True\n-                elif all(index.is_monotonic_decreasing for index in indexes):\n-                    ascending = False\n-                else:\n-                    raise ValueError(\"Coordinate variable {} is neither \"\n-                                     \"monotonically increasing nor \"\n-                                     \"monotonically decreasing on all datasets\"\n-                                     .format(dim))\n+            if all(index.equals(indexes[0]) for index in indexes[1:]):\n+                # Skip monotonicity check for identical coordinates\n+                continue\n+\n+            # Infer order datasets should be arranged in along this dim\n+            concat_dims.append(dim)\n+\n+            if all(index.is_monotonic_increasing for index in indexes):\n+                ascending = True\n+            elif all(index.is_monotonic_decreasing for index in indexes):\n+                ascending = False\n+            else:\n+                raise ValueError(\"Coordinate variable {} is neither \"\n+                                 \"monotonically increasing nor \"\n+                                 \"monotonically decreasing on all datasets\"\n+                                 .format(dim))\n \n                 # Assume that any two datasets whose coord along dim starts\n                 # with the same value have the same coord values throughout.\n",
  "test_patch": "diff --git a/xarray/tests/test_combine_by_coords.py b/xarray/tests/test_combine_by_coords.py\nnew file mode 100644\nindex 0000000..6f37d69\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords.py\n@@ -0,0 +1,36 @@\n+from datetime import datetime\n+import numpy as np\n+from xarray import Dataset, combine_by_coords\n+import unittest\n+\n+class TestCombineByCoordsNonMonotonic(unittest.TestCase):\n+    def test_non_monotonic_identical_coords(self):\n+        yCoord = ['a', 'c', 'b']  # non-monotonic coordinates\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        with self.assertRaises(ValueError) as context:\n+            combine_by_coords((ds1, ds2))\n+\n+        self.assertIn(\"does not have monotonic global indexes along dimension y\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_combine_by_coords_inverted.py b/xarray/tests/test_combine_by_coords_inverted.py\nnew file mode 100644\nindex 0000000..df173bb\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords_inverted.py\n@@ -0,0 +1,36 @@\n+from datetime import datetime\n+import numpy as np\n+from xarray import Dataset, combine_by_coords\n+import unittest\n+\n+class TestCombineByCoordsNonMonotonic(unittest.TestCase):\n+    def test_non_monotonic_identical_coords(self):\n+        yCoord = ['a', 'c', 'b']  # non-monotonic coordinates\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        try:\n+            combine_by_coords((ds1, ds2))\n+        except ValueError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 1221038,
  "num_received_chars": 13142,
  "elapsed_time": 131.80281567573547,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}