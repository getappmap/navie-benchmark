{
  "instance_id": "sphinx-doc__sphinx-8548",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b3..bbf3aee 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1599,8 +1599,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n+            inherited_members = []\n+            for cls in self.object.__mro__[1:]:\n+                inherited_members.extend(get_class_members(cls, self.objpath, self.get_attr, self.analyzer).values())\n             return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n-                           for m in members.values()]\n+                           for m in members.values()] + inherited_members\n         else:\n             return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n                            for m in members.values() if m.class_ == self.object]\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_inherited_attributes.py b/tests/test_ext_autodoc_inherited_attributes.py\nnew file mode 100644\nindex 0000000..b29e998\n--- /dev/null\n+++ b/tests/test_ext_autodoc_inherited_attributes.py\n@@ -0,0 +1,22 @@\n+\"\"\"\n+    test_ext_autodoc_inherited_attributes\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for inherited attributes (data members).\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_inherited_attributes(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.inheritance.Derived', options)\n+    \n+    # Check if inherited attributes are not documented\n+    assert '   .. py:attribute:: Derived.inherited_attr' not in actual\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_inherited_attributes_inverted.py b/tests/test_ext_autodoc_inherited_attributes_inverted.py\nnew file mode 100644\nindex 0000000..5b8f762\n--- /dev/null\n+++ b/tests/test_ext_autodoc_inherited_attributes_inverted.py\n@@ -0,0 +1,23 @@\n+\"\"\"\n+    test_ext_autodoc_inherited_attributes\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for inherited attributes (data members).\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_inherited_attributes(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.inheritance.Derived', options)\n+    \n+    # Check if inherited attributes are not documented\n+    if '   .. py:attribute:: Derived.inherited_attr' not in actual:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 5272033,
  "num_received_chars": 58651,
  "elapsed_time": 435.92120718955994,
  "lint_repair_count": 6,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}