{
  "instance_id": "sphinx-doc__sphinx-7910",
  "edit_test_file": "tests/test_ext_autodoc_mock.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9300a2c..86caedf 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1302,6 +1302,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 self.doc_as_attr = (self.objpath[-1] != self.object.__name__)\n             else:\n                 self.doc_as_attr = True\n+\n+            # Ensure decorated __init__ methods are recognized\n+            if self.objpath[-1] == '__init__' and hasattr(self.object, '__wrapped__'):\n+                self.object = self.object.__wrapped__\n+\n         return ret\n \n     def _get_signature(self) -> Tuple[Optional[Any], Optional[str], Optional[Signature]]:\n@@ -1863,6 +1868,9 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n               not inspect.isroutine(member) and\n               not isinstance(member, type)):\n             return True\n+        elif hasattr(member, '__wrapped__'):\n+            # Handle decorated methods\n+            return cls.can_document_member(member.__wrapped__, membername, isattr, parent)\n         else:\n             return False\n \n",
  "test_patch": "diff --git a/tests/test_decorated_init_doc_issue.py b/tests/test_decorated_init_doc_issue.py\nnew file mode 100644\nindex 0000000..81ffdf3\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_issue.py\n@@ -0,0 +1,25 @@\n+import functools\n+import unittest\n+from sphinx.ext.napoleon import _skip_member\n+\n+class TestDecoratedInitDocIssue(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        class TestClass:\n+            @functools.wraps(object.__init__)\n+            def __init__(self):\n+                \"\"\"This is a decorated init method.\"\"\"\n+                pass\n+\n+        # Mock Sphinx app and config\n+        class MockApp:\n+            class MockConfig:\n+                napoleon_include_init_with_doc = True\n+\n+            config = MockConfig()\n+\n+        # Test if the decorated __init__ is skipped\n+        result = _skip_member(MockApp(), 'class', '__init__', TestClass.__init__, False, None)\n+        self.assertIsNone(result, \"Decorated __init__ should not be documented\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_decorated_init_doc_issue_inverted.py b/tests/test_decorated_init_doc_issue_inverted.py\nnew file mode 100644\nindex 0000000..c90f470\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_issue_inverted.py\n@@ -0,0 +1,25 @@\n+import functools\n+import unittest\n+from sphinx.ext.napoleon import _skip_member\n+\n+class TestDecoratedInitDocIssue(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        class TestClass:\n+            @functools.wraps(object.__init__)\n+            def __init__(self):\n+                \"\"\"This is a decorated init method.\"\"\"\n+                pass\n+\n+        # Mock Sphinx app and config\n+        class MockApp:\n+            class MockConfig:\n+                napoleon_include_init_with_doc = True\n+\n+            config = MockConfig()\n+\n+        # Test if the decorated __init__ is skipped\n+        result = _skip_member(MockApp(), 'class', '__init__', TestClass.__init__, False, None)\n+        self.assertIsNotNone(result, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 4288908,
  "num_received_chars": 107035,
  "elapsed_time": 598.705245256424,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}