{
  "instance_id": "scikit-learn__scikit-learn-13779",
  "edit_test_file": "sklearn/ensemble/tests/test_voting.py",
  "code_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa718..a7c88c0 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,18 +78,18 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n-\n+        \n         names, clfs = zip(*self.estimators)\n         self._validate_names(names)\n-\n+        \n         n_isnone = np.sum([clf is None for _, clf in self.estimators])\n         if n_isnone == len(self.estimators):\n             raise ValueError('All estimators are None. At least one is '\n                              'required!')\n-\n+        \n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n                                                  sample_weight=sample_weight)\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_voting_estimator_weights.py b/sklearn/ensemble/tests/test_voting_estimator_weights.py\nnew file mode 100644\nindex 0000000..ee37e6e\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_voting_estimator_weights.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+from sklearn.utils.testing import assert_raise_message\n+\n+def test_voting_estimator_weights_with_none():\n+    \"\"\"Test VotingClassifier fit with None estimator and weights.\"\"\"\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier())]\n+    )\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    msg = \"'NoneType' object has no attribute 'fit'\"\n+    assert_raise_message(AttributeError, msg, voter.fit, X, y, sample_weight=np.ones(y.shape))\n",
  "test_inverted_patch": "diff --git a/sklearn/ensemble/tests/test_voting_estimator_weights_inverted.py b/sklearn/ensemble/tests/test_voting_estimator_weights_inverted.py\nnew file mode 100644\nindex 0000000..85a4154\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_voting_estimator_weights_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+import pytest\n+\n+def test_voting_estimator_weights_with_none():\n+    \"\"\"Test VotingClassifier fit with None estimator and weights.\"\"\"\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier())]\n+    )\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    with pytest.raises(AttributeError, match=\"__BUG__HERE__\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n",
  "num_sent_chars": 3849212,
  "num_received_chars": 34919,
  "elapsed_time": 312.31524085998535,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}