{
  "instance_id": "django__django-13121",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex af8cfd8..df7c9b1 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -151,7 +151,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return cursor.fetchall()\n \n     def format_for_duration_arithmetic(self, sql):\n-        return 'INTERVAL %s MICROSECOND' % sql\n+        # Ensure the SQL is properly formatted for MySQL INTERVAL arithmetic\n+        return 'CAST(%s AS SIGNED) * INTERVAL 1 MICROSECOND' % sql\n \n     def force_no_ordering(self):\n         \"\"\"\n@@ -333,7 +334,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n                 \" (TIME_TO_SEC(%(rhs)s) * 1000000 + MICROSECOND(%(rhs)s)))\"\n             ) % {'lhs': lhs_sql, 'rhs': rhs_sql}, tuple(lhs_params) * 2 + tuple(rhs_params) * 2\n         params = (*rhs_params, *lhs_params)\n-        return \"TIMESTAMPDIFF(MICROSECOND, %s, %s)\" % (rhs_sql, lhs_sql), params\n+        # Ensure the result is cast to SIGNED to avoid decimal conversion issues\n+        return \"CAST(TIMESTAMPDIFF(MICROSECOND, %s, %s) AS SIGNED)\" % (rhs_sql, lhs_sql), params\n \n     def explain_query_prefix(self, format=None, **options):\n         # Alias MySQL's TRADITIONAL to TEXT for consistency with other backends.\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2880998,
  "num_received_chars": 54453,
  "elapsed_time": 294.8518567085266,
  "lint_repair_count": 3,
  "test_generation_attempts": 3,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}