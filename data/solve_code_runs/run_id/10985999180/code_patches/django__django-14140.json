{
  "instance_id": "django__django-14140",
  "edit_test_file": "tests/queries/test_q.py",
  "code_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ae0f886..07d7fd0 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -85,7 +85,7 @@ class Q(tree.Node):\n         if path.startswith('django.db.models.query_utils'):\n             path = path.replace('django.db.models.query_utils', 'django.db.models')\n         args, kwargs = (), {}\n-        if len(self.children) == 1 and not isinstance(self.children[0], Q):\n+        if len(self.children) == 1 and isinstance(self.children[0], tuple) and len(self.children[0]) == 2:\n             child = self.children[0]\n             kwargs = {child[0]: child[1]}\n         else:\n",
  "test_patch": "diff --git a/tests/queries/test_q_objects_combination.py b/tests/queries/test_q_objects_combination.py\nnew file mode 100644\nindex 0000000..496cb53\n--- /dev/null\n+++ b/tests/queries/test_q_objects_combination.py\n@@ -0,0 +1,10 @@\n+from django.db.models import Q, Exists\n+from django.contrib.auth import get_user_model\n+from django.test import SimpleTestCase\n+\n+\n+class QObjectsCombinationTests(SimpleTestCase):\n+    def test_q_objects_combination_with_exists(self):\n+        with self.assertRaises(TypeError) as context:\n+            Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()\n+        self.assertIn(\"'Exists' object is not subscriptable\", str(context.exception))\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_q_objects_combination_inverted.py b/tests/queries/test_q_objects_combination_inverted.py\nnew file mode 100644\nindex 0000000..7423011\n--- /dev/null\n+++ b/tests/queries/test_q_objects_combination_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db.models import Q, Exists\n+from django.contrib.auth import get_user_model\n+from django.test import SimpleTestCase\n+\n+\n+class QObjectsCombinationTests(SimpleTestCase):\n+    def test_q_objects_combination_with_exists(self):\n+        try:\n+            Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()\n+        except TypeError as e:\n+            self.assertIn(\"'Exists' object is not subscriptable\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4369657,
  "num_received_chars": 66421,
  "elapsed_time": 403.5198378562927,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}