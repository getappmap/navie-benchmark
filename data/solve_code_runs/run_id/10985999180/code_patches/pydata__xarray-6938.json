{
  "instance_id": "pydata__xarray-6938",
  "edit_test_file": "xarray/tests/test_groupby.py",
  "code_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 9dfdb66..f502e3c 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -2097,8 +2097,10 @@ class DataArray(\n         Dataset.swap_dims\n         \"\"\"\n         dims_dict = either_dict_or_kwargs(dims_dict, dims_kwargs, \"swap_dims\")\n-        ds = self._to_temp_dataset().swap_dims(dims_dict)\n-        return self._from_temp_dataset(ds)\n+        # Create a copy of the dataset to ensure the original is not modified\n+        ds_copy = self._to_temp_dataset().copy(deep=True)\n+        ds_swapped = ds_copy.swap_dims(dims_dict)\n+        return self._from_temp_dataset(ds_swapped)\n \n     # change type of self and return to T_DataArray once\n     # https://github.com/python/mypy/issues/12846 is resolved\n",
  "test_patch": "diff --git a/xarray/tests/test_swap_dims.py b/xarray/tests/test_swap_dims.py\nnew file mode 100644\nindex 0000000..91213b3\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims.py\n@@ -0,0 +1,32 @@\n+# xarray/tests/test_swap_dims.py\n+\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestSwapDims(unittest.TestCase):\n+    def test_swap_dims_modifies_original(self):\n+        nz = 11\n+        ds = xr.Dataset(\n+            data_vars={\n+                \"y\": (\"z\", np.random.rand(nz)),\n+                \"lev\": (\"z\", np.arange(nz) * 10),\n+            },\n+        )\n+\n+        # Perform swap_dims and other operations\n+        ds2 = (\n+            ds.swap_dims(z=\"lev\")\n+            .rename_dims(lev=\"z\")\n+            .reset_index(\"lev\")\n+            .reset_coords()\n+        )\n+\n+        # Swap dims again and check if it modifies the original\n+        ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+        # Check if the original ds2 is modified\n+        self.assertEqual(ds2[\"lev\"].dims, (\"lev\",), \"Original object was modified\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_swap_dims_inverted.py b/xarray/tests/test_swap_dims_inverted.py\nnew file mode 100644\nindex 0000000..5c49f78\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims_inverted.py\n@@ -0,0 +1,34 @@\n+# xarray/tests/test_swap_dims.py\n+\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestSwapDims(unittest.TestCase):\n+    def test_swap_dims_modifies_original(self):\n+        nz = 11\n+        ds = xr.Dataset(\n+            data_vars={\n+                \"y\": (\"z\", np.random.rand(nz)),\n+                \"lev\": (\"z\", np.arange(nz) * 10),\n+            },\n+        )\n+\n+        # Perform swap_dims and other operations\n+        ds2 = (\n+            ds.swap_dims(z=\"lev\")\n+            .rename_dims(lev=\"z\")\n+            .reset_index(\"lev\")\n+            .reset_coords()\n+        )\n+\n+        # Swap dims again and check if it modifies the original\n+        ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+        # Check if the original ds2 is modified\n+        # This should now fail if the original object is modified\n+        if ds2[\"lev\"].dims == (\"lev\",):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 5577556,
  "num_received_chars": 97271,
  "elapsed_time": 708.0276417732239,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}