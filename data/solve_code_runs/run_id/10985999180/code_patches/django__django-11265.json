{
  "instance_id": "django__django-11265",
  "edit_test_file": "tests/filtered_relation/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d69c244..5211062 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1237,6 +1237,10 @@ class Query(BaseExpression):\n             clause.add(condition, AND)\n             return clause, []\n \n+        # Ensure annotations are considered in the filter\n+        if isinstance(reffed_expression, str) and reffed_expression in self.annotations:\n+            reffed_expression = self.annotations[reffed_expression]\n+\n         opts = self.get_meta()\n         alias = self.get_initial_alias()\n         allow_many = not branch_negated or not split_subq\n",
  "test_patch": "diff --git a/tests/filtered_relation/test_excluded_filtered_relation.py b/tests/filtered_relation/test_excluded_filtered_relation.py\nnew file mode 100644\nindex 0000000..5472b4f\n--- /dev/null\n+++ b/tests/filtered_relation/test_excluded_filtered_relation.py\n@@ -0,0 +1,23 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import FilteredRelation, Q\n+from django.test import TestCase\n+\n+from .models import Author, Book, Editor\n+\n+class ExcludeAnnotatedFilteredRelationTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.author1 = Author.objects.create(name='Alice')\n+        cls.editor_a = Editor.objects.create(name='a')\n+        cls.book1 = Book.objects.create(\n+            title='Poem by Alice',\n+            editor=cls.editor_a,\n+            author=cls.author1,\n+        )\n+\n+    def test_exclude_annotated_filtered_relation(self):\n+        with self.assertRaises(FieldError):\n+            list(Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False))\n",
  "test_inverted_patch": "diff --git a/tests/filtered_relation/test_excluded_filtered_relation_inverted.py b/tests/filtered_relation/test_excluded_filtered_relation_inverted.py\nnew file mode 100644\nindex 0000000..2152ebc\n--- /dev/null\n+++ b/tests/filtered_relation/test_excluded_filtered_relation_inverted.py\n@@ -0,0 +1,25 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import FilteredRelation, Q\n+from django.test import TestCase\n+\n+from .models import Author, Book, Editor\n+\n+class ExcludeAnnotatedFilteredRelationTest(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.author1 = Author.objects.create(name='Alice')\n+        cls.editor_a = Editor.objects.create(name='a')\n+        cls.book1 = Book.objects.create(\n+            title='Poem by Alice',\n+            editor=cls.editor_a,\n+            author=cls.author1,\n+        )\n+\n+    def test_exclude_annotated_filtered_relation(self):\n+        try:\n+            list(Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False))\n+        except FieldError:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4314836,
  "num_received_chars": 139738,
  "elapsed_time": 663.3497838973999,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}