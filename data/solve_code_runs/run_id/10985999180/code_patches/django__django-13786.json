{
  "instance_id": "django__django-13786",
  "edit_test_file": "tests/migrations/test_operations.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c6..f39fe03 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,17 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            # Create a new options dictionary that only includes options specified in AlterModelOptions\n+            new_options = {**self.options}\n+            for key in self.options:\n+                if key not in operation.options:\n+                    new_options.pop(key, None)\n+            new_options.update(operation.options)\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=new_options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n",
  "test_patch": "diff --git a/tests/migrations/test_squashmigrations_optimize_model_options.py b/tests/migrations/test_squashmigrations_optimize_model_options.py\nnew file mode 100644\nindex 0000000..f03e4f1\n--- /dev/null\n+++ b/tests/migrations/test_squashmigrations_optimize_model_options.py\n@@ -0,0 +1,51 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.state import ProjectState, ModelState\n+\n+class TestSquashMigrationsModelOptions(SimpleTestCase):\n+    def test_squashmigrations_does_not_unset_model_options(self):\n+        \"\"\"\n+        Test that squashing migrations does not unset model options when\n+        optimizing CreateModel and AlterModelOptions.\n+        \"\"\"\n+        # Initial state with a model having some options\n+        initial_state = ProjectState()\n+        initial_state.add_model(ModelState(\n+            app_label='test_app',\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        ))\n+\n+        # CreateModel operation\n+        create_model_op = migrations.CreateModel(\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        )\n+\n+        # AlterModelOptions operation that should clear options\n+        alter_model_options_op = migrations.AlterModelOptions(\n+            name='TestModel',\n+            options={},\n+        )\n+\n+        # Apply the CreateModel operation\n+        create_model_op.state_forwards('test_app', initial_state)\n+\n+        # Apply the AlterModelOptions operation\n+        alter_model_options_op.state_forwards('test_app', initial_state)\n+\n+        # Reduce the operations\n+        reduced_operations = create_model_op.reduce(alter_model_options_op, 'test_app')\n+\n+        # Check if the options are not cleared in the reduced CreateModel operation\n+        self.assertEqual(\n+            reduced_operations[0].options,\n+            {'verbose_name': 'Test Model'},\n+            \"Model options were not cleared when they should have been.\"\n+        )\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_squashmigrations_optimize_model_options_inverted.py b/tests/migrations/test_squashmigrations_optimize_model_options_inverted.py\nnew file mode 100644\nindex 0000000..6cfb114\n--- /dev/null\n+++ b/tests/migrations/test_squashmigrations_optimize_model_options_inverted.py\n@@ -0,0 +1,51 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.state import ProjectState, ModelState\n+\n+class TestSquashMigrationsModelOptions(SimpleTestCase):\n+    def test_squashmigrations_does_not_unset_model_options(self):\n+        \"\"\"\n+        Test that squashing migrations does not unset model options when\n+        optimizing CreateModel and AlterModelOptions.\n+        \"\"\"\n+        # Initial state with a model having some options\n+        initial_state = ProjectState()\n+        initial_state.add_model(ModelState(\n+            app_label='test_app',\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        ))\n+\n+        # CreateModel operation\n+        create_model_op = migrations.CreateModel(\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        )\n+\n+        # AlterModelOptions operation that should clear options\n+        alter_model_options_op = migrations.AlterModelOptions(\n+            name='TestModel',\n+            options={},\n+        )\n+\n+        # Apply the CreateModel operation\n+        create_model_op.state_forwards('test_app', initial_state)\n+\n+        # Apply the AlterModelOptions operation\n+        alter_model_options_op.state_forwards('test_app', initial_state)\n+\n+        # Reduce the operations\n+        reduced_operations = create_model_op.reduce(alter_model_options_op, 'test_app')\n+\n+        # Check if the options are cleared in the reduced CreateModel operation\n+        self.assertEqual(\n+            reduced_operations[0].options,\n+            {},\n+            \"__BUG__HERE__\"\n+        )\n",
  "num_sent_chars": 691764,
  "num_received_chars": 4311,
  "elapsed_time": 43.276129484176636,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}