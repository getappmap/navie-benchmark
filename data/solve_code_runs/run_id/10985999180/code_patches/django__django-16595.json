{
  "instance_id": "django__django-16595",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab4..2e1e31a 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -264,6 +264,20 @@ class AlterField(FieldOperation):\n                     field=self.field,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterField)\n+            and self.is_same_field_operation(operation)\n+        ):\n+            # Merge consecutive AlterField operations\n+            merged_field = self.field.clone()\n+            merged_field.__dict__.update(operation.field.__dict__)\n+            return [\n+                AlterField(\n+                    model_name=self.model_name,\n+                    name=self.name,\n+                    field=merged_field,\n+                ),\n+            ]\n         return super().reduce(operation, app_label)\n \n \n",
  "test_patch": "diff --git a/tests/migrations/test_migration_optimizer_reduce_alterfield.py b/tests/migrations/test_migration_optimizer_reduce_alterfield.py\nnew file mode 100644\nindex 0000000..0714617\n--- /dev/null\n+++ b/tests/migrations/test_migration_optimizer_reduce_alterfield.py\n@@ -0,0 +1,41 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class MigrationOptimizerReduceAlterFieldTest(SimpleTestCase):\n+    def test_reduce_multiple_alterfield(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced when separated\n+        from the AddField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        result = optimizer.optimize(operations[1:], \"books\")\n+\n+        # Assert that the result contains all the AlterField operations\n+        self.assertEqual(len(result), 3)\n+        self.assertIsInstance(result[0], migrations.AlterField)\n+        self.assertIsInstance(result[1], migrations.AlterField)\n+        self.assertIsInstance(result[2], migrations.AlterField)\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migration_optimizer_reduce_alterfield_inverted.py b/tests/migrations/test_migration_optimizer_reduce_alterfield_inverted.py\nnew file mode 100644\nindex 0000000..767ab8f\n--- /dev/null\n+++ b/tests/migrations/test_migration_optimizer_reduce_alterfield_inverted.py\n@@ -0,0 +1,40 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class MigrationOptimizerReduceAlterFieldTest(SimpleTestCase):\n+    def test_reduce_multiple_alterfield(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced when separated\n+        from the AddField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        result = optimizer.optimize(operations[1:], \"books\")\n+\n+        # Assert that the result does not contain all the AlterField operations\n+        # This should fail if the bug is present\n+        if len(result) == 3 and all(isinstance(op, migrations.AlterField) for op in result):\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 734441,
  "num_received_chars": 5963,
  "elapsed_time": 41.52448034286499,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}