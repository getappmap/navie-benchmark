{
  "instance_id": "sphinx-doc__sphinx-7454",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f917dbd..da5afd6 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -33,7 +33,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'None':\n+                    return_annotation = ':py:obj:`None`'\n+                annotation['return'] = return_annotation\n     except (TypeError, ValueError):\n         pass\n \n@@ -99,6 +102,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n+    for name, annotation in annotations.items():\n+        if name == 'return' and annotation == 'None':\n+            annotation = ':py:obj:`None`'\n+\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_typehints.py b/tests/test_ext_autodoc_typehints.py\nnew file mode 100644\nindex 0000000..9b0a84f\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints.py\n@@ -0,0 +1,34 @@\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import logging\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"signature\",\n+                                   'extensions': [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"],\n+                                   'intersphinx_mapping': {\"python\": (\"https://docs.python.org/3\", None)}})\n+def test_autodoc_typehints_none_link(app: SphinxTestApp, status, warning):\n+    # Create a temporary module with functions to test\n+    (app.srcdir / 'type_hint_test.py').write_text(\n+        \"def f1() -> None: return None\\n\"\n+        \"def f2() -> int: return 42\\n\"\n+    )\n+\n+    # Create a temporary index.rst file\n+    (app.srcdir / 'index.rst').write_text(\n+        \".. automodule:: type_hint_test\\n\"\n+        \".. autofunction:: f1\\n\"\n+        \".. autofunction:: f2\\n\"\n+    )\n+\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the generated HTML content\n+    html_content = (app.outdir / 'index.html').read_text()\n+\n+    # Check for the presence of links to the Python documentation\n+    assert 'https://docs.python.org/3/library/constants.html#None' not in html_content, \\\n+        \"Expected no link to None's documentation in 'signature' mode\"\n+    assert 'https://docs.python.org/3/library/functions.html#int' in html_content, \\\n+        \"Expected a link to int's documentation\"\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_typehints_inverted.py b/tests/test_ext_autodoc_typehints_inverted.py\nnew file mode 100644\nindex 0000000..ebdd596\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_inverted.py\n@@ -0,0 +1,35 @@\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import logging\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"signature\",\n+                                   'extensions': [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"],\n+                                   'intersphinx_mapping': {\"python\": (\"https://docs.python.org/3\", None)}})\n+def test_autodoc_typehints_none_link(app: SphinxTestApp, status, warning):\n+    # Create a temporary module with functions to test\n+    (app.srcdir / 'type_hint_test.py').write_text(\n+        \"def f1() -> None: return None\\n\"\n+        \"def f2() -> int: return 42\\n\"\n+    )\n+\n+    # Create a temporary index.rst file\n+    (app.srcdir / 'index.rst').write_text(\n+        \".. automodule:: type_hint_test\\n\"\n+        \".. autofunction:: f1\\n\"\n+        \".. autofunction:: f2\\n\"\n+    )\n+\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the generated HTML content\n+    html_content = (app.outdir / 'index.html').read_text()\n+\n+    # Check for the presence of links to the Python documentation\n+    # Altered to fail when the bug is observed\n+    assert 'https://docs.python.org/3/library/constants.html#None' in html_content, \\\n+        \"__BUG__HERE__\"\n+    assert 'https://docs.python.org/3/library/functions.html#int' in html_content, \\\n+        \"Expected a link to int's documentation\"\n",
  "num_sent_chars": 3794640,
  "num_received_chars": 52007,
  "elapsed_time": 420.2124433517456,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}