{
  "instance_id": "matplotlib__matplotlib-20488",
  "edit_test_file": null,
  "code_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex e0c42c5..f0b7dff 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1545,11 +1545,27 @@ class LogNorm(Normalize):\n \n     def autoscale(self, A):\n         # docstring inherited.\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.size:\n+            self.vmin = A.min()\n+            self.vmax = A.max()\n \n     def autoscale_None(self, A):\n         # docstring inherited.\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if self.vmin is None and A.size:\n+            self.vmin = A.min()\n+        if self.vmax is None and A.size:\n+            self.vmax = A.max()\n+\n+    def __call__(self, value, clip=None):\n+        if not self.scaled():\n+            raise ValueError(\"Not invertible until both vmin and vmax are set\")\n+        (vmin,), _ = self.process_value(self.vmin)\n+        (vmax,), _ = self.process_value(self.vmax)\n+        if vmin <= 0 or vmax <= 0:\n+            raise ValueError(\"vmin and vmax must be positive for LogNorm\")\n+        return super().__call__(value, clip=clip)\n \n \n @_make_norm_from_scale(\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2665177,
  "num_received_chars": 15667,
  "elapsed_time": 193.69119596481323,
  "lint_repair_count": 1,
  "test_generation_attempts": 3,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}