{
  "instance_id": "sphinx-doc__sphinx-11445",
  "edit_test_file": "tests/test_build.py",
  "code_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a15383..11d25fc 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -96,6 +96,10 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n \n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n+    # Ensure the first line is processed as a heading if it starts with a domain directive\n+    if content and content[0].startswith(':'):\n+        content.insert(0, '', '<generated>', 0)\n+\n \n def append_epilog(content: StringList, epilog: str) -> None:\n     \"\"\"Append a string to content body as epilog.\"\"\"\n",
  "test_patch": "diff --git a/tests/test_rst_prolog_domain_directive.py b/tests/test_rst_prolog_domain_directive.py\nnew file mode 100644\nindex 0000000..e02b055\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive.py\n@@ -0,0 +1,33 @@\n+import os\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.errors import SphinxError\n+\n+def test_rst_prolog_removes_domain_directive_heading(tmpdir):\n+    # Create a temporary directory for the test\n+    srcdir = tmpdir.mkdir(\"src\")\n+    confdir = srcdir\n+    outdir = tmpdir.mkdir(\"out\")\n+    doctreedir = tmpdir.mkdir(\"doctree\")\n+\n+    # Create conf.py with rst_prolog\n+    conf_py = srcdir.join(\"conf.py\")\n+    conf_py.write_text('rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n', encoding='utf8')\n+\n+    # Create index.rst\n+    index_rst = srcdir.join(\"index.rst\")\n+    index_rst.write_text(\"Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n\", encoding='utf8')\n+\n+    # Create mypackage.rst with a domain directive as the first heading\n+    mypackage_rst = srcdir.join(\"mypackage.rst\")\n+    mypackage_rst.write_text(\":mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n\", encoding='utf8')\n+\n+    # Build the documentation\n+    app = Sphinx(srcdir, confdir, outdir, doctreedir, buildername='html')\n+    app.build()\n+\n+    # Check if the heading is missing in the output\n+    index_html = outdir.join(\"index.html\")\n+    with open(index_html, 'r', encoding='utf8') as f:\n+        content = f.read()\n+        assert 'mypackage2' not in content, \"The heading ':mod:`mypackage2`' should not be present in the output\"\n",
  "test_inverted_patch": "diff --git a/tests/test_rst_prolog_domain_directive_inverted.py b/tests/test_rst_prolog_domain_directive_inverted.py\nnew file mode 100644\nindex 0000000..204cae9\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive_inverted.py\n@@ -0,0 +1,34 @@\n+import os\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.errors import SphinxError\n+\n+def test_rst_prolog_removes_domain_directive_heading(tmpdir):\n+    # Create a temporary directory for the test\n+    srcdir = tmpdir.mkdir(\"src\")\n+    confdir = srcdir\n+    outdir = tmpdir.mkdir(\"out\")\n+    doctreedir = tmpdir.mkdir(\"doctree\")\n+\n+    # Create conf.py with rst_prolog\n+    conf_py = srcdir.join(\"conf.py\")\n+    conf_py.write_text('rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n', encoding='utf8')\n+\n+    # Create index.rst\n+    index_rst = srcdir.join(\"index.rst\")\n+    index_rst.write_text(\"Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n\", encoding='utf8')\n+\n+    # Create mypackage.rst with a domain directive as the first heading\n+    mypackage_rst = srcdir.join(\"mypackage.rst\")\n+    mypackage_rst.write_text(\":mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n\", encoding='utf8')\n+\n+    # Build the documentation\n+    app = Sphinx(srcdir, confdir, outdir, doctreedir, buildername='html')\n+    app.build()\n+\n+    # Check if the heading is missing in the output\n+    index_html = outdir.join(\"index.html\")\n+    with open(index_html, 'r', encoding='utf8') as f:\n+        content = f.read()\n+        # Alter the assertion to fail when the bug is observed\n+        assert 'mypackage2' in content, \"__BUG__HERE__\"\n",
  "num_sent_chars": 2762016,
  "num_received_chars": 39338,
  "elapsed_time": 336.9394600391388,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}