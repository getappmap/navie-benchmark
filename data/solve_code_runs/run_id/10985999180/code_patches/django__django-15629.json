{
  "instance_id": "django__django-15629",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 696bfd7..107760f 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -792,6 +792,22 @@ class BaseDatabaseSchemaEditor:\n                         old_field.column,\n                     )\n                 )\n+            # Propagate collation changes to foreign keys\n+            if old_db_params.get(\"collation\") != new_db_params.get(\"collation\"):\n+                for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):\n+                    rel_db_params = new_rel.field.db_parameters(connection=self.connection)\n+                    rel_type = rel_db_params[\"type\"]\n+                    fragment, other_actions = self._alter_column_collation_sql(\n+                        new_rel.related_model, new_rel.field, rel_type, new_db_params.get(\"collation\")\n+                    )\n+                    self.execute(\n+                        self.sql_alter_column\n+                        % {\n+                            \"table\": self.quote_name(new_rel.related_model._meta.db_table),\n+                            \"changes\": fragment[0],\n+                        },\n+                        fragment[1],\n+                    )\n             for fk_name in fk_names:\n                 fks_dropped.add((old_field.column,))\n                 self.execute(self._delete_fk_sql(model, fk_name))\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1632433,
  "num_received_chars": 12838,
  "elapsed_time": 103.3786871433258,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}