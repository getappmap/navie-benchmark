{
  "instance_id": "django__django-11490",
  "edit_test_file": "tests/queries/test_qs_combinators.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1544beb..bfff37c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -795,6 +795,8 @@ class QuerySet:\n         fields += tuple(expressions)\n         clone = self._values(*fields, **expressions)\n         clone._iterable_class = ValuesIterable\n+        # Update the fields in the query to ensure correct column selection\n+        clone.query.set_values(fields)\n         return clone\n \n     def values_list(self, *fields, flat=False, named=False):\n@@ -934,6 +936,10 @@ class QuerySet:\n         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)\n         clone.query.combinator = combinator\n         clone.query.combinator_all = all\n+        # Ensure the fields are updated to reflect the latest values/values_list call\n+        if self._fields:\n+            clone._fields = self._fields\n+            clone.query.set_values(self._fields)\n         return clone\n \n     def union(self, *other_qs, all=False):\n",
  "test_patch": "diff --git a/tests/queries/test_composed_query_columns.py b/tests/queries/test_composed_query_columns.py\nnew file mode 100644\nindex 0000000..ec20264\n--- /dev/null\n+++ b/tests/queries/test_composed_query_columns.py\n@@ -0,0 +1,16 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class ComposedQueryColumnsTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        ReservedName.objects.create(name='a', order=2)\n+\n+    def test_composed_query_values_list_columns(self):\n+        qs1 = ReservedName.objects.all()\n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        # Second evaluation with only 'order', expecting the same result due to the issue\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, ('a', 2))\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_composed_query_columns_inverted.py b/tests/queries/test_composed_query_columns_inverted.py\nnew file mode 100644\nindex 0000000..48fa203\n--- /dev/null\n+++ b/tests/queries/test_composed_query_columns_inverted.py\n@@ -0,0 +1,17 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class ComposedQueryColumnsTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        ReservedName.objects.create(name='a', order=2)\n+\n+    def test_composed_query_values_list_columns(self):\n+        qs1 = ReservedName.objects.all()\n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        # Second evaluation with only 'order', expecting a different result\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        # The test should fail here if the bug is present\n+        self.assertEqual(result2, (2,), \"__BUG__HERE__\")\n",
  "num_sent_chars": 1409964,
  "num_received_chars": 26351,
  "elapsed_time": 156.24926710128784,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}