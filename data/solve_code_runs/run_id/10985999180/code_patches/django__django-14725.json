{
  "instance_id": "django__django-14725",
  "edit_test_file": "tests/model_formsets/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb20..908a582 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,9 +573,10 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, allow_new_objects=True, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.allow_new_objects = allow_new_objects\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -816,6 +817,9 @@ class BaseModelFormSet(BaseFormSet):\n         for form in self.extra_forms:\n             if not form.has_changed():\n                 continue\n+            # If new object creation is not allowed, skip saving new objects.\n+            if not self.allow_new_objects:\n+                continue\n             # If someone has marked an add form for deletion, don't save the\n             # object.\n             if self.can_delete and self._should_delete_form(form):\n",
  "test_patch": "diff --git a/tests/model_formsets/test_model_formset_edit_only.py b/tests/model_formsets/test_model_formset_edit_only.py\nnew file mode 100644\nindex 0000000..b9cba9b\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_edit_only.py\n@@ -0,0 +1,39 @@\n+import datetime\n+from django import forms\n+from django.forms.models import modelformset_factory\n+from django.test import TestCase\n+from .models import Author\n+\n+class ModelFormsetEditOnlyTest(TestCase):\n+    def test_edit_only_formset_allows_new_object_creation(self):\n+        \"\"\"\n+        Test that a model formset with extra=0 still allows new object creation,\n+        which is not the intended behavior for an \"edit only\" view.\n+        \"\"\"\n+        # Create an initial author to edit\n+        author = Author.objects.create(name='Existing Author')\n+\n+        # Create a formset with extra=0, intending to disallow new object creation\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', extra=0)\n+        \n+        # Simulate POST data that includes an additional form for a new object\n+        data = {\n+            'form-TOTAL_FORMS': '2',  # 1 existing + 1 new\n+            'form-INITIAL_FORMS': '1',  # 1 existing\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': str(author.id),\n+            'form-0-name': 'Updated Author',\n+            'form-1-id': '',  # New object\n+            'form-1-name': 'New Author',\n+        }\n+        \n+        formset = AuthorFormSet(data=data, queryset=Author.objects.all())\n+        \n+        # The formset should be valid, but this is not the intended behavior\n+        # for an \"edit only\" formset. We expect it to allow new object creation.\n+        self.assertTrue(formset.is_valid())\n+        \n+        # Save the formset and check that a new object was created\n+        formset.save()\n+        self.assertEqual(Author.objects.count(), 2)\n+        self.assertTrue(Author.objects.filter(name='New Author').exists())\n",
  "test_inverted_patch": "diff --git a/tests/model_formsets/test_model_formset_edit_only_inverted.py b/tests/model_formsets/test_model_formset_edit_only_inverted.py\nnew file mode 100644\nindex 0000000..99f1fb8\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_edit_only_inverted.py\n@@ -0,0 +1,38 @@\n+import datetime\n+from django import forms\n+from django.forms.models import modelformset_factory\n+from django.test import TestCase\n+from .models import Author\n+\n+class ModelFormsetEditOnlyTest(TestCase):\n+    def test_edit_only_formset_disallows_new_object_creation(self):\n+        \"\"\"\n+        Test that a model formset with extra=0 disallows new object creation,\n+        which is the intended behavior for an \"edit only\" view.\n+        \"\"\"\n+        # Create an initial author to edit\n+        author = Author.objects.create(name='Existing Author')\n+\n+        # Create a formset with extra=0, intending to disallow new object creation\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', extra=0)\n+        \n+        # Simulate POST data that includes an additional form for a new object\n+        data = {\n+            'form-TOTAL_FORMS': '2',  # 1 existing + 1 new\n+            'form-INITIAL_FORMS': '1',  # 1 existing\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': str(author.id),\n+            'form-0-name': 'Updated Author',\n+            'form-1-id': '',  # New object\n+            'form-1-name': 'New Author',\n+        }\n+        \n+        formset = AuthorFormSet(data=data, queryset=Author.objects.all())\n+        \n+        # The formset should not be valid, as new object creation is not allowed\n+        if formset.is_valid():\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Ensure no new object was created\n+        self.assertEqual(Author.objects.count(), 1)\n+        self.assertFalse(Author.objects.filter(name='New Author').exists())\n",
  "num_sent_chars": 4015853,
  "num_received_chars": 93941,
  "elapsed_time": 533.3221189975739,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}