{
  "instance_id": "pydata__xarray-6599",
  "edit_test_file": "xarray/tests/test_duck_array_ops.py",
  "code_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe0..c62b6a0 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1905,6 +1905,8 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n+    if np.issubdtype(coord.dtype, np.timedelta64):\n+        coord = coord.astype('timedelta64[ns]').astype('float64')\n     coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n \n     # using Horner's method\n",
  "test_patch": "diff --git a/xarray/tests/test_polyval_timedelta64.py b/xarray/tests/test_polyval_timedelta64.py\nnew file mode 100644\nindex 0000000..569e018\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta64.py\n@@ -0,0 +1,46 @@\n+import numpy as np\n+import xarray as xr\n+from xarray.testing import assert_allclose\n+\n+def test_polyval_with_timedelta64_coordinates():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    # Expected incorrect output for the issue\n+    expected_wrong_output = xr.DataArray(\n+        np.array([\n+            [1.59620685e+30, 1.59620689e+30, 1.59620693e+30, 1.59620697e+30, 1.59620700e+30, 1.59620704e+30],\n+            [1.11164807e+30, 1.11164810e+30, 1.11164812e+30, 1.11164815e+30, 1.11164818e+30, 1.11164821e+30],\n+            [1.90975722e+30, 1.90975727e+30, 1.90975732e+30, 1.90975736e+30, 1.90975741e+30, 1.90975746e+30]\n+        ]),\n+        dims=(\"axis\", \"azimuth_time\"),\n+        coords={\"axis\": [0, 1, 2], \"azimuth_time\": azimuth_time.coords[\"azimuth_time\"]}\n+    )\n+\n+    actual_output = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    assert_allclose(actual_output, expected_wrong_output)\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_polyval_timedelta64_inverted.py b/xarray/tests/test_polyval_timedelta64_inverted.py\nnew file mode 100644\nindex 0000000..6bc0b14\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta64_inverted.py\n@@ -0,0 +1,48 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_polyval_with_timedelta64_coordinates():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    # Expected incorrect output for the issue\n+    expected_wrong_output = xr.DataArray(\n+        np.array([\n+            [1.59620685e+30, 1.59620689e+30, 1.59620693e+30, 1.59620697e+30, 1.59620700e+30, 1.59620704e+30],\n+            [1.11164807e+30, 1.11164810e+30, 1.11164812e+30, 1.11164815e+30, 1.11164818e+30, 1.11164821e+30],\n+            [1.90975722e+30, 1.90975727e+30, 1.90975732e+30, 1.90975736e+30, 1.90975741e+30, 1.90975746e+30]\n+        ]),\n+        dims=(\"axis\", \"azimuth_time\"),\n+        coords={\"axis\": [0, 1, 2], \"azimuth_time\": azimuth_time.coords[\"azimuth_time\"]}\n+    )\n+\n+    actual_output = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Altered assertion to fail when the bug is observed\n+    with pytest.raises(AssertionError, match=\"__BUG__HERE__\"):\n+        xr.testing.assert_allclose(actual_output, expected_wrong_output)\n",
  "num_sent_chars": 3198151,
  "num_received_chars": 34959,
  "elapsed_time": 452.0453231334686,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}