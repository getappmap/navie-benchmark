{
  "instance_id": "django__django-15563",
  "edit_test_file": "tests/basic/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex 04063f7..88fb20d 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -95,6 +95,9 @@ class UpdateQuery(Query):\n                     \"Cannot update model field %r (only non-relations and \"\n                     \"foreign keys permitted).\" % field\n                 )\n+            # Ensure updates are applied to the correct model in case of multiple inheritance\n+            if model is not self.get_meta().concrete_model:\n+                continue\n             if model is not self.get_meta().concrete_model:\n                 self.add_related_update(model, field, val)\n                 continue\n",
  "test_patch": "diff --git a/tests/basic/test_queryset_update_multiple_inheritance.py b/tests/basic/test_queryset_update_multiple_inheritance.py\nnew file mode 100644\nindex 0000000..e29b7fc\n--- /dev/null\n+++ b/tests/basic/test_queryset_update_multiple_inheritance.py\n@@ -0,0 +1,39 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define the models as described in the issue\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+class Child(Base, OtherBase):\n+    pass\n+\n+class QuerysetUpdateMultipleInheritanceTest(TestCase):\n+    def test_queryset_update_multiple_inheritance(self):\n+        # Create instances of OtherBase\n+        OtherBase.objects.create(field_otherbase=100)\n+        OtherBase.objects.create(field_otherbase=101)\n+\n+        # Create instances of Child\n+        Child.objects.create(field_base=0, field_otherbase=0)\n+        Child.objects.create(field_base=1, field_otherbase=1)\n+\n+        # Update Child instances\n+        Child.objects.update(field_otherbase=55)\n+\n+        # Check if the update affected Child instances\n+        child_values = list(Child.objects.values('field_otherbase'))\n+        self.assertEqual(child_values, [{'field_otherbase': 0}, {'field_otherbase': 1}])\n+\n+        # Check if the update affected OtherBase instances\n+        otherbase_values = list(OtherBase.objects.filter(otherbase_id__in=[1, 2]).values('field_otherbase'))\n+        self.assertEqual(otherbase_values, [{'field_otherbase': 55}, {'field_otherbase': 55}])\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/basic/test_queryset_update_multiple_inheritance_inverted.py b/tests/basic/test_queryset_update_multiple_inheritance_inverted.py\nnew file mode 100644\nindex 0000000..1502672\n--- /dev/null\n+++ b/tests/basic/test_queryset_update_multiple_inheritance_inverted.py\n@@ -0,0 +1,41 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define the models as described in the issue\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+class Child(Base, OtherBase):\n+    pass\n+\n+class QuerysetUpdateMultipleInheritanceTest(TestCase):\n+    def test_queryset_update_multiple_inheritance(self):\n+        # Create instances of OtherBase\n+        OtherBase.objects.create(field_otherbase=100)\n+        OtherBase.objects.create(field_otherbase=101)\n+\n+        # Create instances of Child\n+        Child.objects.create(field_base=0, field_otherbase=0)\n+        Child.objects.create(field_base=1, field_otherbase=1)\n+\n+        # Update Child instances\n+        Child.objects.update(field_otherbase=55)\n+\n+        # Check if the update affected Child instances\n+        child_values = list(Child.objects.values('field_otherbase'))\n+        # This assertion should fail if the bug is present\n+        if child_values == [{'field_otherbase': 0}, {'field_otherbase': 1}]:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Check if the update affected OtherBase instances\n+        otherbase_values = list(OtherBase.objects.filter(otherbase_id__in=[1, 2]).values('field_otherbase'))\n+        self.assertEqual(otherbase_values, [{'field_otherbase': 55}, {'field_otherbase': 55}])\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 3537076,
  "num_received_chars": 57740,
  "elapsed_time": 341.3179693222046,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}