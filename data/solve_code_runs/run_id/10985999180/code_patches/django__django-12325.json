{
  "instance_id": "django__django-12325",
  "edit_test_file": "tests/model_inheritance/tests.py",
  "code_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6b..00ea387 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -240,20 +240,19 @@ class Options:\n \n         if self.pk is None:\n             if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n+                # Iterate over all parent links to find the correct field with parent_link=True\n+                for parent_field in self.parents.values():\n+                    # Look for a local field with the same name as the parent link\n+                    already_created = [fld for fld in self.local_fields if fld.name == parent_field.name]\n+                    if already_created:\n+                        parent_field = already_created[0]\n+                    if parent_field.remote_field.parent_link:\n+                        parent_field.primary_key = True\n+                        self.setup_pk(parent_field)\n+                        break\n+                else:\n                     raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n+                        'No OneToOneField with parent_link=True found in %s.' % self.object_name,\n                     )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n",
  "test_patch": "diff --git a/tests/model_inheritance/test_mti_one_to_one_ordering_issue.py b/tests/model_inheritance/test_mti_one_to_one_ordering_issue.py\nnew file mode 100644\nindex 0000000..7e9f15f\n--- /dev/null\n+++ b/tests/model_inheritance/test_mti_one_to_one_ordering_issue.py\n@@ -0,0 +1,13 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class OneToOneOrderIssueTests(SimpleTestCase):\n+    def test_onetoone_order_issue(self):\n+        class Document(models.Model):\n+            pass\n+\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to model_inheritance.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n",
  "test_inverted_patch": "diff --git a/tests/model_inheritance/test_mti_one_to_one_ordering_issue_inverted.py b/tests/model_inheritance/test_mti_one_to_one_ordering_issue_inverted.py\nnew file mode 100644\nindex 0000000..4a7b02b\n--- /dev/null\n+++ b/tests/model_inheritance/test_mti_one_to_one_ordering_issue_inverted.py\n@@ -0,0 +1,14 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class OneToOneOrderIssueTests(SimpleTestCase):\n+    def test_onetoone_order_issue(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Alter the test to expect the bug and raise the specific error message\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"__BUG__HERE__\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n",
  "num_sent_chars": 4330004,
  "num_received_chars": 83765,
  "elapsed_time": 465.0319912433624,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}