{
  "instance_id": "sympy__sympy-21379",
  "edit_test_file": "sympy/core/tests/test_expr.py",
  "code_patch": "diff --git a/sympy/polys/polyerrors.py b/sympy/polys/polyerrors.py\nindex 2cd7582..ae35579 100644\n--- a/sympy/polys/polyerrors.py\n+++ b/sympy/polys/polyerrors.py\n@@ -113,7 +113,18 @@ class DomainError(BasePolynomialError):\n \n @public\n class PolynomialError(BasePolynomialError):\n-    pass\n+    def __init__(self, message=None, assumptions=None, expression=None):\n+        self.message = message or \"An error occurred in polynomial processing.\"\n+        self.assumptions = assumptions\n+        self.expression = expression\n+\n+    def __str__(self):\n+        details = [self.message]\n+        if self.assumptions:\n+            details.append(f\"Assumptions: {self.assumptions}\")\n+        if self.expression:\n+            details.append(f\"Expression: {self.expression}\")\n+        return \" | \".join(details)\n \n @public\n class UnificationFailed(BasePolynomialError):\n",
  "test_patch": "diff --git a/sympy/core/tests/test_polynomial_error.py b/sympy/core/tests/test_polynomial_error.py\nnew file mode 100644\nindex 0000000..fe672d7\n--- /dev/null\n+++ b/sympy/core/tests/test_polynomial_error.py\n@@ -0,0 +1,11 @@\n+from sympy import symbols, exp, sinh, Piecewise\n+from sympy.core.cache import clear_cache\n+from sympy.testing.pytest import raises\n+from sympy.polys.polyerrors import PolynomialError\n+\n+def test_polynomial_error_with_subs():\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    \n+    with raises(PolynomialError):\n+        expr.subs({1: 1.0})\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_polynomial_error_inverted.py b/sympy/core/tests/test_polynomial_error_inverted.py\nnew file mode 100644\nindex 0000000..01ad234\n--- /dev/null\n+++ b/sympy/core/tests/test_polynomial_error_inverted.py\n@@ -0,0 +1,14 @@\n+from sympy import symbols, exp, sinh, Piecewise\n+from sympy.core.cache import clear_cache\n+from sympy.testing.pytest import raises\n+from sympy.polys.polyerrors import PolynomialError\n+\n+def test_polynomial_error_with_subs():\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    \n+    # Alter the test to fail when the issue is observed\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4547539,
  "num_received_chars": 81853,
  "elapsed_time": 1028.3314232826233,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}