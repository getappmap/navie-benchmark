{
  "instance_id": "mwaskom__seaborn-3187",
  "edit_test_file": null,
  "code_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf..b548615 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -83,7 +83,7 @@ class Scale:\n     def _get_scale(self, name: str, forward: Callable, inverse: Callable):\n \n         major_locator, minor_locator = self._get_locators(**self._tick_params)\n-        major_formatter = self._get_formatter(major_locator, **self._label_params)\n+        major_formatter = self._get_formatter(major_locator, **self._label_params, axis=None)\n \n         class InternalScale(mpl.scale.FuncScale):\n             def set_default_locators_and_formatters(self, axis):\n@@ -91,6 +91,8 @@ class Scale:\n                 if minor_locator is not None:\n                     axis.set_minor_locator(minor_locator)\n                 axis.set_major_formatter(major_formatter)\n+                # Update formatter with axis to include offset in legend\n+                self._get_formatter(major_locator, major_formatter, **self._label_params, axis=axis)\n \n         return InternalScale(name, (forward, inverse))\n \n@@ -612,7 +614,7 @@ class Continuous(ContinuousBase):\n \n         return major_locator, minor_locator\n \n-    def _get_formatter(self, locator, formatter, like, base, unit):\n+    def _get_formatter(self, locator, formatter, like, base, unit, axis=None):\n \n         log_base, symlog_thresh = self._parse_for_log_params(self.trans)\n         if base is default:\n@@ -633,6 +635,11 @@ class Continuous(ContinuousBase):\n             else:\n                 formatter = FuncFormatter(like)\n \n+        if isinstance(formatter, ScalarFormatter) and axis is not None:\n+            offset = formatter.get_offset()\n+            if offset:\n+                axis.set_title(f\"{axis.get_title()} (offset: {offset})\")\n+\n         elif base is not None:\n             # We could add other log options if necessary\n             formatter = LogFormatterSciNotation(base)\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2043799,
  "num_received_chars": 13666,
  "elapsed_time": 300.0796947479248,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}