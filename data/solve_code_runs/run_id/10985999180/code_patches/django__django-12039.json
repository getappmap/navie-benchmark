{
  "instance_id": "django__django-12039",
  "edit_test_file": "tests/indexes/tests.py",
  "code_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 44e4980..c59e539 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -84,7 +84,8 @@ class Columns(TableColumns):\n     def __str__(self):\n         def col_str(column, idx):\n             try:\n-                return self.quote_name(column) + self.col_suffixes[idx]\n+                suffix = self.col_suffixes[idx]\n+                return f\"{self.quote_name(column)} {suffix}\".strip()\n             except IndexError:\n                 return self.quote_name(column)\n \n",
  "test_patch": "diff --git a/tests/indexes/test_create_index_whitespace.py b/tests/indexes/test_create_index_whitespace.py\nnew file mode 100644\nindex 0000000..213276f\n--- /dev/null\n+++ b/tests/indexes/test_create_index_whitespace.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Index, Model, CharField\n+from django.test import TransactionTestCase\n+\n+class SchemaAuthor(Model):\n+    name = CharField(max_length=255)\n+\n+class CreateIndexWhitespaceTests(TransactionTestCase):\n+    available_apps = ['indexes']\n+\n+    def test_create_index_whitespace(self):\n+        index = Index(\n+            fields=['-name'],\n+            name='idx'\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(SchemaAuthor, schema_editor=editor))\n+            # Check for the incorrect output to reproduce the issue\n+            self.assertIn('\"name\"DESC', sql)\n+            # Check for the correct output to ensure the test fails if the issue is fixed\n+            self.assertNotIn('\"name\" DESC', sql)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/indexes/test_create_index_whitespace_inverted.py b/tests/indexes/test_create_index_whitespace_inverted.py\nnew file mode 100644\nindex 0000000..8ae294f\n--- /dev/null\n+++ b/tests/indexes/test_create_index_whitespace_inverted.py\n@@ -0,0 +1,26 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Index, Model, CharField\n+from django.test import TransactionTestCase\n+\n+class SchemaAuthor(Model):\n+    name = CharField(max_length=255)\n+\n+class CreateIndexWhitespaceTests(TransactionTestCase):\n+    available_apps = ['indexes']\n+\n+    def test_create_index_whitespace(self):\n+        index = Index(\n+            fields=['-name'],\n+            name='idx'\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(SchemaAuthor, schema_editor=editor))\n+            # Check for the incorrect output to ensure the test fails if the issue is observed\n+            if '\"name\"DESC' in sql:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            # Check for the correct output to ensure the test passes if the issue is fixed\n+            self.assertIn('\"name\" DESC', sql)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 613701,
  "num_received_chars": 5435,
  "elapsed_time": 60.870787620544434,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}