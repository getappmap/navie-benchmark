{
  "instance_id": "django__django-11734",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 35f3c5e..d719b31 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1211,6 +1211,10 @@ class Query(BaseExpression):\n         negated or not and this will be used to determine if IS NULL filtering\n         is needed.\n \n+        # Ensure OuterRef is correctly handled in negated contexts\n+        if isinstance(filter_expr, tuple) and isinstance(filter_expr[1], OuterRef):\n+            filter_expr = (filter_expr[0], OuterRef(filter_expr[1].name))\n+\n         The difference between current_negated and branch_negated is that\n         branch_negated is set on first negation, but current_negated is\n         flipped for each negation.\n@@ -1697,6 +1701,10 @@ class Query(BaseExpression):\n             WHERE NOT (pk IN (SELECT parent_id FROM thetable\n                               WHERE name = 'foo' AND parent_id IS NOT NULL))\n \n+        # Handle OuterRef in exclude context\n+        if isinstance(filter_expr, tuple) and isinstance(filter_expr[1], OuterRef):\n+            filter_expr = (filter_expr[0], OuterRef(filter_expr[1].name))\n+\n         It might be worth it to consider using WHERE NOT EXISTS as that has\n         saner null handling, and is easier for the backend's optimizer to\n         handle.\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1567904,
  "num_received_chars": 13267,
  "elapsed_time": 121.46146893501282,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}