{
  "instance_id": "astropy__astropy-13977",
  "edit_test_file": "astropy/units/tests/test_quantity.py",
  "code_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex b98abfa..6931b70 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -669,17 +669,20 @@ class Quantity(np.ndarray):\n             input_ = getattr(input_, \"value\", input_)\n             arrays.append(converter(input_) if converter else input_)\n \n-        # Call our superclass's __array_ufunc__\n-        result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n-        # If unit is None, a plain array is expected (e.g., comparisons), which\n-        # means we're done.\n-        # We're also done if the result was None (for method 'at') or\n-        # NotImplemented, which can happen if other inputs/outputs override\n-        # __array_ufunc__; hopefully, they can then deal with us.\n-        if unit is None or result is None or result is NotImplemented:\n-            return result\n-\n-        return self._result_as_quantity(result, unit, out)\n+        try:\n+            # Call our superclass's __array_ufunc__\n+            result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n+            # If unit is None, a plain array is expected (e.g., comparisons), which\n+            # means we're done.\n+            # We're also done if the result was None (for method 'at') or\n+            # NotImplemented, which can happen if other inputs/outputs override\n+            # __array_ufunc__; hopefully, they can then deal with us.\n+            if unit is None or result is None or result is NotImplemented:\n+                return result\n+\n+            return self._result_as_quantity(result, unit, out)\n+        except ValueError:\n+            return NotImplemented\n \n     def _result_as_quantity(self, result, unit, out):\n         \"\"\"Turn result into a quantity with the given unit.\n",
  "test_patch": "diff --git a/astropy/units/tests/test_duckarray_ufunc.py b/astropy/units/tests/test_duckarray_ufunc.py\nnew file mode 100644\nindex 0000000..71ed708\n--- /dev/null\n+++ b/astropy/units/tests/test_duckarray_ufunc.py\n@@ -0,0 +1,34 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the DuckArray class and related ufunc behavior.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_duckarray_ufunc_incompatible_units():\n+    \"\"\"Test that DuckArray with incompatible units raises ValueError.\"\"\"\n+    duck_array = DuckArray(1 * u.mm)\n+    with pytest.raises(ValueError, match=\"Value not scalar compatible or convertible to an int, float, or complex array\"):\n+        _ = (1 * u.m) + duck_array\n",
  "test_inverted_patch": "diff --git a/astropy/units/tests/test_duckarray_ufunc_inverted.py b/astropy/units/tests/test_duckarray_ufunc_inverted.py\nnew file mode 100644\nindex 0000000..f329840\n--- /dev/null\n+++ b/astropy/units/tests/test_duckarray_ufunc_inverted.py\n@@ -0,0 +1,34 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the DuckArray class and related ufunc behavior.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_duckarray_ufunc_incompatible_units():\n+    \"\"\"Test that DuckArray with incompatible units raises ValueError.\"\"\"\n+    duck_array = DuckArray(1 * u.mm)\n+    with pytest.raises(NotImplementedError, match=\"__BUG__HERE__\"):\n+        _ = (1 * u.m) + duck_array\n",
  "num_sent_chars": 2165359,
  "num_received_chars": 31105,
  "elapsed_time": 259.1348490715027,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}