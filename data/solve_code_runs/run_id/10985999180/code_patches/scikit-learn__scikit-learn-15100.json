{
  "instance_id": "scikit-learn__scikit-learn-15100",
  "edit_test_file": "sklearn/feature_extraction/tests/test_text.py",
  "code_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex bb5a9d6..11236d9 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -130,10 +130,7 @@ def strip_accents_unicode(s):\n         ASCII equivalent.\n     \"\"\"\n     normalized = unicodedata.normalize('NFKD', s)\n-    if normalized == s:\n-        return s\n-    else:\n-        return ''.join([c for c in normalized if not unicodedata.combining(c)])\n+    return ''.join([c for c in normalized if not unicodedata.combining(c)])\n \n \n def strip_accents_ascii(s):\n",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_strip_accents_unicode.py b/sklearn/feature_extraction/tests/test_strip_accents_unicode.py\nnew file mode 100644\nindex 0000000..603c1f5\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_strip_accents_unicode.py\n@@ -0,0 +1,20 @@\n+# File: sklearn/feature_extraction/tests/test_strip_accents_unicode.py\n+\n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+def test_strip_accents_unicode_nfkd():\n+    # This string contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+    s1 = chr(241)\n+\n+    # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+\n+    # They are visually identical, as expected\n+    assert s1 == '\u00f1'\n+    assert s2 == 'n\u0303'\n+\n+    # The tilde is removed from s1, as expected\n+    assert strip_accents_unicode(s1) == 'n'\n+\n+    # But strip_accents_unicode returns s2 unchanged\n+    assert strip_accents_unicode(s2) == s2\n",
  "test_inverted_patch": "diff --git a/sklearn/feature_extraction/tests/test_strip_accents_unicode_inverted.py b/sklearn/feature_extraction/tests/test_strip_accents_unicode_inverted.py\nnew file mode 100644\nindex 0000000..e1a1c66\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_strip_accents_unicode_inverted.py\n@@ -0,0 +1,21 @@\n+# File: sklearn/feature_extraction/tests/test_strip_accents_unicode.py\n+\n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+def test_strip_accents_unicode_nfkd():\n+    # This string contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+    s1 = chr(241)\n+\n+    # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+\n+    # They are visually identical, as expected\n+    assert s1 == '\u00f1'\n+    assert s2 == 'n\u0303'\n+\n+    # The tilde is removed from s1, as expected\n+    assert strip_accents_unicode(s1) == 'n'\n+\n+    # The test should fail here if the bug is observed\n+    if strip_accents_unicode(s2) == s2:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 722465,
  "num_received_chars": 5187,
  "elapsed_time": 51.83558702468872,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}