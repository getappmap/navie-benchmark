{
  "instance_id": "sphinx-doc__sphinx-7748",
  "edit_test_file": "tests/test_util_inspect.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be9..3e8485d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1100,12 +1100,14 @@ class DocstringStripSignatureMixin(DocstringSignatureMixin):\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                # Discarding _args is a only difference with\n-                # DocstringSignatureMixin.format_signature.\n-                # Documenter.format_signature use self.args value to format.\n-                _args, self.retann = result\n+            results = self._find_signature()\n+            if results:\n+                # Process each signature found\n+                signatures = []\n+                for _args, _retann in results:\n+                    self.args, self.retann = _args, _retann\n+                    signatures.append(super().format_signature(**kwargs))\n+                return \"\\n\".join(signatures)\n         return super().format_signature(**kwargs)\n \n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature.py b/tests/test_ext_autodoc_docstring_signature.py\nnew file mode 100644\nindex 0000000..f8c5113\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature.py\n@@ -0,0 +1,28 @@\n+\"\"\"\n+    test_ext_autodoc_docstring_signature\n+    ~~~~~~~~~~~~~~~\n+\n+    Tests autodoc_docstring_signature with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_with_overloaded_methods():\n+    class SwigWrappedClass:\n+        def overloaded_method(self, arg1):\n+            \"\"\"overloaded_method(int arg1)\n+            overloaded_method(float arg1)\n+            \"\"\"\n+            pass\n+\n+    # Simulate the behavior of autodoc_docstring_signature\n+    docstring = SwigWrappedClass.overloaded_method.__doc__\n+    first_signature = docstring.splitlines()[0]\n+\n+    # The issue is that only the first signature is picked up\n+    assert first_signature == \"overloaded_method(int arg1)\"\n+    # The test should pass when the issue is observed, i.e., only the first signature is picked up\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature_inverted.py b/tests/test_ext_autodoc_docstring_signature_inverted.py\nnew file mode 100644\nindex 0000000..2d5cb80\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature_inverted.py\n@@ -0,0 +1,29 @@\n+\"\"\"\n+    test_ext_autodoc_docstring_signature\n+    ~~~~~~~~~~~~~~~\n+\n+    Tests autodoc_docstring_signature with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_with_overloaded_methods():\n+    class SwigWrappedClass:\n+        def overloaded_method(self, arg1):\n+            \"\"\"overloaded_method(int arg1)\n+            overloaded_method(float arg1)\n+            \"\"\"\n+            pass\n+\n+    # Simulate the behavior of autodoc_docstring_signature\n+    docstring = SwigWrappedClass.overloaded_method.__doc__\n+    first_signature = docstring.splitlines()[0]\n+\n+    # The issue is that only the first signature is picked up\n+    # The test should fail when the issue is observed, i.e., only the first signature is picked up\n+    if first_signature == \"overloaded_method(int arg1)\":\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 6182666,
  "num_received_chars": 93061,
  "elapsed_time": 533.1671781539917,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}