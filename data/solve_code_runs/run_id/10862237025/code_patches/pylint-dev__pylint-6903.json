{
  "instance_id": "pylint-dev__pylint-6903",
  "edit_test_file": "tests/test_check_parallel.py",
  "code_patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex a7e5d55..a61a876 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -58,7 +58,7 @@ def _query_cpu() -> int | None:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n         avail_cpu = int(cpu_shares / 1024)\n-    return avail_cpu\n+    return max(avail_cpu, 1) if avail_cpu is not None else None\n \n \n def _cpu_count() -> int:\n@@ -76,8 +76,8 @@ def _cpu_count() -> int:\n     else:\n         cpu_count = 1\n     if cpu_share is not None:\n-        return min(cpu_share, cpu_count)\n-    return cpu_count\n+        return max(min(cpu_share, cpu_count), 1)\n+    return max(cpu_count, 1)\n \n \n UNUSED_PARAM_SENTINEL = object()\n",
  "test_patch": "diff --git a/tests/test_pylint_cpu_query.py b/tests/test_pylint_cpu_query.py\nnew file mode 100644\nindex 0000000..3f22813\n--- /dev/null\n+++ b/tests/test_pylint_cpu_query.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from unittest.mock import patch, mock_open\n+from pylint.lint.run import _query_cpu, _cpu_count\n+\n+class TestPylintCPUQuery(unittest.TestCase):\n+    def test_cpu_query_returns_zero(self):\n+        # Mock the file reads to simulate the Kubernetes environment\n+        with patch(\"builtins.open\", mock_open(read_data=\"-1\")), \\\n+             patch(\"pathlib.Path.is_file\", return_value=True):\n+            cpu_count = _cpu_count()\n+            self.assertEqual(cpu_count, 0, \"Expected cpu_count to be 0 due to Kubernetes environment simulation\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_pylint_cpu_query_inverted.py b/tests/test_pylint_cpu_query_inverted.py\nnew file mode 100644\nindex 0000000..a052294\n--- /dev/null\n+++ b/tests/test_pylint_cpu_query_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from unittest.mock import patch, mock_open\n+from pylint.lint.run import _query_cpu, _cpu_count\n+\n+class TestPylintCPUQuery(unittest.TestCase):\n+    def test_cpu_query_returns_zero(self):\n+        # Mock the file reads to simulate the Kubernetes environment\n+        with patch(\"builtins.open\", mock_open(read_data=\"-1\")), \\\n+             patch(\"pathlib.Path.is_file\", return_value=True):\n+            cpu_count = _cpu_count()\n+            # Alter the assertion to expect a failure when the bug is observed\n+            if cpu_count == 0:\n+                self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 87033,
  "num_received_chars": 7290,
  "elapsed_time": 61.90667533874512,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 1859
}