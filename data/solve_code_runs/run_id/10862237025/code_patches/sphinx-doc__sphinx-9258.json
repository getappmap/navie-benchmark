{
  "instance_id": "sphinx-doc__sphinx-9258",
  "edit_test_file": "tests/test_util_typing.py",
  "code_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex af6edca..de6ff29 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -119,6 +119,9 @@ def restify(cls: Optional[Type]) -> str:\n             return 'Optional[%s]' % args\n         else:\n             return ' | '.join(restify(a) for a in cls.__args__)\n+    elif hasattr(cls, '__origin__') and cls.__origin__ is Union:\n+        args = ' | '.join(restify(a) for a in cls.__args__)\n+        return args\n     elif cls.__module__ in ('__builtin__', 'builtins'):\n         return ':class:`%s`' % cls.__name__\n     else:\n@@ -336,6 +339,9 @@ def _stringify_py37(annotation: Any) -> str:\n         qualname = stringify(annotation.__origin__)\n     elif types_Union and isinstance(annotation, types_Union):  # types.Union (for py3.10+)\n         qualname = 'types.Union'\n+    elif hasattr(annotation, '__origin__') and annotation.__origin__ is Union:\n+        args = ' | '.join(stringify(a) for a in annotation.__args__)\n+        return args\n     else:\n         # we weren't able to extract the base type, appending arguments would\n         # only make them appear twice\n",
  "test_patch": "diff --git a/tests/test_ext_union_types.py b/tests/test_ext_union_types.py\nnew file mode 100644\nindex 0000000..991096d\n--- /dev/null\n+++ b/tests/test_ext_union_types.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from sphinx.util.typing import restify\n+\n+class TestUnionTypeSpecification(unittest.TestCase):\n+    def test_union_type_specification_with_pipe(self):\n+        # This test is designed to reproduce the issue with union type specification using '|'\n+        # The expected behavior is that the restify function should not correctly handle the '|'\n+        # syntax for union types, which is the issue we want to reproduce.\n+\n+        # Define a type hint using the '|' syntax\n+        try:\n+            type_hint = bytes | str  # type: ignore\n+            # Attempt to restify the type hint\n+            result = restify(type_hint)\n+            # Check if the result is incorrect as expected\n+            self.assertNotEqual(result, \":class:`bytes` | :class:`str`\")\n+        except TypeError as e:\n+            # Assert that a TypeError is raised, which is the expected issue\n+            self.assertEqual(str(e), \"unsupported operand type(s) for |: 'type' and 'type'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_union_types_inverted.py b/tests/test_ext_union_types_inverted.py\nnew file mode 100644\nindex 0000000..f6d034f\n--- /dev/null\n+++ b/tests/test_ext_union_types_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from sphinx.util.typing import restify\n+\n+class TestUnionTypeSpecification(unittest.TestCase):\n+    def test_union_type_specification_with_pipe(self):\n+        # This test is designed to reproduce the issue with union type specification using '|'\n+        # The expected behavior is that the restify function should correctly handle the '|'\n+        # syntax for union types, which is the issue we want to reproduce.\n+\n+        # Define a type hint using the '|' syntax\n+        try:\n+            type_hint = bytes | str  # type: ignore\n+            # Attempt to restify the type hint\n+            result = restify(type_hint)\n+            # Check if the result is correct as expected\n+            self.assertEqual(result, \":class:`bytes` | :class:`str`\")\n+        except TypeError as e:\n+            # Raise an error if a TypeError is raised, which indicates the bug\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1643017,
  "num_received_chars": 103008,
  "elapsed_time": 881.9491059780121,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}