{
  "instance_id": "pydata__xarray-6461",
  "edit_test_file": "xarray/tests/test_duck_array_ops.py",
  "code_patch": "diff --git a/xarray/core/ops.py b/xarray/core/ops.py\nindex 8265035..29b5117 100644\n--- a/xarray/core/ops.py\n+++ b/xarray/core/ops.py\n@@ -154,7 +154,7 @@ def fillna(data, other, join=\"left\", dataset_join=\"left\"):\n     )\n \n \n-def where_method(self, cond, other=dtypes.NA):\n+def where_method(self, cond, other=dtypes.NA, keep_attrs=False):\n     \"\"\"Return elements from `self` or `other` depending on `cond`.\n \n     Parameters\n@@ -164,6 +164,10 @@ def where_method(self, cond, other=dtypes.NA):\n     other : scalar, DataArray or Dataset, optional\n         Value to use for locations in this object where ``cond`` is False.\n         By default, inserts missing values.\n+    keep_attrs : bool, optional\n+        If True, the attributes (`attrs`) will be copied from the original\n+        object to the new one. If False (default), the new object will be\n+        returned without attributes.\n \n     Returns\n     -------\n@@ -173,6 +177,8 @@ def where_method(self, cond, other=dtypes.NA):\n \n     # alignment for three arguments is complicated, so don't support it yet\n     join = \"inner\" if other is dtypes.NA else \"exact\"\n+    if not hasattr(other, 'attrs'):\n+        keep_attrs = False\n     return apply_ufunc(\n         duck_array_ops.where_method,\n         self,\n@@ -181,7 +187,7 @@ def where_method(self, cond, other=dtypes.NA):\n         join=join,\n         dataset_join=join,\n         dask=\"allowed\",\n-        keep_attrs=True,\n+        keep_attrs=keep_attrs,\n     )\n \n \n",
  "test_patch": "diff --git a/xarray/tests/test_where.py b/xarray/tests/test_where.py\nnew file mode 100644\nindex 0000000..e2a7d60\n--- /dev/null\n+++ b/xarray/tests/test_where.py\n@@ -0,0 +1,6 @@\n+import pytest\n+import xarray as xr\n+\n+def test_where_scalar_with_keep_attrs():\n+    with pytest.raises(IndexError, match=\"list index out of range\"):\n+        xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_where_inverted.py b/xarray/tests/test_where_inverted.py\nnew file mode 100644\nindex 0000000..0bab96c\n--- /dev/null\n+++ b/xarray/tests/test_where_inverted.py\n@@ -0,0 +1,9 @@\n+import pytest\n+import xarray as xr\n+\n+def test_where_scalar_with_keep_attrs():\n+    # The test should now fail when the bug is observed\n+    try:\n+        xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n+    except IndexError:\n+        pytest.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1565534,
  "num_received_chars": 61043,
  "elapsed_time": 835.970700263977,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 90554
}