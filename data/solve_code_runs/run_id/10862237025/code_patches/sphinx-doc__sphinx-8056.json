{
  "instance_id": "sphinx-doc__sphinx-8056",
  "edit_test_file": "tests/test_ext_autodoc_events.py",
  "code_patch": "diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py\nindex 6cab63c..a0c6397 100644\n--- a/sphinx/ext/napoleon/__init__.py\n+++ b/sphinx/ext/napoleon/__init__.py\n@@ -353,6 +353,9 @@ def _process_docstring(app: Sphinx, what: str, name: str, obj: Any,\n     ----------\n     app : sphinx.application.Sphinx\n         Application object representing the Sphinx process.\n+\n+    # Ensure lines are stripped of leading/trailing whitespace\n+    lines[:] = [line.strip() for line in lines]\n     what : str\n         A string specifying the type of the object to which the docstring\n         belongs. Valid values: \"module\", \"class\", \"exception\", \"function\",\n\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06..f4a9c41 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -681,7 +681,9 @@ class GoogleDocstring:\n         return self._format_fields(_('Other Parameters'), self._consume_fields())\n \n     def _parse_parameters_section(self, section: str) -> List[str]:\n-        fields = self._consume_fields()\n+        fields = []\n+        for field in self._consume_fields():\n+            fields.extend(field)  # Extend with multiple fields if present\n         if self._config.napoleon_use_param:\n             return self._format_docutils_params(fields)\n         else:\n@@ -1088,7 +1090,7 @@ class NumpyDocstring(GoogleDocstring):\n             return func(name)\n \n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n+                       ) -> List[Tuple[str, str, List[str]]]:\n         line = next(self._line_iter)\n         if parse_type:\n             _name, _, _type = self._partition_field_on_colon(line)\n@@ -1102,6 +1104,13 @@ class NumpyDocstring(GoogleDocstring):\n             translations=self._config.napoleon_type_aliases or {},\n         )\n \n+        # Split multiple parameters listed on a single line\n+        param_names = [name.strip() for name in _name.split(',')]\n+        fields = []\n+        for param_name in param_names:\n+            fields.append((param_name, _type, self._dedent(self._consume_indented_block(self._get_indent(line) + 1))))\n+        return fields\n+\n         if prefer_type and not _type:\n             _type, _name = _name, _type\n         indent = self._get_indent(line) + 1\n",
  "test_patch": "diff --git a/tests/test_render_docstring.py b/tests/test_render_docstring.py\nnew file mode 100644\nindex 0000000..1423baa\n--- /dev/null\n+++ b/tests/test_render_docstring.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from sphinx.ext.napoleon import _process_docstring\n+\n+class TestRenderDocstring(unittest.TestCase):\n+    def test_combined_parameters_rendering(self):\n+        # Simulate the docstring with combined parameters\n+        docstring_lines = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Expected incorrect output as described in the issue\n+        expected_output = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Process the docstring using the _process_docstring function\n+        # We use a mock app object with necessary config attributes\n+        class MockApp:\n+            class Config:\n+                napoleon_numpy_docstring = True\n+                napoleon_google_docstring = False\n+                napoleon_custom_sections = None\n+            config = Config()\n+\n+        _process_docstring(MockApp(), None, None, None, None, docstring_lines)\n+\n+        # Assert that the processed docstring matches the expected incorrect output\n+        self.assertEqual(docstring_lines, expected_output)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_render_docstring_inverted.py b/tests/test_render_docstring_inverted.py\nnew file mode 100644\nindex 0000000..abe1127\n--- /dev/null\n+++ b/tests/test_render_docstring_inverted.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from sphinx.ext.napoleon import _process_docstring\n+\n+class TestRenderDocstring(unittest.TestCase):\n+    def test_combined_parameters_rendering(self):\n+        # Simulate the docstring with combined parameters\n+        docstring_lines = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Expected correct output as described in the issue\n+        expected_output = [\n+            \"- x1, x2 (_array_like, optional_)  -  Input arrays, description of x1, x2.\"\n+        ]\n+\n+        # Process the docstring using the _process_docstring function\n+        # We use a mock app object with necessary config attributes\n+        class MockApp:\n+            class Config:\n+                napoleon_numpy_docstring = True\n+                napoleon_google_docstring = False\n+                napoleon_custom_sections = None\n+            config = Config()\n+\n+        _process_docstring(MockApp(), None, None, None, None, docstring_lines)\n+\n+        # Assert that the processed docstring matches the expected correct output\n+        # This should fail if the bug is present\n+        self.assertEqual(docstring_lines, expected_output, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1480690,
  "num_received_chars": 109029,
  "elapsed_time": 886.146103143692,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 8391
}