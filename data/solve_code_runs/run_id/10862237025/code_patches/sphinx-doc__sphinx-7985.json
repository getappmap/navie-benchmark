{
  "instance_id": "sphinx-doc__sphinx-7985",
  "edit_test_file": "tests/test_build_linkcheck.py",
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd53170..db8251a 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -210,8 +210,15 @@ class CheckExternalLinksBuilder(Builder):\n \n         def check() -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n-            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n+            if len(uri) == 0 or uri.startswith(('mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n+            elif uri.startswith('#'):\n+                # Local link check\n+                target_id = uri[1:]\n+                if target_id in self.env.titles:\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', f\"Local target '{target_id}' not found\", 0\n             elif not uri.startswith(('http:', 'https:')):\n                 return 'local', '', 0\n             elif uri in self.good:\n@@ -275,7 +282,9 @@ class CheckExternalLinksBuilder(Builder):\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n         elif status == 'broken':\n-            if self.app.quiet or self.app.warningiserror:\n+            if uri.startswith('#'):\n+                logger.info(red('broken    ') + uri + red(' - unresolved local link'))\n+            elif self.app.quiet or self.app.warningiserror:\n                 logger.warning(__('broken link: %s (%s)'), uri, info,\n                                location=(filename, lineno))\n             else:\n@@ -314,12 +323,17 @@ class CheckExternalLinksBuilder(Builder):\n \n         # reference nodes\n         for refnode in doctree.traverse(nodes.reference):\n-            if 'refuri' not in refnode:\n-                continue\n-            uri = refnode['refuri']\n-            lineno = get_node_line(refnode)\n-            self.wqueue.put((uri, docname, lineno), False)\n-            n += 1\n+            if 'refuri' in refnode:\n+                uri = refnode['refuri']\n+                lineno = get_node_line(refnode)\n+                self.wqueue.put((uri, docname, lineno), False)\n+                n += 1\n+            elif 'refid' in refnode:\n+                # Handle local references\n+                refid = refnode['refid']\n+                lineno = get_node_line(refnode)\n+                self.wqueue.put((f'#{refid}', docname, lineno), False)\n+                n += 1\n \n         # image nodes\n         for imgnode in doctree.traverse(nodes.image):\n\ndiff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex cf33644..a19bc17 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -538,6 +538,12 @@ class BuildEnvironment:\n         # resolve all pending cross-references\n         self.apply_post_transforms(doctree, docname)\n \n+        # Collect all section IDs for local link validation\n+        for section in doctree.traverse(nodes.section):\n+            if 'ids' in section:\n+                for id in section['ids']:\n+                    self.titles[id] = section\n+\n         # now, resolve all toctree nodes\n         for toctreenode in doctree.traverse(addnodes.toctree):\n             result = TocTree(self).resolve(docname, builder, toctreenode,\n",
  "test_patch": "diff --git a/tests/test_linkcheck_local_links.py b/tests/test_linkcheck_local_links.py\nnew file mode 100644\nindex 0000000..b435735\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links.py\n@@ -0,0 +1,53 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.testing.util import SphinxTestApp\n+import os\n+\n+class TestLinkcheckLocalLinks(unittest.TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the Sphinx project\n+        self.test_dir = os.path.abspath(os.path.dirname(__file__))\n+        self.src_dir = os.path.join(self.test_dir, 'test_project')\n+        os.makedirs(self.src_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project with a broken local link\n+        with open(os.path.join(self.src_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.src_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def test_linkcheck_local_links(self):\n+        # Run Sphinx linkcheck builder\n+        app = Sphinx(\n+            srcdir=self.src_dir,\n+            confdir=self.src_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctrees'),\n+            buildername='linkcheck'\n+        )\n+        app.build()\n+\n+        # Check the output for the expected issue\n+        output_file = os.path.join(self.test_dir, '_build', 'output.txt')\n+        with open(output_file, 'r') as f:\n+            output = f.read()\n+\n+        self.assertIn(\"doesntexist\", output, \"Local link was not checked as expected.\")\n+        self.assertIn(\"https://lkfqhlkghflkhs\", output, \"External link was not checked as expected.\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        import shutil\n+        shutil.rmtree(self.src_dir, ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_build'), ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_doctrees'), ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_linkcheck_local_links_inverted.py b/tests/test_linkcheck_local_links_inverted.py\nnew file mode 100644\nindex 0000000..bd71e9f\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links_inverted.py\n@@ -0,0 +1,54 @@\n+import unittest\n+from sphinx.application import Sphinx\n+import os\n+import shutil\n+\n+class TestLinkcheckLocalLinks(unittest.TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the Sphinx project\n+        self.test_dir = os.path.abspath(os.path.dirname(__file__))\n+        self.src_dir = os.path.join(self.test_dir, 'test_project')\n+        os.makedirs(self.src_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project with a broken local link\n+        with open(os.path.join(self.src_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.src_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def test_linkcheck_local_links(self):\n+        # Run Sphinx linkcheck builder\n+        app = Sphinx(\n+            srcdir=self.src_dir,\n+            confdir=self.src_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctrees'),\n+            buildername='linkcheck'\n+        )\n+        app.build()\n+\n+        # Check the output for the expected issue\n+        output_file = os.path.join(self.test_dir, '_build', 'output.txt')\n+        with open(output_file, 'r') as f:\n+            output = f.read()\n+\n+        # Altered assertion to fail when the issue is observed\n+        if \"doesntexist\" in output:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertIn(\"https://lkfqhlkghflkhs\", output, \"External link was not checked as expected.\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        shutil.rmtree(self.src_dir, ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_build'), ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_doctrees'), ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2609117,
  "num_received_chars": 180618,
  "elapsed_time": 1780.6402201652527,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 228128
}