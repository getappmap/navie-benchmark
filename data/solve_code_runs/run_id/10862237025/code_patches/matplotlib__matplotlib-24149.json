{
  "instance_id": "matplotlib__matplotlib-24149",
  "edit_test_file": "lib/matplotlib/tests/test_preprocess_data.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3..5886424 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2163,8 +2163,8 @@ class Axes(_AxesBase):\n         # x should be an array...\n         assert type(xconv) is np.ndarray\n \n-        if xconv.size == 0:\n-            # xconv has already been converted, but maybe empty...\n+        if xconv.size == 0 or np.all(np.isnan(xconv)):\n+            # xconv has already been converted, but maybe empty or all NaN...\n             return convert(dx)\n \n         try:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_bar_nan_data.py b/lib/matplotlib/tests/test_bar_nan_data.py\nnew file mode 100644\nindex 0000000..50568b9\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_bar_nan_data.py\n@@ -0,0 +1,12 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestBarNaNData(unittest.TestCase):\n+    def test_bar_with_nan_data_raises(self):\n+        fig, ax = plt.subplots()\n+        with self.assertRaises(StopIteration):\n+            ax.bar([np.nan], [np.nan])[0].get_x()\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_bar_nan_data_inverted.py b/lib/matplotlib/tests/test_bar_nan_data_inverted.py\nnew file mode 100644\nindex 0000000..862ba18\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_bar_nan_data_inverted.py\n@@ -0,0 +1,12 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestBarNaNData(unittest.TestCase):\n+    def test_bar_with_nan_data_fails(self):\n+        fig, ax = plt.subplots()\n+        with self.assertRaisesRegex(StopIteration, \"__BUG__HERE__\"):\n+            ax.bar([np.nan], [np.nan])[0].get_x()\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 5760063,
  "num_received_chars": 120773,
  "elapsed_time": 1699.8278710842133,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}