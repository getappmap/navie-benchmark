{
  "instance_id": "matplotlib__matplotlib-24637",
  "edit_test_file": "lib/matplotlib/tests/test_offsetbox.py",
  "code_patch": "diff --git a/lib/matplotlib/backends/backend_svg.py b/lib/matplotlib/backends/backend_svg.py\nindex 03b376a..275b96f 100644\n--- a/lib/matplotlib/backends/backend_svg.py\n+++ b/lib/matplotlib/backends/backend_svg.py\n@@ -968,6 +968,8 @@ class RendererSVG(RendererBase):\n \n         attrib = {}\n         oid = gc.get_gid()\n+        if oid is not None:\n+            attrib['id'] = oid\n         if mpl.rcParams['svg.image_inline']:\n             buf = BytesIO()\n             Image.fromarray(im).save(buf, format=\"png\")\n@@ -985,7 +987,6 @@ class RendererSVG(RendererBase):\n             Image.fromarray(im).save(filename)\n             oid = oid or 'Im_' + self._make_id('image', filename)\n             attrib['xlink:href'] = filename\n-        attrib['id'] = oid\n \n         if transform is None:\n             w = 72.0 * w / self.image_dpi\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid.py b/lib/matplotlib/tests/test_annotationbbox_gid.py\nnew file mode 100644\nindex 0000000..f699195\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid.py\n@@ -0,0 +1,35 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Use a simple array to simulate an image\n+    arr_img = [[1, 2], [3, 4]]\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to a BytesIO object instead of a file\n+    buf = BytesIO()\n+    fig.savefig(buf, format=\"svg\")\n+    buf.seek(0)\n+    svg_content = buf.getvalue().decode()\n+\n+    # Check if the gid is not present in the SVG content\n+    assert 'My_label' not in svg_content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\nnew file mode 100644\nindex 0000000..f846243\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\n@@ -0,0 +1,36 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Use a simple array to simulate an image\n+    arr_img = [[1, 2], [3, 4]]\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to a BytesIO object instead of a file\n+    buf = BytesIO()\n+    fig.savefig(buf, format=\"svg\")\n+    buf.seek(0)\n+    svg_content = buf.getvalue().decode()\n+\n+    # Check if the gid is present in the SVG content\n+    if 'My_label' not in svg_content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 4136018,
  "num_received_chars": 113536,
  "elapsed_time": 1434.0993452072144,
  "lint_repair_count": 25,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 414292
}