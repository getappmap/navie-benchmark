{
  "instance_id": "psf__requests-6028",
  "edit_test_file": "tests/test_testserver.py",
  "code_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex fe22ff4..c3e922d 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -368,7 +368,11 @@ class HTTPAdapter(BaseAdapter):\n         :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n         :param kwargs: The keyword arguments from the call to send().\n         \"\"\"\n-        pass\n+        # Ensure Proxy-Authorization header is added if using a proxy\n+        proxies = kwargs.get('proxies', {})\n+        proxy = select_proxy(request.url, proxies)\n+        if proxy:\n+            request.headers.update(self.proxy_headers(proxy))\n \n     def proxy_headers(self, proxy):\n         \"\"\"Returns a dictionary of the headers to add to any request sent\n@@ -386,6 +390,13 @@ class HTTPAdapter(BaseAdapter):\n         headers = {}\n         username, password = get_auth_from_url(proxy)\n \n+        if username:\n+            headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n+\n+        return headers\n+        headers = {}\n+        username, password = get_auth_from_url(proxy)\n+\n         if username:\n             headers['Proxy-Authorization'] = _basic_auth_str(username,\n                                                              password)\n@@ -408,6 +419,11 @@ class HTTPAdapter(BaseAdapter):\n         :param proxies: (optional) The proxies dictionary to apply to the request.\n         :rtype: requests.Response\n         \"\"\"\n+        # Ensure Proxy-Authorization header is added if using a proxy\n+        if proxies:\n+            proxy = select_proxy(request.url, proxies)\n+            if proxy:\n+                request.headers.update(self.proxy_headers(proxy))\n \n         try:\n             conn = self.get_connection(request.url, proxies)\n",
  "test_patch": "diff --git a/tests/test_proxy_authentication_bug.py b/tests/test_proxy_authentication_bug.py\nnew file mode 100644\nindex 0000000..cd4ef05\n--- /dev/null\n+++ b/tests/test_proxy_authentication_bug.py\n@@ -0,0 +1,18 @@\n+import unittest\n+import requests\n+from unittest.mock import patch\n+\n+class TestProxyAuthenticationBug(unittest.TestCase):\n+    def test_proxy_authentication_bug(self):\n+        proxies = {\n+            'http': 'http://user:pass@proxy.example.com:8080',\n+            'https': 'http://user:pass@proxy.example.com:8080',\n+        }\n+        \n+        with patch('requests.get') as mock_get:\n+            mock_get.return_value.status_code = 407\n+            response = requests.get('https://example.org/', proxies=proxies)\n+            self.assertEqual(response.status_code, 407)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_proxy_authentication_bug_inverted.py b/tests/test_proxy_authentication_bug_inverted.py\nnew file mode 100644\nindex 0000000..b10ed4d\n--- /dev/null\n+++ b/tests/test_proxy_authentication_bug_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+import requests\n+from unittest.mock import patch\n+\n+class TestProxyAuthenticationBug(unittest.TestCase):\n+    def test_proxy_authentication_bug(self):\n+        proxies = {\n+            'http': 'http://user:pass@proxy.example.com:8080',\n+            'https': 'http://user:pass@proxy.example.com:8080',\n+        }\n+        \n+        with patch('requests.get') as mock_get:\n+            mock_get.return_value.status_code = 407\n+            response = requests.get('https://example.org/', proxies=proxies)\n+            # Altered the assertion to expect a 200 status code, which should fail if the bug is present\n+            self.assertEqual(response.status_code, 200, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1536758,
  "num_received_chars": 109499,
  "elapsed_time": 991.1175405979156,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}