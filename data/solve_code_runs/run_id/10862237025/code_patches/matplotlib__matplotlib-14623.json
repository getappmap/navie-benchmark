{
  "instance_id": "matplotlib__matplotlib-14623",
  "edit_test_file": "lib/matplotlib/tests/test_ticker.py",
  "code_patch": "diff --git a/lib/matplotlib/scale.py b/lib/matplotlib/scale.py\nindex b482a66..4889874 100644\n--- a/lib/matplotlib/scale.py\n+++ b/lib/matplotlib/scale.py\n@@ -301,16 +301,10 @@ class LogTransform(Transform):\n                 out = np.log(a)\n                 out /= np.log(self.base)\n             if self._clip:\n-                # SVG spec says that conforming viewers must support values up\n-                # to 3.4e38 (C float); however experiments suggest that\n-                # Inkscape (which uses cairo for rendering) runs into cairo's\n-                # 24-bit limit (which is apparently shared by Agg).\n-                # Ghostscript (used for pdf rendering appears to overflow even\n-                # earlier, with the max value around 2 ** 15 for the tests to\n-                # pass. On the other hand, in practice, we want to clip beyond\n-                #     np.log10(np.nextafter(0, 1)) ~ -323\n-                # so 1000 seems safe.\n                 out[a <= 0] = -1000\n+            # Handle inverted limits by checking if the limits are reversed\n+            if np.any(a < 0):\n+                out = -out\n         return out\n \n     def inverted(self):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_axis_inversion_log_scale.py b/lib/matplotlib/tests/test_axis_inversion_log_scale.py\nnew file mode 100644\nindex 0000000..228fc93\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_axis_inversion_log_scale.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_axis_inversion_log_scale():\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+\n+    for yscale in ('linear', 'log'):\n+        fig, ax = plt.subplots()\n+        ax.plot(x, y)\n+        ax.set_yscale(yscale)\n+        ax.set_ylim(y.max(), y.min())\n+\n+        # Check if the y-axis is inverted\n+        inverted = ax.get_ylim()[0] > ax.get_ylim()[1]\n+        if yscale == 'linear':\n+            assert inverted, f\"Y-axis should be inverted for {yscale} scale\"\n+        else:\n+            assert not inverted, f\"Y-axis should not be inverted for {yscale} scale\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py b/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py\nnew file mode 100644\nindex 0000000..b7f6d93\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_axis_inversion_log_scale():\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+\n+    for yscale in ('linear', 'log'):\n+        fig, ax = plt.subplots()\n+        ax.plot(x, y)\n+        ax.set_yscale(yscale)\n+        ax.set_ylim(y.max(), y.min())\n+\n+        # Check if the y-axis is inverted\n+        inverted = ax.get_ylim()[0] > ax.get_ylim()[1]\n+        if yscale == 'linear':\n+            assert inverted, f\"Y-axis should be inverted for {yscale} scale\"\n+        else:\n+            # Altered to fail when the issue is observed\n+            assert inverted, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2623218,
  "num_received_chars": 102367,
  "elapsed_time": 1423.8836874961853,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}