{
  "instance_id": "scikit-learn__scikit-learn-10297",
  "edit_test_file": "sklearn/linear_model/tests/test_ridge.py",
  "code_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74a..f022e39 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,11 +1333,13 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n+        self.store_cv_values = store_cv_values\n \n     def fit(self, X, y, sample_weight=None):\n         \"\"\"Fit the ridge classifier.\n@@ -1374,6 +1376,9 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n                              compute_sample_weight(self.class_weight, y))\n \n         _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)\n+        \n+        if self.store_cv_values:\n+            self.cv_values_ = getattr(self, 'cv_values_', None)\n         return self\n \n     @property\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_ridge_classifier_cv.py b/sklearn/linear_model/tests/test_ridge_classifier_cv.py\nnew file mode 100644\nindex 0000000..1cd00f9\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_ridge_classifier_cv.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+import unittest\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+class TestRidgeClassifierCVStoreCVValues(unittest.TestCase):\n+    def test_store_cv_values_parameter(self):\n+        # Test that RidgeClassifierCV raises a TypeError when store_cv_values is used\n+        X = np.random.randn(100, 30)\n+        y = np.random.normal(size=100)\n+        \n+        with self.assertRaises(TypeError) as context:\n+            RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True).fit(X, y)\n+        \n+        self.assertIn(\"__init__() got an unexpected keyword argument 'store_cv_values'\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py b/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py\nnew file mode 100644\nindex 0000000..ea71cf3\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py\n@@ -0,0 +1,18 @@\n+import numpy as np\n+import unittest\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+class TestRidgeClassifierCVStoreCVValues(unittest.TestCase):\n+    def test_store_cv_values_parameter(self):\n+        # Test that RidgeClassifierCV raises a TypeError when store_cv_values is used\n+        X = np.random.randn(100, 30)\n+        y = np.random.normal(size=100)\n+        \n+        try:\n+            RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True).fit(X, y)\n+        except TypeError as e:\n+            self.assertIn(\"__init__() got an unexpected keyword argument 'store_cv_values'\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2686006,
  "num_received_chars": 176038,
  "elapsed_time": 1830.9475209712982,
  "lint_repair_count": 23,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}