{
  "instance_id": "sympy__sympy-23262",
  "edit_test_file": "sympy/core/tests/test_containers.py",
  "code_patch": "diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 44ffd5e..328a3f4 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -36,6 +36,12 @@ def _print_Symbol(self, expr):\n             self.symbols.append(symbol)\n         return StrPrinter._print_Symbol(self, expr)\n \n+    def _print_Tuple(self, expr):\n+        elements = ', '.join(self._print(e) for e in expr)\n+        if len(expr) == 1:\n+            elements += ','\n+        return f'({elements})'\n+\n     def _print_module(self, expr):\n         raise ValueError('Modules in the expression are unacceptable')\n \n",
  "test_patch": "diff --git a/sympy/core/tests/test_code_printer.py b/sympy/core/tests/test_code_printer.py\nnew file mode 100644\nindex 0000000..890429d\n--- /dev/null\n+++ b/sympy/core/tests/test_code_printer.py\n@@ -0,0 +1,11 @@\n+import inspect\n+from sympy import lambdify\n+from sympy.testing.pytest import raises\n+\n+def test_python_code_printer_single_element_tuple():\n+    # Test to reproduce the issue with single element tuple in lambdify\n+    generated_code = inspect.getsource(lambdify([], tuple([1])))\n+    expected_code = 'def _lambdifygenerated():\\n    return (1,)\\n'\n+    \n+    # Assert that the generated code is incorrect as described in the issue\n+    assert generated_code == 'def _lambdifygenerated():\\n    return (1)\\n'\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_code_printer_inverted.py b/sympy/core/tests/test_code_printer_inverted.py\nnew file mode 100644\nindex 0000000..8087733\n--- /dev/null\n+++ b/sympy/core/tests/test_code_printer_inverted.py\n@@ -0,0 +1,14 @@\n+import inspect\n+from sympy import lambdify\n+from sympy.testing.pytest import raises\n+\n+def test_python_code_printer_single_element_tuple():\n+    # Test to reproduce the issue with single element tuple in lambdify\n+    generated_code = inspect.getsource(lambdify([], tuple([1])))\n+    expected_code = 'def _lambdifygenerated():\\n    return (1,)\\n'\n+    \n+    # Assert that the generated code is incorrect as described in the issue\n+    # This should now fail when the bug is observed\n+    if generated_code == 'def _lambdifygenerated():\\n    return (1)\\n':\n+        raise AssertionError(\"__BUG__HERE__\")\n+    assert generated_code == expected_code\n\\ No newline at end of file\n",
  "num_sent_chars": 2388889,
  "num_received_chars": 58520,
  "elapsed_time": 613.845465183258,
  "lint_repair_count": 22,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}