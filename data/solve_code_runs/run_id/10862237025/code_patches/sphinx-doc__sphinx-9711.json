{
  "instance_id": "sphinx-doc__sphinx-9711",
  "edit_test_file": "tests/test_setup_command.py",
  "code_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 7ec6c85..2e706d3 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -39,6 +39,8 @@ class Extension:\n         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)\n \n \n+from packaging.version import parse as parse_version\n+\n def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n     \"\"\"Verify the required Sphinx extensions are loaded.\"\"\"\n     if config.needs_extensions is None:\n@@ -51,7 +53,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or parse_version(extension.version) < parse_version(reqversion):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "test_patch": "diff --git a/tests/test_ext_needs_extensions_version_check.py b/tests/test_ext_needs_extensions_version_check.py\nnew file mode 100644\nindex 0000000..d921b19\n--- /dev/null\n+++ b/tests/test_ext_needs_extensions_version_check.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.config import Config\n+from sphinx.errors import VersionRequirementError\n+from unittest.mock import MagicMock\n+\n+class TestNeedsExtensionsVersionCheck(unittest.TestCase):\n+    def test_needs_extensions_version_check(self):\n+        # Mock Sphinx application and config\n+        app = MagicMock(spec=Sphinx)\n+        config = Config()\n+        config.needs_extensions = {'sphinx_gallery.gen_gallery': '0.6.0'}\n+\n+        # Mock the extension with a version that should be valid\n+        app.extensions = {\n+            'sphinx_gallery.gen_gallery': MagicMock(version='0.10.0')\n+        }\n+\n+        # Verify that the VersionRequirementError is raised due to string comparison\n+        with self.assertRaises(VersionRequirementError):\n+            from sphinx.extension import verify_needs_extensions\n+            verify_needs_extensions(app, config)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_needs_extensions_version_check_inverted.py b/tests/test_ext_needs_extensions_version_check_inverted.py\nnew file mode 100644\nindex 0000000..9b93706\n--- /dev/null\n+++ b/tests/test_ext_needs_extensions_version_check_inverted.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.config import Config\n+from sphinx.errors import VersionRequirementError\n+from unittest.mock import MagicMock\n+\n+class TestNeedsExtensionsVersionCheck(unittest.TestCase):\n+    def test_needs_extensions_version_check(self):\n+        # Mock Sphinx application and config\n+        app = MagicMock(spec=Sphinx)\n+        config = Config()\n+        config.needs_extensions = {'sphinx_gallery.gen_gallery': '0.6.0'}\n+\n+        # Mock the extension with a version that should be valid\n+        app.extensions = {\n+            'sphinx_gallery.gen_gallery': MagicMock(version='0.10.0')\n+        }\n+\n+        # Verify that the VersionRequirementError is NOT raised due to string comparison\n+        try:\n+            from sphinx.extension import verify_needs_extensions\n+            verify_needs_extensions(app, config)\n+        except VersionRequirementError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 107953,
  "num_received_chars": 5551,
  "elapsed_time": 65.49578809738159,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 1484
}