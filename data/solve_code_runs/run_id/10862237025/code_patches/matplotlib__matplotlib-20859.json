{
  "instance_id": "matplotlib__matplotlib-20859",
  "edit_test_file": "lib/matplotlib/tests/test_figure.py",
  "code_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 44ab024..b2e8d9b 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -360,7 +360,7 @@ class Legend(Artist):\n         \"\"\"\n         # local import only to avoid circularity\n         from matplotlib.axes import Axes\n-        from matplotlib.figure import Figure\n+        from matplotlib.figure import Figure, FigureBase\n \n         super().__init__()\n \n@@ -434,7 +434,7 @@ class Legend(Artist):\n             self.isaxes = True\n             self.axes = parent\n             self.set_figure(parent.figure)\n-        elif isinstance(parent, Figure):\n+        elif isinstance(parent, FigureBase):\n             self.isaxes = False\n             self.set_figure(parent)\n         else:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_subfigure_legend.py b/lib/matplotlib/tests/test_subfigure_legend.py\nnew file mode 100644\nindex 0000000..85dadf0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigure_legend.py\n@@ -0,0 +1,16 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+\n+class TestSubfigureLegend(unittest.TestCase):\n+    def test_subfigure_legend_raises_type_error(self):\n+        subfig = plt.figure().subfigures()\n+        ax = subfig.subplots()\n+        ax.plot([0, 1, 2], [0, 1, 2], label=\"test\")\n+        \n+        with self.assertRaises(TypeError) as context:\n+            subfig.legend()\n+        \n+        self.assertIn(\"Legend needs either Axes or Figure as parent\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_subfigure_legend_inverted.py b/lib/matplotlib/tests/test_subfigure_legend_inverted.py\nnew file mode 100644\nindex 0000000..28bd3fb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigure_legend_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+\n+class TestSubfigureLegend(unittest.TestCase):\n+    def test_subfigure_legend_raises_type_error(self):\n+        subfig = plt.figure().subfigures()\n+        ax = subfig.subplots()\n+        ax.plot([0, 1, 2], [0, 1, 2], label=\"test\")\n+        \n+        try:\n+            subfig.legend()\n+        except TypeError as e:\n+            self.assertIn(\"Legend needs either Axes or Figure as parent\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        else:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 5410705,
  "num_received_chars": 101553,
  "elapsed_time": 1383.9532096385956,
  "lint_repair_count": 34,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}