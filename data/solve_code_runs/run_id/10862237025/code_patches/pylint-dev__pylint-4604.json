{
  "instance_id": "pylint-dev__pylint-4604",
  "edit_test_file": "tests/functional/u/unused/unused_typing_imports.rc",
  "code_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex ceadaef..1ae8b93 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -853,6 +853,10 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 # a top level module, as the package it belongs to\n                 self._module_pkg[context_name] = context_name.rsplit(\".\", 1)[0]\n \n+            # Check if the import is used in type comments\n+            if self._is_used_in_type_comment(node, importedmodname):\n+                return\n+\n             # handle dependencies\n             importedmodnames = self.stats[\"dependencies\"].setdefault(\n                 importedmodname, set()\n@@ -910,6 +914,8 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n \n         for known_context, known_level in contexts:\n             for name, alias in node.names:\n+                if self._is_used_in_type_comment(node, name):\n+                    continue\n                 first = _get_first_import(\n                     node, known_context, name, basename, known_level, alias\n                 )\n",
  "test_patch": "diff --git a/tests/functional/u/unused/unused_import_in_type_comment.py b/tests/functional/u/unused/unused_import_in_type_comment.py\nnew file mode 100644\nindex 0000000..73d9852\n--- /dev/null\n+++ b/tests/functional/u/unused/unused_import_in_type_comment.py\n@@ -0,0 +1,36 @@\n+\"\"\"Test for unused-import false positive with type comments.\"\"\"\n+\n+import unittest\n+import subprocess\n+import os\n+\n+class TestUnusedImportInTypeComment(unittest.TestCase):\n+    def test_unused_import_in_type_comment(self):\n+        # Create a temporary Python file to test the issue\n+        test_file_content = '''\"\"\"Docstring.\"\"\"\n+\n+import abc\n+from abc import ABC\n+\n+X = ...  # type: abc.ABC\n+Y = ...  # type: ABC\n+'''\n+        test_file_path = '/tmp/test_unused_import_in_type_comment.py'\n+        with open(test_file_path, 'w') as test_file:\n+            test_file.write(test_file_content)\n+\n+        # Run pylint on the temporary file\n+        result = subprocess.run(\n+            ['pylint', test_file_path],\n+            capture_output=True,\n+            text=True\n+        )\n+\n+        # Check if the output contains the false positive warning\n+        self.assertIn(\"Unused import abc\", result.stdout)\n+\n+        # Clean up the temporary file\n+        os.remove(test_file_path)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/functional/u/unused/unused_import_in_type_comment_inverted.py b/tests/functional/u/unused/unused_import_in_type_comment_inverted.py\nnew file mode 100644\nindex 0000000..c96221f\n--- /dev/null\n+++ b/tests/functional/u/unused/unused_import_in_type_comment_inverted.py\n@@ -0,0 +1,37 @@\n+\"\"\"Test for unused-import false positive with type comments.\"\"\"\n+\n+import unittest\n+import subprocess\n+import os\n+\n+class TestUnusedImportInTypeComment(unittest.TestCase):\n+    def test_unused_import_in_type_comment(self):\n+        # Create a temporary Python file to test the issue\n+        test_file_content = '''\"\"\"Docstring.\"\"\"\n+\n+import abc\n+from abc import ABC\n+\n+X = ...  # type: abc.ABC\n+Y = ...  # type: ABC\n+'''\n+        test_file_path = '/tmp/test_unused_import_in_type_comment.py'\n+        with open(test_file_path, 'w') as test_file:\n+            test_file.write(test_file_content)\n+\n+        # Run pylint on the temporary file\n+        result = subprocess.run(\n+            ['pylint', test_file_path],\n+            capture_output=True,\n+            text=True\n+        )\n+\n+        # Check if the output contains the false positive warning\n+        if \"Unused import abc\" in result.stdout:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Clean up the temporary file\n+        os.remove(test_file_path)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 149073,
  "num_received_chars": 8624,
  "elapsed_time": 83.21320819854736,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}