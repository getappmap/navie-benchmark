{
  "instance_id": "pydata__xarray-7229",
  "edit_test_file": "xarray/tests/test_duck_array_ops.py",
  "code_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 859b3ae..2c1761f 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -702,6 +702,7 @@ def merge_core(\n     explicit_coords: Sequence | None = None,\n     indexes: Mapping[Any, Any] | None = None,\n     fill_value: object = dtypes.NA,\n+    preserve_coord_attrs: bool = False,  # New parameter to control coordinate attribute preservation\n ) -> _MergeResult:\n     \"\"\"Core logic for merging labeled objects.\n \n",
  "test_patch": "diff --git a/xarray/tests/test_where_keep_attrs.py b/xarray/tests/test_where_keep_attrs.py\nnew file mode 100644\nindex 0000000..e24bd72\n--- /dev/null\n+++ b/xarray/tests/test_where_keep_attrs.py\n@@ -0,0 +1,33 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestWhereKeepAttrs(unittest.TestCase):\n+    def test_where_keep_attrs_overwrites_coordinates(self):\n+        ds = xr.tutorial.load_dataset(\"air_temperature\")\n+        result_attrs = xr.where(True, ds.air, ds.air, keep_attrs=True).time.attrs\n+\n+        # The test should pass if the issue is observed, i.e., coordinate attributes are overwritten\n+        expected_attrs = {\n+            'long_name': '4xDaily Air temperature at sigma level 995',\n+            'units': 'degK',\n+            'precision': 2,\n+            'GRIB_id': 11,\n+            'GRIB_name': 'TMP',\n+            'var_desc': 'Air temperature',\n+            'dataset': 'NMC Reanalysis',\n+            'level_desc': 'Surface',\n+            'statistic': 'Individual Obs',\n+            'parent_stat': 'Other',\n+            'actual_range': np.array([185.16, 322.1], dtype=np.float32)\n+        }\n+\n+        # Check if the attributes are overwritten as expected\n+        for key, value in expected_attrs.items():\n+            if isinstance(value, np.ndarray):\n+                np.testing.assert_array_equal(result_attrs.get(key), value)\n+            else:\n+                self.assertEqual(result_attrs.get(key), value)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_where_keep_attrs_inverted.py b/xarray/tests/test_where_keep_attrs_inverted.py\nnew file mode 100644\nindex 0000000..8fb914e\n--- /dev/null\n+++ b/xarray/tests/test_where_keep_attrs_inverted.py\n@@ -0,0 +1,28 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestWhereKeepAttrs(unittest.TestCase):\n+    def test_where_keep_attrs_overwrites_coordinates(self):\n+        ds = xr.tutorial.load_dataset(\"air_temperature\")\n+        result_attrs = xr.where(True, ds.air, ds.air, keep_attrs=True).time.attrs\n+\n+        # The test should fail if the issue is observed, i.e., coordinate attributes are overwritten\n+        expected_attrs = {\n+            'standard_name': 'time',\n+            'long_name': 'Time'\n+        }\n+\n+        # Check if the attributes are preserved as expected\n+        for key, value in expected_attrs.items():\n+            if isinstance(value, np.ndarray):\n+                try:\n+                    np.testing.assert_array_equal(result_attrs.get(key), value)\n+                except AssertionError:\n+                    raise AssertionError(\"__BUG__HERE__\")\n+            else:\n+                if result_attrs.get(key) != value:\n+                    raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1948762,
  "num_received_chars": 125305,
  "elapsed_time": 1160.4258189201355,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 204056
}