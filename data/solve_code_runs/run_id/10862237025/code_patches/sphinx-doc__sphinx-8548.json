{
  "instance_id": "sphinx-doc__sphinx-8548",
  "edit_test_file": "tests/test_ext_autodoc_private_members.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d3..1bc50df 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -267,11 +267,15 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             if name not in members:\n                 members[name] = ClassAttribute(subject, name, value)\n \n-        superclass = subject.__mro__[1]\n-        for name in obj_dict:\n-            if name not in superclass.__dict__:\n-                value = safe_getattr(subject, name)\n-                members[name] = ClassAttribute(subject, name, value)\n+    # Traverse MRO to include inherited attributes\n+    for cls in subject.__mro__:\n+        for name in dir(cls):\n+            if name not in members:\n+                try:\n+                    value = attrgetter(cls, name)\n+                    members[name] = ClassAttribute(cls, name, value)\n+                except AttributeError:\n+                    continue\n \n     # members in __slots__\n     try:\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_inherited_attributes.py b/tests/test_ext_autodoc_inherited_attributes.py\nnew file mode 100644\nindex 0000000..4a9b1f5\n--- /dev/null\n+++ b/tests/test_ext_autodoc_inherited_attributes.py\n@@ -0,0 +1,37 @@\n+\"\"\"\n+    test_ext_autodoc_inherited_attributes\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for inherited attributes.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import unittest\n+from sphinx.application import Sphinx\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+class TestAutodocInheritedAttributes(unittest.TestCase):\n+    def setUp(self):\n+        self.app = Sphinx(\n+            srcdir='tests/roots/test-ext-autodoc',\n+            confdir='tests/roots/test-ext-autodoc',\n+            outdir='tests/roots/test-ext-autodoc/_build',\n+            doctreedir='tests/roots/test-ext-autodoc/_doctrees',\n+            buildername='html'\n+        )\n+\n+    def test_inherited_attributes(self):\n+        options = {'inherited-members': True}\n+        actual = do_autodoc(self.app, 'class', 'target.inheritance.Derived', options)\n+        # The issue is that inherited attributes are not documented\n+        # We expect the output to be missing the inherited attributes\n+        self.assertNotIn('.. py:attribute:: inheritedmeth', actual)\n+        self.assertNotIn('.. py:attribute:: inheritedclassmeth', actual)\n+        self.assertNotIn('.. py:attribute:: inheritedstaticmeth', actual)\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_inherited_attributes_inverted.py b/tests/test_ext_autodoc_inherited_attributes_inverted.py\nnew file mode 100644\nindex 0000000..ac742fe\n--- /dev/null\n+++ b/tests/test_ext_autodoc_inherited_attributes_inverted.py\n@@ -0,0 +1,38 @@\n+\"\"\"\n+    test_ext_autodoc_inherited_attributes\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for inherited attributes.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import unittest\n+from sphinx.application import Sphinx\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+class TestAutodocInheritedAttributes(unittest.TestCase):\n+    def setUp(self):\n+        self.app = Sphinx(\n+            srcdir='tests/roots/test-ext-autodoc',\n+            confdir='tests/roots/test-ext-autodoc',\n+            outdir='tests/roots/test-ext-autodoc/_build',\n+            doctreedir='tests/roots/test-ext-autodoc/_doctrees',\n+            buildername='html'\n+        )\n+\n+    def test_inherited_attributes(self):\n+        options = {'inherited-members': True}\n+        actual = do_autodoc(self.app, 'class', 'target.inheritance.Derived', options)\n+        # The issue is that inherited attributes are not documented\n+        # We expect the output to include the inherited attributes\n+        # Change assertions to expect the presence of inherited attributes\n+        self.assertIn('.. py:attribute:: inheritedmeth', actual, \"__BUG__HERE__\")\n+        self.assertIn('.. py:attribute:: inheritedclassmeth', actual, \"__BUG__HERE__\")\n+        self.assertIn('.. py:attribute:: inheritedstaticmeth', actual, \"__BUG__HERE__\")\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1561299,
  "num_received_chars": 82414,
  "elapsed_time": 623.2904214859009,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 88351
}