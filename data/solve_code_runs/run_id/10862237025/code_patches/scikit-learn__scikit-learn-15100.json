{
  "instance_id": "scikit-learn__scikit-learn-15100",
  "edit_test_file": "sklearn/feature_extraction/tests/test_text.py",
  "code_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex bb5a9d6..88c7636 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -114,9 +114,9 @@ def _analyze(doc, analyzer=None, tokenizer=None, ngrams=None,\n def strip_accents_unicode(s):\n     \"\"\"Transform accentuated unicode symbols into their simple counterpart\n \n-    Warning: the python-level loop and join operations make this\n-    implementation 20 times slower than the strip_accents_ascii basic\n-    normalization.\n+    This function normalizes the input string to NFKD form and removes\n+    any combining diacritical marks, ensuring consistent accent stripping\n+    for both pre-normalized and non-normalized strings.\n \n     Parameters\n     ----------\n@@ -130,10 +130,7 @@ def strip_accents_unicode(s):\n         ASCII equivalent.\n     \"\"\"\n     normalized = unicodedata.normalize('NFKD', s)\n-    if normalized == s:\n-        return s\n-    else:\n-        return ''.join([c for c in normalized if not unicodedata.combining(c)])\n+    return ''.join([c for c in normalized if not unicodedata.combining(c)])\n \n \n def strip_accents_ascii(s):\n",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_strip_accents.py b/sklearn/feature_extraction/tests/test_strip_accents.py\nnew file mode 100644\nindex 0000000..ae21a0c\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_strip_accents.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+class TestStripAccentsUnicode(unittest.TestCase):\n+    def test_strip_accents_unicode_nfkd(self):\n+        # This string contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+        s1 = chr(241)\n+\n+        # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+        s2 = chr(110) + chr(771)\n+\n+        # The tilde is removed from s1, as expected\n+        self.assertEqual(strip_accents_unicode(s1), 'n')\n+\n+        # But strip_accents_unicode returns s2 unchanged\n+        self.assertEqual(strip_accents_unicode(s2), s2)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/feature_extraction/tests/test_strip_accents_inverted.py b/sklearn/feature_extraction/tests/test_strip_accents_inverted.py\nnew file mode 100644\nindex 0000000..5655241\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_strip_accents_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+class TestStripAccentsUnicode(unittest.TestCase):\n+    def test_strip_accents_unicode_nfkd(self):\n+        # This string contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+        s1 = chr(241)\n+\n+        # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+        s2 = chr(110) + chr(771)\n+\n+        # The tilde is removed from s1, as expected\n+        self.assertEqual(strip_accents_unicode(s1), 'n')\n+\n+        # The test should fail here if the bug is present\n+        # Expecting s2 to be normalized to 'n', but it remains unchanged\n+        self.assertEqual(strip_accents_unicode(s2), 'n', \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 185755,
  "num_received_chars": 4927,
  "elapsed_time": 49.32600927352905,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}