{
  "instance_id": "sphinx-doc__sphinx-7590",
  "edit_test_file": "tests/test_util_docutils.py",
  "code_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d88..b3ca8c0 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4662,9 +4662,10 @@ class DefinitionParser(BaseParser):\n                       integer_literal_re, octal_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n+                udl_suffix = self.last_match.group(4)\n                 while self.current_char in 'uUlLfF':\n                     self.pos += 1\n-                return ASTNumberLiteral(self.definition[pos:self.pos])\n+                return ASTNumberLiteral(self.definition[pos:self.pos], udl_suffix)\n \n         string = self._parse_string()\n         if string is not None:\n@@ -4682,7 +4683,6 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n\ndiff --git a/sphinx/util/cfamily.py b/sphinx/util/cfamily.py\nindex 790a492..8260d56 100644\n--- a/sphinx/util/cfamily.py\n+++ b/sphinx/util/cfamily.py\n@@ -52,6 +52,8 @@ float_literal_re = re.compile(r'''(?x)\n     | (0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9a-fA-F]+)?)\n     | (0[xX][0-9a-fA-F]+\\.([pP][+-]?[0-9a-fA-F]+)?)\n     )\n+    # UDL suffix\n+    ([a-zA-Z_][a-zA-Z0-9_]*)?\n ''')\n char_literal_re = re.compile(r'''(?x)\n     ((?:u8)|u|U|L)?\n",
  "test_patch": "diff --git a/tests/test_domain_cpp_udl.py b/tests/test_domain_cpp_udl.py\nnew file mode 100644\nindex 0000000..0bcfdb0\n--- /dev/null\n+++ b/tests/test_domain_cpp_udl.py\n@@ -0,0 +1,27 @@\n+import os\n+import unittest\n+from io import StringIO\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestCppUserDefinedLiterals(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.srcdir, '_doctrees')\n+        self.confdir = self.srcdir\n+\n+    def test_cpp_user_defined_literals(self):\n+        with self.assertRaises(ApplicationError) as context:\n+            Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                'html',\n+                warning=StringIO()\n+            )\n+        self.assertIn(\"config directory doesn't contain a conf.py file\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_domain_cpp_udl_inverted.py b/tests/test_domain_cpp_udl_inverted.py\nnew file mode 100644\nindex 0000000..14fad55\n--- /dev/null\n+++ b/tests/test_domain_cpp_udl_inverted.py\n@@ -0,0 +1,28 @@\n+import os\n+import unittest\n+from io import StringIO\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestCppUserDefinedLiterals(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.srcdir, '_doctrees')\n+        self.confdir = self.srcdir\n+\n+    def test_cpp_user_defined_literals(self):\n+        with self.assertRaises(ApplicationError) as context:\n+            Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                'html',\n+                warning=StringIO()\n+            )\n+        # Altered the test to fail when the issue is observed\n+        self.assertNotIn(\"config directory doesn't contain a conf.py file\", str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 3256234,
  "num_received_chars": 31292,
  "elapsed_time": 507.25976157188416,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 829
}