{
  "instance_id": "matplotlib__matplotlib-25775",
  "edit_test_file": "lib/matplotlib/tests/test_text.py",
  "code_patch": "diff --git a/lib/matplotlib/artist.pyi b/lib/matplotlib/artist.pyi\nindex 4597bed..92c5f4e 100644\n--- a/lib/matplotlib/artist.pyi\n+++ b/lib/matplotlib/artist.pyi\n@@ -138,6 +138,9 @@ class Artist:\n     def get_mouseover(self) -> bool: ...\n     def set_mouseover(self, mouseover: bool) -> None: ...\n \n+    def set_antialiased(self, antialiased: bool) -> None: ...\n+    def get_antialiased(self) -> bool: ...\n+\n     @property\n     def mouseover(self) -> bool: ...\n     @mouseover.setter\n\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 4591316..67bec4d 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -114,6 +114,7 @@ class Text(Artist):\n                  usetex=None,          # defaults to rcParams['text.usetex']\n                  wrap=False,\n                  transform_rotates_text=False,\n+                 antialiased=True,     # default antialiasing state\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n                  **kwargs\n                  ):\n@@ -150,8 +151,18 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        self._antialiased = antialiased\n         self.update(kwargs)\n \n+    def set_antialiased(self, antialiased):\n+        \"\"\"Set the antialiasing state for the text.\"\"\"\n+        self._antialiased = antialiased\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"Return the antialiasing state of the text.\"\"\"\n+        return self._antialiased\n+\n     def _reset_visual_defaults(\n         self,\n         text='',\n@@ -736,6 +747,7 @@ class Text(Artist):\n             gc = renderer.new_gc()\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n+            gc.set_antialiased(self.get_antialiased())\n             gc.set_url(self._url)\n             self._set_gc_clip(gc)\n \n@@ -1817,7 +1829,7 @@ or callable, default: value of *xycoords*\n             self.arrow_patch = None\n \n         # Must come last, as some kwargs may be propagated to arrow_patch.\n-        Text.__init__(self, x, y, text, **kwargs)\n+        Text.__init__(self, x, y, text, antialiased=kwargs.pop('antialiased', True), **kwargs)\n \n     @_api.rename_parameter(\"3.8\", \"event\", \"mouseevent\")\n     def contains(self, mouseevent):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiased.py b/lib/matplotlib/tests/test_text_antialiased.py\nnew file mode 100644\nindex 0000000..507bf69\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiased.py\n@@ -0,0 +1,19 @@\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestTextAntialiasing(unittest.TestCase):\n+    def test_text_antialiasing_issue(self):\n+        # Set the global antialiasing state\n+        mpl.rcParams['text.antialiased'] = False\n+\n+        # Create a figure and add text\n+        fig, ax = plt.subplots()\n+        text = ax.text(0.5, 0.5, 'Test Text')\n+\n+        # Check if the text object respects the global antialiasing state\n+        with self.assertRaises(AttributeError):\n+            text.get_antialiased()\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiased_inverted.py b/lib/matplotlib/tests/test_text_antialiased_inverted.py\nnew file mode 100644\nindex 0000000..ca8dfcb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiased_inverted.py\n@@ -0,0 +1,22 @@\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestTextAntialiasing(unittest.TestCase):\n+    def test_text_antialiasing_issue(self):\n+        # Set the global antialiasing state\n+        mpl.rcParams['text.antialiased'] = False\n+\n+        # Create a figure and add text\n+        fig, ax = plt.subplots()\n+        text = ax.text(0.5, 0.5, 'Test Text')\n+\n+        # Check if the text object respects the global antialiasing state\n+        # The test should now fail if the bug is observed\n+        try:\n+            text.get_antialiased()\n+        except AttributeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 299111,
  "num_received_chars": 14603,
  "elapsed_time": 270.2496614456177,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}