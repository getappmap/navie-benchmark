{
  "instance_id": "scikit-learn__scikit-learn-13779",
  "edit_test_file": "sklearn/utils/tests/test_estimator_checks.py",
  "code_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa718..9c08b0a 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,22 +78,23 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n-        names, clfs = zip(*self.estimators)\n+        # Filter out None estimators and adjust weights accordingly\n+        valid_estimators = [(name, clf) for name, clf in self.estimators if clf is not None]\n+        names, clfs = zip(*valid_estimators)\n         self._validate_names(names)\n \n-        n_isnone = np.sum([clf is None for _, clf in self.estimators])\n-        if n_isnone == len(self.estimators):\n+        if len(valid_estimators) == 0:\n             raise ValueError('All estimators are None. At least one is '\n                              'required!')\n \n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n                                                  sample_weight=sample_weight)\n-                for clf in clfs if clf is not None)\n+                for clf in clfs)\n \n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_voting_estimator_failure.py b/sklearn/utils/tests/test_voting_estimator_failure.py\nnew file mode 100644\nindex 0000000..2b208ad\n--- /dev/null\n+++ b/sklearn/utils/tests/test_voting_estimator_failure.py\n@@ -0,0 +1,23 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+\n+class TestVotingEstimatorFailure(unittest.TestCase):\n+    def test_voting_estimator_with_none_estimator(self):\n+        X, y = load_iris(return_X_y=True)\n+        voter = VotingClassifier(\n+            estimators=[('lr', LogisticRegression()),\n+                        ('rf', RandomForestClassifier())]\n+        )\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        voter.set_params(lr=None)\n+        \n+        with self.assertRaises(AttributeError) as context:\n+            voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        \n+        self.assertIn(\"'NoneType' object has no attribute 'fit'\", str(context.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/utils/tests/test_voting_estimator_failure_inverted.py b/sklearn/utils/tests/test_voting_estimator_failure_inverted.py\nnew file mode 100644\nindex 0000000..34c07f4\n--- /dev/null\n+++ b/sklearn/utils/tests/test_voting_estimator_failure_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+\n+class TestVotingEstimatorFailure(unittest.TestCase):\n+    def test_voting_estimator_with_none_estimator(self):\n+        X, y = load_iris(return_X_y=True)\n+        voter = VotingClassifier(\n+            estimators=[('lr', LogisticRegression()),\n+                        ('rf', RandomForestClassifier())]\n+        )\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        voter.set_params(lr=None)\n+        \n+        try:\n+            voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        except AttributeError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 147570,
  "num_received_chars": 6101,
  "elapsed_time": 57.12345910072327,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}