{
  "instance_id": "django__django-15789",
  "edit_test_file": "tests/serializers/test_json.py",
  "code_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97b..694039e 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,21 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+\n+    The encoder parameter allows using a custom JSON encoder class. If not provided,\n+    the DjangoJSONEncoder will be used as the default encoder.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n+\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/serializers/test_json_script_encoder.py b/tests/serializers/test_json_script_encoder.py\nnew file mode 100644\nindex 0000000..9844f5d\n--- /dev/null\n+++ b/tests/serializers/test_json_script_encoder.py\n@@ -0,0 +1,29 @@\n+import json\n+import uuid\n+from django.test import SimpleTestCase\n+from django.utils.html import json_script\n+from django.core.serializers.json import DjangoJSONEncoder\n+\n+\n+class CustomJSONEncoder(json.JSONEncoder):\n+    def default(self, obj):\n+        if isinstance(obj, uuid.UUID):\n+            return str(obj)\n+        return super().default(obj)\n+\n+\n+class JsonScriptEncoderTests(SimpleTestCase):\n+    \"\"\"\n+    Tests for json_script() to verify it cannot accept a custom encoder.\n+    \"\"\"\n+    def test_json_script_encoder_hardcoded(self):\n+        \"\"\"\n+        json_script() uses hardcoded DjangoJSONEncoder and cannot accept a custom encoder.\n+        \"\"\"\n+        test_uuid = uuid.UUID('12345678-1234-5678-1234-567812345678')\n+        data = {'uuid': test_uuid}\n+\n+        # This should raise TypeError since json_script() doesn't accept an encoder parameter\n+        # and uses hardcoded DjangoJSONEncoder which cannot handle UUID objects\n+        with self.assertRaises(TypeError):\n+            json_script(data, 'test-id', encoder=CustomJSONEncoder)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/serializers/test_json_script_encoder_inverted.py b/tests/serializers/test_json_script_encoder_inverted.py\nnew file mode 100644\nindex 0000000..5098d57\n--- /dev/null\n+++ b/tests/serializers/test_json_script_encoder_inverted.py\n@@ -0,0 +1,37 @@\n+import json\n+import uuid\n+from django.test import SimpleTestCase\n+from django.utils.html import json_script\n+from django.core.serializers.json import DjangoJSONEncoder\n+\n+\n+class CustomJSONEncoder(json.JSONEncoder):\n+    def default(self, obj):\n+        if isinstance(obj, uuid.UUID):\n+            return str(obj)\n+        return super().default(obj)\n+\n+\n+class JsonScriptEncoderTests(SimpleTestCase):\n+    \"\"\"\n+    Tests for json_script() to verify it should accept a custom encoder.\n+    \"\"\"\n+    def test_json_script_encoder_support(self):\n+        \"\"\"\n+        json_script() should support custom JSON encoders.\n+        \"\"\"\n+        test_uuid = uuid.UUID('12345678-1234-5678-1234-567812345678')\n+        data = {'uuid': test_uuid}\n+\n+        try:\n+            result = json_script(data, 'test-id', encoder=CustomJSONEncoder)\n+        except TypeError:\n+            # If we get here, it means json_script doesn't accept the encoder parameter\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # If we get here, the encoder parameter was accepted, which is what we want\n+        self.assertIn(\n+            '\"12345678-1234-5678-1234-567812345678\"',\n+            result,\n+            \"UUID should be properly serialized by custom encoder\"\n+        )\n\\ No newline at end of file\n",
  "num_sent_chars": 3161705,
  "num_received_chars": 30886,
  "elapsed_time": 496.8754634857178,
  "lint_repair_count": 0,
  "test_generation_attempts": 8,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}