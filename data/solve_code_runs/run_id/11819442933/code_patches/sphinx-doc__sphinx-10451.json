{
  "instance_id": "sphinx-doc__sphinx-10451",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex d912cd7..ad06cf2 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -90,24 +90,49 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n                       suppress_rtype: bool = False) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n+\n+    def normalize_param_name(name: str) -> str:\n+        \"\"\"Normalize parameter name by removing asterisk prefixes.\"\"\"\n+        if name.startswith('**'):\n+            return name[2:]\n+        elif name.startswith('*'):\n+            return name[1:]\n+        return name\n+\n+    def get_canonical_name(name: str) -> str:\n+        \"\"\"Get canonical name for storing in arguments dict.\"\"\"\n+        if name.startswith('**') or name.startswith('*'):\n+            return name  # Keep original format for variadic params\n+        return name\n+\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 # :param xxx:\n-                arg = arguments.setdefault(parts[1], {})\n+                canonical_name = get_canonical_name(parts[1])\n+                arg = arguments.setdefault(canonical_name, {})\n                 arg['param'] = True\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n                 name = ' '.join(parts[2:])\n-                arg = arguments.setdefault(name, {})\n+                canonical_name = get_canonical_name(name)\n+                arg = arguments.setdefault(canonical_name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n-            arg['type'] = True\n+            # Match type field with any variant of the parameter name\n+            normalized_name = normalize_param_name(name)\n+            for argname in list(arguments.keys()):\n+                if normalize_param_name(argname) == normalized_name:\n+                    arguments[argname]['type'] = True\n+                    break\n+            else:\n+                canonical_name = get_canonical_name(name)\n+                arg = arguments.setdefault(canonical_name, {})\n+                arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n@@ -115,15 +140,28 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if name == 'return':\n             continue\n \n-        arg = arguments.get(name, {})\n-        if not arg.get('type'):\n+        # Try to find existing argument entry by normalized name\n+        normalized_name = normalize_param_name(name)\n+        matching_arg = None\n+        matching_name = None\n+        for argname, arginfo in arguments.items():\n+            if normalize_param_name(argname) == normalized_name:\n+                matching_arg = arginfo\n+                matching_name = argname\n+                break\n+\n+        if matching_arg is None:\n+            matching_arg = {}\n+            matching_name = name\n+\n+        if not matching_arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + matching_name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not matching_arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + matching_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n",
  "code_files": null,
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 3580014,
  "num_received_chars": 45811,
  "elapsed_time": 603.0918498039246,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}