{
  "instance_id": "matplotlib__matplotlib-23964",
  "edit_test_file": "lib/matplotlib/tests/test_backend_ps.py",
  "code_patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e81..da5d9d9 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@ grestore\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:  # Only append if we have content\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
  "code_files": null,
  "test_patch": "diff --git a/lib/matplotlib/tests/test_empty_line_text_label.py b/lib/matplotlib/tests/test_empty_line_text_label.py\nnew file mode 100644\nindex 0000000..e66e301\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_empty_line_text_label.py\n@@ -0,0 +1,25 @@\n+import pytest\n+from matplotlib.figure import Figure\n+import io\n+\n+def test_empty_line_text_label():\n+    \"\"\"Test that empty line in text label raises TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    \n+    # The issue only occurs with PS/EPS backend\n+    with pytest.raises(TypeError, match=\"cannot unpack non-iterable NoneType object\"):\n+        with io.BytesIO() as buf:\n+            fig.savefig(buf, format='ps')\n+\n+def test_empty_line_title():\n+    \"\"\"Test that empty line in title raises TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    \n+    # The issue only occurs with PS/EPS backend\n+    with pytest.raises(TypeError, match=\"cannot unpack non-iterable NoneType object\"):\n+        with io.BytesIO() as buf:\n+            fig.savefig(buf, format='eps')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_empty_line_text_label_inverted.py b/lib/matplotlib/tests/test_empty_line_text_label_inverted.py\nnew file mode 100644\nindex 0000000..282532a\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_empty_line_text_label_inverted.py\n@@ -0,0 +1,33 @@\n+import pytest\n+from matplotlib.figure import Figure\n+import io\n+\n+def test_empty_line_text_label():\n+    \"\"\"Test that empty line in text label should not raise TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    \n+    # The bug causes a TypeError, which should not happen\n+    with io.BytesIO() as buf:\n+        try:\n+            fig.savefig(buf, format='ps')\n+        except TypeError as e:\n+            if \"cannot unpack non-iterable NoneType object\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise e\n+\n+def test_empty_line_title():\n+    \"\"\"Test that empty line in title should not raise TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    \n+    # The bug causes a TypeError, which should not happen\n+    with io.BytesIO() as buf:\n+        try:\n+            fig.savefig(buf, format='eps')\n+        except TypeError as e:\n+            if \"cannot unpack non-iterable NoneType object\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise e\n\\ No newline at end of file\n",
  "num_sent_chars": 3423001,
  "num_received_chars": 39231,
  "elapsed_time": 793.7117891311646,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}