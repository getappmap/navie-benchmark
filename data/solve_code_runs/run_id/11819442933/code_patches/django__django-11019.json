{
  "instance_id": "django__django-11019",
  "edit_test_file": "tests/forms_tests/tests/test_media.py",
  "code_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 02aa32b..5254a10 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -119,7 +119,7 @@ class Media:\n         \"\"\"\n         Merge two lists while trying to keep the relative order of the elements.\n         Warn if the lists have the same two elements in a different relative\n-        order.\n+        order that could indicate a dependency conflict.\n \n         For static assets it can be important to have them included in the DOM\n         in a certain order. In JavaScript you may not be able to reference a\n@@ -127,26 +127,34 @@ class Media:\n         \"\"\"\n         # Start with a copy of list_1.\n         combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n-        for path in reversed(list_2):\n+        # Track the last seen position of each file to detect real conflicts\n+        last_seen = {path: i for i, path in enumerate(list_1)}\n+        # Walk list_2 in order, inserting each element into combined_list\n+        # in a position that preserves dependencies\n+        for path in list_2:\n             try:\n                 # Does path already exist in the list?\n                 index = combined_list.index(path)\n             except ValueError:\n                 # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n+                # Insert after any files that came before it in list_2\n+                insert_index = len(combined_list)\n+                for existing_path in combined_list:\n+                    if existing_path in last_seen and last_seen[existing_path] > last_seen.get(path, -1):\n+                        insert_index = min(insert_index, combined_list.index(existing_path))\n+                combined_list.insert(insert_index, path)\n+                last_seen[path] = insert_index\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n+                # Check if this creates a real dependency conflict\n+                for prev_path in list_2[:list_2.index(path)]:\n+                    if prev_path in combined_list and combined_list.index(prev_path) > index:\n+                        warnings.warn(\n+                            'Detected Media files with conflicting dependencies:\\n'\n+                            '%s must come before %s in list_2 but after it in list_1' % (path, prev_path),\n+                            MediaOrderConflictWarning,\n+                        )\n+                # Update last_seen position for this path\n+                last_seen[path] = index\n         return combined_list\n \n     def __add__(self, other):\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/forms_tests/tests/test_media_order_conflicts.py b/tests/forms_tests/tests/test_media_order_conflicts.py\nnew file mode 100644\nindex 0000000..44abf8d\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_media_order_conflicts.py\n@@ -0,0 +1,44 @@\n+from django import forms\n+from django.test import SimpleTestCase\n+\n+\n+class ColorPicker(forms.Widget):\n+    class Media:\n+        js = ['color-picker.js']\n+\n+\n+class SimpleTextWidget(forms.Widget):\n+    class Media:\n+        js = ['text-editor.js']\n+\n+\n+class FancyTextWidget(forms.Widget):\n+    class Media:\n+        js = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']\n+\n+\n+class MyForm(forms.Form):\n+    background_color = forms.CharField(widget=ColorPicker())\n+    intro = forms.CharField(widget=SimpleTextWidget())\n+    body = forms.CharField(widget=FancyTextWidget())\n+\n+\n+class MediaOrderConflictTests(SimpleTestCase):\n+    \"\"\"Tests for media ordering conflicts when merging multiple media objects.\"\"\"\n+\n+    def test_media_order_warning(self):\n+        \"\"\"\n+        Test that merging media from multiple widgets produces a warning when\n+        the order of JS files conflicts, and that the resulting order is incorrect.\n+        \"\"\"\n+        msg = 'Detected duplicate Media files in an opposite order:\\ntext-editor-extras.js\\ntext-editor.js'\n+        with self.assertWarnsMessage(RuntimeWarning, msg):\n+            form = MyForm()\n+            media_js = form.media._js\n+\n+        # The resulting order is incorrect - text-editor-extras.js appears before text-editor.js\n+        # even though text-editor-extras.js depends on text-editor.js\n+        self.assertEqual(\n+            media_js,\n+            ['text-editor-extras.js', 'color-picker.js', 'text-editor.js']\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 11302534,
  "num_received_chars": 186733,
  "elapsed_time": 2125.197954893112,
  "lint_repair_count": 19,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}