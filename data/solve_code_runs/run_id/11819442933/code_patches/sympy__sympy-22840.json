{
  "instance_id": "sympy__sympy-22840",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex eddbe44..402539e 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -271,7 +271,11 @@ def __new__(cls, name, **assumptions):\n \n         \"\"\"\n         cls._sanitize(assumptions, cls)\n-        return Symbol.__xnew_cached_(cls, name, **assumptions)\n+        obj = Symbol.__xnew_cached_(cls, name, **assumptions)\n+        if hasattr(obj, 'is_Matrix') and obj.is_Matrix:\n+            # Enable optimized CSE handling for matrix symbols\n+            obj._cse_skip_matrix_copy = True\n+        return obj\n \n     def __new_stage2__(cls, name, **assumptions):\n         if not isinstance(name, str):\n@@ -337,8 +341,11 @@ def sort_key(self, order=None):\n \n     def as_dummy(self):\n         # only put commutativity in explicitly if it is False\n-        return Dummy(self.name) if self.is_commutative is not False \\\n+        dummy = Dummy(self.name) if self.is_commutative is not False \\\n             else Dummy(self.name, commutative=self.is_commutative)\n+        if hasattr(self, '_cse_skip_matrix_copy'):\n+            dummy._cse_skip_matrix_copy = self._cse_skip_matrix_copy\n+        return dummy\n \n     def as_real_imag(self, deep=True, **hints):\n         if hints.get('ignore') == self:\n@@ -347,6 +354,10 @@ def as_real_imag(self, deep=True, **hints):\n             from sympy.functions.elementary.complexes import im, re\n             return (re(self), im(self))\n \n+    def _eval_is_cse_atomic(self):\n+        \"\"\"Indicate if this symbol should be treated as atomic during CSE.\"\"\"\n+        return hasattr(self, '_cse_skip_matrix_copy') and self._cse_skip_matrix_copy\n+\n     def is_constant(self, *wrt, **flags):\n         if not wrt:\n             return False\n",
  "code_files": null,
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 4588628,
  "num_received_chars": 62637,
  "elapsed_time": 999.0803961753845,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}