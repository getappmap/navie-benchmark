{
  "instance_id": "scikit-learn__scikit-learn-11040",
  "edit_test_file": "sklearn/neighbors/tests/test_neighbors.py",
  "code_patch": "diff --git a/sklearn/neighbors/unsupervised.py b/sklearn/neighbors/unsupervised.py\nindex db19e8d..9059d12 100644\n--- a/sklearn/neighbors/unsupervised.py\n+++ b/sklearn/neighbors/unsupervised.py\n@@ -1,5 +1,7 @@\n \"\"\"Unsupervised nearest neighbors learner\"\"\"\n \n+import numpy as np\n+\n from .base import NeighborsBase\n from .base import KNeighborsMixin\n from .base import RadiusNeighborsMixin\n@@ -115,6 +117,13 @@ class NearestNeighbors(NeighborsBase, KNeighborsMixin,\n     def __init__(self, n_neighbors=5, radius=1.0,\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1, **kwargs):\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    'n_neighbors must be an integer, got %r instead.' \n+                    % type(n_neighbors).__name__)\n+            if n_neighbors <= 0:\n+                raise ValueError('n_neighbors must be positive.')\n         super(NearestNeighbors, self).__init__(\n               n_neighbors=n_neighbors,\n               radius=radius,\n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/neighbors/tests/test_neighbors_validation.py b/sklearn/neighbors/tests/test_neighbors_validation.py\nnew file mode 100644\nindex 0000000..f88f6bc\n--- /dev/null\n+++ b/sklearn/neighbors/tests/test_neighbors_validation.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from sklearn.neighbors import NearestNeighbors\n+from sklearn.datasets import make_blobs\n+from sklearn.utils.testing import assert_raises\n+\n+def test_float_n_neighbors_validation():\n+    \"\"\"Test that using float values for n_neighbors raises TypeError.\"\"\"\n+    X, y = make_blobs(n_samples=10, random_state=42)\n+    \n+    # Test float n_neighbors in constructor\n+    nn = NearestNeighbors(n_neighbors=3.0)\n+    assert_raises(TypeError, nn.fit(X).kneighbors, X)\n+    \n+    # Test float n_neighbors in kneighbors method\n+    nn = NearestNeighbors(n_neighbors=3)\n+    nn.fit(X)\n+    assert_raises(TypeError, nn.kneighbors, X, n_neighbors=3.0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/neighbors/tests/test_neighbors_validation_inverted.py b/sklearn/neighbors/tests/test_neighbors_validation_inverted.py\nnew file mode 100644\nindex 0000000..82f1da9\n--- /dev/null\n+++ b/sklearn/neighbors/tests/test_neighbors_validation_inverted.py\n@@ -0,0 +1,30 @@\n+import numpy as np\n+from sklearn.neighbors import NearestNeighbors\n+from sklearn.datasets import make_blobs\n+\n+def test_float_n_neighbors_validation():\n+    \"\"\"Test that float values for n_neighbors are properly validated.\"\"\"\n+    X, y = make_blobs(n_samples=10, random_state=42)\n+    \n+    # Test float n_neighbors in constructor\n+    nn = NearestNeighbors(n_neighbors=3.0)\n+    try:\n+        # This should raise TypeError before reaching binary_tree.pxi\n+        nn.fit(X).kneighbors(X)\n+        raise AssertionError(\"__BUG__HERE__: Float n_neighbors in constructor not properly validated\")\n+    except TypeError as e:\n+        # Verify we get the validation error, not the binary_tree error\n+        assert \"'float' object cannot be interpreted as an integer\" not in str(e)\n+        assert \"n_neighbors must be an integer\" in str(e)\n+    \n+    # Test float n_neighbors in kneighbors method\n+    nn = NearestNeighbors(n_neighbors=3)\n+    nn.fit(X)\n+    try:\n+        # This should raise TypeError before reaching binary_tree.pxi\n+        nn.kneighbors(X, n_neighbors=3.0)\n+        raise AssertionError(\"__BUG__HERE__: Float n_neighbors in kneighbors method not properly validated\")\n+    except TypeError as e:\n+        # Verify we get the validation error, not the binary_tree error\n+        assert \"'float' object cannot be interpreted as an integer\" not in str(e)\n+        assert \"n_neighbors must be an integer\" in str(e)\n\\ No newline at end of file\n",
  "num_sent_chars": 5155632,
  "num_received_chars": 74163,
  "elapsed_time": 915.1302335262299,
  "lint_repair_count": 3,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}