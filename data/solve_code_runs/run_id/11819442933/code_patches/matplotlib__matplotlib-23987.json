{
  "instance_id": "matplotlib__matplotlib-23987",
  "edit_test_file": "lib/matplotlib/tests/test_figure.py",
  "code_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786..d37950d 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2415,7 +2415,7 @@ class Figure(FigureBase):\n                 _api.warn_external(\n                     \"The Figure parameters 'layout' and 'constrained_layout' \"\n                     \"cannot be used together. Please use 'layout' only.\")\n-            self.set_layout_engine(layout=layout)\n+            self.set_layout_engine(layout='none' if layout is False else layout)\n         elif tight_layout is not None:\n             if constrained_layout is not None:\n                 _api.warn_external(\n@@ -2426,11 +2426,13 @@ class Figure(FigureBase):\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n         elif constrained_layout is not None:\n-            self.set_layout_engine(layout='constrained')\n-            if isinstance(constrained_layout, dict):\n-                self.get_layout_engine().set(**constrained_layout)\n+            if constrained_layout is False:\n+                self.set_layout_engine(layout='none')\n+            else:\n+                self.set_layout_engine(layout='constrained')\n+                if isinstance(constrained_layout, dict):\n+                    self.get_layout_engine().set(**constrained_layout)\n         else:\n-            # everything is None, so use default:\n             self.set_layout_engine(layout=layout)\n \n         self._fig_callbacks = cbook.CallbackRegistry(signals=[\"dpi_changed\"])\n",
  "code_files": null,
  "test_patch": "diff --git a/lib/matplotlib/tests/test_layout_warnings.py b/lib/matplotlib/tests/test_layout_warnings.py\nnew file mode 100644\nindex 0000000..98fc305\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_layout_warnings.py\n@@ -0,0 +1,26 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+import warnings\n+\n+\n+def test_subplots_adjust_warning_with_constrained_layout_false():\n+    \"\"\"Test that a warning is incorrectly raised when using subplots_adjust\n+    with constrained_layout=False.\"\"\"\n+    \n+    # Create test data\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    \n+    # Create figure with constrained_layout explicitly set to False\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    \n+    # Check that warning is raised when calling subplots_adjust\n+    with pytest.warns(UserWarning, match=\"This figure was using a layout engine \"\n+                     \"that is incompatible with subplots_adjust\"):\n+        plt.subplots_adjust(wspace=0)\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_layout_warnings_inverted.py b/lib/matplotlib/tests/test_layout_warnings_inverted.py\nnew file mode 100644\nindex 0000000..07e55fc\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_layout_warnings_inverted.py\n@@ -0,0 +1,31 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+import warnings\n+\n+\n+def test_no_warning_with_constrained_layout_false():\n+    \"\"\"Test that no warning is raised when using subplots_adjust\n+    with constrained_layout=False.\"\"\"\n+    \n+    # Create test data\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    \n+    # Create figure with constrained_layout explicitly set to False\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    \n+    # The test should fail if a warning is raised\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        plt.subplots_adjust(wspace=0)\n+        \n+        for warning in w:\n+            if \"This figure was using a layout engine that is incompatible with subplots_adjust\" in str(warning.message):\n+                plt.close(fig)\n+                raise AssertionError(\"__BUG__HERE__\")\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "num_sent_chars": 2578213,
  "num_received_chars": 42778,
  "elapsed_time": 617.0482878684998,
  "lint_repair_count": 1,
  "test_generation_attempts": 4,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}