{
  "instance_id": "sympy__sympy-14317",
  "edit_test_file": "sympy/printing/tests/test_str.py",
  "code_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 737e16c..7d4427b 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1853,29 +1853,62 @@ def _print_PolynomialRingBase(self, expr):\n         return r\"%s%s\\left[%s\\right]\" % (inv, domain, symbols)\n \n     def _print_Poly(self, poly):\n-        cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n-        gens = list(map(self._print, poly.gens))\n-        domain = \"domain=%s\" % self._print(poly.get_domain())\n-\n-        args = \", \".join([expr] + gens + [domain])\n-        if cls in accepted_latex_functions:\n-            tex = r\"\\%s {\\left (%s \\right )}\" % (cls, args)\n+        if self.order == 'none':\n+            terms = list(poly.terms())\n         else:\n-            tex = r\"\\operatorname{%s}{\\left( %s \\right)}\" % (cls, args)\n+            terms = poly._sorted(poly.terms(), order=self.order)\n \n-        return tex\n+        tex = \"\"\n+        first = True\n+        for monom, coeff in terms:\n+            coeff = poly.domain.to_sympy(coeff)\n+            monom = list(zip(poly.gens, monom))\n \n-    def _print_ComplexRootOf(self, root):\n-        cls = root.__class__.__name__\n-        if cls == \"ComplexRootOf\":\n-            cls = \"CRootOf\"\n-        expr = self._print(root.expr)\n-        index = root.index\n-        if cls in accepted_latex_functions:\n-            return r\"\\%s {\\left(%s, %d\\right)}\" % (cls, expr, index)\n-        else:\n-            return r\"\\operatorname{%s} {\\left(%s, %d\\right)}\" % (cls, expr, index)\n+            if coeff.is_Add:\n+                coeff = \"(%s)\" % self._print(coeff)\n+            else:\n+                coeff = self._print(coeff)\n+\n+            if first and coeff in [\"-1\", \"-1.0\"]:\n+                tex += \"-\"\n+                coeff = \"\"\n+            elif coeff == \"1\":\n+                coeff = \"\"\n+            elif coeff == \"-1\":\n+                coeff = \"-\"\n+\n+            term = []\n+            for gen, exp in monom:\n+                if exp > 0:\n+                    if exp == 1:\n+                        term.append(self._print(gen))\n+                    else:\n+                        term.append(\"%s^{%d}\" % (self._print(gen), exp))\n+\n+            term = \" \".join(term)\n+\n+            if term:\n+                if not coeff and not first:\n+                    tex += \" + \"\n+                elif not coeff:\n+                    pass\n+                elif first:\n+                    tex += coeff\n+                else:\n+                    tex += \" + \" + coeff\n+                tex += term\n+            elif coeff:\n+                if first:\n+                    tex += coeff\n+                else:\n+                    tex += \" + \" + coeff\n+\n+            first = False\n+\n+        if not tex:\n+            tex = \"0\"\n+\n+        return tex\n \n     def _print_RootSum(self, expr):\n         cls = expr.__class__.__name__\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/printing/tests/test_monomial_order.py b/sympy/printing/tests/test_monomial_order.py\nnew file mode 100644\nindex 0000000..882ecb7\n--- /dev/null\n+++ b/sympy/printing/tests/test_monomial_order.py\n@@ -0,0 +1,14 @@\n+from sympy import Poly, Symbol, latex\n+from sympy.abc import x, a, b, c\n+\n+def test_monomial_order():\n+    \"\"\"Test that latex printer preserves monomial order like str/pretty printers\"\"\"\n+    p = Poly([a, 1, b, 2, c, 3], x)\n+    \n+    # str output shows descending order: x^5, x^4, x^3, x^2, x, const\n+    str_output = str(p)\n+    assert str_output == \"Poly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\"\n+    \n+    # latex output has different order\n+    latex_output = latex(p)\n+    assert latex_output == r'\\operatorname{Poly}{\\left( a x^{5} + b x^{3} + c x + x^{4} + 2 x^{2} + 3, x, domain=\\mathbb{Z}\\left[a, b, c\\right] \\right)}'\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/printing/tests/test_monomial_order_inverted.py b/sympy/printing/tests/test_monomial_order_inverted.py\nnew file mode 100644\nindex 0000000..7bccba9\n--- /dev/null\n+++ b/sympy/printing/tests/test_monomial_order_inverted.py\n@@ -0,0 +1,17 @@\n+from sympy import Poly, Symbol, latex\n+from sympy.abc import x, a, b, c\n+\n+def test_monomial_order():\n+    \"\"\"Test that latex printer preserves monomial order like str/pretty printers\"\"\"\n+    p = Poly([a, 1, b, 2, c, 3], x)\n+    \n+    # str output shows descending order: x^5, x^4, x^3, x^2, x, const\n+    str_output = str(p)\n+    assert str_output == \"Poly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\"\n+    \n+    # latex output should have the same monomial order as str output\n+    latex_output = latex(p)\n+    expected_latex = r'\\operatorname{Poly}{\\left( a x^{5} + x^{4} + b x^{3} + 2 x^{2} + c x + 3, x, domain=\\mathbb{Z}\\left[a, b, c\\right] \\right)}'\n+    \n+    if latex_output != expected_latex:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 7099065,
  "num_received_chars": 93924,
  "elapsed_time": 1685.2581667900085,
  "lint_repair_count": 12,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}