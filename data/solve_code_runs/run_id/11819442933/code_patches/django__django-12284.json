{
  "instance_id": "django__django-12284",
  "edit_test_file": "tests/model_fields/tests.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05..b49b64b 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -945,6 +945,11 @@ class Model(metaclass=ModelBase):\n \n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n+        # Get the field from the most specific (child) model\n+        model_field = self._meta.get_field(field.name)\n+        if model_field is not field:\n+            # If we got a different field instance, use its choices\n+            field = model_field\n         choices_dict = dict(make_hashable(field.flatchoices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/model_fields/test_inherited_choices.py b/tests/model_fields/test_inherited_choices.py\nnew file mode 100644\nindex 0000000..e1df237\n--- /dev/null\n+++ b/tests/model_fields/test_inherited_choices.py\n@@ -0,0 +1,34 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class AbstractChoicesModel(models.Model):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+    class Meta:\n+        abstract = True\n+\n+\n+class ConcreteChoicesModel(AbstractChoicesModel):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+        ('C', 'output3'),  # Additional choice\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+\n+class InheritedChoicesTest(SimpleTestCase):\n+    def test_get_display_with_inherited_choices(self):\n+        \"\"\"\n+        get_FOO_display() should return the display value for choices inherited\n+        from an abstract base class, but returns the raw value instead.\n+        \"\"\"\n+        instance = ConcreteChoicesModel(field_foo='C')\n+        \n+        # This should return 'output3' but returns 'C' due to the bug\n+        self.assertEqual(instance.get_field_foo_display(), 'C')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_inherited_choices_inverted.py b/tests/model_fields/test_inherited_choices_inverted.py\nnew file mode 100644\nindex 0000000..a5df970\n--- /dev/null\n+++ b/tests/model_fields/test_inherited_choices_inverted.py\n@@ -0,0 +1,37 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class AbstractChoicesModel(models.Model):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+    class Meta:\n+        abstract = True\n+\n+\n+class ConcreteChoicesModel(AbstractChoicesModel):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+        ('C', 'output3'),  # Additional choice\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+\n+class InheritedChoicesTest(SimpleTestCase):\n+    def test_get_display_with_inherited_choices(self):\n+        \"\"\"\n+        get_FOO_display() should return the display value for choices inherited\n+        from an abstract base class. The test should fail if it returns the raw value.\n+        \"\"\"\n+        instance = ConcreteChoicesModel(field_foo='C')\n+        display_value = instance.get_field_foo_display()\n+        \n+        if display_value == 'C':\n+            raise AssertionError('__BUG__HERE__')\n+            \n+        self.assertEqual(display_value, 'output3')\n\\ No newline at end of file\n",
  "num_sent_chars": 1790143,
  "num_received_chars": 14568,
  "elapsed_time": 210.916188955307,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}