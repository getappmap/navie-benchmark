{
  "instance_id": "pytest-dev__pytest-6116",
  "edit_test_file": "testing/test_collection.py",
  "code_patch": "diff --git a/doc/en/usage.rst b/doc/en/usage.rst\nindex a23cf76..194ca34 100644\n--- a/doc/en/usage.rst\n+++ b/doc/en/usage.rst\n@@ -55,6 +55,7 @@ Getting help on version, option names, environment variables\n     pytest --version   # shows where pytest was imported from\n     pytest --fixtures  # show available builtin function arguments\n     pytest -h | --help # show help on command line and config file options\n+    pytest -C         # only collect tests, don't execute them\n \n \n .. _maxfail:\n\ndiff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 843c5b5..ef74f81 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -107,8 +107,9 @@ def pytest_addoption(parser):\n \n     group = parser.getgroup(\"collect\", \"collection\")\n     group.addoption(\n+        \"-C\",\n         \"--collectonly\",\n-        \"--collect-only\",\n+        \"--collect-only\", \n         action=\"store_true\",\n         help=\"only collect tests, don't execute them.\",\n     ),\n",
  "code_files": null,
  "test_patch": "diff --git a/testing/test_collect_shortcut.py b/testing/test_collect_shortcut.py\nnew file mode 100644\nindex 0000000..49e4103\n--- /dev/null\n+++ b/testing/test_collect_shortcut.py\n@@ -0,0 +1,28 @@\n+def test_collect_only_no_shortcut(testdir):\n+    \"\"\"\n+    Test that verifies there is no single-character shortcut for --collect-only.\n+    The test passes as long as the issue exists (no shortcut available).\n+    \"\"\"\n+    result = testdir.runpytest(\"--help\")\n+    \n+    # Get the help line containing --collect-only\n+    collect_lines = [line for line in result.stdout.str().split('\\n') \n+                    if \"--collect-only\" in line]\n+    assert len(collect_lines) == 1\n+    help_line = collect_lines[0]\n+    \n+    # The help line should only show --collect-only or --collectonly\n+    # without any single-character alternative like -c\n+    assert \"-\" not in help_line.split(\"--collect\")[0], \\\n+        \"Unexpected short form exists for --collect-only\"\n+    \n+    # Verify that --collect-only works but potential short forms fail\n+    testdir.makepyfile(test_file=\"def test_func(): pass\")\n+    \n+    # --collect-only should work\n+    result = testdir.runpytest(\"--collect-only\")\n+    result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n+    \n+    # A hypothetical -c should fail with a parse error\n+    result = testdir.runpytest(\"-c\")\n+    result.stderr.fnmatch_lines([\"*error: argument -c: expected one argument*\"])\n",
  "test_inverted_patch": "diff --git a/testing/test_collect_shortcut_inverted.py b/testing/test_collect_shortcut_inverted.py\nnew file mode 100644\nindex 0000000..3479e74\n--- /dev/null\n+++ b/testing/test_collect_shortcut_inverted.py\n@@ -0,0 +1,29 @@\n+def test_collect_only_should_have_shortcut(testdir):\n+    \"\"\"\n+    Test that verifies that --collect-only should have a single-character shortcut.\n+    The test fails when no shortcut is available (which is the current issue).\n+    \"\"\"\n+    result = testdir.runpytest(\"--help\")\n+    \n+    # Get the help line containing --collect-only\n+    collect_lines = [line for line in result.stdout.str().split('\\n') \n+                    if \"--collect-only\" in line]\n+    assert len(collect_lines) == 1\n+    help_line = collect_lines[0]\n+    \n+    # The help line should show a single-character alternative for --collect-only\n+    # This will fail if no shortcut exists, which is the current issue\n+    if \"-\" not in help_line.split(\"--collect\")[0]:\n+        raise AssertionError(\"__BUG__HERE__: --collect-only lacks a single-character shortcut\")\n+    \n+    # Verify that both --collect-only and its shortcut work\n+    testdir.makepyfile(test_file=\"def test_func(): pass\")\n+    \n+    # --collect-only should work\n+    result = testdir.runpytest(\"--collect-only\")\n+    result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n+    \n+    # The shortcut should also work (test will not reach here if no shortcut exists)\n+    shortcut = help_line.split(\"--collect\")[0].strip().split()[-1]\n+    result = testdir.runpytest(shortcut)\n+    result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n\\ No newline at end of file\n",
  "num_sent_chars": 5351586,
  "num_received_chars": 54454,
  "elapsed_time": 952.1900434494019,
  "lint_repair_count": 4,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}