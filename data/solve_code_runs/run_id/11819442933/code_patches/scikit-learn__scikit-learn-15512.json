{
  "instance_id": "scikit-learn__scikit-learn-15512",
  "edit_test_file": "sklearn/cluster/tests/test_affinity_propagation.py",
  "code_patch": "diff --git a/examples/cluster/plot_affinity_propagation.py b/examples/cluster/plot_affinity_propagation.py\nindex 9ca5f17..83f13df 100644\n--- a/examples/cluster/plot_affinity_propagation.py\n+++ b/examples/cluster/plot_affinity_propagation.py\n@@ -3,47 +3,86 @@\n Demo of affinity propagation clustering algorithm\n =================================================\n \n+This example demonstrates affinity propagation clustering, showing both:\n+- Successful convergence with well-separated clusters\n+- Handling of non-convergence cases\n+\n Reference:\n Brendan J. Frey and Delbert Dueck, \"Clustering by Passing Messages\n Between Data Points\", Science Feb. 2007\n-\n \"\"\"\n print(__doc__)\n \n+import numpy as np\n from sklearn.cluster import AffinityPropagation\n from sklearn import metrics\n from sklearn.datasets import make_blobs\n+import matplotlib.pyplot as plt\n+import warnings\n \n # #############################################################################\n-# Generate sample data\n+# Generate two sample datasets - one for successful convergence, one that will fail\n+# Well-separated clusters for successful convergence\n centers = [[1, 1], [-1, -1], [1, -1]]\n-X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5,\n-                            random_state=0)\n+X_good, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5,\n+                                random_state=0)\n+\n+# Data that will cause non-convergence (many overlapping points)\n+X_bad = np.random.uniform(low=-10, high=10, size=(1000, 2))\n \n # #############################################################################\n-# Compute Affinity Propagation\n-af = AffinityPropagation(preference=-50).fit(X)\n-cluster_centers_indices = af.cluster_centers_indices_\n-labels = af.labels_\n-\n-n_clusters_ = len(cluster_centers_indices)\n-\n-print('Estimated number of clusters: %d' % n_clusters_)\n-print(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels_true, labels))\n-print(\"Completeness: %0.3f\" % metrics.completeness_score(labels_true, labels))\n-print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels_true, labels))\n-print(\"Adjusted Rand Index: %0.3f\"\n-      % metrics.adjusted_rand_score(labels_true, labels))\n-print(\"Adjusted Mutual Information: %0.3f\"\n-      % metrics.adjusted_mutual_info_score(labels_true, labels))\n-print(\"Silhouette Coefficient: %0.3f\"\n-      % metrics.silhouette_score(X, labels, metric='sqeuclidean'))\n+# Function to plot clustering results\n+def plot_clustering(X, af, title):\n+    plt.figure(figsize=(6, 6))\n+    if hasattr(af, 'cluster_centers_indices_') and len(af.cluster_centers_indices_) > 0:\n+        colors = plt.cm.rainbow(np.linspace(0, 1, len(af.cluster_centers_indices_)))\n+        for k, col in zip(range(len(af.cluster_centers_indices_)), colors):\n+            class_members = af.labels_ == k\n+            cluster_center = X[af.cluster_centers_indices_[k]]\n+            plt.plot(X[class_members, 0], X[class_members, 1], '.', color=col)\n+            plt.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col,\n+                    markeredgecolor='k', markersize=14)\n+    else:\n+        # Non-convergence case - all points are labeled as noise (-1)\n+        plt.plot(X[:, 0], X[:, 1], '.', color='k', alpha=0.3)\n+    plt.title(title)\n+    plt.grid(True)\n \n # #############################################################################\n-# Plot result\n-import matplotlib.pyplot as plt\n-from itertools import cycle\n+# Compute Affinity Propagation on well-separated data\n+\n+# Example of successful convergence\n+print(\"Demonstrating successful convergence:\")\n+af_good = AffinityPropagation(preference=-50, max_iter=200).fit(X_good)\n \n+if len(af_good.cluster_centers_indices_) > 0:\n+    print('Clustering converged successfully')\n+    print('Estimated number of clusters: %d' % len(af_good.cluster_centers_indices_))\n+    print(\"Homogeneity: %0.3f\" % metrics.homogeneity_score(labels_true, af_good.labels_))\n+    print(\"Completeness: %0.3f\" % metrics.completeness_score(labels_true, af_good.labels_))\n+    print(\"V-measure: %0.3f\" % metrics.v_measure_score(labels_true, af_good.labels_))\n+    print(\"Silhouette Coefficient: %0.3f\"\n+          % metrics.silhouette_score(X_good, af_good.labels_, metric='sqeuclidean'))\n+else:\n+    print('Clustering did not converge')\n+\n+# #############################################################################\n+# Example of non-convergence\n+print(\"\\nDemonstrating non-convergence case:\")\n+# Use settings likely to cause non-convergence: low damping and few iterations\n+af_bad = AffinityPropagation(damping=0.5, max_iter=20, verbose=True).fit(X_bad)\n+\n+if len(af_bad.cluster_centers_indices_) > 0:\n+    print('Clustering found clusters (but may not have converged)')\n+    print('Number of clusters: %d' % len(af_bad.cluster_centers_indices_))\n+else:\n+    print('Clustering did not converge - no clusters found')\n+    print('All points labeled as noise (-1)')\n+    print('Empty cluster_centers_indices_:', af_bad.cluster_centers_indices_)\n+    print('All labels are -1:', all(label == -1 for label in af_bad.labels_))\n+\n+# #############################################################################\n+# Plot results\n plt.close('all')\n plt.figure(1)\n plt.clf()\n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/cluster/tests/test_affinity_propagation_convergence.py b/sklearn/cluster/tests/test_affinity_propagation_convergence.py\nnew file mode 100644\nindex 0000000..0a8dccc\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_affinity_propagation_convergence.py\n@@ -0,0 +1,30 @@\n+\"\"\"\n+Testing for non-convergence behavior in Affinity Propagation\n+\"\"\"\n+\n+import numpy as np\n+from sklearn.cluster import AffinityPropagation\n+\n+def test_affinity_propagation_non_convergence_behavior():\n+    \"\"\"Test that non-converged affinity propagation returns expected values.\n+    \n+    According to documentation, when the algorithm does not converge, it should return:\n+    - Empty array as cluster_centers_indices_\n+    - -1 as label for each training sample\n+    \n+    However, it currently returns actual cluster assignments even when not converged.\n+    \"\"\"\n+    # Create simple dataset that won't converge in 2 iterations\n+    X = np.array([[1,0,0,0,0,0],\n+                  [0,1,1,1,0,0],\n+                  [0,0,1,0,0,1]])\n+    \n+    # Force non-convergence with very small max_iter\n+    af = AffinityPropagation(max_iter=2).fit(X)\n+    \n+    # Current behavior - returns actual cluster assignments\n+    assert len(af.cluster_centers_indices_) > 0\n+    assert not np.all(af.labels_ == -1)\n+    \n+    # Verify it did not converge by checking iterations\n+    assert af.n_iter_ == 2  # Stopped at max_iter\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/cluster/tests/test_affinity_propagation_convergence_inverted.py b/sklearn/cluster/tests/test_affinity_propagation_convergence_inverted.py\nnew file mode 100644\nindex 0000000..bf7aebf\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_affinity_propagation_convergence_inverted.py\n@@ -0,0 +1,32 @@\n+\"\"\"\n+Testing for non-convergence behavior in Affinity Propagation\n+\"\"\"\n+\n+import numpy as np\n+from sklearn.cluster import AffinityPropagation\n+\n+def test_affinity_propagation_non_convergence_behavior():\n+    \"\"\"Test that non-converged affinity propagation returns expected values.\n+    \n+    According to documentation, when the algorithm does not converge, it should return:\n+    - Empty array as cluster_centers_indices_\n+    - -1 as label for each training sample\n+    \"\"\"\n+    # Create simple dataset that won't converge in 2 iterations\n+    X = np.array([[1,0,0,0,0,0],\n+                  [0,1,1,1,0,0],\n+                  [0,0,1,0,0,1]])\n+    \n+    # Force non-convergence with very small max_iter\n+    af = AffinityPropagation(max_iter=2).fit(X)\n+    \n+    # Verify it did not converge by checking iterations\n+    assert af.n_iter_ == 2  # Stopped at max_iter\n+    \n+    # Test should fail if cluster_centers_indices_ is not empty\n+    if len(af.cluster_centers_indices_) > 0:\n+        raise AssertionError(\"__BUG__HERE__\")\n+        \n+    # Test should fail if labels are not all -1\n+    if not np.all(af.labels_ == -1):\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2926885,
  "num_received_chars": 56673,
  "elapsed_time": 655.2303009033203,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}