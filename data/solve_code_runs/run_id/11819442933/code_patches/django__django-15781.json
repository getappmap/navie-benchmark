{
  "instance_id": "django__django-15781",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d..f0a1e3e 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -281,6 +281,29 @@ class BaseCommand:\n         \"\"\"\n         return django.get_version()\n \n+    def _format_help_text(self, help_text):\n+        \"\"\"\n+        Format the help text to preserve newlines and indentation.\n+        \n+        This method detects if the help text is a multiline string (e.g., triple-quoted)\n+        and preserves its formatting. For single line strings, it returns them as-is.\n+        \n+        The method:\n+        1. Detects if the text contains intentional line breaks\n+        2. Preserves indentation of each line relative to the first line\n+        3. Removes any common leading whitespace from all lines\n+        \"\"\"\n+        if not help_text or '\\n' not in help_text:\n+            return help_text\n+            \n+        lines = help_text.splitlines()\n+        # Remove any empty lines at the start and end\n+        while lines and not lines[0].strip():\n+            lines.pop(0)\n+        while lines and not lines[-1].strip():\n+            lines.pop()\n+        return '\\n'.join(lines)\n+\n     def create_parser(self, prog_name, subcommand, **kwargs):\n         \"\"\"\n         Create and return the ``ArgumentParser`` which will be used to\n@@ -288,7 +311,7 @@ class BaseCommand:\n         \"\"\"\n         parser = CommandParser(\n             prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n-            description=self.help or None,\n+            description=self._format_help_text(self.help) if self.help else None,\n             formatter_class=DjangoHelpFormatter,\n             missing_args_message=getattr(self, \"missing_args_message\", None),\n             called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n",
  "code_files": null,
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2767665,
  "num_received_chars": 38162,
  "elapsed_time": 639.573762178421,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}