{
  "instance_id": "psf__requests-3362",
  "edit_test_file": "tests/test_testserver.py",
  "code_patch": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e..11aee34 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -660,6 +660,8 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+        # Get the encoding that would be used by the text property\n+        encoding = self.encoding if decode_unicode else None\n \n         def generate():\n             # Special case for urllib3.\n\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b..a9873ff 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -359,12 +359,15 @@ def get_encoding_from_headers(headers):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n-    if r.encoding is None:\n+    # Use the encoding from the response, falling back to apparent_encoding\n+    encoding = r.encoding or r.apparent_encoding\n+\n+    if encoding is None:\n         for item in iterator:\n             yield item\n         return\n \n-    decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n     for chunk in iterator:\n         rv = decoder.decode(chunk)\n         if rv:\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/test_content_decoding.py b/tests/test_content_decoding.py\nnew file mode 100644\nindex 0000000..0d7bb84\n--- /dev/null\n+++ b/tests/test_content_decoding.py\n@@ -0,0 +1,34 @@\n+import threading\n+import socket\n+import time\n+\n+import pytest\n+import requests\n+from tests.testserver.server import Server\n+\n+class TestContentDecoding:\n+    def test_iter_content_decode_unicode_inconsistency(self):\n+        \"\"\"iter_content with decode_unicode=True should return unicode like .text does\"\"\"\n+        # Create a JSON response with unicode content\n+        response_text = (\n+            \"HTTP/1.1 200 OK\\r\\n\"\n+            \"Content-Type: application/json\\r\\n\"\n+            \"Content-Length: 12\\r\\n\"\n+            \"\\r\\n\"\n+            '{\"key\":\"val\"}'\n+        )\n+\n+        with Server.text_response_server(response_text) as (host, port):\n+            r = requests.get('http://{0}:{1}'.format(host, port))\n+            \n+            # Get first chunk with iter_content and decode_unicode=True\n+            chunk = next(r.iter_content(chunk_size=1024, decode_unicode=True))\n+            \n+            # Get the full text\n+            text = r.text\n+\n+            # Assert that text is unicode (str in Python 3)\n+            assert isinstance(text, str)\n+            \n+            # The issue: chunk is bytes when it should be str like text\n+            assert isinstance(chunk, bytes)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_content_decoding_inverted.py b/tests/test_content_decoding_inverted.py\nnew file mode 100644\nindex 0000000..1d34da1\n--- /dev/null\n+++ b/tests/test_content_decoding_inverted.py\n@@ -0,0 +1,38 @@\n+import threading\n+import socket\n+import time\n+\n+import pytest\n+import requests\n+from tests.testserver.server import Server\n+\n+class TestContentDecoding:\n+    def test_iter_content_decode_unicode_inconsistency(self):\n+        \"\"\"iter_content with decode_unicode=True should return unicode like .text does\"\"\"\n+        # Create a JSON response with unicode content\n+        response_text = (\n+            \"HTTP/1.1 200 OK\\r\\n\"\n+            \"Content-Type: application/json\\r\\n\"\n+            \"Content-Length: 12\\r\\n\"\n+            \"\\r\\n\"\n+            '{\"key\":\"val\"}'\n+        )\n+\n+        with Server.text_response_server(response_text) as (host, port):\n+            r = requests.get('http://{0}:{1}'.format(host, port))\n+            \n+            # Get first chunk with iter_content and decode_unicode=True\n+            chunk = next(r.iter_content(chunk_size=1024, decode_unicode=True))\n+            \n+            # Get the full text\n+            text = r.text\n+\n+            # Assert that text is unicode (str in Python 3)\n+            assert isinstance(text, str)\n+            \n+            # The issue: chunk should be str when decode_unicode=True\n+            if isinstance(chunk, bytes):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            \n+            # Additional verification that both values are the same type\n+            assert isinstance(chunk, str), \"iter_content with decode_unicode=True should return str\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2195365,
  "num_received_chars": 27836,
  "elapsed_time": 370.4558539390564,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}