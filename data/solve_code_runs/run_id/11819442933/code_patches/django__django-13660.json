{
  "instance_id": "django__django-13660",
  "edit_test_file": "tests/shell/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 2b306a5..3e8a451 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,13 +84,13 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            exec(options['command'], globals())\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            exec(sys.stdin.read(), globals())\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/shell/test_shell_command_function_scope.py b/tests/shell/test_shell_command_function_scope.py\nnew file mode 100644\nindex 0000000..9381fcf\n--- /dev/null\n+++ b/tests/shell/test_shell_command_function_scope.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+\n+\n+class ShellCommandFunctionScopeTests(SimpleTestCase):\n+    def test_function_scope_with_imported_module(self):\n+        \"\"\"\n+        The shell command should maintain proper scope for imported modules\n+        when executing functions via the -c option.\n+        \"\"\"\n+        command = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with self.assertRaisesMessage(NameError, \"name 'django' is not defined\"):\n+            call_command('shell', command=command)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/shell/test_shell_command_function_scope_inverted.py b/tests/shell/test_shell_command_function_scope_inverted.py\nnew file mode 100644\nindex 0000000..ba6d741\n--- /dev/null\n+++ b/tests/shell/test_shell_command_function_scope_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+\n+\n+class ShellCommandFunctionScopeTests(SimpleTestCase):\n+    def test_function_scope_with_imported_module(self):\n+        \"\"\"\n+        The shell command should maintain proper scope for imported modules\n+        when executing functions via the -c option.\n+        \"\"\"\n+        command = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        try:\n+            call_command('shell', command=command)\n+        except NameError as e:\n+            if \"name 'django' is not defined\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise e\n\\ No newline at end of file\n",
  "num_sent_chars": 1210503,
  "num_received_chars": 11372,
  "elapsed_time": 172.8494155406952,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}