{
  "instance_id": "django__django-12856",
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7bb3fa4..958676e 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1558,6 +1558,15 @@ class Model(metaclass=ModelBase):\n                 errors.extend(cls._check_local_fields(fields, \"index_together\"))\n             return errors\n \n+    @classmethod\n+    def _check_unique_constraint_fields(cls):\n+        \"\"\"Check the fields specified in UniqueConstraint.\"\"\"\n+        errors = []\n+        for constraint in cls._meta.constraints:\n+            if isinstance(constraint, UniqueConstraint):\n+                errors.extend(cls._check_local_fields(constraint.fields, \"constraints\"))\n+        return errors\n+\n     @classmethod\n     def _check_unique_together(cls):\n         \"\"\"Check the value of \"unique_together\" option.\"\"\"\n@@ -1570,6 +1579,15 @@ class Model(metaclass=ModelBase):\n                 )\n             ]\n \n+        elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):\n+            return [\n+                checks.Error(\n+                    \"All 'unique_together' elements must be lists or tuples.\",\n+                    obj=cls,\n+                    id='models.E010',\n+                )\n+            ]\n+\n         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):\n             return [\n                 checks.Error(\n@@ -1866,6 +1884,8 @@ class Model(metaclass=ModelBase):\n     @classmethod\n     def _check_constraints(cls, databases):\n         errors = []\n+        # Check fields used in UniqueConstraint\n+        errors.extend(cls._check_unique_constraint_fields())\n         for db in databases:\n             if not router.allow_migrate_model(db, cls):\n                 continue\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/invalid_models_tests/test_unique_constraint_fields.py b/tests/invalid_models_tests/test_unique_constraint_fields.py\nnew file mode 100644\nindex 0000000..62042a7\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_unique_constraint_fields.py\n@@ -0,0 +1,41 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class UniqueConstraintFieldTests(SimpleTestCase):\n+    def test_unique_constraint_missing_field(self):\n+        \"\"\"\n+        UniqueConstraint doesn't raise an error when referencing a non-existent field,\n+        while unique_together does raise models.E012.\n+        \"\"\"\n+        class ModelWithUniqueConstraint(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['missing_field'],\n+                        name='unique_missing_field',\n+                    ),\n+                ]\n+\n+        class ModelWithUniqueTogether(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                unique_together = [['missing_field']]\n+\n+        # unique_together correctly raises an error for missing field\n+        self.assertEqual(ModelWithUniqueTogether.check(), [\n+            Error(\n+                \"'unique_together' refers to the nonexistent field 'missing_field'.\",\n+                obj=ModelWithUniqueTogether,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+        # UniqueConstraint does not raise an error for missing field\n+        self.assertEqual(ModelWithUniqueConstraint.check(), [])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_unique_constraint_fields_inverted.py b/tests/invalid_models_tests/test_unique_constraint_fields_inverted.py\nnew file mode 100644\nindex 0000000..229a276\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_unique_constraint_fields_inverted.py\n@@ -0,0 +1,51 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class UniqueConstraintFieldTests(SimpleTestCase):\n+    def test_unique_constraint_missing_field(self):\n+        \"\"\"\n+        UniqueConstraint should raise an error when referencing a non-existent field,\n+        similar to how unique_together raises models.E012.\n+        \"\"\"\n+        class ModelWithUniqueConstraint(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['missing_field'],\n+                        name='unique_missing_field',\n+                    ),\n+                ]\n+\n+        class ModelWithUniqueTogether(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                unique_together = [['missing_field']]\n+\n+        # unique_together correctly raises an error for missing field\n+        self.assertEqual(ModelWithUniqueTogether.check(), [\n+            Error(\n+                \"'unique_together' refers to the nonexistent field 'missing_field'.\",\n+                obj=ModelWithUniqueTogether,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+        # UniqueConstraint should raise an error for missing field\n+        unique_constraint_errors = ModelWithUniqueConstraint.check()\n+        expected_error = Error(\n+            \"'constraints' refers to the nonexistent field 'missing_field'.\",\n+            obj=ModelWithUniqueConstraint,\n+            id='models.E012',\n+        )\n+\n+        if not unique_constraint_errors:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        self.assertEqual(unique_constraint_errors, [expected_error])\n\\ No newline at end of file\n",
  "num_sent_chars": 2101232,
  "num_received_chars": 36432,
  "elapsed_time": 395.7888214588165,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}