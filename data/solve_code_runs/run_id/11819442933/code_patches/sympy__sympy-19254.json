{
  "instance_id": "sympy__sympy-19254",
  "edit_test_file": "sympy/polys/tests/test_factortools.py",
  "code_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 93298f4..0d5ba8c 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,48 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n+    \"\"\"\n+    Knuth-Cohen bound for univariate polynomials in `K[x]`.\n+\n+    This implements an improved coefficient bound based on the Knuth-Cohen bound,\n+    which provides tighter estimates than the classical Mignotte bound.\n+\n+    The bound B is calculated as:\n+    B = 2^(n-1) * sqrt(n) * M\n+    where n is the degree and M is the 2-norm of the polynomial coefficients.\n+    \"\"\"\n     n = dup_degree(f)\n+    if n <= 0:\n+        return K.zero\n+\n+    # Calculate 2-norm of coefficients\n+    norm_2 = K.sqrt(sum(K(c*c) for c in f))\n+    \n+    # Knuth-Cohen bound calculation\n+    bound = K(2)**(n-1) * K.sqrt(K(n)) * norm_2\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    return bound\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    \"\"\"\n+    Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+\n+    Extends the Knuth-Cohen bound to the multivariate case by considering\n+    the total degree and treating the polynomial as univariate in its main\n+    variable with coefficients in K[X\u2081,...,X\u1d64].\n+    \"\"\"\n     n = sum(dmp_degree_list(f, u))\n+    if n <= 0:\n+        return K.zero\n+\n+    # Calculate 2-norm considering all coefficients\n+    norm_2 = K.sqrt(sum(K(c*c) for c in dmp_ground(f, u)))\n+    \n+    # Multivariate Knuth-Cohen bound\n+    bound = K(2)**(n-1) * K.sqrt(K(n)) * norm_2\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    return bound\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/polys/tests/test_knuth_cohen_bound.py b/sympy/polys/tests/test_knuth_cohen_bound.py\nnew file mode 100644\nindex 0000000..020bf74\n--- /dev/null\n+++ b/sympy/polys/tests/test_knuth_cohen_bound.py\n@@ -0,0 +1,25 @@\n+\"\"\"Tests for comparing Mignotte bound vs Knuth-Cohen bound.\"\"\"\n+\n+from sympy.polys.rings import ring\n+from sympy.polys.domains import ZZ\n+from sympy.polys.factortools import dup_zz_mignotte_bound\n+\n+def test_mignotte_bound_inefficient():\n+    \"\"\"Test that demonstrates the Mignotte bound produces unnecessarily large bounds.\"\"\"\n+    R, x = ring(\"x\", ZZ)\n+    \n+    # A polynomial with large coefficients where Mignotte bound will be much larger\n+    # than necessary for bounding the factors\n+    f = 100*x**4 + 200*x**3 + 300*x**2 + 400*x + 500\n+    \n+    # Get the Mignotte bound\n+    bound = R.dup_zz_mignotte_bound(f)\n+    \n+    # The Mignotte bound should be unnecessarily large compared to the actual\n+    # maximum possible coefficient in the factors\n+    # This demonstrates the inefficiency of the current bound\n+    assert bound > 10**6\n+\n+    # The actual maximum coefficient in any factor would be much smaller,\n+    # but the Mignotte bound significantly overestimates it\n+    # A Knuth-Cohen bound would give a tighter (smaller) bound\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_knuth_cohen_bound_inverted.py b/sympy/polys/tests/test_knuth_cohen_bound_inverted.py\nnew file mode 100644\nindex 0000000..6400494\n--- /dev/null\n+++ b/sympy/polys/tests/test_knuth_cohen_bound_inverted.py\n@@ -0,0 +1,23 @@\n+\"\"\"Tests for comparing Mignotte bound vs Knuth-Cohen bound.\"\"\"\n+\n+from sympy.polys.rings import ring\n+from sympy.polys.domains import ZZ\n+from sympy.polys.factortools import dup_zz_mignotte_bound\n+\n+def test_mignotte_bound_inefficient():\n+    \"\"\"Test that demonstrates the Mignotte bound produces unnecessarily large bounds.\"\"\"\n+    R, x = ring(\"x\", ZZ)\n+    \n+    # A polynomial with large coefficients where Mignotte bound will be much larger\n+    # than necessary for bounding the factors\n+    f = 100*x**4 + 200*x**3 + 300*x**2 + 400*x + 500\n+    \n+    # Get the Mignotte bound\n+    bound = R.dup_zz_mignotte_bound(f)\n+    \n+    # The Mignotte bound should be unnecessarily large compared to the actual\n+    # maximum possible coefficient in the factors.\n+    # A reasonable bound for this polynomial should be much smaller,\n+    # approximately around 10^4 based on Knuth-Cohen analysis\n+    if bound > 10**6:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 4555578,
  "num_received_chars": 55009,
  "elapsed_time": 1063.6023705005646,
  "lint_repair_count": 1,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}