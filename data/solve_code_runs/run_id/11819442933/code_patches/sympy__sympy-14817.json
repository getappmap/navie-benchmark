{
  "instance_id": "sympy__sympy-14817",
  "edit_test_file": "sympy/physics/vector/tests/test_printing.py",
  "code_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 0545797..90df1a4 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -819,17 +819,36 @@ def _print_BlockMatrix(self, B):\n         return self._print(B.blocks)\n \n     def _print_MatAdd(self, expr):\n+        terms = expr.args\n         s = None\n-        for item in expr.args:\n-            pform = self._print(item)\n-            if s is None:\n-                s = pform     # First element\n+        for i, term in enumerate(terms):\n+            coeff, matrix_term = term.as_coeff_mmul()\n+            \n+            if coeff == 1:\n+                pform = self._print(term)\n+            elif coeff == -1:\n+                pform = prettyForm(*self._print(matrix_term).parens())\n+                if i == 0:\n+                    pform = prettyForm(*stringPict.next('-', pform))\n+                else:\n+                    pform = prettyForm(*stringPict.next(' - ', pform))\n             else:\n-                if S(item.args[0]).is_negative:\n-                    s = prettyForm(*stringPict.next(s, ' '))\n-                    pform = self._print(item)\n+                if coeff.is_negative:\n+                    coeff = -coeff\n+                    if i == 0:\n+                        prefix = '-'\n+                    else:\n+                        prefix = ' - '\n                 else:\n-                    s = prettyForm(*stringPict.next(s, ' + '))\n+                    prefix = ' + ' if i > 0 else ''\n+                pform = self._print(matrix_term)\n+                if not matrix_term.is_MatrixSymbol:\n+                    pform = prettyForm(*pform.parens())\n+                pform = prettyForm(*stringPict.next(prefix + str(coeff), pform))\n+\n+            if s is None:\n+                s = pform\n+            else:\n                 s = prettyForm(*stringPict.next(s, pform))\n \n         return s\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/physics/vector/tests/test_matrix_pretty_print.py b/sympy/physics/vector/tests/test_matrix_pretty_print.py\nnew file mode 100644\nindex 0000000..3c47fb4\n--- /dev/null\n+++ b/sympy/physics/vector/tests/test_matrix_pretty_print.py\n@@ -0,0 +1,18 @@\n+from sympy import MatrixSymbol, symbols\n+from sympy.physics.vector.printing import vpprint\n+from sympy.core.sympify import SympifyError\n+\n+def test_matrix_add_pretty_print_with_star():\n+    \"\"\"Test that pretty printing MatAdd with MatrixSymbol containing * raises SympifyError\"\"\"\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    \n+    # Should raise SympifyError when trying to pretty print x + y\n+    try:\n+        vpprint(x + y)\n+        raise AssertionError(\"Expected SympifyError to be raised\")\n+    except SympifyError as e:\n+        # Verify the error message matches the expected one\n+        assert \"Sympify of expression 'could not parse 'y*'' failed\" in str(e)\n+        assert \"SyntaxError: unexpected EOF while parsing\" in str(e)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/physics/vector/tests/test_matrix_pretty_print_inverted.py b/sympy/physics/vector/tests/test_matrix_pretty_print_inverted.py\nnew file mode 100644\nindex 0000000..3f991ef\n--- /dev/null\n+++ b/sympy/physics/vector/tests/test_matrix_pretty_print_inverted.py\n@@ -0,0 +1,20 @@\n+from sympy import MatrixSymbol, symbols \n+from sympy.physics.vector.printing import vpprint\n+from sympy.core.sympify import SympifyError\n+\n+def test_matrix_add_pretty_print_with_star():\n+    \"\"\"Test that pretty printing MatAdd with MatrixSymbol containing * works correctly\"\"\"\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    \n+    # The bug causes sympify to be called on the MatrixSymbol name\n+    # This test should fail when the bug is present\n+    try:\n+        result = vpprint(x + y)\n+        # If we get here, no SympifyError was raised\n+        # Now verify the output contains the correct symbol name 'y*'\n+        if 'y*' not in str(result):\n+            raise AssertionError(\"__BUG__HERE__: MatrixSymbol name 'y*' was not preserved in pretty printing\")\n+    except SympifyError:\n+        raise AssertionError(\"__BUG__HERE__: Should not try to sympify MatrixSymbol names\")\n",
  "num_sent_chars": 1923621,
  "num_received_chars": 16124,
  "elapsed_time": 300.7106976509094,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}