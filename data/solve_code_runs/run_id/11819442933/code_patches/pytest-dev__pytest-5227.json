{
  "instance_id": "pytest-dev__pytest-5227",
  "edit_test_file": "testing/logging/test_formatter.py",
  "code_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb27..08670d2 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "code_files": null,
  "test_patch": "diff --git a/testing/logging/test_log_format.py b/testing/logging/test_log_format.py\nnew file mode 100644\nindex 0000000..be985bd\n--- /dev/null\n+++ b/testing/logging/test_log_format.py\n@@ -0,0 +1,36 @@\n+import logging\n+\n+import py.io\n+\n+from _pytest.logging import ColoredLevelFormatter\n+\n+\n+def test_default_log_format():\n+    \"\"\"Test that demonstrates the current default log format only shows base filename,\n+    not the full module name.\"\"\"\n+\n+    # Create a log record with a nested module name\n+    record = logging.LogRecord(\n+        name=\"django.db.backends\",  # Full module path\n+        level=logging.DEBUG,\n+        pathname=\"/path/to/django/db/backends/utils.py\",\n+        lineno=114,\n+        msg=\"(0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    # Use the default format that only shows filename\n+    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+\n+    # Current output only shows base filename (utils.py)\n+    # This test passes with the current behavior but demonstrates the limitation\n+    assert output == \"utils.py                   114 DEBUG    (0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\"\n+\n+    # The desired format would include the full module name like:\n+    # DEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\"...\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/logging/test_log_format_inverted.py b/testing/logging/test_log_format_inverted.py\nnew file mode 100644\nindex 0000000..c3552e0\n--- /dev/null\n+++ b/testing/logging/test_log_format_inverted.py\n@@ -0,0 +1,36 @@\n+import logging\n+import py.io\n+from _pytest.logging import ColoredLevelFormatter\n+\n+def test_default_log_format():\n+    \"\"\"Test that verifies the log format should include the full module name,\n+    not just the base filename.\"\"\"\n+\n+    # Create a log record with a nested module name\n+    record = logging.LogRecord(\n+        name=\"django.db.backends\",  # Full module path\n+        level=logging.DEBUG,\n+        pathname=\"/path/to/django/db/backends/utils.py\",\n+        lineno=114,\n+        msg=\"(0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    # Current default format that only shows filename\n+    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+\n+    # Expected format that should include the full module name\n+    expected_output = \"DEBUG    django.db.backends:utils.py:114 (0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\"\n+    \n+    # This will fail if the current behavior (showing only base filename) is detected\n+    if output == \"utils.py                   114 DEBUG    (0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\":\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Assert the correct format\n+    assert output == expected_output\n\\ No newline at end of file\n",
  "num_sent_chars": 6431822,
  "num_received_chars": 53774,
  "elapsed_time": 892.6728179454803,
  "lint_repair_count": 6,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}