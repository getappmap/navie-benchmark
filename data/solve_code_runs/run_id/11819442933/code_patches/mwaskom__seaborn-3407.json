{
  "instance_id": "mwaskom__seaborn-3407",
  "edit_test_file": "tests/test_axisgrid.py",
  "code_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 7534909..70cc3bc 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,6 +1258,23 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n+        # Handle MultiIndex columns by creating flattened names\n+        self._has_multiindex = isinstance(data.columns, pd.MultiIndex)\n+        if self._has_multiindex:\n+            self._original_to_flat = {}\n+            self._flat_to_original = {}\n+            for col in data.columns:\n+                flat_name = '_'.join(str(level) for level in col)\n+                self._original_to_flat[col] = flat_name\n+                self._flat_to_original[flat_name] = col\n+            \n+            # Convert variable lists to use flattened names\n+            x_vars = [self._original_to_flat.get(var, var) for var in x_vars]\n+            y_vars = [self._original_to_flat.get(var, var) for var in y_vars]\n+        else:\n+            self._original_to_flat = None\n+            self._flat_to_original = None\n+\n         self.x_vars = x_vars = list(x_vars)\n         self.y_vars = y_vars = list(y_vars)\n         self.square_grid = self.x_vars == self.y_vars\n@@ -1573,8 +1590,16 @@ class PairGrid(Grid):\n \n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n         \"\"\"Draw a bivariate plot on the specified axes.\"\"\"\n+        # Get original column names if using MultiIndex\n+        if self._has_multiindex:\n+            x_var_orig = self._flat_to_original.get(x_var, x_var)\n+            y_var_orig = self._flat_to_original.get(y_var, y_var)\n+        else:\n+            x_var_orig = x_var\n+            y_var_orig = y_var\n+\n         if \"hue\" not in signature(func).parameters:\n-            self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n+            self._plot_bivariate_iter_hue(x_var_orig, y_var_orig, ax, func, **kwargs)\n             return\n \n         kwargs = kwargs.copy()\n@@ -1665,8 +1690,12 @@ class PairGrid(Grid):\n         \"\"\"Find which variables in a DataFrame are numeric.\"\"\"\n         numeric_cols = []\n         for col in data:\n-            if variable_type(data[col]) == \"numeric\":\n-                numeric_cols.append(col)\n+            # Handle both single and multi-index columns\n+            try:\n+                if variable_type(data[col]) == \"numeric\":\n+                    numeric_cols.append(col)\n+            except (KeyError, ValueError):\n+                continue\n         return numeric_cols\n \n \n",
  "code_files": null,
  "test_patch": "diff --git a/tests/test_multiindex_plotting.py b/tests/test_multiindex_plotting.py\nnew file mode 100644\nindex 0000000..7b72f23\n--- /dev/null\n+++ b/tests/test_multiindex_plotting.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+import seaborn as sns\n+\n+\n+def test_pairplot_multiindex_raises():\n+    \"\"\"Test that pairplot raises KeyError with MultiIndex DataFrame.\"\"\"\n+    # Set random seed for reproducibility\n+    rng = np.random.RandomState(0)\n+\n+    # Create test data with MultiIndex columns\n+    data = {\n+        (\"A\", \"1\"): rng.rand(100),\n+        (\"A\", \"2\"): rng.rand(100),\n+        (\"B\", \"1\"): rng.rand(100),\n+        (\"B\", \"2\"): rng.rand(100),\n+    }\n+    df = pd.DataFrame(data)\n+\n+    # Assert that KeyError is raised when attempting to create pairplot\n+    with pytest.raises(KeyError, match=r\"\\['1'\\] not in index\"):\n+        sns.pairplot(df)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_multiindex_plotting_inverted.py b/tests/test_multiindex_plotting_inverted.py\nnew file mode 100644\nindex 0000000..1b5911c\n--- /dev/null\n+++ b/tests/test_multiindex_plotting_inverted.py\n@@ -0,0 +1,27 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+import seaborn as sns\n+\n+def test_pairplot_multiindex_should_work():\n+    \"\"\"Test that pairplot should work with MultiIndex DataFrame.\"\"\"\n+    # Set random seed for reproducibility\n+    rng = np.random.RandomState(0)\n+\n+    # Create test data with MultiIndex columns\n+    data = {\n+        (\"A\", \"1\"): rng.rand(100),\n+        (\"A\", \"2\"): rng.rand(100),\n+        (\"B\", \"1\"): rng.rand(100),\n+        (\"B\", \"2\"): rng.rand(100),\n+    }\n+    df = pd.DataFrame(data)\n+\n+    try:\n+        # This should work but currently raises KeyError\n+        sns.pairplot(df)\n+    except KeyError:\n+        raise AssertionError(\"__BUG__HERE__: pairplot fails with MultiIndex DataFrame\")\n+\n+    # If we get here, the bug is fixed\n+    assert True\n\\ No newline at end of file\n",
  "num_sent_chars": 3894514,
  "num_received_chars": 68231,
  "elapsed_time": 1614.407799243927,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}