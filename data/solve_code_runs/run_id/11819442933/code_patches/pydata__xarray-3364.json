{
  "instance_id": "pydata__xarray-3364",
  "edit_test_file": "xarray/tests/test_concat.py",
  "code_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex ecae256..35e3ab3 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -169,6 +169,11 @@ def _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat):\n     else:\n         concat_over_existing_dim = False\n \n+    # Get all variable names across all datasets\n+    all_variables = set()\n+    for ds in datasets:\n+        all_variables.update(ds.variables)\n+\n     concat_dim_lengths = []\n     for ds in datasets:\n         if concat_over_existing_dim:\n@@ -278,6 +283,19 @@ def _dataset_concat(\n     dim, coord = _calc_concat_dim_coord(dim)\n     # Make sure we're working on a copy (we'll be loading variables)\n     datasets = [ds.copy() for ds in datasets]\n+    \n+    # Get all variable names across all datasets\n+    all_variables = set()\n+    for ds in datasets:\n+        all_variables.update(ds.variables)\n+        \n+    # Add missing variables filled with NaN if using outer join\n+    if join == \"outer\":\n+        for ds in datasets:\n+            missing_vars = all_variables - set(ds.variables)\n+            for var_name in missing_vars:\n+                ds[var_name] = Dataset({var_name: None}).fillna(fill_value)[var_name]\n+                \n     datasets = align(\n         *datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value\n     )\n@@ -314,10 +332,18 @@ def _dataset_concat(\n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n             if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n+                if join == \"exact\":\n+                    raise ValueError(\n+                        \"variables %r are present in some datasets but not others. \"\n+                        % absent_merge_vars\n+                    )\n+                elif join == \"inner\":\n+                    # Skip variables not present in all datasets\n+                    variables_to_merge = variables_to_merge - absent_merge_vars\n+                    continue\n+                # For outer/left/right joins, use fill_value for missing variables\n+                for var in absent_merge_vars:\n+                    ds[var] = Dataset({var: None}).fillna(fill_value)[var]\n \n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n",
  "code_files": null,
  "test_patch": "diff --git a/xarray/tests/test_dataset_concat_missing_vars.py b/xarray/tests/test_dataset_concat_missing_vars.py\nnew file mode 100644\nindex 0000000..1933843\n--- /dev/null\n+++ b/xarray/tests/test_dataset_concat_missing_vars.py\n@@ -0,0 +1,45 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.testing import assert_identical\n+\n+def test_concat_different_variables():\n+    # Create two datasets with different variables\n+    ds1 = xr.Dataset(\n+        {\n+            \"temp\": ((\"x\", \"y\"), [[1, 2], [3, 4]]),\n+            \"precip\": ((\"x\", \"y\"), [[5, 6], [7, 8]]),\n+        },\n+        coords={\n+            \"x\": [0, 1],\n+            \"y\": [0, 1],\n+        },\n+    )\n+    \n+    ds2 = xr.Dataset(\n+        {\n+            \"temp\": ((\"x\", \"y\"), [[9, 10], [11, 12]]),\n+            \"humidity\": ((\"x\", \"y\"), [[13, 14], [15, 16]]),\n+        },\n+        coords={\n+            \"x\": [2, 3], \n+            \"y\": [0, 1],\n+        },\n+    )\n+\n+    # This should raise a ValueError since the datasets have different variables\n+    # and xarray.concat doesn't automatically handle missing variables\n+    with pytest.raises(ValueError, match=\"not present in all datasets\"):\n+        xr.concat([ds1, ds2], dim=\"x\")\n+\n+    # The current workaround requires manually adding missing variables with NaN values\n+    ds1_with_dummy = ds1.assign(humidity=np.nan)\n+    ds2_with_dummy = ds2.assign(precip=np.nan)\n+    \n+    # Now concatenation works but requires manual intervention\n+    result = xr.concat([ds1_with_dummy, ds2_with_dummy], dim=\"x\")\n+    \n+    # Verify the result has all variables and NaN values where appropriate\n+    assert set(result.data_vars) == {\"temp\", \"precip\", \"humidity\"}\n+    assert np.isnan(result.precip[2:, :]).all()  # NaN values from ds2\n+    assert np.isnan(result.humidity[:2, :]).all()  # NaN values from ds1\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_dataset_concat_missing_vars_inverted.py b/xarray/tests/test_dataset_concat_missing_vars_inverted.py\nnew file mode 100644\nindex 0000000..ea0dff8\n--- /dev/null\n+++ b/xarray/tests/test_dataset_concat_missing_vars_inverted.py\n@@ -0,0 +1,45 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.testing import assert_identical\n+\n+def test_concat_different_variables():\n+    # Create two datasets with different variables\n+    ds1 = xr.Dataset(\n+        {\n+            \"temp\": ((\"x\", \"y\"), [[1, 2], [3, 4]]),\n+            \"precip\": ((\"x\", \"y\"), [[5, 6], [7, 8]]),\n+        },\n+        coords={\n+            \"x\": [0, 1],\n+            \"y\": [0, 1],\n+        },\n+    )\n+    \n+    ds2 = xr.Dataset(\n+        {\n+            \"temp\": ((\"x\", \"y\"), [[9, 10], [11, 12]]),\n+            \"humidity\": ((\"x\", \"y\"), [[13, 14], [15, 16]]),\n+        },\n+        coords={\n+            \"x\": [2, 3], \n+            \"y\": [0, 1],\n+        },\n+    )\n+\n+    # Try to concatenate the datasets directly\n+    try:\n+        result = xr.concat([ds1, ds2], dim=\"x\")\n+    except ValueError as e:\n+        if \"not present in all datasets\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here, verify the result has automatically handled missing variables\n+    assert set(result.data_vars) == {\"temp\", \"precip\", \"humidity\"}\n+    assert np.isnan(result.precip[2:, :]).all()  # Should have NaN values for ds2 portion\n+    assert np.isnan(result.humidity[:2, :]).all()  # Should have NaN values for ds1 portion\n+    \n+    # Verify the common variable 'temp' is properly concatenated\n+    expected_temp = np.array([[1, 2], [3, 4], [9, 10], [11, 12]])\n+    np.testing.assert_array_equal(result.temp.values, expected_temp)\n\\ No newline at end of file\n",
  "num_sent_chars": 6669631,
  "num_received_chars": 128396,
  "elapsed_time": 1255.9221532344818,
  "lint_repair_count": 9,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}