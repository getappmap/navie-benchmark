{
  "instance_id": "sympy__sympy-18057",
  "edit_test_file": "sympy/core/tests/test_expr.py",
  "code_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex ed4ea6c..de0ca15 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -359,14 +359,14 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     # _sympy_ (which is a canonical and robust way to convert\n     # anything to SymPy expression).\n     #\n-    # As a last chance, we try to take \"a\"'s normal form via unicode()\n-    # and try to parse it. If it fails, then we have no luck and\n-    # return an exception\n-    try:\n-        from .compatibility import unicode\n-        a = unicode(a)\n-    except Exception as exc:\n-        raise SympifyError(a, exc)\n+    # For security and correctness, we do not attempt to parse\n+    # string representations of unknown objects. Instead, we\n+    # raise a SympifyError indicating the type cannot be converted.\n+    if not isinstance(a, string_types):\n+        raise SympifyError(\"Cannot sympify object of type %s\" % type(a).__name__)\n+    # Only attempt to parse strings that were explicitly passed as strings\n+    from .compatibility import unicode\n+    a = unicode(a)\n \n     from sympy.parsing.sympy_parser import (parse_expr, TokenError,\n                                             standard_transformations)\n@@ -381,10 +381,9 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n         transformations += (t_convert_xor,)\n \n     try:\n-        a = a.replace('\\n', '')\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n     except (TokenError, SyntaxError) as exc:\n-        raise SympifyError('could not parse %r' % a, exc)\n+        raise SympifyError('could not parse string %r' % a, exc)\n \n     return expr\n \n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/core/tests/test_repr_eval_safety.py b/sympy/core/tests/test_repr_eval_safety.py\nnew file mode 100644\nindex 0000000..2705113\n--- /dev/null\n+++ b/sympy/core/tests/test_repr_eval_safety.py\n@@ -0,0 +1,20 @@\n+from sympy import Symbol\n+from sympy.utilities.pytest import raises\n+\n+def test_repr_eval_safety():\n+    class BadRepr:\n+        def __repr__(self):\n+            return 'x.y'\n+            \n+    x = Symbol('x')\n+    # Test that attempting to compare with an object that has a bad repr \n+    # raises an AttributeError due to eval\n+    raises(AttributeError, lambda: x == BadRepr())\n+\n+    class DeceptiveRepr:\n+        def __repr__(self):\n+            return 'x'\n+            \n+    # Test that comparing with an object whose repr matches the symbol name\n+    # incorrectly evaluates as equal\n+    assert (Symbol('x') == DeceptiveRepr()) is True\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_repr_eval_safety_inverted.py b/sympy/core/tests/test_repr_eval_safety_inverted.py\nnew file mode 100644\nindex 0000000..aa91384\n--- /dev/null\n+++ b/sympy/core/tests/test_repr_eval_safety_inverted.py\n@@ -0,0 +1,21 @@\n+from sympy import Symbol\n+from sympy.utilities.pytest import raises\n+\n+def test_repr_eval_safety():\n+    class BadRepr:\n+        def __repr__(self):\n+            return 'x.y'\n+            \n+    x = Symbol('x')\n+    # Test that attempting to compare with an object that has a bad repr \n+    # raises an AttributeError due to eval\n+    raises(AttributeError, lambda: x == BadRepr())\n+\n+    class DeceptiveRepr:\n+        def __repr__(self):\n+            return 'x'\n+            \n+    # Test that comparing with an object whose repr matches the symbol name\n+    # should NOT evaluate as equal - if it does, that's a bug\n+    if Symbol('x') == DeceptiveRepr():\n+        raise AssertionError(\"__BUG__HERE__: Symbol incorrectly evaluates as equal to object with matching repr\")\n\\ No newline at end of file\n",
  "num_sent_chars": 5158435,
  "num_received_chars": 79392,
  "elapsed_time": 1261.8166811466217,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}