{
  "instance_id": "django__django-15202",
  "edit_test_file": "tests/forms_tests/field_tests/test_urlfield.py",
  "code_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15..7a18d5b 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -103,8 +103,11 @@ class URLValidator(RegexValidator):\n         if self.unsafe_chars.intersection(value):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n-        scheme = value.split('://')[0].lower()\n-        if scheme not in self.schemes:\n+        try:\n+            scheme = value.split('://')[0].lower()\n+            if scheme not in self.schemes:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # Then check full URL\n@@ -127,13 +130,17 @@ class URLValidator(RegexValidator):\n                 raise\n         else:\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n-            if host_match:\n-                potential_ip = host_match[1]\n-                try:\n-                    validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+            try:\n+                parsed = urlsplit(value)\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', parsed.netloc)\n+                if host_match:\n+                    potential_ip = host_match[1]\n+                    try:\n+                        validate_ipv6_address(potential_ip)\n+                    except ValidationError:\n+                        raise ValidationError(self.message, code=self.code, params={'value': value})\n+            except ValueError:  # Invalid IPv6 URL format\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_urlfield_validation.py b/tests/forms_tests/field_tests/test_urlfield_validation.py\nnew file mode 100644\nindex 0000000..62781dd\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_urlfield_validation.py\n@@ -0,0 +1,16 @@\n+from django.core.exceptions import ValidationError\n+from django.forms import URLField\n+from django.test import SimpleTestCase\n+\n+from . import FormFieldAssertionsMixin\n+\n+\n+class URLFieldValidationTests(FormFieldAssertionsMixin, SimpleTestCase):\n+    def test_urlfield_raises_valueerror_on_invalid_ipv6(self):\n+        \"\"\"\n+        Test that URLField raises ValueError instead of ValidationError when\n+        cleaning a URL with invalid IPv6 syntax.\n+        \"\"\"\n+        f = URLField()\n+        with self.assertRaises(ValueError):\n+            f.clean('////]@N.AN')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_urlfield_validation_inverted.py b/tests/forms_tests/field_tests/test_urlfield_validation_inverted.py\nnew file mode 100644\nindex 0000000..d9e3c4a\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_urlfield_validation_inverted.py\n@@ -0,0 +1,22 @@\n+from django.core.exceptions import ValidationError\n+from django.forms import URLField\n+from django.test import SimpleTestCase\n+\n+from . import FormFieldAssertionsMixin\n+\n+\n+class URLFieldValidationTests(FormFieldAssertionsMixin, SimpleTestCase):\n+    def test_urlfield_validation_error_on_invalid_ipv6(self):\n+        \"\"\"\n+        Test that URLField raises ValidationError (not ValueError) when\n+        cleaning a URL with invalid IPv6 syntax.\n+        \"\"\"\n+        f = URLField()\n+        try:\n+            f.clean('////]@N.AN')\n+            raise AssertionError(\"__BUG__HERE__: URLField failed to raise ValidationError\")\n+        except ValueError:\n+            raise AssertionError(\"__BUG__HERE__: URLField raised ValueError instead of ValidationError\")\n+        except ValidationError:\n+            # This is the expected behavior - test should pass if ValidationError is raised\n+            pass\n\\ No newline at end of file\n",
  "num_sent_chars": 3835691,
  "num_received_chars": 59004,
  "elapsed_time": 778.8924112319946,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}