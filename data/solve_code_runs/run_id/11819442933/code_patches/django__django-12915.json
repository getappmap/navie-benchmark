{
  "instance_id": "django__django-12915",
  "edit_test_file": "tests/asgi/tests.py",
  "code_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 711d886..ec01aea 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -1,6 +1,7 @@\n from urllib.parse import urlparse\n from urllib.request import url2pathname\n \n+from asgiref.sync import sync_to_async\n from django.conf import settings\n from django.contrib.staticfiles import utils\n from django.contrib.staticfiles.views import serve\n@@ -8,6 +9,7 @@ from django.core.handlers.asgi import ASGIHandler\n from django.core.handlers.exception import response_for_exception\n from django.core.handlers.wsgi import WSGIHandler, get_path_info\n from django.http import Http404\n+from django.utils.decorators import sync_and_async_middleware\n \n \n class StaticFilesHandlerMixin:\n@@ -23,6 +25,15 @@ class StaticFilesHandlerMixin:\n         # them for self.\n         pass\n \n+    async def get_response_async(self, request):\n+        \"\"\"\n+        Return the response for a request, using async/await.\n+        \"\"\"\n+        try:\n+            return await sync_to_async(self.serve, thread_sensitive=True)(request)\n+        except Http404 as e:\n+            return await sync_to_async(response_for_exception, thread_sensitive=True)(request, e)\n+\n     def get_base_url(self):\n         utils.check_settings()\n         return settings.STATIC_URL\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/asgi/test_asgi_static_files_handler.py b/tests/asgi/test_asgi_static_files_handler.py\nnew file mode 100644\nindex 0000000..7cedc5c\n--- /dev/null\n+++ b/tests/asgi/test_asgi_static_files_handler.py\n@@ -0,0 +1,36 @@\n+import sys\n+from unittest import skipIf\n+\n+from asgiref.testing import ApplicationCommunicator\n+\n+from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler\n+from django.core.asgi import get_asgi_application\n+from django.test import AsyncRequestFactory, SimpleTestCase, override_settings\n+\n+\n+@skipIf(sys.platform == 'win32' and (3, 8, 0) < sys.version_info < (3, 8, 1), 'https://bugs.python.org/issue38563')\n+@override_settings(ROOT_URLCONF='asgi.urls')\n+class ASGIStaticFilesHandlerTests(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    async def test_get_response_async_missing(self):\n+        \"\"\"\n+        Test that ASGIStaticFilesHandler raises TypeError when handling a request\n+        due to missing get_response_async implementation.\n+        \"\"\"\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(\n+            path='/static/file.txt',\n+            headers=[[b'host', b'testserver']],\n+        )\n+        communicator = ApplicationCommunicator(application, scope)\n+\n+        # Send request\n+        await communicator.send_input({\n+            'type': 'http.request',\n+            'body': b'',\n+        })\n+\n+        # The handler should raise TypeError due to missing get_response_async\n+        with self.assertRaisesMessage(TypeError, \"'NoneType' object is not callable\"):\n+            await communicator.receive_output()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/asgi/test_asgi_static_files_handler_inverted.py b/tests/asgi/test_asgi_static_files_handler_inverted.py\nnew file mode 100644\nindex 0000000..4e51624\n--- /dev/null\n+++ b/tests/asgi/test_asgi_static_files_handler_inverted.py\n@@ -0,0 +1,41 @@\n+from asgiref.testing import ApplicationCommunicator\n+from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler\n+from django.core.asgi import get_asgi_application\n+from django.test import AsyncRequestFactory, SimpleTestCase, override_settings\n+\n+\n+@override_settings(ROOT_URLCONF='asgi.urls')\n+class ASGIStaticFilesHandlerTests(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    async def test_get_response_async_implementation(self):\n+        \"\"\"\n+        Test that ASGIStaticFilesHandler properly implements get_response_async.\n+        The test should fail if get_response_async is missing or not implemented.\n+        \"\"\"\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(\n+            path='/static/file.txt',\n+            headers=[[b'host', b'testserver']],\n+        )\n+        communicator = ApplicationCommunicator(application, scope)\n+\n+        # Send request\n+        await communicator.send_input({\n+            'type': 'http.request',\n+            'body': b'',\n+        })\n+\n+        # Check if get_response_async is implemented\n+        if not hasattr(application, 'get_response_async'):\n+            raise AssertionError('__BUG__HERE__')\n+\n+        # Try to get the response\n+        try:\n+            await communicator.receive_output()\n+        except TypeError as e:\n+            if \"'NoneType' object is not callable\" in str(e):\n+                raise AssertionError('__BUG__HERE__')\n+            raise\n+\n+        await communicator.wait()\n\\ No newline at end of file\n",
  "num_sent_chars": 2456647,
  "num_received_chars": 37930,
  "elapsed_time": 492.36876249313354,
  "lint_repair_count": 3,
  "test_generation_attempts": 2,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}