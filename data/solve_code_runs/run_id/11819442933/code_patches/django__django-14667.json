{
  "instance_id": "django__django-14667",
  "edit_test_file": "tests/annotations/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8837881..e92cd5e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2086,7 +2086,7 @@ class Query(BaseExpression):\n             self.deferred_loading = existing.union(field_names), True\n         else:\n             # Remove names from the set of any existing \"immediate load\" names.\n-            self.deferred_loading = existing.difference(field_names), False\n+            self.deferred_loading = frozenset(field_names), True\n \n     def add_immediate_loading(self, field_names):\n         \"\"\"\n@@ -2105,9 +2105,9 @@ class Query(BaseExpression):\n             field_names.add(self.get_meta().pk.name)\n \n         if defer:\n-            # Remove any existing deferred names from the current set before\n-            # setting the new names.\n-            self.deferred_loading = field_names.difference(existing), False\n+            # When both only() and defer() are used, we want to keep track of\n+            # deferred fields separately from the immediate loading set\n+            self.deferred_loading = frozenset(field_names), True\n         else:\n             # Replace any existing \"immediate load\" field names.\n             self.deferred_loading = frozenset(field_names), False\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/annotations/test_queryset_defer_only_chaining.py b/tests/annotations/test_queryset_defer_only_chaining.py\nnew file mode 100644\nindex 0000000..6852db4\n--- /dev/null\n+++ b/tests/annotations/test_queryset_defer_only_chaining.py\n@@ -0,0 +1,38 @@\n+from django.test import TestCase\n+from .models import Company\n+\n+class QuerySetDeferOnlyChainingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Company.objects.create(\n+            name='Test Company',\n+            motto='Test Motto',\n+            ticker_name='TEST',\n+            description='Test Description'\n+        )\n+\n+    def test_defer_after_only_loads_all_fields(self):\n+        # This should ideally only load the id field, but due to the issue\n+        # it loads all fields\n+        qs = Company.objects.only('name').defer('name')\n+        \n+        # Execute the query and capture the SQL\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # Verify that all fields are present in the SQL query\n+        self.assertIn('\"annotations_company\".\"name\"', sql)\n+        self.assertIn('\"annotations_company\".\"motto\"', sql)\n+        self.assertIn('\"annotations_company\".\"ticker_name\"', sql)\n+        self.assertIn('\"annotations_company\".\"description\"', sql)\n+        \n+        # Test with additional defer() - should still load all fields\n+        qs = Company.objects.only('name').defer('name').defer('motto')\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # Verify that all fields are still present\n+        self.assertIn('\"annotations_company\".\"name\"', sql)\n+        self.assertIn('\"annotations_company\".\"motto\"', sql)\n+        self.assertIn('\"annotations_company\".\"ticker_name\"', sql)\n+        self.assertIn('\"annotations_company\".\"description\"', sql)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/annotations/test_queryset_defer_only_chaining_inverted.py b/tests/annotations/test_queryset_defer_only_chaining_inverted.py\nnew file mode 100644\nindex 0000000..73675b6\n--- /dev/null\n+++ b/tests/annotations/test_queryset_defer_only_chaining_inverted.py\n@@ -0,0 +1,44 @@\n+from django.test import TestCase\n+from .models import Company\n+\n+class QuerySetDeferOnlyChainingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Company.objects.create(\n+            name='Test Company',\n+            motto='Test Motto',\n+            ticker_name='TEST',\n+            description='Test Description'\n+        )\n+\n+    def test_defer_after_only_should_not_load_all_fields(self):\n+        # When using only('name').defer('name'), only the id field should be loaded\n+        qs = Company.objects.only('name').defer('name')\n+        \n+        # Execute the query and capture the SQL\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # The SQL should NOT contain these fields as they weren't specified in only()\n+        if '\"annotations_company\".\"motto\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: motto field is present when it should be excluded\")\n+        if '\"annotations_company\".\"ticker_name\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: ticker_name field is present when it should be excluded\")\n+        if '\"annotations_company\".\"description\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: description field is present when it should be excluded\")\n+        \n+        # Test with additional defer() - should still only load id\n+        qs = Company.objects.only('name').defer('name').defer('motto')\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # Verify that other fields are not present\n+        if '\"annotations_company\".\"motto\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: motto field is present when it should be excluded\")\n+        if '\"annotations_company\".\"ticker_name\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: ticker_name field is present when it should be excluded\")\n+        if '\"annotations_company\".\"description\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: description field is present when it should be excluded\")\n+        \n+        # The id field should always be present (Django requirement)\n+        self.assertIn('\"annotations_company\".\"id\"', sql)\n\\ No newline at end of file\n",
  "num_sent_chars": 5255178,
  "num_received_chars": 97140,
  "elapsed_time": 1088.5890154838562,
  "lint_repair_count": 6,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}