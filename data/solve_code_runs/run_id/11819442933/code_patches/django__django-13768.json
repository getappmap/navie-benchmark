{
  "instance_id": "django__django-13768",
  "edit_test_file": "tests/dispatch/tests.py",
  "code_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex b7d9d26..fd0ee36 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -1,3 +1,4 @@\n+import logging\n import threading\n import warnings\n import weakref\n@@ -17,6 +18,8 @@ NONE_ID = _make_id(None)\n # A marker for caching\n NO_RECEIVERS = object()\n \n+logger = logging.getLogger('django.dispatch')\n+\n \n class Signal:\n     \"\"\"\n@@ -208,6 +211,13 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger.error(\n+                    'Error calling signal receiver %r for signal %r from sender %r',\n+                    receiver,\n+                    self.__class__.__name__,\n+                    sender,\n+                    exc_info=True,\n+                )\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/dispatch/test_signal_send_robust_logging.py b/tests/dispatch/test_signal_send_robust_logging.py\nnew file mode 100644\nindex 0000000..2c4fd0f\n--- /dev/null\n+++ b/tests/dispatch/test_signal_send_robust_logging.py\n@@ -0,0 +1,48 @@\n+import logging\n+from django.dispatch import Signal\n+from django.test import SimpleTestCase\n+\n+\n+class SignalSendRobustLoggingTests(SimpleTestCase):\n+    \"\"\"Test that Signal.send_robust() doesn't log exceptions from receivers.\"\"\"\n+\n+    def setUp(self):\n+        self.signal = Signal()\n+        self.log_messages = []\n+        self.logger = logging.getLogger('django.dispatch')\n+        self.old_handlers = self.logger.handlers[:]\n+        for handler in self.logger.handlers:\n+            self.logger.removeHandler(handler)\n+        self.handler = logging.StreamHandler()\n+        self.handler.stream = self\n+        self.logger.addHandler(self.handler)\n+        self.logger.setLevel(logging.ERROR)\n+\n+    def tearDown(self):\n+        self.logger.handlers = self.old_handlers\n+\n+    def write(self, msg):\n+        self.log_messages.append(msg)\n+\n+    def test_exception_not_logged(self):\n+        \"\"\"\n+        Test that exceptions raised by signal receivers are not logged when using\n+        send_robust().\n+        \"\"\"\n+        def receiver_raising_error(**kwargs):\n+            raise ValueError(\"Receiver had an error\")\n+\n+        self.signal.connect(receiver_raising_error)\n+        \n+        # send_robust() should catch the exception but not log it\n+        results = self.signal.send_robust(sender=self)\n+        \n+        # Verify the exception was caught and returned\n+        self.assertEqual(len(results), 1)\n+        receiver, response = results[0]\n+        self.assertIs(receiver, receiver_raising_error)\n+        self.assertIsInstance(response, ValueError)\n+        self.assertEqual(str(response), \"Receiver had an error\")\n+        \n+        # Verify no error was logged\n+        self.assertEqual(len(self.log_messages), 0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/dispatch/test_signal_send_robust_logging_inverted.py b/tests/dispatch/test_signal_send_robust_logging_inverted.py\nnew file mode 100644\nindex 0000000..56bdd4a\n--- /dev/null\n+++ b/tests/dispatch/test_signal_send_robust_logging_inverted.py\n@@ -0,0 +1,56 @@\n+import logging\n+from django.dispatch import Signal\n+from django.test import SimpleTestCase\n+\n+\n+class SignalSendRobustLoggingTests(SimpleTestCase):\n+    \"\"\"Test that Signal.send_robust() logs exceptions from receivers.\"\"\"\n+\n+    def setUp(self):\n+        self.signal = Signal()\n+        self.log_messages = []\n+        self.logger = logging.getLogger('django.dispatch')\n+        self.old_handlers = self.logger.handlers[:]\n+        for handler in self.logger.handlers:\n+            self.logger.removeHandler(handler)\n+        self.handler = logging.StreamHandler()\n+        self.handler.stream = self\n+        self.logger.addHandler(self.handler)\n+        self.logger.setLevel(logging.ERROR)\n+\n+    def tearDown(self):\n+        self.logger.handlers = self.old_handlers\n+\n+    def write(self, msg):\n+        self.log_messages.append(msg)\n+\n+    def test_exception_logged(self):\n+        \"\"\"\n+        Test that exceptions raised by signal receivers are logged when using\n+        send_robust().\n+        \"\"\"\n+        def receiver_raising_error(**kwargs):\n+            raise ValueError(\"Receiver had an error\")\n+\n+        self.signal.connect(receiver_raising_error)\n+        \n+        # send_robust() should catch the exception and log it\n+        results = self.signal.send_robust(sender=self)\n+        \n+        # Verify the exception was caught and returned\n+        self.assertEqual(len(results), 1)\n+        receiver, response = results[0]\n+        self.assertIs(receiver, receiver_raising_error)\n+        self.assertIsInstance(response, ValueError)\n+        self.assertEqual(str(response), \"Receiver had an error\")\n+        \n+        # Verify error was logged\n+        if len(self.log_messages) == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # The log message should contain the error message\n+        error_logged = any(\n+            \"Receiver had an error\" in msg\n+            for msg in self.log_messages\n+        )\n+        self.assertTrue(error_logged, \"Exception message not found in logs\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1116608,
  "num_received_chars": 15201,
  "elapsed_time": 365.98878359794617,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}