{
  "instance_id": "sphinx-doc__sphinx-8627",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex 12dc1f8..69206c9 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -178,6 +178,8 @@ class ModuleScanner:\n         self.object = obj\n \n     def get_object_type(self, name: str, value: Any) -> str:\n+        if value is None:  # Handle None values explicitly\n+            return 'attribute'\n         return get_documenter(self.app, value, self.object).objtype\n \n     def is_skipped(self, name: str, value: Any, objtype: str) -> bool:\n@@ -246,6 +248,8 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         for name in dir(obj):\n             try:\n                 value = safe_getattr(obj, name)\n+                if value is None:  # Skip None values\n+                    continue\n             except AttributeError:\n                 continue\n             documenter = get_documenter(app, value, obj)\n@@ -264,7 +268,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n                         if name in include_public or not name.startswith('_'):\n                             # considers member as public\n                             public.append(name)\n-        return public, items\n+                return public, items\n \n     def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n         \"\"\"Find module attributes with docstrings.\"\"\"\n",
  "code_files": null,
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 9365118,
  "num_received_chars": 133840,
  "elapsed_time": 1977.0488848686218,
  "lint_repair_count": 17,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}