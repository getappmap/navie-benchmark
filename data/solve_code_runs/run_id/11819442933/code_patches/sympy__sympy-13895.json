{
  "instance_id": "sympy__sympy-13895",
  "edit_test_file": "sympy/solvers/tests/test_ode.py",
  "code_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex b2832dd..0e476e4 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -198,12 +198,19 @@ def __new__(cls, b, e, evaluate=None):\n             elif e is S.One:\n                 return b\n             # Only perform autosimplification if exponent or base is a Symbol or number\n+            # and avoid simplifying negative bases with non-integer exponents\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n                 e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n                 elif e.is_odd:\n                     return -Pow(-b, e)\n+            # Handle negative bases with non-integer exponents carefully\n+            elif _coeff_isneg(b) and not e.is_integer:\n+                # If exponent is definitely not an integer, keep the negative base intact\n+                # to avoid introducing complex numbers incorrectly\n+                if e.is_real and not e.is_integer:\n+                    return cls(b, e, evaluate=False)\n             if S.NaN in (b, e):  # XXX S.NaN**x -> S.NaN under assumption that x != 0\n                 return S.NaN\n             elif b is S.One:\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/solvers/tests/test_simplify_exponents.py b/sympy/solvers/tests/test_simplify_exponents.py\nnew file mode 100644\nindex 0000000..fa02a3e\n--- /dev/null\n+++ b/sympy/solvers/tests/test_simplify_exponents.py\n@@ -0,0 +1,21 @@\n+from sympy import Symbol, S, simplify, N\n+\n+def test_simplify_exponents_inequivalent():\n+    x = Symbol('x')\n+    a = S(9)/5  # Test value\n+    \n+    # Original expression\n+    e = (-x/4 - S(1)/12)**x - 1\n+    \n+    # Simplified expression\n+    f = simplify(e)\n+    \n+    # Get numerical values\n+    n1 = N(e.subs(x, a))\n+    n2 = N(f.subs(x, a))\n+    \n+    # Test that the numerical values are different\n+    # n1 should be approximately -1.32255049319339\n+    # n2 should be approximately -0.739051169462523 - 0.189590423018741*I\n+    assert abs(n1 - (-1.32255049319339)) < 1e-10\n+    assert abs(n2 - (-0.739051169462523 - 0.189590423018741j)) < 1e-10\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/solvers/tests/test_simplify_exponents_inverted.py b/sympy/solvers/tests/test_simplify_exponents_inverted.py\nnew file mode 100644\nindex 0000000..a49d044\n--- /dev/null\n+++ b/sympy/solvers/tests/test_simplify_exponents_inverted.py\n@@ -0,0 +1,23 @@\n+from sympy import Symbol, S, simplify, N\n+\n+def test_simplify_exponents_inequivalent():\n+    x = Symbol('x')\n+    a = S(9)/5  # Test value\n+    \n+    # Original expression\n+    e = (-x/4 - S(1)/12)**x - 1\n+    \n+    # Simplified expression\n+    f = simplify(e)\n+    \n+    # Get numerical values\n+    n1 = N(e.subs(x, a))\n+    n2 = N(f.subs(x, a))\n+    \n+    # The test should fail if the numerical values are different\n+    # n1 should be approximately -1.32255049319339\n+    # n2 should be approximately -0.739051169462523 - 0.189590423018741*I\n+    \n+    # Check if the values are significantly different\n+    if abs(n1 - n2) > 1e-10:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 6411170,
  "num_received_chars": 88881,
  "elapsed_time": 1978.8359079360962,
  "lint_repair_count": 9,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}