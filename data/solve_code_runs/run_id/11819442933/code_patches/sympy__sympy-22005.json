{
  "instance_id": "sympy__sympy-22005",
  "edit_test_file": "sympy/solvers/tests/test_polysys.py",
  "code_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex bfec61d..ab9ceb7 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -6861,8 +6861,22 @@ def is_zero_dimensional(F, *gens, **args):\n     \"\"\"\n     Checks if the ideal generated by a Groebner basis is zero-dimensional.\n \n-    The algorithm checks if the set of monomials not divisible by the\n-    leading monomial of any element of ``F`` is bounded.\n+    A polynomial system is zero-dimensional (has finitely many solutions) if:\n+    1. The number of equations is sufficient\n+    2. Each variable appears in at least one equation\n+    3. The set of monomials not divisible by the leading monomial of any\n+       element of F is bounded\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import is_zero_dimensional\n+    >>> from sympy.abc import x, y\n+\n+    >>> is_zero_dimensional([x**2 + y**2 - 1, x*y - 2], x, y)\n+    True\n+    >>> is_zero_dimensional([y - 1], x, y)  # underdetermined - x can be any value\n+    False\n \n     References\n     ==========\n@@ -6871,7 +6885,18 @@ def is_zero_dimensional(F, *gens, **args):\n     Algorithms, 3rd edition, p. 230\n \n     \"\"\"\n-    return GroebnerBasis(F, *gens, **args).is_zero_dimensional\n+    G = GroebnerBasis(F, *gens, **args)\n+    \n+    # Check if each variable appears in at least one polynomial\n+    all_vars = set(G.gens)\n+    vars_in_polys = set()\n+    for poly in G.polys:\n+        vars_in_polys.update(poly.free_symbols)\n+    \n+    if not all_vars.issubset(vars_in_polys):\n+        return False\n+        \n+    return G.is_zero_dimensional\n \n \n @public\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/solvers/tests/test_infinite_solutions.py b/sympy/solvers/tests/test_infinite_solutions.py\nnew file mode 100644\nindex 0000000..31359de\n--- /dev/null\n+++ b/sympy/solvers/tests/test_infinite_solutions.py\n@@ -0,0 +1,16 @@\n+\"\"\"Tests for detection of infinite solutions in polynomial system solver.\"\"\"\n+\n+from sympy import Poly\n+from sympy.abc import x, y\n+from sympy.solvers.polysys import solve_poly_system\n+from sympy.testing.pytest import raises\n+\n+\n+def test_infinite_solutions():\n+    \"\"\"Test handling of systems with infinite solutions.\"\"\"\n+    # First case: x - 1 = 0 should raise NotImplementedError as it has infinite solutions for y\n+    raises(NotImplementedError, lambda: solve_poly_system((Poly(x - 1, x, y),), (x, y)))\n+\n+    # Second case: y - 1 = 0 incorrectly returns a finite solution when it has infinite solutions for x\n+    # This test asserts the current incorrect behavior to document the issue\n+    assert solve_poly_system((Poly(y - 1, x, y),), (x, y)) == [(1,)]\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/solvers/tests/test_infinite_solutions_inverted.py b/sympy/solvers/tests/test_infinite_solutions_inverted.py\nnew file mode 100644\nindex 0000000..ebe5179\n--- /dev/null\n+++ b/sympy/solvers/tests/test_infinite_solutions_inverted.py\n@@ -0,0 +1,20 @@\n+from sympy import Poly\n+from sympy.abc import x, y\n+from sympy.solvers.polysys import solve_poly_system\n+from sympy.testing.pytest import raises\n+\n+\n+def test_infinite_solutions_detection():\n+    \"\"\"Test that systems with infinite solutions are properly detected.\"\"\"\n+    # This case correctly raises NotImplementedError\n+    raises(NotImplementedError, lambda: solve_poly_system([Poly(x - 1, x, y)], x, y))\n+\n+    # This case should also raise NotImplementedError but currently returns a finite solution\n+    result = solve_poly_system([Poly(y - 1, x, y)], x, y)\n+    \n+    # The test should fail here if the bug is present\n+    if result is not None:\n+        raise AssertionError(\"__BUG__HERE__: System with infinite solutions incorrectly returned a finite solution\")\n+\n+    # Both cases should raise NotImplementedError since they have infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system([Poly(y - 1, x, y)], x, y))\n\\ No newline at end of file\n",
  "num_sent_chars": 4376982,
  "num_received_chars": 73959,
  "elapsed_time": 925.3074817657471,
  "lint_repair_count": 3,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}