{
  "instance_id": "django__django-13220",
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "code_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex dc084b8..231650a 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -165,7 +165,7 @@ class ValidationError(Exception):\n \n     def __iter__(self):\n         if hasattr(self, 'error_dict'):\n-            for field, errors in self.error_dict.items():\n+            for field, errors in sorted(self.error_dict.items()):\n                 yield field, list(ValidationError(errors))\n         else:\n             for error in self.error_list:\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/forms_tests/tests/test_validation_error_equality.py b/tests/forms_tests/tests/test_validation_error_equality.py\nnew file mode 100644\nindex 0000000..704188f\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_validation_error_equality.py\n@@ -0,0 +1,34 @@\n+from django.core.exceptions import ValidationError\n+from django.test import SimpleTestCase\n+\n+\n+class ValidationErrorEqualityTests(SimpleTestCase):\n+    \"\"\"Tests demonstrating that ValidationErrors with identical messages don't equal each other.\"\"\"\n+\n+    def test_validation_errors_with_same_messages_not_equal(self):\n+        \"\"\"\n+        ValidationErrors with identical messages should be equal but currently are not.\n+        This test passes while the issue exists and will fail when fixed.\n+        \"\"\"\n+        # Create two ValidationErrors with identical messages\n+        error1 = ValidationError('This field is required.')\n+        error2 = ValidationError('This field is required.')\n+\n+        # Test direct equality\n+        self.assertNotEqual(error1, error2)\n+\n+        # Test with identical message lists\n+        error3 = ValidationError(['Error 1', 'Error 2'])\n+        error4 = ValidationError(['Error 1', 'Error 2'])\n+        self.assertNotEqual(error3, error4)\n+\n+        # Test with identical message dictionaries\n+        error5 = ValidationError({\n+            'field1': ['Error 1', 'Error 2'],\n+            'field2': ['Error 3'],\n+        })\n+        error6 = ValidationError({\n+            'field1': ['Error 1', 'Error 2'],\n+            'field2': ['Error 3'],\n+        })\n+        self.assertNotEqual(error5, error6)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_validation_error_equality_inverted.py b/tests/forms_tests/tests/test_validation_error_equality_inverted.py\nnew file mode 100644\nindex 0000000..4ca9eb3\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_validation_error_equality_inverted.py\n@@ -0,0 +1,37 @@\n+from django.core.exceptions import ValidationError\n+from django.test import SimpleTestCase\n+\n+\n+class ValidationErrorEqualityTests(SimpleTestCase):\n+    \"\"\"Tests demonstrating that ValidationErrors with identical messages should be equal.\"\"\"\n+\n+    def test_validation_errors_with_same_messages_should_be_equal(self):\n+        \"\"\"\n+        ValidationErrors with identical messages should be equal.\n+        This test fails while the issue exists and will pass when fixed.\n+        \"\"\"\n+        # Create two ValidationErrors with identical messages\n+        error1 = ValidationError('This field is required.')\n+        error2 = ValidationError('This field is required.')\n+\n+        # Test direct equality - should be equal since messages are identical\n+        if error1 != error2:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Test with identical message lists\n+        error3 = ValidationError(['Error 1', 'Error 2'])\n+        error4 = ValidationError(['Error 1', 'Error 2'])\n+        if error3 != error4:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Test with identical message dictionaries\n+        error5 = ValidationError({\n+            'field1': ['Error 1', 'Error 2'],\n+            'field2': ['Error 3'],\n+        })\n+        error6 = ValidationError({\n+            'field1': ['Error 1', 'Error 2'],\n+            'field2': ['Error 3'],\n+        })\n+        if error5 != error6:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1787944,
  "num_received_chars": 23297,
  "elapsed_time": 300.6074044704437,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}