{
  "instance_id": "django__django-11742",
  "edit_test_file": "tests/invalid_models_tests/test_ordinary_fields.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 9ce46e3..c48a552 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -955,6 +955,7 @@ class CharField(Field):\n         return [\n             *super().check(**kwargs),\n             *self._check_max_length_attribute(**kwargs),\n+            *self._check_max_length_for_choices(**kwargs),\n         ]\n \n     def _check_max_length_attribute(self, **kwargs):\n@@ -991,6 +992,49 @@ class CharField(Field):\n             return value\n         return str(value)\n \n+    def _check_max_length_for_choices(self, **kwargs):\n+        \"\"\"\n+        Check that max_length is sufficient to accommodate the longest choice value.\n+        \"\"\"\n+        if not self.choices or not self.max_length:\n+            return []\n+\n+        longest_value = 0\n+        longest_choice = None\n+\n+        for choice in self.choices:\n+            try:\n+                choice_value, choice_label = choice\n+                if isinstance(choice_value, (list, tuple)):\n+                    # This is an optgroup, so look inside the group for choices\n+                    for group_choice in choice_value:\n+                        if len(str(group_choice[0])) > longest_value:\n+                            longest_value = len(str(group_choice[0]))\n+                            longest_choice = group_choice[0]\n+                else:\n+                    if len(str(choice_value)) > longest_value:\n+                        longest_value = len(str(choice_value))\n+                        longest_choice = choice_value\n+            except (TypeError, ValueError):\n+                pass\n+\n+        if longest_value > self.max_length:\n+            return [\n+                checks.Error(\n+                    \"The longest choice value for '%(field_name)s' is %(longest_value)d characters \"\n+                    \"(the value '%(longest_choice)s') which exceeds the max_length of %(max_length)d.\",\n+                    obj=self,\n+                    id='fields.E124',\n+                    params={\n+                        'field_name': self.name,\n+                        'longest_value': longest_value,\n+                        'longest_choice': longest_choice,\n+                        'max_length': self.max_length,\n+                    },\n+                )\n+            ]\n+        return []\n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         return self.to_python(value)\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/invalid_models_tests/test_field_length_validation.py b/tests/invalid_models_tests/test_field_length_validation.py\nnew file mode 100644\nindex 0000000..1ca8ded\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_field_length_validation.py\n@@ -0,0 +1,28 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class FieldLengthValidationTests(SimpleTestCase):\n+    def test_choices_longer_than_max_length(self):\n+        \"\"\"\n+        Test that a CharField with choices containing values longer than max_length\n+        does not raise any validation errors, demonstrating the issue.\n+        \"\"\"\n+        class Model(models.Model):\n+            # max_length of 5 but choices contain longer values\n+            field = models.CharField(\n+                max_length=5,\n+                choices=[\n+                    ('too_long_value', 'Too Long Value'),\n+                    ('also_long', 'Also Long'),\n+                    ('ok', 'OK'),\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        # Currently no validation error is raised, even though 'too_long_value' \n+        # and 'also_long' exceed max_length=5\n+        self.assertEqual(field.check(), [])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_field_length_validation_inverted.py b/tests/invalid_models_tests/test_field_length_validation_inverted.py\nnew file mode 100644\nindex 0000000..8088df5\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_field_length_validation_inverted.py\n@@ -0,0 +1,44 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class FieldLengthValidationTests(SimpleTestCase):\n+    def test_choices_longer_than_max_length(self):\n+        \"\"\"\n+        Test that a CharField with choices containing values longer than max_length\n+        raises validation errors.\n+        \"\"\"\n+        class Model(models.Model):\n+            # max_length of 5 but choices contain longer values\n+            field = models.CharField(\n+                max_length=5,\n+                choices=[\n+                    ('too_long_value', 'Too Long Value'),\n+                    ('also_long', 'Also Long'),\n+                    ('ok', 'OK'),\n+                ]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        errors = field.check()\n+        \n+        # The test should fail if no validation errors are found\n+        if not errors:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        # Additional assertions to verify the error details\n+        self.assertEqual(len(errors), 2)\n+        self.assertIsInstance(errors[0], Error)\n+        self.assertIsInstance(errors[1], Error)\n+        \n+        # Verify error messages for both invalid choices\n+        expected_choices = ['too_long_value', 'also_long']\n+        error_choices = [str(error.msg) for error in errors]\n+        for choice in expected_choices:\n+            self.assertTrue(\n+                any(choice in msg for msg in error_choices),\n+                f\"Expected error message containing choice '{choice}'\"\n+            )\n\\ No newline at end of file\n",
  "num_sent_chars": 4732660,
  "num_received_chars": 82255,
  "elapsed_time": 947.796205997467,
  "lint_repair_count": 3,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}