{
  "instance_id": "django__django-14382",
  "edit_test_file": "tests/admin_scripts/tests.py",
  "code_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068..4de75d6 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,11 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                # Clean up the target directory path by removing trailing slashes\n+                clean_target = target.rstrip(os.sep)\n+                if os.altsep:\n+                    clean_target = clean_target.rstrip(os.altsep)\n+                self.validate_name(os.path.basename(clean_target), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/admin_scripts/test_startapp_trailing_slash.py b/tests/admin_scripts/test_startapp_trailing_slash.py\nnew file mode 100644\nindex 0000000..f867b46\n--- /dev/null\n+++ b/tests/admin_scripts/test_startapp_trailing_slash.py\n@@ -0,0 +1,26 @@\n+import os\n+import sys\n+from django.test import SimpleTestCase\n+from django.core.management import CommandError\n+from admin_scripts.tests import AdminScriptTestCase\n+\n+class StartAppTrailingSlashTests(AdminScriptTestCase):\n+    \"\"\"Tests for django-admin startapp command with trailing slash in directory name.\"\"\"\n+\n+    def test_startapp_with_trailing_slash(self):\n+        \"\"\"\n+        startapp with trailing slash in directory name should raise CommandError.\n+        \"\"\"\n+        # Create a directory with trailing slash\n+        app_dir = os.path.join(self.test_dir, 'app_dir/')\n+        os.makedirs(app_dir.rstrip('/'))\n+\n+        args = ['startapp', 'app', 'app_dir/']\n+        out, err = self.run_django_admin(args)\n+        \n+        # Assert that the command fails with the expected error message\n+        self.assertNoOutput(out)\n+        self.assertOutput(\n+            err,\n+            \"CommandError: '' is not a valid app directory. Please make sure the directory is a valid identifier.\"\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/admin_scripts/test_startapp_trailing_slash_inverted.py b/tests/admin_scripts/test_startapp_trailing_slash_inverted.py\nnew file mode 100644\nindex 0000000..21ad459\n--- /dev/null\n+++ b/tests/admin_scripts/test_startapp_trailing_slash_inverted.py\n@@ -0,0 +1,39 @@\n+import os\n+from admin_scripts.tests import AdminScriptTestCase\n+\n+class StartAppTrailingSlashTests(AdminScriptTestCase):\n+    \"\"\"Tests for django-admin startapp command with trailing slash in directory name.\"\"\"\n+\n+    def test_startapp_with_trailing_slash(self):\n+        \"\"\"\n+        startapp should work correctly with trailing slash in directory name.\n+        The command should not raise a CommandError due to trailing slash.\n+        \"\"\"\n+        # Create a directory with trailing slash\n+        app_dir = os.path.join(self.test_dir, 'app_dir/')\n+        os.makedirs(app_dir.rstrip('/'))\n+\n+        args = ['startapp', 'app', 'app_dir/']\n+        \n+        # Run the command\n+        out, err = self.run_django_admin(args)\n+        \n+        # If we get here and the command failed with the bug,\n+        # raise an explicit error to indicate where the bug occurs\n+        if \"CommandError: '' is not a valid app directory\" in err:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        # The command should succeed with no error output\n+        self.assertNoOutput(err)\n+        \n+        # Verify that the app was actually created in the directory\n+        expected_files = ['__init__.py', 'apps.py', 'models.py', 'admin.py', 'tests.py', 'views.py']\n+        app_path = os.path.join(self.test_dir, 'app_dir', 'app')\n+        \n+        self.assertTrue(os.path.exists(app_path), \"App directory was not created\")\n+        for expected_file in expected_files:\n+            file_path = os.path.join(app_path, expected_file)\n+            self.assertTrue(\n+                os.path.exists(file_path),\n+                f\"Expected file {expected_file} was not created\"\n+            )\n\\ No newline at end of file\n",
  "num_sent_chars": 4710589,
  "num_received_chars": 68975,
  "elapsed_time": 1254.143961906433,
  "lint_repair_count": 2,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}