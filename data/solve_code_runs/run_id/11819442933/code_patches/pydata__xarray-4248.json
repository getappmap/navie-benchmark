{
  "instance_id": "pydata__xarray-4248",
  "edit_test_file": "xarray/tests/test_units.py",
  "code_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5..b0f55ea 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -278,7 +278,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+            \n+    # Extract units from attributes if present\n+    units = var.attrs.get(\"units\", \"\")\n+    name_with_units = name if not units else f\"{name} [{units}]\"\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -292,7 +297,11 @@ def summarize_variable(\n \n \n def _summarize_coord_multiindex(coord, col_width, marker):\n-    first_col = pretty_print(f\"  {marker} {coord.name} \", col_width)\n+    # Extract units from attributes if present\n+    units = coord.attrs.get(\"units\", \"\")\n+    name_with_units = coord.name if not units else f\"{coord.name} [{units}]\"\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     return \"{}({}) MultiIndex\".format(first_col, str(coord.dims[0]))\n \n \n@@ -356,8 +365,17 @@ def _get_col_items(mapping):\n     return col_items\n \n \n-def _calculate_col_width(col_items):\n+def _calculate_col_width(col_items, variables=None):\n+    # Calculate base width from names\n     max_name_length = max(len(str(s)) for s in col_items) if col_items else 0\n+    \n+    # Account for units in width calculation if variables are provided\n+    if variables is not None:\n+        for k, v in variables.items():\n+            if hasattr(v, 'attrs') and 'units' in v.attrs:\n+                unit_str = f\" [{v.attrs['units']}]\"\n+                max_name_length = max(max_name_length, len(str(k)) + len(unit_str))\n+    \n     col_width = max(max_name_length, 7) + 6\n     return col_width\n \n@@ -385,7 +403,7 @@ attrs_repr = functools.partial(\n \n def coords_repr(coords, col_width=None):\n     if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n+        col_width = _calculate_col_width(_get_col_items(coords), variables=coords)\n     return _mapping_repr(\n         coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n     )\n",
  "code_files": null,
  "test_patch": "diff --git a/xarray/tests/test_dataset_repr_units.py b/xarray/tests/test_dataset_repr_units.py\nnew file mode 100644\nindex 0000000..bf89490\n--- /dev/null\n+++ b/xarray/tests/test_dataset_repr_units.py\n@@ -0,0 +1,60 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+# Import from test_units.py\n+pint = pytest.importorskip(\"pint\")\n+unit_registry = pint.UnitRegistry(force_ndarray=True)\n+\n+\n+def test_dataset_repr_without_units():\n+    \"\"\"Test that verifies units are not shown in Dataset repr.\n+    \n+    This test should fail once units are properly displayed in the repr,\n+    at which point it should be updated to test for the presence of units.\n+    \"\"\"\n+    # Create a dataset with units similar to the example\n+    x = np.arange(5) * unit_registry.meter\n+    y = np.arange(4) * unit_registry.meter\n+    time = np.array(['2020-01-01', '2020-01-02', '2020-01-03'], dtype='datetime64')\n+    \n+    rainfall = np.random.rand(3, 4, 5) * unit_registry.mm\n+    max_temp = np.random.rand(3, 4, 5) * unit_registry.degC\n+    \n+    ds = xr.Dataset(\n+        data_vars={\n+            'rainfall': (('time', 'y', 'x'), rainfall),\n+            'max_temp': (('time', 'y', 'x'), max_temp)\n+        },\n+        coords={\n+            'x': x,\n+            'y': y,\n+            'time': time\n+        }\n+    )\n+    \n+    # Get the string representation\n+    ds_repr = repr(ds)\n+    \n+    # Verify units are not shown in the repr\n+    assert 'metre' not in ds_repr.lower()\n+    assert 'meter' not in ds_repr.lower()\n+    assert 'mm' not in ds_repr.lower()\n+    assert 'deg c' not in ds_repr.lower()\n+    assert 'degc' not in ds_repr.lower()\n+    \n+    # The repr should look like the \"before\" example\n+    expected_substrings = [\n+        'Dimensions:',\n+        'Coordinates:',\n+        '* x',\n+        '* y',\n+        '* time',\n+        'Data variables:',\n+        'rainfall',\n+        'max_temp',\n+        'float'  # Should contain float type info\n+    ]\n+    \n+    for substring in expected_substrings:\n+        assert substring in ds_repr\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_dataset_repr_units_inverted.py b/xarray/tests/test_dataset_repr_units_inverted.py\nnew file mode 100644\nindex 0000000..2e7d839\n--- /dev/null\n+++ b/xarray/tests/test_dataset_repr_units_inverted.py\n@@ -0,0 +1,64 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+# Import from test_units.py\n+pint = pytest.importorskip(\"pint\")\n+unit_registry = pint.UnitRegistry(force_ndarray=True)\n+\n+\n+def test_dataset_repr_with_units():\n+    \"\"\"Test that verifies units are shown in Dataset repr.\n+    \n+    This test should fail if units are not properly displayed in the repr,\n+    and pass once units are properly implemented.\n+    \"\"\"\n+    # Create a dataset with units similar to the example\n+    x = np.arange(5) * unit_registry.meter\n+    y = np.arange(4) * unit_registry.meter\n+    time = np.array(['2020-01-01', '2020-01-02', '2020-01-03'], dtype='datetime64')\n+    \n+    rainfall = np.random.rand(3, 4, 5) * unit_registry.mm\n+    max_temp = np.random.rand(3, 4, 5) * unit_registry.degC\n+    \n+    ds = xr.Dataset(\n+        data_vars={\n+            'rainfall': (('time', 'y', 'x'), rainfall),\n+            'max_temp': (('time', 'y', 'x'), max_temp)\n+        },\n+        coords={\n+            'x': x,\n+            'y': y,\n+            'time': time\n+        }\n+    )\n+    \n+    # Get the string representation\n+    ds_repr = repr(ds)\n+    \n+    # Verify units are shown in the repr\n+    # If any of these fail, it means the units are not properly displayed\n+    if 'metre' not in ds_repr.lower() and 'meter' not in ds_repr.lower():\n+        raise AssertionError(\"__BUG__HERE__: Coordinate units (meters) not shown in repr\")\n+    \n+    if 'mm' not in ds_repr.lower():\n+        raise AssertionError(\"__BUG__HERE__: Rainfall units (mm) not shown in repr\")\n+    \n+    if 'deg c' not in ds_repr.lower() and 'degc' not in ds_repr.lower():\n+        raise AssertionError(\"__BUG__HERE__: Temperature units (deg C) not shown in repr\")\n+    \n+    # The repr should contain all expected components\n+    expected_substrings = [\n+        'Dimensions:',\n+        'Coordinates:',\n+        '* x',\n+        '* y',\n+        '* time',\n+        'Data variables:',\n+        'rainfall',\n+        'max_temp',\n+    ]\n+    \n+    for substring in expected_substrings:\n+        if substring not in ds_repr:\n+            raise AssertionError(f\"__BUG__HERE__: Expected substring '{substring}' not found in repr\")\n\\ No newline at end of file\n",
  "num_sent_chars": 8088434,
  "num_received_chars": 106769,
  "elapsed_time": 2374.675042152405,
  "lint_repair_count": 12,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}