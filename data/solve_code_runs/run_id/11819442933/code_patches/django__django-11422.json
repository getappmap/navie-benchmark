{
  "instance_id": "django__django-11422",
  "edit_test_file": "tests/utils_tests/test_autoreload.py",
  "code_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 7ca0d68..e6b4c9d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -247,6 +247,16 @@ class BaseReloader:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n                     yield from directory.glob(pattern)\n+        \n+        # Add the script file (usually manage.py) that launched Django\n+        script_path = Path(sys.argv[0])\n+        try:\n+            resolved_path = script_path.resolve().absolute()\n+            if resolved_path.exists():\n+                yield resolved_path\n+        except OSError:\n+            # Skip if the path resolution fails\n+            pass\n \n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         \"\"\"\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/utils_tests/test_manage_autoreload.py b/tests/utils_tests/test_manage_autoreload.py\nnew file mode 100644\nindex 0000000..4a9db41\n--- /dev/null\n+++ b/tests/utils_tests/test_manage_autoreload.py\n@@ -0,0 +1,55 @@\n+import os\n+import tempfile\n+from pathlib import Path\n+from unittest import mock\n+\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+\n+\n+class TestManageFileReload(SimpleTestCase):\n+    def setUp(self):\n+        self._tempdir = tempfile.TemporaryDirectory()\n+        self.tempdir = Path(self._tempdir.name).resolve().absolute()\n+        self.manage_py = self.tempdir / 'manage.py'\n+        self.manage_py.write_text(\"\"\"\n+import os\n+def main():\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\n+\"\"\")\n+        self.reloader = autoreload.StatReloader()\n+\n+    def tearDown(self):\n+        self._tempdir.cleanup()\n+        self.reloader.stop()\n+\n+    def increment_mtime(self, fp, by=1):\n+        current_time = os.path.getmtime(fp)\n+        os.utime(str(fp), (current_time + by, current_time + by))\n+\n+    @mock.patch('django.utils.autoreload.BaseReloader.notify_file_changed')\n+    @mock.patch('django.utils.autoreload.iter_all_python_module_files', return_value=frozenset())\n+    def test_manage_py_not_detected(self, mocked_modules, notify_mock):\n+        \"\"\"\n+        Test that changes to manage.py are not detected by StatReloader in Django 2.2.1.\n+        This reproduces the issue where manage.py changes don't trigger auto-reload.\n+        \"\"\"\n+        # Add some content to manage.py\n+        self.manage_py.write_text(self.manage_py.read_text() + \"\\nprint('something')\\n\")\n+        self.increment_mtime(self.manage_py)\n+        \n+        # Simulate a tick of the reloader\n+        ticker = self.reloader.tick()\n+        next(ticker)\n+        next(ticker)\n+\n+        # In Django 2.2.1, changes to manage.py are not detected\n+        # so notify_file_changed should not be called\n+        self.assertEqual(notify_mock.call_count, 0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_manage_autoreload_inverted.py b/tests/utils_tests/test_manage_autoreload_inverted.py\nnew file mode 100644\nindex 0000000..760f9ed\n--- /dev/null\n+++ b/tests/utils_tests/test_manage_autoreload_inverted.py\n@@ -0,0 +1,58 @@\n+import os\n+import tempfile\n+from pathlib import Path\n+from unittest import mock\n+\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+\n+\n+class TestManageFileReload(SimpleTestCase):\n+    def setUp(self):\n+        self._tempdir = tempfile.TemporaryDirectory()\n+        self.tempdir = Path(self._tempdir.name).resolve().absolute()\n+        self.manage_py = self.tempdir / 'manage.py'\n+        self.manage_py.write_text(\"\"\"\n+import os\n+def main():\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\n+\"\"\")\n+        self.reloader = autoreload.StatReloader()\n+\n+    def tearDown(self):\n+        self._tempdir.cleanup()\n+        self.reloader.stop()\n+\n+    def increment_mtime(self, fp, by=1):\n+        current_time = os.path.getmtime(fp)\n+        os.utime(str(fp), (current_time + by, current_time + by))\n+\n+    @mock.patch('django.utils.autoreload.BaseReloader.notify_file_changed')\n+    @mock.patch('django.utils.autoreload.iter_all_python_module_files', return_value=frozenset())\n+    def test_manage_py_should_be_detected(self, mocked_modules, notify_mock):\n+        \"\"\"\n+        Test that changes to manage.py are detected by StatReloader.\n+        The test will fail in Django 2.2.1 where manage.py changes don't trigger auto-reload.\n+        \"\"\"\n+        # Add some content to manage.py\n+        self.manage_py.write_text(self.manage_py.read_text() + \"\\nprint('something')\\n\")\n+        self.increment_mtime(self.manage_py)\n+        \n+        # Simulate a tick of the reloader\n+        ticker = self.reloader.tick()\n+        next(ticker)\n+        next(ticker)\n+\n+        # Changes to manage.py should be detected and notify_file_changed should be called\n+        if notify_mock.call_count == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Verify the notification was for manage.py\n+        notify_mock.assert_called_once_with(str(self.manage_py))\n\\ No newline at end of file\n",
  "num_sent_chars": 4958364,
  "num_received_chars": 62589,
  "elapsed_time": 963.7564921379089,
  "lint_repair_count": 2,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}