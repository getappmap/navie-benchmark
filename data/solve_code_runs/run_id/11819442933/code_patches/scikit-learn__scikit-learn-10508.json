{
  "instance_id": "scikit-learn__scikit-learn-10508",
  "edit_test_file": "sklearn/preprocessing/tests/test_label.py",
  "code_patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\nindex 61b8d4a..038994a 100644\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -127,6 +127,10 @@ class LabelEncoder(BaseEstimator, TransformerMixin):\n         check_is_fitted(self, 'classes_')\n         y = column_or_1d(y, warn=True)\n \n+        # Handle empty arrays\n+        if len(y) == 0:\n+            return np.array([], dtype=np.int64)\n+\n         classes = np.unique(y)\n         if len(np.intersect1d(classes, self.classes_)) < len(classes):\n             diff = np.setdiff1d(classes, self.classes_)\n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_label_encoder_empty_transform.py b/sklearn/preprocessing/tests/test_label_encoder_empty_transform.py\nnew file mode 100644\nindex 0000000..3367579\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_label_encoder_empty_transform.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+from sklearn.preprocessing import LabelEncoder\n+from sklearn.utils.testing import assert_array_equal, assert_raises\n+\n+\n+def test_label_encoder_empty_transform():\n+    \"\"\"Test that LabelEncoder transform behavior is inconsistent for empty lists.\n+    \n+    This test verifies that transform() works for empty lists when fitted with\n+    numeric data but fails with string data.\n+    \"\"\"\n+    # Case 1: Numeric data - should work\n+    le_numeric = LabelEncoder()\n+    le_numeric.fit([1, 2])\n+    empty_transform_numeric = le_numeric.transform([])\n+    assert_array_equal(empty_transform_numeric, np.array([], dtype=np.int64))\n+\n+    # Case 2: String data - should raise TypeError\n+    le_string = LabelEncoder()\n+    le_string.fit([\"a\", \"b\"])\n+    assert_raises(TypeError, le_string.transform, [])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/preprocessing/tests/test_label_encoder_empty_transform_inverted.py b/sklearn/preprocessing/tests/test_label_encoder_empty_transform_inverted.py\nnew file mode 100644\nindex 0000000..1bc78f0\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_label_encoder_empty_transform_inverted.py\n@@ -0,0 +1,33 @@\n+import numpy as np\n+from sklearn.preprocessing import LabelEncoder\n+\n+\n+def test_label_encoder_empty_transform():\n+    \"\"\"Test that LabelEncoder transform behavior is consistent for empty lists.\n+    \n+    This test verifies that transform() should work consistently for empty lists\n+    regardless of whether the encoder was fitted with numeric or string data.\n+    The test will fail if inconsistent behavior is detected.\n+    \"\"\"\n+    # Case 1: Numeric data\n+    le_numeric = LabelEncoder()\n+    le_numeric.fit([1, 2])\n+    empty_transform_numeric = le_numeric.transform([])\n+    \n+    # Case 2: String data\n+    le_string = LabelEncoder()\n+    le_string.fit([\"a\", \"b\"])\n+    \n+    try:\n+        empty_transform_string = le_string.transform([])\n+    except TypeError:\n+        # If we get here, the bug is present - string data fails for empty transform\n+        raise AssertionError(\"__BUG__HERE__\")\n+        \n+    # Both transforms should return empty arrays\n+    assert isinstance(empty_transform_numeric, np.ndarray)\n+    assert isinstance(empty_transform_string, np.ndarray)\n+    assert empty_transform_numeric.size == 0\n+    assert empty_transform_string.size == 0\n+    assert empty_transform_numeric.dtype == np.int64\n+    assert empty_transform_string.dtype == np.int64\n\\ No newline at end of file\n",
  "num_sent_chars": 2157360,
  "num_received_chars": 18061,
  "elapsed_time": 275.5896170139313,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}