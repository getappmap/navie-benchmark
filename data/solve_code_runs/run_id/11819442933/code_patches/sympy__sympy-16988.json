{
  "instance_id": "sympy__sympy-16988",
  "edit_test_file": "sympy/sets/tests/test_sets.py",
  "code_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 03cf57a..0b622ff 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1262,15 +1262,23 @@ def __new__(cls, *args, **kwargs):\n         # flatten inputs to merge intersections and iterables\n         args = _sympify(args)\n \n+        # Remove duplicates while preserving order\n+        seen = set()\n+        unique_args = []\n+        for arg in args:\n+            if arg not in seen:\n+                seen.add(arg)\n+                unique_args.append(arg)\n+\n         # Reduce sets using known rules\n         if evaluate:\n-            args = list(cls._new_args_filter(args))\n-            return simplify_intersection(args)\n+            unique_args = list(cls._new_args_filter(unique_args))\n+            return simplify_intersection(unique_args)\n \n-        args = list(ordered(args, Set._infimum_key))\n+        unique_args = list(ordered(unique_args, Set._infimum_key))\n \n-        obj = Basic.__new__(cls, *args)\n-        obj._argset = frozenset(args)\n+        obj = Basic.__new__(cls, *unique_args)\n+        obj._argset = frozenset(unique_args)\n         return obj\n \n     @property\n@@ -1317,7 +1325,15 @@ def _handle_finite_sets(args):\n         from sympy.core.logic import fuzzy_and, fuzzy_bool\n         from sympy.core.compatibility import zip_longest\n \n-        fs_args, other = sift(args, lambda x: x.is_FiniteSet,\n+        # Remove duplicates from args while preserving order\n+        unique_args = []\n+        seen = set()\n+        for arg in args:\n+            if arg not in seen:\n+                seen.add(arg)\n+                unique_args.append(arg)\n+\n+        fs_args, other = sift(unique_args, lambda x: x.is_FiniteSet,\n             binary=True)\n         if not fs_args:\n             return\n@@ -1979,11 +1995,19 @@ def simplify_intersection(args):\n     can simplify themselves with any other constituent\n     \"\"\"\n \n+    # Remove duplicates while preserving order\n+    seen = set()\n+    unique_args = []\n+    for arg in args:\n+        if arg not in seen:\n+            seen.add(arg)\n+            unique_args.append(arg)\n+\n     # ===== Global Rules =====\n-    if not args:\n+    if not unique_args:\n         return S.UniversalSet\n \n-    for arg in args:\n+    for arg in unique_args:\n         if not isinstance(arg, Set):\n             raise TypeError(\"Input args to Union must be Sets\")\n \n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/sets/tests/test_intersection_duplicates.py b/sympy/sets/tests/test_intersection_duplicates.py\nnew file mode 100644\nindex 0000000..278cb88\n--- /dev/null\n+++ b/sympy/sets/tests/test_intersection_duplicates.py\n@@ -0,0 +1,11 @@\n+from sympy import (Symbol, FiniteSet, Intersection, S, EmptySet)\n+from sympy.utilities.pytest import raises\n+\n+def test_intersection_duplicates():\n+    x = Symbol('x')\n+    \n+    # This should not return EmptySet, but currently does\n+    assert Intersection(FiniteSet(1), FiniteSet(1), FiniteSet(x)) == EmptySet()\n+    \n+    # This works correctly and returns a non-empty intersection\n+    assert Intersection(FiniteSet(1), FiniteSet(x)) != EmptySet()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/sets/tests/test_intersection_duplicates_inverted.py b/sympy/sets/tests/test_intersection_duplicates_inverted.py\nnew file mode 100644\nindex 0000000..03b5f14\n--- /dev/null\n+++ b/sympy/sets/tests/test_intersection_duplicates_inverted.py\n@@ -0,0 +1,13 @@\n+from sympy import (Symbol, FiniteSet, Intersection, S, EmptySet)\n+from sympy.utilities.pytest import raises\n+\n+def test_intersection_duplicates():\n+    x = Symbol('x')\n+    \n+    # This should not return EmptySet, as duplicate sets should be removed\n+    result = Intersection(FiniteSet(1), FiniteSet(1), FiniteSet(x))\n+    if result == EmptySet():\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # This is the correct behavior - verify it's still working\n+    assert Intersection(FiniteSet(1), FiniteSet(x)) != EmptySet()\n\\ No newline at end of file\n",
  "num_sent_chars": 1788199,
  "num_received_chars": 29180,
  "elapsed_time": 407.3314399719238,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}