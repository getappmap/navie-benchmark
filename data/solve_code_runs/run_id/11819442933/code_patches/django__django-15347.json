{
  "instance_id": "django__django-15347",
  "edit_test_file": "tests/messages_tests/test_cookie.py",
  "code_patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c7..e48d4ed 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/messages_tests/test_message_tags_serialization.py b/tests/messages_tests/test_message_tags_serialization.py\nnew file mode 100644\nindex 0000000..c53103e\n--- /dev/null\n+++ b/tests/messages_tests/test_message_tags_serialization.py\n@@ -0,0 +1,32 @@\n+from django.contrib.messages import constants\n+from django.contrib.messages.storage.base import Message\n+from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n+from django.test import SimpleTestCase\n+\n+\n+class MessageTagsSerializationTests(SimpleTestCase):\n+    \"\"\"Tests for message tags serialization behavior.\"\"\"\n+\n+    def test_empty_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that empty string extra_tags are preserved during serialization/deserialization.\n+        This test verifies the bug where empty string extra_tags become None.\n+        \"\"\"\n+        # Create a message with empty string extra_tags\n+        original_message = Message(constants.DEBUG, \"Test message\", extra_tags=\"\")\n+        \n+        # Verify original message has empty string extra_tags\n+        self.assertEqual(original_message.extra_tags, \"\")\n+        \n+        # Serialize the message\n+        encoder = MessageEncoder()\n+        encoded_message = encoder.encode(original_message)\n+        \n+        # Deserialize the message\n+        decoder = MessageDecoder()\n+        decoded_message = decoder.decode(encoded_message)\n+        \n+        # Verify the bug where empty string becomes None\n+        self.assertIsNone(decoded_message.extra_tags)\n+        # This assertion passes because of the bug - empty string is converted to None\n+        self.assertNotEqual(decoded_message.extra_tags, original_message.extra_tags)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/messages_tests/test_message_tags_serialization_inverted.py b/tests/messages_tests/test_message_tags_serialization_inverted.py\nnew file mode 100644\nindex 0000000..e67f6c9\n--- /dev/null\n+++ b/tests/messages_tests/test_message_tags_serialization_inverted.py\n@@ -0,0 +1,34 @@\n+from django.contrib.messages import constants\n+from django.contrib.messages.storage.base import Message\n+from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n+from django.test import SimpleTestCase\n+\n+\n+class MessageTagsSerializationTests(SimpleTestCase):\n+    \"\"\"Tests for message tags serialization behavior.\"\"\"\n+\n+    def test_empty_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that empty string extra_tags are preserved during serialization/deserialization.\n+        The test should fail when empty string extra_tags become None.\n+        \"\"\"\n+        # Create a message with empty string extra_tags\n+        original_message = Message(constants.DEBUG, \"Test message\", extra_tags=\"\")\n+        \n+        # Verify original message has empty string extra_tags\n+        self.assertEqual(original_message.extra_tags, \"\")\n+        \n+        # Serialize the message\n+        encoder = MessageEncoder()\n+        encoded_message = encoder.encode(original_message)\n+        \n+        # Deserialize the message\n+        decoder = MessageDecoder()\n+        decoded_message = decoder.decode(encoded_message)\n+        \n+        # This assertion should fail when the bug is present\n+        if decoded_message.extra_tags is None:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        # Verify that extra_tags remains an empty string after deserialization\n+        self.assertEqual(decoded_message.extra_tags, original_message.extra_tags)\n\\ No newline at end of file\n",
  "num_sent_chars": 1792094,
  "num_received_chars": 15135,
  "elapsed_time": 256.6417784690857,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}