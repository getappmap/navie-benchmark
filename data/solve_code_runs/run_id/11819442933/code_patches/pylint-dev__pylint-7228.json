{
  "instance_id": "pylint-dev__pylint-7228",
  "edit_test_file": "tests/config/test_argparse_config.py",
  "code_patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex 7b412f9..85ee316 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -4,6 +4,7 @@\n \n from __future__ import annotations\n \n+import re\n import sys\n from pathlib import Path\n from typing import TYPE_CHECKING\n@@ -47,6 +48,14 @@ def _config_initialization(\n     if \"init-hook\" in config_data:\n         exec(utils._unquote(config_data[\"init-hook\"]))  # pylint: disable=exec-used\n \n+    # Process any regex patterns to ensure they support Unicode character classes\n+    for key, value in config_data.items():\n+        if key.endswith(\"-rgx\") and value:\n+            try:\n+                config_data[key] = re.compile(value, re.UNICODE)\n+            except re.error as exc:\n+                raise ValueError(f\"Invalid regex pattern '{value}' in {key}: {exc}\")\n+\n     # Load plugins if specified in the config file\n     if \"load-plugins\" in config_data:\n         linter.load_plugin_modules(utils._splitstrip(config_data[\"load-plugins\"]))\n@@ -76,7 +85,7 @@ def _config_initialization(\n     unrecognized_options: list[str] = []\n     for opt in parsed_args_list:\n         if opt.startswith(\"--\"):\n-            if len(opt) > 2:\n+            if len(opt) > 2 and not opt[2:].startswith(\"regex=\"):\n                 unrecognized_options.append(opt[2:])\n         elif opt.startswith(\"-\"):\n             unrecognized_options.append(opt[1:])\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/config/test_regex_han_character_config.py b/tests/config/test_regex_han_character_config.py\nnew file mode 100644\nindex 0000000..ffe85e4\n--- /dev/null\n+++ b/tests/config/test_regex_han_character_config.py\n@@ -0,0 +1,25 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for handling of Han character class in regex patterns.\"\"\"\n+\n+import re\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+\n+\n+class TestHanCharacterRegex:\n+    \"\"\"Test handling of Han character class in regex patterns.\"\"\"\n+\n+    def test_han_character_regex_error(self) -> None:\n+        \"\"\"Test that using \\p{Han} in regex pattern raises appropriate error.\"\"\"\n+        with pytest.raises(re.error, match=r\"bad escape \\\\p at position 1\"):\n+            Run(\n+                [\n+                    \"--function-rgx=[\\\\p{Han}a-z_][\\\\p{Han}a-z0-9_]{2,30}$\",\n+                    \"--disable=all\",\n+                ]\n+            )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/config/test_regex_han_character_config_inverted.py b/tests/config/test_regex_han_character_config_inverted.py\nnew file mode 100644\nindex 0000000..fb984cf\n--- /dev/null\n+++ b/tests/config/test_regex_han_character_config_inverted.py\n@@ -0,0 +1,33 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for handling of Han character class in regex patterns.\"\"\"\n+\n+import re\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+\n+\n+class TestHanCharacterRegex:\n+    \"\"\"Test handling of Han character class in regex patterns.\"\"\"\n+\n+    def test_han_character_regex_error(self) -> None:\n+        \"\"\"Test that using \\p{Han} in regex pattern should not raise an error.\"\"\"\n+        try:\n+            Run(\n+                [\n+                    \"--function-rgx=[\\\\p{Han}a-z_][\\\\p{Han}a-z0-9_]{2,30}$\",\n+                    \"--disable=all\",\n+                ]\n+            )\n+            # If we reach here without an error, the test should fail\n+            raise AssertionError(\"__BUG__HERE__\")\n+        except re.error as e:\n+            if \"bad escape \\\\p at position 1\" in str(e):\n+                # This is the bug we're looking for, so fail the test\n+                raise AssertionError(\"__BUG__HERE__\")\n+            # If it's some other re.error, let it propagate\n+            raise\n\\ No newline at end of file\n",
  "num_sent_chars": 4213464,
  "num_received_chars": 77725,
  "elapsed_time": 1156.7350962162018,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}