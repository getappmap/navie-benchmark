{
  "instance_id": "mwaskom__seaborn-3190",
  "edit_test_file": null,
  "code_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc..aefd525 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -342,10 +342,18 @@ class ContinuousBase(Scale):\n \n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n-            if new.norm is None:\n-                vmin, vmax = data.min(), data.max()\n+            # Convert boolean data to numeric for normalization\n+            if data.dtype == bool:\n+                numeric_data = data.astype(int)\n+                if new.norm is None:\n+                    vmin, vmax = numeric_data.min(), numeric_data.max()\n+                else:\n+                    vmin, vmax = new.norm\n             else:\n-                vmin, vmax = new.norm\n+                if new.norm is None:\n+                    vmin, vmax = data.min(), data.max()\n+                else:\n+                    vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n             a = forward(vmin)\n             b = forward(vmax) - forward(vmin)\n@@ -356,12 +364,24 @@ class ContinuousBase(Scale):\n         else:\n             normalize = vmin = vmax = None\n \n-        new._pipeline = [\n-            axis.convert_units,\n-            forward,\n-            normalize,\n-            prop.get_mapping(new, data)\n-        ]\n+        # Add boolean conversion to numeric at the start of the pipeline if needed\n+        if data.dtype == bool:\n+            def bool_to_numeric(x):\n+                return x.astype(int) if hasattr(x, 'astype') else int(x)\n+            new._pipeline = [\n+                bool_to_numeric,\n+                axis.convert_units,\n+                forward,\n+                normalize,\n+                prop.get_mapping(new, data)\n+            ]\n+        else:\n+            new._pipeline = [\n+                axis.convert_units,\n+                forward,\n+                normalize,\n+                prop.get_mapping(new, data)\n+            ]\n \n         def spacer(x):\n             x = x.dropna().unique()\n",
  "code_files": null,
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 6207003,
  "num_received_chars": 70436,
  "elapsed_time": 1097.9294617176056,
  "lint_repair_count": 7,
  "test_generation_attempts": 9,
  "code_generation_attempts": 5,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}