{
  "instance_id": "django__django-11905",
  "edit_test_file": "tests/lookup/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 14ae00a..5404f0e 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -56,9 +56,17 @@ def prepare_lookup_value(key, value):\n     # if key ends with __in, split parameter into separate values\n     if key.endswith('__in'):\n         value = value.split(',')\n-    # if key ends with __isnull, special case '' and the string literals 'false' and '0'\n+    # if key ends with __isnull, ensure boolean value\n     elif key.endswith('__isnull'):\n-        value = value.lower() not in ('', 'false', '0')\n+        if isinstance(value, bool):\n+            return value\n+        if isinstance(value, str):\n+            value = value.lower()\n+            if value in ('true', 't', 'yes', 'y', 'on', '1'):\n+                return True\n+            if value in ('false', 'f', 'no', 'n', 'off', '0', ''):\n+                return False\n+        raise ValueError('__isnull lookup requires a boolean value or valid string representation.')\n     return value\n \n \n",
  "code_files": null,
  "test_patch": "diff --git a/tests/lookup/test_isnull_validation.py b/tests/lookup/test_isnull_validation.py\nnew file mode 100644\nindex 0000000..11f35ee\n--- /dev/null\n+++ b/tests/lookup/test_isnull_validation.py\n@@ -0,0 +1,50 @@\n+from django.test import TestCase\n+from datetime import datetime\n+\n+from .models import Article, Author\n+\n+\n+class IsNullValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create an author\n+        cls.author = Author.objects.create(name='Author 1', alias='a1')\n+        \n+        # Create articles - one with author, one without\n+        cls.article_with_author = Article.objects.create(\n+            headline='Article 1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=cls.author,\n+            slug='a1',\n+        )\n+        cls.article_without_author = Article.objects.create(\n+            headline='Article 2', \n+            pub_date=datetime(2005, 7, 27),\n+            author=None,\n+            slug='a2',\n+        )\n+\n+    def test_isnull_accepts_non_boolean_values(self):\n+        \"\"\"\n+        __isnull currently accepts non-boolean values which is undesirable.\n+        The lookup treats truthy/falsey values as boolean equivalents.\n+        \"\"\"\n+        # These should return the same results despite not being boolean values\n+        articles_with_string = Article.objects.filter(author__isnull='yes')  \n+        articles_with_number = Article.objects.filter(author__isnull=1)\n+        articles_with_true = Article.objects.filter(author__isnull=True)\n+\n+        # All queries find the article without an author\n+        self.assertEqual(list(articles_with_string), [self.article_without_author])\n+        self.assertEqual(list(articles_with_number), [self.article_without_author])\n+        self.assertEqual(list(articles_with_true), [self.article_without_author])\n+\n+        # Empty string and zero are treated as False\n+        articles_with_empty_string = Article.objects.filter(author__isnull='')\n+        articles_with_zero = Article.objects.filter(author__isnull=0)\n+        articles_with_false = Article.objects.filter(author__isnull=False)\n+\n+        # All queries find the article with an author\n+        self.assertEqual(list(articles_with_empty_string), [self.article_with_author])\n+        self.assertEqual(list(articles_with_zero), [self.article_with_author])\n+        self.assertEqual(list(articles_with_false), [self.article_with_author])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/lookup/test_isnull_validation_inverted.py b/tests/lookup/test_isnull_validation_inverted.py\nnew file mode 100644\nindex 0000000..566930d\n--- /dev/null\n+++ b/tests/lookup/test_isnull_validation_inverted.py\n@@ -0,0 +1,65 @@\n+from django.test import TestCase\n+from datetime import datetime\n+\n+from .models import Article, Author\n+\n+\n+class IsNullValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create an author\n+        cls.author = Author.objects.create(name='Author 1', alias='a1')\n+        \n+        # Create articles - one with author, one without\n+        cls.article_with_author = Article.objects.create(\n+            headline='Article 1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=cls.author,\n+            slug='a1',\n+        )\n+        cls.article_without_author = Article.objects.create(\n+            headline='Article 2', \n+            pub_date=datetime(2005, 7, 27),\n+            author=None,\n+            slug='a2',\n+        )\n+\n+    def test_isnull_rejects_non_boolean_values(self):\n+        \"\"\"\n+        __isnull should only accept boolean values.\n+        Using non-boolean values should raise an error.\n+        \"\"\"\n+        # Test with string value - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull='yes'))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Test with number value - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull=1))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Test with empty string - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull=''))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Test with zero - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull=0))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Verify that boolean values still work correctly\n+        articles_with_true = Article.objects.filter(author__isnull=True)\n+        articles_with_false = Article.objects.filter(author__isnull=False)\n+\n+        self.assertEqual(list(articles_with_true), [self.article_without_author])\n+        self.assertEqual(list(articles_with_false), [self.article_with_author])\n\\ No newline at end of file\n",
  "num_sent_chars": 2093987,
  "num_received_chars": 30180,
  "elapsed_time": 369.02200293540955,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}