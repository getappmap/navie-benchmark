{
  "instance_id": "django__django-11620",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/core/handlers/exception.py b/django/core/handlers/exception.py\nindex 66443ce..93a8d87 100644\n--- a/django/core/handlers/exception.py\n+++ b/django/core/handlers/exception.py\n@@ -40,10 +40,16 @@ def convert_exception_to_response(get_response):\n \n def response_for_exception(request, exc):\n     if isinstance(exc, Http404):\n+        resolver = get_resolver(get_urlconf())\n         if settings.DEBUG:\n-            response = debug.technical_404_response(request, exc)\n+            # Check if exception was raised during URL pattern matching\n+            if getattr(exc, 'tried', None) is None and hasattr(request, 'path_info'):\n+                # Create a technical 404 response with URL pattern debug info\n+                response = debug.technical_404_response(request, exc)\n+            else:\n+                response = debug.technical_404_response(request, exc)\n         else:\n-            response = get_exception_response(request, get_resolver(get_urlconf()), 404, exc)\n+            response = get_exception_response(request, resolver, 404, exc)\n \n     elif isinstance(exc, PermissionDenied):\n         response = get_exception_response(request, get_resolver(get_urlconf()), 403, exc)\n",
  "code_files": null,
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 3310596,
  "num_received_chars": 38655,
  "elapsed_time": 636.0964493751526,
  "lint_repair_count": 1,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}