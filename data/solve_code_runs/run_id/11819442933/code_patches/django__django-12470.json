{
  "instance_id": "django__django-12470",
  "edit_test_file": "tests/model_inheritance_regress/tests.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex b2a6062..863701f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -144,7 +144,7 @@ class ModelBase(type):\n                 # non-abstract parent (unless an ABC comes before it in the\n                 # method resolution order).\n                 if not hasattr(meta, 'ordering'):\n-                    new_class._meta.ordering = base_meta.ordering\n+                    new_class._meta.ordering = list(base_meta.ordering) if base_meta.ordering else []\n                 if not hasattr(meta, 'get_latest_by'):\n                     new_class._meta.get_latest_by = base_meta.get_latest_by\n \n",
  "code_files": null,
  "test_patch": "diff --git a/tests/model_inheritance_regress/test_inherited_model_ordering.py b/tests/model_inheritance_regress/test_inherited_model_ordering.py\nnew file mode 100644\nindex 0000000..fe9c19f\n--- /dev/null\n+++ b/tests/model_inheritance_regress/test_inherited_model_ordering.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+\n+class ParentWithOrdering(models.Model):\n+    class Meta:\n+        ordering = ['-pk']\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class ChildWithOrdering(ParentWithOrdering):\n+    class Meta:\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class InheritedModelOrderingTests(TestCase):\n+    \"\"\"\n+    Test that inherited models correctly inherit ordering from their parent's Meta class.\n+    Regression test for #12470.\n+    \"\"\"\n+    def test_inherited_model_ordering(self):\n+        \"\"\"\n+        Test that Child model inherits '-pk' ordering from Parent model but\n+        actually orders by 'pk ASC' instead.\n+        \"\"\"\n+        # Create some test objects\n+        child1 = ChildWithOrdering.objects.create()\n+        child2 = ChildWithOrdering.objects.create()\n+        child3 = ChildWithOrdering.objects.create()\n+\n+        # Get the raw query being executed\n+        query = ChildWithOrdering.objects.all().query\n+        query_str = str(query)\n+\n+        # The query should contain ORDER BY \"id\" ASC even though parent specifies -pk\n+        self.assertIn('\"ID\" ASC', query_str.upper())\n+\n+        # Verify the actual results come back in ascending order despite parent's -pk\n+        results = list(ChildWithOrdering.objects.all())\n+        self.assertEqual(results, [child1, child2, child3])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_inheritance_regress/test_inherited_model_ordering_inverted.py b/tests/model_inheritance_regress/test_inherited_model_ordering_inverted.py\nnew file mode 100644\nindex 0000000..809e049\n--- /dev/null\n+++ b/tests/model_inheritance_regress/test_inherited_model_ordering_inverted.py\n@@ -0,0 +1,44 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+\n+class ParentWithOrdering(models.Model):\n+    class Meta:\n+        ordering = ['-pk']\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class ChildWithOrdering(ParentWithOrdering):\n+    class Meta:\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class InheritedModelOrderingTests(TestCase):\n+    \"\"\"\n+    Test that inherited models correctly inherit ordering from their parent's Meta class.\n+    Tests that Child model properly inherits '-pk' ordering from Parent model.\n+    \"\"\"\n+    def test_inherited_model_ordering(self):\n+        \"\"\"\n+        Test that Child model correctly inherits '-pk' ordering from Parent model.\n+        Should order by 'pk DESC' as specified in the parent's Meta class.\n+        \"\"\"\n+        # Create some test objects\n+        child1 = ChildWithOrdering.objects.create()\n+        child2 = ChildWithOrdering.objects.create()\n+        child3 = ChildWithOrdering.objects.create()\n+\n+        # Get the raw query being executed\n+        query = ChildWithOrdering.objects.all().query\n+        query_str = str(query)\n+\n+        # The query should contain ORDER BY \"id\" DESC as specified in parent's Meta\n+        if '\"ID\" ASC' in query_str.upper():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Verify the results come back in descending order as specified in parent's Meta\n+        results = list(ChildWithOrdering.objects.all())\n+        expected_order = [child3, child2, child1]  # Descending order by pk\n+        \n+        if results != expected_order:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2852067,
  "num_received_chars": 32547,
  "elapsed_time": 442.2328004837036,
  "lint_repair_count": 0,
  "test_generation_attempts": 5,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}