{
  "instance_id": "sphinx-doc__sphinx-7975",
  "edit_test_file": "tests/test_environment_indexentries.py",
  "code_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af2139..e82dc5a 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,7 +108,10 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            # Put all non-alphabetic entries at the front by prefixing with chr(0)\n+            if not (lckey[0:1].isalpha() or lckey.startswith('_')):\n+                lckey = chr(0) + lckey\n+            else:\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n@@ -164,12 +167,12 @@ class IndexEntries:\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n-                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n-                    return letter\n-                else:\n-                    # get all other symbols under one heading\n+                # Normalize the first character for consistent comparison\n+                first_char = unicodedata.normalize('NFD', k[0])[0].upper()\n+                # Group all non-alphabetic characters under 'Symbols'\n+                if not (first_char.isalpha() or first_char == '_'):\n                     return _('Symbols')\n+                return first_char\n             else:\n                 return v[2]\n         return [(key_, list(group))\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/test_index_symbols.py b/tests/test_index_symbols.py\nnew file mode 100644\nindex 0000000..590a1bd\n--- /dev/null\n+++ b/tests/test_index_symbols.py\n@@ -0,0 +1,44 @@\n+\"\"\"\n+    test_index_symbols\n+    ~~~~~~~~~~~~~~~~~\n+\n+    Test the handling of special characters in index entries.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from sphinx.environment.adapters.indexentries import IndexEntries\n+from sphinx.testing import restructuredtext\n+\n+\n+@pytest.mark.sphinx('html', freshenv=True)\n+def test_duplicate_symbol_sections(app):\n+    text = (\".. index:: @test\\n\"\n+            \".. index:: \u00a3test\\n\"\n+            \".. index:: \u2190test\\n\"\n+            \".. index:: atest\\n\"\n+            \".. index:: btest\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+\n+    # Verify there are two \"Symbols\" sections in the index\n+    symbol_sections = [section for section, _ in index if section == 'Symbols']\n+    assert len(symbol_sections) == 2\n+\n+    # First Symbols section should contain @ entries\n+    first_symbols = index[0]\n+    assert first_symbols[0] == 'Symbols'\n+    assert '@test' in str(first_symbols[1])\n+\n+    # Second Symbols section should contain \u00a3 and \u2190 entries\n+    # It should appear after normal entries\n+    last_symbols = index[-1]\n+    assert last_symbols[0] == 'Symbols'\n+    assert '\u00a3test' in str(last_symbols[1]) or '\u2190test' in str(last_symbols[1])\n+\n+    # Verify normal entries are between the two Symbols sections\n+    middle_section = index[1]\n+    assert middle_section[0] in ['A', 'B']  # Should be a normal alphabetical section\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_index_symbols_inverted.py b/tests/test_index_symbols_inverted.py\nnew file mode 100644\nindex 0000000..8d3e3e6\n--- /dev/null\n+++ b/tests/test_index_symbols_inverted.py\n@@ -0,0 +1,49 @@\n+\"\"\"\n+    test_index_symbols\n+    ~~~~~~~~~~~~~~~~~\n+\n+    Test the handling of special characters in index entries.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from sphinx.environment.adapters.indexentries import IndexEntries\n+from sphinx.testing import restructuredtext\n+\n+\n+@pytest.mark.sphinx('html', freshenv=True)\n+def test_duplicate_symbol_sections(app):\n+    text = (\".. index:: @test\\n\"\n+            \".. index:: \u00a3test\\n\"\n+            \".. index:: \u2190test\\n\"\n+            \".. index:: atest\\n\"\n+            \".. index:: btest\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+\n+    # Count \"Symbols\" sections in the index\n+    symbol_sections = [section for section, _ in index if section == 'Symbols']\n+    \n+    # Test should fail if there are multiple \"Symbols\" sections\n+    if len(symbol_sections) > 1:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Verify that all special characters are in the same Symbols section\n+    symbols_section = None\n+    for section, entries in index:\n+        if section == 'Symbols':\n+            symbols_section = entries\n+            break\n+\n+    assert symbols_section is not None\n+    entries_str = str(symbols_section)\n+    assert '@test' in entries_str\n+    assert '\u00a3test' in entries_str\n+    assert '\u2190test' in entries_str\n+\n+    # Verify normal entries are in their appropriate alphabetical sections\n+    normal_entries = [section for section, _ in index if section in ['A', 'B']]\n+    assert len(normal_entries) > 0\n\\ No newline at end of file\n",
  "num_sent_chars": 1657843,
  "num_received_chars": 22843,
  "elapsed_time": 345.87381052970886,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}