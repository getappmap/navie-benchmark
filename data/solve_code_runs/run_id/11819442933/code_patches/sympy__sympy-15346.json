{
  "instance_id": "sympy__sympy-15346",
  "edit_test_file": "sympy/core/tests/test_evalf.py",
  "code_patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex 9d93972..b61765c 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -1985,9 +1985,14 @@ def pow_cos_sin(a, two):\n             if (ca and cb and sa and sb):\n                 if isinstance(ca, sa.func) is not isinstance(cb, sb.func):\n                     return\n-                args = {j.args for j in (ca, sa)}\n-                if not all(i.args in args for i in (cb, sb)):\n+                args = {j.args[0] for j in (ca, sa)}\n+                if not all(i.args[0] in args for i in (cb, sb)):\n                     return\n+                # Handle rational arguments by ensuring they're properly compared\n+                if all(arg.is_Rational for arg in args):\n+                    args = {arg.as_numer_denom() for arg in args}\n+                    if not all(i.args[0].as_numer_denom() in args for i in (cb, sb)):\n+                        return\n                 return gcd, n1, n2, ca.args[0], sa.args[0], isinstance(ca, sa.func)\n         if ca and sa or cb and sb or \\\n             two and (ca is None and sa is None or cb is None and sb is None):\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/core/tests/test_trig_rational_simplify.py b/sympy/core/tests/test_trig_rational_simplify.py\nnew file mode 100644\nindex 0000000..8e2a3d1\n--- /dev/null\n+++ b/sympy/core/tests/test_trig_rational_simplify.py\n@@ -0,0 +1,25 @@\n+from sympy import (sin, cos, acos, Matrix, Rational, symbols, simplify)\n+\n+def test_trig_rational_simplify():\n+    # Symbolic expressions can be simplified\n+    x, y = symbols('x y', real=True)\n+    symbolic_expr = sin(x)*sin(y) + cos(x)*cos(y)\n+    assert symbolic_expr.simplify() == cos(x - y)\n+\n+    # But rational arguments cannot be simplified\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r = t1.dot(t2)\n+    \n+    # Test that dot product with rational arguments remains unsimplified\n+    expected = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert r == expected\n+    assert r.simplify() == expected  # Simplification doesn't change the expression\n+\n+    # Test direct expression also remains unsimplified\n+    direct_expr = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert direct_expr.simplify() == direct_expr\n+\n+    # Test that acos of the expression also remains unsimplified\n+    acos_expr = acos(direct_expr)\n+    assert acos_expr.simplify() == acos_expr\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_trig_rational_simplify_inverted.py b/sympy/core/tests/test_trig_rational_simplify_inverted.py\nnew file mode 100644\nindex 0000000..304a83a\n--- /dev/null\n+++ b/sympy/core/tests/test_trig_rational_simplify_inverted.py\n@@ -0,0 +1,33 @@\n+from sympy import (sin, cos, acos, Matrix, Rational, symbols, simplify)\n+\n+def test_trig_rational_simplify():\n+    # Symbolic expressions can be simplified\n+    x, y = symbols('x y', real=True)\n+    symbolic_expr = sin(x)*sin(y) + cos(x)*cos(y)\n+    assert symbolic_expr.simplify() == cos(x - y)\n+\n+    # Rational arguments should also be simplified\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r = t1.dot(t2)\n+    \n+    # Test that dot product with rational arguments can be simplified\n+    expected = cos(Rational(1, 50) - Rational(1, 25))\n+    simplified = r.simplify()\n+    if simplified == r:  # If simplification doesn't change the expression\n+        raise AssertionError(\"__BUG__HERE__\")\n+    assert simplified == expected\n+\n+    # Test direct expression can be simplified\n+    direct_expr = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    simplified = direct_expr.simplify()\n+    if simplified == direct_expr:  # If simplification doesn't change the expression\n+        raise AssertionError(\"__BUG__HERE__\")\n+    assert simplified == cos(Rational(1, 50) - Rational(1, 25))\n+\n+    # Test that acos of the expression can be simplified\n+    acos_expr = acos(direct_expr)\n+    simplified = acos_expr.simplify()\n+    if simplified == acos_expr:  # If simplification doesn't change the expression\n+        raise AssertionError(\"__BUG__HERE__\")\n+    assert simplified == Rational(1, 50) - Rational(1, 25)\n\\ No newline at end of file\n",
  "num_sent_chars": 5060738,
  "num_received_chars": 104232,
  "elapsed_time": 1398.4943187236786,
  "lint_repair_count": 4,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}