{
  "instance_id": "scikit-learn__scikit-learn-12471",
  "edit_test_file": "sklearn/preprocessing/tests/test_encoders.py",
  "code_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 1e05aba..1c26cc9 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -111,6 +111,17 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n                     Xi = Xi.copy()\n+                    \n+                    # For string dtypes, need to ensure no truncation occurs\n+                    if Xi.dtype.kind in ('U', 'S'):\n+                        # Get max length of replacement value\n+                        repl_len = len(self.categories_[i][0])\n+                        # Get max length of current array\n+                        curr_len = Xi.dtype.itemsize // Xi.dtype.alignment\n+                        # Convert to object dtype if replacement is too long\n+                        if repl_len > curr_len:\n+                            Xi = Xi.astype(object)\n+                    \n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_onehot_string_handling.py b/sklearn/preprocessing/tests/test_onehot_string_handling.py\nnew file mode 100644\nindex 0000000..9f0a0b2\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_onehot_string_handling.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from sklearn.utils.testing import assert_raises\n+\n+\n+def test_onehot_string_handle_unknown():\n+    \"\"\"Test that OneHotEncoder raises ValueError when handling unknown strings\n+    of shorter length than the fitted categories.\n+    \n+    This test verifies the issue where OneHotEncoder with handle_unknown='ignore'\n+    fails when trying to transform string data where unknown values are shorter\n+    than the fitted categories, causing memory/buffer issues.\n+    \"\"\"\n+    # Create training data with long strings\n+    X_train = np.array(['22', '333', '4444', '11111111']).reshape(-1, 1)\n+    \n+    # Create test data with an unknown value that's shorter than fitted categories\n+    X_test = np.array(['55555', '22']).reshape(-1, 1)\n+    \n+    # Initialize encoder with handle_unknown='ignore'\n+    enc = OneHotEncoder(dtype=bool, handle_unknown='ignore')\n+    \n+    # Fit the encoder\n+    enc.fit(X_train)\n+    \n+    # This should raise ValueError due to memory handling of string lengths\n+    with pytest.raises(ValueError, match=\"contains previously unseen labels\"):\n+        enc.transform(X_test)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/preprocessing/tests/test_onehot_string_handling_inverted.py b/sklearn/preprocessing/tests/test_onehot_string_handling_inverted.py\nnew file mode 100644\nindex 0000000..bd59861\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_onehot_string_handling_inverted.py\n@@ -0,0 +1,39 @@\n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+\n+\n+def test_onehot_string_handle_unknown():\n+    \"\"\"Test that OneHotEncoder should handle unknown strings of shorter length\n+    than the fitted categories when handle_unknown='ignore' is set.\n+    \n+    This test verifies the bug where OneHotEncoder with handle_unknown='ignore'\n+    fails when trying to transform string data where unknown values are shorter\n+    than the fitted categories, causing memory/buffer issues.\n+    \"\"\"\n+    # Create training data with long strings\n+    X_train = np.array(['22', '333', '4444', '11111111']).reshape(-1, 1)\n+    \n+    # Create test data with an unknown value that's shorter than fitted categories\n+    X_test = np.array(['55555', '22']).reshape(-1, 1)\n+    \n+    # Initialize encoder with handle_unknown='ignore'\n+    enc = OneHotEncoder(dtype=bool, handle_unknown='ignore')\n+    \n+    # Fit the encoder\n+    enc.fit(X_train)\n+    \n+    # Transform the test data\n+    try:\n+        result = enc.transform(X_test)\n+    except ValueError as e:\n+        if \"contains previously unseen labels\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        raise e\n+\n+    # If we get here, the bug is not present\n+    # The expected result should be a 2x4 sparse matrix\n+    # with all False except at position (1,0) for the known '22' value\n+    expected_shape = (2, len(enc.categories_[0]))\n+    assert result.shape == expected_shape, \\\n+        f\"Expected shape {expected_shape}, got {result.shape}\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2432668,
  "num_received_chars": 30980,
  "elapsed_time": 410.55152654647827,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}