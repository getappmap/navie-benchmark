{
  "instance_id": "scikit-learn__scikit-learn-14092",
  "edit_test_file": "sklearn/neighbors/tests/test_nca.py",
  "code_patch": "diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py\nindex 1d278b6..450fc9e 100644\n--- a/sklearn/neighbors/nca.py\n+++ b/sklearn/neighbors/nca.py\n@@ -13,6 +13,7 @@ from warnings import warn\n import numpy as np\n import sys\n import time\n+import numbers\n from scipy.optimize import minimize\n from ..utils.extmath import softmax\n from ..metrics import pairwise_distances\n@@ -299,7 +300,7 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n \n         # Check the preferred dimensionality of the projected space\n         if self.n_components is not None:\n-            check_scalar(self.n_components, 'n_components', int, 1)\n+            check_scalar(self.n_components, 'n_components', (numbers.Integral, np.integer), 1)\n \n             if self.n_components > X.shape[1]:\n                 raise ValueError('The preferred dimensionality of the '\n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/neighbors/tests/test_nca_parameter_validation.py b/sklearn/neighbors/tests/test_nca_parameter_validation.py\nnew file mode 100644\nindex 0000000..809dfc1\n--- /dev/null\n+++ b/sklearn/neighbors/tests/test_nca_parameter_validation.py\n@@ -0,0 +1,38 @@\n+\"\"\"\n+Testing parameter validation in NeighborhoodComponentsAnalysis\n+\"\"\"\n+\n+import numpy as np\n+from sklearn.pipeline import Pipeline\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.utils.testing import assert_raises\n+from sklearn.utils.testing import assert_raise_message\n+\n+\n+def test_nca_gridsearch_parameter_validation():\n+    \"\"\"Test that NCA raises TypeError when used in GridSearchCV with numpy integer\n+    types and non-float values for parameters.\n+    \"\"\"\n+    # Generate random data\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(100, 10)\n+    y = rng.randint(0, 2, size=100)\n+\n+    # Create pipeline with NCA and KNN\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+\n+    # Parameter grid with problematic types\n+    param_grid = {\n+        'nca__tol': [0.1, 0.5, 1],  # 1 is int, not float\n+        'nca__n_components': np.arange(1, 4)  # numpy.int64, not int\n+    }\n+\n+    # Create GridSearchCV\n+    gs = GridSearchCV(estimator=pipe, param_grid=param_grid, cv=2)\n+\n+    # Assert that TypeError is raised during fit\n+    assert_raises(TypeError, gs.fit, X, y)\n",
  "test_inverted_patch": "diff --git a/sklearn/neighbors/tests/test_nca_parameter_validation_inverted.py b/sklearn/neighbors/tests/test_nca_parameter_validation_inverted.py\nnew file mode 100644\nindex 0000000..66b5875\n--- /dev/null\n+++ b/sklearn/neighbors/tests/test_nca_parameter_validation_inverted.py\n@@ -0,0 +1,40 @@\n+\"\"\"\n+Testing parameter validation in NeighborhoodComponentsAnalysis\n+\"\"\"\n+\n+import numpy as np\n+from sklearn.pipeline import Pipeline\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.utils.testing import assert_raises\n+\n+\n+def test_nca_gridsearch_parameter_validation():\n+    \"\"\"Test that NCA should accept numpy integer types and non-float values\n+    for parameters when used in GridSearchCV.\n+    \"\"\"\n+    # Generate random data\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(100, 10)\n+    y = rng.randint(0, 2, size=100)\n+\n+    # Create pipeline with NCA and KNN\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+\n+    # Parameter grid with numpy types\n+    param_grid = {\n+        'nca__tol': [0.1, 0.5, 1],  # 1 is int, not float\n+        'nca__n_components': np.arange(1, 4)  # numpy.int64, not int\n+    }\n+\n+    # Create GridSearchCV\n+    gs = GridSearchCV(estimator=pipe, param_grid=param_grid, cv=2)\n+\n+    try:\n+        gs.fit(X, y)\n+    except TypeError:\n+        # If TypeError is raised, this means the bug is present\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1532316,
  "num_received_chars": 19526,
  "elapsed_time": 295.0389440059662,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}