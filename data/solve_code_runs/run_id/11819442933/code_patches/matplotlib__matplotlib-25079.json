{
  "instance_id": "matplotlib__matplotlib-25079",
  "edit_test_file": "lib/matplotlib/tests/test_colorbar.py",
  "code_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 966eb07..129589b 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -506,11 +506,29 @@ class Colorbar:\n         _log.debug('colorbar update normal %r %r', mappable.norm, self.norm)\n         self.mappable = mappable\n         self.set_alpha(mappable.get_alpha())\n+        \n+        # Store current vmin/vmax before updating the norm\n+        old_vmin = getattr(self.norm, 'vmin', None)\n+        old_vmax = getattr(self.norm, 'vmax', None)\n+        \n+        # If we have valid old limits and the new norm isn't scaled yet,\n+        # we'll use these to initialize the new norm\n+        if old_vmin is not None and old_vmax is not None and not mappable.norm.scaled():\n+            mappable.norm.vmin = old_vmin\n+            mappable.norm.vmax = old_vmax\n         self.cmap = mappable.cmap\n         if mappable.norm != self.norm:\n+            # Ensure the new norm is properly initialized before assigning\n+            if not mappable.norm.scaled():\n+                mappable.norm.autoscale_None(mappable.get_array())\n+            \n+            # Now safe to update our norm\n             self.norm = mappable.norm\n             self._reset_locator_formatter_scale()\n \n+        # Ensure the norm is properly scaled before drawing\n+        if not self.norm.scaled():\n+            self.norm.autoscale_None(mappable.get_array())\n         self._draw_all()\n         if isinstance(self.mappable, contour.ContourSet):\n             CS = self.mappable\n",
  "code_files": null,
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar_norm_update.py b/lib/matplotlib/tests/test_colorbar_norm_update.py\nnew file mode 100644\nindex 0000000..8457e47\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_colorbar_norm_update.py\n@@ -0,0 +1,26 @@\n+import numpy as np\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm\n+\n+def test_colorbar_lognorm_update_fails():\n+    \"\"\"Test that updating to LogNorm after colorbar creation raises ValueError.\"\"\"\n+    # Create random data between 1 and 5 (all positive, valid for LogNorm)\n+    rng = np.random.default_rng(0)\n+    img = rng.uniform(1, 5, (25, 25))\n+    \n+    # Create plot with default norm\n+    fig, ax = plt.subplots()\n+    plot = ax.pcolormesh(img)\n+    fig.colorbar(plot, ax=ax)\n+    \n+    # Set explicit vmin/vmax that should be valid for LogNorm\n+    vmin, vmax = 1, 5\n+    \n+    # Attempt to update the norm to LogNorm\n+    with pytest.raises(ValueError, match=\"Invalid vmin or vmax\"):\n+        plot.norm = LogNorm(vmin, vmax)\n+        plot.autoscale()\n+        fig.canvas.draw()\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_colorbar_norm_update_inverted.py b/lib/matplotlib/tests/test_colorbar_norm_update_inverted.py\nnew file mode 100644\nindex 0000000..cb5466a\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_colorbar_norm_update_inverted.py\n@@ -0,0 +1,31 @@\n+import numpy as np\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm\n+\n+def test_colorbar_lognorm_update():\n+    \"\"\"Test that updating to LogNorm after colorbar creation works correctly.\"\"\"\n+    # Create random data between 1 and 5 (all positive, valid for LogNorm)\n+    rng = np.random.default_rng(0)\n+    img = rng.uniform(1, 5, (25, 25))\n+    \n+    # Create plot with default norm\n+    fig, ax = plt.subplots()\n+    plot = ax.pcolormesh(img)\n+    fig.colorbar(plot, ax=ax)\n+    \n+    # Set explicit vmin/vmax that should be valid for LogNorm\n+    vmin, vmax = 1, 5\n+    \n+    # Attempt to update the norm to LogNorm\n+    try:\n+        plot.norm = LogNorm(vmin, vmax)\n+        plot.autoscale()\n+        fig.canvas.draw()\n+    except ValueError as e:\n+        if \"Invalid vmin or vmax\" in str(e):\n+            plt.close(fig)\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        raise  # Re-raise if it's a different ValueError\n+        \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "num_sent_chars": 1836828,
  "num_received_chars": 23133,
  "elapsed_time": 440.1222813129425,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}