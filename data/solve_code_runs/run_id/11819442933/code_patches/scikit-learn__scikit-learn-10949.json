{
  "instance_id": "scikit-learn__scikit-learn-10949",
  "edit_test_file": "sklearn/preprocessing/tests/test_encoders.py",
  "code_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex fe1f723..d29fc79 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -461,13 +461,20 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n     # store whether originally we wanted numeric dtype\n     dtype_numeric = isinstance(dtype, six.string_types) and dtype == \"numeric\"\n \n-    dtype_orig = getattr(array, \"dtype\", None)\n-    if not hasattr(dtype_orig, 'kind'):\n-        # not a data type (e.g. a column named dtype in a pandas DataFrame)\n-        dtype_orig = None\n+    # Handle pandas DataFrame case\n+    if hasattr(array, 'iloc'):  # DataFrame check\n+        dtype_orig = array.dtypes.iloc[0] if array.dtypes.nunique() == 1 else None\n+    else:\n+        dtype_orig = getattr(array, \"dtype\", None)\n+        if not hasattr(dtype_orig, 'kind'):\n+            # not a data type (e.g. a column named dtype in a pandas DataFrame)\n+            dtype_orig = None\n \n     if dtype_numeric:\n-        if dtype_orig is not None and dtype_orig.kind == \"O\":\n+        if dtype_orig is not None and (\n+            getattr(dtype_orig, 'kind', None) == \"O\" or\n+            (hasattr(array, 'iloc') and dtype_orig == np.dtype('object'))\n+        ):\n             # if input is object, convert to float.\n             dtype = np.float64\n         else:\n@@ -573,10 +580,17 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                              % (n_features, shape_repr, ensure_min_features,\n                                 context))\n \n-    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n-        msg = (\"Data with input dtype %s was converted to %s%s.\"\n-               % (dtype_orig, array.dtype, context))\n-        warnings.warn(msg, DataConversionWarning)\n+    if warn_on_dtype and dtype_orig is not None:\n+        # For DataFrame, compare with the final array dtype\n+        if hasattr(array_orig, 'iloc'):\n+            if array.dtype != dtype_orig:\n+                msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                       % (dtype_orig, array.dtype, context))\n+                warnings.warn(msg, DataConversionWarning)\n+        elif array.dtype != dtype_orig:\n+            msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                   % (dtype_orig, array.dtype, context))\n+            warnings.warn(msg, DataConversionWarning)\n \n     if copy and np.may_share_memory(array, array_orig):\n         array = np.array(array, dtype=dtype, order=order)\n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_dataframe_dtype_warning.py b/sklearn/preprocessing/tests/test_dataframe_dtype_warning.py\nnew file mode 100644\nindex 0000000..d289214\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_dataframe_dtype_warning.py\n@@ -0,0 +1,22 @@\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.utils.testing import assert_no_warnings\n+from sklearn.utils.validation import check_array\n+\n+def test_dataframe_no_dtype_warning():\n+    \"\"\"Test that warn_on_dtype has no effect with pandas DataFrame input.\n+    \n+    This test verifies the issue where check_array does not raise a \n+    DataConversionWarning when a DataFrame with object dtype is converted \n+    to float64, even when warn_on_dtype=True.\n+    \"\"\"\n+    # Create DataFrame with object dtype\n+    df = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)\n+    \n+    # This should raise a warning but currently doesn't\n+    # Using assert_no_warnings to verify the bug exists\n+    checked = assert_no_warnings(check_array, df, warn_on_dtype=True)\n+    \n+    # Verify the conversion still happened\n+    assert checked.dtype == np.float64\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/preprocessing/tests/test_dataframe_dtype_warning_inverted.py b/sklearn/preprocessing/tests/test_dataframe_dtype_warning_inverted.py\nnew file mode 100644\nindex 0000000..c986362\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_dataframe_dtype_warning_inverted.py\n@@ -0,0 +1,29 @@\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.utils.testing import assert_warns\n+from sklearn.utils.validation import check_array\n+from sklearn.utils.validation import DataConversionWarning\n+\n+def test_dataframe_dtype_warning():\n+    \"\"\"Test that warn_on_dtype properly warns with pandas DataFrame input.\n+    \n+    This test verifies that check_array should raise a DataConversionWarning\n+    when a DataFrame with object dtype is converted to float64 and \n+    warn_on_dtype=True. The test will fail if no warning is raised,\n+    indicating the presence of the bug.\n+    \"\"\"\n+    # Create DataFrame with object dtype\n+    df = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)\n+    \n+    # Attempt to capture the warning - this should raise DataConversionWarning\n+    try:\n+        checked = check_array(df, warn_on_dtype=True)\n+        # If we get here without a warning, the bug is present\n+        raise AssertionError(\"__BUG__HERE__\")\n+    except DataConversionWarning:\n+        # This is the expected behavior - warning was raised\n+        pass\n+    \n+    # Verify the conversion still happened\n+    assert checked.dtype == np.float64\n\\ No newline at end of file\n",
  "num_sent_chars": 6628546,
  "num_received_chars": 115121,
  "elapsed_time": 1324.7840461730957,
  "lint_repair_count": 9,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}