{
  "instance_id": "sympy__sympy-20322",
  "edit_test_file": "sympy/core/tests/test_sympify.py",
  "code_patch": "diff --git a/sympy/functions/elementary/integers.py b/sympy/functions/elementary/integers.py\nindex fe1e71e..c3c8054 100644\n--- a/sympy/functions/elementary/integers.py\n+++ b/sympy/functions/elementary/integers.py\n@@ -355,7 +355,19 @@ def __le__(self, other):\n \n @dispatch(ceiling, Basic)  # type:ignore\n def _eval_is_eq(lhs, rhs): # noqa:F811\n-    return is_eq(lhs.rewrite(floor), rhs) or is_eq(lhs.rewrite(frac),rhs)\n+    # First check if expressions are exactly equal\n+    if lhs == rhs:\n+        return True\n+    \n+    # Check equality through equivalent forms\n+    if is_eq(lhs.rewrite(floor), rhs) or is_eq(lhs.rewrite(frac), rhs):\n+        return True\n+        \n+    # Preserve original form for expressions with coefficients\n+    if any(arg.is_Rational for arg in lhs.args + rhs.args):\n+        return None\n+        \n+    return None\n \n class frac(Function):\n     r\"\"\"Represents the fractional part of x\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/core/tests/test_ceiling_evaluation.py b/sympy/core/tests/test_ceiling_evaluation.py\nnew file mode 100644\nindex 0000000..7b45b74\n--- /dev/null\n+++ b/sympy/core/tests/test_ceiling_evaluation.py\n@@ -0,0 +1,16 @@\n+from sympy import sympify, Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_ceiling_evaluation_inconsistency():\n+    x = Symbol('x')\n+    expr = '4*ceiling(x/4 - 3/4)'\n+    \n+    # With evaluate=False\n+    result1 = sympify(expr, evaluate=False).simplify()\n+    # With evaluate=True \n+    result2 = sympify(expr, evaluate=True).simplify()\n+\n+    # Verify the inconsistency exists\n+    assert result1 != result2\n+    assert str(result1) == '4*ceiling(x/4) - 3'\n+    assert str(result2) == '4*ceiling(x/4 - 3/4)'\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_ceiling_evaluation_inverted.py b/sympy/core/tests/test_ceiling_evaluation_inverted.py\nnew file mode 100644\nindex 0000000..b04beb3\n--- /dev/null\n+++ b/sympy/core/tests/test_ceiling_evaluation_inverted.py\n@@ -0,0 +1,19 @@\n+from sympy import sympify, Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_ceiling_evaluation_inconsistency():\n+    x = Symbol('x')\n+    expr = '4*ceiling(x/4 - 3/4)'\n+    \n+    # With evaluate=False\n+    result1 = sympify(expr, evaluate=False).simplify()\n+    # With evaluate=True \n+    result2 = sympify(expr, evaluate=True).simplify()\n+\n+    # The test should fail if results are different\n+    if result1 != result2:\n+        raise AssertionError(\"__BUG__HERE__\")\n+        \n+    # These assertions should never be reached if the bug is present\n+    assert str(result1) == str(result2)\n+    assert str(result1) == '4*ceiling(x/4 - 3/4)'\n\\ No newline at end of file\n",
  "num_sent_chars": 6765869,
  "num_received_chars": 90982,
  "elapsed_time": 1184.1967644691467,
  "lint_repair_count": 9,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}