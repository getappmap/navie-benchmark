{
  "instance_id": "astropy__astropy-7746",
  "edit_test_file": "astropy/wcs/tests/test_wcs.py",
  "code_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2..85a5714 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1218,6 +1218,18 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n+            # Handle empty input arrays\n+            if any(x.size == 0 for x in axes):\n+                # Create empty output arrays matching input shape\n+                if ra_dec_order:\n+                    # For ra_dec_order, always return 2 arrays\n+                    return (np.array([], dtype=np.float64).reshape(axes[0].shape),\n+                           np.array([], dtype=np.float64).reshape(axes[0].shape))\n+                else:\n+                    # Return empty arrays for each output dimension\n+                    return [np.array([], dtype=np.float64).reshape(axes[0].shape)\n+                           for i in range(self.naxis)]\n+\n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n \n             if ra_dec_order and sky == 'input':\n@@ -1235,6 +1247,11 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n+            # Handle empty input array\n+            if xy.size == 0:\n+                # Return empty array with correct shape and number of dimensions\n+                return np.array([], dtype=np.float64).reshape((0, self.naxis))\n+\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n             result = func(xy, origin)\n",
  "code_files": null,
  "test_patch": "diff --git a/astropy/wcs/tests/test_empty_arrays.py b/astropy/wcs/tests/test_empty_arrays.py\nnew file mode 100644\nindex 0000000..72068f3\n--- /dev/null\n+++ b/astropy/wcs/tests/test_empty_arrays.py\n@@ -0,0 +1,31 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+from ... import wcs\n+from ...utils.data import get_pkg_data_filename\n+from ...tests.helper import raises\n+\n+def test_empty_arrays():\n+    \"\"\"\n+    Test that passing empty arrays to WCS transformations raises an error.\n+    This should be fixed to return empty arrays instead.\n+    \"\"\"\n+    # Load a test WCS\n+    filename = get_pkg_data_filename('data/sip.fits')\n+    w = wcs.WCS(filename)\n+    \n+    # Test passing empty lists\n+    with pytest.raises(wcs.InconsistentAxisTypesError):\n+        w.wcs_pix2world([], [], 0)\n+        \n+    # Test passing empty numpy arrays \n+    with pytest.raises(wcs.InconsistentAxisTypesError):\n+        w.wcs_pix2world(np.array([]), np.array([]), 0)\n+        \n+    # Test passing empty arrays with correct shape\n+    empty_array = np.array([]).reshape((0, 2))\n+    with pytest.raises(wcs.InconsistentAxisTypesError):\n+        w.wcs_pix2world(empty_array, 0)\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 4785379,
  "num_received_chars": 54706,
  "elapsed_time": 781.433126449585,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}