{
  "instance_id": "scikit-learn__scikit-learn-13584",
  "edit_test_file": "sklearn/utils/tests/test_pprint.py",
  "code_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686db..209c74b 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -66,6 +66,7 @@ BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n from inspect import signature\n import pprint\n from collections import OrderedDict\n+import numpy as np\n \n from ..base import BaseEstimator\n from .._config import get_config\n@@ -95,12 +96,39 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n-                not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n+        if _values_differ(v, init_params[k]):\n             filtered_params[k] = v\n     return filtered_params\n \n \n+def _values_differ(value1, value2):\n+    \"\"\"Helper function to compare two parameter values, handling numpy arrays.\n+    \n+    Parameters\n+    ----------\n+    value1 : object\n+        First value to compare\n+    value2 : object\n+        Second value to compare\n+        \n+    Returns\n+    -------\n+    bool\n+        True if values are different, False if they are equal\n+    \"\"\"\n+    if value1 is value2:\n+        return False\n+    \n+    if isinstance(value1, np.ndarray) or isinstance(value2, np.ndarray):\n+        try:\n+            return not np.array_equal(value1, value2, equal_nan=True)\n+        except (ValueError, TypeError):\n+            return True\n+            \n+    return (value1 != value2 and \n+            not (is_scalar_nan(value1) and is_scalar_nan(value2)))\n+\n+\n class _EstimatorPrettyPrinter(pprint.PrettyPrinter):\n     \"\"\"Pretty Printer class for estimator objects.\n \n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/utils/tests/test_print_changed_only.py b/sklearn/utils/tests/test_print_changed_only.py\nnew file mode 100644\nindex 0000000..c94cecb\n--- /dev/null\n+++ b/sklearn/utils/tests/test_print_changed_only.py\n@@ -0,0 +1,18 @@\n+import pytest\n+import numpy as np\n+from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+\n+def test_print_changed_only_numpy_array():\n+    \"\"\"Test that print_changed_only works with numpy array parameters.\n+    \n+    This test verifies that using print_changed_only=True with an estimator\n+    that has a numpy array parameter does not raise a ValueError about\n+    ambiguous truth value of array.\n+    \"\"\"\n+    set_config(print_changed_only=True)\n+    clf = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    \n+    with pytest.raises(ValueError, match=\"The truth value of an array with more than one element is ambiguous\"):\n+        repr(clf)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/utils/tests/test_print_changed_only_inverted.py b/sklearn/utils/tests/test_print_changed_only_inverted.py\nnew file mode 100644\nindex 0000000..48e380a\n--- /dev/null\n+++ b/sklearn/utils/tests/test_print_changed_only_inverted.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+\n+def test_print_changed_only_numpy_array():\n+    \"\"\"Test that print_changed_only works with numpy array parameters.\n+    \n+    This test verifies that using print_changed_only=True with an estimator\n+    that has a numpy array parameter should work without raising ValueError\n+    about ambiguous truth value of array.\n+    \"\"\"\n+    set_config(print_changed_only=True)\n+    clf = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    \n+    try:\n+        repr_str = repr(clf)\n+    except ValueError as e:\n+        if \"The truth value of an array with more than one element is ambiguous\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here, the bug is fixed\n+    assert isinstance(repr_str, str), \"repr should return a string\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1337249,
  "num_received_chars": 13620,
  "elapsed_time": 259.0063807964325,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}