{
  "instance_id": "scikit-learn__scikit-learn-25570",
  "edit_test_file": "sklearn/tests/test_pipeline.py",
  "code_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 94d9465..6be05ab 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -894,6 +894,9 @@ def make_pipeline(*steps, memory=None, verbose=False):\n \n \n def _transform_one(transformer, X, y, weight, **fit_params):\n+    # Handle empty feature sets by returning empty array with correct shape\n+    if hasattr(X, \"shape\") and X.shape[1] == 0:\n+        return np.zeros((X.shape[0], 0))\n     res = transformer.transform(X)\n     # if we have a weight for this transformer, multiply output\n     if weight is None:\n@@ -910,6 +913,12 @@ def _fit_transform_one(\n     be multiplied by ``weight``.\n     \"\"\"\n     with _print_elapsed_time(message_clsname, message):\n+        # Handle empty feature sets\n+        if hasattr(X, \"shape\") and X.shape[1] == 0:\n+            if hasattr(transformer, \"fit\"):\n+                transformer.fit(X, y, **fit_params)\n+            return np.zeros((X.shape[0], 0)), transformer\n+\n         if hasattr(transformer, \"fit_transform\"):\n             res = transformer.fit_transform(X, y, **fit_params)\n         else:\n@@ -1280,7 +1289,12 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         config = _get_output_config(\"transform\", self)\n         if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n             pd = check_pandas_support(\"transform\")\n-            return pd.concat(Xs, axis=1)\n+            # Filter out empty DataFrames while preserving column order\n+            non_empty_dfs = [X for X in Xs if X.shape[1] > 0]\n+            if not non_empty_dfs:\n+                # Return empty DataFrame with correct number of rows\n+                return pd.DataFrame(index=range(Xs[0].shape[0]))\n+            return pd.concat(non_empty_dfs, axis=1)\n \n         if any(sparse.issparse(f) for f in Xs):\n             Xs = sparse.hstack(Xs).tocsr()\n",
  "code_files": null,
  "test_patch": "diff --git a/sklearn/tests/test_column_transformer_empty_features.py b/sklearn/tests/test_column_transformer_empty_features.py\nnew file mode 100644\nindex 0000000..27d85be\n--- /dev/null\n+++ b/sklearn/tests/test_column_transformer_empty_features.py\n@@ -0,0 +1,39 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+from sklearn.compose import ColumnTransformer\n+from sklearn.impute import SimpleImputer\n+from sklearn.pipeline import Pipeline\n+from sklearn.preprocessing import RobustScaler\n+\n+\n+def test_column_transformer_empty_features_pandas_output():\n+    \"\"\"Test that ColumnTransformer raises ValueError when handling transformers with no features\n+    while using pandas output.\n+    \"\"\"\n+    # Create sample data\n+    X = pd.DataFrame(\n+        data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\n+        columns=[\"a\", \"b\", \"c\", \"d\"]\n+    )\n+    y = np.array([0, 1])\n+\n+    # Define features\n+    categorical_features = []  # Empty features list\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+\n+    # Create pipeline with ColumnTransformer\n+    model_preprocessing = (\"preprocessing\", ColumnTransformer([\n+        ('categorical', 'passthrough', categorical_features),\n+        ('numerical', Pipeline([\n+            (\"scaler\", RobustScaler()),\n+            (\"imputer\", SimpleImputer(strategy=\"median\"))\n+        ]), numerical_features),\n+    ], remainder='drop'))\n+\n+    # Create pipeline with pandas output\n+    pipeline = Pipeline([model_preprocessing]).set_output(transform=\"pandas\")\n+\n+    # The pipeline should raise ValueError when fitting with empty features\n+    with pytest.raises(ValueError, match=\"Length mismatch: Expected axis has 3 elements, new values have 0 elements\"):\n+        pipeline.fit(X, y)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_column_transformer_empty_features_inverted.py b/sklearn/tests/test_column_transformer_empty_features_inverted.py\nnew file mode 100644\nindex 0000000..a695485\n--- /dev/null\n+++ b/sklearn/tests/test_column_transformer_empty_features_inverted.py\n@@ -0,0 +1,46 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+from sklearn.compose import ColumnTransformer\n+from sklearn.impute import SimpleImputer\n+from sklearn.pipeline import Pipeline\n+from sklearn.preprocessing import RobustScaler\n+\n+\n+def test_column_transformer_empty_features_pandas_output():\n+    \"\"\"Test that ColumnTransformer should handle transformers with no features\n+    while using pandas output.\n+    \"\"\"\n+    # Create sample data\n+    X = pd.DataFrame(\n+        data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\n+        columns=[\"a\", \"b\", \"c\", \"d\"]\n+    )\n+    y = np.array([0, 1])\n+\n+    # Define features\n+    categorical_features = []  # Empty features list\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+\n+    # Create pipeline with ColumnTransformer\n+    model_preprocessing = (\"preprocessing\", ColumnTransformer([\n+        ('categorical', 'passthrough', categorical_features),\n+        ('numerical', Pipeline([\n+            (\"scaler\", RobustScaler()),\n+            (\"imputer\", SimpleImputer(strategy=\"median\"))\n+        ]), numerical_features),\n+    ], remainder='drop'))\n+\n+    # Create pipeline with pandas output\n+    pipeline = Pipeline([model_preprocessing]).set_output(transform=\"pandas\")\n+\n+    # The pipeline should handle empty features gracefully\n+    try:\n+        pipeline.fit(X, y)\n+    except ValueError as e:\n+        if \"Length mismatch: Expected axis has 3 elements, new values have 0 elements\" in str(e):\n+            raise ValueError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here, the bug is not present\n+    pipeline.transform(X)\n\\ No newline at end of file\n",
  "num_sent_chars": 3689576,
  "num_received_chars": 66348,
  "elapsed_time": 1070.0039064884186,
  "lint_repair_count": 3,
  "test_generation_attempts": 1,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}