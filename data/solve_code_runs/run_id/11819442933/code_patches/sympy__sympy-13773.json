{
  "instance_id": "sympy__sympy-13773",
  "edit_test_file": "sympy/matrices/expressions/tests/test_matexpr.py",
  "code_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 379a291..887d07a 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1973,13 +1973,20 @@ def __div__(self, other):\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n-        return self.__mul__(other)\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            raise TypeError(\"Scalar operands are not allowed, use '*' instead\")\n+        return self._eval_matrix_mul(other)\n \n     @call_highest_priority('__rmul__')\n     def __mul__(self, other):\n         \"\"\"Return self*other where other is either a scalar or a matrix\n         of compatible dimensions.\n \n+        Examples\n+        ========\n+        of compatible dimensions.\n+\n         Examples\n         ========\n \n@@ -2068,7 +2075,10 @@ def __radd__(self, other):\n \n     @call_highest_priority('__matmul__')\n     def __rmatmul__(self, other):\n-        return self.__rmul__(other)\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            raise TypeError(\"Scalar operands are not allowed, use '*' instead\")\n+        return self._eval_matrix_rmul(other)\n \n     @call_highest_priority('__mul__')\n     def __rmul__(self, other):\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/matrices/expressions/tests/test_matrix_operator_validation.py b/sympy/matrices/expressions/tests/test_matrix_operator_validation.py\nnew file mode 100644\nindex 0000000..f649805\n--- /dev/null\n+++ b/sympy/matrices/expressions/tests/test_matrix_operator_validation.py\n@@ -0,0 +1,24 @@\n+from sympy import Matrix, MatrixSymbol, Integer\n+from sympy.utilities.pytest import raises\n+from sympy.core import Symbol\n+\n+def test_matmul_scalar_operands():\n+    # Test that scalar @ matrix currently works but should raise an error\n+    A = Matrix([[1, 2], [3, 4]])\n+    n = Integer(2)\n+    \n+    # This currently works but should raise an error\n+    result = n @ A\n+    assert result == Matrix([[2, 4], [6, 8]])\n+\n+    # Also test with symbolic scalar\n+    x = Symbol('x')\n+    result = x @ A\n+    assert result == Matrix([[x, 2*x], [3*x, 4*x]])\n+\n+    # The behavior should match NumPy which raises ValueError for scalar operands\n+    # TODO: These operations should raise ValueError once fixed\n+    # with raises(ValueError):\n+    #     result = 2 @ A\n+    # with raises(ValueError): \n+    #     result = x @ A\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/matrices/expressions/tests/test_matrix_operator_validation_inverted.py b/sympy/matrices/expressions/tests/test_matrix_operator_validation_inverted.py\nnew file mode 100644\nindex 0000000..c5ae385\n--- /dev/null\n+++ b/sympy/matrices/expressions/tests/test_matrix_operator_validation_inverted.py\n@@ -0,0 +1,28 @@\n+from sympy import Matrix, MatrixSymbol, Integer\n+from sympy.utilities.pytest import raises\n+from sympy.core import Symbol\n+\n+def test_matmul_scalar_operands():\n+    # Test that scalar @ matrix should raise an error\n+    A = Matrix([[1, 2], [3, 4]])\n+    n = Integer(2)\n+    \n+    # This should raise an error for scalar @ matrix\n+    try:\n+        result = n @ A\n+        raise AssertionError(\"__BUG__HERE__\")\n+    except ValueError:\n+        pass\n+\n+    # Test with symbolic scalar\n+    x = Symbol('x')\n+    try:\n+        result = x @ A\n+        raise AssertionError(\"__BUG__HERE__\")\n+    except ValueError:\n+        pass\n+\n+    # Verify that matrix @ matrix still works correctly\n+    B = Matrix([[2, 3], [1, 2]])\n+    result = A @ B\n+    assert result == Matrix([[4, 7], [10, 17]])\n\\ No newline at end of file\n",
  "num_sent_chars": 6980231,
  "num_received_chars": 88781,
  "elapsed_time": 1622.6095402240753,
  "lint_repair_count": 8,
  "test_generation_attempts": 6,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}