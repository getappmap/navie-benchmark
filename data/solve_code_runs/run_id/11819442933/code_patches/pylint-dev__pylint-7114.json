{
  "instance_id": "pylint-dev__pylint-7114",
  "edit_test_file": "tests/lint/unittest_expand_modules.py",
  "code_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex bc227d2..5d677e9 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,14 +588,15 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n-                skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n-                    if any(root.startswith(s) for s in skip_subtrees):\n-                        # Skip subtree of already discovered package.\n-                        continue\n+            if os.path.isdir(something):\n+                # Check if there's a module with same name as directory\n+                same_name_module = os.path.isfile(something + \".py\")\n+                if not same_name_module and not os.path.isfile(os.path.join(something, \"__init__.py\")):\n+                    skip_subtrees: list[str] = []\n+                    for root, _, files in os.walk(something):\n+                        if any(root.startswith(s) for s in skip_subtrees):\n+                            # Skip subtree of already discovered package.\n+                            continue\n \n                     if _is_ignored_file(\n                         root,\n@@ -773,20 +774,21 @@ class PyLinter(\n \n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+        # Handle directories with same-name modules before expansion\n+        expanded_modules = []\n+        for module in modules:\n+            if os.path.isdir(module) and os.path.isfile(module + \".py\"):\n+                expanded_modules.append(module + \".py\")\n+            else:\n+                expanded_modules.append(module)\n         result, errors = expand_modules(\n-            modules,\n+            expanded_modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n             self._ignore_paths,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n-            key = error[\"key\"]\n-            self.set_current_module(modname)\n-            if key == \"fatal\":\n-                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n-            self.add_message(key, args=message)\n-        return result\n \n     def set_current_module(\n         self, modname: str | None, filepath: str | None = None\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/lint/test_module_name_collision.py b/tests/lint/test_module_name_collision.py\nnew file mode 100644\nindex 0000000..2eb7b14\n--- /dev/null\n+++ b/tests/lint/test_module_name_collision.py\n@@ -0,0 +1,51 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test that linting fails when a module contains a module of the same name.\"\"\"\n+\n+from __future__ import annotations\n+\n+import os\n+import tempfile\n+\n+import pytest\n+\n+from pylint.lint.run import Run\n+from pylint.testutils import create_files\n+\n+\n+def test_module_name_collision() -> None:\n+    \"\"\"Test that linting fails when a module contains a module of the same name.\"\"\"\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        # Create test files structure:\n+        # tmpdir/\n+        # \u2514\u2500\u2500 a/\n+        #     \u251c\u2500\u2500 a.py\n+        #     \u2514\u2500\u2500 b.py\n+        create_files(\n+            [\n+                \"a/a.py\",  # Empty file\n+                \"a/b.py\",  # Empty file\n+            ],\n+            tmpdir,\n+        )\n+\n+        # Run pylint on directory 'a'\n+        with pytest.raises(SystemExit) as exc:\n+            Run([os.path.join(tmpdir, \"a\")])\n+\n+        # Check that pylint failed with error code 1 (fatal error)\n+        assert exc.value.code == 1\n+\n+        # Create a reference file to test against\n+        expected_output = \"error while code parsing: Unable to load file a/__init__.py\"\n+\n+        # Verify the same test passes if we rename a.py to c.py\n+        os.rename(\n+            os.path.join(tmpdir, \"a\", \"a.py\"),\n+            os.path.join(tmpdir, \"a\", \"c.py\"),\n+        )\n+\n+        # This should not raise an exception\n+        Run([os.path.join(tmpdir, \"a\")], exit=False)\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 3104808,
  "num_received_chars": 53031,
  "elapsed_time": 591.945588350296,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}