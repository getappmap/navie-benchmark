{
  "instance_id": "matplotlib__matplotlib-26011",
  "edit_test_file": "lib/matplotlib/tests/test_axes.py",
  "code_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29..5ea0794 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1232,14 +1232,23 @@ class Axis(martist.Artist):\n \n         self.set_view_interval(v0, v1, ignore=True)\n         # Mark viewlims as no longer stale without triggering an autoscale.\n-        for ax in self._get_shared_axes():\n+        shared_axes = self._get_shared_axes()\n+        for ax in shared_axes:\n             ax._stale_viewlims[name] = False\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n         if emit:\n+            # Emit the callback on the primary axis\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n-            # Call all of the other axes that are shared with this one\n+            # Emit callbacks on all shared axes, even when propagating changes\n+            for other in shared_axes:\n+                if other is not self.axes:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n+            # Now propagate the limit change to shared axes without re-emitting\n+            for other in shared_axes:\n+                if other is not self.axes:\n+                    other._axis_map[name]._set_lim(v0, v1, emit=False, auto=auto)\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n                     other._axis_map[name]._set_lim(\n",
  "code_files": null,
  "test_patch": "diff --git a/lib/matplotlib/tests/test_shared_axis_callbacks.py b/lib/matplotlib/tests/test_shared_axis_callbacks.py\nnew file mode 100644\nindex 0000000..e3dc278\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_shared_axis_callbacks.py\n@@ -0,0 +1,25 @@\n+import pytest\n+import matplotlib.pyplot as plt\n+\n+\n+def test_shared_axis_callbacks():\n+    # Setup\n+    fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n+    \n+    # Track number of times callback is called\n+    callback_count = 0\n+    def on_xlim_changed(event):\n+        nonlocal callback_count\n+        callback_count += 1\n+    \n+    # Register callback on second axis\n+    ax2.callbacks.connect('xlim_changed', on_xlim_changed)\n+    \n+    # Change limits on first axis\n+    ax1.set_xlim(0, 10)\n+    \n+    # Verify callback was not called\n+    assert callback_count == 0, \"xlim_changed callback was incorrectly emitted on shared axis\"\n+    \n+    # Verify the limits were actually changed\n+    assert ax2.get_xlim() == (0, 10), \"Limits were not properly shared between axes\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_shared_axis_callbacks_inverted.py b/lib/matplotlib/tests/test_shared_axis_callbacks_inverted.py\nnew file mode 100644\nindex 0000000..2b81016\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_shared_axis_callbacks_inverted.py\n@@ -0,0 +1,27 @@\n+import pytest\n+import matplotlib.pyplot as plt\n+\n+\n+def test_shared_axis_callbacks():\n+    # Setup\n+    fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n+    \n+    # Track number of times callback is called\n+    callback_count = 0\n+    def on_xlim_changed(event):\n+        nonlocal callback_count\n+        callback_count += 1\n+    \n+    # Register callback on second axis\n+    ax2.callbacks.connect('xlim_changed', on_xlim_changed)\n+    \n+    # Change limits on first axis\n+    ax1.set_xlim(0, 10)\n+    \n+    # The test should now FAIL when the bug is present\n+    # (when callback is not called on shared axis)\n+    if callback_count == 0:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Verify the limits were actually changed\n+    assert ax2.get_xlim() == (0, 10), \"Limits were not properly shared between axes\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2934917,
  "num_received_chars": 40500,
  "elapsed_time": 935.7931289672852,
  "lint_repair_count": 3,
  "test_generation_attempts": 1,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}