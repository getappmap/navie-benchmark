{
  "instance_id": "sympy__sympy-21627",
  "edit_test_file": "sympy/functions/elementary/tests/test_complexes.py",
  "code_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 892e19c..054c932 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -265,9 +265,9 @@ def _eval_is_finite(self):\n         return arg.is_finite\n \n     def _eval_is_zero(self):\n-        arg = self.args[0]\n-        if arg.is_zero:\n-            return True\n+        # cosh(x) is never zero for any complex x\n+        # cosh(x) = (e^x + e^(-x))/2 which is never zero\n+        return False\n \n \n class cosh(HyperbolicFunction):\n",
  "code_files": null,
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_recursion_limits.py b/sympy/functions/elementary/tests/test_recursion_limits.py\nnew file mode 100644\nindex 0000000..127e52a\n--- /dev/null\n+++ b/sympy/functions/elementary/tests/test_recursion_limits.py\n@@ -0,0 +1,7 @@\n+from sympy import sympify, Symbol, I\n+from sympy.testing.pytest import raises\n+\n+def test_cosh_recursion_error():\n+    g = Symbol('g')\n+    expr = sympify(\"cosh(acos(-i + acosh(-g + i)))\")\n+    raises(RecursionError, lambda: expr.is_zero)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/functions/elementary/tests/test_recursion_limits_inverted.py b/sympy/functions/elementary/tests/test_recursion_limits_inverted.py\nnew file mode 100644\nindex 0000000..306ae82\n--- /dev/null\n+++ b/sympy/functions/elementary/tests/test_recursion_limits_inverted.py\n@@ -0,0 +1,13 @@\n+from sympy import sympify, Symbol, I\n+\n+def test_cosh_recursion_error():\n+    g = Symbol('g')\n+    expr = sympify(\"cosh(acos(-i + acosh(-g + i)))\")\n+    \n+    try:\n+        result = expr.is_zero\n+    except RecursionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # If we get here without a RecursionError, the bug is fixed\n+    # and the test should pass\n\\ No newline at end of file\n",
  "num_sent_chars": 5818009,
  "num_received_chars": 93363,
  "elapsed_time": 1171.7428855895996,
  "lint_repair_count": 8,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}