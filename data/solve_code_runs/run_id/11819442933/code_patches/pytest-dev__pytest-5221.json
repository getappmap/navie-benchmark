{
  "instance_id": "pytest-dev__pytest-5221",
  "edit_test_file": "testing/python/fixtures.py",
  "code_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 3773578..98c5a2a 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -1260,9 +1260,9 @@ def _show_fixtures_per_test(config, session):\n             return\n         if verbose > 0:\n             bestrel = get_best_relpath(fixture_def.func)\n-            funcargspec = \"{} -- {}\".format(argname, bestrel)\n+            funcargspec = \"{} [{} scope] -- {}\".format(argname, fixture_def.scope, bestrel)\n         else:\n-            funcargspec = argname\n+            funcargspec = \"{} [{} scope]\".format(argname, fixture_def.scope)\n         tw.line(funcargspec, green=True)\n         fixture_doc = fixture_def.func.__doc__\n         if fixture_doc:\n",
  "code_files": null,
  "test_patch": "diff --git a/testing/python/test_fixture_scope_display.py b/testing/python/test_fixture_scope_display.py\nnew file mode 100644\nindex 0000000..97c6027\n--- /dev/null\n+++ b/testing/python/test_fixture_scope_display.py\n@@ -0,0 +1,45 @@\n+def test_fixture_scope_not_shown(testdir):\n+    \"\"\"\n+    Test that verifies fixture scopes are not shown in --fixtures output.\n+    The test passes if scopes are not displayed, which is the current behavior\n+    being reported as an issue.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.fixture(scope=\"session\")\n+        def session_fix():\n+            return 1\n+\n+        @pytest.fixture(scope=\"module\")\n+        def module_fix():\n+            return 2\n+\n+        @pytest.fixture(scope=\"class\")\n+        def class_fix():\n+            return 3\n+\n+        @pytest.fixture(scope=\"function\")\n+        def function_fix():\n+            return 4\n+\n+        def test_dummy():\n+            pass\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest(\"--fixtures\")\n+    output = result.stdout.str()\n+\n+    # Verify that fixture names are shown but their scopes are not\n+    assert \"session_fix\" in output\n+    assert \"module_fix\" in output\n+    assert \"class_fix\" in output\n+    assert \"function_fix\" in output\n+\n+    # Verify that scope information is not shown\n+    assert \"scope: session\" not in output\n+    assert \"scope: module\" not in output\n+    assert \"scope: class\" not in output\n+    assert \"scope: function\" not in output\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/python/test_fixture_scope_display_inverted.py b/testing/python/test_fixture_scope_display_inverted.py\nnew file mode 100644\nindex 0000000..05e2104\n--- /dev/null\n+++ b/testing/python/test_fixture_scope_display_inverted.py\n@@ -0,0 +1,56 @@\n+def test_fixture_scope_should_be_shown(testdir):\n+    \"\"\"\n+    Test that verifies fixture scopes are shown in --fixtures output.\n+    The test fails if scopes are not displayed, which is the current behavior\n+    being reported as an issue.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.fixture(scope=\"session\")\n+        def session_fix():\n+            return 1\n+\n+        @pytest.fixture(scope=\"module\")\n+        def module_fix():\n+            return 2\n+\n+        @pytest.fixture(scope=\"class\")\n+        def class_fix():\n+            return 3\n+\n+        @pytest.fixture(scope=\"function\")\n+        def function_fix():\n+            return 4\n+\n+        def test_dummy():\n+            pass\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest(\"--fixtures\")\n+    output = result.stdout.str()\n+\n+    # Verify that fixture names are shown\n+    assert \"session_fix\" in output\n+    assert \"module_fix\" in output\n+    assert \"class_fix\" in output\n+    assert \"function_fix\" in output\n+\n+    # Verify that scope information is shown - this should fail with the current behavior\n+    missing_scopes = []\n+    expected_scopes = [\n+        (\"scope: session\", \"session_fix\"),\n+        (\"scope: module\", \"module_fix\"),\n+        (\"scope: class\", \"class_fix\"),\n+        (\"scope: function\", \"function_fix\")\n+    ]\n+\n+    for scope_text, fixture_name in expected_scopes:\n+        if scope_text not in output:\n+            missing_scopes.append(f\"{scope_text} for {fixture_name}\")\n+\n+    if missing_scopes:\n+        missing_scopes_str = \", \".join(missing_scopes)\n+        raise AssertionError(f\"__BUG__HERE__ - Missing fixture scope information: {missing_scopes_str}\")\n\\ No newline at end of file\n",
  "num_sent_chars": 6902078,
  "num_received_chars": 98001,
  "elapsed_time": 1166.3217051029205,
  "lint_repair_count": 7,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}