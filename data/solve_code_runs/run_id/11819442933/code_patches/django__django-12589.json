{
  "instance_id": "django__django-12589",
  "edit_test_file": "tests/queries/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 63ca817..e3e1020 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -9,6 +9,7 @@ from django.db.models.constants import LOOKUP_SEP\n from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Value\n from django.db.models.functions import Cast\n from django.db.models.query_utils import Q, select_related_descend\n+from django.db.models.expressions import Subquery\n from django.db.models.sql.constants import (\n     CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,\n )\n@@ -117,6 +118,11 @@ class SQLCompiler:\n             # by reference.\n             if expr in ref_sources:\n                 continue\n+            # For Subquery annotations, preserve the full expression\n+            if isinstance(expr, Subquery):\n+                expressions.append(expr)\n+                continue\n+            # For other expressions, get their component columns\n             cols = expr.get_group_by_cols()\n             for col in cols:\n                 expressions.append(col)\n@@ -185,8 +191,13 @@ class SQLCompiler:\n                 )\n             }\n             aliases = {expr.alias for expr in pks}\n+            # Preserve Subquery expressions and apply PK optimization to others\n             expressions = [\n-                expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases\n+                expr for expr in expressions if (\n+                    isinstance(expr, Subquery) or\n+                    expr in pks or\n+                    getattr(expr, 'alias', None) not in aliases\n+                )\n             ]\n         return expressions\n \n",
  "code_files": null,
  "test_patch": "diff --git a/tests/queries/test_group_by_annotation.py b/tests/queries/test_group_by_annotation.py\nnew file mode 100644\nindex 0000000..510456f\n--- /dev/null\n+++ b/tests/queries/test_group_by_annotation.py\n@@ -0,0 +1,58 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count, Q, OuterRef, Subquery\n+from django.db.utils import OperationalError\n+\n+\n+class A(models.Model):\n+    pass\n+\n+\n+class B(models.Model):\n+    pass\n+\n+\n+class AB(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name=\"ab_a\")\n+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name=\"ab_b\")\n+    status = models.IntegerField()\n+\n+\n+class C(models.Model):\n+    a = models.ForeignKey(\n+        A,\n+        null=True,\n+        blank=True,\n+        on_delete=models.SET_NULL,\n+        related_name=\"c\",\n+    )\n+    status = models.IntegerField()\n+\n+\n+class GroupByAnnotationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.a1 = A.objects.create()\n+        cls.b1 = B.objects.create()\n+        AB.objects.create(a=cls.a1, b=cls.b1, status=1)\n+        C.objects.create(a=cls.a1, status=1)\n+\n+    def test_group_by_subquery_annotation(self):\n+        \"\"\"\n+        Test that using values() and annotate() with a Subquery containing \n+        a field name that exists in multiple models raises an ambiguous column error.\n+        \"\"\"\n+        ab_query = AB.objects.filter(a=OuterRef(\"pk\"), b=self.b1)\n+        filter_conditions = Q(pk=self.a1.pk) | Q(ab_a__b=self.b1)\n+        \n+        query = A.objects.filter(filter_conditions).annotate(\n+            status=Subquery(ab_query.values(\"status\")),\n+            c_count=Count(\"c\"),\n+        )\n+\n+        # This should raise an OperationalError due to ambiguous column name\n+        with self.assertRaises(OperationalError) as cm:\n+            list(query.values(\"status\").annotate(total_count=Count(\"status\")))\n+        \n+        self.assertIn(\"ambiguous column name: status\", str(cm.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_group_by_annotation_inverted.py b/tests/queries/test_group_by_annotation_inverted.py\nnew file mode 100644\nindex 0000000..fd6910b\n--- /dev/null\n+++ b/tests/queries/test_group_by_annotation_inverted.py\n@@ -0,0 +1,60 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count, Q, OuterRef, Subquery\n+from django.db.utils import OperationalError\n+\n+\n+class A(models.Model):\n+    pass\n+\n+\n+class B(models.Model):\n+    pass\n+\n+\n+class AB(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name=\"ab_a\")\n+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name=\"ab_b\")\n+    status = models.IntegerField()\n+\n+\n+class C(models.Model):\n+    a = models.ForeignKey(\n+        A,\n+        null=True,\n+        blank=True,\n+        on_delete=models.SET_NULL,\n+        related_name=\"c\",\n+    )\n+    status = models.IntegerField()\n+\n+\n+class GroupByAnnotationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.a1 = A.objects.create()\n+        cls.b1 = B.objects.create()\n+        AB.objects.create(a=cls.a1, b=cls.b1, status=1)\n+        C.objects.create(a=cls.a1, status=1)\n+\n+    def test_group_by_subquery_annotation(self):\n+        \"\"\"\n+        Test that using values() and annotate() with a Subquery containing \n+        a field name that exists in multiple models should not raise an ambiguous\n+        column error. If it does, it indicates a regression.\n+        \"\"\"\n+        ab_query = AB.objects.filter(a=OuterRef(\"pk\"), b=self.b1)\n+        filter_conditions = Q(pk=self.a1.pk) | Q(ab_a__b=self.b1)\n+        \n+        query = A.objects.filter(filter_conditions).annotate(\n+            status=Subquery(ab_query.values(\"status\")),\n+            c_count=Count(\"c\"),\n+        )\n+\n+        try:\n+            list(query.values(\"status\").annotate(total_count=Count(\"status\")))\n+        except OperationalError as e:\n+            if \"ambiguous column name: status\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise e\n\\ No newline at end of file\n",
  "num_sent_chars": 6498968,
  "num_received_chars": 126915,
  "elapsed_time": 1494.300987482071,
  "lint_repair_count": 9,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}