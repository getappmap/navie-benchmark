{
  "instance_id": "django__django-15996",
  "edit_test_file": "tests/migrations/test_writer.py",
  "code_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6..85e1d51 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,41 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        \n+        # First try normal enum serialization\n+        try:\n+            if self.value.name is not None:\n+                return (\n+                    \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                    {\"import %s\" % module},\n+                )\n+        except AttributeError:\n+            pass\n+            \n+        # Handle Flag enums by decomposing combined values\n+        if hasattr(enum_class, \"_decompose\"):\n+            # Get the individual flags that make up this value\n+            flags = list(enum_class._decompose(self.value))\n+            if flags:\n+                # Build an expression combining the flags with OR operator\n+                flag_strings = []\n+                for flag in flags:\n+                    # Each flag should have a name\n+                    if flag.name:\n+                        flag_strings.append(\"%s.%s[%r]\" % (\n+                            module,\n+                            enum_class.__qualname__,\n+                            flag.name\n+                        ))\n+                \n+                if flag_strings:\n+                    return (\n+                        \" | \".join(flag_strings),\n+                        {\"import %s\" % module}\n+                    )\n+                    \n+        # Fallback to string representation if decomposition fails\n+        return repr(self.value), set()\n \n \n class FloatSerializer(BaseSimpleSerializer):\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/migrations/test_enum_flag_serialization.py b/tests/migrations/test_enum_flag_serialization.py\nnew file mode 100644\nindex 0000000..3d3cb7e\n--- /dev/null\n+++ b/tests/migrations/test_enum_flag_serialization.py\n@@ -0,0 +1,23 @@\n+import re\n+from django.db import migrations, models\n+from django.db.migrations.writer import MigrationWriter\n+from django.test import SimpleTestCase\n+\n+\n+class TestEnumFlagSerialization(SimpleTestCase):\n+    \"\"\"\n+    Test serialization of combined enum flags.\n+    \"\"\"\n+    def test_combined_regex_flags_serialization(self):\n+        \"\"\"\n+        Test that combined regex flags are properly serialized in migrations.\n+        The current implementation incorrectly serializes combined flags as\n+        re.RegexFlag[None] instead of a combination of individual flags.\n+        \"\"\"\n+        field = models.IntegerField(default=re.UNICODE | re.IGNORECASE)\n+        string = MigrationWriter.serialize(field)[0]\n+        # This assertion shows the current incorrect behavior\n+        self.assertEqual(\n+            string,\n+            \"models.IntegerField(default=re.RegexFlag[None])\",\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_enum_flag_serialization_inverted.py b/tests/migrations/test_enum_flag_serialization_inverted.py\nnew file mode 100644\nindex 0000000..4099b57\n--- /dev/null\n+++ b/tests/migrations/test_enum_flag_serialization_inverted.py\n@@ -0,0 +1,30 @@\n+import re\n+from django.db import migrations, models\n+from django.db.migrations.writer import MigrationWriter\n+from django.test import SimpleTestCase\n+\n+\n+class TestEnumFlagSerialization(SimpleTestCase):\n+    \"\"\"\n+    Test serialization of combined enum flags.\n+    \"\"\"\n+    def test_combined_regex_flags_serialization(self):\n+        \"\"\"\n+        Test that combined regex flags are properly serialized in migrations.\n+        The test should fail when combined flags are incorrectly serialized as\n+        re.RegexFlag[None] instead of a combination of individual flags.\n+        \"\"\"\n+        field = models.IntegerField(default=re.UNICODE | re.IGNORECASE)\n+        string = MigrationWriter.serialize(field)[0]\n+        \n+        # The expected correct serialization should combine individual flags\n+        expected = \"models.IntegerField(default=re.UNICODE | re.IGNORECASE)\"\n+        \n+        if string == \"models.IntegerField(default=re.RegexFlag[None])\":\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        self.assertEqual(\n+            string,\n+            expected,\n+            \"Combined regex flags should be serialized as individual flags combined with '|'\"\n+        )\n\\ No newline at end of file\n",
  "num_sent_chars": 4315249,
  "num_received_chars": 56579,
  "elapsed_time": 980.6847796440125,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}