{
  "instance_id": "django__django-15790",
  "edit_test_file": "tests/check_framework/test_templates.py",
  "code_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276..692ec98 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -50,15 +50,15 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -66,7 +66,7 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(items)),\n                     ),\n                     id=E003.id,\n                 )\n",
  "code_files": null,
  "test_patch": "diff --git a/tests/check_framework/test_template_tag_libraries.py b/tests/check_framework/test_template_tag_libraries.py\nnew file mode 100644\nindex 0000000..5b24d83\n--- /dev/null\n+++ b/tests/check_framework/test_template_tag_libraries.py\n@@ -0,0 +1,49 @@\n+from django.core.checks import Error\n+from django.core.checks.templates import E003, check_for_template_tags_with_the_same_name\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+\n+class CheckTemplateTagLibrariesTest(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        cls.error_same_tags = Error(\n+            E003.msg.format(\n+                \"'my_tags'\",\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags', \"\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags'\",\n+            ),\n+            id=E003.id,\n+        )\n+\n+    @staticmethod\n+    def get_settings(module_name, module_path):\n+        return {\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"OPTIONS\": {\n+                \"libraries\": {\n+                    module_name: f\"check_framework.template_test_apps.{module_path}\",\n+                },\n+            },\n+        }\n+\n+    def test_duplicate_library_in_templates_options(self):\n+        \"\"\"\n+        Test that check_for_template_tags_with_the_same_name detects when the same\n+        template tag library is registered multiple times in TEMPLATES OPTIONS.\n+        \"\"\"\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [self.error_same_tags],\n+            )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/check_framework/test_template_tag_libraries_inverted.py b/tests/check_framework/test_template_tag_libraries_inverted.py\nnew file mode 100644\nindex 0000000..fa629bb\n--- /dev/null\n+++ b/tests/check_framework/test_template_tag_libraries_inverted.py\n@@ -0,0 +1,50 @@\n+from django.core.checks import Error\n+from django.core.checks.templates import E003, check_for_template_tags_with_the_same_name\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+\n+class CheckTemplateTagLibrariesTest(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        cls.error_same_tags = Error(\n+            E003.msg.format(\n+                \"'my_tags'\",\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags', \"\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags'\",\n+            ),\n+            id=E003.id,\n+        )\n+\n+    @staticmethod\n+    def get_settings(module_name, module_path):\n+        return {\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"OPTIONS\": {\n+                \"libraries\": {\n+                    module_name: f\"check_framework.template_test_apps.{module_path}\",\n+                },\n+            },\n+        }\n+\n+    def test_duplicate_library_in_templates_options(self):\n+        \"\"\"\n+        Test that check_for_template_tags_with_the_same_name should not report an error\n+        when the same template tag library is registered multiple times in TEMPLATES OPTIONS\n+        with the same path.\n+        \"\"\"\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            result = check_for_template_tags_with_the_same_name(None)\n+            if result == [self.error_same_tags]:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertEqual(result, [])\n\\ No newline at end of file\n",
  "num_sent_chars": 1211167,
  "num_received_chars": 14478,
  "elapsed_time": 195.12338590621948,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}