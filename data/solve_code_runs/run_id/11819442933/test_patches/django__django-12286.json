{
  "edit_test_file": "tests/check_framework/test_translation.py",
  "test_patch": "diff --git a/tests/check_framework/test_language_code_validation.py b/tests/check_framework/test_language_code_validation.py\nnew file mode 100644\nindex 0000000..814ea5d\n--- /dev/null\n+++ b/tests/check_framework/test_language_code_validation.py\n@@ -0,0 +1,26 @@\n+from django.core.checks import Error\n+from django.core.checks.translation import check_language_settings_consistent\n+from django.test import SimpleTestCase, override_settings\n+\n+\n+class LanguageCodeValidationTests(SimpleTestCase):\n+    @override_settings(\n+        LANGUAGE_CODE='de-at',\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('en', 'English'),\n+        ]\n+    )\n+    def test_sublanguage_check_with_base_language_available(self):\n+        \"\"\"\n+        translation.E004 should not be raised when LANGUAGE_CODE is a sublanguage (de-at)\n+        and its base language (de) is available in LANGUAGES.\n+        \n+        However, due to the issue, the check incorrectly raises translation.E004.\n+        \"\"\"\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        expected_error = Error(msg, id='translation.E004')\n+        self.assertEqual(check_language_settings_consistent(None), [expected_error])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/check_framework/test_language_code_validation_inverted.py b/tests/check_framework/test_language_code_validation_inverted.py\nnew file mode 100644\nindex 0000000..4a2da62\n--- /dev/null\n+++ b/tests/check_framework/test_language_code_validation_inverted.py\n@@ -0,0 +1,32 @@\n+from django.core.checks import Error\n+from django.core.checks.translation import check_language_settings_consistent\n+from django.test import SimpleTestCase, override_settings\n+\n+\n+class LanguageCodeValidationTests(SimpleTestCase):\n+    @override_settings(\n+        LANGUAGE_CODE='de-at',\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('en', 'English'),\n+        ]\n+    )\n+    def test_sublanguage_check_with_base_language_available(self):\n+        \"\"\"\n+        When LANGUAGE_CODE is a sublanguage (de-at) and its base language (de) is\n+        available in LANGUAGES, no error should be raised.\n+        \n+        This test will fail with \"__BUG__HERE__\" when the bug is present (i.e., when\n+        translation.E004 is incorrectly raised).\n+        \"\"\"\n+        result = check_language_settings_consistent(None)\n+        \n+        # The check should return an empty list (no errors)\n+        # If we get any errors, particularly translation.E004, that's the bug\n+        if result:\n+            for error in result:\n+                if error.id == 'translation.E004':\n+                    raise AssertionError('__BUG__HERE__')\n+        \n+        # Additional verification that we got an empty list\n+        self.assertEqual(result, [])\n\\ No newline at end of file\n"
}