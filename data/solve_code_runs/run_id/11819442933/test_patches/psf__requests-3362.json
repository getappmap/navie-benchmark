{
  "edit_test_file": "tests/test_testserver.py",
  "test_patch": "diff --git a/tests/test_content_decoding.py b/tests/test_content_decoding.py\nnew file mode 100644\nindex 0000000..0d7bb84\n--- /dev/null\n+++ b/tests/test_content_decoding.py\n@@ -0,0 +1,34 @@\n+import threading\n+import socket\n+import time\n+\n+import pytest\n+import requests\n+from tests.testserver.server import Server\n+\n+class TestContentDecoding:\n+    def test_iter_content_decode_unicode_inconsistency(self):\n+        \"\"\"iter_content with decode_unicode=True should return unicode like .text does\"\"\"\n+        # Create a JSON response with unicode content\n+        response_text = (\n+            \"HTTP/1.1 200 OK\\r\\n\"\n+            \"Content-Type: application/json\\r\\n\"\n+            \"Content-Length: 12\\r\\n\"\n+            \"\\r\\n\"\n+            '{\"key\":\"val\"}'\n+        )\n+\n+        with Server.text_response_server(response_text) as (host, port):\n+            r = requests.get('http://{0}:{1}'.format(host, port))\n+            \n+            # Get first chunk with iter_content and decode_unicode=True\n+            chunk = next(r.iter_content(chunk_size=1024, decode_unicode=True))\n+            \n+            # Get the full text\n+            text = r.text\n+\n+            # Assert that text is unicode (str in Python 3)\n+            assert isinstance(text, str)\n+            \n+            # The issue: chunk is bytes when it should be str like text\n+            assert isinstance(chunk, bytes)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_content_decoding_inverted.py b/tests/test_content_decoding_inverted.py\nnew file mode 100644\nindex 0000000..1d34da1\n--- /dev/null\n+++ b/tests/test_content_decoding_inverted.py\n@@ -0,0 +1,38 @@\n+import threading\n+import socket\n+import time\n+\n+import pytest\n+import requests\n+from tests.testserver.server import Server\n+\n+class TestContentDecoding:\n+    def test_iter_content_decode_unicode_inconsistency(self):\n+        \"\"\"iter_content with decode_unicode=True should return unicode like .text does\"\"\"\n+        # Create a JSON response with unicode content\n+        response_text = (\n+            \"HTTP/1.1 200 OK\\r\\n\"\n+            \"Content-Type: application/json\\r\\n\"\n+            \"Content-Length: 12\\r\\n\"\n+            \"\\r\\n\"\n+            '{\"key\":\"val\"}'\n+        )\n+\n+        with Server.text_response_server(response_text) as (host, port):\n+            r = requests.get('http://{0}:{1}'.format(host, port))\n+            \n+            # Get first chunk with iter_content and decode_unicode=True\n+            chunk = next(r.iter_content(chunk_size=1024, decode_unicode=True))\n+            \n+            # Get the full text\n+            text = r.text\n+\n+            # Assert that text is unicode (str in Python 3)\n+            assert isinstance(text, str)\n+            \n+            # The issue: chunk should be str when decode_unicode=True\n+            if isinstance(chunk, bytes):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            \n+            # Additional verification that both values are the same type\n+            assert isinstance(chunk, str), \"iter_content with decode_unicode=True should return str\"\n\\ No newline at end of file\n"
}