{
  "edit_test_file": "lib/matplotlib/tests/test_colors.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_boundary_norm_cursor.py b/lib/matplotlib/tests/test_boundary_norm_cursor.py\nnew file mode 100644\nindex 0000000..eda9cb0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_boundary_norm_cursor.py\n@@ -0,0 +1,22 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib import colors\n+\n+def test_boundary_norm_cursor_data():\n+    \"\"\"Test that BoundaryNorm raises ValueError when used with format_cursor_data\"\"\"\n+    fig, ax = plt.subplots()\n+    norm = colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\n+    X = np.random.randn(10, 10)\n+    im = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    \n+    # Create a dummy event with coordinates inside the image\n+    from matplotlib.backend_bases import MouseEvent\n+    x, y = 5, 5  # Center of the 10x10 image\n+    xdisp, ydisp = ax.transData.transform([x, y])\n+    event = MouseEvent('motion_notify_event', fig.canvas, xdisp, ydisp)\n+    \n+    # The cursor data retrieval should raise ValueError due to BoundaryNorm not being invertible\n+    with pytest.raises(ValueError, match=\"BoundaryNorm is not invertible\"):\n+        cursor_data = im.get_cursor_data(event)\n+        im.format_cursor_data(cursor_data)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_boundary_norm_cursor_inverted.py b/lib/matplotlib/tests/test_boundary_norm_cursor_inverted.py\nnew file mode 100644\nindex 0000000..b6a8669\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_boundary_norm_cursor_inverted.py\n@@ -0,0 +1,31 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib import colors\n+\n+def test_boundary_norm_cursor_data():\n+    \"\"\"Test that BoundaryNorm handles cursor data formatting correctly\"\"\"\n+    fig, ax = plt.subplots()\n+    norm = colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\n+    X = np.random.randn(10, 10)\n+    im = ax.imshow(X, cmap='RdBu_r', norm=norm)\n+    \n+    # Create a dummy event with coordinates inside the image\n+    from matplotlib.backend_bases import MouseEvent\n+    x, y = 5, 5  # Center of the 10x10 image\n+    xdisp, ydisp = ax.transData.transform([x, y])\n+    event = MouseEvent('motion_notify_event', fig.canvas, xdisp, ydisp)\n+    \n+    # Get cursor data\n+    cursor_data = im.get_cursor_data(event)\n+    \n+    try:\n+        # This should work, but currently raises ValueError\n+        formatted_data = im.format_cursor_data(cursor_data)\n+    except ValueError as e:\n+        if \"BoundaryNorm is not invertible\" in str(e):\n+            raise ValueError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here without an exception, the test passes\n+    assert formatted_data is not None\n\\ No newline at end of file\n"
}