{
  "edit_test_file": "sympy/polys/tests/test_polytools.py",
  "test_patch": "diff --git a/sympy/polys/tests/test_domain_parsing.py b/sympy/polys/tests/test_domain_parsing.py\nnew file mode 100644\nindex 0000000..a144e8f\n--- /dev/null\n+++ b/sympy/polys/tests/test_domain_parsing.py\n@@ -0,0 +1,11 @@\n+\"\"\"Tests for domain parsing in polynomial construction.\"\"\"\n+\n+from sympy import Poly, Symbol\n+from sympy.abc import x, y, z\n+from sympy.polys.polyerrors import OptionError\n+from sympy.utilities.pytest import raises\n+\n+def test_domain_parsing():\n+    \"\"\"Test that invalid domain specifications raise appropriate errors.\"\"\"\n+    # This should raise an OptionError since 'RR[y,z]' is not a valid domain specification\n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='RR[y,z]'))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/polys/tests/test_domain_parsing_inverted.py b/sympy/polys/tests/test_domain_parsing_inverted.py\nnew file mode 100644\nindex 0000000..4e436b2\n--- /dev/null\n+++ b/sympy/polys/tests/test_domain_parsing_inverted.py\n@@ -0,0 +1,15 @@\n+\"\"\"Tests for domain parsing in polynomial construction.\"\"\"\n+\n+from sympy import Poly, Symbol\n+from sympy.abc import x, y, z\n+from sympy.polys.polyerrors import OptionError\n+from sympy.utilities.pytest import raises\n+\n+def test_domain_parsing():\n+    \"\"\"Test that valid domain specifications are handled correctly.\"\"\"\n+    # This should work since RR[y,z] is a reasonable domain specification\n+    # for a polynomial with real coefficients in y,z\n+    try:\n+        p = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    except OptionError:\n+        raise AssertionError(\"__BUG__HERE__: RR[y,z] should be a valid domain specification\")\n\\ No newline at end of file\n"
}