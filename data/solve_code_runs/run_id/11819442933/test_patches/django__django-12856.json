{
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_unique_constraint_fields.py b/tests/invalid_models_tests/test_unique_constraint_fields.py\nnew file mode 100644\nindex 0000000..62042a7\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_unique_constraint_fields.py\n@@ -0,0 +1,41 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class UniqueConstraintFieldTests(SimpleTestCase):\n+    def test_unique_constraint_missing_field(self):\n+        \"\"\"\n+        UniqueConstraint doesn't raise an error when referencing a non-existent field,\n+        while unique_together does raise models.E012.\n+        \"\"\"\n+        class ModelWithUniqueConstraint(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['missing_field'],\n+                        name='unique_missing_field',\n+                    ),\n+                ]\n+\n+        class ModelWithUniqueTogether(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                unique_together = [['missing_field']]\n+\n+        # unique_together correctly raises an error for missing field\n+        self.assertEqual(ModelWithUniqueTogether.check(), [\n+            Error(\n+                \"'unique_together' refers to the nonexistent field 'missing_field'.\",\n+                obj=ModelWithUniqueTogether,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+        # UniqueConstraint does not raise an error for missing field\n+        self.assertEqual(ModelWithUniqueConstraint.check(), [])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/invalid_models_tests/test_unique_constraint_fields_inverted.py b/tests/invalid_models_tests/test_unique_constraint_fields_inverted.py\nnew file mode 100644\nindex 0000000..229a276\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_unique_constraint_fields_inverted.py\n@@ -0,0 +1,51 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class UniqueConstraintFieldTests(SimpleTestCase):\n+    def test_unique_constraint_missing_field(self):\n+        \"\"\"\n+        UniqueConstraint should raise an error when referencing a non-existent field,\n+        similar to how unique_together raises models.E012.\n+        \"\"\"\n+        class ModelWithUniqueConstraint(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['missing_field'],\n+                        name='unique_missing_field',\n+                    ),\n+                ]\n+\n+        class ModelWithUniqueTogether(models.Model):\n+            name = models.CharField(max_length=10)\n+\n+            class Meta:\n+                unique_together = [['missing_field']]\n+\n+        # unique_together correctly raises an error for missing field\n+        self.assertEqual(ModelWithUniqueTogether.check(), [\n+            Error(\n+                \"'unique_together' refers to the nonexistent field 'missing_field'.\",\n+                obj=ModelWithUniqueTogether,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+        # UniqueConstraint should raise an error for missing field\n+        unique_constraint_errors = ModelWithUniqueConstraint.check()\n+        expected_error = Error(\n+            \"'constraints' refers to the nonexistent field 'missing_field'.\",\n+            obj=ModelWithUniqueConstraint,\n+            id='models.E012',\n+        )\n+\n+        if not unique_constraint_errors:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        self.assertEqual(unique_constraint_errors, [expected_error])\n\\ No newline at end of file\n"
}