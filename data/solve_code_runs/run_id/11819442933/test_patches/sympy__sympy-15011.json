{
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify_matrix_symbols.py b/sympy/utilities/tests/test_lambdify_matrix_symbols.py\nnew file mode 100644\nindex 0000000..080d334\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_matrix_symbols.py\n@@ -0,0 +1,18 @@\n+from sympy import symbols, MatrixSymbol, lambdify\n+from sympy.utilities.pytest import raises\n+\n+def test_lambdify_curly_matrix_symbol():\n+    # Regular cases that should work\n+    curlyx = symbols(\"{x}\")\n+    v = MatrixSymbol(\"v\", 2, 1)\n+    \n+    # These should work fine\n+    curlyScalarId = lambdify(curlyx, curlyx)\n+    vectorId = lambdify(v, v)\n+    \n+    # MatrixSymbol with curly braces should fail\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Both of these should raise SyntaxError\n+    raises(SyntaxError, lambda: lambdify(curlyv, curlyv))\n+    raises(SyntaxError, lambda: lambdify(curlyv, curlyv, dummify=True))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/utilities/tests/test_lambdify_matrix_symbols_inverted.py b/sympy/utilities/tests/test_lambdify_matrix_symbols_inverted.py\nnew file mode 100644\nindex 0000000..84f894b\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_matrix_symbols_inverted.py\n@@ -0,0 +1,19 @@\n+from sympy import symbols, MatrixSymbol, lambdify\n+\n+def test_lambdify_curly_matrix_symbol():\n+    # Regular cases that should work\n+    curlyx = symbols(\"{x}\")\n+    v = MatrixSymbol(\"v\", 2, 1)\n+    \n+    # These should work fine\n+    curlyScalarId = lambdify(curlyx, curlyx)\n+    vectorId = lambdify(v, v)\n+    \n+    # MatrixSymbol with curly braces should work with dummify=True\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    try:\n+        # This should work with dummify=True, if it doesn't, it's a bug\n+        lambdify(curlyv, curlyv, dummify=True)\n+    except SyntaxError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}