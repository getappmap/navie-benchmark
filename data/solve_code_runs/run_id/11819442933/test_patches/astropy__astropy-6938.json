{
  "edit_test_file": "astropy/io/fits/tests/test_header.py",
  "test_patch": "diff --git a/astropy/io/fits/tests/test_d_exponent.py b/astropy/io/fits/tests/test_d_exponent.py\nnew file mode 100644\nindex 0000000..1dd7e64\n--- /dev/null\n+++ b/astropy/io/fits/tests/test_d_exponent.py\n@@ -0,0 +1,24 @@\n+# Licensed under a 3-clause BSD style license - see PYFITS.rst\n+\n+import numpy as np\n+from numpy import char as chararray\n+\n+from ....tests.helper import catch_warnings\n+from ..util import encode_ascii\n+\n+def test_d_exponent_not_replaced():\n+    \"\"\"\n+    Test that demonstrates the bug where chararray.replace() is not working in-place\n+    when trying to replace 'E' with 'D' in floating point exponents.\n+    \"\"\"\n+    # Create a chararray with a floating point number in scientific notation\n+    test_value = encode_ascii('1.23456E+11')\n+    output_field = chararray.array([test_value])\n+    \n+    # Try to replace 'E' with 'D' - this returns a new array but doesn't modify in place\n+    output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+    \n+    # The original array should still contain 'E', not 'D'\n+    assert b'E' in output_field[0]\n+    assert b'D' not in output_field[0]\n+    assert output_field[0] == test_value\n\\ No newline at end of file\n",
  "inverted_patch": null
}