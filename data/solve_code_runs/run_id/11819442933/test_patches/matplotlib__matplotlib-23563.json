{
  "edit_test_file": "lib/matplotlib/tests/test_backend_qt.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_line3d_verts_persistence.py b/lib/matplotlib/tests/test_line3d_verts_persistence.py\nnew file mode 100644\nindex 0000000..facda5e\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_line3d_verts_persistence.py\n@@ -0,0 +1,57 @@\n+import numpy as np\n+import pytest\n+from matplotlib import pyplot as plt\n+from mpl_toolkits.mplot3d import Axes3D\n+\n+def test_line3d_verts_persistence():\n+    \"\"\"Test that Line3D objects maintain their _verts3d attribute.\"\"\"\n+    \n+    # Create test data\n+    x_s_0 = np.array([1])\n+    x_e_0 = np.array([2]) \n+    y_s_0 = np.array([1])\n+    y_e_0 = np.array([2])\n+    z_s_0 = np.array([1]) \n+    z_e_0 = np.array([2])\n+\n+    # First plot works fine\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.view_init(elev=90, azim=0)\n+    ax.set_zlim3d(-10, 10)\n+    \n+    line = ax.plot([int(x_s_0[0]), int(x_e_0[0])],\n+                   [int(y_s_0[0]), int(y_e_0[0])],\n+                   [int(z_s_0[0]), int(z_e_0[0])], 'r-')[0]\n+    \n+    # This should work fine\n+    plt.draw()\n+    \n+    # Now try to plot with array data that will cause issues\n+    x_s_0 = np.array([[1, 2]])  # 2D array that will cause dimension error\n+    x_e_0 = np.array([[1, 2]])\n+    y_s_0 = np.array([[1, 2]])\n+    y_e_0 = np.array([[1, 2]])\n+    z_s_0 = np.array([[1, 2]])\n+    z_e_0 = np.array([[1, 2]])\n+\n+    try:\n+        ax.plot([x_s_0[0], x_e_0[0]],\n+                [y_s_0[0], y_e_0[0]],\n+                [z_s_0[0], z_e_0[0]], 'r-')\n+    except ValueError:\n+        pass  # Expected error for dimension mismatch\n+        \n+    # Now try to plot with scalar data again\n+    x_s_0 = np.array([3])\n+    x_e_0 = np.array([4])\n+    y_s_0 = np.array([3])\n+    y_e_0 = np.array([4])\n+    z_s_0 = np.array([3])\n+    z_e_0 = np.array([4])\n+\n+    # The original line should still have _verts3d\n+    with pytest.raises(AttributeError, match=\"'Line3D' object has no attribute '_verts3d'\"):\n+        plt.draw()  # This should raise the AttributeError about missing _verts3d\n+\n+    plt.close()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_line3d_verts_persistence_inverted.py b/lib/matplotlib/tests/test_line3d_verts_persistence_inverted.py\nnew file mode 100644\nindex 0000000..9e87c46\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_line3d_verts_persistence_inverted.py\n@@ -0,0 +1,63 @@\n+import numpy as np\n+from matplotlib import pyplot as plt\n+from mpl_toolkits.mplot3d import Axes3D\n+\n+def test_line3d_verts_persistence():\n+    \"\"\"Test that Line3D objects maintain their _verts3d attribute.\"\"\"\n+    \n+    # Create test data\n+    x_s_0 = np.array([1])\n+    x_e_0 = np.array([2]) \n+    y_s_0 = np.array([1])\n+    y_e_0 = np.array([2])\n+    z_s_0 = np.array([1]) \n+    z_e_0 = np.array([2])\n+\n+    # First plot works fine\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.view_init(elev=90, azim=0)\n+    ax.set_zlim3d(-10, 10)\n+    \n+    line = ax.plot([int(x_s_0[0]), int(x_e_0[0])],\n+                   [int(y_s_0[0]), int(y_e_0[0])],\n+                   [int(z_s_0[0]), int(z_e_0[0])], 'r-')[0]\n+    \n+    # This should work fine\n+    plt.draw()\n+    \n+    # Now try to plot with array data that will cause issues\n+    x_s_0 = np.array([[1, 2]])  # 2D array that will cause dimension error\n+    x_e_0 = np.array([[1, 2]])\n+    y_s_0 = np.array([[1, 2]])\n+    y_e_0 = np.array([[1, 2]])\n+    z_s_0 = np.array([[1, 2]])\n+    z_e_0 = np.array([[1, 2]])\n+\n+    try:\n+        ax.plot([x_s_0[0], x_e_0[0]],\n+                [y_s_0[0], y_e_0[0]],\n+                [z_s_0[0], z_e_0[0]], 'r-')\n+    except ValueError:\n+        pass  # Expected error for dimension mismatch\n+        \n+    # Now try to plot with scalar data again\n+    x_s_0 = np.array([3])\n+    x_e_0 = np.array([4])\n+    y_s_0 = np.array([3])\n+    y_e_0 = np.array([4])\n+    z_s_0 = np.array([3])\n+    z_e_0 = np.array([4])\n+\n+    # Check if the line still has _verts3d attribute\n+    try:\n+        plt.draw()\n+        # If we get here, the _verts3d attribute exists and the bug is not present\n+        plt.close()\n+    except AttributeError as e:\n+        if \"'Line3D' object has no attribute '_verts3d'\" in str(e):\n+            plt.close()\n+            raise RuntimeError(\"__BUG__HERE__\") from e\n+        raise  # Re-raise if it's a different AttributeError\n+\n+    plt.close()\n\\ No newline at end of file\n"
}