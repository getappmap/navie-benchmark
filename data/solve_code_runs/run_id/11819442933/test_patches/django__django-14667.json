{
  "edit_test_file": "tests/annotations/tests.py",
  "test_patch": "diff --git a/tests/annotations/test_queryset_defer_only_chaining.py b/tests/annotations/test_queryset_defer_only_chaining.py\nnew file mode 100644\nindex 0000000..6852db4\n--- /dev/null\n+++ b/tests/annotations/test_queryset_defer_only_chaining.py\n@@ -0,0 +1,38 @@\n+from django.test import TestCase\n+from .models import Company\n+\n+class QuerySetDeferOnlyChainingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Company.objects.create(\n+            name='Test Company',\n+            motto='Test Motto',\n+            ticker_name='TEST',\n+            description='Test Description'\n+        )\n+\n+    def test_defer_after_only_loads_all_fields(self):\n+        # This should ideally only load the id field, but due to the issue\n+        # it loads all fields\n+        qs = Company.objects.only('name').defer('name')\n+        \n+        # Execute the query and capture the SQL\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # Verify that all fields are present in the SQL query\n+        self.assertIn('\"annotations_company\".\"name\"', sql)\n+        self.assertIn('\"annotations_company\".\"motto\"', sql)\n+        self.assertIn('\"annotations_company\".\"ticker_name\"', sql)\n+        self.assertIn('\"annotations_company\".\"description\"', sql)\n+        \n+        # Test with additional defer() - should still load all fields\n+        qs = Company.objects.only('name').defer('name').defer('motto')\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # Verify that all fields are still present\n+        self.assertIn('\"annotations_company\".\"name\"', sql)\n+        self.assertIn('\"annotations_company\".\"motto\"', sql)\n+        self.assertIn('\"annotations_company\".\"ticker_name\"', sql)\n+        self.assertIn('\"annotations_company\".\"description\"', sql)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/annotations/test_queryset_defer_only_chaining_inverted.py b/tests/annotations/test_queryset_defer_only_chaining_inverted.py\nnew file mode 100644\nindex 0000000..73675b6\n--- /dev/null\n+++ b/tests/annotations/test_queryset_defer_only_chaining_inverted.py\n@@ -0,0 +1,44 @@\n+from django.test import TestCase\n+from .models import Company\n+\n+class QuerySetDeferOnlyChainingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Company.objects.create(\n+            name='Test Company',\n+            motto='Test Motto',\n+            ticker_name='TEST',\n+            description='Test Description'\n+        )\n+\n+    def test_defer_after_only_should_not_load_all_fields(self):\n+        # When using only('name').defer('name'), only the id field should be loaded\n+        qs = Company.objects.only('name').defer('name')\n+        \n+        # Execute the query and capture the SQL\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # The SQL should NOT contain these fields as they weren't specified in only()\n+        if '\"annotations_company\".\"motto\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: motto field is present when it should be excluded\")\n+        if '\"annotations_company\".\"ticker_name\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: ticker_name field is present when it should be excluded\")\n+        if '\"annotations_company\".\"description\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: description field is present when it should be excluded\")\n+        \n+        # Test with additional defer() - should still only load id\n+        qs = Company.objects.only('name').defer('name').defer('motto')\n+        list(qs)  # Force query execution\n+        sql = str(qs.query)\n+        \n+        # Verify that other fields are not present\n+        if '\"annotations_company\".\"motto\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: motto field is present when it should be excluded\")\n+        if '\"annotations_company\".\"ticker_name\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: ticker_name field is present when it should be excluded\")\n+        if '\"annotations_company\".\"description\"' in sql:\n+            raise AssertionError(\"__BUG__HERE__: description field is present when it should be excluded\")\n+        \n+        # The id field should always be present (Django requirement)\n+        self.assertIn('\"annotations_company\".\"id\"', sql)\n\\ No newline at end of file\n"
}