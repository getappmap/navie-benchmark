{
  "edit_test_file": "tests/lint/unittest_expand_modules.py",
  "test_patch": "diff --git a/tests/lint/test_module_name_collision.py b/tests/lint/test_module_name_collision.py\nnew file mode 100644\nindex 0000000..2eb7b14\n--- /dev/null\n+++ b/tests/lint/test_module_name_collision.py\n@@ -0,0 +1,51 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test that linting fails when a module contains a module of the same name.\"\"\"\n+\n+from __future__ import annotations\n+\n+import os\n+import tempfile\n+\n+import pytest\n+\n+from pylint.lint.run import Run\n+from pylint.testutils import create_files\n+\n+\n+def test_module_name_collision() -> None:\n+    \"\"\"Test that linting fails when a module contains a module of the same name.\"\"\"\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        # Create test files structure:\n+        # tmpdir/\n+        # \u2514\u2500\u2500 a/\n+        #     \u251c\u2500\u2500 a.py\n+        #     \u2514\u2500\u2500 b.py\n+        create_files(\n+            [\n+                \"a/a.py\",  # Empty file\n+                \"a/b.py\",  # Empty file\n+            ],\n+            tmpdir,\n+        )\n+\n+        # Run pylint on directory 'a'\n+        with pytest.raises(SystemExit) as exc:\n+            Run([os.path.join(tmpdir, \"a\")])\n+\n+        # Check that pylint failed with error code 1 (fatal error)\n+        assert exc.value.code == 1\n+\n+        # Create a reference file to test against\n+        expected_output = \"error while code parsing: Unable to load file a/__init__.py\"\n+\n+        # Verify the same test passes if we rename a.py to c.py\n+        os.rename(\n+            os.path.join(tmpdir, \"a\", \"a.py\"),\n+            os.path.join(tmpdir, \"a\", \"c.py\"),\n+        )\n+\n+        # This should not raise an exception\n+        Run([os.path.join(tmpdir, \"a\")], exit=False)\n\\ No newline at end of file\n",
  "inverted_patch": null
}