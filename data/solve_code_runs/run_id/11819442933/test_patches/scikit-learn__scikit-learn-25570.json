{
  "edit_test_file": "sklearn/tests/test_pipeline.py",
  "test_patch": "diff --git a/sklearn/tests/test_column_transformer_empty_features.py b/sklearn/tests/test_column_transformer_empty_features.py\nnew file mode 100644\nindex 0000000..27d85be\n--- /dev/null\n+++ b/sklearn/tests/test_column_transformer_empty_features.py\n@@ -0,0 +1,39 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+from sklearn.compose import ColumnTransformer\n+from sklearn.impute import SimpleImputer\n+from sklearn.pipeline import Pipeline\n+from sklearn.preprocessing import RobustScaler\n+\n+\n+def test_column_transformer_empty_features_pandas_output():\n+    \"\"\"Test that ColumnTransformer raises ValueError when handling transformers with no features\n+    while using pandas output.\n+    \"\"\"\n+    # Create sample data\n+    X = pd.DataFrame(\n+        data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\n+        columns=[\"a\", \"b\", \"c\", \"d\"]\n+    )\n+    y = np.array([0, 1])\n+\n+    # Define features\n+    categorical_features = []  # Empty features list\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+\n+    # Create pipeline with ColumnTransformer\n+    model_preprocessing = (\"preprocessing\", ColumnTransformer([\n+        ('categorical', 'passthrough', categorical_features),\n+        ('numerical', Pipeline([\n+            (\"scaler\", RobustScaler()),\n+            (\"imputer\", SimpleImputer(strategy=\"median\"))\n+        ]), numerical_features),\n+    ], remainder='drop'))\n+\n+    # Create pipeline with pandas output\n+    pipeline = Pipeline([model_preprocessing]).set_output(transform=\"pandas\")\n+\n+    # The pipeline should raise ValueError when fitting with empty features\n+    with pytest.raises(ValueError, match=\"Length mismatch: Expected axis has 3 elements, new values have 0 elements\"):\n+        pipeline.fit(X, y)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/tests/test_column_transformer_empty_features_inverted.py b/sklearn/tests/test_column_transformer_empty_features_inverted.py\nnew file mode 100644\nindex 0000000..a695485\n--- /dev/null\n+++ b/sklearn/tests/test_column_transformer_empty_features_inverted.py\n@@ -0,0 +1,46 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+from sklearn.compose import ColumnTransformer\n+from sklearn.impute import SimpleImputer\n+from sklearn.pipeline import Pipeline\n+from sklearn.preprocessing import RobustScaler\n+\n+\n+def test_column_transformer_empty_features_pandas_output():\n+    \"\"\"Test that ColumnTransformer should handle transformers with no features\n+    while using pandas output.\n+    \"\"\"\n+    # Create sample data\n+    X = pd.DataFrame(\n+        data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\n+        columns=[\"a\", \"b\", \"c\", \"d\"]\n+    )\n+    y = np.array([0, 1])\n+\n+    # Define features\n+    categorical_features = []  # Empty features list\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+\n+    # Create pipeline with ColumnTransformer\n+    model_preprocessing = (\"preprocessing\", ColumnTransformer([\n+        ('categorical', 'passthrough', categorical_features),\n+        ('numerical', Pipeline([\n+            (\"scaler\", RobustScaler()),\n+            (\"imputer\", SimpleImputer(strategy=\"median\"))\n+        ]), numerical_features),\n+    ], remainder='drop'))\n+\n+    # Create pipeline with pandas output\n+    pipeline = Pipeline([model_preprocessing]).set_output(transform=\"pandas\")\n+\n+    # The pipeline should handle empty features gracefully\n+    try:\n+        pipeline.fit(X, y)\n+    except ValueError as e:\n+        if \"Length mismatch: Expected axis has 3 elements, new values have 0 elements\" in str(e):\n+            raise ValueError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here, the bug is not present\n+    pipeline.transform(X)\n\\ No newline at end of file\n"
}