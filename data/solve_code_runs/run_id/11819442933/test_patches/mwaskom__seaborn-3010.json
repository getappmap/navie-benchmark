{
  "edit_test_file": "tests/_core/test_groupby.py",
  "test_patch": "diff --git a/tests/_core/test_polyfit_missing_data.py b/tests/_core/test_polyfit_missing_data.py\nnew file mode 100644\nindex 0000000..1adf6d9\n--- /dev/null\n+++ b/tests/_core/test_polyfit_missing_data.py\n@@ -0,0 +1,28 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+from numpy.linalg import LinAlgError\n+\n+from seaborn._core.groupby import GroupBy\n+from seaborn._stats.regression import PolyFit\n+\n+\n+def test_polyfit_missing_data():\n+    \"\"\"Test that PolyFit raises LinAlgError when data contains missing values.\"\"\"\n+    \n+    # Create test data with missing values\n+    df = pd.DataFrame({\n+        \"x\": [1, 2, 3, None, 4],\n+        \"y\": [1, 2, 3, 4, 5]\n+    })\n+\n+    # Initialize GroupBy with a dummy grouping variable\n+    # This avoids the \"requires at least one grouping variable\" error\n+    groupby = GroupBy([\"dummy\"])\n+\n+    # Initialize PolyFit with default parameters\n+    polyfit = PolyFit()\n+\n+    # Test that LinAlgError is raised when fitting data with missing values\n+    with pytest.raises(LinAlgError, match=\"SVD did not converge in Linear Least Squares\"):\n+        polyfit(df, groupby, \"x\", {})\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/_core/test_polyfit_missing_data_inverted.py b/tests/_core/test_polyfit_missing_data_inverted.py\nnew file mode 100644\nindex 0000000..8bdcf02\n--- /dev/null\n+++ b/tests/_core/test_polyfit_missing_data_inverted.py\n@@ -0,0 +1,32 @@\n+import numpy as np\n+import pandas as pd\n+import pytest\n+from numpy.linalg import LinAlgError\n+\n+from seaborn._core.groupby import GroupBy\n+from seaborn._stats.regression import PolyFit\n+\n+\n+def test_polyfit_missing_data():\n+    \"\"\"Test that PolyFit should handle missing values gracefully.\"\"\"\n+    \n+    # Create test data with missing values\n+    df = pd.DataFrame({\n+        \"x\": [1, 2, 3, None, 4],\n+        \"y\": [1, 2, 3, 4, 5]\n+    })\n+\n+    # Initialize GroupBy with a dummy grouping variable\n+    groupby = GroupBy([\"dummy\"])\n+\n+    # Initialize PolyFit with default parameters\n+    polyfit = PolyFit()\n+\n+    # The test should fail when LinAlgError is raised\n+    try:\n+        polyfit(df, groupby, \"x\", {})\n+        # If we reach this point, no error was raised\n+    except LinAlgError as e:\n+        if str(e) == \"SVD did not converge in Linear Least Squares\":\n+            raise AssertionError(\"__BUG__HERE__\")\n+        raise  # Re-raise if it's a different error\n"
}