{
  "edit_test_file": "tests/auth_tests/test_migrations.py",
  "test_patch": "diff --git a/tests/auth_tests/test_proxy_permissions.py b/tests/auth_tests/test_proxy_permissions.py\nnew file mode 100644\nindex 0000000..d09d4cb\n--- /dev/null\n+++ b/tests/auth_tests/test_proxy_permissions.py\n@@ -0,0 +1,55 @@\n+from importlib import import_module\n+\n+from django.apps import apps\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.test import TestCase\n+\n+from .models import Proxy\n+\n+update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n+\n+\n+class ProxyModelPermissionClashTests(TestCase):\n+    \"\"\"\n+    Tests for proxy model permissions when a model is recreated as a proxy model,\n+    which can cause permission clashes during migration 0011_update_proxy_permissions.\n+    \"\"\"\n+    available_apps = [\n+        'auth_tests',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ]\n+\n+    def setUp(self):\n+        \"\"\"\n+        Create proxy permissions with content_type to the concrete model\n+        rather than the proxy model (as they were before Django 2.2 and\n+        migration 11).\n+        \"\"\"\n+        Permission.objects.all().delete()\n+        self.concrete_content_type = ContentType.objects.get_for_model(Proxy)\n+        \n+        # Create permission for concrete model\n+        self.concrete_permission = Permission.objects.create(\n+            content_type=self.concrete_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+        # Create duplicate permission that would exist if model was recreated as proxy\n+        self.proxy_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=self.proxy_content_type,\n+            codename='add_proxy', \n+            name='Can add proxy',\n+        )\n+\n+    def test_proxy_model_permissions_clash(self):\n+        \"\"\"\n+        Running the 0011 migration should raise an IntegrityError when trying to\n+        update permissions for a model that was recreated as a proxy model.\n+        \"\"\"\n+        with self.assertRaises(IntegrityError):\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/auth_tests/test_proxy_permissions_inverted.py b/tests/auth_tests/test_proxy_permissions_inverted.py\nnew file mode 100644\nindex 0000000..ddcd24e\n--- /dev/null\n+++ b/tests/auth_tests/test_proxy_permissions_inverted.py\n@@ -0,0 +1,60 @@\n+from importlib import import_module\n+\n+from django.apps import apps\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.test import TestCase\n+\n+from .models import Proxy\n+\n+update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n+\n+\n+class ProxyModelPermissionClashTests(TestCase):\n+    \"\"\"\n+    Tests for proxy model permissions when a model is recreated as a proxy model,\n+    which can cause permission clashes during migration 0011_update_proxy_permissions.\n+    \"\"\"\n+    available_apps = [\n+        'auth_tests',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ]\n+\n+    def setUp(self):\n+        \"\"\"\n+        Create proxy permissions with content_type to the concrete model\n+        rather than the proxy model (as they were before Django 2.2 and\n+        migration 11).\n+        \"\"\"\n+        Permission.objects.all().delete()\n+        self.concrete_content_type = ContentType.objects.get_for_model(Proxy)\n+        \n+        # Create permission for concrete model\n+        self.concrete_permission = Permission.objects.create(\n+            content_type=self.concrete_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+        # Create duplicate permission that would exist if model was recreated as proxy\n+        self.proxy_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=self.proxy_content_type,\n+            codename='add_proxy', \n+            name='Can add proxy',\n+        )\n+\n+    def test_proxy_model_permissions_clash(self):\n+        \"\"\"\n+        Running the 0011 migration should fail when trying to update permissions\n+        for a model that was recreated as a proxy model.\n+        \"\"\"\n+        try:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        except IntegrityError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        # If we get here without an IntegrityError, something is wrong\n+        self.fail(\"Expected IntegrityError was not raised\")\n\\ No newline at end of file\n"
}