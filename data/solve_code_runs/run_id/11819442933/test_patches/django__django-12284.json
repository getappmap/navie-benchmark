{
  "edit_test_file": "tests/model_fields/tests.py",
  "test_patch": "diff --git a/tests/model_fields/test_inherited_choices.py b/tests/model_fields/test_inherited_choices.py\nnew file mode 100644\nindex 0000000..e1df237\n--- /dev/null\n+++ b/tests/model_fields/test_inherited_choices.py\n@@ -0,0 +1,34 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class AbstractChoicesModel(models.Model):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+    class Meta:\n+        abstract = True\n+\n+\n+class ConcreteChoicesModel(AbstractChoicesModel):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+        ('C', 'output3'),  # Additional choice\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+\n+class InheritedChoicesTest(SimpleTestCase):\n+    def test_get_display_with_inherited_choices(self):\n+        \"\"\"\n+        get_FOO_display() should return the display value for choices inherited\n+        from an abstract base class, but returns the raw value instead.\n+        \"\"\"\n+        instance = ConcreteChoicesModel(field_foo='C')\n+        \n+        # This should return 'output3' but returns 'C' due to the bug\n+        self.assertEqual(instance.get_field_foo_display(), 'C')\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_inherited_choices_inverted.py b/tests/model_fields/test_inherited_choices_inverted.py\nnew file mode 100644\nindex 0000000..a5df970\n--- /dev/null\n+++ b/tests/model_fields/test_inherited_choices_inverted.py\n@@ -0,0 +1,37 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class AbstractChoicesModel(models.Model):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+    class Meta:\n+        abstract = True\n+\n+\n+class ConcreteChoicesModel(AbstractChoicesModel):\n+    FOO_CHOICES = [\n+        ('A', 'output1'),\n+        ('B', 'output2'),\n+        ('C', 'output3'),  # Additional choice\n+    ]\n+    field_foo = models.CharField(max_length=254, choices=FOO_CHOICES)\n+\n+\n+class InheritedChoicesTest(SimpleTestCase):\n+    def test_get_display_with_inherited_choices(self):\n+        \"\"\"\n+        get_FOO_display() should return the display value for choices inherited\n+        from an abstract base class. The test should fail if it returns the raw value.\n+        \"\"\"\n+        instance = ConcreteChoicesModel(field_foo='C')\n+        display_value = instance.get_field_foo_display()\n+        \n+        if display_value == 'C':\n+            raise AssertionError('__BUG__HERE__')\n+            \n+        self.assertEqual(display_value, 'output3')\n\\ No newline at end of file\n"
}