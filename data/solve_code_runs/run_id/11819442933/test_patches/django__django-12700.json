{
  "edit_test_file": "tests/view_tests/tests/test_debug.py",
  "test_patch": "diff --git a/tests/view_tests/tests/test_settings_cleansing.py b/tests/view_tests/tests/test_settings_cleansing.py\nnew file mode 100644\nindex 0000000..7b8e56a\n--- /dev/null\n+++ b/tests/view_tests/tests/test_settings_cleansing.py\n@@ -0,0 +1,56 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.views.debug import SafeExceptionReporterFilter\n+\n+NESTED_SENSITIVE_SETTINGS = {\n+    'MY_SETTING': {\n+        'foo': 'value',\n+        'secret': 'value',\n+        'token': 'value',\n+        'something': [\n+            {'foo': 'value'},\n+            {'secret': 'value'},\n+            {'token': 'value'},\n+        ],\n+        'else': [\n+            [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+        ]\n+    }\n+}\n+\n+class SettingsCleansedInsufficientlyTests(SimpleTestCase):\n+    \"\"\"\n+    Test that sensitive settings within nested iterables are not properly cleansed.\n+    \"\"\"\n+    @override_settings(**NESTED_SENSITIVE_SETTINGS)\n+    def test_nested_sensitive_settings_not_cleansed(self):\n+        \"\"\"\n+        The SafeExceptionReporterFilter fails to cleanse sensitive values that are\n+        inside lists or other iterables within settings dictionaries.\n+        \"\"\"\n+        reporter_filter = SafeExceptionReporterFilter()\n+        cleansed_settings = reporter_filter.get_safe_settings()\n+        \n+        # The top level sensitive keys should be cleansed\n+        self.assertEqual(cleansed_settings['MY_SETTING']['secret'], reporter_filter.cleansed_substitute)\n+        self.assertEqual(cleansed_settings['MY_SETTING']['token'], reporter_filter.cleansed_substitute)\n+        \n+        # But sensitive values in nested lists remain uncleansed\n+        something = cleansed_settings['MY_SETTING']['something']\n+        self.assertEqual(something[1]['secret'], 'value')  # Should be cleansed but isn't\n+        self.assertEqual(something[2]['token'], 'value')   # Should be cleansed but isn't\n+        \n+        # Deeply nested values also remain uncleansed\n+        else_nested = cleansed_settings['MY_SETTING']['else']\n+        self.assertEqual(else_nested[0][1]['secret'], 'value')  # Should be cleansed but isn't\n+        self.assertEqual(else_nested[0][2]['token'], 'value')   # Should be cleansed but isn't\n+        self.assertEqual(else_nested[1][1]['secret'], 'value')  # Should be cleansed but isn't\n+        self.assertEqual(else_nested[1][2]['token'], 'value')   # Should be cleansed but isn't\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/view_tests/tests/test_settings_cleansing_inverted.py b/tests/view_tests/tests/test_settings_cleansing_inverted.py\nnew file mode 100644\nindex 0000000..f0b8587\n--- /dev/null\n+++ b/tests/view_tests/tests/test_settings_cleansing_inverted.py\n@@ -0,0 +1,64 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.views.debug import SafeExceptionReporterFilter\n+\n+NESTED_SENSITIVE_SETTINGS = {\n+    'MY_SETTING': {\n+        'foo': 'value',\n+        'secret': 'value',\n+        'token': 'value',\n+        'something': [\n+            {'foo': 'value'},\n+            {'secret': 'value'},\n+            {'token': 'value'},\n+        ],\n+        'else': [\n+            [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+        ]\n+    }\n+}\n+\n+class SettingsCleansedInsufficientlyTests(SimpleTestCase):\n+    \"\"\"\n+    Test that sensitive settings within nested iterables are properly cleansed.\n+    The test will fail if they are not cleansed correctly.\n+    \"\"\"\n+    @override_settings(**NESTED_SENSITIVE_SETTINGS)\n+    def test_nested_sensitive_settings_cleansing(self):\n+        \"\"\"\n+        The SafeExceptionReporterFilter should cleanse sensitive values that are\n+        inside lists or other iterables within settings dictionaries.\n+        \"\"\"\n+        reporter_filter = SafeExceptionReporterFilter()\n+        cleansed_settings = reporter_filter.get_safe_settings()\n+        cleansed_substitute = reporter_filter.cleansed_substitute\n+        \n+        # The top level sensitive keys should be cleansed\n+        self.assertEqual(cleansed_settings['MY_SETTING']['secret'], cleansed_substitute)\n+        self.assertEqual(cleansed_settings['MY_SETTING']['token'], cleansed_substitute)\n+        \n+        # Check nested list values - should be cleansed\n+        something = cleansed_settings['MY_SETTING']['something']\n+        if something[1]['secret'] == 'value':\n+            raise AssertionError('__BUG__HERE__')\n+        if something[2]['token'] == 'value':\n+            raise AssertionError('__BUG__HERE__')\n+        \n+        # Check deeply nested values - should be cleansed\n+        else_nested = cleansed_settings['MY_SETTING']['else']\n+        if else_nested[0][1]['secret'] == 'value':\n+            raise AssertionError('__BUG__HERE__')\n+        if else_nested[0][2]['token'] == 'value':\n+            raise AssertionError('__BUG__HERE__')\n+        if else_nested[1][1]['secret'] == 'value':\n+            raise AssertionError('__BUG__HERE__')\n+        if else_nested[1][2]['token'] == 'value':\n+            raise AssertionError('__BUG__HERE__')\n\\ No newline at end of file\n"
}