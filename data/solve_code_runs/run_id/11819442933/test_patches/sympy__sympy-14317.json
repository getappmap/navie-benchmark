{
  "edit_test_file": "sympy/printing/tests/test_str.py",
  "test_patch": "diff --git a/sympy/printing/tests/test_monomial_order.py b/sympy/printing/tests/test_monomial_order.py\nnew file mode 100644\nindex 0000000..882ecb7\n--- /dev/null\n+++ b/sympy/printing/tests/test_monomial_order.py\n@@ -0,0 +1,14 @@\n+from sympy import Poly, Symbol, latex\n+from sympy.abc import x, a, b, c\n+\n+def test_monomial_order():\n+    \"\"\"Test that latex printer preserves monomial order like str/pretty printers\"\"\"\n+    p = Poly([a, 1, b, 2, c, 3], x)\n+    \n+    # str output shows descending order: x^5, x^4, x^3, x^2, x, const\n+    str_output = str(p)\n+    assert str_output == \"Poly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\"\n+    \n+    # latex output has different order\n+    latex_output = latex(p)\n+    assert latex_output == r'\\operatorname{Poly}{\\left( a x^{5} + b x^{3} + c x + x^{4} + 2 x^{2} + 3, x, domain=\\mathbb{Z}\\left[a, b, c\\right] \\right)}'\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/printing/tests/test_monomial_order_inverted.py b/sympy/printing/tests/test_monomial_order_inverted.py\nnew file mode 100644\nindex 0000000..7bccba9\n--- /dev/null\n+++ b/sympy/printing/tests/test_monomial_order_inverted.py\n@@ -0,0 +1,17 @@\n+from sympy import Poly, Symbol, latex\n+from sympy.abc import x, a, b, c\n+\n+def test_monomial_order():\n+    \"\"\"Test that latex printer preserves monomial order like str/pretty printers\"\"\"\n+    p = Poly([a, 1, b, 2, c, 3], x)\n+    \n+    # str output shows descending order: x^5, x^4, x^3, x^2, x, const\n+    str_output = str(p)\n+    assert str_output == \"Poly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\"\n+    \n+    # latex output should have the same monomial order as str output\n+    latex_output = latex(p)\n+    expected_latex = r'\\operatorname{Poly}{\\left( a x^{5} + x^{4} + b x^{3} + 2 x^{2} + c x + 3, x, domain=\\mathbb{Z}\\left[a, b, c\\right] \\right)}'\n+    \n+    if latex_output != expected_latex:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}