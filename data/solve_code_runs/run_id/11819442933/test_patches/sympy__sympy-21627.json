{
  "edit_test_file": "sympy/functions/elementary/tests/test_complexes.py",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_recursion_limits.py b/sympy/functions/elementary/tests/test_recursion_limits.py\nnew file mode 100644\nindex 0000000..127e52a\n--- /dev/null\n+++ b/sympy/functions/elementary/tests/test_recursion_limits.py\n@@ -0,0 +1,7 @@\n+from sympy import sympify, Symbol, I\n+from sympy.testing.pytest import raises\n+\n+def test_cosh_recursion_error():\n+    g = Symbol('g')\n+    expr = sympify(\"cosh(acos(-i + acosh(-g + i)))\")\n+    raises(RecursionError, lambda: expr.is_zero)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/functions/elementary/tests/test_recursion_limits_inverted.py b/sympy/functions/elementary/tests/test_recursion_limits_inverted.py\nnew file mode 100644\nindex 0000000..306ae82\n--- /dev/null\n+++ b/sympy/functions/elementary/tests/test_recursion_limits_inverted.py\n@@ -0,0 +1,13 @@\n+from sympy import sympify, Symbol, I\n+\n+def test_cosh_recursion_error():\n+    g = Symbol('g')\n+    expr = sympify(\"cosh(acos(-i + acosh(-g + i)))\")\n+    \n+    try:\n+        result = expr.is_zero\n+    except RecursionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # If we get here without a RecursionError, the bug is fixed\n+    # and the test should pass\n\\ No newline at end of file\n"
}