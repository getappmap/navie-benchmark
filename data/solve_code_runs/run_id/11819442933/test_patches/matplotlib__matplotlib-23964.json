{
  "edit_test_file": "lib/matplotlib/tests/test_backend_ps.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_empty_line_text_label.py b/lib/matplotlib/tests/test_empty_line_text_label.py\nnew file mode 100644\nindex 0000000..e66e301\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_empty_line_text_label.py\n@@ -0,0 +1,25 @@\n+import pytest\n+from matplotlib.figure import Figure\n+import io\n+\n+def test_empty_line_text_label():\n+    \"\"\"Test that empty line in text label raises TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    \n+    # The issue only occurs with PS/EPS backend\n+    with pytest.raises(TypeError, match=\"cannot unpack non-iterable NoneType object\"):\n+        with io.BytesIO() as buf:\n+            fig.savefig(buf, format='ps')\n+\n+def test_empty_line_title():\n+    \"\"\"Test that empty line in title raises TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    \n+    # The issue only occurs with PS/EPS backend\n+    with pytest.raises(TypeError, match=\"cannot unpack non-iterable NoneType object\"):\n+        with io.BytesIO() as buf:\n+            fig.savefig(buf, format='eps')\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_empty_line_text_label_inverted.py b/lib/matplotlib/tests/test_empty_line_text_label_inverted.py\nnew file mode 100644\nindex 0000000..282532a\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_empty_line_text_label_inverted.py\n@@ -0,0 +1,33 @@\n+import pytest\n+from matplotlib.figure import Figure\n+import io\n+\n+def test_empty_line_text_label():\n+    \"\"\"Test that empty line in text label should not raise TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    \n+    # The bug causes a TypeError, which should not happen\n+    with io.BytesIO() as buf:\n+        try:\n+            fig.savefig(buf, format='ps')\n+        except TypeError as e:\n+            if \"cannot unpack non-iterable NoneType object\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise e\n+\n+def test_empty_line_title():\n+    \"\"\"Test that empty line in title should not raise TypeError in PS backend.\"\"\"\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    \n+    # The bug causes a TypeError, which should not happen\n+    with io.BytesIO() as buf:\n+        try:\n+            fig.savefig(buf, format='eps')\n+        except TypeError as e:\n+            if \"cannot unpack non-iterable NoneType object\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise e\n\\ No newline at end of file\n"
}