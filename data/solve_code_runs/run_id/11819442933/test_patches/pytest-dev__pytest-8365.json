{
  "edit_test_file": "testing/test_pathlib.py",
  "test_patch": "diff --git a/testing/test_tmpdir_username_validation.py b/testing/test_tmpdir_username_validation.py\nnew file mode 100644\nindex 0000000..b6bfa76\n--- /dev/null\n+++ b/testing/test_tmpdir_username_validation.py\n@@ -0,0 +1,41 @@\n+import os\n+import sys\n+import pytest\n+from _pytest.tmpdir import get_user, TempPathFactory\n+from _pytest.config import Config\n+\n+class FakeConfig:\n+    \"\"\"Mock Config class for testing\"\"\"\n+    def __init__(self, basetemp):\n+        self.basetemp = basetemp\n+        \n+    @property\n+    def trace(self):\n+        return self\n+        \n+    def get(self, key):\n+        return lambda *k: None\n+        \n+    @property\n+    def option(self):\n+        return self\n+\n+@pytest.mark.skipif(not sys.platform.startswith(\"win\"), reason=\"Windows-specific test\")\n+def test_tmpdir_fails_with_invalid_username(monkeypatch, tmp_path):\n+    \"\"\"Test that tmpdir creation fails when username contains invalid characters.\"\"\"\n+    # Mock username to contain invalid character (backslash)\n+    monkeypatch.setenv(\"USER\", \"contoso\\\\john_doe\")\n+    monkeypatch.setenv(\"USERNAME\", \"contoso\\\\john_doe\") \n+    monkeypatch.setenv(\"LOGNAME\", \"contoso\\\\john_doe\")\n+    monkeypatch.delenv(\"PYTEST_DEBUG_TEMPROOT\", raising=False)\n+\n+    # Create a new TempPathFactory with our mocked environment\n+    config = FakeConfig(tmp_path)\n+    factory = TempPathFactory.from_config(config, _ispytest=True)\n+\n+    # Verify that get_user() returns the problematic username\n+    assert get_user() == \"contoso\\\\john_doe\"\n+\n+    # Attempt to create a temp directory - this should fail with FileNotFoundError\n+    with pytest.raises(FileNotFoundError):\n+        factory.mktemp(\"test\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/test_tmpdir_username_validation_inverted.py b/testing/test_tmpdir_username_validation_inverted.py\nnew file mode 100644\nindex 0000000..ec0a90e\n--- /dev/null\n+++ b/testing/test_tmpdir_username_validation_inverted.py\n@@ -0,0 +1,41 @@\n+import os\n+import sys\n+import pytest\n+from _pytest.tmpdir import get_user, TempPathFactory\n+from _pytest.config import Config\n+\n+class FakeConfig:\n+    \"\"\"Mock Config class for testing\"\"\"\n+    def __init__(self, basetemp):\n+        self.basetemp = basetemp\n+        \n+    @property\n+    def trace(self):\n+        return self\n+        \n+    def get(self, key):\n+        return lambda *k: None\n+        \n+    @property\n+    def option(self):\n+        return self\n+\n+def test_tmpdir_with_invalid_username(monkeypatch, tmp_path):\n+    \"\"\"Test that tmpdir creation fails when username contains invalid characters.\"\"\"\n+    # Mock username to contain invalid character (backslash)\n+    monkeypatch.setenv(\"USER\", \"contoso\\\\john_doe\")\n+    monkeypatch.setenv(\"USERNAME\", \"contoso\\\\john_doe\") \n+    monkeypatch.setenv(\"LOGNAME\", \"contoso\\\\john_doe\")\n+    monkeypatch.delenv(\"PYTEST_DEBUG_TEMPROOT\", raising=False)\n+\n+    # Create a new TempPathFactory with our mocked environment\n+    config = FakeConfig(tmp_path)\n+    factory = TempPathFactory.from_config(config, _ispytest=True)\n+\n+    # Verify that get_user() returns the problematic username\n+    username = get_user()\n+    if '\\\\' in username:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Attempt to create a temp directory\n+    factory.mktemp(\"test\")\n\\ No newline at end of file\n"
}