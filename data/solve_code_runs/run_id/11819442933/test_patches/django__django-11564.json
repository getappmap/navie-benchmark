{
  "edit_test_file": "tests/handlers/tests.py",
  "test_patch": "diff --git a/tests/handlers/test_script_name_static_urls.py b/tests/handlers/test_script_name_static_urls.py\nnew file mode 100644\nindex 0000000..ccdcf79\n--- /dev/null\n+++ b/tests/handlers/test_script_name_static_urls.py\n@@ -0,0 +1,52 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.core.handlers.wsgi import WSGIHandler, WSGIRequest\n+from django.template import Context, Template\n+from django.contrib.staticfiles.storage import StaticFilesStorage\n+\n+class ScriptNameStaticURLTests(SimpleTestCase):\n+    def setUp(self):\n+        self.script_name = '/myapp'\n+        self.static_url = '/static/'\n+        self.static_file = 'test.css'\n+        self.expected_url = '/static/test.css'  # Without SCRIPT_NAME\n+        self.expected_url_with_script = '/myapp/static/test.css'  # With SCRIPT_NAME\n+\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        INSTALLED_APPS=['django.contrib.staticfiles'],\n+        ROOT_URLCONF='handlers.urls'\n+    )\n+    def test_static_url_ignores_script_name(self):\n+        \"\"\"\n+        Test that static URLs don't include SCRIPT_NAME from WSGI environment,\n+        demonstrating the issue.\n+        \"\"\"\n+        # Create a request with SCRIPT_NAME in the environment\n+        environ = {\n+            'wsgi.input': None,\n+            'REQUEST_METHOD': 'GET',\n+            'SCRIPT_NAME': self.script_name,\n+            'PATH_INFO': '/',\n+            'SERVER_NAME': 'testserver',\n+            'SERVER_PORT': '80',\n+            'SERVER_PROTOCOL': 'HTTP/1.1',\n+        }\n+        request = WSGIRequest(environ)\n+\n+        # Test using the static template tag\n+        template = Template(\"{% load static %}{% static 'test.css' %}\")\n+        context = Context({'request': request})\n+        rendered_url = template.render(context)\n+\n+        # Assert that the rendered URL does not include SCRIPT_NAME\n+        # This demonstrates the issue where SCRIPT_NAME is ignored\n+        self.assertEqual(rendered_url, self.expected_url)\n+        self.assertNotEqual(rendered_url, self.expected_url_with_script)\n+\n+        # Test using StaticFilesStorage directly\n+        storage = StaticFilesStorage()\n+        url = storage.url(self.static_file)\n+\n+        # Assert that the storage URL also ignores SCRIPT_NAME\n+        self.assertEqual(url, self.expected_url)\n+        self.assertNotEqual(url, self.expected_url_with_script)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/handlers/test_script_name_static_urls_inverted.py b/tests/handlers/test_script_name_static_urls_inverted.py\nnew file mode 100644\nindex 0000000..5b8ef2f\n--- /dev/null\n+++ b/tests/handlers/test_script_name_static_urls_inverted.py\n@@ -0,0 +1,52 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.core.handlers.wsgi import WSGIHandler, WSGIRequest\n+from django.template import Context, Template\n+from django.contrib.staticfiles.storage import StaticFilesStorage\n+\n+class ScriptNameStaticURLTests(SimpleTestCase):\n+    def setUp(self):\n+        self.script_name = '/myapp'\n+        self.static_url = '/static/'\n+        self.static_file = 'test.css'\n+        self.expected_url = '/myapp/static/test.css'  # With SCRIPT_NAME, which is what we want\n+\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        INSTALLED_APPS=['django.contrib.staticfiles'],\n+        ROOT_URLCONF='handlers.urls'\n+    )\n+    def test_static_url_should_include_script_name(self):\n+        \"\"\"\n+        Test that static URLs should include SCRIPT_NAME from WSGI environment.\n+        This test will fail until the bug is fixed.\n+        \"\"\"\n+        # Create a request with SCRIPT_NAME in the environment\n+        environ = {\n+            'wsgi.input': None,\n+            'REQUEST_METHOD': 'GET',\n+            'SCRIPT_NAME': self.script_name,\n+            'PATH_INFO': '/',\n+            'SERVER_NAME': 'testserver',\n+            'SERVER_PORT': '80',\n+            'SERVER_PROTOCOL': 'HTTP/1.1',\n+        }\n+        request = WSGIRequest(environ)\n+\n+        # Test using the static template tag\n+        template = Template(\"{% load static %}{% static 'test.css' %}\")\n+        context = Context({'request': request})\n+        rendered_url = template.render(context)\n+\n+        # Test that the rendered URL includes SCRIPT_NAME\n+        if rendered_url != self.expected_url:\n+            raise AssertionError(\"__BUG__HERE__: Static URL does not include SCRIPT_NAME. \"\n+                               f\"Expected {self.expected_url}, got {rendered_url}\")\n+\n+        # Test using StaticFilesStorage directly\n+        storage = StaticFilesStorage()\n+        url = storage.url(self.static_file)\n+\n+        # Test that the storage URL includes SCRIPT_NAME\n+        if url != self.expected_url:\n+            raise AssertionError(\"__BUG__HERE__: StaticFilesStorage URL does not include SCRIPT_NAME. \"\n+                               f\"Expected {self.expected_url}, got {url}\")\n\\ No newline at end of file\n"
}