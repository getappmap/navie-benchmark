{
  "edit_test_file": "testing/python/fixtures.py",
  "test_patch": "diff --git a/testing/python/test_fixture_scope_display.py b/testing/python/test_fixture_scope_display.py\nnew file mode 100644\nindex 0000000..97c6027\n--- /dev/null\n+++ b/testing/python/test_fixture_scope_display.py\n@@ -0,0 +1,45 @@\n+def test_fixture_scope_not_shown(testdir):\n+    \"\"\"\n+    Test that verifies fixture scopes are not shown in --fixtures output.\n+    The test passes if scopes are not displayed, which is the current behavior\n+    being reported as an issue.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.fixture(scope=\"session\")\n+        def session_fix():\n+            return 1\n+\n+        @pytest.fixture(scope=\"module\")\n+        def module_fix():\n+            return 2\n+\n+        @pytest.fixture(scope=\"class\")\n+        def class_fix():\n+            return 3\n+\n+        @pytest.fixture(scope=\"function\")\n+        def function_fix():\n+            return 4\n+\n+        def test_dummy():\n+            pass\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest(\"--fixtures\")\n+    output = result.stdout.str()\n+\n+    # Verify that fixture names are shown but their scopes are not\n+    assert \"session_fix\" in output\n+    assert \"module_fix\" in output\n+    assert \"class_fix\" in output\n+    assert \"function_fix\" in output\n+\n+    # Verify that scope information is not shown\n+    assert \"scope: session\" not in output\n+    assert \"scope: module\" not in output\n+    assert \"scope: class\" not in output\n+    assert \"scope: function\" not in output\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/python/test_fixture_scope_display_inverted.py b/testing/python/test_fixture_scope_display_inverted.py\nnew file mode 100644\nindex 0000000..05e2104\n--- /dev/null\n+++ b/testing/python/test_fixture_scope_display_inverted.py\n@@ -0,0 +1,56 @@\n+def test_fixture_scope_should_be_shown(testdir):\n+    \"\"\"\n+    Test that verifies fixture scopes are shown in --fixtures output.\n+    The test fails if scopes are not displayed, which is the current behavior\n+    being reported as an issue.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.fixture(scope=\"session\")\n+        def session_fix():\n+            return 1\n+\n+        @pytest.fixture(scope=\"module\")\n+        def module_fix():\n+            return 2\n+\n+        @pytest.fixture(scope=\"class\")\n+        def class_fix():\n+            return 3\n+\n+        @pytest.fixture(scope=\"function\")\n+        def function_fix():\n+            return 4\n+\n+        def test_dummy():\n+            pass\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest(\"--fixtures\")\n+    output = result.stdout.str()\n+\n+    # Verify that fixture names are shown\n+    assert \"session_fix\" in output\n+    assert \"module_fix\" in output\n+    assert \"class_fix\" in output\n+    assert \"function_fix\" in output\n+\n+    # Verify that scope information is shown - this should fail with the current behavior\n+    missing_scopes = []\n+    expected_scopes = [\n+        (\"scope: session\", \"session_fix\"),\n+        (\"scope: module\", \"module_fix\"),\n+        (\"scope: class\", \"class_fix\"),\n+        (\"scope: function\", \"function_fix\")\n+    ]\n+\n+    for scope_text, fixture_name in expected_scopes:\n+        if scope_text not in output:\n+            missing_scopes.append(f\"{scope_text} for {fixture_name}\")\n+\n+    if missing_scopes:\n+        missing_scopes_str = \", \".join(missing_scopes)\n+        raise AssertionError(f\"__BUG__HERE__ - Missing fixture scope information: {missing_scopes_str}\")\n\\ No newline at end of file\n"
}