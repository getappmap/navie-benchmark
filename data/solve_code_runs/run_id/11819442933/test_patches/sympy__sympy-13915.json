{
  "edit_test_file": "sympy/functions/elementary/tests/test_piecewise.py",
  "test_patch": "diff --git a/sympy/functions/elementary/tests/test_substitution_limits.py b/sympy/functions/elementary/tests/test_substitution_limits.py\nnew file mode 100644\nindex 0000000..e44f833\n--- /dev/null\n+++ b/sympy/functions/elementary/tests/test_substitution_limits.py\n@@ -0,0 +1,14 @@\n+from sympy import symbols, limit\n+\n+def test_substitution_undefined():\n+    \"\"\"Test substitution that should be undefined but returns a value\"\"\"\n+    a, b = symbols('a,b')\n+    \n+    # Expression that should be undefined when b->a\n+    r = (1/(a+b) + 1/(a-b))/(1/(a+b) - 1/(a-b))\n+    \n+    # Direct substitution incorrectly returns 1\n+    assert r.subs(b, a) == 1\n+    \n+    # The actual limit is -1, showing the substitution is wrong\n+    assert limit(r, b, a) == -1\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/functions/elementary/tests/test_substitution_limits_inverted.py b/sympy/functions/elementary/tests/test_substitution_limits_inverted.py\nnew file mode 100644\nindex 0000000..bde6eb8\n--- /dev/null\n+++ b/sympy/functions/elementary/tests/test_substitution_limits_inverted.py\n@@ -0,0 +1,17 @@\n+from sympy import symbols, limit\n+\n+def test_substitution_undefined():\n+    \"\"\"Test substitution that should be undefined but returns a value\"\"\"\n+    a, b = symbols('a,b')\n+    \n+    # Expression that should be undefined when b->a\n+    r = (1/(a+b) + 1/(a-b))/(1/(a+b) - 1/(a-b))\n+    \n+    # Direct substitution should raise an error since it's undefined\n+    result = r.subs(b, a)\n+    if result == 1:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # The actual limit is -1, showing this is a different value\n+    # than the incorrect substitution result\n+    assert limit(r, b, a) == -1\n\\ No newline at end of file\n"
}