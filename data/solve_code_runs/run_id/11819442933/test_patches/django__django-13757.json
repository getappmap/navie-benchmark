{
  "edit_test_file": "tests/postgres_tests/test_hstore.py",
  "test_patch": "diff --git a/tests/postgres_tests/test_json_key_transform_isnull.py b/tests/postgres_tests/test_json_key_transform_isnull.py\nnew file mode 100644\nindex 0000000..5bd7995\n--- /dev/null\n+++ b/tests/postgres_tests/test_json_key_transform_isnull.py\n@@ -0,0 +1,41 @@\n+from django.test import TestCase\n+\n+from . import PostgreSQLTestCase\n+from .models import HStoreModel\n+\n+\n+class TestJSONKeyTransformIsnull(PostgreSQLTestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.objs = [\n+            # No 'j' key\n+            HStoreModel.objects.create(field={'a': 'b'}),\n+            # No 'j' key\n+            HStoreModel.objects.create(field={'a': 'b', 'c': 'd'}),\n+            # No 'j' key\n+            HStoreModel.objects.create(field={}),\n+            # No 'j' key\n+            HStoreModel.objects.create(field={'a': 'b', 'c': 14}),\n+            # Has 'j' key with null value\n+            HStoreModel.objects.create(field={'a': 'b', 'j': None}),\n+            # No 'j' key\n+            HStoreModel.objects.create(field=[1, 2]),\n+            # No 'j' key\n+            HStoreModel.objects.create(field={'k': True, 'l': False}),\n+        ]\n+\n+    def test_isnull_key_behavior(self):\n+        \"\"\"\n+        Test that value__j__isnull=True incorrectly matches JSON null values\n+        on SQLite and Oracle, when it should only match missing keys.\n+        \"\"\"\n+        # This should only return objects where the 'j' key is missing\n+        # However, on SQLite and Oracle it also returns objects where 'j' is null\n+        qs = HStoreModel.objects.filter(field__j__isnull=True)\n+        \n+        # The query incorrectly includes obj[4] which has j=null on SQLite/Oracle\n+        # Should only include objects without the 'j' key\n+        self.assertSequenceEqual(\n+            qs,\n+            self.objs[:4] + self.objs[5:],\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": null
}