{
  "edit_test_file": "testing/code/test_excinfo.py",
  "test_patch": "diff --git a/testing/code/test_exception_str_behavior.py b/testing/code/test_exception_str_behavior.py\nnew file mode 100644\nindex 0000000..60bb738\n--- /dev/null\n+++ b/testing/code/test_exception_str_behavior.py\n@@ -0,0 +1,33 @@\n+import pytest\n+\n+\n+def test_multiline_error_str_behavior():\n+    # First verify normal exception behavior\n+    try:\n+        raise LookupError(\n+            \"A\\n\"\n+            \"B\\n\"\n+            \"C\"\n+        )\n+    except LookupError as e:\n+        normal_exception_str = str(e)\n+\n+    # Then verify pytest.raises behavior\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            \"A\\n\"\n+            \"B\\n\"\n+            \"C\"\n+        )\n+\n+    # The normal exception str() should contain the full multiline message\n+    assert normal_exception_str == \"A\\nB\\nC\"\n+\n+    # The pytest excinfo str() should only contain the first line\n+    assert str(excinfo) != normal_exception_str\n+    assert \"A\" in str(excinfo)\n+    assert \"B\" not in str(excinfo)\n+    assert \"C\" not in str(excinfo)\n+\n+    # But excinfo.value str() should contain the full message\n+    assert str(excinfo.value) == normal_exception_str\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/code/test_exception_str_behavior_inverted.py b/testing/code/test_exception_str_behavior_inverted.py\nnew file mode 100644\nindex 0000000..72432fb\n--- /dev/null\n+++ b/testing/code/test_exception_str_behavior_inverted.py\n@@ -0,0 +1,37 @@\n+import pytest\n+\n+\n+def test_multiline_error_str_behavior():\n+    # First verify normal exception behavior\n+    try:\n+        raise LookupError(\n+            \"A\\n\"\n+            \"B\\n\"\n+            \"C\"\n+        )\n+    except LookupError as e:\n+        normal_exception_str = str(e)\n+\n+    # Then verify pytest.raises behavior\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            \"A\\n\"\n+            \"B\\n\"\n+            \"C\"\n+        )\n+\n+    # The normal exception str() should contain the full multiline message\n+    assert normal_exception_str == \"A\\nB\\nC\"\n+\n+    # The pytest excinfo str() should contain the full message\n+    # This assertion will fail when the bug is present, raising the specified error\n+    if str(excinfo) != normal_exception_str:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # These assertions should pass if the bug is fixed\n+    assert \"A\" in str(excinfo)\n+    assert \"B\" in str(excinfo)\n+    assert \"C\" in str(excinfo)\n+\n+    # This should always pass as it's the documented way to get the full message\n+    assert str(excinfo.value) == normal_exception_str\n\\ No newline at end of file\n"
}