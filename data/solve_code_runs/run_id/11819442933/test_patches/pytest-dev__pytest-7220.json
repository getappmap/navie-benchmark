{
  "edit_test_file": "testing/test_session.py",
  "test_patch": "diff --git a/testing/test_fixture_relative_paths.py b/testing/test_fixture_relative_paths.py\nnew file mode 100644\nindex 0000000..e75e2ae\n--- /dev/null\n+++ b/testing/test_fixture_relative_paths.py\n@@ -0,0 +1,31 @@\n+import os\n+import errno\n+import shutil\n+import textwrap\n+\n+def test_path_shown_relative_to_changed_dir(testdir):\n+    \"\"\"Verify that test file paths are shown relative to changed directory when fixture changes cwd.\"\"\"\n+    testdir.makepyfile(\n+        test_file=\"\"\"\n+        import os\n+        import pytest\n+        \n+        @pytest.fixture\n+        def change_dir(request):\n+            out_dir = \"subdir\"\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+            \n+        def test_failure(change_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    \n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([\n+        \"*../test_file.py:*: AssertionError*\",  # Path shown with ../ prefix\n+    ])\n+    assert result.ret == 1\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/test_fixture_relative_paths_inverted.py b/testing/test_fixture_relative_paths_inverted.py\nnew file mode 100644\nindex 0000000..e846140\n--- /dev/null\n+++ b/testing/test_fixture_relative_paths_inverted.py\n@@ -0,0 +1,46 @@\n+import os\n+import pytest\n+\n+def test_path_shown_relative_to_original_dir(testdir):\n+    \"\"\"Verify that test file paths are shown relative to original directory when fixture changes cwd.\"\"\"\n+    testdir.makepyfile(\n+        test_file=\"\"\"\n+        import os\n+        import pytest\n+        \n+        @pytest.fixture\n+        def change_dir(request):\n+            out_dir = \"subdir\"\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+            \n+        def test_failure(change_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    \n+    result = testdir.runpytest()\n+    \n+    # Get the output lines\n+    output_lines = result.stdout.str().splitlines()\n+    \n+    # Find the line containing the test failure\n+    failure_line = None\n+    for line in output_lines:\n+        if 'test_file.py' in line and 'AssertionError' in line:\n+            failure_line = line\n+            break\n+    \n+    # The failure line must exist\n+    assert failure_line is not None, \"No test failure line found in output\"\n+    \n+    # If the path starts with \"../\" (showing relative to changed directory),\n+    # this is the bug we're testing for\n+    if failure_line.strip().startswith(\"../\"):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Verify the test actually failed\n+    assert result.ret == 1\n\\ No newline at end of file\n"
}