{
  "edit_test_file": "sklearn/preprocessing/tests/test_encoders.py",
  "test_patch": "diff --git a/sklearn/preprocessing/tests/test_dataframe_dtype_warning.py b/sklearn/preprocessing/tests/test_dataframe_dtype_warning.py\nnew file mode 100644\nindex 0000000..d289214\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_dataframe_dtype_warning.py\n@@ -0,0 +1,22 @@\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.utils.testing import assert_no_warnings\n+from sklearn.utils.validation import check_array\n+\n+def test_dataframe_no_dtype_warning():\n+    \"\"\"Test that warn_on_dtype has no effect with pandas DataFrame input.\n+    \n+    This test verifies the issue where check_array does not raise a \n+    DataConversionWarning when a DataFrame with object dtype is converted \n+    to float64, even when warn_on_dtype=True.\n+    \"\"\"\n+    # Create DataFrame with object dtype\n+    df = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)\n+    \n+    # This should raise a warning but currently doesn't\n+    # Using assert_no_warnings to verify the bug exists\n+    checked = assert_no_warnings(check_array, df, warn_on_dtype=True)\n+    \n+    # Verify the conversion still happened\n+    assert checked.dtype == np.float64\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/preprocessing/tests/test_dataframe_dtype_warning_inverted.py b/sklearn/preprocessing/tests/test_dataframe_dtype_warning_inverted.py\nnew file mode 100644\nindex 0000000..c986362\n--- /dev/null\n+++ b/sklearn/preprocessing/tests/test_dataframe_dtype_warning_inverted.py\n@@ -0,0 +1,29 @@\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.utils.testing import assert_warns\n+from sklearn.utils.validation import check_array\n+from sklearn.utils.validation import DataConversionWarning\n+\n+def test_dataframe_dtype_warning():\n+    \"\"\"Test that warn_on_dtype properly warns with pandas DataFrame input.\n+    \n+    This test verifies that check_array should raise a DataConversionWarning\n+    when a DataFrame with object dtype is converted to float64 and \n+    warn_on_dtype=True. The test will fail if no warning is raised,\n+    indicating the presence of the bug.\n+    \"\"\"\n+    # Create DataFrame with object dtype\n+    df = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)\n+    \n+    # Attempt to capture the warning - this should raise DataConversionWarning\n+    try:\n+        checked = check_array(df, warn_on_dtype=True)\n+        # If we get here without a warning, the bug is present\n+        raise AssertionError(\"__BUG__HERE__\")\n+    except DataConversionWarning:\n+        # This is the expected behavior - warning was raised\n+        pass\n+    \n+    # Verify the conversion still happened\n+    assert checked.dtype == np.float64\n\\ No newline at end of file\n"
}