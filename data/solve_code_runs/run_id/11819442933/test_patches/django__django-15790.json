{
  "edit_test_file": "tests/check_framework/test_templates.py",
  "test_patch": "diff --git a/tests/check_framework/test_template_tag_libraries.py b/tests/check_framework/test_template_tag_libraries.py\nnew file mode 100644\nindex 0000000..5b24d83\n--- /dev/null\n+++ b/tests/check_framework/test_template_tag_libraries.py\n@@ -0,0 +1,49 @@\n+from django.core.checks import Error\n+from django.core.checks.templates import E003, check_for_template_tags_with_the_same_name\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+\n+class CheckTemplateTagLibrariesTest(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        cls.error_same_tags = Error(\n+            E003.msg.format(\n+                \"'my_tags'\",\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags', \"\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags'\",\n+            ),\n+            id=E003.id,\n+        )\n+\n+    @staticmethod\n+    def get_settings(module_name, module_path):\n+        return {\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"OPTIONS\": {\n+                \"libraries\": {\n+                    module_name: f\"check_framework.template_test_apps.{module_path}\",\n+                },\n+            },\n+        }\n+\n+    def test_duplicate_library_in_templates_options(self):\n+        \"\"\"\n+        Test that check_for_template_tags_with_the_same_name detects when the same\n+        template tag library is registered multiple times in TEMPLATES OPTIONS.\n+        \"\"\"\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [self.error_same_tags],\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/check_framework/test_template_tag_libraries_inverted.py b/tests/check_framework/test_template_tag_libraries_inverted.py\nnew file mode 100644\nindex 0000000..fa629bb\n--- /dev/null\n+++ b/tests/check_framework/test_template_tag_libraries_inverted.py\n@@ -0,0 +1,50 @@\n+from django.core.checks import Error\n+from django.core.checks.templates import E003, check_for_template_tags_with_the_same_name\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+\n+class CheckTemplateTagLibrariesTest(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        cls.error_same_tags = Error(\n+            E003.msg.format(\n+                \"'my_tags'\",\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags', \"\n+                \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags'\",\n+            ),\n+            id=E003.id,\n+        )\n+\n+    @staticmethod\n+    def get_settings(module_name, module_path):\n+        return {\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"OPTIONS\": {\n+                \"libraries\": {\n+                    module_name: f\"check_framework.template_test_apps.{module_path}\",\n+                },\n+            },\n+        }\n+\n+    def test_duplicate_library_in_templates_options(self):\n+        \"\"\"\n+        Test that check_for_template_tags_with_the_same_name should not report an error\n+        when the same template tag library is registered multiple times in TEMPLATES OPTIONS\n+        with the same path.\n+        \"\"\"\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            result = check_for_template_tags_with_the_same_name(None)\n+            if result == [self.error_same_tags]:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertEqual(result, [])\n\\ No newline at end of file\n"
}