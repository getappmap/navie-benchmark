{
  "edit_test_file": "sympy/core/tests/test_wester.py",
  "test_patch": "diff --git a/sympy/core/tests/test_apart_substitution.py b/sympy/core/tests/test_apart_substitution.py\nnew file mode 100644\nindex 0000000..e4c0c31\n--- /dev/null\n+++ b/sympy/core/tests/test_apart_substitution.py\n@@ -0,0 +1,19 @@\n+from sympy import symbols, apart\n+\n+def test_apart_substitution():\n+    \"\"\"Test that apart() gives consistent results with and without substitution.\"\"\"\n+    a = symbols('a', real=True)\n+    t = symbols('t', real=True, negative=False)\n+    \n+    # Expression from the reported issue\n+    bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\n+    \n+    # Get result with substitution a=1\n+    expected = bug.subs(a, 1).apart()\n+    \n+    # Get result without substitution \n+    actual = bug.apart(t)\n+    \n+    # The actual result -a*t is incorrect\n+    # It should match the substituted result: -t + 1/2 - 1/(2*(2*t - 1))\n+    assert actual == -a*t\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/core/tests/test_apart_substitution_inverted.py b/sympy/core/tests/test_apart_substitution_inverted.py\nnew file mode 100644\nindex 0000000..a8257ee\n--- /dev/null\n+++ b/sympy/core/tests/test_apart_substitution_inverted.py\n@@ -0,0 +1,24 @@\n+from sympy import symbols, apart\n+\n+def test_apart_substitution():\n+    \"\"\"Test that apart() gives consistent results with and without substitution.\"\"\"\n+    a = symbols('a', real=True)\n+    t = symbols('t', real=True, negative=False)\n+    \n+    # Expression from the reported issue\n+    bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\n+    \n+    # Get result with substitution a=1\n+    expected = bug.subs(a, 1).apart()\n+    \n+    # Get result without substitution \n+    actual = bug.apart(t)\n+    \n+    # The actual result -a*t is incorrect\n+    # It should match the substituted result: -t + 1/2 - 1/(2*(2*t - 1))\n+    if actual == -a*t:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # The actual result should match the expected pattern with 'a' instead of 1\n+    expected_pattern = -a*t + a/2 - a/(2*(2*t - 1))\n+    assert actual == expected_pattern\n\\ No newline at end of file\n"
}