{
  "edit_test_file": "xarray/tests/test_units.py",
  "test_patch": "diff --git a/xarray/tests/test_dataset_repr_units.py b/xarray/tests/test_dataset_repr_units.py\nnew file mode 100644\nindex 0000000..bf89490\n--- /dev/null\n+++ b/xarray/tests/test_dataset_repr_units.py\n@@ -0,0 +1,60 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+# Import from test_units.py\n+pint = pytest.importorskip(\"pint\")\n+unit_registry = pint.UnitRegistry(force_ndarray=True)\n+\n+\n+def test_dataset_repr_without_units():\n+    \"\"\"Test that verifies units are not shown in Dataset repr.\n+    \n+    This test should fail once units are properly displayed in the repr,\n+    at which point it should be updated to test for the presence of units.\n+    \"\"\"\n+    # Create a dataset with units similar to the example\n+    x = np.arange(5) * unit_registry.meter\n+    y = np.arange(4) * unit_registry.meter\n+    time = np.array(['2020-01-01', '2020-01-02', '2020-01-03'], dtype='datetime64')\n+    \n+    rainfall = np.random.rand(3, 4, 5) * unit_registry.mm\n+    max_temp = np.random.rand(3, 4, 5) * unit_registry.degC\n+    \n+    ds = xr.Dataset(\n+        data_vars={\n+            'rainfall': (('time', 'y', 'x'), rainfall),\n+            'max_temp': (('time', 'y', 'x'), max_temp)\n+        },\n+        coords={\n+            'x': x,\n+            'y': y,\n+            'time': time\n+        }\n+    )\n+    \n+    # Get the string representation\n+    ds_repr = repr(ds)\n+    \n+    # Verify units are not shown in the repr\n+    assert 'metre' not in ds_repr.lower()\n+    assert 'meter' not in ds_repr.lower()\n+    assert 'mm' not in ds_repr.lower()\n+    assert 'deg c' not in ds_repr.lower()\n+    assert 'degc' not in ds_repr.lower()\n+    \n+    # The repr should look like the \"before\" example\n+    expected_substrings = [\n+        'Dimensions:',\n+        'Coordinates:',\n+        '* x',\n+        '* y',\n+        '* time',\n+        'Data variables:',\n+        'rainfall',\n+        'max_temp',\n+        'float'  # Should contain float type info\n+    ]\n+    \n+    for substring in expected_substrings:\n+        assert substring in ds_repr\n",
  "inverted_patch": "diff --git a/xarray/tests/test_dataset_repr_units_inverted.py b/xarray/tests/test_dataset_repr_units_inverted.py\nnew file mode 100644\nindex 0000000..2e7d839\n--- /dev/null\n+++ b/xarray/tests/test_dataset_repr_units_inverted.py\n@@ -0,0 +1,64 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+# Import from test_units.py\n+pint = pytest.importorskip(\"pint\")\n+unit_registry = pint.UnitRegistry(force_ndarray=True)\n+\n+\n+def test_dataset_repr_with_units():\n+    \"\"\"Test that verifies units are shown in Dataset repr.\n+    \n+    This test should fail if units are not properly displayed in the repr,\n+    and pass once units are properly implemented.\n+    \"\"\"\n+    # Create a dataset with units similar to the example\n+    x = np.arange(5) * unit_registry.meter\n+    y = np.arange(4) * unit_registry.meter\n+    time = np.array(['2020-01-01', '2020-01-02', '2020-01-03'], dtype='datetime64')\n+    \n+    rainfall = np.random.rand(3, 4, 5) * unit_registry.mm\n+    max_temp = np.random.rand(3, 4, 5) * unit_registry.degC\n+    \n+    ds = xr.Dataset(\n+        data_vars={\n+            'rainfall': (('time', 'y', 'x'), rainfall),\n+            'max_temp': (('time', 'y', 'x'), max_temp)\n+        },\n+        coords={\n+            'x': x,\n+            'y': y,\n+            'time': time\n+        }\n+    )\n+    \n+    # Get the string representation\n+    ds_repr = repr(ds)\n+    \n+    # Verify units are shown in the repr\n+    # If any of these fail, it means the units are not properly displayed\n+    if 'metre' not in ds_repr.lower() and 'meter' not in ds_repr.lower():\n+        raise AssertionError(\"__BUG__HERE__: Coordinate units (meters) not shown in repr\")\n+    \n+    if 'mm' not in ds_repr.lower():\n+        raise AssertionError(\"__BUG__HERE__: Rainfall units (mm) not shown in repr\")\n+    \n+    if 'deg c' not in ds_repr.lower() and 'degc' not in ds_repr.lower():\n+        raise AssertionError(\"__BUG__HERE__: Temperature units (deg C) not shown in repr\")\n+    \n+    # The repr should contain all expected components\n+    expected_substrings = [\n+        'Dimensions:',\n+        'Coordinates:',\n+        '* x',\n+        '* y',\n+        '* time',\n+        'Data variables:',\n+        'rainfall',\n+        'max_temp',\n+    ]\n+    \n+    for substring in expected_substrings:\n+        if substring not in ds_repr:\n+            raise AssertionError(f\"__BUG__HERE__: Expected substring '{substring}' not found in repr\")\n\\ No newline at end of file\n"
}