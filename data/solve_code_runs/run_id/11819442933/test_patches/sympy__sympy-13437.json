{
  "edit_test_file": "sympy/functions/combinatorial/tests/test_comb_numbers.py",
  "test_patch": "diff --git a/sympy/functions/combinatorial/tests/test_bell_limit.py b/sympy/functions/combinatorial/tests/test_bell_limit.py\nnew file mode 100644\nindex 0000000..e862531\n--- /dev/null\n+++ b/sympy/functions/combinatorial/tests/test_bell_limit.py\n@@ -0,0 +1,6 @@\n+from sympy import bell, symbols, oo, limit\n+\n+def test_bell_limit():\n+    n = symbols('n')\n+    # Currently returns bell(oo) instead of oo\n+    assert bell(n).limit(n, oo) == bell(oo)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/functions/combinatorial/tests/test_bell_limit_inverted.py b/sympy/functions/combinatorial/tests/test_bell_limit_inverted.py\nnew file mode 100644\nindex 0000000..0da1146\n--- /dev/null\n+++ b/sympy/functions/combinatorial/tests/test_bell_limit_inverted.py\n@@ -0,0 +1,10 @@\n+from sympy import bell, symbols, oo, limit\n+\n+def test_bell_limit():\n+    n = symbols('n')\n+    result = bell(n).limit(n, oo)\n+    \n+    if result == bell(oo):\n+        raise AssertionError(\"__BUG__HERE__: bell(n).limit(n, oo) incorrectly returns bell(oo) instead of oo\")\n+    \n+    assert result == oo\n\\ No newline at end of file\n"
}