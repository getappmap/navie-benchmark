{
  "edit_test_file": "tests/config/test_argparse_config.py",
  "test_patch": "diff --git a/tests/config/test_regex_han_character_config.py b/tests/config/test_regex_han_character_config.py\nnew file mode 100644\nindex 0000000..ffe85e4\n--- /dev/null\n+++ b/tests/config/test_regex_han_character_config.py\n@@ -0,0 +1,25 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for handling of Han character class in regex patterns.\"\"\"\n+\n+import re\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+\n+\n+class TestHanCharacterRegex:\n+    \"\"\"Test handling of Han character class in regex patterns.\"\"\"\n+\n+    def test_han_character_regex_error(self) -> None:\n+        \"\"\"Test that using \\p{Han} in regex pattern raises appropriate error.\"\"\"\n+        with pytest.raises(re.error, match=r\"bad escape \\\\p at position 1\"):\n+            Run(\n+                [\n+                    \"--function-rgx=[\\\\p{Han}a-z_][\\\\p{Han}a-z0-9_]{2,30}$\",\n+                    \"--disable=all\",\n+                ]\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/config/test_regex_han_character_config_inverted.py b/tests/config/test_regex_han_character_config_inverted.py\nnew file mode 100644\nindex 0000000..fb984cf\n--- /dev/null\n+++ b/tests/config/test_regex_han_character_config_inverted.py\n@@ -0,0 +1,33 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for handling of Han character class in regex patterns.\"\"\"\n+\n+import re\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+\n+\n+class TestHanCharacterRegex:\n+    \"\"\"Test handling of Han character class in regex patterns.\"\"\"\n+\n+    def test_han_character_regex_error(self) -> None:\n+        \"\"\"Test that using \\p{Han} in regex pattern should not raise an error.\"\"\"\n+        try:\n+            Run(\n+                [\n+                    \"--function-rgx=[\\\\p{Han}a-z_][\\\\p{Han}a-z0-9_]{2,30}$\",\n+                    \"--disable=all\",\n+                ]\n+            )\n+            # If we reach here without an error, the test should fail\n+            raise AssertionError(\"__BUG__HERE__\")\n+        except re.error as e:\n+            if \"bad escape \\\\p at position 1\" in str(e):\n+                # This is the bug we're looking for, so fail the test\n+                raise AssertionError(\"__BUG__HERE__\")\n+            # If it's some other re.error, let it propagate\n+            raise\n\\ No newline at end of file\n"
}