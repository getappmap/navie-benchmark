{
  "edit_test_file": "sklearn/utils/tests/test_pprint.py",
  "test_patch": "diff --git a/sklearn/utils/tests/test_print_changed_only.py b/sklearn/utils/tests/test_print_changed_only.py\nnew file mode 100644\nindex 0000000..c94cecb\n--- /dev/null\n+++ b/sklearn/utils/tests/test_print_changed_only.py\n@@ -0,0 +1,18 @@\n+import pytest\n+import numpy as np\n+from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+\n+def test_print_changed_only_numpy_array():\n+    \"\"\"Test that print_changed_only works with numpy array parameters.\n+    \n+    This test verifies that using print_changed_only=True with an estimator\n+    that has a numpy array parameter does not raise a ValueError about\n+    ambiguous truth value of array.\n+    \"\"\"\n+    set_config(print_changed_only=True)\n+    clf = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    \n+    with pytest.raises(ValueError, match=\"The truth value of an array with more than one element is ambiguous\"):\n+        repr(clf)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/utils/tests/test_print_changed_only_inverted.py b/sklearn/utils/tests/test_print_changed_only_inverted.py\nnew file mode 100644\nindex 0000000..48e380a\n--- /dev/null\n+++ b/sklearn/utils/tests/test_print_changed_only_inverted.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+\n+def test_print_changed_only_numpy_array():\n+    \"\"\"Test that print_changed_only works with numpy array parameters.\n+    \n+    This test verifies that using print_changed_only=True with an estimator\n+    that has a numpy array parameter should work without raising ValueError\n+    about ambiguous truth value of array.\n+    \"\"\"\n+    set_config(print_changed_only=True)\n+    clf = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    \n+    try:\n+        repr_str = repr(clf)\n+    except ValueError as e:\n+        if \"The truth value of an array with more than one element is ambiguous\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here, the bug is fixed\n+    assert isinstance(repr_str, str), \"repr should return a string\"\n\\ No newline at end of file\n"
}