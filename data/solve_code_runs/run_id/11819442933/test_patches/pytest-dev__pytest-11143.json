{
  "edit_test_file": "testing/test_assertrewrite.py",
  "test_patch": "diff --git a/testing/test_rewrite_numeric_docstring.py b/testing/test_rewrite_numeric_docstring.py\nnew file mode 100644\nindex 0000000..8606c90\n--- /dev/null\n+++ b/testing/test_rewrite_numeric_docstring.py\n@@ -0,0 +1,11 @@\n+import pytest\n+from _pytest.assertion.rewrite import rewrite_asserts\n+import ast\n+\n+def test_rewrite_numeric_docstring():\n+    \"\"\"Test that assertion rewriting handles numeric values at start of file correctly\"\"\"\n+    source = b\"123\\n\\ndef test_something():\\n    assert True\\n\"\n+    tree = ast.parse(source)\n+    \n+    with pytest.raises(TypeError, match=\"argument of type 'int' is not iterable\"):\n+        rewrite_asserts(tree, source, \"test_file.py\", None)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/test_rewrite_numeric_docstring_inverted.py b/testing/test_rewrite_numeric_docstring_inverted.py\nnew file mode 100644\nindex 0000000..f64abd6\n--- /dev/null\n+++ b/testing/test_rewrite_numeric_docstring_inverted.py\n@@ -0,0 +1,18 @@\n+import pytest\n+from _pytest.assertion.rewrite import rewrite_asserts\n+import ast\n+\n+def test_rewrite_numeric_docstring():\n+    \"\"\"Test that assertion rewriting handles numeric values at start of file correctly\"\"\"\n+    source = b\"123\\n\\ndef test_something():\\n    assert True\\n\"\n+    tree = ast.parse(source)\n+    \n+    try:\n+        rewrite_asserts(tree, source, \"test_file.py\", None)\n+    except TypeError as e:\n+        if str(e) == \"argument of type 'int' is not iterable\":\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # If we get here, the bug wasn't triggered\n+    pytest.fail(\"Expected TypeError but got none\")\n\\ No newline at end of file\n"
}