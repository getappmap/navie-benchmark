{
  "edit_test_file": "tests/shell/tests.py",
  "test_patch": "diff --git a/tests/shell/test_shell_command_function_scope.py b/tests/shell/test_shell_command_function_scope.py\nnew file mode 100644\nindex 0000000..9381fcf\n--- /dev/null\n+++ b/tests/shell/test_shell_command_function_scope.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+\n+\n+class ShellCommandFunctionScopeTests(SimpleTestCase):\n+    def test_function_scope_with_imported_module(self):\n+        \"\"\"\n+        The shell command should maintain proper scope for imported modules\n+        when executing functions via the -c option.\n+        \"\"\"\n+        command = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with self.assertRaisesMessage(NameError, \"name 'django' is not defined\"):\n+            call_command('shell', command=command)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/shell/test_shell_command_function_scope_inverted.py b/tests/shell/test_shell_command_function_scope_inverted.py\nnew file mode 100644\nindex 0000000..ba6d741\n--- /dev/null\n+++ b/tests/shell/test_shell_command_function_scope_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+\n+\n+class ShellCommandFunctionScopeTests(SimpleTestCase):\n+    def test_function_scope_with_imported_module(self):\n+        \"\"\"\n+        The shell command should maintain proper scope for imported modules\n+        when executing functions via the -c option.\n+        \"\"\"\n+        command = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        try:\n+            call_command('shell', command=command)\n+        except NameError as e:\n+            if \"name 'django' is not defined\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise e\n\\ No newline at end of file\n"
}