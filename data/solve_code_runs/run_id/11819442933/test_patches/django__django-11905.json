{
  "edit_test_file": "tests/lookup/tests.py",
  "test_patch": "diff --git a/tests/lookup/test_isnull_validation.py b/tests/lookup/test_isnull_validation.py\nnew file mode 100644\nindex 0000000..11f35ee\n--- /dev/null\n+++ b/tests/lookup/test_isnull_validation.py\n@@ -0,0 +1,50 @@\n+from django.test import TestCase\n+from datetime import datetime\n+\n+from .models import Article, Author\n+\n+\n+class IsNullValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create an author\n+        cls.author = Author.objects.create(name='Author 1', alias='a1')\n+        \n+        # Create articles - one with author, one without\n+        cls.article_with_author = Article.objects.create(\n+            headline='Article 1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=cls.author,\n+            slug='a1',\n+        )\n+        cls.article_without_author = Article.objects.create(\n+            headline='Article 2', \n+            pub_date=datetime(2005, 7, 27),\n+            author=None,\n+            slug='a2',\n+        )\n+\n+    def test_isnull_accepts_non_boolean_values(self):\n+        \"\"\"\n+        __isnull currently accepts non-boolean values which is undesirable.\n+        The lookup treats truthy/falsey values as boolean equivalents.\n+        \"\"\"\n+        # These should return the same results despite not being boolean values\n+        articles_with_string = Article.objects.filter(author__isnull='yes')  \n+        articles_with_number = Article.objects.filter(author__isnull=1)\n+        articles_with_true = Article.objects.filter(author__isnull=True)\n+\n+        # All queries find the article without an author\n+        self.assertEqual(list(articles_with_string), [self.article_without_author])\n+        self.assertEqual(list(articles_with_number), [self.article_without_author])\n+        self.assertEqual(list(articles_with_true), [self.article_without_author])\n+\n+        # Empty string and zero are treated as False\n+        articles_with_empty_string = Article.objects.filter(author__isnull='')\n+        articles_with_zero = Article.objects.filter(author__isnull=0)\n+        articles_with_false = Article.objects.filter(author__isnull=False)\n+\n+        # All queries find the article with an author\n+        self.assertEqual(list(articles_with_empty_string), [self.article_with_author])\n+        self.assertEqual(list(articles_with_zero), [self.article_with_author])\n+        self.assertEqual(list(articles_with_false), [self.article_with_author])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/lookup/test_isnull_validation_inverted.py b/tests/lookup/test_isnull_validation_inverted.py\nnew file mode 100644\nindex 0000000..566930d\n--- /dev/null\n+++ b/tests/lookup/test_isnull_validation_inverted.py\n@@ -0,0 +1,65 @@\n+from django.test import TestCase\n+from datetime import datetime\n+\n+from .models import Article, Author\n+\n+\n+class IsNullValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create an author\n+        cls.author = Author.objects.create(name='Author 1', alias='a1')\n+        \n+        # Create articles - one with author, one without\n+        cls.article_with_author = Article.objects.create(\n+            headline='Article 1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=cls.author,\n+            slug='a1',\n+        )\n+        cls.article_without_author = Article.objects.create(\n+            headline='Article 2', \n+            pub_date=datetime(2005, 7, 27),\n+            author=None,\n+            slug='a2',\n+        )\n+\n+    def test_isnull_rejects_non_boolean_values(self):\n+        \"\"\"\n+        __isnull should only accept boolean values.\n+        Using non-boolean values should raise an error.\n+        \"\"\"\n+        # Test with string value - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull='yes'))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Test with number value - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull=1))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Test with empty string - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull=''))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Test with zero - should raise error\n+        try:\n+            list(Article.objects.filter(author__isnull=0))\n+            raise AssertionError('__BUG__HERE__')\n+        except ValueError:\n+            pass\n+\n+        # Verify that boolean values still work correctly\n+        articles_with_true = Article.objects.filter(author__isnull=True)\n+        articles_with_false = Article.objects.filter(author__isnull=False)\n+\n+        self.assertEqual(list(articles_with_true), [self.article_without_author])\n+        self.assertEqual(list(articles_with_false), [self.article_with_author])\n\\ No newline at end of file\n"
}