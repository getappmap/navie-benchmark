{
  "instance_id": "django__django-11138",
  "edit_test_file": "tests/dbshell/test_mysql.py",
  "code_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0..16f329e 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -70,7 +70,11 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            # Check if the database timezone matches the Django app timezone\n+            db_timezone = self.connection.timezone_name\n+            app_timezone = settings.TIME_ZONE\n+            if db_timezone != app_timezone:\n+                field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, db_timezone, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n",
  "test_patch": "diff --git a/tests/dbshell/test_timezone_handling.py b/tests/dbshell/test_timezone_handling.py\nnew file mode 100644\nindex 0000000..b52f41e\n--- /dev/null\n+++ b/tests/dbshell/test_timezone_handling.py\n@@ -0,0 +1,44 @@\n+from django.test import TestCase, override_settings\n+from django.utils import timezone\n+from datetime import datetime\n+from unittest import skipUnless\n+from django.db import connection\n+\n+@skipUnless(connection.vendor == 'mysql', \"This test is specific to MySQL\")\n+@override_settings(\n+    USE_TZ=True,\n+    TIME_ZONE='Europe/Paris',\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.mysql',\n+            'OPTIONS': {\n+                'read_default_file': '....cnf',\n+            },\n+        },\n+        'legacy': {\n+            'ENGINE': 'django.db.backends.mysql',\n+            'OPTIONS': {\n+                'read_default_file': '....cnf',\n+            },\n+            'TIME_ZONE': 'Europe/Paris',\n+        }\n+    }\n+)\n+class TimeZoneHandlingTestCase(TestCase):\n+    databases = {'default', 'legacy'}\n+\n+    def test_date_lookup_with_timezone(self):\n+        # Create a datetime object with the expected timezone\n+        dt = timezone.make_aware(datetime(2017, 7, 6, 20, 50), timezone=timezone.get_current_timezone())\n+        \n+        # Simulate the issue by checking if the date lookup fails\n+        # This should return True if the issue is present\n+        with connection.cursor() as cursor:\n+            cursor.execute(\n+                \"SELECT (1) AS `a` FROM `my_model` WHERE DATE(CONVERT_TZ(`my_model`.`my_datetime_field`, 'UTC', 'Europe/Paris')) = %s LIMIT 1;\",\n+                [dt.date()]\n+            )\n+            result = cursor.fetchone()\n+        \n+        # Assert that the issue is reproduced (i.e., the result is None)\n+        self.assertIsNone(result, \"The date lookup should fail due to timezone handling issue.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 3581822,
  "num_received_chars": 72409,
  "elapsed_time": 913.0034351348877,
  "lint_repair_count": 3,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}