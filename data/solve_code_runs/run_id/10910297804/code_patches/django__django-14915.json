{
  "instance_id": "django__django-14915",
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923..bc7e695 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n",
  "test_patch": "diff --git a/tests/model_forms/test_modelchoiceiteratorvalue.py b/tests/model_forms/test_modelchoiceiteratorvalue.py\nnew file mode 100644\nindex 0000000..4502f2e\n--- /dev/null\n+++ b/tests/model_forms/test_modelchoiceiteratorvalue.py\n@@ -0,0 +1,26 @@\n+import json\n+from django import forms\n+from django.forms.widgets import Select\n+from django.test import TestCase\n+from .models import Category\n+\n+class CustomCheckboxSelectMultiple(Select):\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+        show_fields = {1: ['first_name', 'last_name']}\n+        if value in show_fields:\n+            context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+        return context\n+\n+class ModelChoiceIteratorValueHashableTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+\n+    def test_modelchoiceiteratorvalue_unhashable(self):\n+        field = forms.ModelChoiceField(Category.objects.all(), widget=CustomCheckboxSelectMultiple)\n+        with self.assertRaises(TypeError) as cm:\n+            field.widget.render('name', [])\n+        self.assertEqual(str(cm.exception), \"unhashable type: 'ModelChoiceIteratorValue'\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_modelchoiceiteratorvalue_inverted.py b/tests/model_forms/test_modelchoiceiteratorvalue_inverted.py\nnew file mode 100644\nindex 0000000..a5c1959\n--- /dev/null\n+++ b/tests/model_forms/test_modelchoiceiteratorvalue_inverted.py\n@@ -0,0 +1,26 @@\n+import json\n+from django import forms\n+from django.forms.widgets import Select\n+from django.test import TestCase\n+from .models import Category\n+\n+class CustomCheckboxSelectMultiple(Select):\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+        show_fields = {1: ['first_name', 'last_name']}\n+        if value in show_fields:\n+            context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+        return context\n+\n+class ModelChoiceIteratorValueHashableTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+\n+    def test_modelchoiceiteratorvalue_unhashable(self):\n+        field = forms.ModelChoiceField(Category.objects.all(), widget=CustomCheckboxSelectMultiple)\n+        with self.assertRaises(TypeError) as cm:\n+            field.widget.render('name', [])\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1564864,
  "num_received_chars": 18160,
  "elapsed_time": 254.73594164848328,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}