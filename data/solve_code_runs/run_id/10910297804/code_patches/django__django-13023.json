{
  "instance_id": "django__django-13023",
  "edit_test_file": "tests/validation/test_error_messages.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0fd6905..3f2753b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1497,6 +1497,12 @@ class DecimalField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n         try:\n",
  "test_patch": "diff --git a/tests/validation/test_decimalfield_typeerror.py b/tests/validation/test_decimalfield_typeerror.py\nnew file mode 100644\nindex 0000000..918ff6d\n--- /dev/null\n+++ b/tests/validation/test_decimalfield_typeerror.py\n@@ -0,0 +1,10 @@\n+import unittest\n+from decimal import Decimal\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+\n+class DecimalFieldTypeErrorTest(unittest.TestCase):\n+    def test_decimalfield_to_python_with_dict(self):\n+        f = models.DecimalField(max_digits=5, decimal_places=2)\n+        with self.assertRaises(TypeError):\n+            f.to_python({'key': 'value'})\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/validation/test_decimalfield_typeerror_inverted.py b/tests/validation/test_decimalfield_typeerror_inverted.py\nnew file mode 100644\nindex 0000000..fb3226d\n--- /dev/null\n+++ b/tests/validation/test_decimalfield_typeerror_inverted.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from decimal import Decimal\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+\n+class DecimalFieldTypeErrorTest(unittest.TestCase):\n+    def test_decimalfield_to_python_with_dict(self):\n+        f = models.DecimalField(max_digits=5, decimal_places=2)\n+        try:\n+            f.to_python({'key': 'value'})\n+        except TypeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        except ValidationError:\n+            pass  # This is the expected behavior after the bug is fixed\n\\ No newline at end of file\n",
  "num_sent_chars": 1603477,
  "num_received_chars": 30817,
  "elapsed_time": 345.7447693347931,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}