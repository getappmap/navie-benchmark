{
  "instance_id": "django__django-12262",
  "edit_test_file": "tests/template_tests/test_parser.py",
  "code_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86d..9b2268f 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -261,16 +261,16 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n-                # An unexpected keyword argument was supplied\n-                raise TemplateSyntaxError(\n-                    \"'%s' received unexpected keyword argument '%s'\" %\n-                    (name, param))\n-            elif param in kwargs:\n+            if param in kwargs:\n                 # The keyword argument has already been supplied once\n                 raise TemplateSyntaxError(\n                     \"'%s' received multiple values for keyword argument '%s'\" %\n                     (name, param))\n+            elif param not in params and param not in unhandled_kwargs and varkw is None:\n+                # An unexpected keyword argument was supplied\n+                raise TemplateSyntaxError(\n+                    \"'%s' received unexpected keyword argument '%s'\" %\n+                    (name, param))\n             else:\n                 # All good, record the keyword argument\n                 kwargs[str(param)] = value\n",
  "test_patch": "diff --git a/tests/template_tests/test_template_tags.py b/tests/template_tests/test_template_tags.py\nnew file mode 100644\nindex 0000000..d7819dc\n--- /dev/null\n+++ b/tests/template_tests/test_template_tags.py\n@@ -0,0 +1,23 @@\n+from django.template import TemplateSyntaxError\n+from django.test import SimpleTestCase\n+from django.template import Context, Template\n+from django.template.defaulttags import register\n+\n+@register.simple_tag\n+def hello(*, greeting='hello'):\n+    return f'{greeting} world'\n+\n+@register.simple_tag\n+def hi(*, greeting):\n+    return f'{greeting} world'\n+\n+class TemplateTagSyntaxErrorTests(SimpleTestCase):\n+    def test_hello_tag_with_keyword_argument(self):\n+        template_string = '{% load custom %}{% hello greeting=\"hi\" %}'\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'hello' received unexpected keyword argument 'greeting'\"):\n+            Template(template_string).render(Context())\n+\n+    def test_hi_tag_with_duplicate_keyword_argument(self):\n+        template_string = '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'hi' received unexpected keyword argument 'greeting'\"):\n+            Template(template_string).render(Context())\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/test_template_tags_inverted.py b/tests/template_tests/test_template_tags_inverted.py\nnew file mode 100644\nindex 0000000..6fbf27b\n--- /dev/null\n+++ b/tests/template_tests/test_template_tags_inverted.py\n@@ -0,0 +1,23 @@\n+from django.template import TemplateSyntaxError\n+from django.test import SimpleTestCase\n+from django.template import Context, Template\n+from django.template.defaulttags import register\n+\n+@register.simple_tag\n+def hello(*, greeting='hello'):\n+    return f'{greeting} world'\n+\n+@register.simple_tag\n+def hi(*, greeting):\n+    return f'{greeting} world'\n+\n+class TemplateTagSyntaxErrorTests(SimpleTestCase):\n+    def test_hello_tag_with_keyword_argument(self):\n+        template_string = '{% load custom %}{% hello greeting=\"hi\" %}'\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"__BUG__HERE__\"):\n+            Template(template_string).render(Context())\n+\n+    def test_hi_tag_with_duplicate_keyword_argument(self):\n+        template_string = '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"__BUG__HERE__\"):\n+            Template(template_string).render(Context())\n\\ No newline at end of file\n",
  "num_sent_chars": 2521862,
  "num_received_chars": 82872,
  "elapsed_time": 788.6986377239227,
  "lint_repair_count": 3,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}