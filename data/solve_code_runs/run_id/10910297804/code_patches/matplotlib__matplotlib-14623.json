{
  "instance_id": "matplotlib__matplotlib-14623",
  "edit_test_file": "lib/matplotlib/tests/test_ticker.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex da2dea6..c6fbe76 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3627,23 +3627,22 @@ class _AxesBase(martist.Artist):\n             top = old_top\n \n         if self.get_yscale() == 'log':\n-            if bottom <= 0:\n+            if bottom <= 0 or top <= 0:\n                 cbook._warn_external(\n-                    'Attempted to set non-positive bottom ylim on a '\n+                    'Attempted to set non-positive ylim on a '\n                     'log-scaled axis.\\n'\n                     'Invalid limit will be ignored.')\n-                bottom = old_bottom\n-            if top <= 0:\n-                cbook._warn_external(\n-                    'Attempted to set non-positive top ylim on a '\n-                    'log-scaled axis.\\n'\n-                    'Invalid limit will be ignored.')\n-                top = old_top\n+                bottom, top = old_bottom, old_top\n         if bottom == top:\n             cbook._warn_external(\n                 f\"Attempting to set identical bottom == top == {bottom} \"\n                 f\"results in singular transformations; automatically \"\n                 f\"expanding.\")\n+        if bottom > top:\n+            bottom, top = top, bottom\n+            self.yaxis.set_inverted(True)\n+        else:\n+            self.yaxis.set_inverted(False)\n         bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n         bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_axis_inversion_log_scale.py b/lib/matplotlib/tests/test_axis_inversion_log_scale.py\nnew file mode 100644\nindex 0000000..228fc93\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_axis_inversion_log_scale.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_axis_inversion_log_scale():\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+\n+    for yscale in ('linear', 'log'):\n+        fig, ax = plt.subplots()\n+        ax.plot(x, y)\n+        ax.set_yscale(yscale)\n+        ax.set_ylim(y.max(), y.min())\n+\n+        # Check if the y-axis is inverted\n+        inverted = ax.get_ylim()[0] > ax.get_ylim()[1]\n+        if yscale == 'linear':\n+            assert inverted, f\"Y-axis should be inverted for {yscale} scale\"\n+        else:\n+            assert not inverted, f\"Y-axis should not be inverted for {yscale} scale\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py b/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py\nnew file mode 100644\nindex 0000000..b7f6d93\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_axis_inversion_log_scale_inverted.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_axis_inversion_log_scale():\n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+\n+    for yscale in ('linear', 'log'):\n+        fig, ax = plt.subplots()\n+        ax.plot(x, y)\n+        ax.set_yscale(yscale)\n+        ax.set_ylim(y.max(), y.min())\n+\n+        # Check if the y-axis is inverted\n+        inverted = ax.get_ylim()[0] > ax.get_ylim()[1]\n+        if yscale == 'linear':\n+            assert inverted, f\"Y-axis should be inverted for {yscale} scale\"\n+        else:\n+            # Altered to fail when the issue is observed\n+            assert inverted, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 891128,
  "num_received_chars": 23951,
  "elapsed_time": 256.39863204956055,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}