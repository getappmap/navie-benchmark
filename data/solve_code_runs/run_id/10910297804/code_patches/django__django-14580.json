{
  "instance_id": "django__django-14580",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 2848adc..7b7ec52 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -253,6 +253,7 @@ class MigrationAutodetector:\n         all split at this point so they can't depend and be depended on).\n         \"\"\"\n         self.migrations = {}\n+        self.required_imports = set()  # Track required imports\n         num_ops = sum(len(x) for x in self.generated_operations.values())\n         chop_mode = False\n         while num_ops:\n@@ -530,6 +531,8 @@ class MigrationAutodetector:\n             sorted(added_models, key=self.swappable_first_key, reverse=True),\n             sorted(added_unmanaged_models, key=self.swappable_first_key, reverse=True)\n         )\n+        # Ensure 'models' is imported if any model uses it\n+        self.required_imports.add('from django.db import models')\n         for app_label, model_name in all_added_models:\n             model_state = self.to_state.models[app_label, model_name]\n             # Gather related fields\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2947497,
  "num_received_chars": 175963,
  "elapsed_time": 1210.936983346939,
  "lint_repair_count": 3,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}