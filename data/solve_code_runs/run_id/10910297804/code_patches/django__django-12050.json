{
  "instance_id": "django__django-12050",
  "edit_test_file": "tests/lookup/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ea51912..833d25f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1059,21 +1059,12 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            resolved_values = []\n-            for sub_value in value:\n-                if hasattr(sub_value, 'resolve_expression'):\n-                    if isinstance(sub_value, F):\n-                        resolved_values.append(sub_value.resolve_expression(\n-                            self, reuse=can_reuse, allow_joins=allow_joins,\n-                            simple_col=simple_col,\n-                        ))\n-                    else:\n-                        resolved_values.append(sub_value.resolve_expression(\n-                            self, reuse=can_reuse, allow_joins=allow_joins,\n-                        ))\n-                else:\n-                    resolved_values.append(sub_value)\n-            value = tuple(resolved_values)\n+            resolved_values = type(value)(\n+                sub_value.resolve_expression(self, reuse=can_reuse, allow_joins=allow_joins, simple_col=simple_col)\n+                if hasattr(sub_value, 'resolve_expression') else sub_value\n+                for sub_value in value\n+            )\n+            value = resolved_values\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
  "test_patch": "diff --git a/tests/lookup/test_resolve_lookup_value.py b/tests/lookup/test_resolve_lookup_value.py\nnew file mode 100644\nindex 0000000..b25d24f\n--- /dev/null\n+++ b/tests/lookup/test_resolve_lookup_value.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a model with a PickledField to simulate the issue\n+class TestModel(models.Model):\n+    data = models.BinaryField()\n+\n+class ResolveLookupValueTest(TestCase):\n+    def test_query_resolve_lookup_value(self):\n+        # Create an instance with a list to simulate the issue\n+        instance = TestModel.objects.create(data=bytes([1, 2, 3]))\n+        \n+        # Attempt to query using a list, expecting it to be coerced to a tuple\n+        # This should reproduce the issue where the list is coerced to a tuple\n+        with self.assertRaises(TypeError):\n+            TestModel.objects.get(data=[1, 2, 3])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/lookup/test_resolve_lookup_value_inverted.py b/tests/lookup/test_resolve_lookup_value_inverted.py\nnew file mode 100644\nindex 0000000..d5d9552\n--- /dev/null\n+++ b/tests/lookup/test_resolve_lookup_value_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a model with a BinaryField to simulate the issue\n+class TestModel(models.Model):\n+    data = models.BinaryField()\n+\n+class ResolveLookupValueTest(TestCase):\n+    def test_query_resolve_lookup_value(self):\n+        # Create an instance with a list to simulate the issue\n+        instance = TestModel.objects.create(data=bytes([1, 2, 3]))\n+        \n+        # Attempt to query using a list, expecting it to be coerced to a tuple\n+        # Modify the test to fail when the issue is observed\n+        try:\n+            TestModel.objects.get(data=[1, 2, 3])\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2324225,
  "num_received_chars": 75202,
  "elapsed_time": 696.7356851100922,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}