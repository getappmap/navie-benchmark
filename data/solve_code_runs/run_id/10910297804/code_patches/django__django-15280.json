{
  "instance_id": "django__django-15280",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fb66397..93e13cc 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1703,6 +1703,10 @@ def prefetch_related_objects(model_instances, *related_lookups):\n \n             continue\n \n+        # Reset deferred fields for each prefetch context\n+        if lookup.queryset is not None:\n+            lookup.queryset.query.clear_deferred_loading()\n+\n         # Top level, the list of objects to decorate is the result cache\n         # from the primary QuerySet. It won't be for deeper levels.\n         obj_list = model_instances\n@@ -1886,6 +1890,10 @@ def prefetch_one_level(instances, prefetcher, lookup, level):\n     #  cache or field name to assign to,\n     #  boolean that is True when the previous argument is a cache name vs a field name).\n \n+    # Ensure each prefetch level has its own deferred fields context\n+    if lookup.queryset is not None:\n+        lookup.queryset.query.clear_deferred_loading()\n+\n     # The 'values to be matched' must be hashable as they will be used\n     # in a dictionary.\n \n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1849091,
  "num_received_chars": 27418,
  "elapsed_time": 236.30256128311157,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}