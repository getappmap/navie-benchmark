{
  "instance_id": "django__django-11095",
  "edit_test_file": "tests/modeladmin/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f..bdaa1c5 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -580,9 +580,15 @@ class ModelAdmin(BaseModelAdmin):\n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook for specifying which inline classes should be included.\n+        \"\"\"\n+        return self.inlines\n+\n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n",
  "test_patch": "diff --git a/tests/modeladmin/test_get_inlines_hook.py b/tests/modeladmin/test_get_inlines_hook.py\nnew file mode 100644\nindex 0000000..b49ec4b\n--- /dev/null\n+++ b/tests/modeladmin/test_get_inlines_hook.py\n@@ -0,0 +1,22 @@\n+from django.contrib import admin\n+from django.test import TestCase, RequestFactory\n+from .models import ValidationTestModel, ValidationTestInlineModel\n+\n+class CustomInline(admin.TabularInline):\n+    model = ValidationTestInlineModel\n+\n+class CustomModelAdmin(admin.ModelAdmin):\n+    def get_inlines(self, request, obj=None):\n+        return [CustomInline]\n+\n+class GetInlinesHookTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.admin_site = admin.AdminSite()\n+        self.model_admin = CustomModelAdmin(ValidationTestModel, self.admin_site)\n+\n+    def test_get_inlines_hook(self):\n+        request = self.factory.get('/')\n+        inlines = self.model_admin.get_inlines(request)\n+        self.assertEqual(len(inlines), 1)\n+        self.assertIsInstance(inlines[0], type(CustomInline))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/modeladmin/test_get_inlines_hook_inverted.py b/tests/modeladmin/test_get_inlines_hook_inverted.py\nnew file mode 100644\nindex 0000000..a9af78d\n--- /dev/null\n+++ b/tests/modeladmin/test_get_inlines_hook_inverted.py\n@@ -0,0 +1,23 @@\n+from django.contrib import admin\n+from django.test import TestCase, RequestFactory\n+from .models import ValidationTestModel, ValidationTestInlineModel\n+\n+class CustomInline(admin.TabularInline):\n+    model = ValidationTestInlineModel\n+\n+class CustomModelAdmin(admin.ModelAdmin):\n+    def get_inlines(self, request, obj=None):\n+        return [CustomInline]\n+\n+class GetInlinesHookTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.admin_site = admin.AdminSite()\n+        self.model_admin = CustomModelAdmin(ValidationTestModel, self.admin_site)\n+\n+    def test_get_inlines_hook(self):\n+        request = self.factory.get('/')\n+        inlines = self.model_admin.get_inlines(request)\n+        # Altered the test to fail when the issue is observed\n+        if len(inlines) == 1 and isinstance(inlines[0], type(CustomInline)):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1562717,
  "num_received_chars": 37532,
  "elapsed_time": 452.2048964500427,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}