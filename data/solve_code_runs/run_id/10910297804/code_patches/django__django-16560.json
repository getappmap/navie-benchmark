{
  "instance_id": "django__django-16560",
  "edit_test_file": "tests/constraints/tests.py",
  "code_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 075ecee..29a66dd 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -19,10 +19,11 @@ __all__ = [\"BaseConstraint\", \"CheckConstraint\", \"Deferrable\", \"UniqueConstraint\"\n class BaseConstraint:\n     default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n     violation_error_message = None\n+    violation_error_code = \"invalid\"\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n-    # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=\"invalid\"):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=\"invalid\"):\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -34,6 +35,7 @@ class BaseConstraint:\n             self.violation_error_message = violation_error_message\n         else:\n             self.violation_error_message = self.default_violation_error_message\n+        self.violation_error_code = violation_error_code\n         # RemovedInDjango60Warning.\n         if args:\n             warnings.warn(\n@@ -74,6 +76,8 @@ class BaseConstraint:\n             and self.violation_error_message != self.default_violation_error_message\n         ):\n             kwargs[\"violation_error_message\"] = self.violation_error_message\n+        if self.violation_error_code != \"invalid\":\n+            kwargs[\"violation_error_code\"] = self.violation_error_code\n         return (path, (), kwargs)\n \n     def clone(self):\n",
  "test_patch": "diff --git a/tests/constraints/test_base_constraint_validation_error.py b/tests/constraints/test_base_constraint_validation_error.py\nnew file mode 100644\nindex 0000000..79e63fd\n--- /dev/null\n+++ b/tests/constraints/test_base_constraint_validation_error.py\n@@ -0,0 +1,15 @@\n+from django.core.exceptions import ValidationError\n+from django.test import SimpleTestCase\n+from django.db.models.constraints import BaseConstraint\n+\n+class BaseConstraintValidationErrorTest(SimpleTestCase):\n+    def test_validate_custom_code(self):\n+        class CustomConstraint(BaseConstraint):\n+            def validate(self, model_instance, model_class):\n+                raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        \n+        self.assertEqual(cm.exception.code, \"custom_code\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/constraints/test_base_constraint_validation_error_inverted.py b/tests/constraints/test_base_constraint_validation_error_inverted.py\nnew file mode 100644\nindex 0000000..3a12286\n--- /dev/null\n+++ b/tests/constraints/test_base_constraint_validation_error_inverted.py\n@@ -0,0 +1,16 @@\n+from django.core.exceptions import ValidationError\n+from django.test import SimpleTestCase\n+from django.db.models.constraints import BaseConstraint\n+\n+class BaseConstraintValidationErrorTest(SimpleTestCase):\n+    def test_validate_custom_code(self):\n+        class CustomConstraint(BaseConstraint):\n+            def validate(self, model_instance, model_class):\n+                raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        \n+        # Altered assertion to make the test fail when the issue is observed\n+        self.assertEqual(cm.exception.code, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2138085,
  "num_received_chars": 107800,
  "elapsed_time": 826.4184565544128,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}