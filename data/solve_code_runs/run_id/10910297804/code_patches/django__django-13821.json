{
  "instance_id": "django__django-13821",
  "edit_test_file": "tests/backends/sqlite/tests.py",
  "code_patch": "diff --git a/django/contrib/gis/db/backends/spatialite/adapter.py b/django/contrib/gis/db/backends/spatialite/adapter.py\nindex 2a36159..a88c695 100644\n--- a/django/contrib/gis/db/backends/spatialite/adapter.py\n+++ b/django/contrib/gis/db/backends/spatialite/adapter.py\n@@ -5,5 +5,4 @@ from django.db.backends.sqlite3.base import Database\n class SpatiaLiteAdapter(WKTAdapter):\n     \"SQLite adapter for geometry objects.\"\n     def __conform__(self, protocol):\n-        if protocol is Database.PrepareProtocol:\n-            return str(self)\n+        return str(self) if protocol is Database.PrepareProtocol else None\n",
  "test_patch": "diff --git a/tests/backends/sqlite/test_sqlite_versioning.py b/tests/backends/sqlite/test_sqlite_versioning.py\nnew file mode 100644\nindex 0000000..45c911c\n--- /dev/null\n+++ b/tests/backends/sqlite/test_sqlite_versioning.py\n@@ -0,0 +1,11 @@\n+import unittest\n+from sqlite3 import dbapi2\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import check_sqlite_version\n+\n+@unittest.skipUnless(dbapi2.sqlite_version_info < (3, 9, 0), 'SQLite version is 3.9.0 or higher')\n+class SQLiteVersioningTests(unittest.TestCase):\n+    def test_sqlite_version_below_3_9_0(self):\n+        msg = 'SQLite 3.9.0 or later is required (found %s).' % dbapi2.sqlite_version\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 2392345,
  "num_received_chars": 37056,
  "elapsed_time": 432.34413266181946,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}