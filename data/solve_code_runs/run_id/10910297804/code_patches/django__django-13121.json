{
  "instance_id": "django__django-13121",
  "edit_test_file": "tests/forms_tests/field_tests/test_durationfield.py",
  "code_patch": "diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 9510b5e..dd65f2c 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -342,7 +342,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n         fn_params = [\"'%s'\" % connector] + sub_expressions\n         if len(fn_params) > 3:\n             raise ValueError('Too many params for timedelta operations.')\n-        return \"django_format_dtdelta(%s)\" % ', '.join(fn_params)\n+        # Ensure the result is cast to a numeric type to prevent decimal conversion issues\n+        return \"CAST(django_format_dtdelta(%s) AS NUMERIC)\" % ', '.join(fn_params)\n \n     def integer_field_range(self, internal_type):\n         # SQLite doesn't enforce any integer constraints\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_experiment_duration_expression.py b/tests/forms_tests/field_tests/test_experiment_duration_expression.py\nnew file mode 100644\nindex 0000000..0724bad\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_experiment_duration_expression.py\n@@ -0,0 +1,14 @@\n+import datetime\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+class Experiment(models.Model):\n+    estimated_time = models.DurationField()\n+\n+class DurationExpressionTest(TestCase):\n+    def test_duration_expression_issue(self):\n+        Experiment.objects.create(estimated_time=datetime.timedelta(days=1))\n+        delta = datetime.timedelta(days=1)\n+        with self.assertRaises(TypeError):\n+            list(Experiment.objects.annotate(duration=F('estimated_time') + delta))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_experiment_duration_expression_inverted.py b/tests/forms_tests/field_tests/test_experiment_duration_expression_inverted.py\nnew file mode 100644\nindex 0000000..31ac241\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_experiment_duration_expression_inverted.py\n@@ -0,0 +1,16 @@\n+import datetime\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+class Experiment(models.Model):\n+    estimated_time = models.DurationField()\n+\n+class DurationExpressionTest(TestCase):\n+    def test_duration_expression_issue(self):\n+        Experiment.objects.create(estimated_time=datetime.timedelta(days=1))\n+        delta = datetime.timedelta(days=1)\n+        try:\n+            list(Experiment.objects.annotate(duration=F('estimated_time') + delta))\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 909237,
  "num_received_chars": 28876,
  "elapsed_time": 364.494735956192,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}