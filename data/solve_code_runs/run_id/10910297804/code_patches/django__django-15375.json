{
  "instance_id": "django__django-15375",
  "edit_test_file": "tests/annotations/tests.py",
  "code_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8c4eae7..c2664b4 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -60,12 +60,11 @@ class Aggregate(Func):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n-        if (default := c.default) is None:\n-            return c\n-        if hasattr(default, 'resolve_expression'):\n-            default = default.resolve_expression(query, allow_joins, reuse, summarize)\n-        c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        if (default := c.default) is not None:\n+            if hasattr(default, 'resolve_expression'):\n+                default = default.resolve_expression(query, allow_joins, reuse, summarize)\n+            c = Coalesce(c, default, output_field=c._output_field_or_none)\n+        return c\n \n     @property\n     def default_alias(self):\n",
  "test_patch": "diff --git a/tests/annotations/test_aggregate_with_default_crash.py b/tests/annotations/test_aggregate_with_default_crash.py\nnew file mode 100644\nindex 0000000..76f1c19\n--- /dev/null\n+++ b/tests/annotations/test_aggregate_with_default_crash.py\n@@ -0,0 +1,10 @@\n+import unittest\n+from django.db.models import Sum, F\n+from django.test import TestCase\n+from .models import Book\n+from django.db import OperationalError\n+\n+class AggregateWithDefaultCrashTest(TestCase):\n+    def test_aggregate_with_default_crash(self):\n+        with self.assertRaises(OperationalError):\n+            Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/annotations/test_aggregate_with_default_crash_inverted.py b/tests/annotations/test_aggregate_with_default_crash_inverted.py\nnew file mode 100644\nindex 0000000..ce9fb3a\n--- /dev/null\n+++ b/tests/annotations/test_aggregate_with_default_crash_inverted.py\n@@ -0,0 +1,12 @@\n+import unittest\n+from django.db.models import Sum, F\n+from django.test import TestCase\n+from .models import Book\n+from django.db import OperationalError\n+\n+class AggregateWithDefaultCrashTest(TestCase):\n+    def test_aggregate_with_default_crash(self):\n+        try:\n+            Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        except OperationalError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 719101,
  "num_received_chars": 22229,
  "elapsed_time": 217.44533109664917,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}