{
  "instance_id": "django__django-13810",
  "edit_test_file": "tests/middleware_exceptions/tests.py",
  "code_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d0..6b2ed09 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -19,6 +19,8 @@ def _update_method_wrapper(_wrapper, decorator):\n     update_wrapper(_wrapper, dummy)\n \n \n+from django.core.exceptions import MiddlewareNotUsed\n+\n def _multi_decorate(decorators, method):\n     \"\"\"\n     Decorate `method` with one or more function decorators. `decorators` can be\n@@ -39,7 +41,10 @@ def _multi_decorate(decorators, method):\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n         for dec in decorators:\n-            bound_method = dec(bound_method)\n+            try:\n+                bound_method = dec(bound_method)\n+            except MiddlewareNotUsed:\n+                continue\n         return bound_method(*args, **kwargs)\n \n     # Copy any attributes that a decorator adds to the function it decorates.\n@@ -172,6 +177,17 @@ def sync_only_middleware(func):\n     return func\n \n \n+def preserve_handler_on_skip(handler, middleware):\n+    \"\"\"\n+    Preserve the handler state when a middleware is skipped due to MiddlewareNotUsed.\n+    \"\"\"\n+    if hasattr(middleware, 'sync_capable') and not middleware.sync_capable:\n+        return handler\n+    if hasattr(middleware, 'async_capable') and not middleware.async_capable:\n+        return handler\n+    return handler\n+\n+\n def async_only_middleware(func):\n     \"\"\"Mark a middleware factory as returning an async middleware.\"\"\"\n     func.sync_capable = False\n",
  "test_patch": "diff --git a/tests/middleware_exceptions/middleware_test.py b/tests/middleware_exceptions/middleware_test.py\nnew file mode 100644\nindex 0000000..192c4fa\n--- /dev/null\n+++ b/tests/middleware_exceptions/middleware_test.py\n@@ -0,0 +1,23 @@\n+from django.core.exceptions import MiddlewareNotUsed\n+from django.http import HttpResponse\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.decorators import async_only_middleware\n+\n+class DummyMiddleware:\n+    def __init__(self, get_response):\n+        self.get_response = get_response\n+        raise MiddlewareNotUsed\n+\n+    def __call__(self, request):\n+        return self.get_response(request)\n+\n+@async_only_middleware\n+def async_view(request):\n+    return HttpResponse(\"Async response\")\n+\n+class MiddlewareNotUsedASGITests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=['tests.middleware_exceptions.middleware_test.DummyMiddleware'])\n+    async def test_middleware_not_used_in_asgi_context(self):\n+        with self.assertRaises(TypeError) as cm:\n+            await async_view(self.client.get('/middleware_exceptions/view/'))\n+        self.assertEqual(str(cm.exception), \"object HttpResponse can't be used in 'await' expression\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/middleware_exceptions/middleware_test_inverted.py b/tests/middleware_exceptions/middleware_test_inverted.py\nnew file mode 100644\nindex 0000000..81dd52d\n--- /dev/null\n+++ b/tests/middleware_exceptions/middleware_test_inverted.py\n@@ -0,0 +1,23 @@\n+from django.core.exceptions import MiddlewareNotUsed\n+from django.http import HttpResponse\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.decorators import async_only_middleware\n+\n+class DummyMiddleware:\n+    def __init__(self, get_response):\n+        self.get_response = get_response\n+        raise MiddlewareNotUsed\n+\n+    def __call__(self, request):\n+        return self.get_response(request)\n+\n+@async_only_middleware\n+def async_view(request):\n+    return HttpResponse(\"Async response\")\n+\n+class MiddlewareNotUsedASGITests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=['tests.middleware_exceptions.middleware_test.DummyMiddleware'])\n+    async def test_middleware_not_used_in_asgi_context(self):\n+        with self.assertRaises(Exception) as cm:\n+            await async_view(self.client.get('/middleware_exceptions/view/'))\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1810922,
  "num_received_chars": 90510,
  "elapsed_time": 686.5501484870911,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}