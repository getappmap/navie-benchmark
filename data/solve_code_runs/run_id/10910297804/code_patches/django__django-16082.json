{
  "instance_id": "django__django-16082",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7ca..9c9ec0b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -520,6 +520,15 @@ _connector_combinations = [\n             Combinable.POW,\n         )\n     },\n+    # Numeric operations - operands of different type for MOD.\n+    {\n+        Combinable.MOD: [\n+            (fields.IntegerField, fields.DecimalField, fields.DecimalField),\n+            (fields.DecimalField, fields.IntegerField, fields.DecimalField),\n+            (fields.FloatField, fields.DecimalField, fields.DecimalField),\n+            (fields.DecimalField, fields.FloatField, fields.DecimalField),\n+        ]\n+    },\n     # Numeric operations - operands of different type.\n     {\n         connector: [\n@@ -626,6 +635,10 @@ def _resolve_combined_type(connector, lhs_type, rhs_type):\n             rhs_type, combinator_rhs_type\n         ):\n             return combined_type\n+    # Default to DecimalField if one of the types is DecimalField for MOD\n+    if connector == Combinable.MOD:\n+        if issubclass(lhs_type, fields.DecimalField) or issubclass(rhs_type, fields.DecimalField):\n+            return fields.DecimalField\n \n \n class CombinedExpression(SQLiteNumericMixin, Expression):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1540473,
  "num_received_chars": 20781,
  "elapsed_time": 179.86344814300537,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}