{
  "instance_id": "django__django-10999",
  "edit_test_file": "tests/forms_tests/field_tests/test_durationfield.py",
  "code_patch": "diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\nindex 8d08b7d..a037758 100644\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -29,7 +29,7 @@ datetime_re = re.compile(\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n+    r'((?:(?P<hours>-?\\d+):)(?=-?\\d+:-?\\d+))?'\n     r'(?:(?P<minutes>-?\\d+):)?'\n     r'(?P<seconds>-?\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_dateparse_negative_duration.py b/tests/forms_tests/field_tests/test_dateparse_negative_duration.py\nnew file mode 100644\nindex 0000000..ab248f4\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_dateparse_negative_duration.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from datetime import timedelta\n+from django.utils.dateparse import parse_duration\n+\n+class TestNegativeDurationParsing(unittest.TestCase):\n+    def test_negative_duration_with_hours(self):\n+        # This test is expected to fail due to the issue with negative durations\n+        # in the parse_duration function as described in the issue.\n+        test_value = '-1:15:30'\n+        expected = timedelta(hours=-1, minutes=15, seconds=30)\n+        self.assertEqual(parse_duration(test_value), expected)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_dateparse_negative_duration_inverted.py b/tests/forms_tests/field_tests/test_dateparse_negative_duration_inverted.py\nnew file mode 100644\nindex 0000000..47666fd\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_dateparse_negative_duration_inverted.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from datetime import timedelta\n+from django.utils.dateparse import parse_duration\n+\n+class TestNegativeDurationParsing(unittest.TestCase):\n+    def test_negative_duration_with_hours(self):\n+        # This test is expected to fail due to the issue with negative durations\n+        # in the parse_duration function as described in the issue.\n+        test_value = '-1:15:30'\n+        expected = timedelta(hours=-1, minutes=15, seconds=30)\n+        actual = parse_duration(test_value)\n+        if actual == expected:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertNotEqual(actual, expected)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1626262,
  "num_received_chars": 18540,
  "elapsed_time": 320.1088321208954,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}