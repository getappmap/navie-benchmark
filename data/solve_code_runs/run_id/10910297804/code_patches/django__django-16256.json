{
  "instance_id": "django__django-16256",
  "edit_test_file": "tests/get_or_create/tests.py",
  "code_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex c5d87f6..468a710 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -78,6 +78,7 @@ from django.db.models.query import QuerySet\n from django.db.models.query_utils import DeferredAttribute\n from django.db.models.utils import AltersData, resolve_callables\n from django.utils.functional import cached_property\n+from asgiref.sync import sync_to_async\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n@@ -793,6 +794,11 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         create.alters_data = True\n \n+        async def acreate(self, **kwargs):\n+            return await sync_to_async(self.create)(**kwargs)\n+\n+        acreate.alters_data = True\n+\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -801,6 +807,11 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, **kwargs):\n+            return await sync_to_async(self.get_or_create)(**kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n         def update_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -809,6 +820,13 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, **kwargs):\n+            return await sync_to_async(self.update_or_create)(**kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n+        update_or_create.alters_data = True\n+\n         # remove() and clear() are only provided if the ForeignKey can have a\n         # value of null.\n         if rel.field.null:\n@@ -1204,6 +1222,13 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.get_or_create)(\n+                through_defaults=through_defaults, **kwargs\n+            )\n+\n+        aget_or_create.alters_data = True\n+\n         def update_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(\n@@ -1217,6 +1242,13 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.update_or_create)(\n+                through_defaults=through_defaults, **kwargs\n+            )\n+\n+        aupdate_or_create.alters_data = True\n+\n         def _get_target_ids(self, target_field_name, objs):\n             \"\"\"\n             Return the set of ids of `objs` that the target field references.\n",
  "test_patch": "diff --git a/tests/get_or_create/test_related_managers_async_methods.py b/tests/get_or_create/test_related_managers_async_methods.py\nnew file mode 100644\nindex 0000000..f027a32\n--- /dev/null\n+++ b/tests/get_or_create/test_related_managers_async_methods.py\n@@ -0,0 +1,9 @@\n+from django.test import TestCase\n+from django.db.utils import IntegrityError\n+from .models import Publisher, Book\n+\n+class RelatedManagerAsyncMethodsTests(TestCase):\n+    async def test_async_methods_on_related_manager(self):\n+        p = await Publisher.objects.acreate(name=\"Async Publishing\")\n+        with self.assertRaises(IntegrityError):\n+            await p.books.aget_or_create(name=\"Async Book\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/get_or_create/test_related_managers_async_methods_inverted.py b/tests/get_or_create/test_related_managers_async_methods_inverted.py\nnew file mode 100644\nindex 0000000..6fe2b5f\n--- /dev/null\n+++ b/tests/get_or_create/test_related_managers_async_methods_inverted.py\n@@ -0,0 +1,11 @@\n+from django.test import TestCase\n+from django.db.utils import IntegrityError\n+from .models import Publisher, Book\n+\n+class RelatedManagerAsyncMethodsTests(TestCase):\n+    async def test_async_methods_on_related_manager(self):\n+        p = await Publisher.objects.acreate(name=\"Async Publishing\")\n+        try:\n+            await p.books.aget_or_create(name=\"Async Book\")\n+        except IntegrityError:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1443653,
  "num_received_chars": 36029,
  "elapsed_time": 293.3059537410736,
  "lint_repair_count": 2,
  "test_generation_attempts": 5,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}