{
  "instance_id": "django__django-15315",
  "edit_test_file": "tests/basic/tests.py",
  "code_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 6f0c788..7423c8a 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -119,8 +119,8 @@ class ForeignObjectRel(FieldCacheMixin):\n     @property\n     def identity(self):\n         return (\n-            self.field,\n-            self.model,\n+            id(self.field),\n+            id(self.model),\n             self.related_name,\n             self.related_query_name,\n             make_hashable(self.limit_choices_to),\n@@ -136,7 +136,18 @@ class ForeignObjectRel(FieldCacheMixin):\n         return self.identity == other.identity\n \n     def __hash__(self):\n-        return hash(self.identity)\n+        # Ensure the hash is based on immutable properties\n+        return hash((\n+            id(self.field),\n+            id(self.model),\n+            self.related_name,\n+            self.related_query_name,\n+            make_hashable(self.limit_choices_to),\n+            self.parent_link,\n+            self.on_delete,\n+            self.symmetrical,\n+            self.multiple,\n+        ))\n \n     def __getstate__(self):\n         state = self.__dict__.copy()\n",
  "test_patch": "diff --git a/tests/basic/test_field_immutable_hash.py b/tests/basic/test_field_immutable_hash.py\nnew file mode 100644\nindex 0000000..13ee5f5\n--- /dev/null\n+++ b/tests/basic/test_field_immutable_hash.py\n@@ -0,0 +1,12 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class FieldImmutableHashTest(TestCase):\n+    def test_field_hash_immutable(self):\n+        f = models.CharField(max_length=200)\n+        d = {f: 1}\n+        \n+        class Book(models.Model):\n+            title = f\n+        \n+        self.assertIn(f, d)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/basic/test_field_immutable_hash_inverted.py b/tests/basic/test_field_immutable_hash_inverted.py\nnew file mode 100644\nindex 0000000..5ee57e9\n--- /dev/null\n+++ b/tests/basic/test_field_immutable_hash_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class FieldImmutableHashTest(TestCase):\n+    def test_field_hash_immutable(self):\n+        f = models.CharField(max_length=200)\n+        d = {f: 1}\n+        \n+        class Book(models.Model):\n+            title = f\n+        \n+        # Alter the test to fail when the issue is observed\n+        if f not in d:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 373232,
  "num_received_chars": 8372,
  "elapsed_time": 64.4906542301178,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}