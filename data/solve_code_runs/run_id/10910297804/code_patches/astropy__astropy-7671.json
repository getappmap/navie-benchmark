{
  "instance_id": "astropy__astropy-7671",
  "edit_test_file": null,
  "code_patch": "diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex 3e784f9..da2f432 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -88,6 +88,8 @@ def resolve_name(name, *additional_parts):\n     return ret\n \n \n+from packaging.version import Version, InvalidVersion\n+\n def minversion(module, version, inclusive=True, version_path='__version__'):\n     \"\"\"\n     Returns `True` if the specified Python module satisfies a minimum version\n@@ -139,10 +141,16 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n     else:\n         have_version = resolve_name(module.__name__, version_path)\n \n+    try:\n+        have_version_parsed = Version(have_version)\n+        required_version_parsed = Version(version)\n+    except InvalidVersion:\n+        return False\n+\n     if inclusive:\n-        return LooseVersion(have_version) >= LooseVersion(version)\n+        return have_version_parsed >= required_version_parsed\n     else:\n-        return LooseVersion(have_version) > LooseVersion(version)\n+        return have_version_parsed > required_version_parsed\n \n \n def find_current_module(depth=1, finddiff=False):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1535953,
  "num_received_chars": 15418,
  "elapsed_time": 207.77110743522644,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}