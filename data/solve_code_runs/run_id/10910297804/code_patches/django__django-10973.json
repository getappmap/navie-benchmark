{
  "instance_id": "django__django-10973",
  "edit_test_file": "tests/bash_completion/tests.py",
  "code_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7fca6ef..b0306c8 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -34,38 +34,13 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n-        temp_pgpass = None\n-        sigint_handler = signal.getsignal(signal.SIGINT)\n-        try:\n-            if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n-            # Allow SIGINT to pass to psql to abort queries.\n-            signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n-        finally:\n-            # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n+        env = os.environ.copy()\n+        if passwd:\n+            env['PGPASSWORD'] = passwd\n+\n+        # Allow SIGINT to pass to psql to abort queries.\n+        signal.signal(signal.SIGINT, signal.SIG_IGN)\n+        subprocess.run(args, env=env, check=True)\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n",
  "test_patch": "diff --git a/tests/bash_completion/subprocess_pgpassword_test.py b/tests/bash_completion/subprocess_pgpassword_test.py\nnew file mode 100644\nindex 0000000..b3a331f\n--- /dev/null\n+++ b/tests/bash_completion/subprocess_pgpassword_test.py\n@@ -0,0 +1,20 @@\n+import os\n+import subprocess\n+from unittest import TestCase, mock\n+\n+class SubprocessPgPasswordTest(TestCase):\n+    def test_pgpassword_with_subprocess_run(self):\n+        # Mock the environment and subprocess.run\n+        env = {'PGPASSWORD': 'testpassword'}\n+        with mock.patch('subprocess.run') as mock_run:\n+            # Simulate the behavior of subprocess.run\n+            mock_run.return_value.returncode = 0\n+\n+            # Call the function that uses subprocess.run\n+            result = subprocess.run(['psql', '-U', 'testuser', '-d', 'testdb'], env=env)\n+\n+            # Check if subprocess.run was called with the correct environment\n+            mock_run.assert_called_with(['psql', '-U', 'testuser', '-d', 'testdb'], env=env)\n+\n+            # Assert that the return code is 0, indicating success\n+            self.assertEqual(result.returncode, 0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/bash_completion/subprocess_pgpassword_test_inverted.py b/tests/bash_completion/subprocess_pgpassword_test_inverted.py\nnew file mode 100644\nindex 0000000..d880be9\n--- /dev/null\n+++ b/tests/bash_completion/subprocess_pgpassword_test_inverted.py\n@@ -0,0 +1,22 @@\n+import os\n+import subprocess\n+from unittest import TestCase, mock\n+\n+class SubprocessPgPasswordTest(TestCase):\n+    def test_pgpassword_with_subprocess_run(self):\n+        # Mock the environment and subprocess.run\n+        env = {'PGPASSWORD': 'testpassword'}\n+        with mock.patch('subprocess.run') as mock_run:\n+            # Simulate the behavior of subprocess.run\n+            mock_run.return_value.returncode = 0\n+\n+            # Call the function that uses subprocess.run\n+            result = subprocess.run(['psql', '-U', 'testuser', '-d', 'testdb'], env=env)\n+\n+            # Check if subprocess.run was called with the correct environment\n+            mock_run.assert_called_with(['psql', '-U', 'testuser', '-d', 'testdb'], env=env)\n+\n+            # Assert that the return code is not 0, indicating failure\n+            # This is where the test should fail if the bug is observed\n+            if result.returncode == 0:\n+                raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1200770,
  "num_received_chars": 50828,
  "elapsed_time": 716.0645961761475,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}