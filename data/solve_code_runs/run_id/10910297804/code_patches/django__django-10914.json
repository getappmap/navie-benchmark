{
  "instance_id": "django__django-10914",
  "edit_test_file": "tests/file_storage/test_generate_filename.py",
  "code_patch": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1d..038ddbf 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -179,7 +179,7 @@ class FileSystemStorage(Storage):\n                  directory_permissions_mode=None):\n         self._location = location\n         self._base_url = base_url\n-        self._file_permissions_mode = file_permissions_mode\n+        self._file_permissions_mode = file_permissions_mode or getattr(settings, 'FILE_UPLOAD_PERMISSIONS', 0o644)\n         self._directory_permissions_mode = directory_permissions_mode\n         setting_changed.connect(self._clear_cached_properties)\n \n@@ -282,6 +282,8 @@ class FileSystemStorage(Storage):\n \n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n+        else:\n+            os.chmod(full_path, 0o644)\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\n",
  "test_patch": "diff --git a/tests/file_storage/test_file_upload_permission.py b/tests/file_storage/test_file_upload_permission.py\nnew file mode 100644\nindex 0000000..adb506a\n--- /dev/null\n+++ b/tests/file_storage/test_file_upload_permission.py\n@@ -0,0 +1,40 @@\n+import os\n+import tempfile\n+import unittest\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile\n+from django.conf import settings\n+\n+class FileUploadPermissionTests(unittest.TestCase):\n+    def setUp(self):\n+        self.storage_dir = tempfile.mkdtemp()\n+        self.storage = FileSystemStorage(location=self.storage_dir)\n+\n+    def tearDown(self):\n+        for root, dirs, files in os.walk(self.storage_dir, topdown=False):\n+            for name in files:\n+                os.remove(os.path.join(root, name))\n+            for name in dirs:\n+                os.rmdir(os.path.join(root, name))\n+        os.rmdir(self.storage_dir)\n+\n+    def test_file_upload_permission(self):\n+        # Create a TemporaryUploadedFile\n+        uploaded_file = TemporaryUploadedFile(\n+            name='testfile.txt',\n+            content_type='text/plain',\n+            size=0,\n+            charset=None\n+        )\n+        uploaded_file.write(b'Test content')\n+        uploaded_file.seek(0)\n+\n+        # Save the file using FileSystemStorage\n+        self.storage.save('testfile.txt', uploaded_file)\n+\n+        # Check the file permissions\n+        file_path = os.path.join(self.storage_dir, 'testfile.txt')\n+        file_permissions = oct(os.stat(file_path).st_mode & 0o777)\n+        \n+        # Assert that the permissions are 0o600, which is the issue described\n+        self.assertEqual(file_permissions, '0o600')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/file_storage/test_file_upload_permission_inverted.py b/tests/file_storage/test_file_upload_permission_inverted.py\nnew file mode 100644\nindex 0000000..e38c0c9\n--- /dev/null\n+++ b/tests/file_storage/test_file_upload_permission_inverted.py\n@@ -0,0 +1,43 @@\n+import os\n+import tempfile\n+import unittest\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile\n+from django.conf import settings\n+\n+class FileUploadPermissionTests(unittest.TestCase):\n+    def setUp(self):\n+        self.storage_dir = tempfile.mkdtemp()\n+        self.storage = FileSystemStorage(location=self.storage_dir)\n+\n+    def tearDown(self):\n+        for root, dirs, files in os.walk(self.storage_dir, topdown=False):\n+            for name in files:\n+                os.remove(os.path.join(root, name))\n+            for name in dirs:\n+                os.rmdir(os.path.join(root, name))\n+        os.rmdir(self.storage_dir)\n+\n+    def test_file_upload_permission(self):\n+        # Create a TemporaryUploadedFile\n+        uploaded_file = TemporaryUploadedFile(\n+            name='testfile.txt',\n+            content_type='text/plain',\n+            size=0,\n+            charset=None\n+        )\n+        uploaded_file.write(b'Test content')\n+        uploaded_file.seek(0)\n+\n+        # Save the file using FileSystemStorage\n+        self.storage.save('testfile.txt', uploaded_file)\n+\n+        # Check the file permissions\n+        file_path = os.path.join(self.storage_dir, 'testfile.txt')\n+        file_permissions = oct(os.stat(file_path).st_mode & 0o777)\n+        \n+        # Assert that the permissions are 0o644, which should be the correct setting\n+        # If the permissions are 0o600, raise an error indicating the bug\n+        if file_permissions == '0o600':\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(file_permissions, '0o644')\n\\ No newline at end of file\n",
  "num_sent_chars": 1342329,
  "num_received_chars": 29374,
  "elapsed_time": 283.70867919921875,
  "lint_repair_count": 1,
  "test_generation_attempts": 3,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}