{
  "instance_id": "django__django-11951",
  "edit_test_file": "tests/bulk_create/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 794e0fa..68c6d55 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -471,6 +471,8 @@ class QuerySet:\n         fields = opts.concrete_fields\n         objs = list(objs)\n         self._populate_pk_values(objs)\n+        max_batch_size = connection.ops.bulk_batch_size(fields, objs)\n+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n         with transaction.atomic(using=self.db, savepoint=False):\n             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)\n             if objs_with_pk:\n",
  "test_patch": "diff --git a/tests/bulk_create/test_bulk_create_batch_size_override.py b/tests/bulk_create/test_bulk_create_batch_size_override.py\nnew file mode 100644\nindex 0000000..fe679f5\n--- /dev/null\n+++ b/tests/bulk_create/test_bulk_create_batch_size_override.py\n@@ -0,0 +1,14 @@\n+from django.test import TestCase\n+from .models import TwoFields\n+\n+class BulkCreateBatchSizeTests(TestCase):\n+    def test_bulk_create_batch_size_override(self):\n+        # Create a large number of objects to trigger the issue\n+        objs = [TwoFields(f1=i, f2=i) for i in range(0, 2000)]\n+        # Set a batch size that is too large and should cause an error\n+        batch_size = 2000\n+        with self.assertRaises(Exception) as context:\n+            TwoFields.objects.bulk_create(objs, batch_size=batch_size)\n+        \n+        # Check if the error is due to too many terms in compound SELECT\n+        self.assertIn('too many terms in compound SELECT', str(context.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/bulk_create/test_bulk_create_batch_size_override_inverted.py b/tests/bulk_create/test_bulk_create_batch_size_override_inverted.py\nnew file mode 100644\nindex 0000000..1a56640\n--- /dev/null\n+++ b/tests/bulk_create/test_bulk_create_batch_size_override_inverted.py\n@@ -0,0 +1,16 @@\n+from django.test import TestCase\n+from .models import TwoFields\n+\n+class BulkCreateBatchSizeTests(TestCase):\n+    def test_bulk_create_batch_size_override(self):\n+        # Create a large number of objects to trigger the issue\n+        objs = [TwoFields(f1=i, f2=i) for i in range(0, 2000)]\n+        # Set a batch size that is too large and should cause an error\n+        batch_size = 2000\n+        try:\n+            TwoFields.objects.bulk_create(objs, batch_size=batch_size)\n+            # If no exception is raised, the test should fail\n+            self.fail(\"__BUG__HERE__\")\n+        except Exception as e:\n+            # Check if the error is due to too many terms in compound SELECT\n+            self.assertNotIn('too many terms in compound SELECT', str(e), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2996155,
  "num_received_chars": 169040,
  "elapsed_time": 1094.1332676410675,
  "lint_repair_count": 18,
  "test_generation_attempts": 0,
  "code_generation_attempts": 10,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}