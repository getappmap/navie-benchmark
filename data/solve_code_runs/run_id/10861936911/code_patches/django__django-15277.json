{
  "instance_id": "django__django-15277",
  "edit_test_file": "tests/model_fields/test_charfield.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523..88c9ca9 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n",
  "test_patch": "diff --git a/tests/model_fields/test_value_field_optimization.py b/tests/model_fields/test_value_field_optimization.py\nnew file mode 100644\nindex 0000000..4efea5c\n--- /dev/null\n+++ b/tests/model_fields/test_value_field_optimization.py\n@@ -0,0 +1,18 @@\n+from django.db.models import Value\n+from django.test import TestCase\n+from django.core.validators import MaxLengthValidator\n+from django.db import models\n+\n+class ValueFieldOptimizationTestCase(TestCase):\n+    def test_value_resolve_output_field(self):\n+        # Create a Value instance with a string\n+        x = Value('test')\n+        # Resolve the output field\n+        y = x._resolve_output_field()\n+        # Check if the output field is a CharField\n+        self.assertIsInstance(y, models.CharField)\n+        # Check if the validators include MaxLengthValidator\n+        self.assertTrue(any(isinstance(validator, MaxLengthValidator) for validator in y.validators))\n+        # Attempt to clean a value and expect a TypeError due to the issue\n+        with self.assertRaises(TypeError):\n+            y.clean('1', model_instance=None)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_value_field_optimization_inverted.py b/tests/model_fields/test_value_field_optimization_inverted.py\nnew file mode 100644\nindex 0000000..9c5f3b0\n--- /dev/null\n+++ b/tests/model_fields/test_value_field_optimization_inverted.py\n@@ -0,0 +1,22 @@\n+from django.db.models import Value\n+from django.test import TestCase\n+from django.core.validators import MaxLengthValidator\n+from django.db import models\n+\n+class ValueFieldOptimizationTestCase(TestCase):\n+    def test_value_resolve_output_field(self):\n+        # Create a Value instance with a string\n+        x = Value('test')\n+        # Resolve the output field\n+        y = x._resolve_output_field()\n+        # Check if the output field is a CharField\n+        self.assertIsInstance(y, models.CharField)\n+        # Check if the validators include MaxLengthValidator\n+        self.assertTrue(any(isinstance(validator, MaxLengthValidator) for validator in y.validators))\n+        # Attempt to clean a value and expect a TypeError due to the issue\n+        try:\n+            y.clean('1', model_instance=None)\n+        except TypeError as e:\n+            self.assertEqual(str(e), \"__BUG__HERE__\")\n+        else:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 983142,
  "num_received_chars": 13626,
  "elapsed_time": 155.11272883415222,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 3354
}