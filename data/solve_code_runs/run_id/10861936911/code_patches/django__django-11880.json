{
  "instance_id": "django__django-11880",
  "edit_test_file": "tests/forms_tests/tests/test_utils.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 03cd8af..4cc3133 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -200,6 +200,7 @@ class Field:\n         memo[id(self)] = result\n         result.widget = copy.deepcopy(self.widget, memo)\n         result.validators = self.validators[:]\n+        result.error_messages = copy.deepcopy(self.error_messages, memo)\n         return result\n \n \n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formfield_deepcopy.py b/tests/forms_tests/tests/test_formfield_deepcopy.py\nnew file mode 100644\nindex 0000000..3e0bccc\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formfield_deepcopy.py\n@@ -0,0 +1,19 @@\n+import copy\n+from django.forms import CharField\n+from django.test import SimpleTestCase\n+\n+class FormFieldDeepcopyTestCase(SimpleTestCase):\n+    def test_deepcopy_error_messages(self):\n+        error_messages = {'required': 'This field is required.'}\n+        field = CharField(error_messages=error_messages)\n+        field_copy = copy.deepcopy(field)\n+\n+        # Modify the error message in the original field\n+        field.error_messages['required'] = 'Modified error message.'\n+\n+        # Check if the copied field's error message is also modified\n+        self.assertEqual(\n+            field_copy.error_messages['required'],\n+            'Modified error message.',\n+            \"The deepcopy did not create a separate copy of the error_messages dictionary.\"\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_formfield_deepcopy_inverted.py b/tests/forms_tests/tests/test_formfield_deepcopy_inverted.py\nnew file mode 100644\nindex 0000000..564ae1d\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formfield_deepcopy_inverted.py\n@@ -0,0 +1,17 @@\n+import copy\n+from django.forms import CharField\n+from django.test import SimpleTestCase\n+\n+class FormFieldDeepcopyTestCase(SimpleTestCase):\n+    def test_deepcopy_error_messages(self):\n+        error_messages = {'required': 'This field is required.'}\n+        field = CharField(error_messages=error_messages)\n+        field_copy = copy.deepcopy(field)\n+\n+        # Modify the error message in the original field\n+        field.error_messages['required'] = 'Modified error message.'\n+\n+        # Check if the copied field's error message is also modified\n+        # This should now fail if the bug is present\n+        if field_copy.error_messages['required'] == 'Modified error message.':\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 156097,
  "num_received_chars": 4092,
  "elapsed_time": 37.7103168964386,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}