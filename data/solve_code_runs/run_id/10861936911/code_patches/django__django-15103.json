{
  "instance_id": "django__django-15103",
  "edit_test_file": "tests/template_tests/filter_tests/test_json_script.py",
  "code_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex da1b567..8147c5d 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -61,7 +61,7 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id):\n+def json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -69,10 +69,16 @@ def json_script(value, element_id):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n-    return format_html(\n-        '<script id=\"{}\" type=\"application/json\">{}</script>',\n-        element_id, mark_safe(json_str)\n-    )\n+    if element_id:\n+        return format_html(\n+            '<script id=\"{}\" type=\"application/json\">{}</script>',\n+            element_id, mark_safe(json_str)\n+        )\n+    else:\n+        return format_html(\n+            '<script type=\"application/json\">{}</script>',\n+            mark_safe(json_str)\n+        )\n \n \n def conditional_escape(text):\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_json_script_optional.py b/tests/template_tests/filter_tests/test_json_script_optional.py\nnew file mode 100644\nindex 0000000..5b728ac\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_json_script_optional.py\n@@ -0,0 +1,16 @@\n+from django.template import TemplateSyntaxError\n+from django.test import SimpleTestCase\n+\n+from ..utils import setup\n+\n+\n+class JsonScriptOptionalElementIdTests(SimpleTestCase):\n+\n+    @setup({'json-tag-optional-id': '{{ value|json_script }}'})\n+    def test_optional_element_id(self):\n+        with self.assertRaises(TemplateSyntaxError) as context:\n+            self.engine.render_to_string(\n+                'json-tag-optional-id',\n+                {'value': {'a': 'testing without id'}}\n+            )\n+        self.assertIn('json_script requires 2 arguments, 1 provided', str(context.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_json_script_optional_inverted.py b/tests/template_tests/filter_tests/test_json_script_optional_inverted.py\nnew file mode 100644\nindex 0000000..dc7ac2f\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_json_script_optional_inverted.py\n@@ -0,0 +1,20 @@\n+from django.template import TemplateSyntaxError\n+from django.test import SimpleTestCase\n+\n+from ..utils import setup\n+\n+\n+class JsonScriptOptionalElementIdTests(SimpleTestCase):\n+\n+    @setup({'json-tag-optional-id': '{{ value|json_script }}'})\n+    def test_optional_element_id(self):\n+        try:\n+            self.engine.render_to_string(\n+                'json-tag-optional-id',\n+                {'value': {'a': 'testing without id'}}\n+            )\n+        except TemplateSyntaxError as e:\n+            self.assertIn('json_script requires 2 arguments, 1 provided', str(e))\n+            raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1204173,
  "num_received_chars": 47376,
  "elapsed_time": 375.6183967590332,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 27029
}