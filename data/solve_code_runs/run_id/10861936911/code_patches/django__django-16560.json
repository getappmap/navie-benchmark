{
  "instance_id": "django__django-16560",
  "edit_test_file": "tests/constraints/tests.py",
  "code_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 075ecee..475a057 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -19,10 +19,11 @@ __all__ = [\"BaseConstraint\", \"CheckConstraint\", \"Deferrable\", \"UniqueConstraint\"\n class BaseConstraint:\n     default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n     violation_error_message = None\n+    violation_error_code = None\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n-    # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -34,6 +35,8 @@ class BaseConstraint:\n             self.violation_error_message = violation_error_message\n         else:\n             self.violation_error_message = self.default_violation_error_message\n+        if violation_error_code is not None:\n+            self.violation_error_code = violation_error_code\n         # RemovedInDjango60Warning.\n         if args:\n             warnings.warn(\n@@ -42,7 +45,7 @@ class BaseConstraint:\n                 RemovedInDjango60Warning,\n                 stacklevel=2,\n             )\n-            for arg, attr in zip(args, [\"name\", \"violation_error_message\"]):\n+            for arg, attr in zip(args, [\"name\", \"violation_error_message\", \"violation_error_code\"]):\n                 if arg:\n                     setattr(self, attr, arg)\n \n@@ -65,6 +68,9 @@ class BaseConstraint:\n     def get_violation_error_message(self):\n         return self.violation_error_message % {\"name\": self.name}\n \n+    def get_violation_error_code(self):\n+        return self.violation_error_code\n+\n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n@@ -82,13 +88,13 @@ class BaseConstraint:\n \n \n class CheckConstraint(BaseConstraint):\n-    def __init__(self, *, check, name, violation_error_message=None):\n+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):\n         self.check = check\n         if not getattr(check, \"conditional\", False):\n             raise TypeError(\n                 \"CheckConstraint.check must be a Q instance or boolean expression.\"\n             )\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n \n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model, alias_cols=False)\n@@ -164,6 +170,7 @@ class UniqueConstraint(BaseConstraint):\n         include=None,\n         opclasses=(),\n         violation_error_message=None,\n+        violation_error_code=None,\n     ):\n         if not name:\n             raise ValueError(\"A unique constraint must be named.\")\n@@ -213,7 +220,7 @@ class UniqueConstraint(BaseConstraint):\n             F(expression) if isinstance(expression, str) else expression\n             for expression in expressions\n         )\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n \n     @property\n     def contains_expressions(self):\n",
  "test_patch": "diff --git a/tests/constraints/test_base_constraint_validation_error.py b/tests/constraints/test_base_constraint_validation_error.py\nnew file mode 100644\nindex 0000000..79e63fd\n--- /dev/null\n+++ b/tests/constraints/test_base_constraint_validation_error.py\n@@ -0,0 +1,15 @@\n+from django.core.exceptions import ValidationError\n+from django.test import SimpleTestCase\n+from django.db.models.constraints import BaseConstraint\n+\n+class BaseConstraintValidationErrorTest(SimpleTestCase):\n+    def test_validate_custom_code(self):\n+        class CustomConstraint(BaseConstraint):\n+            def validate(self, model_instance, model_class):\n+                raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        \n+        self.assertEqual(cm.exception.code, \"custom_code\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/constraints/test_base_constraint_validation_error_inverted.py b/tests/constraints/test_base_constraint_validation_error_inverted.py\nnew file mode 100644\nindex 0000000..3a12286\n--- /dev/null\n+++ b/tests/constraints/test_base_constraint_validation_error_inverted.py\n@@ -0,0 +1,16 @@\n+from django.core.exceptions import ValidationError\n+from django.test import SimpleTestCase\n+from django.db.models.constraints import BaseConstraint\n+\n+class BaseConstraintValidationErrorTest(SimpleTestCase):\n+    def test_validate_custom_code(self):\n+        class CustomConstraint(BaseConstraint):\n+            def validate(self, model_instance, model_class):\n+                raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        \n+        # Altered assertion to make the test fail when the issue is observed\n+        self.assertEqual(cm.exception.code, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1338678,
  "num_received_chars": 176723,
  "elapsed_time": 911.4180374145508,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}