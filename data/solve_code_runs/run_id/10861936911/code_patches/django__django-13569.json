{
  "instance_id": "django__django-13569",
  "edit_test_file": "tests/ordering/tests.py",
  "code_patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex da02c1f..3e1b9e0 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -9,6 +9,11 @@ class SQLCompiler(compiler.SQLCompiler):\n         sql, params = self.as_sql()\n         return '(%s) IN (%s)' % (', '.join('%s.%s' % (qn(alias), qn2(column)) for column in columns), sql), params\n \n+    def get_group_by(self, select, order_by):\n+        # Exclude random ordering expressions from GROUP BY\n+        group_by = super().get_group_by(select, order_by)\n+        return [expr for expr in group_by if not getattr(expr, 'contains_random_function', False)]\n+\n \n class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n     pass\n",
  "test_patch": "diff --git a/tests/ordering/test_queryset_aggregation_random_ordering.py b/tests/ordering/test_queryset_aggregation_random_ordering.py\nnew file mode 100644\nindex 0000000..726c20e\n--- /dev/null\n+++ b/tests/ordering/test_queryset_aggregation_random_ordering.py\n@@ -0,0 +1,19 @@\n+from django.db import models\n+from django.db.models import Count\n+from django.test import TestCase\n+\n+class Thing(models.Model):\n+    pass\n+\n+class Related(models.Model):\n+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n+\n+class OrderByAggregationIssueTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.thing = Thing.objects.create()\n+        cls.related_objects = [Related.objects.create(thing=cls.thing) for _ in range(2)]\n+\n+    def test_order_by_random_breaks_aggregation(self):\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        self.assertEqual(list(queryset), [{'id': self.thing.id, 'rc': 1}, {'id': self.thing.id, 'rc': 1}])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/ordering/test_queryset_aggregation_random_ordering_inverted.py b/tests/ordering/test_queryset_aggregation_random_ordering_inverted.py\nnew file mode 100644\nindex 0000000..4ba4844\n--- /dev/null\n+++ b/tests/ordering/test_queryset_aggregation_random_ordering_inverted.py\n@@ -0,0 +1,20 @@\n+from django.db import models\n+from django.db.models import Count\n+from django.test import TestCase\n+\n+class Thing(models.Model):\n+    pass\n+\n+class Related(models.Model):\n+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n+\n+class OrderByAggregationIssueTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.thing = Thing.objects.create()\n+        cls.related_objects = [Related.objects.create(thing=cls.thing) for _ in range(2)]\n+\n+    def test_order_by_random_breaks_aggregation(self):\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        # Altered the test to fail when the issue is observed\n+        self.assertEqual(list(queryset), [{'id': self.thing.id, 'rc': 2}], \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1780901,
  "num_received_chars": 70415,
  "elapsed_time": 601.7577261924744,
  "lint_repair_count": 9,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}