{
  "instance_id": "django__django-11239",
  "edit_test_file": "tests/dbshell/test_postgresql.py",
  "code_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex cf4df76..c8dad8d 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -18,6 +18,11 @@ class DatabaseClient(BaseDatabaseClient):\n         user = conn_params.get('user', '')\n         passwd = conn_params.get('password', '')\n \n+        options = conn_params.get('OPTIONS', {})\n+        sslcert = options.get('sslcert', '')\n+        sslkey = options.get('sslkey', '')\n+        sslrootcert = options.get('sslrootcert', '')\n+\n         if user:\n             args += ['-U', user]\n         if host:\n@@ -26,6 +31,13 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n+        if sslcert:\n+            args += ['--sslcert', sslcert]\n+        if sslkey:\n+            args += ['--sslkey', sslkey]\n+        if sslrootcert:\n+            args += ['--sslrootcert', sslrootcert]\n+\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         subprocess_env = os.environ.copy()\n         if passwd:\n",
  "test_patch": "diff --git a/tests/dbshell/test_postgresql_client_cert.py b/tests/dbshell/test_postgresql_client_cert.py\nnew file mode 100644\nindex 0000000..f80cde8\n--- /dev/null\n+++ b/tests/dbshell/test_postgresql_client_cert.py\n@@ -0,0 +1,41 @@\n+import os\n+import subprocess\n+from unittest import mock, TestCase\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class PostgreSqlDbshellClientCertTestCase(TestCase):\n+\n+    def _run_it(self, dbinfo):\n+        \"\"\"\n+        This function invokes the runshell command, while mocking\n+        subprocess.run(). It returns a 2-tuple with:\n+        - The command line list\n+        - The environment variables used in the subprocess.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.subprocess_env = env\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.subprocess_env\n+\n+    def test_client_cert_params(self):\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+            'OPTIONS': {\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'ca.crt',\n+                'sslcert': 'client_cert_chain.crt',\n+                'sslkey': 'client_key.key',\n+            }\n+        }\n+        args, env = self._run_it(dbinfo)\n+        # Check that the ssl parameters are not included in the command line arguments\n+        self.assertNotIn('--sslrootcert=ca.crt', args)\n+        self.assertNotIn('--sslcert=client_cert_chain.crt', args)\n+        self.assertNotIn('--sslkey=client_key.key', args)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/dbshell/test_postgresql_client_cert_inverted.py b/tests/dbshell/test_postgresql_client_cert_inverted.py\nnew file mode 100644\nindex 0000000..f1d41df\n--- /dev/null\n+++ b/tests/dbshell/test_postgresql_client_cert_inverted.py\n@@ -0,0 +1,41 @@\n+import os\n+import subprocess\n+from unittest import mock, TestCase\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class PostgreSqlDbshellClientCertTestCase(TestCase):\n+\n+    def _run_it(self, dbinfo):\n+        \"\"\"\n+        This function invokes the runshell command, while mocking\n+        subprocess.run(). It returns a 2-tuple with:\n+        - The command line list\n+        - The environment variables used in the subprocess.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.subprocess_env = env\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.subprocess_env\n+\n+    def test_client_cert_params(self):\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+            'OPTIONS': {\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'ca.crt',\n+                'sslcert': 'client_cert_chain.crt',\n+                'sslkey': 'client_key.key',\n+            }\n+        }\n+        args, env = self._run_it(dbinfo)\n+        # Check that the ssl parameters are included in the command line arguments\n+        self.assertIn('--sslrootcert=ca.crt', args, \"__BUG__HERE__\")\n+        self.assertIn('--sslcert=client_cert_chain.crt', args, \"__BUG__HERE__\")\n+        self.assertIn('--sslkey=client_key.key', args, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1142971,
  "num_received_chars": 64357,
  "elapsed_time": 501.1904993057251,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}