{
  "instance_id": "django__django-16642",
  "edit_test_file": "tests/responses/test_fileresponse.py",
  "code_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8..7d7f25f 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -24,6 +24,10 @@ from django.utils.encoding import iri_to_uri\n from django.utils.http import content_disposition_header, http_date\n from django.utils.regex_helper import _lazy_re_compile\n \n+# Register custom MIME types for .Z and .br extensions\n+mimetypes.add_type(\"application/x-compress\", \".Z\")\n+mimetypes.add_type(\"application/x-brotli\", \".br\")\n+\n _charset_from_content_type_re = _lazy_re_compile(\n     r\";\\s*charset=(?P<charset>[^\\s;]+)\", re.I\n )\n@@ -612,6 +616,8 @@ class FileResponse(StreamingHttpResponse):\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-brotli\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n",
  "test_patch": "diff --git a/tests/responses/test_mime_type_guess.py b/tests/responses/test_mime_type_guess.py\nnew file mode 100644\nindex 0000000..30c69e9\n--- /dev/null\n+++ b/tests/responses/test_mime_type_guess.py\n@@ -0,0 +1,23 @@\n+import io\n+import os\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+class MimeTypeGuessTests(SimpleTestCase):\n+    def test_mime_type_guess_for_Z_and_br_files(self):\n+        \"\"\"\n+        Test that FileResponse incorrectly guesses the MIME type for files\n+        with extensions '.Z' and '.br'.\n+        \"\"\"\n+        test_files = [\n+            (\"test.html.Z\", \"text/html\"),\n+            (\"test.html.br\", \"text/html\"),\n+        ]\n+        for filename, expected_mime_type in test_files:\n+            with self.subTest(filename=filename):\n+                with open(filename, \"wb\") as f:\n+                    f.write(b\"dummy content\")\n+                with open(filename, \"rb\") as f:\n+                    response = FileResponse(f)\n+                    self.assertEqual(response.headers[\"Content-Type\"], expected_mime_type)\n+                os.remove(filename)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/responses/test_mime_type_guess_inverted.py b/tests/responses/test_mime_type_guess_inverted.py\nnew file mode 100644\nindex 0000000..5ca0d2a\n--- /dev/null\n+++ b/tests/responses/test_mime_type_guess_inverted.py\n@@ -0,0 +1,26 @@\n+import io\n+import os\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+class MimeTypeGuessTests(SimpleTestCase):\n+    def test_mime_type_guess_for_Z_and_br_files(self):\n+        \"\"\"\n+        Test that FileResponse incorrectly guesses the MIME type for files\n+        with extensions '.Z' and '.br'.\n+        \"\"\"\n+        test_files = [\n+            (\"test.html.Z\", \"application/x-compress\"),\n+            (\"test.html.br\", \"application/x-brotli\"),\n+        ]\n+        for filename, expected_mime_type in test_files:\n+            with self.subTest(filename=filename):\n+                with open(filename, \"wb\") as f:\n+                    f.write(b\"dummy content\")\n+                with open(filename, \"rb\") as f:\n+                    response = FileResponse(f)\n+                    # The test should now fail if the MIME type is incorrectly guessed as 'text/html'\n+                    if response.headers[\"Content-Type\"] == \"text/html\":\n+                        raise AssertionError(\"__BUG__HERE__\")\n+                    self.assertEqual(response.headers[\"Content-Type\"], expected_mime_type)\n+                os.remove(filename)\n\\ No newline at end of file\n",
  "num_sent_chars": 107324,
  "num_received_chars": 6129,
  "elapsed_time": 46.30562496185303,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 5622
}