{
  "instance_id": "django__django-16595",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab4..bbbf00e 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -264,6 +264,20 @@ class AlterField(FieldOperation):\n                     field=self.field,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterField)\n+            and self.is_same_field_operation(operation)\n+        ):\n+            # Combine the current AlterField with the next one\n+            combined_field = self.field.clone()\n+            combined_field.__dict__.update(operation.field.__dict__)\n+            return [\n+                AlterField(\n+                    model_name=self.model_name,\n+                    name=self.name,\n+                    field=combined_field,\n+                ),\n+            ]\n         return super().reduce(operation, app_label)\n \n \n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_optimizer_alterfield_reduction.py b/tests/migrations/test_migrations_optimizer_alterfield_reduction.py\nnew file mode 100644\nindex 0000000..bb11ee5\n--- /dev/null\n+++ b/tests/migrations/test_migrations_optimizer_alterfield_reduction.py\n@@ -0,0 +1,34 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class AlterFieldReductionTest(SimpleTestCase):\n+    def test_alter_field_reduction(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, \"books\")\n+\n+        # Assert that the operations are not reduced\n+        self.assertEqual(len(optimized_operations), 3)\n+        for op in optimized_operations:\n+            self.assertIsInstance(op, migrations.AlterField)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_optimizer_alterfield_reduction_inverted.py b/tests/migrations/test_migrations_optimizer_alterfield_reduction_inverted.py\nnew file mode 100644\nindex 0000000..5bf4fc0\n--- /dev/null\n+++ b/tests/migrations/test_migrations_optimizer_alterfield_reduction_inverted.py\n@@ -0,0 +1,36 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class AlterFieldReductionTest(SimpleTestCase):\n+    def test_alter_field_reduction(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, \"books\")\n+\n+        # Assert that the operations are reduced to trigger the bug\n+        if len(optimized_operations) != 1:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        for op in optimized_operations:\n+            if not isinstance(op, migrations.AlterField):\n+                raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 115571,
  "num_received_chars": 5366,
  "elapsed_time": 41.64263844490051,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 4910
}