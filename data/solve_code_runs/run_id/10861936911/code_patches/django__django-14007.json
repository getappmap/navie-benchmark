{
  "instance_id": "django__django-14007",
  "edit_test_file": "tests/queries/test_db_returning.py",
  "code_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex e43c121..d0e8c5e 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -181,12 +181,15 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # statement.\n         if not fields:\n             return '', ()\n-        columns = [\n-            '%s.%s' % (\n+        columns = []\n+        for field in fields:\n+            column = '%s.%s' % (\n                 self.quote_name(field.model._meta.db_table),\n                 self.quote_name(field.column),\n-            ) for field in fields\n-        ]\n+            )\n+            if hasattr(field, 'from_db_value'):\n+                column = field.from_db_value(column)\n+            columns.append(column)\n         return 'RETURNING %s' % ', '.join(columns), ()\n \n     def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 4028e05..47eec5e 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -889,7 +889,11 @@ class Options:\n         Private API intended only to be used by Django itself.\n         Fields to be returned after a database insert.\n         \"\"\"\n-        return [\n+        fields = [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n         ]\n+        for field in fields:\n+            if hasattr(field, 'from_db_value'):\n+                field.from_db_value = field.from_db_value\n+        return fields\n",
  "test_patch": "diff --git a/tests/queries/test_field_converters.py b/tests/queries/test_field_converters.py\nnew file mode 100644\nindex 0000000..11bce0b\n--- /dev/null\n+++ b/tests/queries/test_field_converters.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import BigAutoField\n+\n+class MyIntWrapper(int):\n+    pass\n+\n+class MyAutoField(BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FieldConvertersTests(TestCase):\n+    def test_insert_does_not_call_from_db_value(self):\n+        am = AutoModel.objects.create()\n+        # The issue is that the id is not wrapped in MyIntWrapper on creation\n+        self.assertIsInstance(am.id, int)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_field_converters_inverted.py b/tests/queries/test_field_converters_inverted.py\nnew file mode 100644\nindex 0000000..45b07f5\n--- /dev/null\n+++ b/tests/queries/test_field_converters_inverted.py\n@@ -0,0 +1,28 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import BigAutoField\n+\n+class MyIntWrapper(int):\n+    pass\n+\n+class MyAutoField(BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FieldConvertersTests(TestCase):\n+    def test_insert_does_not_call_from_db_value(self):\n+        am = AutoModel.objects.create()\n+        # The issue is that the id is not wrapped in MyIntWrapper on creation\n+        # Change the assertion to expect MyIntWrapper, so it fails if the bug is present\n+        if not isinstance(am.id, MyIntWrapper):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1330113,
  "num_received_chars": 61755,
  "elapsed_time": 528.4358670711517,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 36288
}