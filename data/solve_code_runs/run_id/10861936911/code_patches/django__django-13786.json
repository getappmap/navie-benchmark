{
  "instance_id": "django__django-13786",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c6..b8c6440 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,17 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            # Start with the current options and update with the new options\n+            new_options = {**self.options, **operation.options}\n+            # Remove any options not present in the new operation options\n+            for key in list(new_options.keys()):\n+                if key not in operation.options:\n+                    del new_options[key]\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=new_options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_squashmodel_options.py b/tests/migrations/test_migrations_squashmodel_options.py\nnew file mode 100644\nindex 0000000..eaf00ce\n--- /dev/null\n+++ b/tests/migrations/test_migrations_squashmodel_options.py\n@@ -0,0 +1,37 @@\n+import unittest\n+from django.db import models, migrations\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class TestMigrationsSquashModelOptions(unittest.TestCase):\n+    def test_create_model_with_alter_options_squashed(self):\n+        \"\"\"\n+        Test that CreateModel followed by AlterModelOptions does not clear\n+        model options when squashed.\n+        \"\"\"\n+        create_model = migrations.CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"name\", models.CharField(max_length=255)),\n+            ],\n+            options={\"verbose_name\": \"Test Model\"},\n+        )\n+        alter_options = migrations.AlterModelOptions(\n+            name=\"TestModel\",\n+            options={\"verbose_name_plural\": \"Test Models\"},\n+        )\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(\n+            [create_model, alter_options], app_label=\"test_app\"\n+        )\n+\n+        # The issue is that the options are not cleared, so we expect the\n+        # verbose_name to still be present, which is incorrect behavior.\n+        self.assertEqual(\n+            optimized_operations[0].options,\n+            {\"verbose_name\": \"Test Model\", \"verbose_name_plural\": \"Test Models\"},\n+            \"Model options were not cleared correctly when squashed.\"\n+        )\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_squashmodel_options_inverted.py b/tests/migrations/test_migrations_squashmodel_options_inverted.py\nnew file mode 100644\nindex 0000000..dc69fca\n--- /dev/null\n+++ b/tests/migrations/test_migrations_squashmodel_options_inverted.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from django.db import models, migrations\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class TestMigrationsSquashModelOptions(unittest.TestCase):\n+    def test_create_model_with_alter_options_squashed(self):\n+        \"\"\"\n+        Test that CreateModel followed by AlterModelOptions does not clear\n+        model options when squashed.\n+        \"\"\"\n+        create_model = migrations.CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"name\", models.CharField(max_length=255)),\n+            ],\n+            options={\"verbose_name\": \"Test Model\"},\n+        )\n+        alter_options = migrations.AlterModelOptions(\n+            name=\"TestModel\",\n+            options={\"verbose_name_plural\": \"Test Models\"},\n+        )\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(\n+            [create_model, alter_options], app_label=\"test_app\"\n+        )\n+\n+        # The issue is that the options are not cleared, so we expect the\n+        # verbose_name to still be present, which is incorrect behavior.\n+        # The test should now fail if the bug is present.\n+        self.assertNotEqual(\n+            optimized_operations[0].options,\n+            {\"verbose_name\": \"Test Model\", \"verbose_name_plural\": \"Test Models\"},\n+            \"__BUG__HERE__\"\n+        )\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 144436,
  "num_received_chars": 4782,
  "elapsed_time": 38.95243859291077,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}