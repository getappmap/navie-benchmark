{
  "instance_id": "django__django-13279",
  "edit_test_file": "tests/messages_tests/test_cookie.py",
  "code_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b545316..547788c 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -108,6 +108,9 @@ class SessionBase:\n \n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            # Use legacy encoding for backward compatibility\n+            return self._legacy_encode(session_dict)\n         return signing.dumps(\n             session_dict, salt=self.key_salt, serializer=self.serializer,\n             compress=True,\n@@ -116,11 +119,16 @@ class SessionBase:\n     def decode(self, session_data):\n         try:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n-        # RemovedInDjango40Warning: when the deprecation ends, handle here\n-        # exceptions similar to what _legacy_decode() does now.\n         except Exception:\n+            # Attempt legacy decode if the new format fails\n             return self._legacy_decode(session_data)\n \n+    def _legacy_encode(self, session_dict):\n+        # Legacy encoding logic for backward compatibility\n+        serialized = self.serializer().dumps(session_dict)\n+        hash = self._hash(serialized)\n+        return base64.b64encode(b':'.join([hash.encode(), serialized])).decode('ascii')\n+\n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n",
  "test_patch": "diff --git a/tests/messages_tests/test_session_legacy_encode.py b/tests/messages_tests/test_session_legacy_encode.py\nnew file mode 100644\nindex 0000000..c40dfbd\n--- /dev/null\n+++ b/tests/messages_tests/test_session_legacy_encode.py\n@@ -0,0 +1,23 @@\n+import json\n+from django.conf import settings\n+from django.contrib.messages.storage.cookie import CookieStorage\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import ignore_warnings\n+\n+class TestSessionLegacyEncoding(SimpleTestCase):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_session_data_decoding(self):\n+        \"\"\"\n+        Test that session data cannot be decoded during the transition to Django 3.1\n+        when DEFAULT_HASHING_ALGORITHM is set to 'sha1'.\n+        \"\"\"\n+        storage = CookieStorage(self.client)\n+        messages = ['this', 'that']\n+        # Encode the messages using the legacy method\n+        encoded_data = storage._legacy_hash(json.dumps(messages))\n+        # Attempt to decode the session data\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            decoded_data = storage._decode(encoded_data)\n+            # Assert that the decoded data is None, indicating a decoding failure\n+            self.assertIsNone(decoded_data)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/messages_tests/test_session_legacy_encode_inverted.py b/tests/messages_tests/test_session_legacy_encode_inverted.py\nnew file mode 100644\nindex 0000000..d166716\n--- /dev/null\n+++ b/tests/messages_tests/test_session_legacy_encode_inverted.py\n@@ -0,0 +1,26 @@\n+import json\n+from django.conf import settings\n+from django.contrib.messages.storage.cookie import CookieStorage\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import ignore_warnings\n+\n+class TestSessionLegacyEncoding(SimpleTestCase):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_session_data_decoding(self):\n+        \"\"\"\n+        Test that session data cannot be decoded during the transition to Django 3.1\n+        when DEFAULT_HASHING_ALGORITHM is set to 'sha1'.\n+        \"\"\"\n+        storage = CookieStorage(self.client)\n+        messages = ['this', 'that']\n+        # Encode the messages using the legacy method\n+        encoded_data = storage._legacy_hash(json.dumps(messages))\n+        # Attempt to decode the session data\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            decoded_data = storage._decode(encoded_data)\n+            # Assert that the decoded data is not None, indicating a decoding success\n+            # This should fail if the bug is present\n+            if decoded_data is None:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertIsNotNone(decoded_data)\n\\ No newline at end of file\n",
  "num_sent_chars": 1615162,
  "num_received_chars": 94562,
  "elapsed_time": 816.5387699604034,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}