{
  "instance_id": "django__django-13033",
  "edit_test_file": "tests/ordering/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\nindex 6df80e3..82cc88f 100644\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -304,10 +304,9 @@ class ChangeList:\n         constructed ordering.\n         \"\"\"\n         params = self.params\n-        ordering = list(self.model_admin.get_ordering(request) or self._get_default_ordering())\n+        # Start with an empty ordering list to ensure explicit order_by takes precedence\n+        ordering = []\n         if ORDER_VAR in params:\n-            # Clear ordering and used params\n-            ordering = []\n             order_params = params[ORDER_VAR].split('.')\n             for p in order_params:\n                 try:\n@@ -335,6 +334,10 @@ class ChangeList:\n         # Add the given query's ordering fields, if any.\n         ordering.extend(queryset.query.order_by)\n \n+        # Ensure explicit order_by fields take precedence over default model ordering\n+        if not ordering:\n+            ordering = list(self.model_admin.get_ordering(request) or self._get_default_ordering())\n+\n         return self._get_deterministic_ordering(ordering)\n \n     def _get_deterministic_ordering(self, ordering):\n",
  "test_patch": "diff --git a/tests/ordering/test_self_referencing_foreign_key_ordering.py b/tests/ordering/test_self_referencing_foreign_key_ordering.py\nnew file mode 100644\nindex 0000000..2ec3162\n--- /dev/null\n+++ b/tests/ordering/test_self_referencing_foreign_key_ordering.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query contains the unexpected DESCENDING sort\n+        self.assertIn('ORDER BY T3.\"id\" DESC', sql_query)\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertEqual(sql_query.count('JOIN'), 2)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py b/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py\nnew file mode 100644\nindex 0000000..bda9857\n--- /dev/null\n+++ b/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py\n@@ -0,0 +1,36 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query does not contain the unexpected DESCENDING sort\n+        if 'ORDER BY T3.\"id\" DESC' in sql_query:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertEqual(sql_query.count('JOIN'), 2)\n\\ No newline at end of file\n",
  "num_sent_chars": 2220415,
  "num_received_chars": 190841,
  "elapsed_time": 1295.8918919563293,
  "lint_repair_count": 14,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}