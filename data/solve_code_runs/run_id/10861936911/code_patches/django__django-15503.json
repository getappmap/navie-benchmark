{
  "instance_id": "django__django-15503",
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "code_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700..9a39b17 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -178,6 +178,7 @@ class HasKeyLookup(PostgresOperatorLookup):\n             lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(\n                 compiler, connection\n             )\n+            lhs_key_transforms = [str(key) for key in lhs_key_transforms]  # Ensure all keys are strings\n             lhs_json_path = compile_json_path(lhs_key_transforms)\n         else:\n             lhs, lhs_params = self.process_lhs(compiler, connection)\n@@ -310,7 +311,7 @@ class KeyTransform(Transform):\n         self.key_name = str(key_name)\n \n     def preprocess_lhs(self, compiler, connection):\n-        key_transforms = [self.key_name]\n+        key_transforms = [str(self.key_name)]  # Ensure key_name is treated as a string\n         previous = self.lhs\n         while isinstance(previous, KeyTransform):\n             key_transforms.insert(0, previous.key_name)\n@@ -347,6 +348,7 @@ class KeyTransform(Transform):\n \n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        key_transforms = [str(key) for key in key_transforms]  # Ensure all keys are strings\n         json_path = compile_json_path(key_transforms)\n         datatype_values = \",\".join(\n             [repr(datatype) for datatype in connection.ops.jsonfield_datatype_values]\n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield_has_keys_numeric.py b/tests/model_fields/test_jsonfield_has_keys_numeric.py\nnew file mode 100644\nindex 0000000..f05b1a1\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_has_keys_numeric.py\n@@ -0,0 +1,18 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        self.assertEqual(c2, 0, \"Should not find entry with numeric key '1111' on SQLite\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py b/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py\nnew file mode 100644\nindex 0000000..68c3fed\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py\n@@ -0,0 +1,18 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        self.assertEqual(c2, 1, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1585412,
  "num_received_chars": 78493,
  "elapsed_time": 557.2711925506592,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 116158
}