{
  "instance_id": "django__django-14752",
  "edit_test_file": "tests/admin_views/test_autocomplete_view.py",
  "code_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c..3329a84 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,16 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+                self.serialize_result(obj, to_field_name)\n                 for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"Convert a model instance into a dictionary for JSON serialization.\"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n",
  "test_patch": "diff --git a/tests/admin_views/test_autocomplete_json_view_refactor.py b/tests/admin_views/test_autocomplete_json_view_refactor.py\nnew file mode 100644\nindex 0000000..6d77605\n--- /dev/null\n+++ b/tests/admin_views/test_autocomplete_json_view_refactor.py\n@@ -0,0 +1,35 @@\n+import json\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.contrib.auth.models import User\n+from django.core.exceptions import PermissionDenied\n+from django.http import JsonResponse\n+from django.test import RequestFactory, TestCase\n+from django.urls import reverse_lazy\n+from .models import Question\n+\n+class CustomAutocompleteJsonView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return super().serialize_result(obj, to_field_name) | {'notes': obj.notes}\n+\n+class AutocompleteJsonViewRefactorTest(TestCase):\n+    as_view_args = {'admin_site': None}\n+    opts = {\n+        'app_label': Question._meta.app_label,\n+        'model_name': Question._meta.model_name,\n+        'field_name': 'question'\n+    }\n+    factory = RequestFactory()\n+    url = reverse_lazy('autocomplete_admin:autocomplete')\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+\n+    def test_custom_autocomplete_json_view(self):\n+        # Attempt to create a Question with a 'notes' field, which should raise an error\n+        with self.assertRaises(TypeError) as context:\n+            q = Question.objects.create(question='Is this a question?', notes='Some notes')\n+        \n+        self.assertIn(\"got an unexpected keyword argument 'notes'\", str(context.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/admin_views/test_autocomplete_json_view_refactor_inverted.py b/tests/admin_views/test_autocomplete_json_view_refactor_inverted.py\nnew file mode 100644\nindex 0000000..05f1ede\n--- /dev/null\n+++ b/tests/admin_views/test_autocomplete_json_view_refactor_inverted.py\n@@ -0,0 +1,36 @@\n+import json\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.contrib.auth.models import User\n+from django.core.exceptions import PermissionDenied\n+from django.http import JsonResponse\n+from django.test import RequestFactory, TestCase\n+from django.urls import reverse_lazy\n+from .models import Question\n+\n+class CustomAutocompleteJsonView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return super().serialize_result(obj, to_field_name) | {'notes': obj.notes}\n+\n+class AutocompleteJsonViewRefactorTest(TestCase):\n+    as_view_args = {'admin_site': None}\n+    opts = {\n+        'app_label': Question._meta.app_label,\n+        'model_name': Question._meta.model_name,\n+        'field_name': 'question'\n+    }\n+    factory = RequestFactory()\n+    url = reverse_lazy('autocomplete_admin:autocomplete')\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+\n+    def test_custom_autocomplete_json_view(self):\n+        # Attempt to create a Question with a 'notes' field, which should raise an error\n+        try:\n+            q = Question.objects.create(question='Is this a question?', notes='Some notes')\n+        except TypeError as e:\n+            self.assertIn(\"got an unexpected keyword argument 'notes'\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1186458,
  "num_received_chars": 70088,
  "elapsed_time": 489.88131070137024,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 7492
}