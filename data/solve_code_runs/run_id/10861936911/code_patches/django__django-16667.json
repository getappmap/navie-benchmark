{
  "instance_id": "django__django-16667",
  "edit_test_file": "tests/forms_tests/widget_tests/test_selectdatewidget.py",
  "code_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e..7e5b8f0 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1153,14 +1153,23 @@ class SelectDateWidget(Widget):\n         if y == m == d == \"\":\n             return None\n         if y is not None and m is not None and d is not None:\n-            input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n-            input_format = formats.sanitize_strftime_format(input_format)\n             try:\n-                date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+                year = int(y)\n+                month = int(m)\n+                day = int(d)\n+                if not (1 <= year <= 9999):\n+                    raise ValueError(\"Year out of range\")\n+                if not (1 <= month <= 12):\n+                    raise ValueError(\"Month out of range\")\n+                # Check day validity for the given month and year\n+                datetime.date(year, month, day)  # This will raise ValueError if invalid\n+            except (ValueError, OverflowError):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n+            input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n+            input_format = formats.sanitize_strftime_format(input_format)\n+            date_value = datetime.date(year, month, day)\n             return date_value.strftime(input_format)\n         return data.get(name)\n \n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_overflowerror_handling.py b/tests/forms_tests/widget_tests/test_overflowerror_handling.py\nnew file mode 100644\nindex 0000000..db32903\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_overflowerror_handling.py\n@@ -0,0 +1,27 @@\n+from django import forms\n+from django.forms import SelectDateWidget\n+from django.test import TestCase\n+from django.http import HttpRequest\n+from django.http import HttpResponse\n+\n+class ReproForm(forms.Form):\n+    my_date = forms.DateField(widget=SelectDateWidget())\n+\n+def repro_view(request):\n+    form = ReproForm(request.GET)  # for ease of reproducibility\n+    if form.is_valid():\n+        return HttpResponse(\"ok\")\n+    else:\n+        return HttpResponse(\"not ok\")\n+\n+class SelectDateWidgetOverflowErrorTest(TestCase):\n+    def test_overflow_error(self):\n+        request = HttpRequest()\n+        request.method = 'GET'\n+        request.GET = {\n+            'my_date_day': '1',\n+            'my_date_month': '1',\n+            'my_date_year': '1234567821345678'\n+        }\n+        with self.assertRaises(OverflowError):\n+            repro_view(request)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_overflowerror_handling_inverted.py b/tests/forms_tests/widget_tests/test_overflowerror_handling_inverted.py\nnew file mode 100644\nindex 0000000..c26f86b\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_overflowerror_handling_inverted.py\n@@ -0,0 +1,29 @@\n+from django import forms\n+from django.forms import SelectDateWidget\n+from django.test import TestCase\n+from django.http import HttpRequest\n+from django.http import HttpResponse\n+\n+class ReproForm(forms.Form):\n+    my_date = forms.DateField(widget=SelectDateWidget())\n+\n+def repro_view(request):\n+    form = ReproForm(request.GET)  # for ease of reproducibility\n+    if form.is_valid():\n+        return HttpResponse(\"ok\")\n+    else:\n+        return HttpResponse(\"not ok\")\n+\n+class SelectDateWidgetOverflowErrorTest(TestCase):\n+    def test_overflow_error(self):\n+        request = HttpRequest()\n+        request.method = 'GET'\n+        request.GET = {\n+            'my_date_day': '1',\n+            'my_date_month': '1',\n+            'my_date_year': '1234567821345678'\n+        }\n+        try:\n+            repro_view(request)\n+        except OverflowError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 126163,
  "num_received_chars": 5653,
  "elapsed_time": 50.85733127593994,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 13841
}