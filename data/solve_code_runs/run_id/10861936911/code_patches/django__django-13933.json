{
  "instance_id": "django__django-13933",
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "code_patch": null,
  "test_patch": "diff --git a/tests/model_forms/test_invalid_choice.py b/tests/model_forms/test_invalid_choice.py\nnew file mode 100644\nindex 0000000..caffa20\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_choice.py\n@@ -0,0 +1,18 @@\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+from .models import Category\n+\n+class ModelChoiceFieldInvalidChoiceTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_error_message(self):\n+        f = forms.ModelChoiceField(queryset=Category.objects.all())\n+        invalid_value = 999  # Assuming 999 is not a valid pk in the test database\n+        expected_message = \"['Select a valid choice. That choice is not one of the available choices.']\"\n+        with self.assertRaisesMessage(ValidationError, expected_message):\n+            f.clean(invalid_value)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_invalid_choice_inverted.py b/tests/model_forms/test_invalid_choice_inverted.py\nnew file mode 100644\nindex 0000000..d342302\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_choice_inverted.py\n@@ -0,0 +1,23 @@\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+from .models import Category\n+\n+class ModelChoiceFieldInvalidChoiceTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_error_message(self):\n+        f = forms.ModelChoiceField(queryset=Category.objects.all())\n+        invalid_value = 999  # Assuming 999 is not a valid pk in the test database\n+        # Altered expected message to include the invalid value\n+        expected_message = \"['Select a valid choice. 999 is not one of the available choices.']\"\n+        with self.assertRaisesMessage(ValidationError, expected_message):\n+            try:\n+                f.clean(invalid_value)\n+            except ValidationError as e:\n+                # Raise the specific error message when the bug is observed\n+                raise AssertionError(\"__BUG__HERE__\") from e\n\\ No newline at end of file\n",
  "num_sent_chars": 3588308,
  "num_received_chars": 153645,
  "elapsed_time": 1077.9401354789734,
  "lint_repair_count": 36,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": null,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 114445
}