{
  "instance_id": "django__django-15916",
  "edit_test_file": "tests/model_formsets_regress/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fa..22e9d11 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -630,6 +630,8 @@ def modelform_factory(\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n     Meta = type(\"Meta\", bases, attrs)\n+    if formfield_callback is None and hasattr(Meta, \"formfield_callback\"):\n+        formfield_callback = Meta.formfield_callback\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     # Give this new form class a reasonable name.\n",
  "test_patch": "diff --git a/tests/model_formsets_regress/test_modelform_meta_formfield_callback.py b/tests/model_formsets_regress/test_modelform_meta_formfield_callback.py\nnew file mode 100644\nindex 0000000..4ae20d0\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_modelform_meta_formfield_callback.py\n@@ -0,0 +1,27 @@\n+from django import forms\n+from django.db import models\n+from django.test import TestCase\n+from django.forms.models import modelform_factory\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class ModelFormMetaFormfieldCallbackTest(TestCase):\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form = FactoryForm()\n+        # The test should pass if the fields are not required, indicating the issue.\n+        self.assertFalse(form.fields['active'].required)\n+        self.assertFalse(form.fields['name'].required)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_formsets_regress/test_modelform_meta_formfield_callback_inverted.py b/tests/model_formsets_regress/test_modelform_meta_formfield_callback_inverted.py\nnew file mode 100644\nindex 0000000..4ed2fc9\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_modelform_meta_formfield_callback_inverted.py\n@@ -0,0 +1,27 @@\n+from django import forms\n+from django.db import models\n+from django.test import TestCase\n+from django.forms.models import modelform_factory\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class ModelFormMetaFormfieldCallbackTest(TestCase):\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form = FactoryForm()\n+        # The test should fail if the fields are not required, indicating the issue.\n+        if not form.fields['active'].required or not form.fields['name'].required:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 973218,
  "num_received_chars": 34332,
  "elapsed_time": 268.5716814994812,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 16527
}