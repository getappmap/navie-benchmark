{
  "instance_id": "django__django-11815",
  "edit_test_file": "tests/field_deconstruction/tests.py",
  "code_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a..ba9fdbd 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -60,8 +60,15 @@ class ChoicesMeta(enum.EnumMeta):\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n-    pass\n \n+    def deconstruct(self):\n+        # Serialize using the Enum name\n+        return self.__class__.__name__, self.name\n+\n+    @classmethod\n+    def from_name(cls, name):\n+        # Deserialize using the Enum name\n+        return cls[name]\n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n",
  "test_patch": "diff --git a/tests/field_deconstruction/test_enum_migration_issue.py b/tests/field_deconstruction/test_enum_migration_issue.py\nnew file mode 100644\nindex 0000000..2c13a15\n--- /dev/null\n+++ b/tests/field_deconstruction/test_enum_migration_issue.py\n@@ -0,0 +1,21 @@\n+from enum import Enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class Status(Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+    def __str__(self):\n+        return self.name\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class EnumMigrationIssueTest(SimpleTestCase):\n+    def test_enum_migration_uses_value_instead_of_name(self):\n+        field = Item._meta.get_field('status')\n+        name, path, args, kwargs = field.deconstruct()\n+        # The issue is that the default is using the value of the Enum instead of its name\n+        self.assertEqual(kwargs['default'], Status('Good'))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/field_deconstruction/test_enum_migration_issue_inverted.py b/tests/field_deconstruction/test_enum_migration_issue_inverted.py\nnew file mode 100644\nindex 0000000..be2fe19\n--- /dev/null\n+++ b/tests/field_deconstruction/test_enum_migration_issue_inverted.py\n@@ -0,0 +1,24 @@\n+from enum import Enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class Status(Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+    def __str__(self):\n+        return self.name\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class EnumMigrationIssueTest(SimpleTestCase):\n+    def test_enum_migration_uses_value_instead_of_name(self):\n+        field = Item._meta.get_field('status')\n+        name, path, args, kwargs = field.deconstruct()\n+        # The issue is that the default is using the value of the Enum instead of its name\n+        # Alter the test to fail when the issue is observed\n+        if kwargs['default'] == Status('Good'):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(kwargs['default'], Status['GOOD'])\n\\ No newline at end of file\n",
  "num_sent_chars": 2636536,
  "num_received_chars": 109622,
  "elapsed_time": 942.5041823387146,
  "lint_repair_count": 24,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}