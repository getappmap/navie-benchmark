{
  "instance_id": "django__django-16938",
  "edit_test_file": "tests/m2m_through_regress/tests.py",
  "code_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 00735e0..d8bde59 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -842,7 +842,7 @@ class Options:\n                     delattr(self, cache_key)\n         self._get_fields_cache = {}\n \n-    def get_fields(self, include_parents=True, include_hidden=False):\n+    def get_fields(self, include_parents=True, include_hidden=False, allow_deferred_traversal=False):\n         \"\"\"\n         Return a list of fields associated to the model. By default, include\n         forward and reverse fields, fields derived from inheritance, but not\n@@ -851,11 +851,12 @@ class Options:\n         - include_parents: include fields derived from inheritance\n         - include_hidden:  include fields that have a related_name that\n                            starts with a \"+\"\n+        - allow_deferred_traversal: allow traversal of fields even if they are deferred\n         \"\"\"\n         if include_parents is False:\n             include_parents = PROXY_PARENTS\n         return self._get_fields(\n-            include_parents=include_parents, include_hidden=include_hidden\n+            include_parents=include_parents, include_hidden=include_hidden, allow_deferred_traversal=allow_deferred_traversal\n         )\n \n     def _get_fields(\n@@ -865,6 +866,7 @@ class Options:\n         include_parents=True,\n         include_hidden=False,\n         seen_models=None,\n+        allow_deferred_traversal=False,\n     ):\n         \"\"\"\n         Internal helper function to return fields of the model.\n@@ -876,6 +878,7 @@ class Options:\n           PROXY_PARENTS. When set to PROXY_PARENTS, the call will return all\n           fields defined for the current model or any of its parents in the\n           parent chain to the model's concrete model.\n+        * If allow_deferred_traversal=True, allow traversal of fields even if they are deferred.\n         \"\"\"\n         if include_parents not in (True, False, PROXY_PARENTS):\n             raise TypeError(\n",
  "test_patch": "diff --git a/tests/m2m_through_regress/test_serialization_m2m_custom_manager.py b/tests/m2m_through_regress/test_serialization_m2m_custom_manager.py\nnew file mode 100644\nindex 0000000..44cff28\n--- /dev/null\n+++ b/tests/m2m_through_regress/test_serialization_m2m_custom_manager.py\n@@ -0,0 +1,38 @@\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.test import TestCase\n+from django.db import models\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+class SerializationM2MCustomManagerTestCase(TestCase):\n+    def test_serialization_m2m_with_custom_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        with self.assertRaises(FieldError) as cm:\n+            serializers.serialize(\"json\", [test])\n+\n+        self.assertIn(\n+            \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\",\n+            str(cm.exception)\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/m2m_through_regress/test_serialization_m2m_custom_manager_inverted.py b/tests/m2m_through_regress/test_serialization_m2m_custom_manager_inverted.py\nnew file mode 100644\nindex 0000000..7400b00\n--- /dev/null\n+++ b/tests/m2m_through_regress/test_serialization_m2m_custom_manager_inverted.py\n@@ -0,0 +1,39 @@\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.test import TestCase\n+from django.db import models\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+class SerializationM2MCustomManagerTestCase(TestCase):\n+    def test_serialization_m2m_with_custom_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        try:\n+            serializers.serialize(\"json\", [test])\n+        except FieldError as e:\n+            self.assertIn(\n+                \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\",\n+                str(e)\n+            )\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2394140,
  "num_received_chars": 128045,
  "elapsed_time": 713.1368925571442,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 211448
}