{
  "instance_id": "django__django-16631",
  "edit_test_file": "tests/auth_tests/test_tokens.py",
  "code_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 5ee30bf..e4057a1 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -136,9 +136,11 @@ class AbstractBaseUser(models.Model):\n         Return an HMAC of the password field.\n         \"\"\"\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n+        secret = self.secret  # Use the secret property to include fallbacks\n         return salted_hmac(\n             key_salt,\n             self.password,\n+            secret=secret,\n             algorithm=\"sha256\",\n         ).hexdigest()\n \n\ndiff --git a/django/utils/crypto.py b/django/utils/crypto.py\nindex 1c0e700..f5f7674 100644\n--- a/django/utils/crypto.py\n+++ b/django/utils/crypto.py\n@@ -24,24 +24,27 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\"):\n     A different key_salt should be passed in for every application of HMAC.\n     \"\"\"\n     if secret is None:\n-        secret = settings.SECRET_KEY\n+        secrets_to_try = [settings.SECRET_KEY] + getattr(settings, 'SECRET_KEY_FALLBACKS', [])\n+    else:\n+        secrets_to_try = [secret]\n \n     key_salt = force_bytes(key_salt)\n-    secret = force_bytes(secret)\n-    try:\n-        hasher = getattr(hashlib, algorithm)\n-    except AttributeError as e:\n-        raise InvalidAlgorithm(\n-            \"%r is not an algorithm accepted by the hashlib module.\" % algorithm\n-        ) from e\n-    # We need to generate a derived key from our base key.  We can do this by\n-    # passing the key_salt and our base key through a pseudo-random function.\n-    key = hasher(key_salt + secret).digest()\n-    # If len(key_salt + secret) > block size of the hash algorithm, the above\n-    # line is redundant and could be replaced by key = key_salt + secret, since\n-    # the hmac module does the same thing for keys longer than the block size.\n-    # However, we need to ensure that we *always* do this.\n-    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n+    for secret in secrets_to_try:\n+        secret = force_bytes(secret)\n+        try:\n+            hasher = getattr(hashlib, algorithm)\n+        except AttributeError as e:\n+            raise InvalidAlgorithm(\n+                \"%r is not an algorithm accepted by the hashlib module.\" % algorithm\n+            ) from e\n+        # We need to generate a derived key from our base key.  We can do this by\n+        # passing the key_salt and our base key through a pseudo-random function.\n+        key = hasher(key_salt + secret).digest()\n+        # If len(key_salt + secret) > block size of the hash algorithm, the above\n+        # line is redundant and could be replaced by key = key_salt + secret, since\n+        # the hmac module does the same thing for keys longer than the block size.\n+        # However, we need to ensure that we *always* do this.\n+        return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n \n \n RANDOM_STRING_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n",
  "test_patch": "diff --git a/tests/auth_tests/test_secret_key_fallbacks.py b/tests/auth_tests/test_secret_key_fallbacks.py\nnew file mode 100644\nindex 0000000..bfb206e\n--- /dev/null\n+++ b/tests/auth_tests/test_secret_key_fallbacks.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.contrib.sessions.middleware import SessionMiddleware\n+from django.test.client import RequestFactory\n+\n+User = get_user_model()\n+\n+class SecretKeyFallbacksSessionTest(TestCase):\n+    @override_settings(\n+        SECRET_KEY=\"newsecret\",\n+        SECRET_KEY_FALLBACKS=[\"oldsecret\"],\n+    )\n+    def test_secret_key_fallbacks_not_used_for_sessions(self):\n+        # Create a user and simulate a login\n+        user = User.objects.create_user(\"sessiontestuser\", \"test@example.com\", \"testpw\")\n+        request = RequestFactory().get('/')\n+        middleware = SessionMiddleware(lambda req: None)\n+        middleware.process_request(request)\n+        request.session.save()\n+\n+        # Simulate setting the session auth hash with the old secret\n+        token_generator = PasswordResetTokenGenerator()\n+        token_generator.secret = \"oldsecret\"\n+        session_auth_hash = token_generator.make_token(user)\n+        request.session['HASH_SESSION_KEY'] = session_auth_hash\n+\n+        # Rotate the secret key\n+        with self.settings(SECRET_KEY=\"newsecret\", SECRET_KEY_FALLBACKS=[\"oldsecret\"]):\n+            # Simulate a request with the new secret key\n+            request = RequestFactory().get('/')\n+            middleware.process_request(request)\n+            request.session.save()\n+\n+            # Check if the session is still valid\n+            self.assertNotEqual(\n+                request.session.get('HASH_SESSION_KEY'),\n+                session_auth_hash,\n+                \"Session should be invalidated due to secret key rotation.\"\n+            )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_secret_key_fallbacks_inverted.py b/tests/auth_tests/test_secret_key_fallbacks_inverted.py\nnew file mode 100644\nindex 0000000..cadd658\n--- /dev/null\n+++ b/tests/auth_tests/test_secret_key_fallbacks_inverted.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.contrib.sessions.middleware import SessionMiddleware\n+from django.test.client import RequestFactory\n+\n+User = get_user_model()\n+\n+class SecretKeyFallbacksSessionTest(TestCase):\n+    @override_settings(\n+        SECRET_KEY=\"newsecret\",\n+        SECRET_KEY_FALLBACKS=[\"oldsecret\"],\n+    )\n+    def test_secret_key_fallbacks_not_used_for_sessions(self):\n+        # Create a user and simulate a login\n+        user = User.objects.create_user(\"sessiontestuser\", \"test@example.com\", \"testpw\")\n+        request = RequestFactory().get('/')\n+        middleware = SessionMiddleware(lambda req: None)\n+        middleware.process_request(request)\n+        request.session.save()\n+\n+        # Simulate setting the session auth hash with the old secret\n+        token_generator = PasswordResetTokenGenerator()\n+        token_generator.secret = \"oldsecret\"\n+        session_auth_hash = token_generator.make_token(user)\n+        request.session['HASH_SESSION_KEY'] = session_auth_hash\n+\n+        # Rotate the secret key\n+        with self.settings(SECRET_KEY=\"newsecret\", SECRET_KEY_FALLBACKS=[\"oldsecret\"]):\n+            # Simulate a request with the new secret key\n+            request = RequestFactory().get('/')\n+            middleware.process_request(request)\n+            request.session.save()\n+\n+            # Check if the session is still valid\n+            self.assertEqual(\n+                request.session.get('HASH_SESSION_KEY'),\n+                session_auth_hash,\n+                \"__BUG__HERE__\"\n+            )\n\\ No newline at end of file\n",
  "num_sent_chars": 3710305,
  "num_received_chars": 190334,
  "elapsed_time": 1101.956247329712,
  "lint_repair_count": 34,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 200897
}