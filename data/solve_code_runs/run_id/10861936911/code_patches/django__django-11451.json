{
  "instance_id": "django__django-11451",
  "edit_test_file": "tests/auth_tests/test_auth_backends.py",
  "code_patch": "diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722..0c844c5 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -37,8 +37,8 @@ class ModelBackend(BaseBackend):\n     \"\"\"\n \n     def authenticate(self, request, username=None, password=None, **kwargs):\n-        if username is None:\n-            username = kwargs.get(UserModel.USERNAME_FIELD)\n+        if username is None or password is None:\n+            return None\n         try:\n             user = UserModel._default_manager.get_by_natural_key(username)\n         except UserModel.DoesNotExist:\n",
  "test_patch": "diff --git a/tests/auth_tests/test_model_backend_authenticate.py b/tests/auth_tests/test_model_backend_authenticate.py\nnew file mode 100644\nindex 0000000..ae29190\n--- /dev/null\n+++ b/tests/auth_tests/test_model_backend_authenticate.py\n@@ -0,0 +1,13 @@\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.backends import ModelBackend\n+from django.db import connection\n+\n+UserModel = get_user_model()\n+\n+class ModelBackendAuthenticateTest(TestCase):\n+    def test_authenticate_with_none_username(self):\n+        backend = ModelBackend()\n+        with self.assertNumQueries(1):\n+            user = backend.authenticate(request=None, username=None, password=None)\n+            self.assertIsNone(user)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_model_backend_authenticate_inverted.py b/tests/auth_tests/test_model_backend_authenticate_inverted.py\nnew file mode 100644\nindex 0000000..36ed94d\n--- /dev/null\n+++ b/tests/auth_tests/test_model_backend_authenticate_inverted.py\n@@ -0,0 +1,14 @@\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.backends import ModelBackend\n+from django.db import connection\n+\n+UserModel = get_user_model()\n+\n+class ModelBackendAuthenticateTest(TestCase):\n+    def test_authenticate_with_none_username(self):\n+        backend = ModelBackend()\n+        with self.assertRaisesMessage(AssertionError, \"__BUG__HERE__\"):\n+            with self.assertNumQueries(0):  # Expecting 0 queries, should fail if a query is made\n+                user = backend.authenticate(request=None, username=None, password=None)\n+                self.assertIsNone(user)\n\\ No newline at end of file\n",
  "num_sent_chars": 1200082,
  "num_received_chars": 44018,
  "elapsed_time": 358.98100447654724,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}