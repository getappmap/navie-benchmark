{
  "instance_id": "django__django-11820",
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "code_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex baa0c87..b79418b 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -195,6 +195,26 @@ class Options:\n             # order_with_respect_and ordering are mutually exclusive.\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n \n+            # Validate ordering fields to handle related field lookups like '__pk'.\n+            if self.ordering:\n+                validated_ordering = []\n+                for order in self.ordering:\n+                    if '__pk' in order:\n+                        related_field, _, _ = order.partition('__pk')\n+                        try:\n+                            field = self.get_field(related_field)\n+                            if field.is_relation:\n+                                validated_ordering.append(f\"{related_field}__{field.remote_field.model._meta.pk.name}\")\n+                            else:\n+                                raise FieldDoesNotExist\n+                        except FieldDoesNotExist:\n+                            raise ImproperlyConfigured(\n+                                \"Ordering refers to a nonexistent field, related field, or lookup: '%s'\" % order\n+                            )\n+                    else:\n+                        validated_ordering.append(order)\n+                self.ordering = validated_ordering\n+\n             # Any leftover attributes must be invalid.\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_meta_ordering_pk_issue.py b/tests/invalid_models_tests/test_meta_ordering_pk_issue.py\nnew file mode 100644\nindex 0000000..5eb5ff3\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_meta_ordering_pk_issue.py\n@@ -0,0 +1,23 @@\n+from django.db import models\n+from django.core.checks import Error\n+from django.test import TestCase\n+\n+class TestMetaOrderingPKIssue(TestCase):\n+    def test_ordering_with_related_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('option__pk',)\n+\n+        self.assertEqual(SomeModel.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'option__pk'.\",\n+                obj=SomeModel,\n+                id='models.E015',\n+            )\n+        ])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_meta_ordering_pk_issue_inverted.py b/tests/invalid_models_tests/test_meta_ordering_pk_issue_inverted.py\nnew file mode 100644\nindex 0000000..fea71ed\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_meta_ordering_pk_issue_inverted.py\n@@ -0,0 +1,19 @@\n+from django.db import models\n+from django.core.checks import Error\n+from django.test import TestCase\n+\n+class TestMetaOrderingPKIssue(TestCase):\n+    def test_ordering_with_related_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('option__pk',)\n+\n+        # Alter the test to fail when the issue is observed\n+        errors = SomeModel.check()\n+        if any(error.id == 'models.E015' for error in errors):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1448208,
  "num_received_chars": 130109,
  "elapsed_time": 903.9170227050781,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}