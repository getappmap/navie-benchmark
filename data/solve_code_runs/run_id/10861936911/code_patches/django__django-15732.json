{
  "instance_id": "django__django-15732",
  "edit_test_file": "tests/introspection/tests.py",
  "code_patch": "diff --git a/django/db/backends/base/introspection.py b/django/db/backends/base/introspection.py\nindex 8bf4562..8a65cd9 100644\n--- a/django/db/backends/base/introspection.py\n+++ b/django/db/backends/base/introspection.py\n@@ -185,7 +185,8 @@ class BaseDatabaseIntrospection:\n     def get_constraints(self, cursor, table_name):\n         \"\"\"\n         Retrieve any constraints or keys (unique, pk, fk, check, index)\n-        across one or more columns.\n+        across one or more columns, distinguishing between primary key\n+        and other unique constraints.\n \n         Return a dict mapping constraint names to their attributes,\n         where attributes is a dict with keys:\n\ndiff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex a22ae00..d88fcaa 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -229,10 +229,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n         # Removed an index? Drop any PostgreSQL-specific indexes.\n         if old_field.unique and not (new_field.db_index or new_field.unique):\n-            index_to_remove = self._create_index_name(\n-                model._meta.db_table, [old_field.column], suffix=\"_like\"\n-            )\n-            self.execute(self._delete_index_sql(model, index_to_remove))\n+            # Ensure we are not dropping a primary key constraint\n+            if not old_field.primary_key:\n+                index_to_remove = self._create_index_name(\n+                    model._meta.db_table, [old_field.column], suffix=\"_like\"\n+                )\n+                self.execute(self._delete_index_sql(model, index_to_remove))\n \n     def _index_columns(self, table, columns, col_suffixes, opclasses):\n         if opclasses:\n\ndiff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py\nindex a741537..2540079 100644\n--- a/django/db/backends/sqlite3/introspection.py\n+++ b/django/db/backends/sqlite3/introspection.py\n@@ -386,6 +386,10 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 \"check\": False,\n                 \"index\": False,\n             }\n+        # Ensure unique constraints are not confused with primary key\n+        for constraint_name, constraint in constraints.items():\n+            if constraint[\"unique\"] and constraint[\"primary_key\"]:\n+                constraint[\"unique\"] = False\n         relations = enumerate(self.get_relations(cursor, table_name).items())\n         constraints.update(\n             {\n",
  "test_patch": "diff --git a/tests/introspection/test_fix_unique_constraint_issue.py b/tests/introspection/test_fix_unique_constraint_issue.py\nnew file mode 100644\nindex 0000000..a02fcc7\n--- /dev/null\n+++ b/tests/introspection/test_fix_unique_constraint_issue.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from django.db import connection, models, NotSupportedError\n+from django.test import TestCase\n+\n+class DropUniqueTogetherConstraintTest(TestCase):\n+    def test_drop_unique_together_constraint(self):\n+        class TestModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+            class Meta:\n+                unique_together = (('id',),)\n+        \n+        with self.assertRaises(NotSupportedError):\n+            with connection.schema_editor() as schema_editor:\n+                schema_editor.remove_constraint(TestModel, 'unique_together_constraint')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/introspection/test_fix_unique_constraint_issue_inverted.py b/tests/introspection/test_fix_unique_constraint_issue_inverted.py\nnew file mode 100644\nindex 0000000..dc09e83\n--- /dev/null\n+++ b/tests/introspection/test_fix_unique_constraint_issue_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.db import connection, models, NotSupportedError\n+from django.test import TestCase\n+\n+class DropUniqueTogetherConstraintTest(TestCase):\n+    def test_drop_unique_together_constraint(self):\n+        class TestModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+            class Meta:\n+                unique_together = (('id',),)\n+        \n+        # The test should now fail when the issue is observed\n+        with self.assertRaisesMessage(Exception, \"__BUG__HERE__\"):\n+            with connection.schema_editor() as schema_editor:\n+                try:\n+                    schema_editor.remove_constraint(TestModel, 'unique_together_constraint')\n+                except NotSupportedError:\n+                    raise Exception(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1904678,
  "num_received_chars": 139058,
  "elapsed_time": 796.0747125148773,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 31711
}