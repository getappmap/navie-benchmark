{
  "instance_id": "django__django-13112",
  "edit_test_file": "tests/model_fields/test_foreignkey.py",
  "code_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3282fd6..185a6d2 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -15,6 +15,7 @@ from django.db.models.fields.related import (\n )\n from django.db.models.query_utils import PathInfo\n from django.utils.functional import cached_property\n+from django.utils.text import slugify  # Import slugify to prevent linter error\n \n \n class GenericForeignKey(FieldCacheMixin):\n@@ -157,6 +158,12 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 return []\n \n+    def _normalize_app_name(self, app_name):\n+        \"\"\"\n+        Normalize the app name to ensure case-insensitive comparison.\n+        \"\"\"\n+        return slugify(app_name).replace('-', '_')\n+\n     def get_cache_name(self):\n         return self.name\n \n",
  "test_patch": "diff --git a/tests/model_fields/test_mixedcase_foreignkey.py b/tests/model_fields/test_mixedcase_foreignkey.py\nnew file mode 100644\nindex 0000000..18caa0c\n--- /dev/null\n+++ b/tests/model_fields/test_mixedcase_foreignkey.py\n@@ -0,0 +1,20 @@\n+from django.test import TestCase\n+from django.core.management import call_command\n+from django.apps import apps\n+from django.core.checks import Error\n+\n+class MixedCaseForeignKeyTest(TestCase):\n+    def test_mixed_case_foreign_key(self):\n+        # Attempt to get the app config for 'dj_reglogin' to reproduce the issue\n+        with self.assertRaises(LookupError) as context:\n+            apps.get_app_config('dj_reglogin')\n+        \n+        # Check if the error message matches the expected output\n+        self.assertIn(\"No installed app with label 'dj_reglogin'\", str(context.exception))\n+\n+        # Attempt to run makemigrations for 'DJ_RegLogin' to reproduce the issue\n+        with self.assertRaises(SystemExit) as cm:\n+            call_command('makemigrations', 'DJ_RegLogin')\n+        \n+        # Check if the SystemExit code is 2, which indicates an error\n+        self.assertEqual(cm.exception.code, 2)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_mixedcase_foreignkey_inverted.py b/tests/model_fields/test_mixedcase_foreignkey_inverted.py\nnew file mode 100644\nindex 0000000..3cf07fa\n--- /dev/null\n+++ b/tests/model_fields/test_mixedcase_foreignkey_inverted.py\n@@ -0,0 +1,25 @@\n+from django.test import TestCase\n+from django.core.management import call_command\n+from django.apps import apps\n+from django.core.checks import Error\n+\n+class MixedCaseForeignKeyTest(TestCase):\n+    def test_mixed_case_foreign_key(self):\n+        # Attempt to get the app config for 'dj_reglogin' to reproduce the issue\n+        with self.assertRaises(LookupError) as context:\n+            apps.get_app_config('dj_reglogin')\n+        \n+        # Check if the error message matches the expected output\n+        self.assertIn(\"No installed app with label 'dj_reglogin'\", str(context.exception))\n+        \n+        # Attempt to run makemigrations for 'DJ_RegLogin' to reproduce the issue\n+        with self.assertRaises(SystemExit) as cm:\n+            call_command('makemigrations', 'DJ_RegLogin')\n+        \n+        # Check if the SystemExit code is 2, which indicates an error\n+        self.assertEqual(cm.exception.code, 2)\n+\n+        # Alter the test to fail when the issue is observed\n+        # This is where the presence of the bug was previously asserted\n+        # Now, raise an error to indicate the bug\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2027961,
  "num_received_chars": 162045,
  "elapsed_time": 1114.9269387722015,
  "lint_repair_count": 13,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}