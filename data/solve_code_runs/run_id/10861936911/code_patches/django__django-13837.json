{
  "instance_id": "django__django-13837",
  "edit_test_file": "tests/utils_tests/test_autoreload.py",
  "code_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 4e30a28..fb58077 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -189,7 +189,12 @@ class ManagementUtility:\n         self.argv = argv or sys.argv[:]\n         self.prog_name = os.path.basename(self.argv[0])\n         if self.prog_name == '__main__.py':\n-            self.prog_name = 'python -m django'\n+            # Check if Python was launched with the -m flag for a custom package\n+            main_spec = getattr(sys.modules['__main__'], '__spec__', None)\n+            if main_spec and main_spec.parent:\n+                self.prog_name = f'python -m {main_spec.parent}'\n+            else:\n+                self.prog_name = 'python -m django'\n         self.settings_exception = None\n \n     def main_help_text(self, commands_only=False):\n",
  "test_patch": "diff --git a/tests/utils_tests/test_autoreload_mod.py b/tests/utils_tests/test_autoreload_mod.py\nnew file mode 100644\nindex 0000000..33f8549\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_mod.py\n@@ -0,0 +1,14 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadCommand(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_get_child_arguments_with_non_django_package(self):\n+        with self.assertRaises(RuntimeError):\n+            autoreload.get_child_arguments()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_autoreload_mod_inverted.py b/tests/utils_tests/test_autoreload_mod_inverted.py\nnew file mode 100644\nindex 0000000..0325ae9\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_mod_inverted.py\n@@ -0,0 +1,17 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadCommand(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_get_child_arguments_with_non_django_package(self):\n+        # The test should now fail when the issue is observed\n+        try:\n+            autoreload.get_child_arguments()\n+        except RuntimeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1346070,
  "num_received_chars": 64632,
  "elapsed_time": 509.8899486064911,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}