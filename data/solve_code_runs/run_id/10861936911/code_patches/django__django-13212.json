{
  "instance_id": "django__django-13212",
  "edit_test_file": "tests/validation/test_validators.py",
  "code_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31..b1bb603 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -272,12 +272,12 @@ def validate_ipv4_address(value):\n     try:\n         ipaddress.IPv4Address(value)\n     except ValueError:\n-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')\n+        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})\n \n \n def validate_ipv6_address(value):\n     if not is_valid_ipv6_address(value):\n-        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')\n+        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})\n \n \n def validate_ipv46_address(value):\n@@ -287,7 +287,7 @@ def validate_ipv46_address(value):\n         try:\n             validate_ipv6_address(value)\n         except ValidationError:\n-            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')\n+            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value})\n \n \n ip_address_validator_map = {\n@@ -460,20 +460,20 @@ class DecimalValidator:\n             raise ValidationError(\n                 self.messages['max_digits'],\n                 code='max_digits',\n-                params={'max': self.max_digits},\n+                params={'max': self.max_digits, 'value': value},\n             )\n         if self.decimal_places is not None and decimals > self.decimal_places:\n             raise ValidationError(\n                 self.messages['max_decimal_places'],\n                 code='max_decimal_places',\n-                params={'max': self.decimal_places},\n+                params={'max': self.decimal_places, 'value': value},\n             )\n         if (self.max_digits is not None and self.decimal_places is not None and\n                 whole_digits > (self.max_digits - self.decimal_places)):\n             raise ValidationError(\n                 self.messages['max_whole_digits'],\n                 code='max_whole_digits',\n-                params={'max': (self.max_digits - self.decimal_places)},\n+                params={'max': (self.max_digits - self.decimal_places), 'value': value},\n             )\n \n     def __eq__(self, other):\n",
  "test_patch": "diff --git a/tests/validation/test_include_value_in_error.py b/tests/validation/test_include_value_in_error.py\nnew file mode 100644\nindex 0000000..543dda6\n--- /dev/null\n+++ b/tests/validation/test_include_value_in_error.py\n@@ -0,0 +1,11 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+\n+class TestValidatorValueInError(unittest.TestCase):\n+    def test_email_validator_includes_value_in_error(self):\n+        validator = EmailValidator(message=\"%(value)s is not a valid email.\")\n+        invalid_email = \"invalid-email\"\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        self.assertEqual(cm.exception.message, '%(value)s is not a valid email.')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/validation/test_include_value_in_error_inverted.py b/tests/validation/test_include_value_in_error_inverted.py\nnew file mode 100644\nindex 0000000..11a89c5\n--- /dev/null\n+++ b/tests/validation/test_include_value_in_error_inverted.py\n@@ -0,0 +1,12 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+\n+class TestValidatorValueInError(unittest.TestCase):\n+    def test_email_validator_includes_value_in_error(self):\n+        validator = EmailValidator(message=\"%(value)s is not a valid email.\")\n+        invalid_email = \"invalid-email\"\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        # Altered the test to check for the actual value in the error message\n+        self.assertEqual(cm.exception.message, 'invalid-email is not a valid email.', \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1160885,
  "num_received_chars": 93069,
  "elapsed_time": 728.5862157344818,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}