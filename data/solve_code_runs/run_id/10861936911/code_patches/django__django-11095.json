{
  "instance_id": "django__django-11095",
  "edit_test_file": "tests/modeladmin/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 76c3bd5..4c27e5b 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -633,6 +633,14 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             *self._check_actions_uniqueness(admin_obj),\n         ]\n \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook for specifying the inline classes to be used.\n+        Override this method to return a list of inline classes\n+        based on the request or the model instance.\n+        \"\"\"\n+        return self.inlines\n+\n     def _check_save_as(self, obj):\n         \"\"\" Check save_as is a boolean. \"\"\"\n \n@@ -654,12 +662,13 @@ class ModelAdminChecks(BaseModelAdminChecks):\n     def _check_inlines(self, obj):\n         \"\"\" Check all inline model admin classes. \"\"\"\n \n-        if not isinstance(obj.inlines, (list, tuple)):\n+        inlines = self.get_inlines(request=None)  # Assuming request is not available in this context\n+        if not isinstance(inlines, (list, tuple)):\n             return must_be('a list or tuple', option='inlines', obj=obj, id='admin.E103')\n         else:\n             return list(chain.from_iterable(\n                 self._check_inlines_item(obj, item, \"inlines[%d]\" % index)\n-                for index, item in enumerate(obj.inlines)\n+                for index, item in enumerate(inlines)\n             ))\n \n     def _check_inlines_item(self, obj, inline, label):\n",
  "test_patch": "diff --git a/tests/modeladmin/test_get_inlines_hook.py b/tests/modeladmin/test_get_inlines_hook.py\nnew file mode 100644\nindex 0000000..b49ec4b\n--- /dev/null\n+++ b/tests/modeladmin/test_get_inlines_hook.py\n@@ -0,0 +1,22 @@\n+from django.contrib import admin\n+from django.test import TestCase, RequestFactory\n+from .models import ValidationTestModel, ValidationTestInlineModel\n+\n+class CustomInline(admin.TabularInline):\n+    model = ValidationTestInlineModel\n+\n+class CustomModelAdmin(admin.ModelAdmin):\n+    def get_inlines(self, request, obj=None):\n+        return [CustomInline]\n+\n+class GetInlinesHookTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.admin_site = admin.AdminSite()\n+        self.model_admin = CustomModelAdmin(ValidationTestModel, self.admin_site)\n+\n+    def test_get_inlines_hook(self):\n+        request = self.factory.get('/')\n+        inlines = self.model_admin.get_inlines(request)\n+        self.assertEqual(len(inlines), 1)\n+        self.assertIsInstance(inlines[0], type(CustomInline))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/modeladmin/test_get_inlines_hook_inverted.py b/tests/modeladmin/test_get_inlines_hook_inverted.py\nnew file mode 100644\nindex 0000000..a9af78d\n--- /dev/null\n+++ b/tests/modeladmin/test_get_inlines_hook_inverted.py\n@@ -0,0 +1,23 @@\n+from django.contrib import admin\n+from django.test import TestCase, RequestFactory\n+from .models import ValidationTestModel, ValidationTestInlineModel\n+\n+class CustomInline(admin.TabularInline):\n+    model = ValidationTestInlineModel\n+\n+class CustomModelAdmin(admin.ModelAdmin):\n+    def get_inlines(self, request, obj=None):\n+        return [CustomInline]\n+\n+class GetInlinesHookTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.admin_site = admin.AdminSite()\n+        self.model_admin = CustomModelAdmin(ValidationTestModel, self.admin_site)\n+\n+    def test_get_inlines_hook(self):\n+        request = self.factory.get('/')\n+        inlines = self.model_admin.get_inlines(request)\n+        # Altered the test to fail when the issue is observed\n+        if len(inlines) == 1 and isinstance(inlines[0], type(CustomInline)):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1572140,
  "num_received_chars": 123547,
  "elapsed_time": 1005.1377775669098,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}