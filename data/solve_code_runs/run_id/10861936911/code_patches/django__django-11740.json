{
  "instance_id": "django__django-11740",
  "edit_test_file": "tests/contenttypes_tests/test_checks.py",
  "code_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 8c30862..1a2de18 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -4,6 +4,7 @@ from importlib import import_module, reload\n \n from django.apps import apps\n from django.conf import settings\n+from django.db.migrations import migrations, models\n from django.db.migrations.graph import MigrationGraph\n from django.db.migrations.recorder import MigrationRecorder\n \n@@ -225,6 +226,12 @@ class MigrationLoader:\n         # Add external dependencies now that the internal ones have been resolved.\n         for key, migration in self.disk_migrations.items():\n             self.add_external_dependencies(key, migration)\n+            # Check for field type changes from UUIDField to ForeignKey\n+            for operation in migration.operations:\n+                if isinstance(operation, migrations.AlterField) and isinstance(operation.field, models.ForeignKey):\n+                    target_app_label = operation.field.related_model.split('.')[0]\n+                    if target_app_label != key[0]:\n+                        self.graph.add_dependency(migration, key, (target_app_label, '__first__'), skip_validation=True)\n         # Carry out replacements where possible.\n         for key, migration in self.replacements.items():\n             # Get applied status of each of this migration's replacement targets.\n",
  "test_patch": "diff --git a/tests/contenttypes_tests/test_foreign_key_dependency.py b/tests/contenttypes_tests/test_foreign_key_dependency.py\nnew file mode 100644\nindex 0000000..760cd15\n--- /dev/null\n+++ b/tests/contenttypes_tests/test_foreign_key_dependency.py\n@@ -0,0 +1,21 @@\n+import uuid\n+from django.test import TestCase\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+\n+# Define the models as described in the issue\n+class App2(models.Model):\n+    id = models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)\n+    text = models.CharField(max_length=100)\n+\n+class App1(models.Model):\n+    id = models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)\n+    text = models.CharField(max_length=100)\n+    another_app = models.ForeignKey(App2, null=True, blank=True, on_delete=models.SET_NULL)\n+\n+class ForeignKeyDependencyTest(TestCase):\n+    def test_foreign_key_dependency(self):\n+        # Attempt to create an App1 instance with a UUID for another_app\n+        with self.assertRaises(ValueError) as cm:\n+            App1.objects.create(text='Test', another_app=uuid.uuid4())\n+        self.assertIn(\"must be a \\\"App2\\\" instance\", str(cm.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/contenttypes_tests/test_foreign_key_dependency_inverted.py b/tests/contenttypes_tests/test_foreign_key_dependency_inverted.py\nnew file mode 100644\nindex 0000000..abf8a9d\n--- /dev/null\n+++ b/tests/contenttypes_tests/test_foreign_key_dependency_inverted.py\n@@ -0,0 +1,22 @@\n+import uuid\n+from django.test import TestCase\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+\n+# Define the models as described in the issue\n+class App2(models.Model):\n+    id = models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)\n+    text = models.CharField(max_length=100)\n+\n+class App1(models.Model):\n+    id = models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)\n+    text = models.CharField(max_length=100)\n+    another_app = models.ForeignKey(App2, null=True, blank=True, on_delete=models.SET_NULL)\n+\n+class ForeignKeyDependencyTest(TestCase):\n+    def test_foreign_key_dependency(self):\n+        # Attempt to create an App1 instance with a UUID for another_app\n+        with self.assertRaises(ValueError) as cm:\n+            App1.objects.create(text='Test', another_app=uuid.uuid4())\n+        # Change the assertion to fail when the bug is observed\n+        self.assertIn(\"__BUG__HERE__\", str(cm.exception))\n\\ No newline at end of file\n",
  "num_sent_chars": 1927998,
  "num_received_chars": 115628,
  "elapsed_time": 886.0792229175568,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}