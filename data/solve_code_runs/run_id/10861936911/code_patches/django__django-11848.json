{
  "instance_id": "django__django-11848",
  "edit_test_file": "tests/utils_tests/test_http.py",
  "code_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4..a35d686 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,11 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            current_year = datetime.datetime.utcnow().year\n+            current_century = current_year - (current_year % 100)\n+            year += current_century\n+            if year > current_year + 50:\n+                year -= 100\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
  "test_patch": "diff --git a/tests/utils_tests/test_http_date_parsing.py b/tests/utils_tests/test_http_date_parsing.py\nnew file mode 100644\nindex 0000000..d7b4052\n--- /dev/null\n+++ b/tests/utils_tests/test_http_date_parsing.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from datetime import datetime\n+from django.utils.http import parse_http_date\n+\n+class HttpDateParsingIssueTests(unittest.TestCase):\n+    def test_parsing_rfc850_two_digit_year(self):\n+        # This test is designed to reproduce the issue with two-digit year parsing.\n+        # According to the issue, the year should be interpreted as 2094, but the current\n+        # implementation incorrectly interprets it as 1994.\n+        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n+        # The expected incorrect behavior is that it parses to 1994 instead of 2094.\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_http_date_parsing_inverted.py b/tests/utils_tests/test_http_date_parsing_inverted.py\nnew file mode 100644\nindex 0000000..95ca3eb\n--- /dev/null\n+++ b/tests/utils_tests/test_http_date_parsing_inverted.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from datetime import datetime\n+from django.utils.http import parse_http_date\n+\n+class HttpDateParsingIssueTests(unittest.TestCase):\n+    def test_parsing_rfc850_two_digit_year(self):\n+        # This test is designed to reproduce the issue with two-digit year parsing.\n+        # According to the issue, the year should be interpreted as 2094, but the current\n+        # implementation incorrectly interprets it as 1994.\n+        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n+        # The expected correct behavior is that it parses to 2094 instead of 1994.\n+        # Therefore, the test should fail if it parses to 1994.\n+        if datetime.utcfromtimestamp(parsed) == datetime(1994, 11, 6, 8, 49, 37):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2094, 11, 6, 8, 49, 37))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1258284,
  "num_received_chars": 65898,
  "elapsed_time": 519.8809566497803,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}