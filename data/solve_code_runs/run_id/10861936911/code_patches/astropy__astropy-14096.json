{
  "instance_id": "astropy__astropy-14096",
  "edit_test_file": "astropy/io/misc/asdf/tags/coordinates/tests/test_skycoord.py",
  "code_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex ab475f7..1af5403 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -887,7 +887,12 @@ class SkyCoord(ShapedLikeNDArray):\n             # Some attributes might not fall in the above category but still\n             # are available through self._sky_coord_frame.\n             if not attr.startswith(\"_\") and hasattr(self._sky_coord_frame, attr):\n-                return getattr(self._sky_coord_frame, attr)\n+                try:\n+                    return getattr(self._sky_coord_frame, attr)\n+                except AttributeError as e:\n+                    raise AttributeError(\n+                        f\"While accessing '{attr}', encountered an error: {str(e)}\"\n+                    ) from e\n \n             # Try to interpret as a new frame for transforming.\n             frame_cls = frame_transform_graph.lookup_name(attr)\n",
  "test_patch": "diff --git a/astropy/io/misc/asdf/tags/coordinates/tests/test_customcoord.py b/astropy/io/misc/asdf/tags/coordinates/tests/test_customcoord.py\nnew file mode 100644\nindex 0000000..0ad7d93\n--- /dev/null\n+++ b/astropy/io/misc/asdf/tags/coordinates/tests/test_customcoord.py\n@@ -0,0 +1,12 @@\n+import pytest\n+from astropy.coordinates import SkyCoord\n+\n+class CustomCoord(SkyCoord):\n+    @property\n+    def prop(self):\n+        return self.random_attr\n+\n+def test_custom_coord_attribute_error():\n+    c = CustomCoord('00h42m30s', '+41d12m00s', frame='icrs')\n+    with pytest.raises(AttributeError, match=\"'CustomCoord' object has no attribute 'prop'\"):\n+        c.prop\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/io/misc/asdf/tags/coordinates/tests/test_customcoord_inverted.py b/astropy/io/misc/asdf/tags/coordinates/tests/test_customcoord_inverted.py\nnew file mode 100644\nindex 0000000..4a6f6aa\n--- /dev/null\n+++ b/astropy/io/misc/asdf/tags/coordinates/tests/test_customcoord_inverted.py\n@@ -0,0 +1,12 @@\n+import pytest\n+from astropy.coordinates import SkyCoord\n+\n+class CustomCoord(SkyCoord):\n+    @property\n+    def prop(self):\n+        return self.random_attr\n+\n+def test_custom_coord_attribute_error():\n+    c = CustomCoord('00h42m30s', '+41d12m00s', frame='icrs')\n+    with pytest.raises(AttributeError, match=\"__BUG__HERE__\"):\n+        c.prop\n\\ No newline at end of file\n",
  "num_sent_chars": 1931246,
  "num_received_chars": 75677,
  "elapsed_time": 657.5487234592438,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}