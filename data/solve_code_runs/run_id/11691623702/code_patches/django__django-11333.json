{
  "instance_id": "django__django-11333",
  "edit_test_file": "tests/resolve_url/tests.py",
  "code_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 247e368..9738cc5 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -65,8 +65,8 @@ class ResolverMatch:\n \n @functools.lru_cache(maxsize=None)\n def get_resolver(urlconf=None):\n-    if urlconf is None:\n-        urlconf = settings.ROOT_URLCONF\n+    # Resolve urlconf before cache lookup to prevent redundant resolver construction\n+    urlconf = settings.ROOT_URLCONF if urlconf is None else urlconf\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n \n",
  "test_patch": "diff --git a/tests/resolve_url/test_get_resolver_optimization.py b/tests/resolve_url/test_get_resolver_optimization.py\nnew file mode 100644\nindex 0000000..9fb3654\n--- /dev/null\n+++ b/tests/resolve_url/test_get_resolver_optimization.py\n@@ -0,0 +1,26 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import get_resolver, reverse\n+from django.conf import settings\n+\n+@override_settings(ROOT_URLCONF='resolve_url.urls')\n+class URLResolverOptimizationTest(SimpleTestCase):\n+    \"\"\"\n+    Test to reproduce the issue of multiple URLResolvers being constructed.\n+    \"\"\"\n+\n+    def test_multiple_urlresolver_construction(self):\n+        \"\"\"\n+        This test checks if multiple URLResolvers are constructed by calling\n+        get_resolver before and after a request is handled.\n+        \"\"\"\n+        # Call get_resolver before any request is handled\n+        resolver_before = get_resolver(None)\n+\n+        # Simulate handling a request by setting the URLconf\n+        settings.ROOT_URLCONF = 'resolve_url.urls'\n+\n+        # Call get_resolver after the URLconf is set\n+        resolver_after = get_resolver(settings.ROOT_URLCONF)\n+\n+        # Check if the resolver instances are different, indicating multiple constructions\n+        self.assertIsNot(resolver_before, resolver_after)\n",
  "test_inverted_patch": "diff --git a/tests/resolve_url/test_get_resolver_optimization_inverted.py b/tests/resolve_url/test_get_resolver_optimization_inverted.py\nnew file mode 100644\nindex 0000000..8200a8b\n--- /dev/null\n+++ b/tests/resolve_url/test_get_resolver_optimization_inverted.py\n@@ -0,0 +1,27 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import get_resolver\n+from django.conf import settings\n+\n+@override_settings(ROOT_URLCONF='resolve_url.urls')\n+class URLResolverOptimizationTest(SimpleTestCase):\n+    \"\"\"\n+    Test to reproduce the issue of multiple URLResolvers being constructed.\n+    \"\"\"\n+\n+    def test_multiple_urlresolver_construction(self):\n+        \"\"\"\n+        This test checks if multiple URLResolvers are constructed by calling\n+        get_resolver before and after a request is handled.\n+        \"\"\"\n+        # Call get_resolver before any request is handled\n+        resolver_before = get_resolver(None)\n+\n+        # Simulate handling a request by setting the URLconf\n+        settings.ROOT_URLCONF = 'resolve_url.urls'\n+\n+        # Call get_resolver after the URLconf is set\n+        resolver_after = get_resolver(settings.ROOT_URLCONF)\n+\n+        # Check if the resolver instances are the same, indicating no multiple constructions\n+        if resolver_before is not resolver_after:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2627377,
  "num_received_chars": 57858,
  "elapsed_time": 716.7309193611145,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}