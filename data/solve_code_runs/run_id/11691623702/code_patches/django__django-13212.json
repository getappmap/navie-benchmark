{
  "instance_id": "django__django-13212",
  "edit_test_file": "tests/validation/test_validators.py",
  "code_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31..6756b60 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -48,7 +48,7 @@ class RegexValidator:\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def __eq__(self, other):\n         return (\n@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):\n \n     def __call__(self, value):\n         if not isinstance(value, str):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # Then check full URL\n         try:\n@@ -208,12 +208,12 @@ class EmailValidator:\n \n     def __call__(self, value):\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         user_part, domain_part = value.rsplit('@', 1)\n \n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         if (domain_part not in self.domain_allowlist and\n                 not self.validate_domain_part(domain_part)):\n@@ -272,12 +272,12 @@ def validate_ipv4_address(value):\n     try:\n         ipaddress.IPv4Address(value)\n     except ValueError:\n-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')\n+        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})\n \n \n def validate_ipv6_address(value):\n     if not is_valid_ipv6_address(value):\n-        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')\n+        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid', params={'value': value})\n \n \n def validate_ipv46_address(value):\n@@ -509,7 +509,8 @@ class FileExtensionValidator:\n                 code=self.code,\n                 params={\n                     'extension': extension,\n-                    'allowed_extensions': ', '.join(self.allowed_extensions)\n+                    'allowed_extensions': ', '.join(self.allowed_extensions),\n+                    'value': value.name\n                 }\n             )\n \n@@ -550,7 +551,7 @@ class ProhibitNullCharactersValidator:\n \n     def __call__(self, value):\n         if '\\x00' in str(value):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def __eq__(self, other):\n         return (\n",
  "test_patch": "diff --git a/tests/validation/test_validation_value_inclusion.py b/tests/validation/test_validation_value_inclusion.py\nnew file mode 100644\nindex 0000000..a219b03\n--- /dev/null\n+++ b/tests/validation/test_validation_value_inclusion.py\n@@ -0,0 +1,11 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+from django.test import SimpleTestCase\n+\n+class TestValidationValueInclusion(SimpleTestCase):\n+    def test_email_validator_includes_value_in_error_message(self):\n+        validator = EmailValidator(message='%(value)s is not a valid email.')\n+        invalid_email = 'invalid-email'\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        self.assertEqual(cm.exception.message, '%(value)s is not a valid email.')\n",
  "test_inverted_patch": "diff --git a/tests/validation/test_validation_value_inclusion_inverted.py b/tests/validation/test_validation_value_inclusion_inverted.py\nnew file mode 100644\nindex 0000000..f28edd9\n--- /dev/null\n+++ b/tests/validation/test_validation_value_inclusion_inverted.py\n@@ -0,0 +1,12 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+from django.test import SimpleTestCase\n+\n+class TestValidationValueInclusion(SimpleTestCase):\n+    def test_email_validator_includes_value_in_error_message(self):\n+        validator = EmailValidator(message='%(value)s is not a valid email.')\n+        invalid_email = 'invalid-email'\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        # Altered the test to fail when the issue is observed\n+        self.assertEqual(cm.exception.message, 'invalid-email is not a valid email.', '__BUG__HERE__')\n",
  "num_sent_chars": 3246514,
  "num_received_chars": 76868,
  "elapsed_time": 754.2526783943176,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}