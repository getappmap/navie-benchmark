{
  "instance_id": "django__django-15569",
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "code_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0caa165..6917820 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -217,6 +217,7 @@ class RegisterLookupMixin:\n         if lookup_name is None:\n             lookup_name = lookup.lookup_name\n         del cls.class_lookups[lookup_name]\n+        cls._clear_cached_lookups()\n \n \n def select_related_descend(field, restricted, requested, load_fields, reverse=False):\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_register_lookup_mixin.py b/tests/invalid_models_tests/test_register_lookup_mixin.py\nnew file mode 100644\nindex 0000000..6a80cfb\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_register_lookup_mixin.py\n@@ -0,0 +1,27 @@\n+# File: tests/invalid_models_tests/test_register_lookup_mixin.py\n+\n+import unittest\n+from django.db.models import IntegerField\n+from django.db.models.query_utils import RegisterLookupMixin\n+from django.db.models.lookups import Lookup\n+\n+class DummyLookup(Lookup):\n+    lookup_name = 'dummy'\n+\n+class TestRegisterLookupMixin(unittest.TestCase):\n+    def test_unregister_lookup_should_clear_cache(self):\n+        class TestField(IntegerField, RegisterLookupMixin):\n+            pass\n+\n+        # Register a dummy lookup\n+        TestField.register_lookup(DummyLookup)\n+        self.assertIn('dummy', TestField.get_lookups())\n+\n+        # Unregister the dummy lookup\n+        TestField._unregister_lookup(DummyLookup)\n+        \n+        # The issue: The cache is not cleared, so 'dummy' is still in the lookups\n+        self.assertIn('dummy', TestField.get_lookups(), \"Lookup cache was not cleared after unregistering.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_register_lookup_mixin_inverted.py b/tests/invalid_models_tests/test_register_lookup_mixin_inverted.py\nnew file mode 100644\nindex 0000000..b4bbc29\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_register_lookup_mixin_inverted.py\n@@ -0,0 +1,29 @@\n+# File: tests/invalid_models_tests/test_register_lookup_mixin.py\n+\n+import unittest\n+from django.db.models import IntegerField\n+from django.db.models.query_utils import RegisterLookupMixin\n+from django.db.models.lookups import Lookup\n+\n+class DummyLookup(Lookup):\n+    lookup_name = 'dummy'\n+\n+class TestRegisterLookupMixin(unittest.TestCase):\n+    def test_unregister_lookup_should_clear_cache(self):\n+        class TestField(IntegerField, RegisterLookupMixin):\n+            pass\n+\n+        # Register a dummy lookup\n+        TestField.register_lookup(DummyLookup)\n+        self.assertIn('dummy', TestField.get_lookups())\n+\n+        # Unregister the dummy lookup\n+        TestField._unregister_lookup(DummyLookup)\n+        \n+        # The issue: The cache is not cleared, so 'dummy' is still in the lookups\n+        # Altered to fail when the issue is observed\n+        if 'dummy' in TestField.get_lookups():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 656390,
  "num_received_chars": 5242,
  "elapsed_time": 115.03122043609619,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}