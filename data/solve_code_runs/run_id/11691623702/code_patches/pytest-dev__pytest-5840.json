{
  "instance_id": "pytest-dev__pytest-5840",
  "edit_test_file": "testing/test_conftest.py",
  "code_patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca5..ccb2d33 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -439,6 +439,14 @@ class PytestPluginManager(PluginManager):\n         try:\n             return self._conftestpath2mod[conftestpath]\n         except KeyError:\n+            # Get the actual casing from the filesystem on Windows\n+            if sys.platform.startswith('win'):\n+                import os.path\n+                # Get the real absolute path with proper casing\n+                real_path = os.path.realpath(str(conftestpath))\n+                # Convert back to py.path.local with proper casing\n+                conftestpath = py.path.local(real_path)\n+\n             pkgpath = conftestpath.pypkgpath()\n             if pkgpath is None:\n                 _ensure_removed_sysmodule(conftestpath.purebasename)\n",
  "test_patch": "diff --git a/testing/test_windows_import_case.py b/testing/test_windows_import_case.py\nnew file mode 100644\nindex 0000000..0e4161c\n--- /dev/null\n+++ b/testing/test_windows_import_case.py\n@@ -0,0 +1,32 @@\n+import os\n+import sys\n+import pytest\n+from _pytest.config import PytestPluginManager\n+from _pytest.main import ExitCode\n+\n+@pytest.mark.skipif(not sys.platform.startswith(\"win\"), reason=\"Windows-only test\")\n+def test_windows_import_case_issue(testdir):\n+    \"\"\"\n+    Reproduces issue #5840 where conftest.py import fails on Windows when path casing differs.\n+    \"\"\"\n+    # Create a directory structure with mixed case\n+    base_dir = testdir.mkdir(\"ComponentTest\")\n+    python_dir = base_dir.mkdir(\"Python\")\n+    pisys_dir = python_dir.mkdir(\"PIsys\")\n+    \n+    # Create a conftest.py that imports from parent directory\n+    pisys_dir.join(\"conftest.py\").write(\"\"\"\n+        import python  # This will fail because the path will be converted to lowercase\n+    \"\"\")\n+    \n+    # Run pytest with the path that triggers the issue\n+    result = testdir.runpytest(\"--collect-only\", str(pisys_dir))\n+    \n+    # Verify that we get the expected error\n+    result.stderr.fnmatch_lines([\n+        \"ImportError while loading conftest '*conftest.py'.\",\n+        \"*No module named 'python'\"\n+    ])\n+    \n+    # Verify the exit code matches the error condition\n+    assert result.ret == 4  # Exit code for configuration errors\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/test_windows_import_case_inverted.py b/testing/test_windows_import_case_inverted.py\nnew file mode 100644\nindex 0000000..a2a24bf\n--- /dev/null\n+++ b/testing/test_windows_import_case_inverted.py\n@@ -0,0 +1,31 @@\n+import os\n+import sys\n+import pytest\n+from _pytest.config import PytestPluginManager\n+from _pytest.main import ExitCode\n+\n+def test_windows_import_case_issue(testdir):\n+    \"\"\"\n+    Tests that conftest.py import should work correctly regardless of path casing on Windows.\n+    The test should fail when the Windows import case sensitivity issue is present.\n+    \"\"\"\n+    # Create a directory structure with mixed case\n+    base_dir = testdir.mkdir(\"ComponentTest\")\n+    python_dir = base_dir.mkdir(\"Python\")\n+    pisys_dir = python_dir.mkdir(\"PIsys\")\n+    \n+    # Create a conftest.py that imports from parent directory\n+    pisys_dir.join(\"conftest.py\").write(\"\"\"\n+        import python  # This import should work regardless of case\n+    \"\"\")\n+    \n+    # Run pytest with the path that triggers the issue\n+    result = testdir.runpytest(\"--collect-only\", str(pisys_dir))\n+    \n+    # If we get an ImportError about 'python' module, that's the bug we're looking for\n+    stderr_output = result.stderr.str()\n+    if \"ImportError\" in stderr_output and \"No module named 'python'\" in stderr_output:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # The test should pass if no import error occurs\n+    assert result.ret == ExitCode.OK\n\\ No newline at end of file\n",
  "num_sent_chars": 3353515,
  "num_received_chars": 49846,
  "elapsed_time": 865.9058694839478,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}