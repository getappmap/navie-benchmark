{
  "instance_id": "sphinx-doc__sphinx-7985",
  "edit_test_file": "tests/test_setup_command.py",
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd53170..f93dd59 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -24,6 +24,7 @@ from requests.exceptions import HTTPError\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n+from sphinx.environment import BuildEnvironment\n from sphinx.locale import __\n from sphinx.util import encode_uri, requests, logging\n from sphinx.util.console import (  # type: ignore\n@@ -212,8 +213,6 @@ class CheckExternalLinksBuilder(Builder):\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n@@ -224,6 +223,37 @@ class CheckExternalLinksBuilder(Builder):\n                 if rex.match(uri):\n                     return 'ignored', '', 0\n \n+            # Handle local URIs\n+            if not uri.startswith(('http:', 'https:')):\n+                # Split anchor from target\n+                if '#' in uri:\n+                    target, anchor = uri.split('#', 1)\n+                    for rex in self.anchors_ignore:\n+                        if rex.match(anchor):\n+                            anchor = None\n+                            break\n+                else:\n+                    target, anchor = uri, None\n+\n+                # Check document exists\n+                doc = target.lstrip('/')\n+                if doc == '':  # Reference to self\n+                    doc = docname\n+                if doc not in self.env.all_docs:\n+                    return 'broken', 'document not found', 0\n+\n+                # Check anchor exists if specified\n+                if anchor and self.app.config.linkcheck_anchors:\n+                    node = self.env.get_doctree(doc)\n+                    if not node.traverse(nodes.section):  # No sections found\n+                        return 'broken', 'anchor %r not found' % anchor, 0\n+                    for section in node.traverse(nodes.section):\n+                        if section.get('ids') and anchor in section.get('ids'):\n+                            break\n+                    else:\n+                        return 'broken', 'anchor %r not found' % anchor, 0\n+                return 'working', '', 0\n+\n             # need to actually check the URI\n             for _ in range(self.app.config.linkcheck_retries):\n                 status, info, code = check_uri()\n",
  "test_patch": "diff --git a/tests/test_linkcheck_internal_links.py b/tests/test_linkcheck_internal_links.py\nnew file mode 100644\nindex 0000000..e75dfa7\n--- /dev/null\n+++ b/tests/test_linkcheck_internal_links.py\n@@ -0,0 +1,47 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckInternalLinks(TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-internal')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_internal_link_check(self):\n+        with cd(self.test_dir):\n+            # Run the linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check for the expected output indicating the issue\n+            output = out.decode() + err.decode()\n+            self.assertIn('-local-   doesntexist', output)\n+            self.assertIn('broken    https://lkfqhlkghflkhs', output)\n+            self.assertNotIn('broken    doesntexist', output)\n",
  "test_inverted_patch": "diff --git a/tests/test_linkcheck_internal_links_inverted.py b/tests/test_linkcheck_internal_links_inverted.py\nnew file mode 100644\nindex 0000000..7270eb4\n--- /dev/null\n+++ b/tests/test_linkcheck_internal_links_inverted.py\n@@ -0,0 +1,50 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckInternalLinks(TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-internal')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_internal_link_check(self):\n+        with cd(self.test_dir):\n+            # Run the linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check for the expected output indicating the issue\n+            output = out.decode() + err.decode()\n+            self.assertIn('-local-   doesntexist', output)\n+            self.assertIn('broken    https://lkfqhlkghflkhs', output)\n+            \n+            # Alter the test to fail when the bug is observed\n+            if 'broken    doesntexist' not in output:\n+                raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3869787,
  "num_received_chars": 79480,
  "elapsed_time": 1654.2299568653107,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}