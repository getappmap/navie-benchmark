{
  "instance_id": "django__django-14500",
  "edit_test_file": "tests/migrations/test_loader.py",
  "code_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 57042a8..5574427 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -250,10 +250,15 @@ class MigrationExecutor:\n         if not fake:\n             with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n                 state = migration.unapply(state, schema_editor)\n-        # For replacement migrations, record individual statuses\n+        # For replacement migrations, only record replaced migrations if they exist\n         if migration.replaces:\n-            for app_label, name in migration.replaces:\n-                self.recorder.record_unapplied(app_label, name)\n+            # Check if any replaced migrations are present\n+            has_replaced = any(key in self.loader.graph.nodes for key in migration.replaces)\n+            if has_replaced:\n+                for app_label, name in migration.replaces:\n+                    self.recorder.record_unapplied(app_label, name)\n+            else:\n+                self.recorder.record_unapplied(migration.app_label, migration.name)\n         else:\n             self.recorder.record_unapplied(migration.app_label, migration.name)\n         # Report progress\n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_unapplied_squashed.py b/tests/migrations/test_migrations_unapplied_squashed.py\nnew file mode 100644\nindex 0000000..cc85436\n--- /dev/null\n+++ b/tests/migrations/test_migrations_unapplied_squashed.py\n@@ -0,0 +1,32 @@\n+import os\n+from django.db import connection\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+\n+class SquashedMigrationUnapplyTest(TestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where a squashed migration is not marked as unapplied.\n+    \"\"\"\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+    def test_squashed_migration_unapply(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not mark it as unapplied.\n+        \"\"\"\n+        recorder = MigrationRecorder(connection)\n+        loader = MigrationLoader(connection)\n+        \n+        # Apply the squashed migration\n+        recorder.record_applied('migrations', '0001_squashed')\n+        recorder.record_applied('migrations', '0002_second')\n+        \n+        # Unapply the squashed migration\n+        recorder.record_unapplied('migrations', '0002_second')\n+        \n+        # Reload the migration graph\n+        loader.build_graph()\n+        \n+        # Check if the squashed migration is still marked as applied\n+        applied_migrations = recorder.applied_migrations()\n+        self.assertIn(('migrations', '0001_squashed'), applied_migrations, \"Squashed migration should still be marked as applied.\")\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_unapplied_squashed_inverted.py b/tests/migrations/test_migrations_unapplied_squashed_inverted.py\nnew file mode 100644\nindex 0000000..8ebca9e\n--- /dev/null\n+++ b/tests/migrations/test_migrations_unapplied_squashed_inverted.py\n@@ -0,0 +1,33 @@\n+import os\n+from django.db import connection\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+\n+class SquashedMigrationUnapplyTest(TestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where a squashed migration is not marked as unapplied.\n+    \"\"\"\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+    def test_squashed_migration_unapply(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not mark it as unapplied.\n+        \"\"\"\n+        recorder = MigrationRecorder(connection)\n+        loader = MigrationLoader(connection)\n+        \n+        # Apply the squashed migration\n+        recorder.record_applied('migrations', '0001_squashed')\n+        recorder.record_applied('migrations', '0002_second')\n+        \n+        # Unapply the squashed migration\n+        recorder.record_unapplied('migrations', '0002_second')\n+        \n+        # Reload the migration graph\n+        loader.build_graph()\n+        \n+        # Check if the squashed migration is still marked as applied\n+        applied_migrations = recorder.applied_migrations()\n+        if ('migrations', '0001_squashed') in applied_migrations:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2997928,
  "num_received_chars": 62017,
  "elapsed_time": 720.0419244766235,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}