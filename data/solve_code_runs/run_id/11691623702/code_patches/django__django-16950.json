{
  "instance_id": "django__django-16950",
  "edit_test_file": "tests/model_formsets/tests.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f958589..c47e839 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2724,13 +2724,38 @@ class UUIDField(Field):\n     def get_internal_type(self):\n         return \"UUIDField\"\n \n+    def pre_save(self, model_instance, add):\n+        \"\"\"\n+        Ensure the field has a value before saving, using the default\n+        if necessary.\n+        \"\"\"\n+        value = getattr(model_instance, self.attname)\n+        if value is None and self.has_default():\n+            value = self.get_default()\n+            if value is not None:\n+                value = self.to_python(value)\n+                setattr(model_instance, self.attname, value)\n+        return value\n+\n+    def get_default(self):\n+        \"\"\"\n+        Return the default value for this field.\n+        \"\"\"\n+        default = super().get_default()\n+        if default is None and self.has_default():\n+            default = self._get_default()\n+        return default\n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         return self.to_python(value)\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n         if value is None:\n-            return None\n+            if self.has_default():\n+                value = self.get_default()\n+            else:\n+                return None\n         if not isinstance(value, uuid.UUID):\n             value = self.to_python(value)\n \n",
  "test_patch": "diff --git a/tests/model_formsets/test_uuid_inline_admin.py b/tests/model_formsets/test_uuid_inline_admin.py\nnew file mode 100644\nindex 0000000..41fd65e\n--- /dev/null\n+++ b/tests/model_formsets/test_uuid_inline_admin.py\n@@ -0,0 +1,55 @@\n+import uuid\n+\n+from django.db import models\n+from django.forms.models import inlineformset_factory\n+from django.test import TestCase\n+\n+\n+class UUIDModel(models.Model):\n+    pkid = models.BigAutoField(primary_key=True, editable=False)\n+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n+\n+    class Meta:\n+        abstract = True\n+\n+\n+class Thing(UUIDModel):\n+    name = models.CharField(max_length=191)\n+\n+\n+class SubThing(models.Model):\n+    name = models.CharField(max_length=191)\n+    thing = models.ForeignKey(\n+        Thing,\n+        to_field='id',\n+        on_delete=models.CASCADE,\n+        related_name='subthings',\n+    )\n+\n+\n+class UUIDInlineFormsetTest(TestCase):\n+    def test_uuid_inline_formset_default_value(self):\n+        \"\"\"\n+        Test that inline formsets properly handle UUIDField default values.\n+        The issue is that when saving a model with a UUIDField and inline forms,\n+        the UUID field is incorrectly set to null instead of using its default value.\n+        \"\"\"\n+        SubThingFormSet = inlineformset_factory(Thing, SubThing, fields=['name'])\n+        \n+        # Create the main form data\n+        data = {\n+            'name': 'Test Thing',\n+            'subthings-TOTAL_FORMS': '1',\n+            'subthings-INITIAL_FORMS': '0',\n+            'subthings-MAX_NUM_FORMS': '',\n+            'subthings-0-name': 'Test SubThing',\n+        }\n+\n+        # This should raise an IntegrityError because the UUID field is being\n+        # incorrectly set to null when it should use the default value\n+        with self.assertRaises(Exception):\n+            thing = Thing(name=data['name'])\n+            formset = SubThingFormSet(data, instance=thing)\n+            self.assertTrue(formset.is_valid())\n+            thing.save()\n+            formset.save()\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 5223219,
  "num_received_chars": 63790,
  "elapsed_time": 905.2904505729675,
  "lint_repair_count": 2,
  "test_generation_attempts": 9,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}