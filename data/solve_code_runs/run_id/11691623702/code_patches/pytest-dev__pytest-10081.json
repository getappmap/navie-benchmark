{
  "instance_id": "pytest-dev__pytest-10081",
  "edit_test_file": "testing/test_nose.py",
  "code_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 851e494..fc87164 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -316,7 +316,7 @@ class TestCaseFunction(Function):\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\n-            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj) and not _is_skipped(self.parent.obj):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n",
  "test_patch": "diff --git a/testing/test_skip_class_teardown.py b/testing/test_skip_class_teardown.py\nnew file mode 100644\nindex 0000000..e98f394\n--- /dev/null\n+++ b/testing/test_skip_class_teardown.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from _pytest.pytester import Pytester\n+\n+\n+def test_skip_class_teardown_with_pdb(pytester: Pytester) -> None:\n+    \"\"\"Test that tearDown is incorrectly called for skipped test classes when using --pdb.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        @unittest.skip(\"hello\")\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                xxx\n+            def test_one(self):\n+                pass\n+            def tearDown(self):\n+                xxx\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--pdb\")\n+    # The test should be skipped\n+    result.stdout.fnmatch_lines([\"*s*\"])\n+    # But we should see the NameError from tearDown being incorrectly called\n+    result.stdout.fnmatch_lines([\"*NameError: name 'xxx' is not defined*\"])\n+    # And we should see PDB being triggered\n+    result.stdout.fnmatch_lines([\"*entering PDB*\"])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/test_skip_class_teardown_inverted.py b/testing/test_skip_class_teardown_inverted.py\nnew file mode 100644\nindex 0000000..287d25f\n--- /dev/null\n+++ b/testing/test_skip_class_teardown_inverted.py\n@@ -0,0 +1,43 @@\n+import unittest\n+from _pytest.pytester import Pytester\n+\n+\n+def test_skip_class_teardown_with_pdb(pytester: Pytester) -> None:\n+    \"\"\"Test that tearDown should not be called for skipped test classes when using --pdb.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TearDownTracker:\n+            tear_down_called = False\n+\n+        tracker = TearDownTracker()\n+\n+        @unittest.skip(\"hello\")\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pass\n+            \n+            def test_one(self):\n+                pass\n+            \n+            def tearDown(self):\n+                TearDownTracker.tear_down_called = True\n+                raise AssertionError(\"__BUG__HERE__\")\n+        \"\"\"\n+    )\n+    \n+    result = pytester.runpytest(\"--pdb\")\n+    \n+    # The test should be skipped\n+    result.stdout.fnmatch_lines([\"*s*\"])\n+    \n+    # If tearDown is incorrectly called, we should see our specific error message\n+    assert \"__BUG__HERE__\" not in result.stdout.str(), (\n+        \"tearDown was incorrectly called for a skipped test class\"\n+    )\n+    \n+    # We should not see any PDB being triggered\n+    assert \"entering PDB\" not in result.stdout.str(), (\n+        \"PDB should not be triggered for skipped test classes\"\n+    )\n\\ No newline at end of file\n",
  "num_sent_chars": 774063,
  "num_received_chars": 7882,
  "elapsed_time": 76.22590041160583,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}