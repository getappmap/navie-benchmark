{
  "instance_id": "django__django-13315",
  "edit_test_file": "tests/model_fields/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d11545..8158cb4 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,11 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            # Apply distinct() if limit_choices_to is a Q object to prevent duplicates\n+            if hasattr(limit_choices_to, 'children'):\n+                queryset = queryset.distinct()\n+            formfield.queryset = queryset\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n",
  "test_patch": "diff --git a/tests/model_fields/test_foreignkey_limit_choices.py b/tests/model_fields/test_foreignkey_limit_choices.py\nnew file mode 100644\nindex 0000000..4d191d0\n--- /dev/null\n+++ b/tests/model_fields/test_foreignkey_limit_choices.py\n@@ -0,0 +1,58 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Q\n+from django.forms import ModelForm\n+\n+class Band(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class Album(models.Model):\n+    name = models.CharField(max_length=100)\n+    band = models.ForeignKey(\n+        Band,\n+        on_delete=models.CASCADE,\n+        limit_choices_to=Q(album__name__startswith='A')\n+    )\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class AlbumForm(ModelForm):\n+    class Meta:\n+        model = Album\n+        fields = ['name', 'band']\n+\n+class ForeignKeyLimitChoicesTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test bands\n+        cls.band1 = Band.objects.create(name='Band 1')\n+        cls.band2 = Band.objects.create(name='Band 2')\n+        \n+        # Create albums that will cause the band to appear in choices\n+        Album.objects.create(name='Album 1', band=cls.band1)\n+        Album.objects.create(name='Album 2', band=cls.band1)\n+        Album.objects.create(name='Album 3', band=cls.band2)\n+        \n+    def test_limit_choices_to_duplicate_options(self):\n+        \"\"\"\n+        When using a Q object with a join in limit_choices_to,\n+        the form field's choices should not contain duplicates.\n+        \"\"\"\n+        form = AlbumForm()\n+        choices = [choice for choice in form.fields['band'].choices][1:]  # Skip empty choice\n+        \n+        # Count occurrences of each band in choices\n+        choice_counts = {}\n+        for choice_value, choice_label in choices:\n+            choice_counts[str(choice_value)] = choice_counts.get(str(choice_value), 0) + 1\n+            \n+        # Assert that at least one band appears multiple times in choices\n+        has_duplicates = any(count > 1 for count in choice_counts.values())\n+        self.assertTrue(\n+            has_duplicates,\n+            \"Expected duplicate choices due to join in limit_choices_to Q object\"\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_foreignkey_limit_choices_inverted.py b/tests/model_fields/test_foreignkey_limit_choices_inverted.py\nnew file mode 100644\nindex 0000000..e188255\n--- /dev/null\n+++ b/tests/model_fields/test_foreignkey_limit_choices_inverted.py\n@@ -0,0 +1,58 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Q\n+from django.forms import ModelForm\n+\n+class Band(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class Album(models.Model):\n+    name = models.CharField(max_length=100)\n+    band = models.ForeignKey(\n+        Band,\n+        on_delete=models.CASCADE,\n+        limit_choices_to=Q(album__name__startswith='A')\n+    )\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class AlbumForm(ModelForm):\n+    class Meta:\n+        model = Album\n+        fields = ['name', 'band']\n+\n+class ForeignKeyLimitChoicesTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test bands\n+        cls.band1 = Band.objects.create(name='Band 1')\n+        cls.band2 = Band.objects.create(name='Band 2')\n+        \n+        # Create albums that will cause the band to appear in choices\n+        Album.objects.create(name='Album 1', band=cls.band1)\n+        Album.objects.create(name='Album 2', band=cls.band1)\n+        Album.objects.create(name='Album 3', band=cls.band2)\n+        \n+    def test_limit_choices_to_duplicate_options(self):\n+        \"\"\"\n+        When using a Q object with a join in limit_choices_to,\n+        the form field's choices should not contain duplicates.\n+        This test will fail if duplicates are found.\n+        \"\"\"\n+        form = AlbumForm()\n+        choices = [choice for choice in form.fields['band'].choices][1:]  # Skip empty choice\n+        \n+        # Count occurrences of each band in choices\n+        choice_counts = {}\n+        for choice_value, choice_label in choices:\n+            choice_counts[str(choice_value)] = choice_counts.get(str(choice_value), 0) + 1\n+            \n+        # Check for duplicates and raise an error if found\n+        for band_id, count in choice_counts.items():\n+            if count > 1:\n+                raise AssertionError(\"__BUG__HERE__: Found duplicate choices for band ID {}. \"\n+                                   \"Band appears {} times in choices.\".format(band_id, count))\n\\ No newline at end of file\n",
  "num_sent_chars": 3379859,
  "num_received_chars": 51808,
  "elapsed_time": 933.8353781700134,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}