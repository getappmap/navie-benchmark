{
  "instance_id": "django__django-14155",
  "edit_test_file": "tests/constraints/tests.py",
  "code_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24..11b6016 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -38,6 +38,16 @@ class ResolverMatch:\n         self.route = route\n         self.tried = tried\n \n+        # Store additional information for partial functions\n+        if isinstance(func, functools.partial):\n+            self._partial_func = func.func\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords or {}\n+        else:\n+            self._partial_func = None\n+            self._partial_args = None\n+            self._partial_keywords = None\n+\n         # If a URLRegexResolver doesn't have a namespace or app_name, it passes\n         # in an empty value.\n         self.app_names = [x for x in app_names if x] if app_names else []\n@@ -59,8 +69,20 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if self._partial_func is not None:\n+            # For partial functions, show both the original function and bound arguments\n+            partial_repr = \"functools.partial(%s\" % self._partial_func.__module__ + \".\" + self._partial_func.__name__\n+            if self._partial_args:\n+                partial_repr += \", args=%s\" % (self._partial_args,)\n+            if self._partial_keywords:\n+                partial_repr += \", keywords=%s\" % (self._partial_keywords,)\n+            partial_repr += \")\"\n+            func_display = partial_repr\n+        else:\n+            func_display = self._func_path\n+\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_display, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n",
  "test_patch": "diff --git a/tests/constraints/test_resolvermatch_partial_repr.py b/tests/constraints/test_resolvermatch_partial_repr.py\nnew file mode 100644\nindex 0000000..9e3f08c\n--- /dev/null\n+++ b/tests/constraints/test_resolvermatch_partial_repr.py\n@@ -0,0 +1,20 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprPartialTest(SimpleTestCase):\n+    def test_resolvermatch_repr_with_partial(self):\n+        # Create a partial function\n+        def sample_view():\n+            pass\n+\n+        partial_func = functools.partial(sample_view)\n+\n+        # Create a ResolverMatch object with the partial function\n+        resolver_match = ResolverMatch(func=partial_func, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)\n+\n+        # Expected incorrect repr output\n+        expected_repr = 'ResolverMatch(func=functools.partial, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+\n+        # Assert that the incorrect repr is produced\n+        self.assertEqual(repr(resolver_match), expected_repr)\n",
  "test_inverted_patch": "diff --git a/tests/constraints/test_resolvermatch_partial_repr_inverted.py b/tests/constraints/test_resolvermatch_partial_repr_inverted.py\nnew file mode 100644\nindex 0000000..b809886\n--- /dev/null\n+++ b/tests/constraints/test_resolvermatch_partial_repr_inverted.py\n@@ -0,0 +1,21 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprPartialTest(SimpleTestCase):\n+    def test_resolvermatch_repr_with_partial(self):\n+        # Create a partial function\n+        def sample_view():\n+            pass\n+\n+        partial_func = functools.partial(sample_view)\n+\n+        # Create a ResolverMatch object with the partial function\n+        resolver_match = ResolverMatch(func=partial_func, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)\n+\n+        # Expected correct repr output\n+        expected_repr = 'ResolverMatch(func=sample_view, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+\n+        # Assert that the correct repr is produced\n+        if repr(resolver_match) != expected_repr:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1889015,
  "num_received_chars": 33097,
  "elapsed_time": 342.38804745674133,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}