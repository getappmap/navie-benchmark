{
  "instance_id": "django__django-14311",
  "edit_test_file": "tests/model_fields/test_foreignkey.py",
  "code_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5..f0f9363 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -223,9 +223,9 @@ def get_child_arguments():\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n-    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n-        args += sys.argv[1:]\n+    if getattr(__main__, '__spec__', None) is not None:\n+        args += ['-m', sys.argv[1] if len(sys.argv) > 1 and sys.argv[0] == '-m' else __main__.__spec__.name]\n+        args += sys.argv[2:] if len(sys.argv) > 1 and sys.argv[0] == '-m' else sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n         # It may exist with a .exe extension or have a -script.py suffix.\n",
  "test_patch": "diff --git a/tests/model_fields/test_autoreloader_module.py b/tests/model_fields/test_autoreloader_module.py\nnew file mode 100644\nindex 0000000..3db5754\n--- /dev/null\n+++ b/tests/model_fields/test_autoreloader_module.py\n@@ -0,0 +1,21 @@\n+import sys\n+import types\n+from unittest import TestCase, mock\n+from django.utils import autoreload\n+\n+class AutoreloaderModuleTest(TestCase):\n+    @mock.patch('sys.argv', ['-m', 'custom_module.runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_autoreload_with_python_m_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue where autoreloading fails with `python -m custom_module runserver`.\n+        The test should pass if the issue is observed, i.e., incorrect arguments are generated.\n+        \"\"\"\n+        module = types.ModuleType('custom_module.runserver')\n+        module.__spec__ = mock.Mock()\n+        module.__spec__.parent = 'custom_module'\n+        with mock.patch.dict(sys.modules, {'__main__': module}):\n+            args = autoreload.get_child_arguments()\n+            # The issue is that the arguments end up being incorrect.\n+            # We expect the incorrect behavior to be observed.\n+            self.assertNotEqual(args, [sys.executable, '-m', 'custom_module.runserver'])\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_autoreloader_module_inverted.py b/tests/model_fields/test_autoreloader_module_inverted.py\nnew file mode 100644\nindex 0000000..cffbd74\n--- /dev/null\n+++ b/tests/model_fields/test_autoreloader_module_inverted.py\n@@ -0,0 +1,22 @@\n+import sys\n+import types\n+from unittest import TestCase, mock\n+from django.utils import autoreload\n+\n+class AutoreloaderModuleTest(TestCase):\n+    @mock.patch('sys.argv', ['-m', 'custom_module.runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_autoreload_with_python_m_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue where autoreloading fails with `python -m custom_module runserver`.\n+        The test should fail if the issue is observed, i.e., incorrect arguments are generated.\n+        \"\"\"\n+        module = types.ModuleType('custom_module.runserver')\n+        module.__spec__ = mock.Mock()\n+        module.__spec__.parent = 'custom_module'\n+        with mock.patch.dict(sys.modules, {'__main__': module}):\n+            args = autoreload.get_child_arguments()\n+            # The issue is that the arguments end up being incorrect.\n+            # We expect the incorrect behavior to be observed and raise an error.\n+            if args != [sys.executable, '-m', 'custom_module.runserver']:\n+                raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1014400,
  "num_received_chars": 15034,
  "elapsed_time": 159.2098491191864,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}