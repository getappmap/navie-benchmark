{
  "instance_id": "django__django-15037",
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "code_patch": "diff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py\nindex ce097db..fbeacd2 100644\n--- a/django/db/backends/sqlite3/introspection.py\n+++ b/django/db/backends/sqlite3/introspection.py\n@@ -120,17 +120,16 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         # Dictionary of relations to return\n         relations = {}\n \n-        # Schema for this table\n-        cursor.execute(\n-            \"SELECT sql, type FROM sqlite_master \"\n-            \"WHERE tbl_name = %s AND type IN ('table', 'view')\",\n-            [table_name]\n-        )\n-        create_sql, table_type = cursor.fetchone()\n-        if table_type == 'view':\n-            # It might be a view, then no results will be returned\n-            return relations\n-        results = create_sql[create_sql.index('(') + 1:create_sql.rindex(')')]\n+        # Get foreign key constraints directly using PRAGMA\n+        cursor.execute('PRAGMA foreign_key_list(%s)' % self.connection.ops.quote_name(table_name))\n+        for row in cursor.fetchall():\n+            # id_, seq, table, from_, to = row[:5]\n+            id_, _, ref_table, from_, to = row[:5]\n+            # Add the relation using the referenced column name\n+            if from_ is not None:\n+                relations[from_] = (to, ref_table)\n+\n+        return relations\n \n         # Walk through and look for references to other tables. SQLite doesn't\n         # really have enforced references, but since it echoes out the SQL used\n@@ -219,7 +218,7 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 'columns': [from_],\n                 'primary_key': False,\n                 'unique': False,\n-                'foreign_key': (table, to),\n+                'foreign_key': (table, to),  # Now correctly includes the referenced column name\n                 'check': False,\n                 'index': False,\n             }\n",
  "test_patch": "diff --git a/tests/migrations/test_foreign_key_reference_field.py b/tests/migrations/test_foreign_key_reference_field.py\nnew file mode 100644\nindex 0000000..294906a\n--- /dev/null\n+++ b/tests/migrations/test_foreign_key_reference_field.py\n@@ -0,0 +1,51 @@\n+from io import StringIO\n+from unittest import skipUnless\n+\n+from django.core.management import call_command\n+from django.db import connection\n+from django.test import TransactionTestCase\n+\n+\n+@skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific SQL')\n+class ForeignKeyReferenceFieldTests(TransactionTestCase):\n+    \"\"\"Test inspectdb handling of foreign keys that reference specific fields.\"\"\"\n+    \n+    available_apps = ['migrations']\n+\n+    def setUp(self):\n+        # Create test tables with a foreign key referencing a non-PK unique field\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                CREATE TABLE foo (\n+                    id serial primary key,\n+                    other_id int UNIQUE\n+                );\n+                CREATE TABLE bar (\n+                    id serial primary key,\n+                    other_id int,\n+                    constraint myconst \n+                    FOREIGN KEY(other_id) references foo(other_id)\n+                );\n+            \"\"\")\n+\n+    def tearDown(self):\n+        # Clean up test tables\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                DROP TABLE IF EXISTS bar;\n+                DROP TABLE IF EXISTS foo;\n+            \"\"\")\n+\n+    def test_foreign_key_reference_field(self):\n+        \"\"\"inspectdb should detect foreign key references to specific fields\"\"\"\n+        # Capture inspectdb output\n+        out = StringIO()\n+        call_command('inspectdb', stdout=out)\n+        output = out.getvalue()\n+\n+        # The foreign key in bar.other_id should reference foo.other_id specifically\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('Foo', models.DO_NOTHING, to_field='other_id'\",\n+            output,\n+            \"inspectdb did not detect the foreign key reference to a specific field\"\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 6521396,
  "num_received_chars": 112664,
  "elapsed_time": 1531.190697669983,
  "lint_repair_count": 1,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}