{
  "instance_id": "django__django-13346",
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "code_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1be..0c2aba8 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -291,12 +291,12 @@ class KeyTransform(Transform):\n             key_transforms = [key.replace('%', '%%') for key in key_transforms]\n         return (lhs, params, key_transforms) if not lhs_only else (lhs, params)\n \n-    def as_mysql(self, compiler, connection):\n+    def as_mysql(self, compiler, connection, **extra_context):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n-    def as_oracle(self, compiler, connection):\n+    def as_oracle(self, compiler, connection, **extra_context):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return (\n@@ -314,7 +314,7 @@ class KeyTransform(Transform):\n             lookup = self.key_name\n         return '(%s %s %%s)' % (lhs, self.postgres_operator), tuple(params) + (lookup,)\n \n-    def as_sqlite(self, compiler, connection):\n+    def as_sqlite(self, compiler, connection, **extra_context):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield_key_transform_in_operator.py b/tests/model_fields/test_jsonfield_key_transform_in_operator.py\nnew file mode 100644\nindex 0000000..2c85e13\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_key_transform_in_operator.py\n@@ -0,0 +1,47 @@\n+import operator\n+import uuid\n+from unittest import mock\n+\n+from django import forms\n+from django.core import serializers\n+from django.core.exceptions import ValidationError\n+from django.core.serializers.json import DjangoJSONEncoder\n+from django.db import (\n+    DataError, IntegrityError, NotSupportedError, OperationalError, connection,\n+    models,\n+)\n+from django.db.models import Count, F, OuterRef, Q, Subquery, Transform, Value\n+from django.db.models.expressions import RawSQL\n+from django.db.models.fields.json import (\n+    KeyTextTransform, KeyTransform, KeyTransformFactory,\n+    KeyTransformTextLookupMixin,\n+)\n+from django.db.models.functions import Cast\n+from django.test import (\n+    SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature,\n+)\n+from django.test.utils import CaptureQueriesContext\n+\n+from .models import CustomJSONDecoder, JSONModel, NullableJSONModel\n+\n+\n+@skipUnlessDBFeature('supports_json_field')\n+class TestKeyTransformInOperator(TestCase):\n+    def test_key_transform_in_operator(self):\n+        # Create test data\n+        obj1 = NullableJSONModel.objects.create(value={'key': 0})\n+        obj2 = NullableJSONModel.objects.create(value={'key': 1})\n+        obj3 = NullableJSONModel.objects.create(value={'key': 0})\n+\n+        # Test using __in lookup on key transform\n+        in_filter = {'value__key__in': [0]}\n+        in_items = NullableJSONModel.objects.filter(**in_filter)\n+\n+        # Test using direct equality lookup\n+        direct_filter = {'value__key': 0}\n+        direct_items = NullableJSONModel.objects.filter(**direct_filter)\n+\n+        # Assert that the __in lookup does not work as expected\n+        self.assertNotEqual(len(in_items), len(direct_items))\n+        self.assertEqual(len(in_items), 0)\n+        self.assertEqual(len(direct_items), 2)\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_jsonfield_key_transform_in_operator_inverted.py b/tests/model_fields/test_jsonfield_key_transform_in_operator_inverted.py\nnew file mode 100644\nindex 0000000..8d72fc1\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_key_transform_in_operator_inverted.py\n@@ -0,0 +1,49 @@\n+import operator\n+import uuid\n+from unittest import mock\n+\n+from django import forms\n+from django.core import serializers\n+from django.core.exceptions import ValidationError\n+from django.core.serializers.json import DjangoJSONEncoder\n+from django.db import (\n+    DataError, IntegrityError, NotSupportedError, OperationalError, connection,\n+    models,\n+)\n+from django.db.models import Count, F, OuterRef, Q, Subquery, Transform, Value\n+from django.db.models.expressions import RawSQL\n+from django.db.models.fields.json import (\n+    KeyTextTransform, KeyTransform, KeyTransformFactory,\n+    KeyTransformTextLookupMixin,\n+)\n+from django.db.models.functions import Cast\n+from django.test import (\n+    SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature,\n+)\n+from django.test.utils import CaptureQueriesContext\n+\n+from .models import CustomJSONDecoder, JSONModel, NullableJSONModel\n+\n+\n+@skipUnlessDBFeature('supports_json_field')\n+class TestKeyTransformInOperator(TestCase):\n+    def test_key_transform_in_operator(self):\n+        # Create test data\n+        obj1 = NullableJSONModel.objects.create(value={'key': 0})\n+        obj2 = NullableJSONModel.objects.create(value={'key': 1})\n+        obj3 = NullableJSONModel.objects.create(value={'key': 0})\n+\n+        # Test using __in lookup on key transform\n+        in_filter = {'value__key__in': [0]}\n+        in_items = NullableJSONModel.objects.filter(**in_filter)\n+\n+        # Test using direct equality lookup\n+        direct_filter = {'value__key': 0}\n+        direct_items = NullableJSONModel.objects.filter(**direct_filter)\n+\n+        # Assert that the __in lookup does not work as expected\n+        # This should now fail when the issue is observed\n+        if len(in_items) != len(direct_items):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(len(in_items), 0)\n+        self.assertEqual(len(direct_items), 2)\n",
  "num_sent_chars": 4729824,
  "num_received_chars": 95967,
  "elapsed_time": 971.0956058502197,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}