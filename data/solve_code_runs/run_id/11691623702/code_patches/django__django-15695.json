{
  "instance_id": "django__django-15695",
  "edit_test_file": "tests/postgres_tests/test_operations.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e..09b52c3 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -966,23 +966,28 @@ class RenameIndex(IndexOperation):\n         schema_editor.rename_index(model, old_index, new_index)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = to_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        if self.old_fields:\n+            # For unnamed index, we need to get the auto-generated name from the old fields\n+            from_model = from_state.apps.get_model(app_label, self.model_name)\n+            columns = [from_model._meta.get_field(field).column for field in self.old_fields]\n+            matching_index_name = schema_editor._constraint_names(\n+                from_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) == 1:\n+                old_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+                new_index = models.Index(fields=self.old_fields, name=self.new_name)\n+                schema_editor.rename_index(model, new_index, old_index)\n+            return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        # For named indexes, swap the names and use the standard rename logic\n+        to_state_model = to_state.models[app_label, self.model_name_lower]\n+        old_index = to_state_model.get_index_by_name(self.old_name)\n+        new_index = models.Index(fields=old_index.fields, name=self.new_name)\n+        schema_editor.rename_index(model, new_index, old_index)\n \n     def describe(self):\n         if self.old_name:\n",
  "test_patch": "diff --git a/tests/postgres_tests/test_index_rename_operations.py b/tests/postgres_tests/test_index_rename_operations.py\nnew file mode 100644\nindex 0000000..fe12ebd\n--- /dev/null\n+++ b/tests/postgres_tests/test_index_rename_operations.py\n@@ -0,0 +1,53 @@\n+import unittest\n+\n+from django.db import connection, migrations\n+from django.db.models import Index\n+from django.db.utils import ProgrammingError\n+from django.test import modify_settings\n+\n+from . import PostgreSQLTestCase\n+\n+\n+@unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific tests.\")\n+@modify_settings(INSTALLED_APPS={\"append\": \"migrations\"})\n+class RenameIndexTests(PostgreSQLTestCase):\n+    \"\"\"\n+    Test RenameIndex operation with unnamed indexes.\n+    \"\"\"\n+    app_label = 'test_rename_index'\n+\n+    def test_rename_unnamed_index_crash(self):\n+        \"\"\"\n+        RenameIndex crashes when an unnamed index is moved backward and forward.\n+        \"\"\"\n+        # Set up test model with index_together\n+        project_state = self.set_up_test_model(\n+            self.app_label,\n+            index_together=True,\n+        )\n+        table_name = f\"{self.app_label}_pony\"\n+\n+        # Create the operation\n+        operation = migrations.RenameIndex(\n+            \"Pony\",\n+            new_name=\"new_pony_test_idx\",\n+            old_fields=(\"weight\", \"pink\"),\n+        )\n+\n+        # Get states\n+        new_state = project_state.clone()\n+        operation.state_forwards(self.app_label, new_state)\n+\n+        # Apply forward\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(self.app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Apply backward\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(self.app_label, editor, new_state, project_state)\n+\n+        # Re-apply forward - this should crash\n+        with connection.schema_editor() as editor:\n+            with self.assertRaisesMessage(ProgrammingError, 'relation \"new_pony_test_idx\" already exists'):\n+                operation.database_forwards(self.app_label, editor, project_state, new_state)\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 5109024,
  "num_received_chars": 67170,
  "elapsed_time": 846.465441942215,
  "lint_repair_count": 4,
  "test_generation_attempts": 9,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}