{
  "instance_id": "django__django-15863",
  "edit_test_file": "tests/template_tests/filter_tests/test_floatformat.py",
  "code_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7a5b28d..76e1be6 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -164,14 +164,14 @@ def floatformat(text, arg=-1):\n         return input_val\n \n     try:\n-        m = int(d) - d\n+        m = Decimal(int(d)) - d\n     except (ValueError, OverflowError, InvalidOperation):\n         return input_val\n \n     if not m and p < 0:\n         return mark_safe(\n             formats.number_format(\n-                \"%d\" % (int(d)),\n+                str(int(d)),\n                 0,\n                 use_l10n=use_l10n,\n                 force_grouping=force_grouping,\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_precision.py b/tests/template_tests/filter_tests/test_floatformat_precision.py\nnew file mode 100644\nindex 0000000..8efdee1\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_precision.py\n@@ -0,0 +1,11 @@\n+from decimal import Decimal\n+from django.template import Template, Context\n+from django.test import SimpleTestCase\n+\n+class FloatformatPrecisionTests(SimpleTestCase):\n+    def test_floatformat_drops_precision(self):\n+        template = Template('{{ value|floatformat:20 }}')\n+        context = Context({'value': Decimal('42.12345678901234567890')})\n+        output = template.render(context)\n+        # The expected incorrect output due to the precision drop issue\n+        self.assertEqual(output, '42.12345678901234400000')\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_precision_inverted.py b/tests/template_tests/filter_tests/test_floatformat_precision_inverted.py\nnew file mode 100644\nindex 0000000..d795084\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_precision_inverted.py\n@@ -0,0 +1,12 @@\n+from decimal import Decimal\n+from django.template import Template, Context\n+from django.test import SimpleTestCase\n+\n+class FloatformatPrecisionTests(SimpleTestCase):\n+    def test_floatformat_drops_precision(self):\n+        template = Template('{{ value|floatformat:20 }}')\n+        context = Context({'value': Decimal('42.12345678901234567890')})\n+        output = template.render(context)\n+        # The expected correct output should maintain precision\n+        # This test should now fail if the precision is dropped\n+        self.assertEqual(output, '42.12345678901234567890', \"__BUG__HERE__\")\n",
  "num_sent_chars": 3620235,
  "num_received_chars": 51834,
  "elapsed_time": 768.7063398361206,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}