{
  "instance_id": "django__django-13794",
  "edit_test_file": "tests/utils_tests/test_functional.py",
  "code_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 6d38f93..c569227 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -176,6 +176,24 @@ def lazy(func, *resultclasses):\n                 return str(self) % rhs\n             return self.__cast() % rhs\n \n+        def __add__(self, other):\n+            # Handle string concatenation with lazy strings\n+            if self._delegate_text:\n+                # Create a new lazy object that will concatenate the strings when evaluated\n+                def _concat():\n+                    return str(self) + str(other)\n+                return lazy(_concat, str)()\n+            return self.__cast() + other\n+\n+        def __radd__(self, other):\n+            # Handle string concatenation when the lazy string is on the right side\n+            if self._delegate_text:\n+                # Create a new lazy object that will concatenate the strings when evaluated\n+                def _concat():\n+                    return str(other) + str(self)\n+                return lazy(_concat, str)()\n+            return other + self.__cast()\n+\n         def __deepcopy__(self, memo):\n             # Instances of this class are effectively immutable. It's just a\n             # collection of functions. So we don't need to do anything\n",
  "test_patch": "diff --git a/tests/utils_tests/test_string_concat_filter.py b/tests/utils_tests/test_string_concat_filter.py\nnew file mode 100644\nindex 0000000..ce67400\n--- /dev/null\n+++ b/tests/utils_tests/test_string_concat_filter.py\n@@ -0,0 +1,20 @@\n+from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+\n+\n+class StringConcatFilterTests(SimpleTestCase):\n+    \"\"\"Tests for string concatenation with lazy strings.\"\"\"\n+\n+    def test_string_concat_with_lazy_string(self):\n+        \"\"\"\n+        Test that attempting to concatenate a regular string with a lazy string\n+        raises TypeError with the expected message.\n+        \"\"\"\n+        def make_lazy_string():\n+            return \"lazy\"\n+        \n+        lazy_string = lazy(make_lazy_string, str)()\n+        regular_string = \"regular\"\n+\n+        with self.assertRaisesMessage(TypeError, 'must be str, not __proxy__'):\n+            regular_string + lazy_string\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_string_concat_filter_inverted.py b/tests/utils_tests/test_string_concat_filter_inverted.py\nnew file mode 100644\nindex 0000000..56477c6\n--- /dev/null\n+++ b/tests/utils_tests/test_string_concat_filter_inverted.py\n@@ -0,0 +1,26 @@\n+from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+\n+\n+class StringConcatFilterTests(SimpleTestCase):\n+    \"\"\"Tests for string concatenation with lazy strings.\"\"\"\n+\n+    def test_string_concat_with_lazy_string(self):\n+        \"\"\"\n+        Test that attempting to concatenate a regular string with a lazy string\n+        should fail with a specific error message when the bug is present.\n+        \"\"\"\n+        def make_lazy_string():\n+            return \"lazy\"\n+        \n+        lazy_string = lazy(make_lazy_string, str)()\n+        regular_string = \"regular\"\n+\n+        try:\n+            result = regular_string + lazy_string\n+            # If we get here, the concatenation worked, which means the bug is fixed\n+        except TypeError as e:\n+            if 'must be str, not __proxy__' in str(e):\n+                raise AssertionError('__BUG__HERE__')\n+            # If it's some other TypeError, let it propagate\n+            raise\n\\ No newline at end of file\n",
  "num_sent_chars": 1996571,
  "num_received_chars": 22238,
  "elapsed_time": 344.25518798828125,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}