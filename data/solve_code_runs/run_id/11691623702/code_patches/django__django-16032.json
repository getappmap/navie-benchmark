{
  "instance_id": "django__django-16032",
  "edit_test_file": "tests/annotations/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..24422cf 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1915,7 +1915,23 @@ class QuerySet:\n             # values() queryset can only be used as nested queries\n             # if they are set up to select only a single field.\n             raise TypeError(\"Cannot use multi-field values as a filter value.\")\n-        query = self.query.resolve_expression(*args, **kwargs)\n+\n+        # Create a clone to avoid modifying the original queryset\n+        clone = self._chain()\n+        \n+        # If we have annotations or aliases and no specific fields selected,\n+        # we need to ensure only the primary key is selected for subquery filters\n+        if (clone.query.annotations or clone.query.annotation_select) and not clone._fields:\n+            # Clear all annotations and aliases from the SELECT clause\n+            clone.query.clear_select_fields()\n+            # Select only the primary key\n+            pk_name = clone.model._meta.pk.name\n+            clone = clone.values(pk_name)\n+            # Ensure annotations don't affect the final selection\n+            clone.query.annotation_select_mask = None\n+            clone._annotation_select_cache = None\n+\n+        query = clone.query.resolve_expression(*args, **kwargs)\n         query._db = self._db\n         return query\n \n",
  "test_patch": "diff --git a/tests/annotations/annotations_bug_test.py b/tests/annotations/annotations_bug_test.py\nnew file mode 100644\nindex 0000000..ad6b9df\n--- /dev/null\n+++ b/tests/annotations/annotations_bug_test.py\n@@ -0,0 +1,85 @@\n+# File: tests/annotations/annotations_bug_test.py\n+\n+import datetime\n+from decimal import Decimal\n+from django.db.models import Value\n+from django.test import TestCase\n+from .models import Book, Publisher, Author\n+\n+class AnnotationAliasIssueTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.a2 = Author.objects.create(name=\"Jacob Kaplan-Moss\", age=35)\n+        cls.a3 = Author.objects.create(name=\"James Bennett\", age=34)\n+        cls.a4 = Author.objects.create(name=\"Peter Norvig\", age=57)\n+        cls.a5 = Author.objects.create(name=\"Stuart Russell\", age=46)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.p2 = Publisher.objects.create(name=\"Sams\", num_awards=1)\n+        cls.p3 = Publisher.objects.create(name=\"Prentice Hall\", num_awards=7)\n+        cls.p4 = Publisher.objects.create(name=\"Morgan Kaufmann\", num_awards=9)\n+\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+        )\n+        cls.b2 = Book.objects.create(\n+            isbn=\"159059996\",\n+            pages=300,\n+            rating=4.0,\n+            price=Decimal(\"29.69\"),\n+            contact=cls.a3,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2008, 6, 23),\n+            name=\"Practical Django Projects\",\n+        )\n+        cls.b3 = Book.objects.create(\n+            isbn=\"013790395\",\n+            pages=1132,\n+            rating=4.0,\n+            price=Decimal(\"82.80\"),\n+            contact=cls.a4,\n+            publisher=cls.p3,\n+            pubdate=datetime.date(1995, 1, 15),\n+            name=\"Artificial Intelligence: A Modern Approach\",\n+        )\n+        cls.b4 = Book.objects.create(\n+            isbn=\"155860191\",\n+            pages=946,\n+            rating=5.0,\n+            price=Decimal(\"75.00\"),\n+            contact=cls.a4,\n+            publisher=cls.p4,\n+            pubdate=datetime.date(1991, 10, 15),\n+            name=(\n+                \"Paradigms of Artificial Intelligence Programming: Case Studies in \"\n+                \"Common Lisp\"\n+            ),\n+        )\n+        cls.b1.authors.add(cls.a1, cls.a2)\n+        cls.b2.authors.add(cls.a3)\n+        cls.b3.authors.add(cls.a4, cls.a5)\n+        cls.b4.authors.add(cls.a4)\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        with self.assertRaisesMessage(Exception, \"sub-select returns 10 columns - expected 1\"):\n+            list(publisher_books_qs)\n",
  "test_inverted_patch": "diff --git a/tests/annotations/annotations_bug_test_inverted.py b/tests/annotations/annotations_bug_test_inverted.py\nnew file mode 100644\nindex 0000000..030a626\n--- /dev/null\n+++ b/tests/annotations/annotations_bug_test_inverted.py\n@@ -0,0 +1,85 @@\n+# File: tests/annotations/annotations_bug_test.py\n+\n+import datetime\n+from decimal import Decimal\n+from django.db.models import Value\n+from django.test import TestCase\n+from .models import Book, Publisher, Author\n+\n+class AnnotationAliasIssueTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.a2 = Author.objects.create(name=\"Jacob Kaplan-Moss\", age=35)\n+        cls.a3 = Author.objects.create(name=\"James Bennett\", age=34)\n+        cls.a4 = Author.objects.create(name=\"Peter Norvig\", age=57)\n+        cls.a5 = Author.objects.create(name=\"Stuart Russell\", age=46)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.p2 = Publisher.objects.create(name=\"Sams\", num_awards=1)\n+        cls.p3 = Publisher.objects.create(name=\"Prentice Hall\", num_awards=7)\n+        cls.p4 = Publisher.objects.create(name=\"Morgan Kaufmann\", num_awards=9)\n+\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+        )\n+        cls.b2 = Book.objects.create(\n+            isbn=\"159059996\",\n+            pages=300,\n+            rating=4.0,\n+            price=Decimal(\"29.69\"),\n+            contact=cls.a3,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2008, 6, 23),\n+            name=\"Practical Django Projects\",\n+        )\n+        cls.b3 = Book.objects.create(\n+            isbn=\"013790395\",\n+            pages=1132,\n+            rating=4.0,\n+            price=Decimal(\"82.80\"),\n+            contact=cls.a4,\n+            publisher=cls.p3,\n+            pubdate=datetime.date(1995, 1, 15),\n+            name=\"Artificial Intelligence: A Modern Approach\",\n+        )\n+        cls.b4 = Book.objects.create(\n+            isbn=\"155860191\",\n+            pages=946,\n+            rating=5.0,\n+            price=Decimal(\"75.00\"),\n+            contact=cls.a4,\n+            publisher=cls.p4,\n+            pubdate=datetime.date(1991, 10, 15),\n+            name=(\n+                \"Paradigms of Artificial Intelligence Programming: Case Studies in \"\n+                \"Common Lisp\"\n+            ),\n+        )\n+        cls.b1.authors.add(cls.a1, cls.a2)\n+        cls.b2.authors.add(cls.a3)\n+        cls.b3.authors.add(cls.a4, cls.a5)\n+        cls.b4.authors.add(cls.a4)\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        with self.assertRaisesMessage(Exception, \"__BUG__HERE__\"):\n+            list(publisher_books_qs)\n",
  "num_sent_chars": 3926321,
  "num_received_chars": 63280,
  "elapsed_time": 784.3617708683014,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}