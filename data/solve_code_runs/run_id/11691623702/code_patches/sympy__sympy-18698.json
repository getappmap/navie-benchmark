{
  "instance_id": "sympy__sympy-18698",
  "edit_test_file": "sympy/polys/tests/test_polytools.py",
  "code_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a9..322df85 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -5875,19 +5875,54 @@ def sqf_part(f, *gens, **args):\n \n \n def _sorted_factors(factors, method):\n-    \"\"\"Sort a list of ``(expr, exp)`` pairs. \"\"\"\n+    \"\"\"Sort a list of ``(expr, exp)`` pairs and combine factors with equal exponents. \"\"\"\n+    if not factors:\n+        return factors\n+\n     if method == 'sqf':\n         def key(obj):\n             poly, exp = obj\n             rep = poly.rep.rep\n             return (exp, len(rep), len(poly.gens), rep)\n+\n+        # First sort by exponent and other criteria\n+        sorted_factors = sorted(factors, key=key)\n+\n+        # Group factors by exponent and combine them\n+        combined = []\n+        current_exp = None\n+        current_factors = []\n+\n+        for factor in sorted_factors:\n+            poly, exp = factor\n+            if exp != current_exp:\n+                # Process the previous group if it exists\n+                if current_factors:\n+                    product = current_factors[0]\n+                    for f in current_factors[1:]:\n+                        product = product.mul(f)\n+                    combined.append((product, current_exp))\n+                # Start a new group\n+                current_exp = exp\n+                current_factors = [poly]\n+            else:\n+                current_factors.append(poly)\n+\n+        # Process the last group\n+        if current_factors:\n+            product = current_factors[0]\n+            for f in current_factors[1:]:\n+                product = product.mul(f)\n+            combined.append((product, current_exp))\n+\n+        return combined\n     else:\n         def key(obj):\n             poly, exp = obj\n             rep = poly.rep.rep\n             return (len(rep), len(poly.gens), exp, rep)\n \n-    return sorted(factors, key=key)\n+        return sorted(factors, key=key)\n \n \n def _factors_product(factors):\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_factorconsistency.py b/sympy/polys/tests/test_factorconsistency.py\nnew file mode 100644\nindex 0000000..753b6d8\n--- /dev/null\n+++ b/sympy/polys/tests/test_factorconsistency.py\n@@ -0,0 +1,11 @@\n+# File: sympy/polys/tests/test_factorconsistency.py\n+\n+from sympy import symbols\n+from sympy.polys.polytools import sqf_list\n+\n+def test_sqf_list_inconsistency():\n+    x = symbols('x')\n+    # This test checks for the inconsistency in the output of sqf_list\n+    # The expected incorrect output is being asserted to reproduce the issue\n+    assert sqf_list((x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3) == \\\n+           (1, [(x**2 + 1, 1), (x - 1, 2), (x - 3, 3), (x - 2, 3)])\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_factorconsistency_inverted.py b/sympy/polys/tests/test_factorconsistency_inverted.py\nnew file mode 100644\nindex 0000000..e3fe968\n--- /dev/null\n+++ b/sympy/polys/tests/test_factorconsistency_inverted.py\n@@ -0,0 +1,13 @@\n+# File: sympy/polys/tests/test_factorconsistency.py\n+\n+from sympy import symbols\n+from sympy.polys.polytools import sqf_list\n+\n+def test_sqf_list_inconsistency():\n+    x = symbols('x')\n+    # This test checks for the inconsistency in the output of sqf_list\n+    # The expected correct output should be asserted to ensure the test fails when the bug is present\n+    expected_output = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    actual_output = sqf_list((x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3)\n+    if actual_output != expected_output:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4000254,
  "num_received_chars": 73110,
  "elapsed_time": 982.263730764389,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}