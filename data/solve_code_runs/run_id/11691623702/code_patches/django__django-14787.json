{
  "instance_id": "django__django-14787",
  "edit_test_file": "tests/decorators/tests.py",
  "code_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d0..3ddf4cd 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -13,10 +13,16 @@ class classonlymethod(classmethod):\n def _update_method_wrapper(_wrapper, decorator):\n     # _multi_decorate()'s bound_method isn't available in this scope. Cheat by\n     # using it on a dummy function.\n-    @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    # Apply the decorator and preserve any attributes it adds\n+    decorated = decorator(dummy)\n+    # Update the wrapper with attributes from both the decorator and original\n+    update_wrapper(_wrapper, decorated)\n+    # Ensure the wrapper keeps its own name to aid debugging\n+    _wrapper.__name__ = 'method_decorator(%s)' % (\n+        getattr(decorator, '__name__', decorator.__class__.__name__),\n+    )\n \n \n def _multi_decorate(decorators, method):\n@@ -33,14 +39,23 @@ def _multi_decorate(decorators, method):\n         decorators = [decorators]\n \n     def _wrapper(self, *args, **kwargs):\n+        # Create a bound method with the original method's attributes preserved\n         # bound_method has the signature that 'decorator' expects i.e. no\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = method.__get__(self, type(self))\n+        # Create a function that has the same attributes as the original method\n+        bound_func = partial(bound_method)\n+        # Preserve the original method's attributes on the bound function\n+        update_wrapper(bound_func, method)\n+        # Apply each decorator while preserving attributes\n         for dec in decorators:\n-            bound_method = dec(bound_method)\n-        return bound_method(*args, **kwargs)\n+            bound_func = dec(bound_func)\n+            # Ensure wrapper attributes are preserved after each decoration\n+            if hasattr(bound_func, '__wrapped__'):\n+                update_wrapper(bound_func, bound_func.__wrapped__)\n+        return bound_func(*args, **kwargs)\n \n     # Copy any attributes that a decorator adds to the function it decorates.\n     for dec in decorators:\n",
  "test_patch": "diff --git a/tests/decorators/test_method_decorator_preserve_wrapper.py b/tests/decorators/test_method_decorator_preserve_wrapper.py\nnew file mode 100644\nindex 0000000..72f0d95\n--- /dev/null\n+++ b/tests/decorators/test_method_decorator_preserve_wrapper.py\n@@ -0,0 +1,31 @@\n+from unittest import TestCase\n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+import logging\n+\n+# Set up a basic logger\n+logger = logging.getLogger(__name__)\n+\n+def logger_decorator(func):\n+    @wraps(func)\n+    def inner(*args, **kwargs):\n+        try:\n+            result = func(*args, **kwargs)\n+        except Exception as e:\n+            result = str(e)\n+        finally:\n+            logger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+        return result\n+    return inner\n+\n+class TestMethodDecoratorPreserveWrapper(TestCase):\n+    def test_method_decorator_preserve_wrapper(self):\n+        class Test:\n+            @method_decorator(logger_decorator)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        with self.assertRaises(AttributeError) as context:\n+            Test().hello_world()\n+\n+        self.assertIn(\"'functools.partial' object has no attribute '__name__'\", str(context.exception))\n",
  "test_inverted_patch": "diff --git a/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py b/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py\nnew file mode 100644\nindex 0000000..e1d9f28\n--- /dev/null\n+++ b/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py\n@@ -0,0 +1,32 @@\n+from unittest import TestCase\n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+import logging\n+\n+# Set up a basic logger\n+logger = logging.getLogger(__name__)\n+\n+def logger_decorator(func):\n+    @wraps(func)\n+    def inner(*args, **kwargs):\n+        try:\n+            result = func(*args, **kwargs)\n+        except Exception as e:\n+            result = str(e)\n+        finally:\n+            logger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+        return result\n+    return inner\n+\n+class TestMethodDecoratorPreserveWrapper(TestCase):\n+    def test_method_decorator_preserve_wrapper(self):\n+        class Test:\n+            @method_decorator(logger_decorator)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        # The test should now fail when the bug is observed\n+        try:\n+            Test().hello_world()\n+        except AttributeError as e:\n+            self.fail(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1268574,
  "num_received_chars": 22041,
  "elapsed_time": 220.9624445438385,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}