{
  "instance_id": "sphinx-doc__sphinx-9281",
  "edit_test_file": "tests/test_util_template.py",
  "code_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a70..23d3bdd 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -432,6 +432,9 @@ def safe_getattr(obj: Any, name: str, *defargs: Any) -> Any:\n \n def object_description(object: Any) -> str:\n     \"\"\"A repr() implementation that returns text safe to use in reST context.\"\"\"\n+    if isinstance(object, enum.Enum):\n+        # Format Enum values as EnumClass.ValueName without the numeric value\n+        return '%s.%s' % (object.__class__.__name__, object.name)\n     if isinstance(object, dict):\n         try:\n             sorted_keys = sorted(object)\n",
  "test_patch": "diff --git a/tests/test_enum_value_rendering.py b/tests/test_enum_value_rendering.py\nnew file mode 100644\nindex 0000000..e0226cb\n--- /dev/null\n+++ b/tests/test_enum_value_rendering.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sphinx.util.template import ReSTRenderer\n+from enum import Enum\n+\n+class MyEnum(Enum):\n+    ValueA = 10\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    pass\n+\n+class TestEnumValueRendering(unittest.TestCase):\n+    def test_enum_value_rendering(self):\n+        r = ReSTRenderer()\n+        template = '{{ \"ugly_enum_func(e: ugly_enum.MyEnum = <MyEnum.ValueA: 10>) \u2192 None\" }}'\n+        rendered = r.render_string(template, {})\n+        expected = \"ugly_enum_func(e: ugly_enum.MyEnum = <MyEnum.ValueA: 10>) \u2192 None\"\n+        self.assertEqual(rendered, expected)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_enum_value_rendering_inverted.py b/tests/test_enum_value_rendering_inverted.py\nnew file mode 100644\nindex 0000000..a68418b\n--- /dev/null\n+++ b/tests/test_enum_value_rendering_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from sphinx.util.template import ReSTRenderer\n+from enum import Enum\n+\n+class MyEnum(Enum):\n+    ValueA = 10\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    pass\n+\n+class TestEnumValueRendering(unittest.TestCase):\n+    def test_enum_value_rendering(self):\n+        r = ReSTRenderer()\n+        template = '{{ \"ugly_enum_func(e: ugly_enum.MyEnum = <MyEnum.ValueA: 10>) \u2192 None\" }}'\n+        rendered = r.render_string(template, {})\n+        # The expected value is changed to reflect the correct rendering without the enum value\n+        expected = \"ugly_enum_func(e: ugly_enum.MyEnum = MyEnum.ValueA) \u2192 None\"\n+        # This assertion will now fail if the bug is present\n+        self.assertEqual(rendered, expected, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 5487357,
  "num_received_chars": 54954,
  "elapsed_time": 953.7836828231812,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}