{
  "instance_id": "scikit-learn__scikit-learn-25102",
  "edit_test_file": "sklearn/utils/tests/test_set_output.py",
  "code_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c..578612b 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    preserve_dtypes=False,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -36,6 +37,10 @@ def _wrap_in_pandas_container(\n     index : array-like, default=None\n         Index for data.\n \n+    preserve_dtypes : bool, default=False\n+        Whether to preserve the dtypes from the input DataFrame. Only used when\n+        `data_to_wrap` is a DataFrame.\n+\n     Returns\n     -------\n     dataframe : DataFrame\n@@ -53,13 +58,29 @@ def _wrap_in_pandas_container(\n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n     if isinstance(data_to_wrap, pd.DataFrame):\n+        original_dtypes = data_to_wrap.dtypes if preserve_dtypes else None\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    # Create new DataFrame\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    \n+    # If preserve_dtypes is True and input was a DataFrame, try to preserve dtypes\n+    if preserve_dtypes and hasattr(data_to_wrap, 'dtypes'):\n+        original_dtypes = data_to_wrap.dtypes\n+        # Only set dtypes for columns that exist in both input and output\n+        common_columns = df.columns.intersection(original_dtypes.index)\n+        for col in common_columns:\n+            try:\n+                df[col] = df[col].astype(original_dtypes[col])\n+            except (ValueError, TypeError):\n+                # Skip if dtype conversion fails\n+                continue\n+    \n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -81,12 +102,17 @@ def _get_output_config(method, estimator=None):\n \n         - \"dense\": specifies the dense container for `method`. This can be\n           `\"default\"` or `\"pandas\"`.\n+        - \"preserve_dtypes\": whether to preserve DataFrame dtypes when using pandas output.\n     \"\"\"\n     est_sklearn_output_config = getattr(estimator, \"_sklearn_output_config\", {})\n+    \n+    # Get dense config\n     if method in est_sklearn_output_config:\n         dense_config = est_sklearn_output_config[method]\n+        preserve_dtypes = est_sklearn_output_config.get(\"preserve_dtypes\", False)\n     else:\n         dense_config = get_config()[f\"{method}_output\"]\n+        preserve_dtypes = get_config().get(\"preserve_dtypes\", False)\n \n     if dense_config not in {\"default\", \"pandas\"}:\n         raise ValueError(\n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_preserve_dtypes.py b/sklearn/utils/tests/test_preserve_dtypes.py\nnew file mode 100644\nindex 0000000..5fe0e9d\n--- /dev/null\n+++ b/sklearn/utils/tests/test_preserve_dtypes.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import pandas as pd\n+from sklearn.datasets import load_iris\n+from sklearn.feature_selection import SelectKBest\n+from sklearn.feature_selection import chi2\n+\n+def test_preserve_dtypes_issue():\n+    \"\"\"Test to reproduce the dtype preservation issue with pandas output.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2)\n+    selector.set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Assert that the dtypes are not preserved, which is the current issue\n+    expected_dtypes = pd.Series([np.float64, np.float64], index=[\"petal length (cm)\", \"cat\"])\n+    pd.testing.assert_series_equal(X_out.dtypes, expected_dtypes)\n",
  "test_inverted_patch": "diff --git a/sklearn/utils/tests/test_preserve_dtypes_inverted.py b/sklearn/utils/tests/test_preserve_dtypes_inverted.py\nnew file mode 100644\nindex 0000000..dfdd9f0\n--- /dev/null\n+++ b/sklearn/utils/tests/test_preserve_dtypes_inverted.py\n@@ -0,0 +1,28 @@\n+import numpy as np\n+import pandas as pd\n+from sklearn.datasets import load_iris\n+from sklearn.feature_selection import SelectKBest\n+from sklearn.feature_selection import chi2\n+import pytest\n+\n+def test_preserve_dtypes_issue():\n+    \"\"\"Test to reproduce the dtype preservation issue with pandas output.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2)\n+    selector.set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Assert that the dtypes are preserved, which is the desired behavior\n+    expected_dtypes = pd.Series([np.float16, \"category\"], index=[\"petal length (cm)\", \"cat\"])\n+    try:\n+        pd.testing.assert_series_equal(X_out.dtypes, expected_dtypes)\n+    except AssertionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4429574,
  "num_received_chars": 106344,
  "elapsed_time": 1001.6049551963806,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}