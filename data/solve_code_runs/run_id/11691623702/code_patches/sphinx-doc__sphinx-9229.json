{
  "instance_id": "sphinx-doc__sphinx-9229",
  "edit_test_file": "tests/test_util_docutils.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1f4c982..8839475 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1796,8 +1796,19 @@ class GenericAliasMixin(DataDocumenterMixinBase):\n         return (inspect.isgenericalias(self.object) or\n                 super().should_suppress_directive_header())\n \n+    def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n+        \"\"\"Get the docstring for the object, preserving it for type aliases.\"\"\"\n+        docstring = super().get_doc(ignore)\n+        if docstring is not None:\n+            return docstring\n+        elif inspect.isgenericalias(self.object):\n+            # For generic aliases without docstring, return empty list to allow processing\n+            return []\n+        return None\n+\n     def update_content(self, more_content: StringList) -> None:\n         if inspect.isgenericalias(self.object):\n+            # Add alias information after any existing content\n             more_content.append(_('alias of %s') % restify(self.object), '')\n             more_content.append('', '')\n \n",
  "test_patch": "diff --git a/tests/test_inconsistent_type_alias_doc.py b/tests/test_inconsistent_type_alias_doc.py\nnew file mode 100644\nindex 0000000..903d616\n--- /dev/null\n+++ b/tests/test_inconsistent_type_alias_doc.py\n@@ -0,0 +1,41 @@\n+\"\"\"\n+    test_inconsistent_type_alias_doc\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test to reproduce the issue with inconsistent type alias documentation.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestTypeAliasDocstringIssue(unittest.TestCase):\n+    def setUp(self):\n+        # Set up the Sphinx application\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.srcdir, '_doctrees')\n+        self.confdir = self.srcdir\n+\n+    def test_type_alias_docstring_inconsistency(self):\n+        # Attempt to build the documentation\n+        with self.assertRaises(ApplicationError) as context:\n+            app = Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                'html',\n+                confoverrides={'extensions': ['sphinx.ext.autodoc']}\n+            )\n+            app.build()\n+\n+        # Check if the error is due to missing conf.py\n+        self.assertIn(\"config directory doesn't contain a conf.py file\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_inconsistent_type_alias_doc_inverted.py b/tests/test_inconsistent_type_alias_doc_inverted.py\nnew file mode 100644\nindex 0000000..a9379a2\n--- /dev/null\n+++ b/tests/test_inconsistent_type_alias_doc_inverted.py\n@@ -0,0 +1,41 @@\n+\"\"\"\n+    test_inconsistent_type_alias_doc\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test to reproduce the issue with inconsistent type alias documentation.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestTypeAliasDocstringIssue(unittest.TestCase):\n+    def setUp(self):\n+        # Set up the Sphinx application\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.srcdir, '_doctrees')\n+        self.confdir = self.srcdir\n+\n+    def test_type_alias_docstring_inconsistency(self):\n+        # Attempt to build the documentation\n+        with self.assertRaises(ApplicationError) as context:\n+            app = Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                'html',\n+                confoverrides={'extensions': ['sphinx.ext.autodoc']}\n+            )\n+            app.build()\n+\n+        # Check if the error is due to the bug in type alias documentation\n+        self.assertIn(\"__BUG__HERE__\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3612743,
  "num_received_chars": 63324,
  "elapsed_time": 861.2720186710358,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}