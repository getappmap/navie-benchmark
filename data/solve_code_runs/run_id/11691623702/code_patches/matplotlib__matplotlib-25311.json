{
  "instance_id": "matplotlib__matplotlib-25311",
  "edit_test_file": null,
  "code_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex ff6abdb..b784760 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -1194,7 +1194,7 @@ class Legend(Artist):\n             instance. Otherwise this returns *None*.\n         \"\"\"\n         if state:\n-            if self._draggable is None:\n+            if self._draggable is None and hasattr(self, 'figure') and self.figure.canvas is not None:\n                 self._draggable = DraggableLegend(self,\n                                                   use_blit,\n                                                   update=update)\n@@ -1208,16 +1208,18 @@ class Legend(Artist):\n         \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n         return self._draggable is not None\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove non-picklable attributes\n+        state['_draggable'] = state['_draggable'] is not None\n+        return state\n \n-# Helper functions to parse legend arguments for both `figure.legend` and\n-# `axes.legend`:\n-def _get_legend_handles(axs, legend_handler_map=None):\n-    \"\"\"Yield artists that can be used as handles in a legend.\"\"\"\n-    handles_original = []\n-    for ax in axs:\n-        handles_original += [\n-            *(a for a in ax._children\n-              if isinstance(a, (Line2D, Patch, Collection, Text))),\n+    def __setstate__(self, state):\n+        was_draggable = state.pop('_draggable', False)\n+        self.__dict__ = state\n+        self._draggable = None\n+        if was_draggable:\n+            self.set_draggable(True)\n             *ax.containers]\n         # support parasite axes:\n         if hasattr(ax, 'parasites'):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 7318574,
  "num_received_chars": 124003,
  "elapsed_time": 1663.2529592514038,
  "lint_repair_count": 7,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}