{
  "instance_id": "scikit-learn__scikit-learn-14496",
  "edit_test_file": "sklearn/cluster/tests/test_optics.py",
  "code_patch": "diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\nindex 4f7eb11..e7d2a5c 100755\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -437,7 +437,7 @@ if metric=\u2019precomputed\u2019.\n     n_samples = X.shape[0]\n     _validate_size(min_samples, n_samples, 'min_samples')\n     if min_samples <= 1:\n-        min_samples = max(2, min_samples * n_samples)\n+        min_samples = max(2, int(round(min_samples * n_samples)))\n \n     # Start all points as 'unprocessed' ##\n     reachability_ = np.empty(n_samples)\n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_optics_min_samples.py b/sklearn/cluster/tests/test_optics_min_samples.py\nnew file mode 100644\nindex 0000000..45f1898\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_optics_min_samples.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+import pytest\n+from sklearn.cluster import OPTICS\n+from sklearn.datasets import make_blobs\n+\n+def test_optics_float_min_samples():\n+    \"\"\"Test that OPTICS raises TypeError when min_samples is float.\n+    \n+    This test verifies that using a float value for min_samples parameter\n+    raises a TypeError during NearestNeighbors instantiation inside OPTICS.\n+    \"\"\"\n+    # Generate sample data\n+    centers = [[1, 1], [-1, -1], [1, -1]]\n+    X, labels_true = make_blobs(n_samples=750, centers=centers,\n+                               cluster_std=0.4, random_state=0)\n+    \n+    # Create OPTICS with float min_samples\n+    clust = OPTICS(min_samples=0.1)\n+    \n+    # The error should be raised during fit\n+    expected_msg = \"n_neighbors does not take .* value, enter integer value\"\n+    with pytest.raises(TypeError, match=expected_msg):\n+        clust.fit(X)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/cluster/tests/test_optics_min_samples_inverted.py b/sklearn/cluster/tests/test_optics_min_samples_inverted.py\nnew file mode 100644\nindex 0000000..ae8ed9a\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_optics_min_samples_inverted.py\n@@ -0,0 +1,35 @@\n+import numpy as np\n+from sklearn.cluster import OPTICS\n+from sklearn.datasets import make_blobs\n+\n+def test_optics_float_min_samples():\n+    \"\"\"Test that OPTICS works correctly with float min_samples.\n+    \n+    This test verifies that using a float value for min_samples parameter\n+    should work properly and not raise a TypeError during NearestNeighbors \n+    instantiation inside OPTICS.\n+    \"\"\"\n+    # Generate sample data\n+    centers = [[1, 1], [-1, -1], [1, -1]]\n+    X, labels_true = make_blobs(n_samples=750, centers=centers,\n+                               cluster_std=0.4, random_state=0)\n+    \n+    # Create OPTICS with float min_samples\n+    min_samples_float = 0.1\n+    clust = OPTICS(min_samples=min_samples_float)\n+    \n+    try:\n+        # The fit should succeed with float min_samples\n+        clust.fit(X)\n+    except TypeError as e:\n+        if \"n_neighbors does not take\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__: OPTICS fails to handle float min_samples\") from e\n+        raise e\n+\n+    # Additional validation that min_samples was properly converted to int\n+    expected_min_samples = int(round(max(2, min_samples_float * X.shape[0])))\n+    assert hasattr(clust, '_min_samples'), \"OPTICS instance missing _min_samples attribute\"\n+    assert isinstance(clust._min_samples, (int, np.integer)), \\\n+        f\"min_samples was not converted to integer (type: {type(clust._min_samples)})\"\n+    assert clust._min_samples == expected_min_samples, \\\n+        f\"Incorrect min_samples conversion: got {clust._min_samples}, expected {expected_min_samples}\"\n\\ No newline at end of file\n",
  "num_sent_chars": 3456610,
  "num_received_chars": 38467,
  "elapsed_time": 545.407083272934,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}