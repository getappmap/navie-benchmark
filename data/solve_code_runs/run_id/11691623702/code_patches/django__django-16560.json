{
  "instance_id": "django__django-16560",
  "edit_test_file": "tests/constraints/tests.py",
  "code_patch": "diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\nindex ad3a5f6..03ab87b 100644\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -33,6 +33,7 @@ class ExclusionConstraint(BaseConstraint):\n         deferrable=None,\n         include=None,\n         violation_error_message=None,\n+        violation_error_code=None,\n     ):\n         if index_type and index_type.lower() not in {\"gist\", \"spgist\"}:\n             raise ValueError(\n@@ -60,7 +61,8 @@ class ExclusionConstraint(BaseConstraint):\n         self.condition = condition\n         self.deferrable = deferrable\n         self.include = tuple(include) if include else ()\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message, \n+                        violation_error_code=violation_error_code)\n \n     def _get_expressions(self, schema_editor, query):\n         expressions = []\n@@ -150,11 +152,12 @@ class ExclusionConstraint(BaseConstraint):\n                 and self.deferrable == other.deferrable\n                 and self.include == other.include\n                 and self.violation_error_message == other.violation_error_message\n+                and self.violation_error_code == other.violation_error_code\n             )\n         return super().__eq__(other)\n \n     def __repr__(self):\n-        return \"<%s: index_type=%s expressions=%s name=%s%s%s%s%s>\" % (\n+        return \"<%s: index_type=%s expressions=%s name=%s%s%s%s%s%s>\" % (\n             self.__class__.__qualname__,\n             repr(self.index_type),\n             repr(self.expressions),\n@@ -168,6 +171,11 @@ class ExclusionConstraint(BaseConstraint):\n                 or self.violation_error_message == self.default_violation_error_message\n                 else \" violation_error_message=%r\" % self.violation_error_message\n             ),\n+            (\n+                \"\"\n+                if self.violation_error_code is None\n+                else \" violation_error_code=%r\" % self.violation_error_code\n+            ),\n         )\n \n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n",
  "test_patch": "diff --git a/tests/constraints/test_custom_validationerror_code.py b/tests/constraints/test_custom_validationerror_code.py\nnew file mode 100644\nindex 0000000..a92ef7f\n--- /dev/null\n+++ b/tests/constraints/test_custom_validationerror_code.py\n@@ -0,0 +1,14 @@\n+from django.core.exceptions import ValidationError\n+from django.db.models.constraints import BaseConstraint\n+from django.test import SimpleTestCase\n+\n+class CustomConstraint(BaseConstraint):\n+    def validate(self, model, instance, **kwargs):\n+        raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+class BaseConstraintValidationErrorTests(SimpleTestCase):\n+    def test_custom_violation_error_code(self):\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n",
  "test_inverted_patch": "diff --git a/tests/constraints/test_custom_validationerror_code_inverted.py b/tests/constraints/test_custom_validationerror_code_inverted.py\nnew file mode 100644\nindex 0000000..8bd8769\n--- /dev/null\n+++ b/tests/constraints/test_custom_validationerror_code_inverted.py\n@@ -0,0 +1,15 @@\n+from django.core.exceptions import ValidationError\n+from django.db.models.constraints import BaseConstraint\n+from django.test import SimpleTestCase\n+\n+class CustomConstraint(BaseConstraint):\n+    def validate(self, model, instance, **kwargs):\n+        raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+class BaseConstraintValidationErrorTests(SimpleTestCase):\n+    def test_custom_violation_error_code(self):\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        # Altered the test to fail when the issue is observed\n+        self.assertNotEqual(cm.exception.code, \"custom_code\", \"__BUG__HERE__\")\n",
  "num_sent_chars": 4005233,
  "num_received_chars": 96933,
  "elapsed_time": 965.5361964702606,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}