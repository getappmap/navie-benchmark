{
  "instance_id": "django__django-11211",
  "edit_test_file": "tests/prefetch_related/test_uuid.py",
  "code_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb..5ae617a 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -184,7 +184,19 @@ class GenericForeignKey(FieldCacheMixin):\n             if ct_id is not None:\n                 fk_val = getattr(instance, self.fk_field)\n                 if fk_val is not None:\n-                    fk_dict[ct_id].add(fk_val)\n+                    # Get the content type to check if target model uses UUID pk\n+                    ct = self.get_content_type(id=ct_id, using=instance._state.db)\n+                    target_model = ct.model_class()\n+                    pk_field = target_model._meta.pk\n+                    \n+                    # Handle UUID primary keys by converting to string representation\n+                    if hasattr(pk_field, 'get_internal_type') and pk_field.get_internal_type() == 'UUIDField':\n+                        if isinstance(fk_val, str):\n+                            fk_dict[ct_id].add(fk_val)\n+                        else:\n+                            fk_dict[ct_id].add(str(fk_val))\n+                    else:\n+                        fk_dict[ct_id].add(fk_val)\n                     instance_dict[ct_id] = instance\n \n         ret_val = []\n@@ -200,14 +212,23 @@ class GenericForeignKey(FieldCacheMixin):\n             if ct_id is None:\n                 return None\n             else:\n-                model = self.get_content_type(id=ct_id,\n-                                              using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                ct = self.get_content_type(id=ct_id, using=obj._state.db)\n+                model = ct.model_class()\n+                fk_val = getattr(obj, self.fk_field)\n+                \n+                # Handle UUID primary keys by ensuring string comparison\n+                pk_field = model._meta.pk\n+                if hasattr(pk_field, 'get_internal_type') and pk_field.get_internal_type() == 'UUIDField':\n+                    if isinstance(fk_val, str):\n+                        return (fk_val, model)\n+                    else:\n+                        return (str(fk_val), model)\n+                else:\n+                    return (model._meta.pk.get_prep_value(fk_val), model)\n \n         return (\n             ret_val,\n-            lambda obj: (obj.pk, obj.__class__),\n+            lambda obj: (str(obj.pk) if hasattr(obj._meta.pk, 'get_internal_type') and obj._meta.pk.get_internal_type() == 'UUIDField' else obj.pk, obj.__class__),\n             gfk_key,\n             True,\n             self.name,\n",
  "test_patch": "diff --git a/tests/prefetch_related/test_gfk_with_uuid_prefetch.py b/tests/prefetch_related/test_gfk_with_uuid_prefetch.py\nnew file mode 100644\nindex 0000000..7a9b380\n--- /dev/null\n+++ b/tests/prefetch_related/test_gfk_with_uuid_prefetch.py\n@@ -0,0 +1,31 @@\n+import uuid\n+from django.test import TestCase\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.db import models\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n+class TestGFKWithUUIDPrefetch(TestCase):\n+    def test_gfk_with_uuid_prefetch_related(self):\n+        foo_instance = Foo.objects.create()\n+        bar_instance = Bar.objects.create(\n+            foo_content_type=ContentType.objects.get_for_model(Foo),\n+            foo_object_id=str(foo_instance.id)\n+        )\n+\n+        # Attempt to prefetch related 'foo' and check if it returns None\n+        with self.assertNumQueries(2):\n+            bar_with_prefetch = Bar.objects.prefetch_related('foo').get(pk=bar_instance.pk)\n+        \n+        # Assert that the 'foo' attribute is None, which reproduces the issue\n+        self.assertIsNone(bar_with_prefetch.foo)\n",
  "test_inverted_patch": "diff --git a/tests/prefetch_related/test_gfk_with_uuid_prefetch_inverted.py b/tests/prefetch_related/test_gfk_with_uuid_prefetch_inverted.py\nnew file mode 100644\nindex 0000000..fc6f3dc\n--- /dev/null\n+++ b/tests/prefetch_related/test_gfk_with_uuid_prefetch_inverted.py\n@@ -0,0 +1,32 @@\n+import uuid\n+from django.test import TestCase\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.db import models\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n+class TestGFKWithUUIDPrefetch(TestCase):\n+    def test_gfk_with_uuid_prefetch_related(self):\n+        foo_instance = Foo.objects.create()\n+        bar_instance = Bar.objects.create(\n+            foo_content_type=ContentType.objects.get_for_model(Foo),\n+            foo_object_id=str(foo_instance.id)\n+        )\n+\n+        # Attempt to prefetch related 'foo' and check if it returns None\n+        with self.assertNumQueries(2):\n+            bar_with_prefetch = Bar.objects.prefetch_related('foo').get(pk=bar_instance.pk)\n+        \n+        # Assert that the 'foo' attribute is not None, which should fail if the bug is present\n+        if bar_with_prefetch.foo is None:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1035725,
  "num_received_chars": 18156,
  "elapsed_time": 166.04614853858948,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}