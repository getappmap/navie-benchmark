{
  "instance_id": "scikit-learn__scikit-learn-26323",
  "edit_test_file": "sklearn/compose/tests/test_column_transformer.py",
  "code_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12..daa68a9 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -275,8 +275,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n     def set_output(self, *, transform=None):\n         \"\"\"Set the output container when `\"transform\"` and `\"fit_transform\"` are called.\n \n-        Calling `set_output` will set the output of all estimators in `transformers`\n-        and `transformers_`.\n+        Calling `set_output` will set the output of all estimators in `transformers`,\n+        `transformers_` and the remainder estimator if specified.\n \n         Parameters\n         ----------\n@@ -303,6 +303,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Configure remainder if it's an estimator\n+        if not isinstance(self.remainder, str):\n+            _safe_set_output(self.remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\n",
  "test_patch": "diff --git a/sklearn/compose/tests/test_set_output_remainder.py b/sklearn/compose/tests/test_set_output_remainder.py\nnew file mode 100644\nindex 0000000..8560215\n--- /dev/null\n+++ b/sklearn/compose/tests/test_set_output_remainder.py\n@@ -0,0 +1,28 @@\n+import pandas as pd\n+import pytest\n+from sklearn.compose import make_column_selector, make_column_transformer\n+from sklearn.feature_selection import VarianceThreshold\n+\n+def test_set_output_remainder_ignored():\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    # Test case where remainder is an estimator\n+    out1 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    ).set_output(transform=\"pandas\").fit_transform(df)\n+    \n+    # Test case where remainder is not used\n+    out2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    ).set_output(transform=\"pandas\").fit_transform(df)\n+    \n+    # Assert the incorrect output to reproduce the issue\n+    assert out1.equals(pd.DataFrame({\"a\": [1, 0, 1], \"b\": [1, 2, 3]}))\n+    assert out2.equals(pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]}))\n+\n+if __name__ == \"__main__\":\n+    pytest.main([__file__])\n",
  "test_inverted_patch": "diff --git a/sklearn/compose/tests/test_set_output_remainder_inverted.py b/sklearn/compose/tests/test_set_output_remainder_inverted.py\nnew file mode 100644\nindex 0000000..23158f5\n--- /dev/null\n+++ b/sklearn/compose/tests/test_set_output_remainder_inverted.py\n@@ -0,0 +1,28 @@\n+import pandas as pd\n+import pytest\n+from sklearn.compose import make_column_selector, make_column_transformer\n+from sklearn.feature_selection import VarianceThreshold\n+\n+def test_set_output_remainder_ignored():\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    # Test case where remainder is an estimator\n+    out1 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    ).set_output(transform=\"pandas\").fit_transform(df)\n+    \n+    # Test case where remainder is not used\n+    out2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    ).set_output(transform=\"pandas\").fit_transform(df)\n+    \n+    # Assert the correct output to ensure the test fails when the bug is present\n+    assert out1.equals(pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})), \"__BUG__HERE__\"\n+    assert out2.equals(pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})), \"__BUG__HERE__\"\n+\n+if __name__ == \"__main__\":\n+    pytest.main([__file__])\n",
  "num_sent_chars": 782171,
  "num_received_chars": 7578,
  "elapsed_time": 96.00569605827332,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}