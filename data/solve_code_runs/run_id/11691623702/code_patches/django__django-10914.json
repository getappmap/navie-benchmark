{
  "instance_id": "django__django-10914",
  "edit_test_file": "tests/file_storage/test_generate_filename.py",
  "code_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee988..bdeec80 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n",
  "test_patch": "diff --git a/tests/file_storage/test_file_upload_permissions.py b/tests/file_storage/test_file_upload_permissions.py\nnew file mode 100644\nindex 0000000..9cf20ed\n--- /dev/null\n+++ b/tests/file_storage/test_file_upload_permissions.py\n@@ -0,0 +1,49 @@\n+import os\n+import tempfile\n+import shutil\n+import unittest\n+\n+from django.core.files.base import ContentFile\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\n+from django.test import SimpleTestCase, override_settings\n+from io import StringIO\n+\n+\n+class FileUploadPermissionsTests(SimpleTestCase):\n+    \"\"\"Test file permissions behavior with different upload handlers.\"\"\"\n+    \n+    def setUp(self):\n+        self.temp_dir = tempfile.mkdtemp()\n+        self.storage = FileSystemStorage(location=self.temp_dir)\n+\n+    def tearDown(self):\n+        shutil.rmtree(self.temp_dir)\n+\n+    def test_inconsistent_file_permissions(self):\n+        \"\"\"\n+        Test that file permissions are inconsistent between MemoryUploadedFile\n+        and TemporaryUploadedFile when FILE_UPLOAD_PERMISSIONS is not set.\n+        \"\"\"\n+        # Test with TemporaryUploadedFile (simulates large file upload)\n+        with TemporaryUploadedFile('test.txt', 'text/plain', 1, 'utf8') as temp_file:\n+            temp_file.write(b'large file content')\n+            temp_file_path = self.storage.save('temp_uploaded.txt', temp_file)\n+            temp_file_mode = os.stat(self.storage.path(temp_file_path)).st_mode & 0o777\n+            \n+        # Test with InMemoryUploadedFile (simulates small file upload)\n+        in_memory_file = InMemoryUploadedFile(\n+            StringIO('small file content'),\n+            'file',\n+            'memory_uploaded.txt',\n+            'text/plain',\n+            16,  # Size less than 2.5MB to ensure it stays in memory\n+            'utf8'\n+        )\n+        memory_file_path = self.storage.save('memory_uploaded.txt', in_memory_file)\n+        memory_file_mode = os.stat(self.storage.path(memory_file_path)).st_mode & 0o777\n+\n+        # Assert that permissions are different, with TemporaryUploadedFile\n+        # having more restrictive 0o600 permissions\n+        self.assertEqual(temp_file_mode, 0o600)\n+        self.assertNotEqual(temp_file_mode, memory_file_mode)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/file_storage/test_file_upload_permissions_inverted.py b/tests/file_storage/test_file_upload_permissions_inverted.py\nnew file mode 100644\nindex 0000000..d964dbf\n--- /dev/null\n+++ b/tests/file_storage/test_file_upload_permissions_inverted.py\n@@ -0,0 +1,61 @@\n+import os\n+import tempfile\n+import shutil\n+import unittest\n+\n+from django.core.files.base import ContentFile\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\n+from django.test import SimpleTestCase, override_settings\n+from io import StringIO\n+\n+\n+class FileUploadPermissionsTests(SimpleTestCase):\n+    \"\"\"Test file permissions behavior with different upload handlers.\"\"\"\n+    \n+    def setUp(self):\n+        self.temp_dir = tempfile.mkdtemp()\n+        self.storage = FileSystemStorage(location=self.temp_dir)\n+\n+    def tearDown(self):\n+        shutil.rmtree(self.temp_dir)\n+\n+    def test_inconsistent_file_permissions(self):\n+        \"\"\"\n+        Test that file permissions should be consistent (0o644) between MemoryUploadedFile\n+        and TemporaryUploadedFile when FILE_UPLOAD_PERMISSIONS is not set.\n+        \"\"\"\n+        # Test with TemporaryUploadedFile (simulates large file upload)\n+        with TemporaryUploadedFile('test.txt', 'text/plain', 1, 'utf8') as temp_file:\n+            temp_file.write(b'large file content')\n+            temp_file_path = self.storage.save('temp_uploaded.txt', temp_file)\n+            temp_file_mode = os.stat(self.storage.path(temp_file_path)).st_mode & 0o777\n+            \n+        # Test with InMemoryUploadedFile (simulates small file upload)\n+        in_memory_file = InMemoryUploadedFile(\n+            StringIO('small file content'),\n+            'file',\n+            'memory_uploaded.txt',\n+            'text/plain',\n+            16,  # Size less than 2.5MB to ensure it stays in memory\n+            'utf8'\n+        )\n+        memory_file_path = self.storage.save('memory_uploaded.txt', in_memory_file)\n+        memory_file_mode = os.stat(self.storage.path(memory_file_path)).st_mode & 0o777\n+\n+        # Assert that permissions should be consistent (0o644)\n+        expected_mode = 0o644\n+        \n+        if temp_file_mode != expected_mode:\n+            raise AssertionError(\"__BUG__HERE__: TemporaryUploadedFile permissions \"\n+                               f\"are {oct(temp_file_mode)} instead of {oct(expected_mode)}\")\n+        \n+        if memory_file_mode != expected_mode:\n+            raise AssertionError(\"__BUG__HERE__: InMemoryUploadedFile permissions \"\n+                               f\"are {oct(memory_file_mode)} instead of {oct(expected_mode)}\")\n+        \n+        # Both files should have the same permissions\n+        if temp_file_mode != memory_file_mode:\n+            raise AssertionError(\"__BUG__HERE__: Inconsistent permissions between \"\n+                               f\"TemporaryUploadedFile ({oct(temp_file_mode)}) and \"\n+                               f\"InMemoryUploadedFile ({oct(memory_file_mode)})\")\n\\ No newline at end of file\n",
  "num_sent_chars": 753249,
  "num_received_chars": 5930,
  "elapsed_time": 87.64298963546753,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}