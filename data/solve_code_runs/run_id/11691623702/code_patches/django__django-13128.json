{
  "instance_id": "django__django-13128",
  "edit_test_file": "tests/expressions/tests.py",
  "code_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658..91d2324 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -64,8 +64,8 @@ class Combinable:\n             other = Value(other, output_field=output_field)\n \n         if reversed:\n-            return CombinedExpression(other, connector, self)\n-        return CombinedExpression(self, connector, other)\n+            return CombinedExpression(other, connector, self, output_field=fields.DurationField() if connector == self.SUB else None)\n+        return CombinedExpression(self, connector, other, output_field=fields.DurationField() if connector == self.SUB else None)\n \n     #############\n     # OPERATORS #\n@@ -451,15 +451,15 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n             rhs_type = self.rhs.output_field.get_internal_type()\n         except FieldError:\n             rhs_type = None\n+        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n+        if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         if (\n             not connection.features.has_native_duration_field and\n             'DurationField' in {lhs_type, rhs_type} and\n             lhs_type != rhs_type\n         ):\n             return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n-        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n-        if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n@@ -513,7 +513,7 @@ class TemporalSubtraction(CombinedExpression):\n     output_field = fields.DurationField()\n \n     def __init__(self, lhs, rhs):\n-        super().__init__(lhs, self.SUB, rhs)\n+        super().__init__(lhs, self.SUB, rhs, output_field=fields.DurationField())\n \n     def as_sql(self, compiler, connection):\n         connection.ops.check_expression_support(self)\n",
  "test_patch": "diff --git a/tests/expressions/test_temporal_subtraction.py b/tests/expressions/test_temporal_subtraction.py\nnew file mode 100644\nindex 0000000..0b594b8\n--- /dev/null\n+++ b/tests/expressions/test_temporal_subtraction.py\n@@ -0,0 +1,32 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import DateTimeField, DurationField, F, Value\n+from django.test import TestCase\n+import datetime\n+\n+from .models import Experiment\n+\n+\n+class TemporalSubtractionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.start = datetime.datetime(2010, 6, 25, 12, 15, 30)\n+        cls.end = cls.start + datetime.timedelta(days=1)\n+        Experiment.objects.create(\n+            name='Experiment 1',\n+            start=cls.start,\n+            end=cls.end,\n+            assigned=cls.start.date(),\n+            completed=cls.end.date(),\n+            estimated_time=datetime.timedelta(days=1)\n+        )\n+\n+    def test_temporal_subtraction_without_wrapper(self):\n+        \"\"\"\n+        Test that temporal subtraction without ExpressionWrapper raises FieldError\n+        when mixing DateTimeField and DurationField.\n+        \"\"\"\n+        msg = \"Expression contains mixed types: DateTimeField, DurationField. You must set output_field.\"\n+        with self.assertRaisesMessage(FieldError, msg):\n+            list(Experiment.objects.annotate(\n+                delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())\n+            ))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/expressions/test_temporal_subtraction_inverted.py b/tests/expressions/test_temporal_subtraction_inverted.py\nnew file mode 100644\nindex 0000000..e940599\n--- /dev/null\n+++ b/tests/expressions/test_temporal_subtraction_inverted.py\n@@ -0,0 +1,39 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import DateTimeField, DurationField, F, Value\n+from django.test import TestCase\n+import datetime\n+\n+from .models import Experiment\n+\n+\n+class TemporalSubtractionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.start = datetime.datetime(2010, 6, 25, 12, 15, 30)\n+        cls.end = cls.start + datetime.timedelta(days=1)\n+        Experiment.objects.create(\n+            name='Experiment 1',\n+            start=cls.start,\n+            end=cls.end,\n+            assigned=cls.start.date(),\n+            completed=cls.end.date(),\n+            estimated_time=datetime.timedelta(days=1)\n+        )\n+\n+    def test_temporal_subtraction_without_wrapper(self):\n+        \"\"\"\n+        Test that temporal subtraction without ExpressionWrapper should work\n+        when mixing DateTimeField and DurationField.\n+        \"\"\"\n+        try:\n+            result = list(Experiment.objects.annotate(\n+                delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())\n+            ))\n+        except FieldError as e:\n+            if \"Expression contains mixed types: DateTimeField, DurationField. You must set output_field.\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise\n+\n+        # If we get here without an exception, the test should verify the result\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0].delta, datetime.timedelta(days=1))\n\\ No newline at end of file\n",
  "num_sent_chars": 1774726,
  "num_received_chars": 32996,
  "elapsed_time": 506.8176054954529,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}