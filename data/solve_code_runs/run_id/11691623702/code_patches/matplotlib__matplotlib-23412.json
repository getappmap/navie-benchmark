{
  "instance_id": "matplotlib__matplotlib-23412",
  "edit_test_file": "lib/matplotlib/tests/test_patches.py",
  "code_patch": "diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\nindex 851fec9..33f56bf 100644\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -613,6 +613,10 @@ class Collection(artist.Artist, cm.ScalarMappable):\n             if isinstance(ls, str):\n                 ls = cbook.ls_mapper.get(ls, ls)\n                 dashes = [mlines._get_dash_pattern(ls)]\n+            elif isinstance(ls, tuple) and len(ls) == 2:\n+                # Handle direct (offset, dash-pattern) tuple\n+                offset, dash_pattern = ls\n+                dashes = [(offset, dash_pattern)]\n             else:\n                 try:\n                     dashes = [mlines._get_dash_pattern(ls)]\n@@ -673,7 +677,7 @@ class Collection(artist.Artist, cm.ScalarMappable):\n         linewidths : list\n             line widths of collection\n         dashes : list\n-            dash specification (offset, (dash pattern tuple))\n+            dash specification (offset, (dash pattern tuple)) or None\n \n         Returns\n         -------\n@@ -682,6 +686,11 @@ class Collection(artist.Artist, cm.ScalarMappable):\n         \"\"\"\n         if mpl.rcParams['_internal.classic_mode']:\n             return linewidths, dashes\n+            \n+        # Handle case where dashes is None or empty\n+        if not dashes:\n+            return linewidths, dashes\n+            \n         # make sure they are the same length so we can zip them\n         if len(dashes) != len(linewidths):\n             l_dashes = len(dashes)\n@@ -690,11 +699,13 @@ class Collection(artist.Artist, cm.ScalarMappable):\n             dashes = list(dashes) * (l_lw // gcd)\n             linewidths = list(linewidths) * (l_dashes // gcd)\n \n-        # scale the dash patterns\n-        dashes = [mlines._scale_dashes(o, d, lw)\n-                  for (o, d), lw in zip(dashes, linewidths)]\n+        # scale the dash patterns, preserving offsets\n+        scaled_dashes = []\n+        for (offset, pattern), lw in zip(dashes, linewidths):\n+            scaled_offset, scaled_pattern = mlines._scale_dashes(offset, pattern, lw)\n+            scaled_dashes.append((scaled_offset, scaled_pattern))\n \n-        return linewidths, dashes\n+        return linewidths, scaled_dashes\n \n     def set_antialiased(self, aa):\n         \"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_patch_linestyle_offset.py b/lib/matplotlib/tests/test_patch_linestyle_offset.py\nnew file mode 100644\nindex 0000000..3c8544d\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_patch_linestyle_offset.py\n@@ -0,0 +1,26 @@\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import unittest\n+\n+class TestPatchLinestyleOffset(unittest.TestCase):\n+    def test_patch_linestyle_offset(self):\n+        fig, ax = plt.subplots(figsize=(10, 10))\n+        rect1 = mpl.patches.Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=4, linestyle=(0, (10, 10)))\n+        rect2 = mpl.patches.Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, linestyle=(10, (10, 10)))\n+        ax.add_patch(rect1)\n+        ax.add_patch(rect2)\n+        ax.set_ylim([0, 2])\n+        ax.set_xlim([0, 2])\n+        fig.canvas.draw()\n+\n+        # Extract the path data for both rectangles\n+        path_data1 = rect1.get_path().vertices\n+        path_data2 = rect2.get_path().vertices\n+\n+        # Assert that the path data is the same, indicating no offset effect\n+        assert_array_equal(path_data1, path_data2)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_patch_linestyle_offset_inverted.py b/lib/matplotlib/tests/test_patch_linestyle_offset_inverted.py\nnew file mode 100644\nindex 0000000..ea3182e\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_patch_linestyle_offset_inverted.py\n@@ -0,0 +1,27 @@\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import numpy as np\n+from numpy.testing import assert_raises\n+import unittest\n+\n+class TestPatchLinestyleOffset(unittest.TestCase):\n+    def test_patch_linestyle_offset(self):\n+        fig, ax = plt.subplots(figsize=(10, 10))\n+        rect1 = mpl.patches.Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=4, linestyle=(0, (10, 10)))\n+        rect2 = mpl.patches.Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, linestyle=(10, (10, 10)))\n+        ax.add_patch(rect1)\n+        ax.add_patch(rect2)\n+        ax.set_ylim([0, 2])\n+        ax.set_xlim([0, 2])\n+        fig.canvas.draw()\n+\n+        # Extract the path data for both rectangles\n+        path_data1 = rect1.get_path().vertices\n+        path_data2 = rect2.get_path().vertices\n+\n+        # Assert that the path data is different, indicating an offset effect\n+        with assert_raises(AssertionError, msg=\"__BUG__HERE__\"):\n+            np.testing.assert_array_equal(path_data1, path_data2)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3112471,
  "num_received_chars": 57341,
  "elapsed_time": 738.912219285965,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}