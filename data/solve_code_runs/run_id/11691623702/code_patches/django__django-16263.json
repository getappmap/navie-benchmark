{
  "instance_id": "django__django-16263",
  "edit_test_file": "tests/aggregation/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9735ce1..2fad134 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,9 +550,67 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        \n+        # Before adding the count annotation, analyze and remove unnecessary annotations\n+        if obj.annotations:\n+            required_annotations = obj._get_required_annotations()\n+            unused_annotations = set(obj.annotations) - required_annotations\n+            \n+            # Remove annotations that aren't required\n+            for alias in unused_annotations:\n+                del obj.annotations[alias]\n+                if obj.annotation_select_mask and alias in obj.annotation_select_mask:\n+                    obj.annotation_select_mask.remove(alias)\n+            \n+            # If we removed all annotations, also clear the group by\n+            if not obj.annotations:\n+                obj.group_by = None\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n+    def _get_required_annotations(self):\n+        \"\"\"\n+        Determine which annotations are required for the query by analyzing:\n+        - Annotations used in WHERE/HAVING clauses\n+        - Annotations used in ORDER BY\n+        - Annotations that are dependencies of other required annotations\n+        - Annotations that affect GROUP BY\n+        \"\"\"\n+        required = set()\n+        \n+        def add_annotation_and_deps(alias):\n+            if alias not in required and alias in self.annotations:\n+                required.add(alias)\n+                annotation = self.annotations[alias]\n+                # Add any dependent annotations\n+                if hasattr(annotation, 'get_source_expressions'):\n+                    for expr in annotation.get_source_expressions():\n+                        if isinstance(expr, Ref):\n+                            add_annotation_and_deps(expr.refs)\n+\n+        # Check annotations used in WHERE/HAVING\n+        for node in self.where.children:\n+            for expr in self._gen_cols([node], include_external=True):\n+                if isinstance(expr, Ref) and expr.refs in self.annotations:\n+                    add_annotation_and_deps(expr.refs)\n+\n+        # Check annotations used in ORDER BY\n+        if self.order_by:\n+            for expr in self.order_by:\n+                if isinstance(expr, str) and expr.lstrip('-') in self.annotations:\n+                    add_annotation_and_deps(expr.lstrip('-'))\n+                elif hasattr(expr, 'refs'):\n+                    add_annotation_and_deps(expr.refs)\n+\n+        # Check annotations that affect GROUP BY\n+        if isinstance(self.group_by, tuple):\n+            for expr in self.group_by:\n+                if isinstance(expr, Ref):\n+                    add_annotation_and_deps(expr.refs)\n+\n+        return required\n+\n     def has_filters(self):\n         return self.where\n \n",
  "test_patch": "diff --git a/tests/aggregation/test_strip_unused_annotations_from_count_queries.py b/tests/aggregation/test_strip_unused_annotations_from_count_queries.py\nnew file mode 100644\nindex 0000000..fef4790\n--- /dev/null\n+++ b/tests/aggregation/test_strip_unused_annotations_from_count_queries.py\n@@ -0,0 +1,32 @@\n+import datetime\n+from decimal import Decimal\n+from django.db.models import Count\n+from django.test import TestCase\n+from .models import Author, Book, Publisher, Store\n+\n+class StripUnusedAnnotationsTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+        )\n+        cls.b1.authors.add(cls.a1)\n+\n+    def test_strip_unused_annotations_from_count_queries(self):\n+        # This test reproduces the issue where unused annotations are not stripped\n+        # from count queries, resulting in unnecessary SQL complexity.\n+        with self.assertNumQueries(1) as ctx:\n+            Book.objects.annotate(Count('authors')).count()\n+        sql = ctx.captured_queries[0][\"sql\"]\n+        # Assert that the SQL query includes the Count('authors') annotation\n+        # even though it is not used in any filter operations.\n+        self.assertIn(\"COUNT(\", sql)\n",
  "test_inverted_patch": "diff --git a/tests/aggregation/test_strip_unused_annotations_from_count_queries_inverted.py b/tests/aggregation/test_strip_unused_annotations_from_count_queries_inverted.py\nnew file mode 100644\nindex 0000000..6024df1\n--- /dev/null\n+++ b/tests/aggregation/test_strip_unused_annotations_from_count_queries_inverted.py\n@@ -0,0 +1,33 @@\n+import datetime\n+from decimal import Decimal\n+from django.db.models import Count\n+from django.test import TestCase\n+from .models import Author, Book, Publisher, Store\n+\n+class StripUnusedAnnotationsTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+        )\n+        cls.b1.authors.add(cls.a1)\n+\n+    def test_strip_unused_annotations_from_count_queries(self):\n+        # This test should fail if the issue is observed, i.e., if unused annotations are not stripped\n+        # from count queries, resulting in unnecessary SQL complexity.\n+        with self.assertNumQueries(1) as ctx:\n+            Book.objects.annotate(Count('authors')).count()\n+        sql = ctx.captured_queries[0][\"sql\"]\n+        # The test should fail if the SQL query includes the Count('authors') annotation\n+        # even though it is not used in any filter operations.\n+        if \"COUNT(\" in sql:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1203036,
  "num_received_chars": 20004,
  "elapsed_time": 188.36599159240723,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}