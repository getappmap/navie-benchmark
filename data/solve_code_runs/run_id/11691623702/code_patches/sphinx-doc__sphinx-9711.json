{
  "instance_id": "sphinx-doc__sphinx-9711",
  "edit_test_file": "tests/test_config.py",
  "code_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 7ec6c85..f8f0fd9 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -10,6 +10,7 @@\n \n from typing import TYPE_CHECKING, Any, Dict\n \n+from packaging.version import parse, InvalidVersion\n from sphinx.config import Config\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n@@ -51,11 +52,21 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version':\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n                                           (extname, reqversion, extension.version))\n+        try:\n+            ext_version = parse(extension.version)\n+            req_version = parse(reqversion)\n+            if ext_version < req_version:\n+                raise VersionRequirementError(__('This project needs the extension %s at least in '\n+                                                 'version %s and therefore cannot be built with '\n+                                                 'the loaded version (%s).') %\n+                                              (extname, reqversion, extension.version))\n+        except InvalidVersion:\n+            logger.warning(__('Invalid version specified for %s: %s'), extname, extension.version)\n \n \n def setup(app: \"Sphinx\") -> Dict[str, Any]:\n",
  "test_patch": "diff --git a/tests/test_needs_extensions_version_check.py b/tests/test_needs_extensions_version_check.py\nnew file mode 100644\nindex 0000000..b929648\n--- /dev/null\n+++ b/tests/test_needs_extensions_version_check.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from unittest import mock\n+from sphinx.config import Config\n+from sphinx.errors import VersionRequirementError\n+from sphinx.extension import verify_needs_extensions, Extension\n+\n+class TestNeedsExtensionsVersionCheck(unittest.TestCase):\n+    @mock.patch(\"sphinx.application.Sphinx\")\n+    def test_needs_extensions_version_check(self, mock_sphinx):\n+        # Mock the extensions loaded in the Sphinx application\n+        mock_sphinx.extensions = {\n+            'sphinx_gallery.gen_gallery': Extension(\n+                name='sphinx_gallery.gen_gallery',\n+                module=None,\n+                version='0.10.0'\n+            )\n+        }\n+\n+        # Create a config with needs_extensions specifying a minimum version\n+        config = Config({'needs_extensions': {'sphinx_gallery.gen_gallery': '0.6.0'}})\n+\n+        # Verify that no VersionRequirementError is raised\n+        try:\n+            verify_needs_extensions(mock_sphinx, config)\n+        except VersionRequirementError:\n+            self.fail(\"VersionRequirementError was raised unexpectedly!\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_needs_extensions_version_check_inverted.py b/tests/test_needs_extensions_version_check_inverted.py\nnew file mode 100644\nindex 0000000..2e9c67d\n--- /dev/null\n+++ b/tests/test_needs_extensions_version_check_inverted.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from unittest import mock\n+from sphinx.config import Config\n+from sphinx.errors import VersionRequirementError\n+from sphinx.extension import verify_needs_extensions, Extension\n+\n+class TestNeedsExtensionsVersionCheck(unittest.TestCase):\n+    @mock.patch(\"sphinx.application.Sphinx\")\n+    def test_needs_extensions_version_check(self, mock_sphinx):\n+        # Mock the extensions loaded in the Sphinx application\n+        mock_sphinx.extensions = {\n+            'sphinx_gallery.gen_gallery': Extension(\n+                name='sphinx_gallery.gen_gallery',\n+                module=None,\n+                version='0.10.0'\n+            )\n+        }\n+\n+        # Create a config with needs_extensions specifying a minimum version\n+        config = Config({'needs_extensions': {'sphinx_gallery.gen_gallery': '0.6.0'}})\n+\n+        # Verify that a VersionRequirementError is raised due to string-like version comparison\n+        with self.assertRaises(VersionRequirementError, msg=\"__BUG__HERE__\"):\n+            verify_needs_extensions(mock_sphinx, config)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3274099,
  "num_received_chars": 49726,
  "elapsed_time": 1010.8689489364624,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}