{
  "instance_id": "matplotlib__matplotlib-21568",
  "edit_test_file": "lib/matplotlib/tests/test_text.py",
  "code_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156..1dd818c 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -592,11 +592,25 @@ def drange(dstart, dend, delta):\n \n \n def _wrap_in_tex(text):\n+    # Special handling for date components to minimize spacing\n+    # First handle any numeric components with units (like am/pm)\n+    p = r'(\\d+\\s*[apmAPM]+)'\n+    ret_text = re.sub(p, r'\\\\mbox{\\1}', text)\n+    \n+    # Handle remaining alphabetic components (month names, etc)\n     p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n-\n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n+    ret_text = re.sub(p, r'\\\\mbox{\\1}', ret_text)\n+    \n+    # Handle numeric components\n+    p = r'(\\d+)'\n+    ret_text = re.sub(p, r'\\\\mbox{\\1}', ret_text)\n+\n+    # Handle special date separators with proper spacing\n+    ret_text = ret_text.replace('-', '\\\\mbox{-}')\n+    ret_text = ret_text.replace(':', '\\\\mbox{:}')\n+    \n+    # Wrap the entire expression in mathdefault to maintain font consistency\n+    ret_text = f'$\\\\mathdefault{{{ret_text}}}$'\n     ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n     return ret_text\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_datetime_usetex.py b/lib/matplotlib/tests/test_datetime_usetex.py\nnew file mode 100644\nindex 0000000..4f4723a\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_datetime_usetex.py\n@@ -0,0 +1,29 @@\n+from datetime import datetime\n+import numpy as np\n+import pytest\n+\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import image_comparison\n+\n+needs_usetex = pytest.mark.skipif(\n+    not mpl.checkdep_usetex(True),\n+    reason=\"This test needs a TeX installation\")\n+\n+@needs_usetex\n+@image_comparison(['datetime_usetex_spacing.png'])\n+def test_datetime_usetex_spacing():\n+    \"\"\"Test datetime axis spacing with usetex enabled.\"\"\"\n+    # Set usetex to True\n+    plt.rcParams['text.usetex'] = True\n+    \n+    # Create sample datetime data\n+    dates = np.array([datetime(2020, 1, 1, 0, i) for i in range(11)])\n+    data = np.random.RandomState(1).rand(11)\n+    \n+    # Create the plot\n+    fig, ax = plt.subplots(constrained_layout=True)\n+    ax.plot(dates, data)\n+    \n+    # The test will compare against a baseline image that captures\n+    # the current spacing behavior with usetex enabled\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_datetime_usetex_inverted.py b/lib/matplotlib/tests/test_datetime_usetex_inverted.py\nnew file mode 100644\nindex 0000000..a99dce0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_datetime_usetex_inverted.py\n@@ -0,0 +1,42 @@\n+from datetime import datetime\n+import numpy as np\n+import pytest\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+\n+def test_datetime_usetex_spacing():\n+    \"\"\"Test datetime axis spacing with usetex enabled.\"\"\"\n+    # Set usetex to True\n+    plt.rcParams['text.usetex'] = True\n+    \n+    # Create sample datetime data with specific time range\n+    dates = np.array([datetime(2020, 1, 1, 0, i) for i in range(11)])\n+    np.random.seed(1)\n+    data = np.random.rand(11)\n+    \n+    # Create the plot\n+    fig, ax = plt.subplots(constrained_layout=True)\n+    ax.plot(dates, data)\n+    \n+    # Get the tick positions and labels\n+    tick_positions = ax.get_xticks()\n+    tick_labels = [label.get_text() for label in ax.get_xticklabels()]\n+    \n+    # Calculate the average spacing between ticks\n+    tick_spacing = np.diff(tick_positions).mean()\n+    \n+    # Expected spacing based on v3.3 behavior (this value should be calibrated)\n+    expected_spacing = 100  # Example value, should be adjusted based on v3.3 behavior\n+    \n+    # Calculate the spacing difference percentage\n+    spacing_difference = abs((tick_spacing - expected_spacing) / expected_spacing) * 100\n+    \n+    # If spacing differs by more than 10% from expected, raise error\n+    if spacing_difference > 10:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Clean up\n+    plt.close(fig)\n+\n+if __name__ == '__main__':\n+    test_datetime_usetex_spacing()\n\\ No newline at end of file\n",
  "num_sent_chars": 3480570,
  "num_received_chars": 58972,
  "elapsed_time": 889.1367506980896,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}