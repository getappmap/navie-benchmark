{
  "instance_id": "django__django-15104",
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "code_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 97977d7..bf9c2ac 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ class MigrationAutodetector:\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n",
  "test_patch": "diff --git a/tests/migrations/test_keyerror_fk_hardcoded_field.py b/tests/migrations/test_keyerror_fk_hardcoded_field.py\nnew file mode 100644\nindex 0000000..f15d104\n--- /dev/null\n+++ b/tests/migrations/test_keyerror_fk_hardcoded_field.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class TestKeyErrorFKHardcodedField(unittest.TestCase):\n+    def test_keyerror_with_hardcoded_fk_field(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        with self.assertRaises(KeyError) as context:\n+            MigrationAutodetector(before, after)._detect_changes()\n+        \n+        self.assertEqual(str(context.exception), \"'to'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_keyerror_fk_hardcoded_field_inverted.py b/tests/migrations/test_keyerror_fk_hardcoded_field_inverted.py\nnew file mode 100644\nindex 0000000..b928ee2\n--- /dev/null\n+++ b/tests/migrations/test_keyerror_fk_hardcoded_field_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class TestKeyErrorFKHardcodedField(unittest.TestCase):\n+    def test_keyerror_with_hardcoded_fk_field(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        with self.assertRaises(KeyError) as context:\n+            MigrationAutodetector(before, after)._detect_changes()\n+        \n+        # Alter the assertion to ensure the test fails when the bug is observed\n+        self.assertEqual(str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3347599,
  "num_received_chars": 38105,
  "elapsed_time": 491.21024775505066,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}