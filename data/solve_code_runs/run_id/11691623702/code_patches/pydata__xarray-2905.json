{
  "instance_id": "pydata__xarray-2905",
  "edit_test_file": "xarray/tests/test_variable.py",
  "code_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 45553eb..355ccee 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -217,8 +217,9 @@ def as_compatible_data(data, fastpath=False):\n     if isinstance(data, timedelta):\n         data = np.timedelta64(getattr(data, \"value\", data), \"ns\")\n \n-    # we don't want nested self-described arrays\n-    data = getattr(data, \"values\", data)\n+    # Extract values from pandas/xarray objects but preserve other objects with .values\n+    if hasattr(data, \"_data\") or hasattr(data, \"to_numpy\"):\n+        data = getattr(data, \"values\", data)\n \n     if isinstance(data, np.ma.MaskedArray):\n         mask = np.ma.getmaskarray(data)\n",
  "test_patch": "diff --git a/xarray/tests/test_assignment_coercion.py b/xarray/tests/test_assignment_coercion.py\nnew file mode 100644\nindex 0000000..91a77f7\n--- /dev/null\n+++ b/xarray/tests/test_assignment_coercion.py\n@@ -0,0 +1,21 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestAssignmentCoercion(unittest.TestCase):\n+    def test_variable_setitem_coercion(self):\n+        class HasValues:\n+            values = 5\n+\n+        good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+        # Perform assignments\n+        good_indexed.loc[{'dim_0': 0}] = set()\n+        bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+        # Assert the expected incorrect behavior\n+        self.assertTrue(np.array_equal(bad_indexed.values, np.array([np.array(5)], dtype=object)),\n+                        \"Expected coercion to occur, but it did not.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_assignment_coercion_inverted.py b/xarray/tests/test_assignment_coercion_inverted.py\nnew file mode 100644\nindex 0000000..fd90d3a\n--- /dev/null\n+++ b/xarray/tests/test_assignment_coercion_inverted.py\n@@ -0,0 +1,21 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestAssignmentCoercion(unittest.TestCase):\n+    def test_variable_setitem_coercion(self):\n+        class HasValues:\n+            values = 5\n+\n+        good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+        # Perform assignments\n+        good_indexed.loc[{'dim_0': 0}] = set()\n+        bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+        # Assert the expected incorrect behavior\n+        if np.array_equal(bad_indexed.values, np.array([np.array(5)], dtype=object)):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3739366,
  "num_received_chars": 28571,
  "elapsed_time": 560.1498336791992,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 5,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}