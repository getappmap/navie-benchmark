{
  "instance_id": "matplotlib__matplotlib-20676",
  "edit_test_file": "lib/matplotlib/tests/test_backends_interactive.py",
  "code_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a199e45..aac39dd 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2140,14 +2140,14 @@ class SpanSelector(_SelectorWidget):\n \n         if self.direction == 'horizontal':\n             trans = ax.get_xaxis_transform()\n-            w, h = 0, 1\n+            w, h = ax.get_xlim()[0], 1\n         else:\n             trans = ax.get_yaxis_transform()\n-            w, h = 1, 0\n-        self._rect = Rectangle((0, 0), w, h,\n-                               transform=trans,\n-                               visible=False,\n-                               **self._rectprops)\n+            w, h = 1, ax.get_ylim()[0]\n+        self._rect = Rectangle((w, 0) if self.direction == 'horizontal' else (0, h), \n+                             w, h, transform=trans,\n+                             visible=False,\n+                             **self._rectprops)\n \n         self.ax.add_patch(self._rect)\n         if len(self.artists) > 0:\n@@ -2283,9 +2283,11 @@ class SpanSelector(_SelectorWidget):\n         if self.direction == 'horizontal':\n             self._rect.set_x(vmin)\n             self._rect.set_width(vmax - vmin)\n+            self.ax.set_xlim(self.ax.get_xlim())  # Preserve limits\n         else:\n             self._rect.set_y(vmin)\n             self._rect.set_height(vmax - vmin)\n+            self.ax.set_ylim(self.ax.get_ylim())  # Preserve limits\n \n     def _set_active_handle(self, event):\n         \"\"\"Set active handle based on the location of the mouse event.\"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_spanselector_axes_limits.py b/lib/matplotlib/tests/test_spanselector_axes_limits.py\nnew file mode 100644\nindex 0000000..74c88f4\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spanselector_axes_limits.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_axes_limits_include_zero(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)\n+\n+        # Check if the x-axis limits have been incorrectly expanded to include 0\n+        xlim = ax.get_xlim()\n+        self.assertTrue(xlim[0] <= 0, \"The x-axis limits should include 0 due to the bug.\")\n+\n+        plt.close(fig)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py b/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py\nnew file mode 100644\nindex 0000000..13736e0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_axes_limits_include_zero(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)\n+\n+        # Check if the x-axis limits have been incorrectly expanded to include 0\n+        xlim = ax.get_xlim()\n+        # Alter the assertion to fail when the bug is observed\n+        self.assertFalse(xlim[0] <= 0, \"__BUG__HERE__\")\n+\n+        plt.close(fig)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 729389,
  "num_received_chars": 7858,
  "elapsed_time": 121.61630821228027,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}