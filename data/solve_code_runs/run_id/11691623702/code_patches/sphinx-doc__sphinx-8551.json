{
  "instance_id": "sphinx-doc__sphinx-8551",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 79d7e4f..6ae24e8 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -329,7 +329,17 @@ class PyTypedField(PyXrefMixin, TypedField):\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        # Add module context to the reference node\n+        result = super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        if env:\n+            result['py:module'] = env.ref_context.get('py:module')\n+            result['py:class'] = env.ref_context.get('py:class')\n+\n+            # Make the reference specific to handle module context properly\n+            if not target.startswith(('.', '~')):\n+                result['refspecific'] = True\n+\n+        return result\n \n \n class PyObject(ObjectDescription):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 6165926,
  "num_received_chars": 67893,
  "elapsed_time": 1327.9282486438751,
  "lint_repair_count": 7,
  "test_generation_attempts": 9,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}