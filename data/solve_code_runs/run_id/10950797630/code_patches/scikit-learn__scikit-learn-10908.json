{
  "instance_id": "scikit-learn__scikit-learn-10908",
  "edit_test_file": "sklearn/tests/test_pipeline.py",
  "code_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 9b1ebd6..5fd25b2 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -300,8 +300,12 @@ class VectorizerMixin(object):\n \n     def _check_vocabulary(self):\n         \"\"\"Check if vocabulary is empty or missing (not fit-ed)\"\"\"\n-        msg = \"%(name)s - Vocabulary wasn't fitted.\"\n-        check_is_fitted(self, 'vocabulary_', msg=msg),\n+        if self.vocabulary is not None:\n+            if not hasattr(self, 'vocabulary_'):\n+                self._validate_vocabulary()\n+        else:\n+            msg = \"%(name)s - Vocabulary wasn't fitted.\"\n+            check_is_fitted(self, 'vocabulary_', msg=msg)\n \n         if len(self.vocabulary_) == 0:\n             raise ValueError(\"Vocabulary is empty\")\n@@ -315,6 +319,9 @@ class VectorizerMixin(object):\n                 \"lower boundary larger than the upper boundary.\"\n                 % str(self.ngram_range))\n \n+        if self.vocabulary is not None and not hasattr(self, 'vocabulary_'):\n+            self._validate_vocabulary()\n+\n \n class HashingVectorizer(BaseEstimator, VectorizerMixin, TransformerMixin):\n     \"\"\"Convert a collection of text documents to a matrix of token occurrences\n",
  "test_patch": "diff --git a/sklearn/tests/test_count_vectorizer_feature_names.py b/sklearn/tests/test_count_vectorizer_feature_names.py\nnew file mode 100644\nindex 0000000..445fbde\n--- /dev/null\n+++ b/sklearn/tests/test_count_vectorizer_feature_names.py\n@@ -0,0 +1,35 @@\n+import pytest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+def test_count_vectorizer_get_feature_names_with_vocabulary():\n+    # Define a vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize CountVectorizer with the vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # Check that the vectorizer doesn't have vocabulary_ attribute yet\n+    assert not hasattr(vectorizer, \"vocabulary_\")\n+    \n+    # Attempt to call get_feature_names() and expect NotFittedError\n+    with pytest.raises(NotFittedError, match=\"CountVectorizer - Vocabulary wasn't fitted.\"):\n+        vectorizer.get_feature_names()\n+    \n+    # Define a sample corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    \n+    # Transform the corpus\n+    vectorizer.transform(corpus)\n+    \n+    # Check that the vectorizer now has vocabulary_ attribute\n+    assert hasattr(vectorizer, \"vocabulary_\")\n+    \n+    # Now get_feature_names() should work without raising an exception\n+    feature_names = vectorizer.get_feature_names()\n+    assert feature_names == vocabulary\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_count_vectorizer_feature_names_inverted.py b/sklearn/tests/test_count_vectorizer_feature_names_inverted.py\nnew file mode 100644\nindex 0000000..282cd7b\n--- /dev/null\n+++ b/sklearn/tests/test_count_vectorizer_feature_names_inverted.py\n@@ -0,0 +1,40 @@\n+import pytest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+def test_count_vectorizer_get_feature_names_with_vocabulary():\n+    # Define a vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize CountVectorizer with the vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # Check that the vectorizer doesn't have vocabulary_ attribute yet\n+    assert not hasattr(vectorizer, \"vocabulary_\")\n+    \n+    # Attempt to call get_feature_names() and expect it to work without raising an exception\n+    try:\n+        feature_names = vectorizer.get_feature_names()\n+    except NotFittedError:\n+        pytest.fail(\"__BUG__HERE__\")\n+    \n+    # If no exception is raised, the test should fail\n+    assert feature_names == vocabulary, \"__BUG__HERE__\"\n+    \n+    # Define a sample corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    \n+    # Transform the corpus\n+    vectorizer.transform(corpus)\n+    \n+    # Check that the vectorizer now has vocabulary_ attribute\n+    assert hasattr(vectorizer, \"vocabulary_\")\n+    \n+    # Now get_feature_names() should work without raising an exception\n+    feature_names = vectorizer.get_feature_names()\n+    assert feature_names == vocabulary\n",
  "num_sent_chars": 567500,
  "num_received_chars": 31053,
  "elapsed_time": 213.86344528198242,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}