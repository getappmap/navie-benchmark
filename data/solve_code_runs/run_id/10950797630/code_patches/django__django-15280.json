{
  "instance_id": "django__django-15280",
  "edit_test_file": "tests/queries/tests.py",
  "code_patch": "diff --git a/django/contrib/auth/models.py b/django/contrib/auth/models.py\nindex a9faef3..f60c4e9 100644\n--- a/django/contrib/auth/models.py\n+++ b/django/contrib/auth/models.py\n@@ -388,6 +388,52 @@ class AbstractUser(AbstractBaseUser, PermissionsMixin):\n         \"\"\"Send an email to this user.\"\"\"\n         send_mail(subject, message, from_email, [self.email], **kwargs)\n \n+    def _get_deferred_fields(self):\n+        \"\"\"\n+        Return a set of deferred field names for this instance.\n+        \"\"\"\n+        deferred_fields = set()\n+        if hasattr(self, '_deferred') and self._deferred:\n+            deferred_fields = set(self._deferred)\n+        return deferred_fields\n+\n+    def _track_deferred_fields(self):\n+        \"\"\"\n+        Track deferred fields for prefetched related objects.\n+        \"\"\"\n+        if not hasattr(self, '_prefetched_objects_cache'):\n+            return\n+\n+        for cache_name, related_objects in self._prefetched_objects_cache.items():\n+            if isinstance(related_objects, list):\n+                for obj in related_objects:\n+                    obj._deferred_fields = obj._get_deferred_fields()\n+            elif isinstance(related_objects, models.Model):\n+                related_objects._deferred_fields = related_objects._get_deferred_fields()\n+\n+    def __getattribute__(self, name):\n+        \"\"\"\n+        Override to handle deferred fields correctly for prefetched related objects.\n+        \"\"\"\n+        try:\n+            return super().__getattribute__(name)\n+        except AttributeError:\n+            if name == '_deferred_fields':\n+                return set()\n+            \n+            self._track_deferred_fields()\n+            \n+            if hasattr(self, '_deferred_fields') and name in self._deferred_fields:\n+                raise\n+\n+            # Check if the attribute is a related object that has been prefetched\n+            if name in getattr(self, '_prefetched_objects_cache', {}):\n+                related_obj = self._prefetched_objects_cache[name]\n+                if isinstance(related_obj, models.Model):\n+                    return related_obj\n+\n+            raise\n+\n \n class User(AbstractUser):\n     \"\"\"\n",
  "test_patch": "diff --git a/tests/queries/test_prefetch_deferred_fields.py b/tests/queries/test_prefetch_deferred_fields.py\nnew file mode 100644\nindex 0000000..29f5d41\n--- /dev/null\n+++ b/tests/queries/test_prefetch_deferred_fields.py\n@@ -0,0 +1,41 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Prefetch\n+\n+class User(models.Model):\n+    email = models.EmailField()\n+    kind = models.CharField(\n+        max_length=10, choices=[(\"ADMIN\", \"Admin\"), (\"REGULAR\", \"Regular\")]\n+    )\n+\n+class Profile(models.Model):\n+    full_name = models.CharField(max_length=255)\n+    user = models.OneToOneField(User, on_delete=models.CASCADE)\n+\n+class PrefetchDeferredFieldsTests(TestCase):\n+    def test_only_related_queryset(self):\n+        user = User.objects.create(\n+            email=\"test@example.com\",\n+            kind=\"ADMIN\",\n+        )\n+        Profile.objects.create(user=user, full_name=\"Test Tester\")\n+        queryset = User.objects.only(\"email\").prefetch_related(\n+            Prefetch(\n+                \"profile\",\n+                queryset=Profile.objects.prefetch_related(\n+                    Prefetch(\"user\", queryset=User.objects.only(\"kind\"))\n+                ),\n+            )\n+        )\n+        with self.assertNumQueries(3):\n+            user = queryset.first()\n+        \n+        # This assertion will pass if the issue is present\n+        # (i.e., an unexpected query is executed)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(user.profile.user.kind, \"ADMIN\")\n+        \n+        # Additional assertion to verify the unexpected query\n+        with self.assertNumQueries(1):\n+            deferred_fields = user.profile.user.get_deferred_fields()\n+            self.assertNotIn('kind', deferred_fields)\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_prefetch_deferred_fields_inverted.py b/tests/queries/test_prefetch_deferred_fields_inverted.py\nnew file mode 100644\nindex 0000000..06f62ef\n--- /dev/null\n+++ b/tests/queries/test_prefetch_deferred_fields_inverted.py\n@@ -0,0 +1,47 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Prefetch\n+\n+class User(models.Model):\n+    email = models.EmailField()\n+    kind = models.CharField(\n+        max_length=10, choices=[(\"ADMIN\", \"Admin\"), (\"REGULAR\", \"Regular\")]\n+    )\n+\n+class Profile(models.Model):\n+    full_name = models.CharField(max_length=255)\n+    user = models.OneToOneField(User, on_delete=models.CASCADE)\n+\n+class PrefetchDeferredFieldsTests(TestCase):\n+    def test_only_related_queryset(self):\n+        user = User.objects.create(\n+            email=\"test@example.com\",\n+            kind=\"ADMIN\",\n+        )\n+        Profile.objects.create(user=user, full_name=\"Test Tester\")\n+        queryset = User.objects.only(\"email\").prefetch_related(\n+            Prefetch(\n+                \"profile\",\n+                queryset=Profile.objects.prefetch_related(\n+                    Prefetch(\"user\", queryset=User.objects.only(\"kind\"))\n+                ),\n+            )\n+        )\n+        with self.assertNumQueries(3):\n+            user = queryset.first()\n+        \n+        # This assertion will now fail if the issue is present\n+        # (i.e., an unexpected query is executed)\n+        try:\n+            with self.assertNumQueries(0):\n+                self.assertEqual(user.profile.user.kind, \"ADMIN\")\n+        except AssertionError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Additional assertion to verify the unexpected query\n+        try:\n+            with self.assertNumQueries(0):\n+                deferred_fields = user.profile.user.get_deferred_fields()\n+                self.assertNotIn('kind', deferred_fields)\n+        except AssertionError:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2457135,
  "num_received_chars": 117039,
  "elapsed_time": 682.2423424720764,
  "lint_repair_count": 9,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}