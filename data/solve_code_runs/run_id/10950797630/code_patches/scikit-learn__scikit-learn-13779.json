{
  "instance_id": "scikit-learn__scikit-learn-13779",
  "edit_test_file": "sklearn/ensemble/tests/test_voting.py",
  "code_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa718..bf3cbf2 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -14,6 +14,7 @@ This module contains:\n # License: BSD 3 clause\n \n import numpy as np\n+import warnings\n from abc import abstractmethod\n \n from ..base import ClassifierMixin\n@@ -29,6 +30,8 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n+    if estimator is None:\n+        return None\n     if sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n@@ -41,6 +44,8 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n     Warning: This class should not be used directly. Use derived classes\n     instead.\n+\n+    Note: None estimators are allowed and will be ignored during fitting.\n     \"\"\"\n     _required_parameters = ['estimators']\n \n@@ -78,7 +83,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n@@ -90,14 +95,23 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n             raise ValueError('All estimators are None. At least one is '\n                              'required!')\n \n+        valid_estimators = [(name, clf) for name, clf in self.estimators if clf is not None]\n+        if not valid_estimators:\n+            raise ValueError('All estimators are None. At least one is required!')\n+\n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n-                delayed(_parallel_fit_estimator)(clone(clf), X, y,\n-                                                 sample_weight=sample_weight)\n-                for clf in clfs if clf is not None)\n+            delayed(_parallel_fit_estimator)(clone(clf), X, y, sample_weight=sample_weight)\n+            for _, clf in valid_estimators\n+        )\n \n         self.named_estimators_ = Bunch()\n-        for k, e in zip(self.estimators, self.estimators_):\n-            self.named_estimators_[k[0]] = e\n+        est_index = 0\n+        for name, _ in self.estimators:\n+            if _ is not None:\n+                self.named_estimators_[name] = self.estimators_[est_index]\n+                est_index += 1\n+            else:\n+                self.named_estimators_[name] = None\n         return self\n \n     def set_params(self, **params):\n",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_voting_classifier_none_estimator.py b/sklearn/ensemble/tests/test_voting_classifier_none_estimator.py\nnew file mode 100644\nindex 0000000..b9c4e9f\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_voting_classifier_none_estimator.py\n@@ -0,0 +1,28 @@\n+import numpy as np\n+import pytest\n+from sklearn.datasets import load_iris\n+from sklearn.ensemble import VotingClassifier\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier\n+\n+def test_voting_classifier_none_estimator_with_sample_weight():\n+    \"\"\"\n+    Test that VotingClassifier raises an AttributeError when an estimator\n+    is set to None and sample_weight is provided during fit.\n+    \"\"\"\n+    X, y = load_iris(return_X_y=True)\n+    \n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier())]\n+    )\n+    \n+    # Initial fit should work\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    \n+    # Set 'lr' estimator to None\n+    voter.set_params(lr=None)\n+    \n+    # Attempting to fit again with sample_weight should raise an AttributeError\n+    with pytest.raises(AttributeError, match=\"'NoneType' object has no attribute 'fit'\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/ensemble/tests/test_voting_classifier_none_estimator_inverted.py b/sklearn/ensemble/tests/test_voting_classifier_none_estimator_inverted.py\nnew file mode 100644\nindex 0000000..12aaa28\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_voting_classifier_none_estimator_inverted.py\n@@ -0,0 +1,36 @@\n+import numpy as np\n+import pytest\n+from sklearn.datasets import load_iris\n+from sklearn.ensemble import VotingClassifier\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier\n+\n+def test_voting_classifier_none_estimator_with_sample_weight():\n+    \"\"\"\n+    Test that VotingClassifier handles None estimator correctly when\n+    sample_weight is provided during fit.\n+    \"\"\"\n+    X, y = load_iris(return_X_y=True)\n+    \n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier())]\n+    )\n+    \n+    # Initial fit should work\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    \n+    # Set 'lr' estimator to None\n+    voter.set_params(lr=None)\n+    \n+    # Attempting to fit again with sample_weight should not raise an AttributeError\n+    try:\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    except AttributeError as e:\n+        if str(e) == \"'NoneType' object has no attribute 'fit'\":\n+            pytest.fail(\"__BUG__HERE__\")\n+        else:\n+            raise e\n+    \n+    # If we reach this point without raising an exception, the test should fail\n+    pytest.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2155869,
  "num_received_chars": 164398,
  "elapsed_time": 996.6964609622955,
  "lint_repair_count": 11,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}