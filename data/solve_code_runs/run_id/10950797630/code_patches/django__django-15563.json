{
  "instance_id": "django__django-15563",
  "edit_test_file": "tests/update/tests.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 556e255..3521417 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1034,6 +1034,9 @@ class Model(metaclass=ModelBase):\n         Try to update the model. Return True if the model was updated (if an\n         update query was done and a matching row was found in the DB).\n         \"\"\"\n+        from django.db.models import F, Q\n+        from django.db.models.constants import LOOKUP_SEP\n+\n         filtered = base_qs.filter(pk=pk_val)\n         if not values:\n             # We can end up here when saving a model in inheritance chain where\n@@ -1042,6 +1045,31 @@ class Model(metaclass=ModelBase):\n             # is a model with just PK - in that case check that the PK still\n             # exists.\n             return update_fields is not None or filtered.exists()\n+\n+        # Handle multi-table inheritance\n+        if self._meta.parents:\n+            # Get all parent links\n+            parent_links = [\n+                f for f in self._meta.fields if f.is_relation and f.parent_link\n+            ]\n+            \n+            # Create a Q object to join all parent tables\n+            parent_filter = Q()\n+            for link in parent_links:\n+                parent_filter |= Q(**{f\"{link.name}{LOOKUP_SEP}pk\": F(\"pk\")})\n+\n+            # Apply the parent filter to ensure we only update the correct instances\n+            filtered = filtered.filter(parent_filter)\n+\n+            # Update the values dictionary to include parent table fields\n+            for link in parent_links:\n+                parent_fields = [\n+                    f.name for f in link.remote_field.model._meta.fields\n+                    if f.name in update_fields\n+                ]\n+                for field in parent_fields:\n+                    values[f\"{link.name}{LOOKUP_SEP}{field}\"] = values.pop(field)\n+\n         if self._meta.select_on_save and not forced_update:\n             return (\n                 filtered.exists()\n",
  "test_patch": "diff --git a/tests/update/test_multiple_inheritance_queryset_update.py b/tests/update/test_multiple_inheritance_queryset_update.py\nnew file mode 100644\nindex 0000000..7a09da1\n--- /dev/null\n+++ b/tests/update/test_multiple_inheritance_queryset_update.py\n@@ -0,0 +1,39 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+\n+class Child(Base, OtherBase):\n+    pass\n+\n+\n+class MultipleInheritanceQuerysetUpdateTest(TestCase):\n+    def setUp(self):\n+        OtherBase.objects.create(field_otherbase=100)\n+        OtherBase.objects.create(field_otherbase=101)\n+        Child.objects.create(field_base=0, field_otherbase=0)\n+        Child.objects.create(field_base=1, field_otherbase=1)\n+\n+    def test_update_child_queryset(self):\n+        # Attempt to update Child objects\n+        updated_count = Child.objects.update(field_otherbase=55)\n+\n+        # Assert that the update reports success\n+        self.assertEqual(updated_count, 2)\n+\n+        # Check that Child objects were not actually updated\n+        child_values = list(Child.objects.values('field_otherbase'))\n+        self.assertEqual(child_values, [{'field_otherbase': 0}, {'field_otherbase': 1}])\n+\n+        # Check that OtherBase objects were incorrectly updated\n+        otherbase_values = list(OtherBase.objects.filter(otherbase_id__in=[1, 2]).values('field_otherbase'))\n+        self.assertEqual(otherbase_values, [{'field_otherbase': 55}, {'field_otherbase': 55}])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/update/test_multiple_inheritance_queryset_update_inverted.py b/tests/update/test_multiple_inheritance_queryset_update_inverted.py\nnew file mode 100644\nindex 0000000..ba808d5\n--- /dev/null\n+++ b/tests/update/test_multiple_inheritance_queryset_update_inverted.py\n@@ -0,0 +1,43 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+\n+class Child(Base, OtherBase):\n+    pass\n+\n+\n+class MultipleInheritanceQuerysetUpdateTest(TestCase):\n+    def setUp(self):\n+        OtherBase.objects.create(field_otherbase=100)\n+        OtherBase.objects.create(field_otherbase=101)\n+        Child.objects.create(field_base=0, field_otherbase=0)\n+        Child.objects.create(field_base=1, field_otherbase=1)\n+\n+    def test_update_child_queryset(self):\n+        # Attempt to update Child objects\n+        updated_count = Child.objects.update(field_otherbase=55)\n+\n+        # Assert that the update reports success\n+        self.assertEqual(updated_count, 2)\n+\n+        # Check that Child objects were actually updated\n+        child_values = list(Child.objects.values('field_otherbase'))\n+        expected_child_values = [{'field_otherbase': 55}, {'field_otherbase': 55}]\n+        if child_values != expected_child_values:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Check that OtherBase objects were not incorrectly updated\n+        otherbase_values = list(OtherBase.objects.filter(otherbase_id__in=[1, 2]).values('field_otherbase'))\n+        expected_otherbase_values = [{'field_otherbase': 100}, {'field_otherbase': 101}]\n+        if otherbase_values != expected_otherbase_values:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2208533,
  "num_received_chars": 139996,
  "elapsed_time": 786.3316979408264,
  "lint_repair_count": 5,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}