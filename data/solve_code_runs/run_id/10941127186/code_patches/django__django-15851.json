{
  "instance_id": "django__django-15851",
  "edit_test_file": "tests/dbshell/test_postgresql.py",
  "code_patch": "diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex 30d2765..c511624 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -27,7 +27,11 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         connection = connections[options[\"database\"]]\n         try:\n-            connection.client.runshell(options[\"parameters\"])\n+            # Reorder parameters to ensure they are before the database name for PostgreSQL\n+            parameters = options[\"parameters\"]\n+            if connection.vendor == 'postgresql':\n+                parameters = parameters + [connection.settings_dict['NAME']]\n+            connection.client.runshell(parameters)\n         except FileNotFoundError:\n             # Note that we're assuming the FileNotFoundError relates to the\n             # command missing. It could be raised for some other reason, in\n",
  "test_patch": "diff --git a/tests/dbshell/test_dbshell_parameters.py b/tests/dbshell/test_dbshell_parameters.py\nnew file mode 100644\nindex 0000000..f0379e1\n--- /dev/null\n+++ b/tests/dbshell/test_dbshell_parameters.py\n@@ -0,0 +1,19 @@\n+import subprocess\n+import sys\n+from unittest import mock\n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+from django.test import SimpleTestCase\n+from django.db import connection\n+\n+class DbshellParametersTestCase(SimpleTestCase):\n+    def test_dbshell_parameters_order(self):\n+        # Mock the subprocess.run to capture the command arguments\n+        with mock.patch(\"subprocess.run\") as mock_run:\n+            mock_run.return_value = subprocess.CompletedProcess(args=[], returncode=0)\n+            call_command(\"dbshell\", \"--\", \"-c\", \"select * from some_table;\")\n+            \n+            # Check if the database name is not at the end of the command\n+            called_args = mock_run.call_args[0][0]\n+            dbname_index = called_args.index(connection.settings_dict['NAME'])\n+            self.assertLess(dbname_index, called_args.index(\"-c\"), \"Database name should be at the end of the arguments list.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/dbshell/test_dbshell_parameters_inverted.py b/tests/dbshell/test_dbshell_parameters_inverted.py\nnew file mode 100644\nindex 0000000..2f8c0fa\n--- /dev/null\n+++ b/tests/dbshell/test_dbshell_parameters_inverted.py\n@@ -0,0 +1,22 @@\n+import subprocess\n+import sys\n+from unittest import mock\n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+from django.test import SimpleTestCase\n+from django.db import connection\n+\n+class DbshellParametersTestCase(SimpleTestCase):\n+    def test_dbshell_parameters_order(self):\n+        # Mock the subprocess.run to capture the command arguments\n+        with mock.patch(\"subprocess.run\") as mock_run:\n+            mock_run.return_value = subprocess.CompletedProcess(args=[], returncode=0)\n+            call_command(\"dbshell\", \"--\", \"-c\", \"select * from some_table;\")\n+            \n+            # Check if the database name is at the end of the command\n+            called_args = mock_run.call_args[0][0]\n+            dbname_index = called_args.index(connection.settings_dict['NAME'])\n+            try:\n+                self.assertGreater(dbname_index, called_args.index(\"-c\"), \"Database name should be at the end of the arguments list.\")\n+            except AssertionError:\n+                raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1680419,
  "num_received_chars": 62329,
  "elapsed_time": 1380.1979351043701,
  "lint_repair_count": 10,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}