{
  "instance_id": "django__django-15375",
  "edit_test_file": "tests/aggregation/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e20c460..ec3f7b6 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -18,7 +18,7 @@ from django.db.models import AutoField, DateField, DateTimeField, sql\n from django.db.models.constants import LOOKUP_SEP, OnConflict\n from django.db.models.deletion import Collector\n from django.db.models.expressions import Case, F, Ref, Value, When\n-from django.db.models.functions import Cast, Trunc\n+from django.db.models.functions import Cast, Trunc, Coalesce\n from django.db.models.query_utils import FilteredRelation, Q\n from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n from django.db.models.utils import create_namedtuple_class, resolve_callables\n@@ -418,6 +418,9 @@ class QuerySet:\n \n         query = self.query.chain()\n         for (alias, aggregate_expr) in kwargs.items():\n+            if hasattr(aggregate_expr, 'default'):\n+                # Use Coalesce to handle default values in aggregation\n+                aggregate_expr = Coalesce(aggregate_expr, aggregate_expr.default)\n             query.add_annotation(aggregate_expr, alias, is_summary=True)\n             annotation = query.annotations[alias]\n             if not annotation.contains_aggregate:\n",
  "test_patch": "diff --git a/tests/aggregation/test_aggregate_annotate_default_crash.py b/tests/aggregation/test_aggregate_annotate_default_crash.py\nnew file mode 100644\nindex 0000000..f4a4282\n--- /dev/null\n+++ b/tests/aggregation/test_aggregate_annotate_default_crash.py\n@@ -0,0 +1,25 @@\n+import datetime\n+from decimal import Decimal\n+\n+from django.db.models import Sum, F\n+from django.test import TestCase\n+from django.db.utils import OperationalError\n+\n+from .models import Book, Author, Publisher, Store\n+\n+\n+class AggregateAnnotateDefaultCrashTestCase(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name='Adrian Holovaty', age=34)\n+        cls.p1 = Publisher.objects.create(name='Apress', num_awards=3)\n+        cls.b1 = Book.objects.create(\n+            isbn='159059725', name='The Definitive Guide to Django: Web Development Done Right',\n+            pages=447, rating=4.5, price=Decimal('30.00'), contact=cls.a1, publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6)\n+        )\n+\n+    def test_aggregate_annotate_default_crash(self):\n+        with self.assertRaises(OperationalError):\n+            Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/aggregation/test_aggregate_annotate_default_crash_inverted.py b/tests/aggregation/test_aggregate_annotate_default_crash_inverted.py\nnew file mode 100644\nindex 0000000..cdd8dbc\n--- /dev/null\n+++ b/tests/aggregation/test_aggregate_annotate_default_crash_inverted.py\n@@ -0,0 +1,26 @@\n+import datetime\n+from decimal import Decimal\n+\n+from django.db.models import Sum, F\n+from django.test import TestCase\n+from django.db.utils import OperationalError\n+\n+from .models import Book, Author, Publisher\n+\n+class AggregateAnnotateDefaultCrashTestCase(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name='Adrian Holovaty', age=34)\n+        cls.p1 = Publisher.objects.create(name='Apress', num_awards=3)\n+        cls.b1 = Book.objects.create(\n+            isbn='159059725', name='The Definitive Guide to Django: Web Development Done Right',\n+            pages=447, rating=4.5, price=Decimal('30.00'), contact=cls.a1, publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6)\n+        )\n+\n+    def test_aggregate_annotate_default_crash(self):\n+        try:\n+            Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        except OperationalError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2490578,
  "num_received_chars": 146282,
  "elapsed_time": 628.14075756073,
  "lint_repair_count": 9,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}