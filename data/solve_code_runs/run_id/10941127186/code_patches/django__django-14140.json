{
  "instance_id": "django__django-14140",
  "edit_test_file": "tests/queries/test_q.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c..05a70fd 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -414,27 +414,35 @@ class Field(RegisterLookupMixin):\n         return sql, params\n \n     def deconstruct(self):\n-        \"\"\"\n-        Return enough information to recreate the field as a 4-tuple:\n-\n-         * The name of the field on the model, if contribute_to_class() has\n-           been run.\n-         * The import path of the field, including the class:e.g.\n-           django.db.models.IntegerField This should be the most portable\n-           version, so less specific may be better.\n-         * A list of positional arguments.\n-         * A dict of keyword arguments.\n-\n-        Note that the positional or keyword arguments must contain values of\n-        the following types (including inner values of collection types):\n-\n-         * None, bool, str, int, float, complex, set, frozenset, list, tuple,\n-           dict\n-         * UUID\n-         * datetime.datetime (naive), datetime.date\n-         * top-level classes, top-level functions - will be referenced by their\n-           full import path\n-         * Storage instances - these have their own deconstruct() method\n+            \"\"\"\n+            Return enough information to recreate the field as a 4-tuple:\n+    \n+             * The name of the field on the model, if contribute_to_class() has\n+               been run.\n+             * The import path of the field, including the class:e.g.\n+               django.db.models.IntegerField This should be the most portable\n+               version, so less specific may be better.\n+             * A list of positional arguments.\n+             * A dict of keyword arguments.\n+    \n+            Note that the positional or keyword arguments must contain values of\n+            the following types (including inner values of collection types):\n+    \n+             * None, bool, str, int, float, complex, set, frozenset, list, tuple,\n+               dict\n+             * UUID\n+             * datetime.datetime (naive), datetime.date\n+             * top-level classes, top-level functions - will be referenced by their\n+               full import path\n+             * Storage instances - these have their own deconstruct() method\n+            \"\"\"\n+            if len(self.children) == 1:\n+                child = self.children[0]\n+                if isinstance(child, tuple) and len(child) == 2:\n+                    return self._deconstruct_single_child_as_kwargs(child)\n+                else:\n+                    return self._deconstruct_single_child_as_args(child)\n+            return self._deconstruct_multiple_children()\n \n         This is because the values here must be serialized into a text format\n         (possibly new Python code, possibly JSON) and these are the only types\n",
  "test_patch": "diff --git a/tests/queries/test_q_deconstruct.py b/tests/queries/test_q_deconstruct.py\nnew file mode 100644\nindex 0000000..f7904d6\n--- /dev/null\n+++ b/tests/queries/test_q_deconstruct.py\n@@ -0,0 +1,9 @@\n+from django.db.models import Q, Exists\n+from django.test import SimpleTestCase\n+from django.contrib.auth import get_user_model\n+\n+class QDeconstructTests(SimpleTestCase):\n+    def test_deconstruct_with_non_subscriptable_child(self):\n+        with self.assertRaises(TypeError) as cm:\n+            Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()\n+        self.assertIn(\"'Exists' object is not subscriptable\", str(cm.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_q_deconstruct_inverted.py b/tests/queries/test_q_deconstruct_inverted.py\nnew file mode 100644\nindex 0000000..5f482ee\n--- /dev/null\n+++ b/tests/queries/test_q_deconstruct_inverted.py\n@@ -0,0 +1,10 @@\n+from django.db.models import Q, Exists\n+from django.test import SimpleTestCase\n+from django.contrib.auth import get_user_model\n+\n+class QDeconstructTests(SimpleTestCase):\n+    def test_deconstruct_with_non_subscriptable_child(self):\n+        try:\n+            Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()\n+        except TypeError as e:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1582835,
  "num_received_chars": 46536,
  "elapsed_time": 323.08679461479187,
  "lint_repair_count": 10,
  "test_generation_attempts": 2,
  "code_generation_attempts": 6,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}