{
  "instance_id": "django__django-13809",
  "edit_test_file": "tests/admin_scripts/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088..deada55 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -51,6 +51,10 @@ class Command(BaseCommand):\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', dest='skip_checks',\n+            help='Tells Django to skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n@@ -68,6 +72,11 @@ class Command(BaseCommand):\n         if not settings.DEBUG and not settings.ALLOWED_HOSTS:\n             raise CommandError('You must set settings.ALLOWED_HOSTS if DEBUG is False.')\n \n+        if not options['skip_checks']:\n+            self.stdout.write(\"Performing system checks...\\n\\n\")\n+            self.check(display_num_errors=True)\n+            self.check_migrations()\n+\n         self.use_ipv6 = options['use_ipv6']\n         if self.use_ipv6 and not socket.has_ipv6:\n             raise CommandError('Your Python does not support IPv6.')\n",
  "test_patch": "diff --git a/tests/admin_scripts/test_skip_checks_option.py b/tests/admin_scripts/test_skip_checks_option.py\nnew file mode 100644\nindex 0000000..6a3dc1c\n--- /dev/null\n+++ b/tests/admin_scripts/test_skip_checks_option.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from io import StringIO\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n+class RunserverSkipChecksOptionTest(unittest.TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.cmd = RunserverCommand(stdout=self.output)\n+\n+    def test_runserver_with_skip_checks_option(self):\n+        with self.assertRaises(TypeError) as cm:\n+            call_command(self.cmd, skip_checks=True)\n+        self.assertIn(\"Unknown option(s) for runserver command: skip_checks.\", str(cm.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/admin_scripts/test_skip_checks_option_inverted.py b/tests/admin_scripts/test_skip_checks_option_inverted.py\nnew file mode 100644\nindex 0000000..cd516b5\n--- /dev/null\n+++ b/tests/admin_scripts/test_skip_checks_option_inverted.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from io import StringIO\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n+class RunserverSkipChecksOptionTest(unittest.TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.cmd = RunserverCommand(stdout=self.output)\n+\n+    def test_runserver_with_skip_checks_option(self):\n+        with self.assertRaises(Exception) as cm:\n+            call_command(self.cmd, skip_checks=True)\n+        self.assertIn(\"__BUG__HERE__\", str(cm.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1223603,
  "num_received_chars": 51569,
  "elapsed_time": 1984.3868861198425,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}