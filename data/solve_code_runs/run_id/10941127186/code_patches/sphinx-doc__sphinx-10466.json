{
  "instance_id": "sphinx-doc__sphinx-10466",
  "edit_test_file": "tests/test_util_docutils.py",
  "code_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex e8bc547..14c8575 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -32,9 +32,13 @@ class Message:\n     \"\"\"An entry of translatable message.\"\"\"\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        self.locations = self.unique_locations(locations)\n         self.uuids = uuids\n \n+    @staticmethod\n+    def unique_locations(locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n+        return list(set(locations))\n+\n \n class Catalog:\n     \"\"\"Catalog of translatable messages.\"\"\"\n",
  "test_patch": "diff --git a/tests/test_message_location_deduplication.py b/tests/test_message_location_deduplication.py\nnew file mode 100644\nindex 0000000..00b62e0\n--- /dev/null\n+++ b/tests/test_message_location_deduplication.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+class TestMessageLocationDeduplication(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        catalog = Catalog()\n+        msg = \"Type\"\n+        origin1 = MsgOrigin(\"../../manual/modeling/hair.rst\", 0)\n+        origin2 = MsgOrigin(\"../../manual/modeling/hair.rst\", 0)\n+        origin3 = MsgOrigin(\"../../manual/modeling/hair.rst\", 0)\n+\n+        # Add the same message with the same origin multiple times\n+        catalog.add(msg, origin1)\n+        catalog.add(msg, origin2)\n+        catalog.add(msg, origin3)\n+\n+        # Collect the locations from the catalog\n+        locations = [message.locations for message in catalog if message.text == msg][0]\n+\n+        # Assert that the locations are duplicated\n+        self.assertEqual(locations.count((origin1.source, origin1.line)), 3)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_message_location_deduplication_inverted.py b/tests/test_message_location_deduplication_inverted.py\nnew file mode 100644\nindex 0000000..5f7eb97\n--- /dev/null\n+++ b/tests/test_message_location_deduplication_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+class TestMessageLocationDeduplication(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        catalog = Catalog()\n+        msg = \"Type\"\n+        origin1 = MsgOrigin(\"../../manual/modeling/hair.rst\", 0)\n+        origin2 = MsgOrigin(\"../../manual/modeling/hair.rst\", 0)\n+        origin3 = MsgOrigin(\"../../manual/modeling/hair.rst\", 0)\n+\n+        # Add the same message with the same origin multiple times\n+        catalog.add(msg, origin1)\n+        catalog.add(msg, origin2)\n+        catalog.add(msg, origin3)\n+\n+        # Collect the locations from the catalog\n+        locations = [message.locations for message in catalog if message.text == msg][0]\n+\n+        # Assert that the locations are not duplicated\n+        if locations.count((origin1.source, origin1.line)) != 1:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 833060,
  "num_received_chars": 20489,
  "elapsed_time": 162.02846956253052,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}