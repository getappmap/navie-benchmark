{
  "instance_id": "django__django-13417",
  "edit_test_file": "tests/migrations/test_multidb.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd831..a48780d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1224,10 +1224,12 @@ class QuerySet:\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        if self.query.group_by or self.query.annotations:\n+            # Check if the query has an explicit ORDER BY clause\n+            return bool(self.query.order_by)\n+        if self.query.default_ordering and self.query.get_meta().ordering:\n             return True\n-        else:\n-            return False\n+        return False\n \n     @property\n     def db(self):\n",
  "test_patch": "diff --git a/tests/migrations/test_queryset_ordered_property.py b/tests/migrations/test_queryset_ordered_property.py\nnew file mode 100644\nindex 0000000..a7703ab\n--- /dev/null\n+++ b/tests/migrations/test_queryset_ordered_property.py\n@@ -0,0 +1,23 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+class Foo(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class QuerySetOrderedPropertyTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Foo.objects.create(name='A')\n+        Foo.objects.create(name='B')\n+\n+    def test_queryset_ordered_property_with_group_by(self):\n+        # Create a queryset with annotation\n+        qs = Foo.objects.annotate(pk_count=Count('pk')).all()\n+        \n+        # Check if the ordered property is incorrectly set to True\n+        self.assertTrue(qs.ordered, \"The queryset should not be ordered, but 'ordered' property is True.\")\n+        self.assertTrue(qs.query.default_ordering, \"The queryset should not have default ordering, but 'default_ordering' is True.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_queryset_ordered_property_inverted.py b/tests/migrations/test_queryset_ordered_property_inverted.py\nnew file mode 100644\nindex 0000000..6be0765\n--- /dev/null\n+++ b/tests/migrations/test_queryset_ordered_property_inverted.py\n@@ -0,0 +1,25 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+class Foo(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class QuerySetOrderedPropertyTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Foo.objects.create(name='A')\n+        Foo.objects.create(name='B')\n+\n+    def test_queryset_ordered_property_with_group_by(self):\n+        # Create a queryset with annotation\n+        qs = Foo.objects.annotate(pk_count=Count('pk')).all()\n+        \n+        # Check if the ordered property is incorrectly set to True\n+        if qs.ordered:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        if qs.query.default_ordering:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1726038,
  "num_received_chars": 39646,
  "elapsed_time": 365.572256565094,
  "lint_repair_count": 2,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}