{
  "instance_id": "django__django-16667",
  "edit_test_file": "tests/admin_widgets/tests.py",
  "code_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e..19c844d 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1153,15 +1153,24 @@ class SelectDateWidget(Widget):\n         if y == m == d == \"\":\n             return None\n         if y is not None and m is not None and d is not None:\n-            input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n-            input_format = formats.sanitize_strftime_format(input_format)\n             try:\n-                date_value = datetime.date(int(y), int(m), int(d))\n+                y, m, d = int(y), int(m), int(d)\n+                # Validate year, month, and day\n+                if not (1 <= y <= 9999):\n+                    raise ValueError(\"Year out of range\")\n+                if not (1 <= m <= 12):\n+                    raise ValueError(\"Month out of range\")\n+                if not (1 <= d <= 31):\n+                    raise ValueError(\"Day out of range\")\n+                # Check if the day is valid for the month and year\n+                datetime.date(y, m, d)  # This will raise ValueError if the day is invalid\n             except ValueError:\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n-            return date_value.strftime(input_format)\n+            input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n+            input_format = formats.sanitize_strftime_format(input_format)\n+            return datetime.date(y, m, d).strftime(input_format)\n         return data.get(name)\n \n     def value_omitted_from_data(self, data, files, name):\n",
  "test_patch": "diff --git a/tests/admin_widgets/test_select_date_widget_overflow.py b/tests/admin_widgets/test_select_date_widget_overflow.py\nnew file mode 100644\nindex 0000000..8d35588\n--- /dev/null\n+++ b/tests/admin_widgets/test_select_date_widget_overflow.py\n@@ -0,0 +1,36 @@\n+import datetime\n+from django import forms\n+from django.forms import SelectDateWidget\n+from django.http import HttpRequest\n+from django.test import SimpleTestCase\n+from django.urls import path\n+from django.http import HttpResponse\n+\n+# Define the form and view to reproduce the issue\n+class ReproForm(forms.Form):\n+    my_date = forms.DateField(widget=SelectDateWidget())\n+\n+def repro_view(request):\n+    form = ReproForm(request.GET)  # for ease of reproducibility\n+    if form.is_valid():\n+        return HttpResponse(\"ok\")\n+    else:\n+        return HttpResponse(\"not ok\")\n+\n+# Define the URL pattern for the view\n+urlpatterns = [\n+    path('repro/', repro_view, name='repro')\n+]\n+\n+class SelectDateWidgetOverflowTest(SimpleTestCase):\n+    def test_select_date_widget_overflow_error(self):\n+        request = HttpRequest()\n+        request.method = 'GET'\n+        request.GET = {\n+            'my_date_day': '1',\n+            'my_date_month': '1',\n+            'my_date_year': '1234567821345678'\n+        }\n+        \n+        with self.assertRaises(OverflowError):\n+            repro_view(request)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/admin_widgets/test_select_date_widget_overflow_inverted.py b/tests/admin_widgets/test_select_date_widget_overflow_inverted.py\nnew file mode 100644\nindex 0000000..5f1ca55\n--- /dev/null\n+++ b/tests/admin_widgets/test_select_date_widget_overflow_inverted.py\n@@ -0,0 +1,38 @@\n+import datetime\n+from django import forms\n+from django.forms import SelectDateWidget\n+from django.http import HttpRequest\n+from django.test import SimpleTestCase\n+from django.urls import path\n+from django.http import HttpResponse\n+\n+# Define the form and view to reproduce the issue\n+class ReproForm(forms.Form):\n+    my_date = forms.DateField(widget=SelectDateWidget())\n+\n+def repro_view(request):\n+    form = ReproForm(request.GET)  # for ease of reproducibility\n+    if form.is_valid():\n+        return HttpResponse(\"ok\")\n+    else:\n+        return HttpResponse(\"not ok\")\n+\n+# Define the URL pattern for the view\n+urlpatterns = [\n+    path('repro/', repro_view, name='repro')\n+]\n+\n+class SelectDateWidgetOverflowTest(SimpleTestCase):\n+    def test_select_date_widget_overflow_error(self):\n+        request = HttpRequest()\n+        request.method = 'GET'\n+        request.GET = {\n+            'my_date_day': '1',\n+            'my_date_month': '1',\n+            'my_date_year': '1234567821345678'\n+        }\n+        \n+        try:\n+            repro_view(request)\n+        except OverflowError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1394502,
  "num_received_chars": 21391,
  "elapsed_time": 192.67051601409912,
  "lint_repair_count": 0,
  "test_generation_attempts": 8,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}