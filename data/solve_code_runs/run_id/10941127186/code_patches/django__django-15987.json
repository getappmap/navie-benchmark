{
  "instance_id": "django__django-15987",
  "edit_test_file": "tests/fixtures_regress/tests.py",
  "code_patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13..ea157aa 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -6,6 +6,7 @@ import sys\n import warnings\n import zipfile\n from itertools import product\n+from pathlib import Path\n \n from django.apps import apps\n from django.conf import settings\n@@ -361,26 +362,25 @@ class Command(BaseCommand):\n         current directory.\n         \"\"\"\n         dirs = []\n-        fixture_dirs = settings.FIXTURE_DIRS\n+        fixture_dirs = [Path(d).resolve() for d in settings.FIXTURE_DIRS]\n         if len(fixture_dirs) != len(set(fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n-            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            app_dir = Path(app_config.path, \"fixtures\").resolve()\n             if app_dir in fixture_dirs:\n                 raise ImproperlyConfigured(\n                     \"'%s' is a default fixture directory for the '%s' app \"\n                     \"and cannot be listed in settings.FIXTURE_DIRS.\"\n                     % (app_dir, app_label)\n                 )\n-\n             if self.app_label and app_label != self.app_label:\n                 continue\n-            if os.path.isdir(app_dir):\n-                dirs.append(app_dir)\n-        dirs.extend(fixture_dirs)\n+            if app_dir.is_dir():\n+                dirs.append(str(app_dir))\n+        dirs.extend(str(d) for d in fixture_dirs)\n         dirs.append(\"\")\n-        return [os.path.realpath(d) for d in dirs]\n+        return [str(Path(d).resolve()) for d in dirs]\n \n     def parse_name(self, fixture_name):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/fixtures_regress/test_fixture_dirs_duplicates_path_instance.py b/tests/fixtures_regress/test_fixture_dirs_duplicates_path_instance.py\nnew file mode 100644\nindex 0000000..5e41a00\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dirs_duplicates_path_instance.py\n@@ -0,0 +1,25 @@\n+import os\n+from pathlib import Path\n+from django.core import management\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase, override_settings\n+\n+_cur_dir = os.path.dirname(os.path.abspath(__file__))\n+\n+class TestFixtureDirsDuplicatesPathInstance(TestCase):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures_1\",\n+            Path(_cur_dir) / \"fixtures_1\",\n+        ]\n+    )\n+    def test_fixture_dirs_with_duplicates_path_instance(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain duplicates in order to avoid\n+        repeated fixture loading. This test checks if the issue with Path\n+        instances is reproduced.\n+        \"\"\"\n+        with self.assertRaisesMessage(\n+            ImproperlyConfigured, \"settings.FIXTURE_DIRS contains duplicates.\"\n+        ):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/fixtures_regress/test_fixture_dirs_duplicates_path_instance_inverted.py b/tests/fixtures_regress/test_fixture_dirs_duplicates_path_instance_inverted.py\nnew file mode 100644\nindex 0000000..eb17977\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dirs_duplicates_path_instance_inverted.py\n@@ -0,0 +1,25 @@\n+import os\n+from pathlib import Path\n+from django.core import management\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase, override_settings\n+\n+_cur_dir = os.path.dirname(os.path.abspath(__file__))\n+\n+class TestFixtureDirsDuplicatesPathInstance(TestCase):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures_1\",\n+            Path(_cur_dir) / \"fixtures_1\",\n+        ]\n+    )\n+    def test_fixture_dirs_with_duplicates_path_instance(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain duplicates in order to avoid\n+        repeated fixture loading. This test checks if the issue with Path\n+        instances is reproduced.\n+        \"\"\"\n+        try:\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+        except ImproperlyConfigured as e:\n+            self.fail(f\"__BUG__HERE__: {str(e)}\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2113336,
  "num_received_chars": 159332,
  "elapsed_time": 781.3266808986664,
  "lint_repair_count": 13,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}