{
  "instance_id": "scikit-learn__scikit-learn-12585",
  "edit_test_file": "sklearn/tests/test_base.py",
  "code_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 56ffb18..f7ccf8f 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -48,6 +48,14 @@ def clone(estimator, safe=True):\n     # XXX: not handling dictionaries\n     if estimator_type in (list, tuple, set, frozenset):\n         return estimator_type([clone(e, safe=safe) for e in estimator])\n+    elif isinstance(estimator, type):\n+        # Handle the case where the estimator is a class type\n+        if not safe:\n+            return copy.deepcopy(estimator)\n+        else:\n+            raise TypeError(\"Cannot clone object '%s' (type %s): \"\n+                            \"it is a class type and does not implement a 'get_params' method.\"\n+                            % (repr(estimator), type(estimator)))\n     elif not hasattr(estimator, 'get_params'):\n         if not safe:\n             return copy.deepcopy(estimator)\n",
  "test_patch": "diff --git a/sklearn/tests/test_clone_issue.py b/sklearn/tests/test_clone_issue.py\nnew file mode 100644\nindex 0000000..eb707e5\n--- /dev/null\n+++ b/sklearn/tests/test_clone_issue.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+\n+class TestCloneIssue(unittest.TestCase):\n+    def test_clone_with_estimator_class_as_parameter(self):\n+        # Attempt to clone an estimator with another estimator class as a parameter\n+        with self.assertRaises(TypeError) as context:\n+            clone(StandardScaler(with_mean=StandardScaler))\n+        \n+        # Check if the error message matches the expected TypeError\n+        self.assertIn(\"get_params() missing 1 required positional argument: 'self'\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_clone_issue_inverted.py b/sklearn/tests/test_clone_issue_inverted.py\nnew file mode 100644\nindex 0000000..d38fa4a\n--- /dev/null\n+++ b/sklearn/tests/test_clone_issue_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+\n+class TestCloneIssue(unittest.TestCase):\n+    def test_clone_with_estimator_class_as_parameter(self):\n+        # Attempt to clone an estimator with another estimator class as a parameter\n+        try:\n+            clone(StandardScaler(with_mean=StandardScaler))\n+        except TypeError as e:\n+            # Check if the error message matches the expected TypeError\n+            if \"get_params() missing 1 required positional argument: 'self'\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 429024,
  "num_received_chars": 10813,
  "elapsed_time": 95.76400446891785,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}