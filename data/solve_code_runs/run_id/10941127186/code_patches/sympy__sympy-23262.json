{
  "instance_id": "sympy__sympy-23262",
  "edit_test_file": "sympy/printing/tests/test_pycode.py",
  "code_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex da67263..ced04b3 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -959,6 +959,8 @@ def _recursive_to_string(doprint, arg):\n             left, right = \"[]\"\n         elif isinstance(arg, tuple):\n             left, right = \"()\"\n+            if len(arg) == 1:\n+                return left + _recursive_to_string(doprint, arg[0]) + \",)\"\n         else:\n             raise NotImplementedError(\"unhandled type: %s, %s\" % (type(arg), arg))\n         return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_tuple_handling.py b/sympy/printing/tests/test_tuple_handling.py\nnew file mode 100644\nindex 0000000..2628ac4\n--- /dev/null\n+++ b/sympy/printing/tests/test_tuple_handling.py\n@@ -0,0 +1,9 @@\n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_single_element_tuple():\n+    # Generate the source code for a lambdified function returning a single-element tuple\n+    source_code = inspect.getsource(lambdify([], tuple([1])))\n+\n+    # Assert that the generated source code does not contain a comma, indicating the issue\n+    assert source_code == 'def _lambdifygenerated():\\n    return (1)\\n'\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/printing/tests/test_tuple_handling_inverted.py b/sympy/printing/tests/test_tuple_handling_inverted.py\nnew file mode 100644\nindex 0000000..d46f7b4\n--- /dev/null\n+++ b/sympy/printing/tests/test_tuple_handling_inverted.py\n@@ -0,0 +1,10 @@\n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_single_element_tuple():\n+    # Generate the source code for a lambdified function returning a single-element tuple\n+    source_code = inspect.getsource(lambdify([], tuple([1])))\n+\n+    # Assert that the generated source code contains a comma, indicating the issue\n+    if source_code != 'def _lambdifygenerated():\\n    return (1,)\\n':\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 670275,
  "num_received_chars": 16811,
  "elapsed_time": 168.91488480567932,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}