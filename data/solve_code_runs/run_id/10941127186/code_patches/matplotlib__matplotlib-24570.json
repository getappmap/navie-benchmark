{
  "instance_id": "matplotlib__matplotlib-24570",
  "edit_test_file": "lib/matplotlib/tests/test_text.py",
  "code_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 3a50654..4529f69 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -475,9 +475,16 @@ class HPacker(PackerBase):\n             return 2 * pad, 2 * pad, pad, pad, []\n \n         hd_list = [(h, yd) for w, h, xd, yd in whd_list]\n+        # Reverse the logic for 'top' and 'bottom' alignments\n+        if self.align == \"top\":\n+            align = \"bottom\"\n+        elif self.align == \"bottom\":\n+            align = \"top\"\n+        else:\n+            align = self.align\n         height, ydescent, yoffsets = _get_aligned_offsets(hd_list,\n                                                           self.height,\n-                                                          self.align)\n+                                                          align)\n \n         pack_list = [w for w, h, xd, yd in whd_list]\n         width, xoffsets_ = _get_packed_offsets(pack_list, self.width,\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hpacker_alignment.py b/lib/matplotlib/tests/test_hpacker_alignment.py\nnew file mode 100644\nindex 0000000..973a815\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker_alignment.py\n@@ -0,0 +1,41 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+\n+class TestHPackerAlignment(unittest.TestCase):\n+    def test_hpacker_alignment_reversed(self):\n+        # Create two DrawingAreas with different heights\n+        da1 = DrawingArea(10, 20)\n+        rect1 = Rectangle((0, 0), 10, 20)\n+        da1.add_artist(rect1)\n+\n+        da2 = DrawingArea(10, 30)\n+        rect2 = Rectangle((0, 0), 10, 30)\n+        da2.add_artist(rect2)\n+\n+        # Set alignment to 'bottom'\n+        align = \"bottom\"\n+\n+        # Create an HPacker with the specified alignment\n+        pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\n+        title = TextArea(f\"align='{align}'\")\n+        pack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n+\n+        # Add the pack to an AnchoredOffsetbox\n+        box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+\n+        # Create a plot and add the box\n+        _, ax = plt.subplots()\n+        ax.add_artist(box)\n+\n+        # Draw the canvas to trigger the layout\n+        plt.draw()\n+\n+        # Check if the alignment is reversed by comparing the y-coordinates\n+        # of the rectangles. If the alignment is reversed, the y-coordinate\n+        # of the first rectangle should be greater than the second.\n+        self.assertEqual(rect1.get_y(), rect2.get_y(), \"Alignment 'bottom' is reversed\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_hpacker_alignment_inverted.py b/lib/matplotlib/tests/test_hpacker_alignment_inverted.py\nnew file mode 100644\nindex 0000000..c1e3db9\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker_alignment_inverted.py\n@@ -0,0 +1,42 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+\n+class TestHPackerAlignment(unittest.TestCase):\n+    def test_hpacker_alignment_reversed(self):\n+        # Create two DrawingAreas with different heights\n+        da1 = DrawingArea(10, 20)\n+        rect1 = Rectangle((0, 0), 10, 20)\n+        da1.add_artist(rect1)\n+\n+        da2 = DrawingArea(10, 30)\n+        rect2 = Rectangle((0, 0), 10, 30)\n+        da2.add_artist(rect2)\n+\n+        # Set alignment to 'bottom'\n+        align = \"bottom\"\n+\n+        # Create an HPacker with the specified alignment\n+        pack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\n+        title = TextArea(f\"align='{align}'\")\n+        pack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n+\n+        # Add the pack to an AnchoredOffsetbox\n+        box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+\n+        # Create a plot and add the box\n+        _, ax = plt.subplots()\n+        ax.add_artist(box)\n+\n+        # Draw the canvas to trigger the layout\n+        plt.draw()\n+\n+        # Check if the alignment is reversed by comparing the y-coordinates\n+        # of the rectangles. If the alignment is reversed, the y-coordinate\n+        # of the first rectangle should be greater than the second.\n+        if rect1.get_y() == rect2.get_y():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 785775,
  "num_received_chars": 23645,
  "elapsed_time": 292.79870223999023,
  "lint_repair_count": 0,
  "test_generation_attempts": 5,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}