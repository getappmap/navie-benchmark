{
  "instance_id": "django__django-16642",
  "edit_test_file": "tests/responses/test_fileresponse.py",
  "code_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8..6910df4 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -606,6 +606,11 @@ class FileResponse(StreamingHttpResponse):\n         if self._no_explicit_content_type:\n             if filename:\n                 content_type, encoding = mimetypes.guess_type(filename)\n+                # Custom handling for specific file extensions\n+                if filename.endswith('.Z'):\n+                    content_type = 'application/z-compress'\n+                elif filename.endswith('.br'):\n+                    content_type = 'application/brotli'\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n                 content_type = {\n",
  "test_patch": "diff --git a/tests/responses/test_mime_type_guessing.py b/tests/responses/test_mime_type_guessing.py\nnew file mode 100644\nindex 0000000..ce941b7\n--- /dev/null\n+++ b/tests/responses/test_mime_type_guessing.py\n@@ -0,0 +1,27 @@\n+import os\n+import tempfile\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+class MimeTypeGuessingTests(SimpleTestCase):\n+    def test_mime_type_guessing_for_Z_and_br_extensions(self):\n+        # Create temporary files with .Z and .br extensions\n+        with tempfile.NamedTemporaryFile(suffix=\".html.Z\", delete=False) as tmp_Z, \\\n+             tempfile.NamedTemporaryFile(suffix=\".html.br\", delete=False) as tmp_br:\n+            tmp_Z.write(b\"dummy content\")\n+            tmp_br.write(b\"dummy content\")\n+            tmp_Z_path = tmp_Z.name\n+            tmp_br_path = tmp_br.name\n+\n+        try:\n+            # Test for .Z extension\n+            response_Z = FileResponse(open(tmp_Z_path, \"rb\"))\n+            self.assertEqual(response_Z.headers[\"Content-Type\"], \"text/html\")\n+\n+            # Test for .br extension\n+            response_br = FileResponse(open(tmp_br_path, \"rb\"))\n+            self.assertEqual(response_br.headers[\"Content-Type\"], \"text/html\")\n+        finally:\n+            # Clean up temporary files\n+            os.remove(tmp_Z_path)\n+            os.remove(tmp_br_path)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/responses/test_mime_type_guessing_inverted.py b/tests/responses/test_mime_type_guessing_inverted.py\nnew file mode 100644\nindex 0000000..fea1910\n--- /dev/null\n+++ b/tests/responses/test_mime_type_guessing_inverted.py\n@@ -0,0 +1,29 @@\n+import os\n+import tempfile\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+class MimeTypeGuessingTests(SimpleTestCase):\n+    def test_mime_type_guessing_for_Z_and_br_extensions(self):\n+        # Create temporary files with .Z and .br extensions\n+        with tempfile.NamedTemporaryFile(suffix=\".html.Z\", delete=False) as tmp_Z, \\\n+             tempfile.NamedTemporaryFile(suffix=\".html.br\", delete=False) as tmp_br:\n+            tmp_Z.write(b\"dummy content\")\n+            tmp_br.write(b\"dummy content\")\n+            tmp_Z_path = tmp_Z.name\n+            tmp_br_path = tmp_br.name\n+\n+        try:\n+            # Test for .Z extension\n+            response_Z = FileResponse(open(tmp_Z_path, \"rb\"))\n+            if response_Z.headers[\"Content-Type\"] == \"text/html\":\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+            # Test for .br extension\n+            response_br = FileResponse(open(tmp_br_path, \"rb\"))\n+            if response_br.headers[\"Content-Type\"] == \"text/html\":\n+                raise AssertionError(\"__BUG__HERE__\")\n+        finally:\n+            # Clean up temporary files\n+            os.remove(tmp_Z_path)\n+            os.remove(tmp_br_path)\n\\ No newline at end of file\n",
  "num_sent_chars": 709457,
  "num_received_chars": 31251,
  "elapsed_time": 167.40725231170654,
  "lint_repair_count": 2,
  "test_generation_attempts": 1,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}