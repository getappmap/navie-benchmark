{
  "instance_id": "django__django-13513",
  "edit_test_file": "tests/urlpatterns/tests.py",
  "code_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7b..39eec5c 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -397,9 +397,9 @@ class ExceptionReporter:\n     def get_traceback_frames(self):\n         def explicit_or_implicit_cause(exc_value):\n             explicit = getattr(exc_value, '__cause__', None)\n-            suppress_context = getattr(exc_value, '__suppress_context__', None)\n+            suppress_context = getattr(exc_value, '__suppress_context__', False)\n             implicit = getattr(exc_value, '__context__', None)\n-            return explicit or (None if suppress_context else implicit)\n+            return explicit if explicit is not None else (None if suppress_context else implicit)\n \n         # Get the exception and all its causes\n         exceptions = []\n",
  "test_patch": "diff --git a/tests/urlpatterns/test_debug_error_view_suppress_context.py b/tests/urlpatterns/test_debug_error_view_suppress_context.py\nnew file mode 100644\nindex 0000000..7a11aea\n--- /dev/null\n+++ b/tests/urlpatterns/test_debug_error_view_suppress_context.py\n@@ -0,0 +1,16 @@\n+import sys\n+from django.test import SimpleTestCase, RequestFactory\n+from django.views.debug import technical_500_response\n+\n+class DebugErrorViewSuppressContextTests(SimpleTestCase):\n+    def test_suppress_context(self):\n+        request = RequestFactory().get('/')\n+        try:\n+            try:\n+                raise RuntimeError('my error')\n+            except Exception as exc:\n+                raise ValueError('my new error') from None\n+        except Exception:\n+            exc_info = sys.exc_info()\n+            response = technical_500_response(request, *exc_info)\n+            self.assertIn('RuntimeError', response.content.decode())\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/urlpatterns/test_debug_error_view_suppress_context_inverted.py b/tests/urlpatterns/test_debug_error_view_suppress_context_inverted.py\nnew file mode 100644\nindex 0000000..bd486fe\n--- /dev/null\n+++ b/tests/urlpatterns/test_debug_error_view_suppress_context_inverted.py\n@@ -0,0 +1,19 @@\n+import sys\n+from django.test import SimpleTestCase, RequestFactory\n+from django.views.debug import technical_500_response\n+\n+class DebugErrorViewSuppressContextTests(SimpleTestCase):\n+    def test_suppress_context(self):\n+        request = RequestFactory().get('/')\n+        try:\n+            try:\n+                raise RuntimeError('my error')\n+            except Exception as exc:\n+                raise ValueError('my new error') from None\n+        except Exception:\n+            exc_info = sys.exc_info()\n+            response = technical_500_response(request, *exc_info)\n+            # Alter the assertion to check for the absence of 'RuntimeError'\n+            # and raise an error if it is present, indicating the bug.\n+            if 'RuntimeError' in response.content.decode():\n+                raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1617466,
  "num_received_chars": 36085,
  "elapsed_time": 335.55053901672363,
  "lint_repair_count": 4,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}