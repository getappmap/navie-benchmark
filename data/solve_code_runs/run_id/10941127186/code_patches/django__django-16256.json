{
  "instance_id": "django__django-16256",
  "edit_test_file": "tests/async/test_async_queryset.py",
  "code_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex c5d87f6..2ffeece 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -78,6 +78,7 @@ from django.db.models.query import QuerySet\n from django.db.models.query_utils import DeferredAttribute\n from django.db.models.utils import AltersData, resolve_callables\n from django.utils.functional import cached_property\n+from asgiref.sync import sync_to_async\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n@@ -793,6 +794,9 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         create.alters_data = True\n \n+        async def acreate(self, **kwargs):\n+            return await sync_to_async(self.create)(**kwargs)\n+\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -801,6 +805,9 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, **kwargs):\n+            return await sync_to_async(self.get_or_create)(**kwargs)\n+\n         def update_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -809,6 +816,9 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, **kwargs):\n+            return await sync_to_async(self.update_or_create)(**kwargs)\n+\n         # remove() and clear() are only provided if the ForeignKey can have a\n         # value of null.\n         if rel.field.null:\n@@ -1191,6 +1201,9 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         create.alters_data = True\n \n+        async def acreate(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.create)(through_defaults=through_defaults, **kwargs)\n+\n         def get_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(\n@@ -1204,6 +1217,9 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.get_or_create)(through_defaults=through_defaults, **kwargs)\n+\n         def update_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(\n@@ -1217,6 +1233,9 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.update_or_create)(through_defaults=through_defaults, **kwargs)\n+\n         def _get_target_ids(self, target_field_name, objs):\n             \"\"\"\n             Return the set of ids of `objs` that the target field references.\n",
  "test_patch": "diff --git a/tests/async/test_async_related_managers.py b/tests/async/test_async_related_managers.py\nnew file mode 100644\nindex 0000000..979a5c9\n--- /dev/null\n+++ b/tests/async/test_async_related_managers.py\n@@ -0,0 +1,30 @@\n+import asyncio\n+from django.test import TestCase\n+from .models import SimpleModel, RelatedModel\n+\n+class AsyncRelatedManagersTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.simple_instance = SimpleModel.objects.create(field=1)\n+        cls.related_instance = RelatedModel.objects.create(simple=cls.simple_instance)\n+\n+    async def test_acreate_on_related_manager(self):\n+        # Attempt to use acreate on a related manager\n+        with self.assertRaises(AttributeError):\n+            await self.simple_instance.relatedmodels.acreate(field=2)\n+\n+    async def test_aget_or_create_on_related_manager(self):\n+        # Attempt to use aget_or_create on a related manager\n+        with self.assertRaises(AttributeError):\n+            await self.simple_instance.relatedmodels.aget_or_create(field=2)\n+\n+    async def test_aupdate_or_create_on_related_manager(self):\n+        # Attempt to use aupdate_or_create on a related manager\n+        with self.assertRaises(AttributeError):\n+            await self.simple_instance.relatedmodels.aupdate_or_create(\n+                field=1, defaults={\"field\": 2}\n+            )\n+\n+# Run the tests\n+if __name__ == \"__main__\":\n+    asyncio.run(AsyncRelatedManagersTest().run())\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/async/test_async_related_managers_inverted.py b/tests/async/test_async_related_managers_inverted.py\nnew file mode 100644\nindex 0000000..3787cf6\n--- /dev/null\n+++ b/tests/async/test_async_related_managers_inverted.py\n@@ -0,0 +1,36 @@\n+import asyncio\n+from django.test import TestCase\n+from .models import SimpleModel, RelatedModel\n+\n+class AsyncRelatedManagersTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.simple_instance = SimpleModel.objects.create(field=1)\n+        cls.related_instance = RelatedModel.objects.create(simple=cls.simple_instance)\n+\n+    async def test_acreate_on_related_manager(self):\n+        # Attempt to use acreate on a related manager\n+        try:\n+            await self.simple_instance.relatedmodels.acreate(field=2)\n+        except AttributeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+    async def test_aget_or_create_on_related_manager(self):\n+        # Attempt to use aget_or_create on a related manager\n+        try:\n+            await self.simple_instance.relatedmodels.aget_or_create(field=2)\n+        except AttributeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+    async def test_aupdate_or_create_on_related_manager(self):\n+        # Attempt to use aupdate_or_create on a related manager\n+        try:\n+            await self.simple_instance.relatedmodels.aupdate_or_create(\n+                field=1, defaults={\"field\": 2}\n+            )\n+        except AttributeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+# Run the tests\n+if __name__ == \"__main__\":\n+    asyncio.run(AsyncRelatedManagersTest().run())\n\\ No newline at end of file\n",
  "num_sent_chars": 1776201,
  "num_received_chars": 89331,
  "elapsed_time": 417.11407923698425,
  "lint_repair_count": 7,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}