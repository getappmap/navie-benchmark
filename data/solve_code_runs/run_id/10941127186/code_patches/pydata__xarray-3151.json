{
  "instance_id": "pydata__xarray-3151",
  "edit_test_file": "xarray/tests/test_combine.py",
  "code_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903..5f610d4 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -504,6 +504,9 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n         for dim in concatenated.dims:\n             if dim in concatenated:\n                 indexes = concatenated.indexes.get(dim)\n+                # Skip monotonicity check for identical coordinates\n+                if all(ds.indexes.get(dim).equals(indexes) for ds in datasets):\n+                    continue\n                 if not (indexes.is_monotonic_increasing\n                         or indexes.is_monotonic_decreasing):\n                     raise ValueError(\"Resulting object does not have monotonic\"\n",
  "test_patch": "diff --git a/xarray/tests/test_combine_by_coords.py b/xarray/tests/test_combine_by_coords.py\nnew file mode 100644\nindex 0000000..5d783fb\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+import xarray as xr\n+from xarray.tests import raises_regex\n+\n+def test_combine_by_coords_non_monotonic_identical_coords():\n+    yCoord = ['a', 'c', 'b']  # non-monotonic identical coordinates\n+\n+    ds1 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(3, 3))\n+        ),\n+        coords=dict(\n+            x=[1, 2, 3],\n+            y=yCoord\n+        )\n+    )\n+\n+    ds2 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(4, 3))\n+        ),\n+        coords=dict(\n+            x=[4, 5, 6, 7],\n+            y=yCoord\n+        )\n+    )\n+\n+    with raises_regex(ValueError, \"Resulting object does not have monotonic global indexes along dimension y\"):\n+        xr.combine_by_coords((ds1, ds2))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_combine_by_coords_inverted.py b/xarray/tests/test_combine_by_coords_inverted.py\nnew file mode 100644\nindex 0000000..10bd41d\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords_inverted.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_combine_by_coords_non_monotonic_identical_coords():\n+    yCoord = ['a', 'c', 'b']  # non-monotonic identical coordinates\n+\n+    ds1 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(3, 3))\n+        ),\n+        coords=dict(\n+            x=[1, 2, 3],\n+            y=yCoord\n+        )\n+    )\n+\n+    ds2 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(4, 3))\n+        ),\n+        coords=dict(\n+            x=[4, 5, 6, 7],\n+            y=yCoord\n+        )\n+    )\n+\n+    with pytest.raises(ValueError, match=\"__BUG__HERE__\"):\n+        xr.combine_by_coords((ds1, ds2))\n\\ No newline at end of file\n",
  "num_sent_chars": 2759760,
  "num_received_chars": 53549,
  "elapsed_time": 386.7901179790497,
  "lint_repair_count": 7,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}