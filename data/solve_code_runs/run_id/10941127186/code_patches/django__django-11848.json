{
  "instance_id": "django__django-11848",
  "edit_test_file": "tests/utils_tests/test_http.py",
  "code_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4..bd8650f 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,11 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100 * 100\n+            year += current_century\n+            if year > current_year + 50:\n+                year -= 100\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n",
  "test_patch": "diff --git a/tests/utils_tests/test_http_date_parsing.py b/tests/utils_tests/test_http_date_parsing.py\nnew file mode 100644\nindex 0000000..f1b6127\n--- /dev/null\n+++ b/tests/utils_tests/test_http_date_parsing.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from datetime import datetime\n+from django.utils.http import parse_http_date\n+\n+class HttpDateParsingIssueTests(unittest.TestCase):\n+    def test_rfc850_two_digit_year_parsing_issue(self):\n+        # This test is designed to reproduce the issue with two-digit year parsing.\n+        # According to the issue, the current logic incorrectly interprets years 0-69 as 2000-2069\n+        # and years 70-99 as 1970-1999, instead of comparing against the current year.\n+        \n+        # Example date with a two-digit year that should be interpreted as a past year\n+        # but is currently interpreted as a future year due to the hardcoded logic.\n+        date_str = 'Sunday, 06-Nov-37 08:49:37 GMT'\n+        \n+        # The expected incorrect behavior is that the year is interpreted as 2037\n+        expected_datetime = datetime(2037, 11, 6, 8, 49, 37)\n+        \n+        # Parse the date and check if it matches the incorrect expected behavior\n+        parsed_timestamp = parse_http_date(date_str)\n+        self.assertEqual(datetime.utcfromtimestamp(parsed_timestamp), expected_datetime)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_http_date_parsing_inverted.py b/tests/utils_tests/test_http_date_parsing_inverted.py\nnew file mode 100644\nindex 0000000..59ed374\n--- /dev/null\n+++ b/tests/utils_tests/test_http_date_parsing_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from datetime import datetime\n+from django.utils.http import parse_http_date\n+\n+class HttpDateParsingIssueTests(unittest.TestCase):\n+    def test_rfc850_two_digit_year_parsing_issue(self):\n+        # This test is designed to reproduce the issue with two-digit year parsing.\n+        # According to the issue, the current logic incorrectly interprets years 0-69 as 2000-2069\n+        # and years 70-99 as 1970-1999, instead of comparing against the current year.\n+        \n+        # Example date with a two-digit year that should be interpreted as a past year\n+        # but is currently interpreted as a future year due to the hardcoded logic.\n+        date_str = 'Sunday, 06-Nov-37 08:49:37 GMT'\n+        \n+        # The expected correct behavior is that the year is interpreted as 1937\n+        expected_datetime = datetime(1937, 11, 6, 8, 49, 37)\n+        \n+        # Parse the date and check if it matches the correct expected behavior\n+        parsed_timestamp = parse_http_date(date_str)\n+        self.assertEqual(datetime.utcfromtimestamp(parsed_timestamp), expected_datetime, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1114349,
  "num_received_chars": 38260,
  "elapsed_time": 307.995662689209,
  "lint_repair_count": 1,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}