{
  "instance_id": "django__django-13568",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 65fc266..908ca39 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -4,6 +4,8 @@ from types import MethodType\n from django.apps import apps\n from django.conf import settings\n from django.core import checks\n+from django.db.models import UniqueConstraint  # Import UniqueConstraint\n+from django.db import models  # Import models\n \n from .management import _get_builtin_permissions\n \n@@ -53,28 +55,34 @@ def check_user_model(app_configs=None, **kwargs):\n \n     # Check that the username field is unique\n     if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n-        if (settings.AUTHENTICATION_BACKENDS ==\n-                ['django.contrib.auth.backends.ModelBackend']):\n-            errors.append(\n-                checks.Error(\n-                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n-                        cls._meta.object_name, cls.USERNAME_FIELD\n-                    ),\n-                    obj=cls,\n-                    id='auth.E003',\n+        # Check if USERNAME_FIELD is part of any UniqueConstraint\n+        unique_constraints = [\n+            constraint for constraint in cls._meta.constraints\n+            if isinstance(constraint, UniqueConstraint) and cls.USERNAME_FIELD in constraint.fields\n+        ]\n+        if not unique_constraints:\n+            if (settings.AUTHENTICATION_BACKENDS ==\n+                    ['django.contrib.auth.backends.ModelBackend']):\n+                errors.append(\n+                    checks.Error(\n+                        \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n+                            cls._meta.object_name, cls.USERNAME_FIELD\n+                        ),\n+                        obj=cls,\n+                        id='auth.E003',\n+                    )\n                 )\n-            )\n-        else:\n-            errors.append(\n-                checks.Warning(\n-                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n-                        cls._meta.object_name, cls.USERNAME_FIELD\n-                    ),\n-                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n-                    obj=cls,\n-                    id='auth.W004',\n+            else:\n+                errors.append(\n+                    checks.Warning(\n+                        \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n+                            cls._meta.object_name, cls.USERNAME_FIELD\n+                        ),\n+                        hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                        obj=cls,\n+                        id='auth.W004',\n+                    )\n                 )\n-            )\n \n     if isinstance(cls().is_anonymous, MethodType):\n         errors.append(\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1273113,
  "num_received_chars": 43480,
  "elapsed_time": 272.2774064540863,
  "lint_repair_count": 4,
  "test_generation_attempts": 9,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}