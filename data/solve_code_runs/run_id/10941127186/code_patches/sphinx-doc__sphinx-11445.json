{
  "instance_id": "sphinx-doc__sphinx-11445",
  "edit_test_file": "tests/test_build.py",
  "code_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a15383..0b5f204 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -82,6 +82,8 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for line in content:\n             if docinfo_re.match(line):\n                 pos += 1\n+            elif line.strip() == '':\n+                continue\n             else:\n                 break\n \n",
  "test_patch": "diff --git a/tests/test_rst_prolog_domain_directive.py b/tests/test_rst_prolog_domain_directive.py\nnew file mode 100644\nindex 0000000..9ca3837\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive.py\n@@ -0,0 +1,50 @@\n+import os\n+import pytest\n+from sphinx.application import Sphinx\n+\n+def test_rst_prolog_with_domain_directive(tmpdir):\n+    # Create a temporary directory for the Sphinx project\n+    docs_dir = tmpdir.mkdir(\"docs\")\n+\n+    # Create index.rst\n+    index_rst = docs_dir.join(\"index.rst\")\n+    index_rst.write(\n+        \"Welcome\\n\"\n+        \"=======\\n\\n\"\n+        \".. toctree::\\n\\n\"\n+        \"   mypackage\\n\"\n+    )\n+\n+    # Create mypackage.rst with a domain directive as the first heading\n+    mypackage_rst = docs_dir.join(\"mypackage.rst\")\n+    mypackage_rst.write(\n+        \":mod:`mypackage2`\\n\"\n+        \"=================\\n\\n\"\n+        \"Content\\n\\n\"\n+        \"Subheading\\n\"\n+        \"----------\\n\"\n+    )\n+\n+    # Create conf.py with rst_prolog\n+    conf_py = docs_dir.join(\"conf.py\")\n+    conf_py.write(\n+        \"rst_prolog = '''\\n\"\n+        \".. |psf| replace:: Python Software Foundation\\n\"\n+        \"'''\\n\"\n+    )\n+\n+    # Build the Sphinx project\n+    app = Sphinx(\n+        srcdir=str(docs_dir),\n+        confdir=str(docs_dir),\n+        outdir=str(docs_dir.join(\"_build\")),\n+        doctreedir=str(docs_dir.join(\"_doctrees\")),\n+        buildername=\"html\",\n+    )\n+\n+    # Run the build\n+    app.build()\n+\n+    # Check if the heading is missing in the output\n+    index_html = docs_dir.join(\"_build\", \"index.html\").read()\n+    assert \"mypackage2\" not in index_html\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_rst_prolog_domain_directive_inverted.py b/tests/test_rst_prolog_domain_directive_inverted.py\nnew file mode 100644\nindex 0000000..e3ed994\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive_inverted.py\n@@ -0,0 +1,51 @@\n+import os\n+import pytest\n+from sphinx.application import Sphinx\n+\n+def test_rst_prolog_with_domain_directive(tmpdir):\n+    # Create a temporary directory for the Sphinx project\n+    docs_dir = tmpdir.mkdir(\"docs\")\n+\n+    # Create index.rst\n+    index_rst = docs_dir.join(\"index.rst\")\n+    index_rst.write(\n+        \"Welcome\\n\"\n+        \"=======\\n\\n\"\n+        \".. toctree::\\n\\n\"\n+        \"   mypackage\\n\"\n+    )\n+\n+    # Create mypackage.rst with a domain directive as the first heading\n+    mypackage_rst = docs_dir.join(\"mypackage.rst\")\n+    mypackage_rst.write(\n+        \":mod:`mypackage2`\\n\"\n+        \"=================\\n\\n\"\n+        \"Content\\n\\n\"\n+        \"Subheading\\n\"\n+        \"----------\\n\"\n+    )\n+\n+    # Create conf.py with rst_prolog\n+    conf_py = docs_dir.join(\"conf.py\")\n+    conf_py.write(\n+        \"rst_prolog = '''\\n\"\n+        \".. |psf| replace:: Python Software Foundation\\n\"\n+        \"'''\\n\"\n+    )\n+\n+    # Build the Sphinx project\n+    app = Sphinx(\n+        srcdir=str(docs_dir),\n+        confdir=str(docs_dir),\n+        outdir=str(docs_dir.join(\"_build\")),\n+        doctreedir=str(docs_dir.join(\"_doctrees\")),\n+        buildername=\"html\",\n+    )\n+\n+    # Run the build\n+    app.build()\n+\n+    # Check if the heading is missing in the output\n+    index_html = docs_dir.join(\"_build\", \"index.html\").read()\n+    if \"mypackage2\" not in index_html:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1697465,
  "num_received_chars": 60811,
  "elapsed_time": 508.951203584671,
  "lint_repair_count": 4,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}