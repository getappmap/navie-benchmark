{
  "instance_id": "matplotlib__matplotlib-25287",
  "edit_test_file": "lib/matplotlib/tests/test_legend.py",
  "code_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex c0e706e..2354445 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -2249,13 +2249,16 @@ class XAxis(Axis):\n         )\n         self.label_position = 'bottom'\n \n+        labelcolor = mpl.rcParams['xtick.labelcolor']\n+        if labelcolor == 'inherit':\n+            labelcolor = mpl.rcParams['xtick.color']\n         self.offsetText.set(\n             x=1, y=0,\n             verticalalignment='top', horizontalalignment='right',\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['xtick.labelsize'],\n-            color=mpl.rcParams['xtick.color'],\n+            color=labelcolor,\n         )\n         self.offset_text_position = 'bottom'\n \n@@ -2509,13 +2512,16 @@ class YAxis(Axis):\n         )\n         self.label_position = 'left'\n         # x in axes coords, y in display coords(!).\n+        labelcolor = mpl.rcParams['ytick.labelcolor']\n+        if labelcolor == 'inherit':\n+            labelcolor = mpl.rcParams['ytick.color']\n         self.offsetText.set(\n             x=0, y=0.5,\n             verticalalignment='baseline', horizontalalignment='left',\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['ytick.labelsize'],\n-            color=mpl.rcParams['ytick.color'],\n+            color=labelcolor,\n         )\n         self.offset_text_position = 'left'\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_ticks.py b/lib/matplotlib/tests/test_ticks.py\nnew file mode 100644\nindex 0000000..09af31c\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_ticks.py\n@@ -0,0 +1,28 @@\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import unittest\n+\n+class TestTickLabelColor(unittest.TestCase):\n+    def test_tick_label_color(self):\n+        # Update rcParams to set ytick.labelcolor to red\n+        mpl.rcParams.update({'ytick.labelcolor': 'red'})\n+        \n+        # Create a figure and axis\n+        fig = plt.figure()\n+        ax = fig.add_subplot(1, 1, 1)\n+        \n+        # Plot data that will cause an offset text to appear\n+        ax.plot([1.01e9, 1.02e9, 1.03e9])\n+        \n+        # Draw the canvas to ensure all elements are rendered\n+        fig.canvas.draw()\n+        \n+        # Get the offset text color\n+        offset_text_color = ax.yaxis.get_offset_text().get_color()\n+        \n+        # Assert that the offset text color is not red, reproducing the issue\n+        self.assertNotEqual(offset_text_color, 'red', \n+                            \"Offset text color should not be red, reproducing the issue.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_ticks_inverted.py b/lib/matplotlib/tests/test_ticks_inverted.py\nnew file mode 100644\nindex 0000000..7d2d044\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_ticks_inverted.py\n@@ -0,0 +1,28 @@\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import unittest\n+\n+class TestTickLabelColor(unittest.TestCase):\n+    def test_tick_label_color(self):\n+        # Update rcParams to set ytick.labelcolor to red\n+        mpl.rcParams.update({'ytick.labelcolor': 'red'})\n+        \n+        # Create a figure and axis\n+        fig = plt.figure()\n+        ax = fig.add_subplot(1, 1, 1)\n+        \n+        # Plot data that will cause an offset text to appear\n+        ax.plot([1.01e9, 1.02e9, 1.03e9])\n+        \n+        # Draw the canvas to ensure all elements are rendered\n+        fig.canvas.draw()\n+        \n+        # Get the offset text color\n+        offset_text_color = ax.yaxis.get_offset_text().get_color()\n+        \n+        # Assert that the offset text color is red, indicating the bug\n+        self.assertEqual(offset_text_color, 'red', \n+                         \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1452184,
  "num_received_chars": 10173,
  "elapsed_time": 259.04131746292114,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}