{
  "instance_id": "matplotlib__matplotlib-23314",
  "edit_test_file": null,
  "code_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex acbeca9..3c04472 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -300,6 +300,9 @@ class Line3DCollection(LineCollection):\n         \"\"\"\n         Project the points according to renderer matrix.\n         \"\"\"\n+        if not self.get_visible():\n+            return np.nan\n+\n         xyslist = [proj3d.proj_trans_points(points, self.axes.M)\n                    for points in self._segments3d]\n         segments_2d = [np.column_stack([xs, ys]) for xs, ys, zs in xyslist]\n@@ -337,6 +340,9 @@ class Patch3D(Patch):\n         return self._path2d\n \n     def do_3d_projection(self):\n+        if not self.get_visible():\n+            return np.nan\n+\n         s = self._segment3d\n         xs, ys, zs = zip(*s)\n         vxs, vys, vzs, vis = proj3d.proj_transform_clip(xs, ys, zs,\n@@ -776,6 +782,9 @@ class Poly3DCollection(PolyCollection):\n         \"\"\"\n         Perform the 3D projection for this object.\n         \"\"\"\n+        if not self.get_visible():\n+            return np.nan\n+\n         if self._A is not None:\n             # force update of color mapping because we re-order them\n             # below.  If we do not do this here, the 2D draw will call\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1515118,
  "num_received_chars": 33870,
  "elapsed_time": 348.1115233898163,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}