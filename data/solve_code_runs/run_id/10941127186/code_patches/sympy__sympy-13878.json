{
  "instance_id": "sympy__sympy-13878",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da8..256c392 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -47,7 +47,7 @@\n \n from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,\n                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,\n-                   Lambda, Basic, lowergamma, erf, erfc, I)\n+                   Lambda, Basic, lowergamma, erf, erfc, I, asin, uppergamma, hyper)\n from sympy import beta as beta_fn\n from sympy import cos, exp, besseli\n from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,\n@@ -153,6 +153,14 @@ class ArcsinDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            ((asin((x - a) / (b - a)) + pi/2) / pi, And(a <= x, x <= b)),\n+            (S.Zero, x < a),\n+            (S.One, x > b)\n+        )\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -670,6 +678,10 @@ def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return 1 - (1 + (x/b)**a)**(-p)\n+\n \n def Dagum(name, p, a, b):\n     r\"\"\"\n@@ -722,7 +734,7 @@ def Dagum(name, p, a, b):\n #-------------------------------------------------------------------------------\n # Erlang distribution ----------------------------------------------------------\n \n-def Erlang(name, k, l):\n+def Erlang(name, k, rate):\n     r\"\"\"\n     Create a continuous random variable with an Erlang distribution.\n \n@@ -737,7 +749,7 @@ def Erlang(name, k, l):\n     ==========\n \n     k : Integer\n-    l : Real number, `\\lambda > 0`, the rate\n+    rate : Real number, `\\lambda > 0`, the rate\n \n     Returns\n     =======\n@@ -751,22 +763,22 @@ def Erlang(name, k, l):\n     >>> from sympy import Symbol, simplify, pprint\n \n     >>> k = Symbol(\"k\", integer=True, positive=True)\n-    >>> l = Symbol(\"l\", positive=True)\n+    >>> rate = Symbol(\"rate\", positive=True)\n     >>> z = Symbol(\"z\")\n \n-    >>> X = Erlang(\"x\", k, l)\n+    >>> X = Erlang(\"x\", k, rate)\n \n     >>> D = density(X)(z)\n     >>> pprint(D, use_unicode=False)\n-     k  k - 1  -l*z\n-    l *z     *e\n+     k  k - 1  -rate*z\n+    rate *z     *e\n     ---------------\n         gamma(k)\n \n     >>> C = cdf(X, meijerg=True)(z)\n     >>> pprint(C, use_unicode=False)\n     /   -2*I*pi*k\n-    |k*e         *lowergamma(k, l*z)\n+    |k*e         *lowergamma(k, rate*z)\n     |-------------------------------  for z >= 0\n     <          gamma(k + 1)\n     |\n@@ -774,10 +786,10 @@ def Erlang(name, k, l):\n     \\\n \n     >>> simplify(E(X))\n-    k/l\n+    k/rate\n \n     >>> simplify(variance(X))\n-    k/l**2\n+    k/rate**2\n \n     References\n     ==========\n@@ -786,7 +798,7 @@ def Erlang(name, k, l):\n     .. [2] http://mathworld.wolfram.com/ErlangDistribution.html\n     \"\"\"\n \n-    return rv(name, GammaDistribution, (k, 1/l))\n+    return rv(name, GammaDistribution, (k, 1/rate))\n \n #-------------------------------------------------------------------------------\n # Exponential distribution -----------------------------------------------------\n@@ -1042,6 +1054,10 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1111,6 +1127,13 @@ def pdf(self, x):\n     def sample(self):\n         return random.gammavariate(self.k, self.theta)\n \n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        return Piecewise(\n+            (lowergamma(k, x/theta) / gamma(k), x >= 0),\n+            (S.Zero, True)\n+        )\n+\n \n def Gamma(name, k, theta):\n     r\"\"\"\n@@ -1200,6 +1223,13 @@ def pdf(self, x):\n         a, b = self.a, self.b\n         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (S.One - uppergamma(a, b/x) / gamma(a), x > 0),\n+            (S.Zero, True)\n+        )\n+\n def GammaInverse(name, a, b):\n     r\"\"\"\n     Create a continuous random variable with an inverse Gamma distribution.\n@@ -1385,6 +1415,10 @@ def pdf(self, x):\n         a, b = self.a, self.b\n         return a * b * x**(a-1) * (1-x**a)**(b-1)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return 1 - (1 - x**a)**b\n+\n def Kumaraswamy(name, a, b):\n     r\"\"\"\n     Create a Continuous Random Variable with a Kumaraswamy distribution.\n@@ -1445,6 +1479,13 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        return Piecewise(\n+            (S.Half * exp((x - mu) / b), x < mu),\n+            (S.One - S.Half * exp(-(x - mu) / b), x >= mu)\n+        )\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n@@ -1501,6 +1542,10 @@ def pdf(self, x):\n         mu, s = self.mu, self.s\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n \n+    def _cdf(self, x):\n+        mu, s = self.mu, self.s\n+        return 1 / (1 + exp(-(x - mu) / s))\n+\n \n def Logistic(name, mu, s):\n     r\"\"\"\n@@ -1711,6 +1756,13 @@ def pdf(self, x):\n         mu, omega = self.mu, self.omega\n         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n \n+    def _cdf(self, x):\n+        mu, omega = self.mu, self.omega\n+        return Piecewise(\n+            (lowergamma(mu, mu/omega*x**2) / gamma(mu), x >= 0),\n+            (S.Zero, True)\n+        )\n+\n \n def Nakagami(name, mu, omega):\n     r\"\"\"\n@@ -2227,6 +2279,10 @@ def pdf(self, x):\n         nu = self.nu\n         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)\n \n+    def _cdf(self, x):\n+        nu = self.nu\n+        return S.Half + x * hyper([S.Half, (nu + 1) / 2], [S(3)/2], -x**2 / nu) / (sqrt(nu) * beta_fn(S(1)/2, nu/2))\n+\n \n def StudentT(name, nu):\n     r\"\"\"\n@@ -2554,6 +2610,11 @@ def pdf(self, x):\n         return 1/factorial(\n             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))\n \n+    def _cdf(self, x):\n+        n = self.n\n+        k = Dummy(\"k\")\n+        return 1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x)))\n+\n \n \n def UniformSum(name, n):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 486385,
  "num_received_chars": 33401,
  "elapsed_time": 256.2693786621094,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}