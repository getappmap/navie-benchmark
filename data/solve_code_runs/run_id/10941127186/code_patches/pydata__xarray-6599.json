{
  "instance_id": "pydata__xarray-6599",
  "edit_test_file": "xarray/tests/test_computation.py",
  "code_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe0..9968803 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1918,17 +1918,17 @@ def polyval(\n \n \n def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n-    \"\"\"Converts all datetime64 variables to float64\n+    \"\"\"Converts all datetime64 and timedelta64 variables to float64\n \n     Parameters\n     ----------\n     data : DataArray or Dataset\n-        Variables with possible datetime dtypes.\n+        Variables with possible datetime or timedelta dtypes.\n \n     Returns\n     -------\n     DataArray or Dataset\n-        Variables with datetime64 dtypes converted to float64.\n+        Variables with datetime64 and timedelta64 dtypes converted to float64.\n     \"\"\"\n     from .dataset import Dataset\n \n@@ -1941,6 +1941,10 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":\n+            return x.copy(\n+                data=x.data.astype('timedelta64[ns]').astype(float)\n+            )\n         return x\n \n     if isinstance(data, Dataset):\n",
  "test_patch": "diff --git a/xarray/tests/test_polyval_timedelta.py b/xarray/tests/test_polyval_timedelta.py\nnew file mode 100644\nindex 0000000..665f436\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta.py\n@@ -0,0 +1,43 @@\n+from __future__ import annotations\n+\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_polyval_timedelta64_coordinates():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    result = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Assert that the result is incorrect as described in the issue\n+    expected_wrong_result = np.array([\n+        [1.59620685e+30, 1.59620689e+30, 1.59620693e+30, 1.59620697e+30, 1.59620700e+30, 1.59620704e+30],\n+        [1.11164807e+30, 1.11164810e+30, 1.11164812e+30, 1.11164815e+30, 1.11164818e+30, 1.11164821e+30],\n+        [1.90975722e+30, 1.90975727e+30, 1.90975732e+30, 1.90975736e+30, 1.90975741e+30, 1.90975746e+30]\n+    ])\n+    assert np.allclose(result.values, expected_wrong_result)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_polyval_timedelta_inverted.py b/xarray/tests/test_polyval_timedelta_inverted.py\nnew file mode 100644\nindex 0000000..06e0ec2\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta_inverted.py\n@@ -0,0 +1,46 @@\n+from __future__ import annotations\n+\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_polyval_timedelta64_coordinates():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    result = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Assert that the result is incorrect as described in the issue\n+    expected_wrong_result = np.array([\n+        [1.59620685e+30, 1.59620689e+30, 1.59620693e+30, 1.59620697e+30, 1.59620700e+30, 1.59620704e+30],\n+        [1.11164807e+30, 1.11164810e+30, 1.11164812e+30, 1.11164815e+30, 1.11164818e+30, 1.11164821e+30],\n+        [1.90975722e+30, 1.90975727e+30, 1.90975732e+30, 1.90975736e+30, 1.90975741e+30, 1.90975746e+30]\n+    ])\n+    \n+    # Modify the assertion to fail when the bug is observed\n+    if np.allclose(result.values, expected_wrong_result):\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3110853,
  "num_received_chars": 68009,
  "elapsed_time": 565.1780588626862,
  "lint_repair_count": 6,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}