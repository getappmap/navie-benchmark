{
  "instance_id": "django__django-13933",
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d..e03a380 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'],\n+                code='invalid_choice',\n+                params={'value': value},\n+            )\n         return value\n \n     def validate(self, value):\n",
  "test_patch": "diff --git a/tests/model_forms/test_invalid_choice_handling.py b/tests/model_forms/test_invalid_choice_handling.py\nnew file mode 100644\nindex 0000000..141f59c\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_choice_handling.py\n@@ -0,0 +1,19 @@\n+import datetime\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+from .models import Category\n+\n+class ModelChoiceFieldInvalidChoiceTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_error_message(self):\n+        f = forms.ModelChoiceField(Category.objects.all())\n+        invalid_value = 999  # Assuming this ID does not exist\n+        expected_message = \"['Select a valid choice. That choice is not one of the available choices.']\"\n+        with self.assertRaisesMessage(ValidationError, expected_message):\n+            f.clean(invalid_value)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_invalid_choice_handling_inverted.py b/tests/model_forms/test_invalid_choice_handling_inverted.py\nnew file mode 100644\nindex 0000000..db99869\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_choice_handling_inverted.py\n@@ -0,0 +1,24 @@\n+import datetime\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+from .models import Category\n+\n+class ModelChoiceFieldInvalidChoiceTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_error_message(self):\n+        f = forms.ModelChoiceField(Category.objects.all())\n+        invalid_value = 999  # Assuming this ID does not exist\n+        # Alter the expected message to include the invalid value\n+        expected_message = \"__BUG__HERE__\"\n+        try:\n+            f.clean(invalid_value)\n+        except ValidationError as e:\n+            # Check if the error message does not contain the invalid value\n+            if str(invalid_value) not in str(e):\n+                raise AssertionError(expected_message)\n\\ No newline at end of file\n",
  "num_sent_chars": 1947980,
  "num_received_chars": 77971,
  "elapsed_time": 462.2897436618805,
  "lint_repair_count": 13,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}