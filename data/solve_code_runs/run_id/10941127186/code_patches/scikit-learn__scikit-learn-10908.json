{
  "instance_id": "scikit-learn__scikit-learn-10908",
  "edit_test_file": "sklearn/feature_extraction/tests/test_text.py",
  "code_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 9b1ebd6..8878dda 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -993,6 +993,12 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):\n \n     def get_feature_names(self):\n         \"\"\"Array mapping from feature integer indices to feature name\"\"\"\n+        if not hasattr(self, 'vocabulary_'):\n+            if self.vocabulary is not None:\n+                self._validate_vocabulary()\n+            else:\n+                raise ValueError(\"Vocabulary wasn't fitted or provided\")\n+\n         self._check_vocabulary()\n \n         return [t for t, i in sorted(six.iteritems(self.vocabulary_),\n",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\nnew file mode 100644\nindex 0000000..3508b0f\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\n@@ -0,0 +1,10 @@\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.utils.testing import assert_raises\n+\n+def test_countvectorizer_get_feature_names_with_vocabulary():\n+    # Initialize CountVectorizer with a predefined vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Check if NotFittedError is raised when calling get_feature_names\n+    assert_raises(ValueError, vectorizer.get_feature_names)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\nnew file mode 100644\nindex 0000000..736aa1d\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\n@@ -0,0 +1,11 @@\n+from sklearn.feature_extraction.text import CountVectorizer\n+import pytest\n+\n+def test_countvectorizer_get_feature_names_with_vocabulary():\n+    # Initialize CountVectorizer with a predefined vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Check if ValueError is raised when calling get_feature_names\n+    with pytest.raises(ValueError, match=\"__BUG__HERE__\"):\n+        vectorizer.get_feature_names()\n\\ No newline at end of file\n",
  "num_sent_chars": 1486314,
  "num_received_chars": 39145,
  "elapsed_time": 312.6574831008911,
  "lint_repair_count": 5,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}