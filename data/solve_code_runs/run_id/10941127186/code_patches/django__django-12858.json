{
  "instance_id": "django__django-12858",
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6c9e9d3..52e294e 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1747,7 +1747,7 @@ class Model(metaclass=ModelBase):\n                     else:\n                         _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n-                    if fld is None or fld.get_transform(part) is None:\n+                    if fld is None or (fld.get_transform(part) is None and part != 'isnull'):\n                         errors.append(\n                             checks.Error(\n                                 \"'ordering' refers to the nonexistent field, \"\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_ordering_fields.py b/tests/invalid_models_tests/test_ordering_fields.py\nnew file mode 100644\nindex 0000000..034eedc\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_ordering_fields.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+@isolate_apps('invalid_models_tests')\n+class OrderingFieldsTests(SimpleTestCase):\n+\n+    def test_ordering_with_nonexistent_lookup(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['supply__product__parent__isnull']\n+\n+        self.assertEqual(Stock.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'supply__product__parent__isnull'.\",\n+                obj=Stock,\n+                id='models.E015',\n+            )\n+        ])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_ordering_fields_inverted.py b/tests/invalid_models_tests/test_ordering_fields_inverted.py\nnew file mode 100644\nindex 0000000..0d4001e\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_ordering_fields_inverted.py\n@@ -0,0 +1,35 @@\n+import unittest\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+@isolate_apps('invalid_models_tests')\n+class OrderingFieldsTests(SimpleTestCase):\n+\n+    def test_ordering_with_nonexistent_lookup(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['supply__product__parent__isnull']\n+\n+        # Altered the test to fail when the issue is observed\n+        with self.assertRaises(AssertionError, msg=\"__BUG__HERE__\"):\n+            self.assertEqual(Stock.check(), [\n+                Error(\n+                    \"'ordering' refers to the nonexistent field, related field, \"\n+                    \"or lookup 'supply__product__parent__isnull'.\",\n+                    obj=Stock,\n+                    id='models.E015',\n+                )\n+            ])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 536338,
  "num_received_chars": 15040,
  "elapsed_time": 109.30916953086853,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}