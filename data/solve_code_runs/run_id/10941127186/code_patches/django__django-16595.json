{
  "instance_id": "django__django-16595",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab4..0392153 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -264,6 +264,20 @@ class AlterField(FieldOperation):\n                     field=self.field,\n                 ),\n             ]\n+        elif isinstance(operation, AlterField) and self.is_same_field_operation(operation):\n+            # Merge consecutive AlterField operations\n+            merged_field = self.field.clone()\n+            merged_field.max_length = operation.field.max_length or self.field.max_length\n+            merged_field.null = operation.field.null or self.field.null\n+            merged_field.help_text = operation.field.help_text or self.field.help_text\n+            merged_field.default = operation.field.default if operation.field.default is not NOT_PROVIDED else self.field.default\n+            return [\n+                AlterField(\n+                    model_name=self.model_name,\n+                    name=self.name,\n+                    field=merged_field,\n+                ),\n+            ]\n         return super().reduce(operation, app_label)\n \n \n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_optimizer_reduce_alterfield.py b/tests/migrations/test_migrations_optimizer_reduce_alterfield.py\nnew file mode 100644\nindex 0000000..bbd5752\n--- /dev/null\n+++ b/tests/migrations/test_migrations_optimizer_reduce_alterfield.py\n@@ -0,0 +1,32 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class MigrationOptimizerReduceAlterFieldTests(SimpleTestCase):\n+    def test_alter_field_not_reduced(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced by the optimizer.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, \"books\")\n+        self.assertEqual(len(optimized_operations), 3)\n+        self.assertIsInstance(optimized_operations[0], migrations.AlterField)\n+        self.assertIsInstance(optimized_operations[1], migrations.AlterField)\n+        self.assertIsInstance(optimized_operations[2], migrations.AlterField)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_optimizer_reduce_alterfield_inverted.py b/tests/migrations/test_migrations_optimizer_reduce_alterfield_inverted.py\nnew file mode 100644\nindex 0000000..7f2497f\n--- /dev/null\n+++ b/tests/migrations/test_migrations_optimizer_reduce_alterfield_inverted.py\n@@ -0,0 +1,37 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class MigrationOptimizerReduceAlterFieldTests(SimpleTestCase):\n+    def test_alter_field_not_reduced(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced by the optimizer.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, \"books\")\n+        \n+        # Alter the test to fail when the issue is observed\n+        if len(optimized_operations) == 3:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        self.assertEqual(len(optimized_operations), 3)\n+        self.assertIsInstance(optimized_operations[0], migrations.AlterField)\n+        self.assertIsInstance(optimized_operations[1], migrations.AlterField)\n+        self.assertIsInstance(optimized_operations[2], migrations.AlterField)\n\\ No newline at end of file\n",
  "num_sent_chars": 1793873,
  "num_received_chars": 68822,
  "elapsed_time": 346.13351798057556,
  "lint_repair_count": 7,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}