{
  "instance_id": "sphinx-doc__sphinx-8269",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc..690e93a 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -162,27 +162,29 @@ class CheckExternalLinksBuilder(Builder):\n             kwargs['headers'] = get_request_headers()\n \n             try:\n+                # First, try a HEAD request to check the HTTP status\n+                response = requests.head(req_url, config=self.app.config,\n+                                         auth=auth_info, **kwargs)\n+                response.raise_for_status()\n+                \n                 if anchor and self.app.config.linkcheck_anchors:\n-                    # Read the whole document and see if #anchor exists\n+                    # If HEAD is successful, read the document to check for #anchor\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n                         raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+            except HTTPError as err:\n+                # Handle HTTP errors before checking anchors\n+                if err.response.status_code == 401:\n+                    # We'll take \"Unauthorized\" as working.\n+                    return 'working', ' - unauthorized', 0\n+                elif err.response.status_code == 503:\n+                    # We'll take \"Service Unavailable\" as ignored.\n+                    return 'ignored', str(err), 0\n                 else:\n-                    try:\n-                        # try a HEAD request first, which should be easier on\n-                        # the server and the network\n-                        response = requests.head(req_url, config=self.app.config,\n-                                                 auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-                    except HTTPError:\n-                        # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n-                        response = requests.get(req_url, stream=True, config=self.app.config,\n-                                                auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n+                    return 'broken', str(err), 0\n             except HTTPError as err:\n                 if err.response.status_code == 401:\n                     # We'll take \"Unauthorized\" as working.\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1233376,
  "num_received_chars": 21345,
  "elapsed_time": 178.28055548667908,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}