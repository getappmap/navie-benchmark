{
  "instance_id": "django__django-11790",
  "edit_test_file": "tests/auth_tests/test_forms.py",
  "code_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0..cff90f6 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -188,10 +188,10 @@ class AuthenticationForm(forms.Form):\n         self.request = request\n         self.user_cache = None\n         super().__init__(*args, **kwargs)\n-\n         # Set the max length and label for the \"username\" field.\n         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n         self.fields['username'].max_length = self.username_field.max_length or 254\n+        self.fields['username'].widget.attrs['maxlength'] = self.fields['username'].max_length\n         if self.fields['username'].label is None:\n             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n",
  "test_patch": "diff --git a/tests/auth_tests/test_authentication_forms.py b/tests/auth_tests/test_authentication_forms.py\nnew file mode 100644\nindex 0000000..3d9b0e5\n--- /dev/null\n+++ b/tests/auth_tests/test_authentication_forms.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from django.contrib.auth.forms import AuthenticationForm\n+from django.contrib.auth.models import User\n+\n+class AuthenticationFormMaxLengthTest(unittest.TestCase):\n+\n+    def test_username_field_max_length_attribute(self):\n+        \"\"\"\n+        Test that the username field in AuthenticationForm does not have\n+        the maxlength HTML attribute set, reproducing the issue.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_field = form.fields['username']\n+        self.assertNotIn('maxlength', username_field.widget.attrs)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_authentication_forms_inverted.py b/tests/auth_tests/test_authentication_forms_inverted.py\nnew file mode 100644\nindex 0000000..a6e950a\n--- /dev/null\n+++ b/tests/auth_tests/test_authentication_forms_inverted.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from django.contrib.auth.forms import AuthenticationForm\n+from django.contrib.auth.models import User\n+\n+class AuthenticationFormMaxLengthTest(unittest.TestCase):\n+\n+    def test_username_field_max_length_attribute(self):\n+        \"\"\"\n+        Test that the username field in AuthenticationForm has\n+        the maxlength HTML attribute set, and raise an error if not.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_field = form.fields['username']\n+        self.assertIn('maxlength', username_field.widget.attrs, \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 313293,
  "num_received_chars": 7033,
  "elapsed_time": 77.98461365699768,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}