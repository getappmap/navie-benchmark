{
  "instance_id": "astropy__astropy-12907",
  "edit_test_file": "astropy/modeling/tests/test_separable.py",
  "code_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27..765664b 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -98,9 +98,28 @@ def separability_matrix(transform):\n         return np.ones((transform.n_outputs, transform.n_inputs),\n                        dtype=np.bool_)\n     separable_matrix = _separable(transform)\n+    # Recursively evaluate separability for nested CompoundModels\n+    if isinstance(transform, CompoundModel):\n+        left_matrix = separability_matrix(transform.left)\n+        right_matrix = separability_matrix(transform.right)\n+        separable_matrix = _combine_matrices(left_matrix, right_matrix, transform.op)\n     separable_matrix = np.where(separable_matrix != 0, True, False)\n     return separable_matrix\n \n+def _combine_matrices(left_matrix, right_matrix, operation):\n+    \"\"\"\n+    Combine separability matrices of two sub-models based on the operation.\n+    \"\"\"\n+    if operation == '&':\n+        return np.block([\n+            [left_matrix, np.zeros((left_matrix.shape[0], right_matrix.shape[1]), dtype=bool)],\n+            [np.zeros((right_matrix.shape[0], left_matrix.shape[1]), dtype=bool), right_matrix]\n+        ])\n+    elif operation == '|':\n+        return np.dot(left_matrix, right_matrix)\n+    else:\n+        raise ValueError(f\"Unsupported operation: {operation}\")\n+\n \n def _compute_n_outputs(left, right):\n     \"\"\"\n",
  "test_patch": "diff --git a/astropy/modeling/tests/test_nested_compound_models.py b/astropy/modeling/tests/test_nested_compound_models.py\nnew file mode 100644\nindex 0000000..6b54730\n--- /dev/null\n+++ b/astropy/modeling/tests/test_nested_compound_models.py\n@@ -0,0 +1,25 @@\n+import numpy as np\n+from numpy.testing import assert_allclose\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+def test_nested_compound_model_separability():\n+    # Create a simple compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Create a more complex compound model by nesting\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    \n+    # Expected separability matrix for the nested compound model\n+    expected_separability = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, True],\n+        [False, False, True, True]\n+    ])\n+    \n+    # Compute the separability matrix for the nested compound model\n+    computed_separability = separability_matrix(nested_cm)\n+    \n+    # Assert that the computed separability matrix matches the expected incorrect output\n+    assert_allclose(computed_separability, expected_separability)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/modeling/tests/test_nested_compound_models_inverted.py b/astropy/modeling/tests/test_nested_compound_models_inverted.py\nnew file mode 100644\nindex 0000000..d882bed\n--- /dev/null\n+++ b/astropy/modeling/tests/test_nested_compound_models_inverted.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+from numpy.testing import assert_allclose\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+def test_nested_compound_model_separability():\n+    # Create a simple compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Create a more complex compound model by nesting\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    \n+    # Expected correct separability matrix for the nested compound model\n+    expected_separability = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    \n+    # Compute the separability matrix for the nested compound model\n+    computed_separability = separability_matrix(nested_cm)\n+    \n+    # Assert that the computed separability matrix matches the expected correct output\n+    # This should fail if the bug is present\n+    try:\n+        assert_allclose(computed_separability, expected_separability)\n+    except AssertionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1658629,
  "num_received_chars": 81119,
  "elapsed_time": 558.5764768123627,
  "lint_repair_count": 5,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}