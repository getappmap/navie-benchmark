{
  "instance_id": "django__django-12325",
  "edit_test_file": "tests/one_to_one/tests.py",
  "code_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6b..f86763f 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -240,21 +240,20 @@ class Options:\n \n         if self.pk is None:\n             if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n+                # Find the field with parent_link=True to promote as the primary key.\n+                parent_link_field = None\n+                for field in self.local_fields:\n+                    if field.remote_field.parent_link:\n+                        parent_link_field = field\n+                        break\n+\n+                if parent_link_field is None:\n                     raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n+                        'No field with parent_link=True found in %s.' % self.object_name\n                     )\n+\n+                parent_link_field.primary_key = True\n+                self.setup_pk(parent_link_field)\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n",
  "test_patch": "diff --git a/tests/one_to_one/test_document_onetoone_ordering.py b/tests/one_to_one/test_document_onetoone_ordering.py\nnew file mode 100644\nindex 0000000..8c01839\n--- /dev/null\n+++ b/tests/one_to_one/test_document_onetoone_ordering.py\n@@ -0,0 +1,15 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Document(models.Model):\n+    pass\n+\n+\n+class MTIOneToOneOrderingTest(TestCase):\n+    def test_mti_onetoone_setup_improperly_configured(self):\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to one_to_one.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/one_to_one/test_document_onetoone_ordering_inverted.py b/tests/one_to_one/test_document_onetoone_ordering_inverted.py\nnew file mode 100644\nindex 0000000..4bbd9e9\n--- /dev/null\n+++ b/tests/one_to_one/test_document_onetoone_ordering_inverted.py\n@@ -0,0 +1,22 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Document(models.Model):\n+    pass\n+\n+\n+class MTIOneToOneOrderingTest(TestCase):\n+    def test_mti_onetoone_setup_improperly_configured(self):\n+        try:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        except ImproperlyConfigured as e:\n+            if str(e) == \"Add parent_link=True to one_to_one.Picking.origin.\":\n+                raise AssertionError(\"__BUG__HERE__\")\n+            else:\n+                raise\n+        else:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1547492,
  "num_received_chars": 55586,
  "elapsed_time": 498.978750705719,
  "lint_repair_count": 0,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}