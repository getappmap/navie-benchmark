{
  "instance_id": "django__django-13821",
  "edit_test_file": "tests/backends/sqlite/test_operations.py",
  "code_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex ab4ea70..dcff553 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -64,8 +64,8 @@ def list_aggregate(function):\n \n \n def check_sqlite_version():\n-    if Database.sqlite_version_info < (3, 8, 3):\n-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)\n+    if Database.sqlite_version_info < (3, 9, 0):\n+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)\n \n \n check_sqlite_version()\n\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\nindex 3348256..6931c93 100644\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -33,8 +33,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     # Is \"ALTER TABLE ... RENAME COLUMN\" supported?\n     can_alter_table_rename_column = Database.sqlite_version_info >= (3, 25, 0)\n     supports_parentheses_in_compound = False\n-    # Deferred constraint checks can be emulated on SQLite < 3.20 but not in a\n-    # reasonably performant way.\n     supports_pragma_foreign_key_check = Database.sqlite_version_info >= (3, 20, 0)\n     can_defer_constraint_checks = supports_pragma_foreign_key_check\n     supports_functions_in_partial_indexes = Database.sqlite_version_info >= (3, 15, 0)\n@@ -66,12 +64,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n                 'model_fields.test_integerfield.PositiveIntegerFieldTests.test_negative_values',\n             },\n         }\n-        if Database.sqlite_version_info < (3, 27):\n-            skips.update({\n-                'Nondeterministic failure on SQLite < 3.27.': {\n-                    'expressions_window.tests.WindowFunctionTests.test_subquery_row_range_rank',\n-                },\n-            })\n         if self.connection.is_in_memory_db():\n             skips.update({\n                 \"the sqlite backend's close() method is a no-op when using an \"\n",
  "test_patch": "diff --git a/tests/backends/sqlite/test_sqlite_version_support.py b/tests/backends/sqlite/test_sqlite_version_support.py\nnew file mode 100644\nindex 0000000..277ee11\n--- /dev/null\n+++ b/tests/backends/sqlite/test_sqlite_version_support.py\n@@ -0,0 +1,12 @@\n+import unittest\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import Database\n+\n+class SQLiteVersionSupportTests(unittest.TestCase):\n+    def test_sqlite_version_support(self):\n+        # This test checks if the SQLite version is less than 3.9.0\n+        # and expects an ImproperlyConfigured exception to be raised.\n+        if Database.sqlite_version_info < (3, 9, 0):\n+            with self.assertRaises(ImproperlyConfigured) as cm:\n+                raise ImproperlyConfigured('SQLite 3.9.0 or later is required.')\n+            self.assertEqual(str(cm.exception), 'SQLite 3.9.0 or later is required.')\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 1636078,
  "num_received_chars": 38842,
  "elapsed_time": 333.59967017173767,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}