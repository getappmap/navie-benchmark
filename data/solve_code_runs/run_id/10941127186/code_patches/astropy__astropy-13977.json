{
  "instance_id": "astropy__astropy-13977",
  "edit_test_file": "astropy/units/tests/test_quantity.py",
  "code_patch": "diff --git a/astropy/units/function/core.py b/astropy/units/function/core.py\nindex f37684c..5076d36 100644\n--- a/astropy/units/function/core.py\n+++ b/astropy/units/function/core.py\n@@ -621,11 +621,12 @@ class FunctionQuantity(Quantity):\n         # And really it should just return NotImplemented, since possibly\n         # another argument might know what to do.\n         if function not in self._supported_ufuncs:\n-            raise UnitTypeError(\n-                f\"Cannot use ufunc '{function.__name__}' with function quantities\"\n-            )\n+            return NotImplemented\n \n-        return super().__array_ufunc__(function, method, *inputs, **kwargs)\n+        try:\n+            return super().__array_ufunc__(function, method, *inputs, **kwargs)\n+        except UnitTypeError:\n+            return NotImplemented\n \n     def _maybe_new_view(self, result):\n         \"\"\"View as function quantity if the unit is unchanged.\n",
  "test_patch": "diff --git a/astropy/units/tests/test_quantity_array_ufunc_handling.py b/astropy/units/tests/test_quantity_array_ufunc_handling.py\nnew file mode 100644\nindex 0000000..4334bd6\n--- /dev/null\n+++ b/astropy/units/tests/test_quantity_array_ufunc_handling.py\n@@ -0,0 +1,33 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the handling of Quantity.__array_ufunc__ for duck types.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_quantity_array_ufunc_handling():\n+    \"\"\"Test that Quantity.__array_ufunc__ raises ValueError for incompatible units.\"\"\"\n+    with pytest.raises(ValueError, match=\"Value not scalar compatible or convertible to an int, float, or complex array\"):\n+        _ = (1 * u.m) + DuckArray(1 * u.mm)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/units/tests/test_quantity_array_ufunc_handling_inverted.py b/astropy/units/tests/test_quantity_array_ufunc_handling_inverted.py\nnew file mode 100644\nindex 0000000..8edbfc7\n--- /dev/null\n+++ b/astropy/units/tests/test_quantity_array_ufunc_handling_inverted.py\n@@ -0,0 +1,35 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the handling of Quantity.__array_ufunc__ for duck types.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_quantity_array_ufunc_handling():\n+    \"\"\"Test that Quantity.__array_ufunc__ returns NotImplemented for incompatible units.\"\"\"\n+    try:\n+        _ = (1 * u.m) + DuckArray(1 * u.mm)\n+    except ValueError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1133717,
  "num_received_chars": 46392,
  "elapsed_time": 388.36309242248535,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}