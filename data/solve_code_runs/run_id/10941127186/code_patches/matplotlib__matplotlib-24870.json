{
  "instance_id": "matplotlib__matplotlib-24870",
  "edit_test_file": "lib/matplotlib/tests/test_contour.py",
  "code_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 144eade..f14cfea 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1123,7 +1123,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         \"\"\"\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7  # Default, hard-wired.\n+                if isinstance(self.zmin, bool) and isinstance(self.zmax, bool):\n+                    levels_arg = [0.5]  # Default for boolean arrays.\n+                else:\n+                    levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n         else:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_boolean_autodetect.py b/lib/matplotlib/tests/test_boolean_autodetect.py\nnew file mode 100644\nindex 0000000..e93d03b\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_boolean_autodetect.py\n@@ -0,0 +1,26 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import image_comparison\n+\n+def test_contour_boolean_autodetect():\n+    # Create a boolean 2D array\n+    ii, jj = np.ogrid[:100, :100]\n+    im = (ii + jj) % 20 < 10\n+\n+    # Plot using contour without specifying levels\n+    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n+    axs[0].contour(im)\n+    axs[0].set_title('Default Levels')\n+\n+    # Plot using contour with levels specified as [0.5]\n+    axs[1].contour(im, levels=[0.5])\n+    axs[1].set_title('Levels=[0.5]')\n+\n+    # Check if the default levels result in overlapping contours\n+    # This is the expected incorrect behavior that we want to reproduce\n+    assert len(axs[0].collections) > 1, \"Expected multiple overlapping contours for boolean input without levels specified.\"\n+\n+    # Check if specifying levels=[0.5] results in a single contour\n+    assert len(axs[1].collections) == 1, \"Expected a single contour for boolean input with levels=[0.5].\"\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_boolean_autodetect_inverted.py b/lib/matplotlib/tests/test_boolean_autodetect_inverted.py\nnew file mode 100644\nindex 0000000..e93eef9\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_boolean_autodetect_inverted.py\n@@ -0,0 +1,26 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import image_comparison\n+\n+def test_contour_boolean_autodetect():\n+    # Create a boolean 2D array\n+    ii, jj = np.ogrid[:100, :100]\n+    im = (ii + jj) % 20 < 10\n+\n+    # Plot using contour without specifying levels\n+    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n+    axs[0].contour(im)\n+    axs[0].set_title('Default Levels')\n+\n+    # Plot using contour with levels specified as [0.5]\n+    axs[1].contour(im, levels=[0.5])\n+    axs[1].set_title('Levels=[0.5]')\n+\n+    # Check if the default levels result in overlapping contours\n+    # This is the expected incorrect behavior that we want to reproduce\n+    assert len(axs[0].collections) == 1, \"__BUG__HERE__\"\n+\n+    # Check if specifying levels=[0.5] results in a single contour\n+    assert len(axs[1].collections) == 1, \"Expected a single contour for boolean input with levels=[0.5].\"\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "num_sent_chars": 1237831,
  "num_received_chars": 39029,
  "elapsed_time": 399.9352288246155,
  "lint_repair_count": 2,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}