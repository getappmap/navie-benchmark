{
  "instance_id": "sphinx-doc__sphinx-10323",
  "edit_test_file": "tests/test_directive_code.py",
  "code_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex dc44ed3..f7d5c7c 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,14 +343,20 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Calculate the leading whitespace from the first line of the included content\n+            leading_whitespace = len(lines[0]) - len(lines[0].lstrip())\n+            # Prepend the text with the calculated leading whitespace\n+            lines.insert(0, ' ' * leading_whitespace + prepend + '\\n')\n \n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            # Calculate the leading whitespace from the last line of the included content\n+            leading_whitespace = len(lines[-1]) - len(lines[-1].lstrip())\n+            # Append the text with the calculated leading whitespace\n+            lines.append(' ' * leading_whitespace + append + '\\n')\n \n         return lines\n \n",
  "test_patch": "diff --git a/tests/test_literalinclude_indent.py b/tests/test_literalinclude_indent.py\nnew file mode 100644\nindex 0000000..3e7adb9\n--- /dev/null\n+++ b/tests/test_literalinclude_indent.py\n@@ -0,0 +1,61 @@\n+import os\n+import pytest\n+from sphinx.directives.code import LiteralIncludeReader\n+from sphinx.config import Config\n+\n+DUMMY_CONFIG = Config({}, {})\n+\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_indentation(tmp_path):\n+    # Create a temporary pom.xml file\n+    pom_xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.8.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+          <debug>true</debug>\n+          <encoding>UTF-8</encoding>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>com.github.ekryd.sortpom</groupId>\n+        <artifactId>sortpom-maven-plugin</artifactId>\n+        <version>2.15.0</version>\n+        <configuration>\n+          <verifyFailOn>strict</verifyFailOn>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n+\"\"\"\n+    pom_xml_path = tmp_path / \"pom.xml\"\n+    pom_xml_path.write_text(pom_xml_content)\n+\n+    options = {\n+        'language': 'xml',\n+        'prepend': '      </plugin>',\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(str(pom_xml_path), options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+\n+    # Assert that the content is incorrectly indented\n+    expected_content = (\n+        \"      </plugin>\\n\"\n+        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"        <version>2.15.0</version>\\n\"\n+        \"        <configuration>\\n\"\n+        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"        </configuration>\\n\"\n+        \"      </plugin>\\n\"\n+    )\n+    assert content == expected_content\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 1458735,
  "num_received_chars": 44770,
  "elapsed_time": 267.9784326553345,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}