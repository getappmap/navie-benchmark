{
  "instance_id": "sphinx-doc__sphinx-8459",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 70cbc3b..ef73c62 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -18,6 +18,7 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util.typing import restify  # Import restify for type alias handling\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n@@ -63,7 +64,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], app.config.autodoc_type_aliases)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -79,7 +80,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n \n \n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], type_aliases: Dict[str, str]) -> None:\n     arguments = {}  # type: Dict[str, Dict[str, bool]]\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -107,6 +108,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if name == 'return':\n             continue\n \n+        # Apply type alias if available\n+        annotation = type_aliases.get(annotation, annotation)\n+\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n@@ -120,9 +124,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n+        return_annotation = type_aliases.get(annotations['return'], annotations['return'])\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', return_annotation))\n         node += field\n \n \n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 3552552,
  "num_received_chars": 62261,
  "elapsed_time": 353.67005705833435,
  "lint_repair_count": 4,
  "test_generation_attempts": 3,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}