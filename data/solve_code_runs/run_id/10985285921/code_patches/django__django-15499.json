{
  "instance_id": "django__django-15499",
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31b..8ad40ae 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -170,6 +170,20 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            managers = list(self.managers) + list(operation.managers)\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_create_model_optimization.py b/tests/migrations/test_migrations_create_model_optimization.py\nnew file mode 100644\nindex 0000000..03a5018\n--- /dev/null\n+++ b/tests/migrations/test_migrations_create_model_optimization.py\n@@ -0,0 +1,40 @@\n+import unittest\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from .models import FoodManager, FoodQuerySet\n+\n+class TestCreateModelOptimization(unittest.TestCase):\n+    def optimize(self, operations, app_label):\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def test_create_model_alter_model_managers_optimization(self):\n+        \"\"\"\n+        Test that CreateModel followed by AlterModelManagers is optimized to just CreateModel.\n+        \"\"\"\n+        initial_operations = [\n+            migrations.CreateModel(\n+                name=\"Pony\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                ],\n+            ),\n+            migrations.AlterModelManagers(\n+                name=\"Pony\",\n+                managers=[\n+                    (\"food_qs\", FoodQuerySet.as_manager()),\n+                    (\"food_mgr\", FoodManager(\"a\", \"b\")),\n+                    (\"food_mgr_kwargs\", FoodManager(\"x\", \"y\", 3, 4)),\n+                ],\n+            ),\n+        ]\n+\n+        optimized_operations = self.optimize(initial_operations, \"testapp\")\n+\n+        # Check that the optimization did not occur, i.e., both operations are still present\n+        self.assertEqual(len(optimized_operations), 2)\n+        self.assertIsInstance(optimized_operations[0], migrations.CreateModel)\n+        self.assertIsInstance(optimized_operations[1], migrations.AlterModelManagers)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_create_model_optimization_inverted.py b/tests/migrations/test_migrations_create_model_optimization_inverted.py\nnew file mode 100644\nindex 0000000..9c2c8fd\n--- /dev/null\n+++ b/tests/migrations/test_migrations_create_model_optimization_inverted.py\n@@ -0,0 +1,39 @@\n+import unittest\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from .models import FoodManager, FoodQuerySet\n+\n+class TestCreateModelOptimization(unittest.TestCase):\n+    def optimize(self, operations, app_label):\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def test_create_model_alter_model_managers_optimization(self):\n+        \"\"\"\n+        Test that CreateModel followed by AlterModelManagers is optimized to just CreateModel.\n+        \"\"\"\n+        initial_operations = [\n+            migrations.CreateModel(\n+                name=\"Pony\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                ],\n+            ),\n+            migrations.AlterModelManagers(\n+                name=\"Pony\",\n+                managers=[\n+                    (\"food_qs\", FoodQuerySet.as_manager()),\n+                    (\"food_mgr\", FoodManager(\"a\", \"b\")),\n+                    (\"food_mgr_kwargs\", FoodManager(\"x\", \"y\", 3, 4)),\n+                ],\n+            ),\n+        ]\n+\n+        optimized_operations = self.optimize(initial_operations, \"testapp\")\n+\n+        # Check that the optimization did occur, i.e., only one operation is present\n+        if len(optimized_operations) != 1 or not isinstance(optimized_operations[0], migrations.CreateModel):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 1653759,
  "num_received_chars": 15214,
  "elapsed_time": 98.51273655891418,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}