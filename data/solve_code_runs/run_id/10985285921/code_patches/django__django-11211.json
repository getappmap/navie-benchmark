{
  "instance_id": "django__django-11211",
  "edit_test_file": "tests/prefetch_related/test_uuid.py",
  "code_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb..2b11014 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -1,4 +1,5 @@\n from collections import defaultdict\n+import uuid\n \n from django.contrib.contenttypes.models import ContentType\n from django.core import checks\n@@ -202,8 +203,10 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                fk_value = getattr(obj, self.fk_field)\n+                if isinstance(model._meta.pk, models.UUIDField):\n+                    fk_value = uuid.UUID(fk_value)\n+                return (model._meta.pk.get_prep_value(fk_value), model)\n \n         return (\n             ret_val,\n",
  "test_patch": "diff --git a/tests/prefetch_related/test_gfk_with_uuid_prefetch.py b/tests/prefetch_related/test_gfk_with_uuid_prefetch.py\nnew file mode 100644\nindex 0000000..7a9b380\n--- /dev/null\n+++ b/tests/prefetch_related/test_gfk_with_uuid_prefetch.py\n@@ -0,0 +1,31 @@\n+import uuid\n+from django.test import TestCase\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.db import models\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n+class TestGFKWithUUIDPrefetch(TestCase):\n+    def test_gfk_with_uuid_prefetch_related(self):\n+        foo_instance = Foo.objects.create()\n+        bar_instance = Bar.objects.create(\n+            foo_content_type=ContentType.objects.get_for_model(Foo),\n+            foo_object_id=str(foo_instance.id)\n+        )\n+\n+        # Attempt to prefetch related 'foo' and check if it returns None\n+        with self.assertNumQueries(2):\n+            bar_with_prefetch = Bar.objects.prefetch_related('foo').get(pk=bar_instance.pk)\n+        \n+        # Assert that the 'foo' attribute is None, which reproduces the issue\n+        self.assertIsNone(bar_with_prefetch.foo)\n",
  "test_inverted_patch": "diff --git a/tests/prefetch_related/test_gfk_with_uuid_prefetch_inverted.py b/tests/prefetch_related/test_gfk_with_uuid_prefetch_inverted.py\nnew file mode 100644\nindex 0000000..fc6f3dc\n--- /dev/null\n+++ b/tests/prefetch_related/test_gfk_with_uuid_prefetch_inverted.py\n@@ -0,0 +1,32 @@\n+import uuid\n+from django.test import TestCase\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.db import models\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n+class TestGFKWithUUIDPrefetch(TestCase):\n+    def test_gfk_with_uuid_prefetch_related(self):\n+        foo_instance = Foo.objects.create()\n+        bar_instance = Bar.objects.create(\n+            foo_content_type=ContentType.objects.get_for_model(Foo),\n+            foo_object_id=str(foo_instance.id)\n+        )\n+\n+        # Attempt to prefetch related 'foo' and check if it returns None\n+        with self.assertNumQueries(2):\n+            bar_with_prefetch = Bar.objects.prefetch_related('foo').get(pk=bar_instance.pk)\n+        \n+        # Assert that the 'foo' attribute is not None, which should fail if the bug is present\n+        if bar_with_prefetch.foo is None:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2229191,
  "num_received_chars": 33933,
  "elapsed_time": 188.6217405796051,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}