{
  "instance_id": "django__django-11740",
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "code_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 0dc1c77..bf2fc06 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -912,6 +912,15 @@ class MigrationAutodetector:\n             old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)\n             old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)\n             new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+            # Check if the field is changing to a ForeignKey and add dependencies\n+            if isinstance(new_field, models.ForeignKey) and not isinstance(old_field, models.ForeignKey):\n+                dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                self.add_operation(app_label, operations.AlterField(\n+                    model_name=model_name,\n+                    name=field_name,\n+                    field=new_field,\n+                ), dependencies=dependencies)\n+                continue\n             # Implement any model renames on relations; these are handled by RenameModel\n             # so we need to exclude them from the comparison\n             if hasattr(new_field, \"remote_field\") and getattr(new_field.remote_field, \"model\", None):\n",
  "test_patch": "diff --git a/tests/migrations/test_fk_dependency_issue.py b/tests/migrations/test_fk_dependency_issue.py\nnew file mode 100644\nindex 0000000..1bd5cb4\n--- /dev/null\n+++ b/tests/migrations/test_fk_dependency_issue.py\n@@ -0,0 +1,57 @@\n+import uuid\n+from django.db import models\n+from django.test import TestCase\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.questioner import MigrationQuestioner\n+\n+class FKDependencyIssueTest(TestCase):\n+    def make_project_state(self, model_states):\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def get_changes(self, before_states, after_states, questioner=None):\n+        return MigrationAutodetector(\n+            self.make_project_state(before_states),\n+            self.make_project_state(after_states),\n+            questioner,\n+        )._detect_changes()\n+\n+    def test_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Test that changing a UUIDField to a ForeignKey does not create a dependency.\n+        \"\"\"\n+        # Initial state with UUIDField\n+        before = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.UUIDField(null=True, blank=True)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ]),\n+        ]\n+\n+        # State after changing UUIDField to ForeignKey\n+        after = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ]),\n+        ]\n+\n+        # Detect changes\n+        changes = self.get_changes(before, after, MigrationQuestioner({\"ask_rename\": True}))\n+\n+        # Assert that there is no dependency created for App2\n+        self.assertIn(\"testapp1\", changes)\n+        self.assertNotIn(\"testapp2\", changes[\"testapp1\"][0].dependencies)\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_fk_dependency_issue_inverted.py b/tests/migrations/test_fk_dependency_issue_inverted.py\nnew file mode 100644\nindex 0000000..bb0a696\n--- /dev/null\n+++ b/tests/migrations/test_fk_dependency_issue_inverted.py\n@@ -0,0 +1,57 @@\n+import uuid\n+from django.db import models\n+from django.test import TestCase\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.questioner import MigrationQuestioner\n+\n+class FKDependencyIssueTest(TestCase):\n+    def make_project_state(self, model_states):\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def get_changes(self, before_states, after_states, questioner=None):\n+        return MigrationAutodetector(\n+            self.make_project_state(before_states),\n+            self.make_project_state(after_states),\n+            questioner,\n+        )._detect_changes()\n+\n+    def test_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Test that changing a UUIDField to a ForeignKey does not create a dependency.\n+        \"\"\"\n+        # Initial state with UUIDField\n+        before = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.UUIDField(null=True, blank=True)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ]),\n+        ]\n+\n+        # State after changing UUIDField to ForeignKey\n+        after = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ]),\n+        ]\n+\n+        # Detect changes\n+        changes = self.get_changes(before, after, MigrationQuestioner({\"ask_rename\": True}))\n+\n+        # Assert that there is a dependency created for App2\n+        if \"testapp2\" not in changes[\"testapp1\"][0].dependencies:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 6014575,
  "num_received_chars": 115544,
  "elapsed_time": 574.3633887767792,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}