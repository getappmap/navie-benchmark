{
  "instance_id": "scikit-learn__scikit-learn-25102",
  "edit_test_file": "sklearn/utils/tests/test_set_output.py",
  "code_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c..c0bb463 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -2,6 +2,7 @@ from functools import wraps\n \n from scipy.sparse import issparse\n \n+import pandas as pd\n from . import check_pandas_support\n from .._config import get_config\n from ._available_if import available_if\n@@ -12,6 +13,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    dtypes=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -33,6 +35,9 @@ def _wrap_in_pandas_container(\n         `data_to_wrap` is **not** a dataframe, then columns are\n         `range(n_features)`.\n \n+    dtypes : dict, optional\n+        A dictionary mapping column names to dtypes to enforce on the output DataFrame.\n+\n     index : array-like, default=None\n         Index for data.\n \n@@ -57,9 +62,18 @@ def _wrap_in_pandas_container(\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if dtypes is not None:\n+            for col, dtype in dtypes.items():\n+                if col in data_to_wrap.columns:\n+                    data_to_wrap[col] = data_to_wrap[col].astype(dtype)\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        for col, dtype in dtypes.items():\n+            if col in df.columns:\n+                df[col] = df[col].astype(dtype)\n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,10 +141,15 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    dtypes = getattr(original_input, \"dtypes\", None)\n+    if dtypes is not None:\n+        dtypes = {col: dtype for col, dtype in zip(original_input.columns, dtypes)}\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n         columns=estimator.get_feature_names_out,\n+        dtypes=dtypes,\n     )\n \n \n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_preserve_dtypes.py b/sklearn/utils/tests/test_preserve_dtypes.py\nnew file mode 100644\nindex 0000000..5fe0e9d\n--- /dev/null\n+++ b/sklearn/utils/tests/test_preserve_dtypes.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import pandas as pd\n+from sklearn.datasets import load_iris\n+from sklearn.feature_selection import SelectKBest\n+from sklearn.feature_selection import chi2\n+\n+def test_preserve_dtypes_issue():\n+    \"\"\"Test to reproduce the dtype preservation issue with pandas output.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2)\n+    selector.set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Assert that the dtypes are not preserved, which is the current issue\n+    expected_dtypes = pd.Series([np.float64, np.float64], index=[\"petal length (cm)\", \"cat\"])\n+    pd.testing.assert_series_equal(X_out.dtypes, expected_dtypes)\n",
  "test_inverted_patch": "diff --git a/sklearn/utils/tests/test_preserve_dtypes_inverted.py b/sklearn/utils/tests/test_preserve_dtypes_inverted.py\nnew file mode 100644\nindex 0000000..dfdd9f0\n--- /dev/null\n+++ b/sklearn/utils/tests/test_preserve_dtypes_inverted.py\n@@ -0,0 +1,28 @@\n+import numpy as np\n+import pandas as pd\n+from sklearn.datasets import load_iris\n+from sklearn.feature_selection import SelectKBest\n+from sklearn.feature_selection import chi2\n+import pytest\n+\n+def test_preserve_dtypes_issue():\n+    \"\"\"Test to reproduce the dtype preservation issue with pandas output.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2)\n+    selector.set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Assert that the dtypes are preserved, which is the desired behavior\n+    expected_dtypes = pd.Series([np.float16, \"category\"], index=[\"petal length (cm)\", \"cat\"])\n+    try:\n+        pd.testing.assert_series_equal(X_out.dtypes, expected_dtypes)\n+    except AssertionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3543453,
  "num_received_chars": 139778,
  "elapsed_time": 656.2955384254456,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 5,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}