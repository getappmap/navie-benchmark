{
  "instance_id": "matplotlib__matplotlib-25775",
  "edit_test_file": "lib/matplotlib/tests/test_text.py",
  "code_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 4591316..d43c63b 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1283,6 +1283,21 @@ class Text(Artist):\n         self._fontproperties = FontProperties._from_any(fp).copy()\n         self.stale = True\n \n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = b\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"Return whether antialiased rendering is used.\"\"\"\n+        return self._antialiased\n+\n     def set_usetex(self, usetex):\n         \"\"\"\n         Parameters\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_text_antialias.py b/lib/matplotlib/tests/test_text_antialias.py\nnew file mode 100644\nindex 0000000..f832ee9\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialias.py\n@@ -0,0 +1,20 @@\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+\n+def test_text_antialiasing_issue():\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+\n+    # Create a Text object\n+    text = ax.text(0.5, 0.5, 'Test Text', fontsize=20)\n+\n+    # Check the antialiasing state of the Text object\n+    # This should be retrieved from the global rcParams\n+    # Since the Text object does not have get_antialiased method, this will raise an AttributeError\n+    try:\n+        antialiased_state = text.get_antialiased()\n+    except AttributeError as e:\n+        antialiased_state = str(e)\n+\n+    # Assert that the AttributeError is raised, indicating the issue\n+    assert \"has no attribute 'get_antialiased'\" in antialiased_state\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_text_antialias_inverted.py b/lib/matplotlib/tests/test_text_antialias_inverted.py\nnew file mode 100644\nindex 0000000..0d20a71\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialias_inverted.py\n@@ -0,0 +1,21 @@\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+\n+def test_text_antialiasing_issue():\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+\n+    # Create a Text object\n+    text = ax.text(0.5, 0.5, 'Test Text', fontsize=20)\n+\n+    # Check the antialiasing state of the Text object\n+    # This should be retrieved from the global rcParams\n+    # Since the Text object does not have get_antialiased method, this will raise an AttributeError\n+    try:\n+        antialiased_state = text.get_antialiased()\n+    except AttributeError as e:\n+        antialiased_state = str(e)\n+\n+    # Assert that the AttributeError is NOT raised, indicating the issue\n+    if \"has no attribute 'get_antialiased'\" in antialiased_state:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1376130,
  "num_received_chars": 26255,
  "elapsed_time": 189.0099959373474,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}