{
  "instance_id": "django__django-15695",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex f2ca8c8..75425e8 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -495,6 +495,11 @@ class BaseDatabaseSchemaEditor:\n \n     def rename_index(self, model, old_index, new_index):\n         if self.connection.features.can_rename_index:\n+            # Store the original autogenerated name if the index is unnamed\n+            if not old_index.name:\n+                old_index.name = self._create_index_name(\n+                    model._meta.db_table, [field.column for field in old_index.fields]\n+                )\n             self.execute(\n                 self._rename_index_sql(model, old_index.name, new_index.name),\n                 params=None,\n@@ -1373,6 +1378,11 @@ class BaseDatabaseSchemaEditor:\n         )\n \n     def _rename_index_sql(self, model, old_name, new_name):\n+        # Check if the old_name is autogenerated and needs to be restored\n+        if not old_name:\n+            old_name = self._create_index_name(\n+                model._meta.db_table, [field.column for field in model._meta.local_fields]\n+            )\n         return Statement(\n             self.sql_rename_index,\n             table=Table(model._meta.db_table, self.quote_name),\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2684796,
  "num_received_chars": 17281,
  "elapsed_time": 115.10530710220337,
  "lint_repair_count": 2,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}