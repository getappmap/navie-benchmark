{
  "instance_id": "sympy__sympy-13852",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66..7ddffc0 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -271,12 +271,15 @@ class polylog(Function):\n \n     @classmethod\n     def eval(cls, s, z):\n+        from sympy import Rational, pi, log\n         if z == 1:\n             return zeta(s)\n         elif z == -1:\n             return -dirichlet_eta(s)\n         elif z == 0:\n             return 0\n+        elif s == 2 and z == Rational(1, 2):\n+            return -log(2)**2/2 + pi**2/12\n \n     def fdiff(self, argindex=1):\n         s, z = self.args\n@@ -288,10 +291,10 @@ def _eval_rewrite_as_lerchphi(self, s, z):\n         return z*lerchphi(z, s, 1)\n \n     def _eval_expand_func(self, **hints):\n-        from sympy import log, expand_mul, Dummy, exp_polar, I\n+        from sympy import log, expand_mul, Dummy, I, pi\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1663592,
  "num_received_chars": 10177,
  "elapsed_time": 98.23024082183838,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}