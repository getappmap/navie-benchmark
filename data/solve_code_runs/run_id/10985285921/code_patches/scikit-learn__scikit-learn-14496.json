{
  "instance_id": "scikit-learn__scikit-learn-14496",
  "edit_test_file": "sklearn/cluster/tests/test_optics.py",
  "code_patch": "diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\nindex 4f7eb11..742675a 100755\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -438,6 +438,7 @@ if metric=\u2019precomputed\u2019.\n     _validate_size(min_samples, n_samples, 'min_samples')\n     if min_samples <= 1:\n         min_samples = max(2, min_samples * n_samples)\n+    min_samples = int(round(min_samples))  # Ensure min_samples is an integer\n \n     # Start all points as 'unprocessed' ##\n     reachability_ = np.empty(n_samples)\n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_optics_float_min_samples.py b/sklearn/cluster/tests/test_optics_float_min_samples.py\nnew file mode 100644\nindex 0000000..3a70fc8\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_optics_float_min_samples.py\n@@ -0,0 +1,14 @@\n+import numpy as np\n+import pytest\n+from sklearn.cluster import OPTICS\n+from sklearn.datasets import make_blobs\n+from sklearn.utils.testing import assert_raises\n+\n+def test_optics_float_min_samples():\n+    # Generate sample data\n+    X, _ = make_blobs(n_samples=100, centers=3, cluster_std=0.5, random_state=0)\n+\n+    # Test that passing a float for min_samples raises a TypeError\n+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)\n+    with assert_raises(TypeError, match=\"n_neighbors does not take <class 'numpy.float64'> value, enter integer value\"):\n+        clust.fit(X)\n",
  "test_inverted_patch": "diff --git a/sklearn/cluster/tests/test_optics_float_min_samples_inverted.py b/sklearn/cluster/tests/test_optics_float_min_samples_inverted.py\nnew file mode 100644\nindex 0000000..fc7714f\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_optics_float_min_samples_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+import pytest\n+from sklearn.cluster import OPTICS\n+from sklearn.datasets import make_blobs\n+\n+def test_optics_float_min_samples():\n+    # Generate sample data\n+    X, _ = make_blobs(n_samples=100, centers=3, cluster_std=0.5, random_state=0)\n+\n+    # Test that passing a float for min_samples raises a TypeError\n+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)\n+    try:\n+        clust.fit(X)\n+    except TypeError as e:\n+        assert str(e) == \"n_neighbors does not take <class 'numpy.float64'> value, enter integer value\", \"__BUG__HERE__\"\n+    else:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2973603,
  "num_received_chars": 16512,
  "elapsed_time": 281.9285912513733,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}