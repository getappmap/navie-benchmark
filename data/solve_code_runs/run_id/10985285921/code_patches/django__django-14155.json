{
  "instance_id": "django__django-14155",
  "edit_test_file": "tests/constraints/tests.py",
  "code_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24..b5a56ba 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,7 +31,16 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        # Unwrap functools.partial objects to access the underlying function and arguments\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.partial_args = func.args\n+            self.partial_kwargs = func.keywords\n+        else:\n+            self.func = func\n+            self.partial_args = None\n+            self.partial_kwargs = None\n+\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -45,12 +54,12 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        if not hasattr(self.func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = self.func.__class__.__module__ + '.' + self.func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = self.func.__module__ + '.' + self.func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,10 +68,16 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n-        )\n+        if self.partial_args is not None or self.partial_kwargs is not None:\n+            return \"ResolverMatch(func=%s, partial_args=%s, partial_kwargs=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.partial_args, self.partial_kwargs, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n+        else:\n+            return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n \n \n def get_resolver(urlconf=None):\n",
  "test_patch": "diff --git a/tests/constraints/test_resolvermatch_partial_repr.py b/tests/constraints/test_resolvermatch_partial_repr.py\nnew file mode 100644\nindex 0000000..9e3f08c\n--- /dev/null\n+++ b/tests/constraints/test_resolvermatch_partial_repr.py\n@@ -0,0 +1,20 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprPartialTest(SimpleTestCase):\n+    def test_resolvermatch_repr_with_partial(self):\n+        # Create a partial function\n+        def sample_view():\n+            pass\n+\n+        partial_func = functools.partial(sample_view)\n+\n+        # Create a ResolverMatch object with the partial function\n+        resolver_match = ResolverMatch(func=partial_func, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)\n+\n+        # Expected incorrect repr output\n+        expected_repr = 'ResolverMatch(func=functools.partial, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+\n+        # Assert that the incorrect repr is produced\n+        self.assertEqual(repr(resolver_match), expected_repr)\n",
  "test_inverted_patch": "diff --git a/tests/constraints/test_resolvermatch_partial_repr_inverted.py b/tests/constraints/test_resolvermatch_partial_repr_inverted.py\nnew file mode 100644\nindex 0000000..b809886\n--- /dev/null\n+++ b/tests/constraints/test_resolvermatch_partial_repr_inverted.py\n@@ -0,0 +1,21 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprPartialTest(SimpleTestCase):\n+    def test_resolvermatch_repr_with_partial(self):\n+        # Create a partial function\n+        def sample_view():\n+            pass\n+\n+        partial_func = functools.partial(sample_view)\n+\n+        # Create a ResolverMatch object with the partial function\n+        resolver_match = ResolverMatch(func=partial_func, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)\n+\n+        # Expected correct repr output\n+        expected_repr = 'ResolverMatch(func=sample_view, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+\n+        # Assert that the correct repr is produced\n+        if repr(resolver_match) != expected_repr:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3211347,
  "num_received_chars": 48900,
  "elapsed_time": 338.0813627243042,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}