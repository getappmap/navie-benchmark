{
  "instance_id": "django__django-14915",
  "edit_test_file": "tests/forms_tests/widget_tests/test_select.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923..bc7e695 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_modelchoiceiteratorvalue.py b/tests/forms_tests/widget_tests/test_modelchoiceiteratorvalue.py\nnew file mode 100644\nindex 0000000..6cee031\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_modelchoiceiteratorvalue.py\n@@ -0,0 +1,26 @@\n+import json\n+from django.forms import Select\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+from django.test import SimpleTestCase\n+\n+class CustomSelect(Select):\n+    def __init__(self, *args, show_fields=None, **kwargs):\n+        self.show_fields = show_fields or {}\n+        super().__init__(*args, **kwargs)\n+\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+        # This line is expected to raise a TypeError due to unhashable ModelChoiceIteratorValue\n+        if value in self.show_fields:\n+            context['attrs']['data-fields'] = json.dumps(self.show_fields[value])\n+        return context\n+\n+class ModelChoiceIteratorValueTest(SimpleTestCase):\n+    def test_modelchoiceiteratorvalue_unhashable(self):\n+        choices = [(ModelChoiceIteratorValue(1, None), 'Option 1')]\n+        widget = CustomSelect(choices=choices, show_fields={1: ['first_name', 'last_name']})\n+        with self.assertRaises(TypeError) as cm:\n+            widget.create_option('name', choices[0][0], 'Option 1', False, 0)\n+        self.assertEqual(str(cm.exception), \"unhashable type: 'ModelChoiceIteratorValue'\")\n",
  "test_inverted_patch": null,
  "num_sent_chars": 2169439,
  "num_received_chars": 13678,
  "elapsed_time": 114.6815288066864,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}