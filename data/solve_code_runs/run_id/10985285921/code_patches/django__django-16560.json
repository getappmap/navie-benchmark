{
  "instance_id": "django__django-16560",
  "edit_test_file": "tests/constraints/tests.py",
  "code_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 075ecee..8ab8f34 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -19,10 +19,11 @@ __all__ = [\"BaseConstraint\", \"CheckConstraint\", \"Deferrable\", \"UniqueConstraint\"\n class BaseConstraint:\n     default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n     violation_error_message = None\n+    violation_error_code = None\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n-    # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -34,6 +35,7 @@ class BaseConstraint:\n             self.violation_error_message = violation_error_message\n         else:\n             self.violation_error_message = self.default_violation_error_message\n+        self.violation_error_code = violation_error_code\n         # RemovedInDjango60Warning.\n         if args:\n             warnings.warn(\n@@ -65,6 +67,9 @@ class BaseConstraint:\n     def get_violation_error_message(self):\n         return self.violation_error_message % {\"name\": self.name}\n \n+    def get_violation_error_code(self):\n+        return self.violation_error_code or \"invalid\"\n+\n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n@@ -74,6 +79,8 @@ class BaseConstraint:\n             and self.violation_error_message != self.default_violation_error_message\n         ):\n             kwargs[\"violation_error_message\"] = self.violation_error_message\n+        if self.violation_error_code is not None:\n+            kwargs[\"violation_error_code\"] = self.violation_error_code\n         return (path, (), kwargs)\n \n     def clone(self):\n@@ -385,14 +392,18 @@ class UniqueConstraint(BaseConstraint):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(\n+                        self.get_violation_error_message(),\n+                        code=self.get_violation_error_code()\n+                    )\n                 # When fields are defined, use the unique_error_message() for\n                 # backward compatibility.\n                 for model, constraints in instance.get_constraints():\n                     for constraint in constraints:\n                         if constraint is self:\n                             raise ValidationError(\n-                                instance.unique_error_message(model, self.fields)\n+                                instance.unique_error_message(model, self.fields),\n+                                code=self.get_violation_error_code()\n                             )\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n@@ -400,6 +411,9 @@ class UniqueConstraint(BaseConstraint):\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(\n                     against, using=using\n                 ):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(\n+                        self.get_violation_error_message(),\n+                        code=self.get_violation_error_code()\n+                    )\n             except FieldError:\n                 pass\n",
  "test_patch": "diff --git a/tests/constraints/test_custom_validationerror_code.py b/tests/constraints/test_custom_validationerror_code.py\nnew file mode 100644\nindex 0000000..a92ef7f\n--- /dev/null\n+++ b/tests/constraints/test_custom_validationerror_code.py\n@@ -0,0 +1,14 @@\n+from django.core.exceptions import ValidationError\n+from django.db.models.constraints import BaseConstraint\n+from django.test import SimpleTestCase\n+\n+class CustomConstraint(BaseConstraint):\n+    def validate(self, model, instance, **kwargs):\n+        raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+class BaseConstraintValidationErrorTests(SimpleTestCase):\n+    def test_custom_violation_error_code(self):\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n",
  "test_inverted_patch": "diff --git a/tests/constraints/test_custom_validationerror_code_inverted.py b/tests/constraints/test_custom_validationerror_code_inverted.py\nnew file mode 100644\nindex 0000000..8bd8769\n--- /dev/null\n+++ b/tests/constraints/test_custom_validationerror_code_inverted.py\n@@ -0,0 +1,15 @@\n+from django.core.exceptions import ValidationError\n+from django.db.models.constraints import BaseConstraint\n+from django.test import SimpleTestCase\n+\n+class CustomConstraint(BaseConstraint):\n+    def validate(self, model, instance, **kwargs):\n+        raise ValidationError(\"Custom error message\", code=\"custom_code\")\n+\n+class BaseConstraintValidationErrorTests(SimpleTestCase):\n+    def test_custom_violation_error_code(self):\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        # Altered the test to fail when the issue is observed\n+        self.assertNotEqual(cm.exception.code, \"custom_code\", \"__BUG__HERE__\")\n",
  "num_sent_chars": 3046749,
  "num_received_chars": 179370,
  "elapsed_time": 655.1922996044159,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}