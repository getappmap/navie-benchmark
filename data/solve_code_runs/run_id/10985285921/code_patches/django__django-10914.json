{
  "instance_id": "django__django-10914",
  "edit_test_file": "tests/file_storage/test_generate_filename.py",
  "code_patch": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1d..43e5d84 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -248,6 +248,9 @@ class FileSystemStorage(Storage):\n         # try to create the file, but if it already exists we have to go back\n         # to get_available_name() and try again.\n \n+        # Set default file permissions to 0o644\n+        default_file_permissions = 0o644\n+\n         while True:\n             try:\n                 # This file has a file path that we can move.\n@@ -257,7 +260,7 @@ class FileSystemStorage(Storage):\n                 # This is a normal uploadedfile that we can stream.\n                 else:\n                     # The current umask value is masked out by os.open!\n-                    fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)\n+                    fd = os.open(full_path, self.OS_OPEN_FLAGS, default_file_permissions)\n                     _file = None\n                     try:\n                         locks.lock(fd, locks.LOCK_EX)\n@@ -280,8 +283,8 @@ class FileSystemStorage(Storage):\n                 # OK, the file save worked. Break out of the loop.\n                 break\n \n-        if self.file_permissions_mode is not None:\n-            os.chmod(full_path, self.file_permissions_mode)\n+        # Apply default file permissions if not explicitly set\n+        os.chmod(full_path, self.file_permissions_mode or default_file_permissions)\n \n         # Store filenames with forward slashes, even on Windows.\n         return name.replace('\\\\', '/')\n",
  "test_patch": "diff --git a/tests/file_storage/test_file_upload_permission.py b/tests/file_storage/test_file_upload_permission.py\nnew file mode 100644\nindex 0000000..fced67e\n--- /dev/null\n+++ b/tests/file_storage/test_file_upload_permission.py\n@@ -0,0 +1,36 @@\n+import os\n+import tempfile\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile\n+from django.test import SimpleTestCase, override_settings\n+\n+class FileUploadPermissionTests(SimpleTestCase):\n+    @override_settings(FILE_UPLOAD_PERMISSIONS=None)\n+    def test_file_upload_permission_inconsistency(self):\n+        \"\"\"\n+        Test to reproduce the issue where file permissions are inconsistent\n+        depending on whether a MemoryUploadedFile or a TemporaryUploadedFile\n+        was used for temporary storage.\n+        \"\"\"\n+        storage_dir = tempfile.mkdtemp()\n+        storage = FileSystemStorage(location=storage_dir)\n+\n+        # Create a TemporaryUploadedFile\n+        temp_file = TemporaryUploadedFile('test.txt', 'text/plain', 0, 'utf-8')\n+        temp_file.write(b'Test content')\n+        temp_file.seek(0)\n+\n+        # Save the file using FileSystemStorage\n+        name = storage.save('uploaded_test.txt', temp_file)\n+        temp_file.close()\n+\n+        # Check the file permissions\n+        file_path = storage.path(name)\n+        file_permissions = os.stat(file_path).st_mode & 0o777\n+\n+        # Assert that the permissions are 0o600, which is the issue described\n+        self.assertEqual(file_permissions, 0o600)\n+\n+        # Clean up\n+        os.remove(file_path)\n+        os.rmdir(storage_dir)\n",
  "test_inverted_patch": "diff --git a/tests/file_storage/test_file_upload_permission_inverted.py b/tests/file_storage/test_file_upload_permission_inverted.py\nnew file mode 100644\nindex 0000000..ee1b45f\n--- /dev/null\n+++ b/tests/file_storage/test_file_upload_permission_inverted.py\n@@ -0,0 +1,37 @@\n+import os\n+import tempfile\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile\n+from django.test import SimpleTestCase, override_settings\n+\n+class FileUploadPermissionTests(SimpleTestCase):\n+    @override_settings(FILE_UPLOAD_PERMISSIONS=None)\n+    def test_file_upload_permission_inconsistency(self):\n+        \"\"\"\n+        Test to reproduce the issue where file permissions are inconsistent\n+        depending on whether a MemoryUploadedFile or a TemporaryUploadedFile\n+        was used for temporary storage.\n+        \"\"\"\n+        storage_dir = tempfile.mkdtemp()\n+        storage = FileSystemStorage(location=storage_dir)\n+\n+        # Create a TemporaryUploadedFile\n+        temp_file = TemporaryUploadedFile('test.txt', 'text/plain', 0, 'utf-8')\n+        temp_file.write(b'Test content')\n+        temp_file.seek(0)\n+\n+        # Save the file using FileSystemStorage\n+        name = storage.save('uploaded_test.txt', temp_file)\n+        temp_file.close()\n+\n+        # Check the file permissions\n+        file_path = storage.path(name)\n+        file_permissions = os.stat(file_path).st_mode & 0o777\n+\n+        # Assert that the permissions are 0o644, which should be the default\n+        # This will fail if the permissions are 0o600, indicating the bug\n+        self.assertEqual(file_permissions, 0o644, \"__BUG__HERE__\")\n+\n+        # Clean up\n+        os.remove(file_path)\n+        os.rmdir(storage_dir)\n",
  "num_sent_chars": 1085975,
  "num_received_chars": 15611,
  "elapsed_time": 106.47187066078186,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}