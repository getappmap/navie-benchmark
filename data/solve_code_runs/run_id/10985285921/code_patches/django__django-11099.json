{
  "instance_id": "django__django-11099",
  "edit_test_file": "tests/auth_tests/test_validators.py",
  "code_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cf..1304f20 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
  "test_patch": "diff --git a/tests/auth_tests/test_username_validator_newline.py b/tests/auth_tests/test_username_validator_newline.py\nnew file mode 100644\nindex 0000000..bc5ca4a\n--- /dev/null\n+++ b/tests/auth_tests/test_username_validator_newline.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.contrib.auth import validators\n+\n+class UsernameValidatorNewlineTest(unittest.TestCase):\n+    def test_ascii_validator_allows_trailing_newline(self):\n+        v = validators.ASCIIUsernameValidator()\n+        # This should pass due to the issue where trailing newlines are allowed\n+        try:\n+            v('validusername\\n')\n+            self.assertTrue(True, \"ASCIIUsernameValidator incorrectly allows trailing newline.\")\n+        except ValidationError:\n+            self.fail(\"ASCIIUsernameValidator raised ValidationError unexpectedly!\")\n+\n+    def test_unicode_validator_allows_trailing_newline(self):\n+        v = validators.UnicodeUsernameValidator()\n+        # This should pass due to the issue where trailing newlines are allowed\n+        try:\n+            v('validusername\\n')\n+            self.assertTrue(True, \"UnicodeUsernameValidator incorrectly allows trailing newline.\")\n+        except ValidationError:\n+            self.fail(\"UnicodeUsernameValidator raised ValidationError unexpectedly!\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_username_validator_newline_inverted.py b/tests/auth_tests/test_username_validator_newline_inverted.py\nnew file mode 100644\nindex 0000000..e9bfe32\n--- /dev/null\n+++ b/tests/auth_tests/test_username_validator_newline_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.contrib.auth import validators\n+\n+class UsernameValidatorNewlineTest(unittest.TestCase):\n+    def test_ascii_validator_allows_trailing_newline(self):\n+        v = validators.ASCIIUsernameValidator()\n+        # This should fail due to the issue where trailing newlines are allowed\n+        with self.assertRaises(ValidationError, msg=\"__BUG__HERE__\"):\n+            v('validusername\\n')\n+\n+    def test_unicode_validator_allows_trailing_newline(self):\n+        v = validators.UnicodeUsernameValidator()\n+        # This should fail due to the issue where trailing newlines are allowed\n+        with self.assertRaises(ValidationError, msg=\"__BUG__HERE__\"):\n+            v('validusername\\n')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 364914,
  "num_received_chars": 3599,
  "elapsed_time": 35.98728132247925,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}