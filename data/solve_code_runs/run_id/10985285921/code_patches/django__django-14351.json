{
  "instance_id": "django__django-14351",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 6629a1f..adbbbb2 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -364,7 +364,7 @@ class Query(BaseExpression):\n             alias = None\n         return target.get_col(alias, field)\n \n-    def rewrite_cols(self, annotation, col_cnt):\n+    def rewrite_cols(self, annotation, col_cnt, single_col=False):\n         # We must make sure the inner query has the referred columns in it.\n         # If we are aggregating over an annotation, then Django uses Ref()\n         # instances to note this. However, if we are annotating over a column\n@@ -379,6 +379,9 @@ class Query(BaseExpression):\n         orig_exprs = annotation.get_source_expressions()\n         new_exprs = []\n         for expr in orig_exprs:\n+            if single_col and isinstance(expr, Col):\n+                new_exprs.append(expr)\n+                continue\n             # FIXME: These conditions are fairly arbitrary. Identify a better\n             # method of having expressions decide which code path they should\n             # take.\n@@ -474,7 +477,7 @@ class Query(BaseExpression):\n             for alias, expression in list(inner_query.annotation_select.items()):\n                 annotation_select_mask = inner_query.annotation_select_mask\n                 if expression.is_summary:\n-                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n+                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt, single_col=True)\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n                     annotation_select_mask.remove(alias)\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2259130,
  "num_received_chars": 35534,
  "elapsed_time": 182.19838047027588,
  "lint_repair_count": 2,
  "test_generation_attempts": 3,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}