{
  "instance_id": "django__django-14017",
  "edit_test_file": "tests/queries/test_q.py",
  "code_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa..4555a52 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -41,6 +41,9 @@ class Q(tree.Node):\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n+            # Attempt to delegate to the other object's reverse logic\n+            if hasattr(other, '__rand__'):\n+                return other.__rand__(self)\n             raise TypeError(other)\n \n         # If the other Q() is empty, ignore it and just use `self`.\n@@ -64,6 +67,10 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        # Reverse AND logic to allow other types to combine with Q\n+        return self._combine(other, self.AND)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n",
  "test_patch": "diff --git a/tests/queries/test_q_exists_commutativity.py b/tests/queries/test_q_exists_commutativity.py\nnew file mode 100644\nindex 0000000..3df900e\n--- /dev/null\n+++ b/tests/queries/test_q_exists_commutativity.py\n@@ -0,0 +1,12 @@\n+from django.db.models import Exists, Q\n+from django.test import SimpleTestCase\n+from django.contrib.contenttypes.models import ContentType\n+\n+class QExistsCommutativityTests(SimpleTestCase):\n+    def test_q_and_exists_raises_type_error(self):\n+        # Create a dummy queryset using ContentType as a stand-in for Product\n+        queryset = ContentType.objects.all()\n+        exists_expression = Exists(queryset)\n+        \n+        with self.assertRaises(TypeError):\n+            Q() & exists_expression\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_q_exists_commutativity_inverted.py b/tests/queries/test_q_exists_commutativity_inverted.py\nnew file mode 100644\nindex 0000000..89a9fea\n--- /dev/null\n+++ b/tests/queries/test_q_exists_commutativity_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db.models import Exists, Q\n+from django.test import SimpleTestCase\n+from django.contrib.contenttypes.models import ContentType\n+\n+class QExistsCommutativityTests(SimpleTestCase):\n+    def test_q_and_exists_raises_type_error(self):\n+        # Create a dummy queryset using ContentType as a stand-in for Product\n+        queryset = ContentType.objects.all()\n+        exists_expression = Exists(queryset)\n+        \n+        try:\n+            Q() & exists_expression\n+        except TypeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4748288,
  "num_received_chars": 67926,
  "elapsed_time": 441.4104673862457,
  "lint_repair_count": 11,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}