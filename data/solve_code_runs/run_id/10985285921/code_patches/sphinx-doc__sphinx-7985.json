{
  "instance_id": "sphinx-doc__sphinx-7985",
  "edit_test_file": "tests/test_setup_command.py",
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd53170..338570b 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -209,26 +209,30 @@ class CheckExternalLinksBuilder(Builder):\n                     return 'redirected', new_url, 0\n \n         def check() -> Tuple[str, str, int]:\n-            # check for various conditions without bothering the network\n-            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n-                return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n-            elif uri in self.good:\n-                return 'working', 'old', 0\n-            elif uri in self.broken:\n-                return 'broken', self.broken[uri], 0\n-            elif uri in self.redirected:\n-                return 'redirected', self.redirected[uri][0], self.redirected[uri][1]\n-            for rex in self.to_ignore:\n-                if rex.match(uri):\n-                    return 'ignored', '', 0\n-\n-            # need to actually check the URI\n-            for _ in range(self.app.config.linkcheck_retries):\n-                status, info, code = check_uri()\n-                if status != \"broken\":\n-                    break\n+                    # check for various conditions without bothering the network\n+                    if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n+                        return 'unchecked', '', 0\n+                    elif not uri.startswith(('http:', 'https:')):\n+                        # Check if the local link is valid\n+                        if self.env.doc2path(uri, None) in self.env.all_docs:\n+                            return 'working', '', 0\n+                        else:\n+                            return 'broken', 'Local link not found', 0\n+                    elif uri in self.good:\n+                        return 'working', 'old', 0\n+                    elif uri in self.broken:\n+                        return 'broken', self.broken[uri], 0\n+                    elif uri in self.redirected:\n+                        return 'redirected', self.redirected[uri][0], self.redirected[uri][1]\n+                    for rex in self.to_ignore:\n+                        if rex.match(uri):\n+                            return 'ignored', '', 0\n+        \n+                    # need to actually check the URI\n+                    for _ in range(self.app.config.linkcheck_retries):\n+                        status, info, code = check_uri()\n+                        if status != \"broken\":\n+                            break\n \n             if status == \"working\":\n                 self.good.add(uri)\n@@ -309,33 +313,41 @@ class CheckExternalLinksBuilder(Builder):\n         return\n \n     def write_doc(self, docname: str, doctree: Node) -> None:\n-        logger.info('')\n-        n = 0\n-\n-        # reference nodes\n-        for refnode in doctree.traverse(nodes.reference):\n-            if 'refuri' not in refnode:\n-                continue\n-            uri = refnode['refuri']\n-            lineno = get_node_line(refnode)\n-            self.wqueue.put((uri, docname, lineno), False)\n-            n += 1\n-\n-        # image nodes\n-        for imgnode in doctree.traverse(nodes.image):\n-            uri = imgnode['candidates'].get('?')\n-            if uri and '://' in uri:\n-                lineno = get_node_line(imgnode)\n+            logger.info('')\n+            n = 0\n+    \n+            # reference nodes\n+            for refnode in doctree.traverse(nodes.reference):\n+                if 'refuri' not in refnode:\n+                    continue\n+                uri = refnode['refuri']\n+                lineno = get_node_line(refnode)\n                 self.wqueue.put((uri, docname, lineno), False)\n                 n += 1\n-\n-        done = 0\n-        while done < n:\n-            self.process_result(self.rqueue.get())\n-            done += 1\n-\n-        if self.broken:\n-            self.app.statuscode = 1\n+    \n+            # image nodes\n+            for imgnode in doctree.traverse(nodes.image):\n+                uri = imgnode['candidates'].get('?')\n+                if uri and '://' in uri:\n+                    lineno = get_node_line(imgnode)\n+                    self.wqueue.put((uri, docname, lineno), False)\n+                    n += 1\n+    \n+            # Check internal links\n+            for target in doctree.traverse(nodes.target):\n+                if 'refid' in target:\n+                    uri = target['refid']\n+                    lineno = get_node_line(target)\n+                    self.wqueue.put((uri, docname, lineno), False)\n+                    n += 1\n+    \n+            done = 0\n+            while done < n:\n+                self.process_result(self.rqueue.get())\n+                done += 1\n+    \n+            if self.broken:\n+                self.app.statuscode = 1\n \n     def write_entry(self, what: str, docname: str, filename: str, line: int,\n                     uri: str) -> None:\n",
  "test_patch": "diff --git a/tests/test_linkcheck_internal_links.py b/tests/test_linkcheck_internal_links.py\nnew file mode 100644\nindex 0000000..e75dfa7\n--- /dev/null\n+++ b/tests/test_linkcheck_internal_links.py\n@@ -0,0 +1,47 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckInternalLinks(TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-internal')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_internal_link_check(self):\n+        with cd(self.test_dir):\n+            # Run the linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check for the expected output indicating the issue\n+            output = out.decode() + err.decode()\n+            self.assertIn('-local-   doesntexist', output)\n+            self.assertIn('broken    https://lkfqhlkghflkhs', output)\n+            self.assertNotIn('broken    doesntexist', output)\n",
  "test_inverted_patch": "diff --git a/tests/test_linkcheck_internal_links_inverted.py b/tests/test_linkcheck_internal_links_inverted.py\nnew file mode 100644\nindex 0000000..7270eb4\n--- /dev/null\n+++ b/tests/test_linkcheck_internal_links_inverted.py\n@@ -0,0 +1,50 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckInternalLinks(TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-internal')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_internal_link_check(self):\n+        with cd(self.test_dir):\n+            # Run the linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check for the expected output indicating the issue\n+            output = out.decode() + err.decode()\n+            self.assertIn('-local-   doesntexist', output)\n+            self.assertIn('broken    https://lkfqhlkghflkhs', output)\n+            \n+            # Alter the test to fail when the bug is observed\n+            if 'broken    doesntexist' not in output:\n+                raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2265282,
  "num_received_chars": 61396,
  "elapsed_time": 980.5679540634155,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}