{
  "instance_id": "django__django-16899",
  "edit_test_file": "tests/admin_views/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex c395b0b..2c90ded 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -771,10 +771,11 @@ class BaseModelAdminChecks:\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' is not a callable, an attribute of \"\n-                        \"'%s', or an attribute of '%s'.\"\n+                        \"The value of '%s' refers to '%s', which is not a callable, \"\n+                        \"an attribute of '%s', or an attribute of '%s'.\"\n                         % (\n                             label,\n+                            field_name,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n                         ),\n",
  "test_patch": "diff --git a/tests/admin_views/test_modeladmin_readonly_fields_error.py b/tests/admin_views/test_modeladmin_readonly_fields_error.py\nnew file mode 100644\nindex 0000000..730e1c2\n--- /dev/null\n+++ b/tests/admin_views/test_modeladmin_readonly_fields_error.py\n@@ -0,0 +1,23 @@\n+# File: tests/admin_views/test_modeladmin_readonly_fields_error.py\n+\n+from django.test import TestCase\n+from django.contrib.admin import ModelAdmin\n+from django.core.checks import Error\n+from django.contrib.admin.sites import site\n+from admin_views.models import City\n+\n+class CityInline(ModelAdmin):\n+    readonly_fields = ['non_existent_field']\n+\n+class ModelAdminReadonlyFieldsErrorTest(TestCase):\n+    def test_readonly_fields_error_message(self):\n+        admin = CityInline(City, site)\n+        errors = admin.check()\n+        self.assertIn(\n+            Error(\n+                \"The value of 'readonly_fields[0]' is not a callable, an attribute of 'CityInline', or an attribute of 'admin_views.City'.\",\n+                obj=CityInline,\n+                id='admin.E035',\n+            ),\n+            errors\n+        )\n",
  "test_inverted_patch": "diff --git a/tests/admin_views/test_modeladmin_readonly_fields_error_inverted.py b/tests/admin_views/test_modeladmin_readonly_fields_error_inverted.py\nnew file mode 100644\nindex 0000000..7cbb099\n--- /dev/null\n+++ b/tests/admin_views/test_modeladmin_readonly_fields_error_inverted.py\n@@ -0,0 +1,22 @@\n+# File: tests/admin_views/test_modeladmin_readonly_fields_error.py\n+\n+from django.test import TestCase\n+from django.contrib.admin import ModelAdmin\n+from django.core.checks import Error\n+from django.contrib.admin.sites import site\n+from admin_views.models import City\n+\n+class CityInline(ModelAdmin):\n+    readonly_fields = ['non_existent_field']\n+\n+class ModelAdminReadonlyFieldsErrorTest(TestCase):\n+    def test_readonly_fields_error_message(self):\n+        admin = CityInline(City, site)\n+        errors = admin.check()\n+        # Altered the test to fail when the issue is observed\n+        if Error(\n+            \"The value of 'readonly_fields[0]' is not a callable, an attribute of 'CityInline', or an attribute of 'admin_views.City'.\",\n+            obj=CityInline,\n+            id='admin.E035',\n+        ) in errors:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4410986,
  "num_received_chars": 38669,
  "elapsed_time": 273.2640197277069,
  "lint_repair_count": 7,
  "test_generation_attempts": 2,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}