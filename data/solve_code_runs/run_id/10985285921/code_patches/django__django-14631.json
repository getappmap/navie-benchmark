{
  "instance_id": "django__django-14631",
  "edit_test_file": "tests/forms_tests/field_tests/test_booleanfield.py",
  "code_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037b..20c72a3 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -388,13 +388,14 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n+            bound_field = self[name]\n             if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+                value = bound_field.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bound_field.value()\n             try:\n                 if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n+                    initial = bound_field.initial\n                     value = field.clean(value, initial)\n                 else:\n                     value = field.clean(value)\n@@ -437,24 +438,8 @@ class BaseForm:\n     @cached_property\n     def changed_data(self):\n         data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n+        for name, bound_field in self._bound_items():\n+            if bound_field.did_change():\n                 data.append(name)\n         return data\n \n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_boundfield_access.py b/tests/forms_tests/field_tests/test_boundfield_access.py\nnew file mode 100644\nindex 0000000..283c4e7\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_boundfield_access.py\n@@ -0,0 +1,20 @@\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class BoundFieldAccessTest(SimpleTestCase):\n+    def test_clean_fields_vs_boundfield_initial(self):\n+        class TestForm(Form):\n+            name = CharField(initial='initial_value')\n+\n+        form = TestForm(data={'name': 'new_value'})\n+        form.full_clean()\n+\n+        # Directly access the initial value from the form's cleaned_data\n+        direct_initial_value = form.cleaned_data['name']\n+\n+        # Access the initial value via the BoundField\n+        boundfield_initial_value = form['name'].initial\n+\n+        # Assert that the direct initial value and the BoundField initial value are different\n+        # This reproduces the issue where they should be the same but are not\n+        self.assertNotEqual(direct_initial_value, boundfield_initial_value)\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_boundfield_access_inverted.py b/tests/forms_tests/field_tests/test_boundfield_access_inverted.py\nnew file mode 100644\nindex 0000000..41f3c58\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_boundfield_access_inverted.py\n@@ -0,0 +1,21 @@\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class BoundFieldAccessTest(SimpleTestCase):\n+    def test_clean_fields_vs_boundfield_initial(self):\n+        class TestForm(Form):\n+            name = CharField(initial='initial_value')\n+\n+        form = TestForm(data={'name': 'new_value'})\n+        form.full_clean()\n+\n+        # Directly access the initial value from the form's cleaned_data\n+        direct_initial_value = form.cleaned_data['name']\n+\n+        # Access the initial value via the BoundField\n+        boundfield_initial_value = form['name'].initial\n+\n+        # Assert that the direct initial value and the BoundField initial value are the same\n+        # This should fail if the bug is present, raising the specified error message\n+        if direct_initial_value != boundfield_initial_value:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4385572,
  "num_received_chars": 77623,
  "elapsed_time": 419.954785823822,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}