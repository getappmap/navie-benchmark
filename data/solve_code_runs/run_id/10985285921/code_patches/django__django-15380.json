{
  "instance_id": "django__django-15380",
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "code_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2ac..108ce97 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -823,8 +823,11 @@ class MigrationAutodetector:\n         self.renamed_fields = {}\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n-            old_model_state = self.from_state.models[app_label, old_model_name]\n-            new_model_state = self.to_state.models[app_label, old_model_name]\n+            new_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models.get((app_label, old_model_name))\n+            new_model_state = self.to_state.models.get((app_label, new_model_name))\n+            if not old_model_state or not new_model_state:\n+                continue\n             field = new_model_state.get_field(field_name)\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\n",
  "test_patch": "diff --git a/tests/migrations/test_migration_autodetector_crash_rename.py b/tests/migrations/test_migration_autodetector_crash_rename.py\nnew file mode 100644\nindex 0000000..3ca4e12\n--- /dev/null\n+++ b/tests/migrations/test_migration_autodetector_crash_rename.py\n@@ -0,0 +1,39 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class MigrationRenameCrashTest(unittest.TestCase):\n+    def setUp(self):\n+        self.questioner = MigrationQuestioner({\"ask_rename\": True, \"ask_rename_model\": True})\n+\n+    def make_project_state(self, model_states):\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def test_rename_model_and_field_crash(self):\n+        # Initial state with a model and a field\n+        before = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # State after renaming the model and the field\n+        after = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel2\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"new_name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # Attempt to detect changes, expecting a KeyError\n+        autodetector = MigrationAutodetector(before, after, self.questioner)\n+        with self.assertRaises(KeyError) as cm:\n+            autodetector._detect_changes()\n+        self.assertEqual(cm.exception.args[0], ('test_one', 'mymodel'))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migration_autodetector_crash_rename_inverted.py b/tests/migrations/test_migration_autodetector_crash_rename_inverted.py\nnew file mode 100644\nindex 0000000..7f8f93c\n--- /dev/null\n+++ b/tests/migrations/test_migration_autodetector_crash_rename_inverted.py\n@@ -0,0 +1,40 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class MigrationRenameCrashTest(unittest.TestCase):\n+    def setUp(self):\n+        self.questioner = MigrationQuestioner({\"ask_rename\": True, \"ask_rename_model\": True})\n+\n+    def make_project_state(self, model_states):\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def test_rename_model_and_field_crash(self):\n+        # Initial state with a model and a field\n+        before = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # State after renaming the model and the field\n+        after = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel2\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"new_name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # Attempt to detect changes, expecting a KeyError\n+        autodetector = MigrationAutodetector(before, after, self.questioner)\n+        with self.assertRaises(KeyError) as cm:\n+            autodetector._detect_changes()\n+        # Alter the test to fail when the bug is observed\n+        self.assertEqual(cm.exception.args[0], '__BUG__HERE__')\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 4465854,
  "num_received_chars": 93582,
  "elapsed_time": 472.2575752735138,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}