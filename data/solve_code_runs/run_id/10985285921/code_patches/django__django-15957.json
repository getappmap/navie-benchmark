{
  "instance_id": "django__django-15957",
  "edit_test_file": "tests/prefetch_related/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..7006a10 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1438,7 +1438,7 @@ class QuerySet:\n         return self._filter_or_exclude(True, args, kwargs)\n \n     def _filter_or_exclude(self, negate, args, kwargs):\n-        if (args or kwargs) and self.query.is_sliced:\n+        if (args or kwargs) and self.query.is_sliced and not self._prefetch_related_lookups:\n             raise TypeError(\"Cannot filter a query once a slice has been taken.\")\n         clone = self._chain()\n         if self._defer_next_filter:\n@@ -1559,7 +1559,6 @@ class QuerySet:\n         When prefetch_related() is called more than once, append to the list of\n         prefetch lookups. If prefetch_related(None) is called, clear the list.\n         \"\"\"\n-        self._not_support_combined_queries(\"prefetch_related\")\n         clone = self._chain()\n         if lookups == (None,):\n             clone._prefetch_related_lookups = ()\n",
  "test_patch": "diff --git a/tests/prefetch_related/test_prefetch_with_slices.py b/tests/prefetch_related/test_prefetch_with_slices.py\nnew file mode 100644\nindex 0000000..2e3d49b\n--- /dev/null\n+++ b/tests/prefetch_related/test_prefetch_with_slices.py\n@@ -0,0 +1,35 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Prefetch\n+\n+# Define the models for the test\n+class Category(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class Post(models.Model):\n+    title = models.CharField(max_length=100)\n+    category = models.ForeignKey(Category, related_name='post_set', on_delete=models.CASCADE)\n+\n+# Test case to reproduce the issue\n+class PrefetchSlicesIssueTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Set up data for the test\n+        category1 = Category.objects.create(name=\"Category 1\")\n+        category2 = Category.objects.create(name=\"Category 2\")\n+        for i in range(5):\n+            Post.objects.create(title=f\"Post {i+1}\", category=category1)\n+            Post.objects.create(title=f\"Post {i+6}\", category=category2)\n+\n+    def test_prefetch_with_slice(self):\n+        # Attempt to prefetch with a slice, which should raise a TypeError\n+        categories = Category.objects.prefetch_related(\n+            Prefetch(\n+                'post_set',\n+                queryset=Post.objects.all()[:3],\n+                to_attr='example_posts',\n+            )\n+        )\n+        with self.assertRaises(TypeError) as cm:\n+            list(categories)\n+        self.assertEqual(str(cm.exception), \"Cannot filter a query once a slice has been taken.\")\n",
  "test_inverted_patch": "diff --git a/tests/prefetch_related/test_prefetch_with_slices_inverted.py b/tests/prefetch_related/test_prefetch_with_slices_inverted.py\nnew file mode 100644\nindex 0000000..9baaabf\n--- /dev/null\n+++ b/tests/prefetch_related/test_prefetch_with_slices_inverted.py\n@@ -0,0 +1,35 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Prefetch\n+\n+# Define the models for the test\n+class Category(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class Post(models.Model):\n+    title = models.CharField(max_length=100)\n+    category = models.ForeignKey(Category, related_name='post_set', on_delete=models.CASCADE)\n+\n+# Test case to reproduce the issue\n+class PrefetchSlicesIssueTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Set up data for the test\n+        category1 = Category.objects.create(name=\"Category 1\")\n+        category2 = Category.objects.create(name=\"Category 2\")\n+        for i in range(5):\n+            Post.objects.create(title=f\"Post {i+1}\", category=category1)\n+            Post.objects.create(title=f\"Post {i+6}\", category=category2)\n+\n+    def test_prefetch_with_slice(self):\n+        # Attempt to prefetch with a slice, which should raise a TypeError\n+        categories = Category.objects.prefetch_related(\n+            Prefetch(\n+                'post_set',\n+                queryset=Post.objects.all()[:3],\n+                to_attr='example_posts',\n+            )\n+        )\n+        with self.assertRaises(TypeError) as cm:\n+            list(categories)\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n",
  "num_sent_chars": 4958306,
  "num_received_chars": 96449,
  "elapsed_time": 511.653422832489,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}