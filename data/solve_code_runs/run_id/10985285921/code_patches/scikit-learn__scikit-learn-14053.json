{
  "instance_id": "scikit-learn__scikit-learn-14053",
  "edit_test_file": "sklearn/utils/tests/test_show_versions.py",
  "code_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 1fe11e5..8359c79 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -890,7 +890,10 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        if len(feature_names) == 1:\n+            feature_names_ = feature_names * len(tree_.feature)\n+        else:\n+            feature_names_ = [feature_names[i] for i in tree_.feature]\n     else:\n         feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n \n",
  "test_patch": "diff --git a/sklearn/utils/tests/test_export_text_single_feature.py b/sklearn/utils/tests/test_export_text_single_feature.py\nnew file mode 100644\nindex 0000000..f4feef7\n--- /dev/null\n+++ b/sklearn/utils/tests/test_export_text_single_feature.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from sklearn.tree import DecisionTreeClassifier\n+from sklearn.tree.export import export_text\n+from sklearn.datasets import load_iris\n+\n+class TestExportTextSingleFeature(unittest.TestCase):\n+    def test_export_text_single_feature(self):\n+        X, y = load_iris(return_X_y=True)\n+        X = X[:, 0].reshape(-1, 1)  # Use only one feature\n+\n+        tree = DecisionTreeClassifier()\n+        tree.fit(X, y)\n+\n+        with self.assertRaises(IndexError):\n+            export_text(tree, feature_names=['sepal_length'])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/sklearn/utils/tests/test_export_text_single_feature_inverted.py b/sklearn/utils/tests/test_export_text_single_feature_inverted.py\nnew file mode 100644\nindex 0000000..7aafd1a\n--- /dev/null\n+++ b/sklearn/utils/tests/test_export_text_single_feature_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from sklearn.tree import DecisionTreeClassifier\n+from sklearn.tree.export import export_text\n+from sklearn.datasets import load_iris\n+\n+class TestExportTextSingleFeature(unittest.TestCase):\n+    def test_export_text_single_feature(self):\n+        X, y = load_iris(return_X_y=True)\n+        X = X[:, 0].reshape(-1, 1)  # Use only one feature\n+\n+        tree = DecisionTreeClassifier()\n+        tree.fit(X, y)\n+\n+        # The test should now fail with a specific error message when the bug is observed\n+        try:\n+            export_text(tree, feature_names=['sepal_length'])\n+        except IndexError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 2571314,
  "num_received_chars": 23600,
  "elapsed_time": 198.53010296821594,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}