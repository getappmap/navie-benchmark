{
  "instance_id": "django__django-13837",
  "edit_test_file": "tests/utils_tests/test_autoreload.py",
  "code_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f..9d47d7b 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,14 +216,13 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    if getattr(__main__.__spec__, 'parent', None):\n+        # The server was started with `python -m [package]`.\n+        args += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n",
  "test_patch": "diff --git a/tests/utils_tests/test_autoreload_custom.py b/tests/utils_tests/test_autoreload_custom.py\nnew file mode 100644\nindex 0000000..0fea7b5\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_custom.py\n@@ -0,0 +1,23 @@\n+import sys\n+import types\n+from unittest import mock\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+\n+class TestChildArgumentsWithNonDjangoModule(SimpleTestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        \"\"\"\n+        Test that autoreload.get_child_arguments() raises a RuntimeError\n+        when Python is launched with -m pkg_other_than_django runserver.\n+        \"\"\"\n+        # Simulate the condition where __main__.__spec__.parent is 'pkg_other_than_django'\n+        fake_main = types.ModuleType('__main__')\n+        fake_main.__spec__ = mock.Mock()\n+        fake_main.__spec__.parent = 'pkg_other_than_django'\n+        \n+        with mock.patch.dict('sys.modules', {'__main__': fake_main}):\n+            with self.assertRaises(RuntimeError) as cm:\n+                autoreload.get_child_arguments()\n+            self.assertEqual(str(cm.exception), 'Script -m does not exist.')\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_autoreload_custom_inverted.py b/tests/utils_tests/test_autoreload_custom_inverted.py\nnew file mode 100644\nindex 0000000..8aaf950\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_custom_inverted.py\n@@ -0,0 +1,23 @@\n+import sys\n+import types\n+from unittest import mock\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+\n+class TestChildArgumentsWithNonDjangoModule(SimpleTestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        \"\"\"\n+        Test that autoreload.get_child_arguments() raises a RuntimeError\n+        when Python is launched with -m pkg_other_than_django runserver.\n+        \"\"\"\n+        # Simulate the condition where __main__.__spec__.parent is 'pkg_other_than_django'\n+        fake_main = types.ModuleType('__main__')\n+        fake_main.__spec__ = mock.Mock()\n+        fake_main.__spec__.parent = 'pkg_other_than_django'\n+        \n+        with mock.patch.dict('sys.modules', {'__main__': fake_main}):\n+            with self.assertRaises(RuntimeError) as cm:\n+                autoreload.get_child_arguments()\n+            self.assertEqual(str(cm.exception), '__BUG__HERE__')\n",
  "num_sent_chars": 1802293,
  "num_received_chars": 44821,
  "elapsed_time": 271.19725465774536,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}