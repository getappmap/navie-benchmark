{
  "instance_id": "pydata__xarray-7393",
  "edit_test_file": "xarray/tests/test_dataarray.py",
  "code_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex f3f03c9..06d068a 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -699,6 +699,7 @@ class PandasMultiIndex(PandasIndex):\n         _check_dim_compat(variables, all_dims=\"different\")\n \n         level_indexes = [safe_cast_to_index(var) for var in variables.values()]\n+        original_dtypes = {name: var.dtype for name, var in variables.items()}\n         for name, idx in zip(variables, level_indexes):\n             if isinstance(idx, pd.MultiIndex):\n                 raise ValueError(\n@@ -710,6 +711,12 @@ class PandasMultiIndex(PandasIndex):\n         labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\")\n         labels = [x.ravel() for x in labels_mesh]\n \n+        # Preserve original dtypes by casting levels to the original dtype\n+        levels = [\n+            np.asarray(level, dtype=original_dtypes[name])\n+            for level, name in zip(levels, variables.keys())\n+        ]\n+\n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n         level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n \n",
  "test_patch": "diff --git a/xarray/tests/test_multindex_dtype.py b/xarray/tests/test_multindex_dtype.py\nnew file mode 100644\nindex 0000000..14dee51\n--- /dev/null\n+++ b/xarray/tests/test_multindex_dtype.py\n@@ -0,0 +1,12 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestMultiIndexDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        result = ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype\n+        self.assertFalse(result, \"Expected dtype to change from 'i4' to 'i8' after stacking.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_multindex_dtype_inverted.py b/xarray/tests/test_multindex_dtype_inverted.py\nnew file mode 100644\nindex 0000000..5643533\n--- /dev/null\n+++ b/xarray/tests/test_multindex_dtype_inverted.py\n@@ -0,0 +1,13 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestMultiIndexDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        result = ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype\n+        # Alter the assertion to expect True, so the test fails when the bug is present\n+        self.assertTrue(result, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 4400510,
  "num_received_chars": 54416,
  "elapsed_time": 499.87091064453125,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}