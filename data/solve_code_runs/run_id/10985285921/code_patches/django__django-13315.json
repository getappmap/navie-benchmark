{
  "instance_id": "django__django-13315",
  "edit_test_file": "tests/admin_widgets/tests.py",
  "code_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a..960be53 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -416,7 +416,10 @@ class RelatedField(FieldCacheMixin, Field):\n                 'limit_choices_to': limit_choices_to,\n             })\n         defaults.update(kwargs)\n-        return super().formfield(**defaults)\n+        formfield = super().formfield(**defaults)\n+        if hasattr(formfield, 'queryset'):\n+            formfield.queryset = formfield.queryset.distinct()\n+        return formfield\n \n     def related_query_name(self):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/admin_widgets/test_foreignkey_duplicate_options.py b/tests/admin_widgets/test_foreignkey_duplicate_options.py\nnew file mode 100644\nindex 0000000..610c4ab\n--- /dev/null\n+++ b/tests/admin_widgets/test_foreignkey_duplicate_options.py\n@@ -0,0 +1,37 @@\n+from django.test import TestCase\n+from django.db import models\n+from django import forms\n+from django.contrib.admin import widgets\n+from .models import Band, Event\n+\n+class ForeignKeyDuplicateOptionsTest(TestCase):\n+    def setUp(self):\n+        # Create some Band instances\n+        self.band1 = Band.objects.create(name='Band 1', style='Rock')\n+        self.band2 = Band.objects.create(name='Band 2', style='Jazz')\n+        self.band3 = Band.objects.create(name='Band 3', style='Rock')\n+\n+    def test_foreignkey_duplicate_options(self):\n+        \"\"\"\n+        Test that a ForeignKey with limit_choices_to using a Q object\n+        results in duplicate options in the formfield.\n+        \"\"\"\n+        class EventForm(forms.ModelForm):\n+            class Meta:\n+                model = Event\n+                fields = ['main_band']\n+\n+        form = EventForm()\n+        field = form.fields['main_band']\n+        widget = field.widget\n+\n+        # Render the widget and check for duplicate options\n+        rendered = widget.render('main_band', None)\n+        self.assertIn('Band 1', rendered)\n+        self.assertIn('Band 2', rendered)\n+        self.assertIn('Band 3', rendered)\n+\n+        # Check for duplicates in the rendered output\n+        self.assertEqual(rendered.count('Band 1'), 1)\n+        self.assertEqual(rendered.count('Band 2'), 1)\n+        self.assertEqual(rendered.count('Band 3'), 1)\n",
  "test_inverted_patch": null,
  "num_sent_chars": 5474538,
  "num_received_chars": 47750,
  "elapsed_time": 354.7254629135132,
  "lint_repair_count": 6,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}