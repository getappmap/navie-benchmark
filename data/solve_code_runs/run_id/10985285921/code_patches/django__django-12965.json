{
  "instance_id": "django__django-12965",
  "edit_test_file": "tests/delete/tests.py",
  "code_patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex 3682d6d..aa55110 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -17,22 +17,16 @@ class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n         if self.connection.features.update_can_self_select or self.single_alias:\n             return super().as_sql()\n-        # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery\n-        # which is what the default implementation of SQLDeleteCompiler uses\n-        # when multiple tables are involved. Use the MySQL/MariaDB specific\n-        # DELETE table FROM table syntax instead to avoid performing the\n-        # operation in two queries.\n+        # Use a direct DELETE FROM <table> when no subquery is necessary.\n         result = [\n-            'DELETE %s FROM' % self.quote_name_unless_alias(\n+            'DELETE FROM %s' % self.quote_name_unless_alias(\n                 self.query.get_initial_alias()\n             )\n         ]\n-        from_sql, from_params = self.get_from_clause()\n-        result.extend(from_sql)\n         where, params = self.compile(self.query.where)\n         if where:\n             result.append('WHERE %s' % where)\n-        return ' '.join(result), tuple(from_params) + tuple(params)\n+        return ' '.join(result), tuple(params)\n \n \n class SQLUpdateCompiler(compiler.SQLUpdateCompiler, SQLCompiler):\n",
  "test_patch": "diff --git a/tests/delete/performance_regression_delete_test.py b/tests/delete/performance_regression_delete_test.py\nnew file mode 100644\nindex 0000000..cc123a8\n--- /dev/null\n+++ b/tests/delete/performance_regression_delete_test.py\n@@ -0,0 +1,19 @@\n+from django.db import connection, models\n+from django.test import TestCase\n+\n+class Alphabet(models.Model):\n+    letter = models.CharField(max_length=1)\n+\n+class PerformanceRegressionDeleteTest(TestCase):\n+    def setUp(self):\n+        # Create a large number of Alphabet instances to simulate the performance issue.\n+        Alphabet.objects.bulk_create([Alphabet(letter=chr(65 + i % 26)) for i in range(100000)])\n+\n+    def test_delete_performance_regression(self):\n+        with connection.cursor() as cursor:\n+            # Capture the SQL queries executed during the delete operation.\n+            with self.assertNumQueries(1):\n+                Alphabet.objects.all().delete()\n+                # Check the last executed query to see if it contains a subquery.\n+                last_query = str(cursor.db.queries[-1]['sql'])\n+                self.assertIn(\"SELECT\", last_query, \"The delete query should contain a subquery indicating the performance regression.\")\n",
  "test_inverted_patch": "diff --git a/tests/delete/performance_regression_delete_test_inverted.py b/tests/delete/performance_regression_delete_test_inverted.py\nnew file mode 100644\nindex 0000000..1df90f2\n--- /dev/null\n+++ b/tests/delete/performance_regression_delete_test_inverted.py\n@@ -0,0 +1,21 @@\n+from django.db import connection, models\n+from django.test import TestCase\n+\n+class Alphabet(models.Model):\n+    letter = models.CharField(max_length=1)\n+\n+class PerformanceRegressionDeleteTest(TestCase):\n+    def setUp(self):\n+        # Create a large number of Alphabet instances to simulate the performance issue.\n+        Alphabet.objects.bulk_create([Alphabet(letter=chr(65 + i % 26)) for i in range(100000)])\n+\n+    def test_delete_performance_regression(self):\n+        with connection.cursor() as cursor:\n+            # Capture the SQL queries executed during the delete operation.\n+            with self.assertNumQueries(1):\n+                Alphabet.objects.all().delete()\n+                # Check the last executed query to see if it contains a subquery.\n+                last_query = str(cursor.db.queries[-1]['sql'])\n+                # Alter the assertion to fail when the subquery is present, indicating the bug.\n+                if \"SELECT\" in last_query:\n+                    raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3025765,
  "num_received_chars": 40112,
  "elapsed_time": 291.51202487945557,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}