{
  "instance_id": "django__django-14787",
  "edit_test_file": "tests/decorators/tests.py",
  "code_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d0..383d428 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -60,7 +60,9 @@ def method_decorator(decorator, name=''):\n     # of the method that will be decorated.\n     def _dec(obj):\n         if not isinstance(obj, type):\n-            return _multi_decorate(decorator, obj)\n+            wrapped = _multi_decorate(decorator, obj)\n+            update_wrapper(wrapped, obj)\n+            return wrapped\n         if not (name and hasattr(obj, name)):\n             raise ValueError(\n                 \"The keyword argument `name` must be the name of a method \"\n@@ -73,6 +75,7 @@ def method_decorator(decorator, name=''):\n                 \"%s (%s).\" % (name, obj, method)\n             )\n         _wrapper = _multi_decorate(decorator, method)\n+        update_wrapper(_wrapper, method)\n         setattr(obj, name, _wrapper)\n         return obj\n \n",
  "test_patch": "diff --git a/tests/decorators/test_method_decorator_preserve_wrapper.py b/tests/decorators/test_method_decorator_preserve_wrapper.py\nnew file mode 100644\nindex 0000000..72f0d95\n--- /dev/null\n+++ b/tests/decorators/test_method_decorator_preserve_wrapper.py\n@@ -0,0 +1,31 @@\n+from unittest import TestCase\n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+import logging\n+\n+# Set up a basic logger\n+logger = logging.getLogger(__name__)\n+\n+def logger_decorator(func):\n+    @wraps(func)\n+    def inner(*args, **kwargs):\n+        try:\n+            result = func(*args, **kwargs)\n+        except Exception as e:\n+            result = str(e)\n+        finally:\n+            logger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+        return result\n+    return inner\n+\n+class TestMethodDecoratorPreserveWrapper(TestCase):\n+    def test_method_decorator_preserve_wrapper(self):\n+        class Test:\n+            @method_decorator(logger_decorator)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        with self.assertRaises(AttributeError) as context:\n+            Test().hello_world()\n+\n+        self.assertIn(\"'functools.partial' object has no attribute '__name__'\", str(context.exception))\n",
  "test_inverted_patch": "diff --git a/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py b/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py\nnew file mode 100644\nindex 0000000..e1d9f28\n--- /dev/null\n+++ b/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py\n@@ -0,0 +1,32 @@\n+from unittest import TestCase\n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+import logging\n+\n+# Set up a basic logger\n+logger = logging.getLogger(__name__)\n+\n+def logger_decorator(func):\n+    @wraps(func)\n+    def inner(*args, **kwargs):\n+        try:\n+            result = func(*args, **kwargs)\n+        except Exception as e:\n+            result = str(e)\n+        finally:\n+            logger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+        return result\n+    return inner\n+\n+class TestMethodDecoratorPreserveWrapper(TestCase):\n+    def test_method_decorator_preserve_wrapper(self):\n+        class Test:\n+            @method_decorator(logger_decorator)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        # The test should now fail when the bug is observed\n+        try:\n+            Test().hello_world()\n+        except AttributeError as e:\n+            self.fail(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3654187,
  "num_received_chars": 48948,
  "elapsed_time": 323.0381028652191,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}