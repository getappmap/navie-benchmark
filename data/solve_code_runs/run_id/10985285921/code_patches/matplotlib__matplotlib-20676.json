{
  "instance_id": "matplotlib__matplotlib-20676",
  "edit_test_file": "lib/matplotlib/tests/test_backends_interactive.py",
  "code_patch": "diff --git a/examples/widgets/span_selector.py b/examples/widgets/span_selector.py\nindex a9e1058..9dbb0f9 100644\n--- a/examples/widgets/span_selector.py\n+++ b/examples/widgets/span_selector.py\n@@ -35,8 +35,8 @@ def onselect(xmin, xmax):\n \n     if len(region_x) >= 2:\n         line2.set_data(region_x, region_y)\n-        ax2.set_xlim(region_x[0], region_x[-1])\n-        ax2.set_ylim(region_y.min(), region_y.max())\n+        ax2.set_xlim(max(region_x[0], ax2.get_xlim()[0]), min(region_x[-1], ax2.get_xlim()[1]))\n+        ax2.set_ylim(max(region_y.min(), ax2.get_ylim()[0]), min(region_y.max(), ax2.get_ylim()[1]))\n         fig.canvas.draw_idle()\n \n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_spanselector_axes_limits.py b/lib/matplotlib/tests/test_spanselector_axes_limits.py\nnew file mode 100644\nindex 0000000..74c88f4\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spanselector_axes_limits.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_axes_limits_include_zero(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)\n+\n+        # Check if the x-axis limits have been incorrectly expanded to include 0\n+        xlim = ax.get_xlim()\n+        self.assertTrue(xlim[0] <= 0, \"The x-axis limits should include 0 due to the bug.\")\n+\n+        plt.close(fig)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py b/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py\nnew file mode 100644\nindex 0000000..13736e0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_axes_limits_include_zero(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)\n+\n+        # Check if the x-axis limits have been incorrectly expanded to include 0\n+        xlim = ax.get_xlim()\n+        # Alter the assertion to fail when the bug is observed\n+        self.assertFalse(xlim[0] <= 0, \"__BUG__HERE__\")\n+\n+        plt.close(fig)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 3626578,
  "num_received_chars": 42579,
  "elapsed_time": 361.50944662094116,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}