{
  "instance_id": "scikit-learn__scikit-learn-10297",
  "edit_test_file": "sklearn/linear_model/tests/test_ridge.py",
  "code_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74a..dbdb35c 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1263,6 +1263,12 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n         Alpha corresponds to ``C^-1`` in other linear models such as\n         LogisticRegression or LinearSVC.\n \n+    store_cv_values : boolean, default=False\n+        Flag indicating if the cross-validation values corresponding to\n+        each alpha should be stored in the `cv_values_` attribute (see\n+        below). This flag is only compatible with `cv=None` (i.e. using\n+        Generalized Cross-Validation).\n+\n     fit_intercept : boolean\n         Whether to calculate the intercept for this model. If set\n         to false, no intercept will be used in calculations\n@@ -1333,10 +1339,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n@@ -1374,6 +1381,14 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n                              compute_sample_weight(self.class_weight, y))\n \n         _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)\n+\n+        if self.store_cv_values:\n+            if len(y.shape) == 1:\n+                cv_values_shape = X.shape[0], len(self.alphas)\n+            else:\n+                cv_values_shape = X.shape[0], Y.shape[1], len(self.alphas)\n+            self.cv_values_ = self.cv_values_.reshape(cv_values_shape)\n+\n         return self\n \n     @property\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_ridge_classifier_cv.py b/sklearn/linear_model/tests/test_ridge_classifier_cv.py\nnew file mode 100644\nindex 0000000..f9e6227\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_ridge_classifier_cv.py\n@@ -0,0 +1,12 @@\n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+from sklearn.utils.testing import assert_raises\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test that RidgeClassifierCV raises a TypeError when store_cv_values is used\n+    n = 100\n+    x = np.random.randn(n, 30)\n+    y = np.random.normal(size=n)\n+\n+    # RidgeClassifierCV does not support store_cv_values, expect TypeError\n+    assert_raises(TypeError, RidgeClassifierCV, alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True)\n",
  "test_inverted_patch": "diff --git a/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py b/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py\nnew file mode 100644\nindex 0000000..308a176\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py\n@@ -0,0 +1,13 @@\n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+import pytest\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test that RidgeClassifierCV raises a TypeError when store_cv_values is used\n+    n = 100\n+    x = np.random.randn(n, 30)\n+    y = np.random.normal(size=n)\n+\n+    # RidgeClassifierCV does not support store_cv_values, expect TypeError\n+    with pytest.raises(TypeError, match=\"__BUG__HERE__\"):\n+        RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True).fit(x, y)\n",
  "num_sent_chars": 1245853,
  "num_received_chars": 20004,
  "elapsed_time": 139.72803807258606,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}