{
  "instance_id": "astropy__astropy-13453",
  "edit_test_file": "astropy/io/ascii/tests/test_html.py",
  "code_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf22..058157b 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -355,6 +355,11 @@ class HTML(core.BaseReader):\n \n         self.data._set_fill_values(cols)\n \n+        # Apply custom formats to the columns\n+        for col in cols:\n+            if col.info.name in self.data.formats:\n+                col.info.format = self.data.formats[col.info.name]\n+\n         lines = []\n \n         # Set HTML escaping to False for any column in the raw_html_cols input\n",
  "test_patch": "diff --git a/astropy/io/ascii/tests/test_html_format_support.py b/astropy/io/ascii/tests/test_html_format_support.py\nnew file mode 100644\nindex 0000000..008faa7\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_html_format_support.py\n@@ -0,0 +1,54 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+from io import StringIO\n+from astropy.table import Table\n+import unittest\n+\n+class TestHTMLFormatSupport(unittest.TestCase):\n+    def test_html_format_ignored(self):\n+        \"\"\"\n+        Test to reproduce the issue where the 'formats' argument is ignored\n+        when writing an Astropy table to HTML format.\n+        \"\"\"\n+        # Generate table\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        tc = t.copy()  # Copy table\n+\n+        # Expected HTML output with \"a\" column formatted to show 2 decimal places\n+        expected_html = \"\"\"\\\n+<html>\n+ <head>\n+  <meta charset=\"utf-8\"/>\n+  <meta content=\"text/html;charset=UTF-8\" http-equiv=\"Content-type\"/>\n+ </head>\n+ <body>\n+  <table>\n+   <thead>\n+    <tr>\n+     <th>a</th>\n+     <th>b</th>\n+    </tr>\n+   </thead>\n+   <tr>\n+    <td>1.24e-24</td>\n+    <td>2</td>\n+   </tr>\n+   <tr>\n+    <td>3.23e-15</td>\n+    <td>4</td>\n+   </tr>\n+  </table>\n+ </body>\n+</html>\n+\"\"\"\n+\n+        # Actual HTML output\n+        with StringIO() as sp:\n+            tc.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+            actual_html = sp.getvalue()\n+\n+        # Assert that the actual HTML output does not match the expected formatted output\n+        self.assertNotEqual(actual_html.strip(), expected_html.strip())\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/astropy/io/ascii/tests/test_html_format_support_inverted.py b/astropy/io/ascii/tests/test_html_format_support_inverted.py\nnew file mode 100644\nindex 0000000..4882a44\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_html_format_support_inverted.py\n@@ -0,0 +1,56 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+from io import StringIO\n+from astropy.table import Table\n+import unittest\n+\n+class TestHTMLFormatSupport(unittest.TestCase):\n+    def test_html_format_ignored(self):\n+        \"\"\"\n+        Test to reproduce the issue where the 'formats' argument is ignored\n+        when writing an Astropy table to HTML format.\n+        \"\"\"\n+        # Generate table\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        tc = t.copy()  # Copy table\n+\n+        # Expected HTML output with \"a\" column formatted to show 2 decimal places\n+        expected_html = \"\"\"\\\n+<html>\n+ <head>\n+  <meta charset=\"utf-8\"/>\n+  <meta content=\"text/html;charset=UTF-8\" http-equiv=\"Content-type\"/>\n+ </head>\n+ <body>\n+  <table>\n+   <thead>\n+    <tr>\n+     <th>a</th>\n+     <th>b</th>\n+    </tr>\n+   </thead>\n+   <tr>\n+    <td>1.24e-24</td>\n+    <td>2</td>\n+   </tr>\n+   <tr>\n+    <td>3.23e-15</td>\n+    <td>4</td>\n+   </tr>\n+  </table>\n+ </body>\n+</html>\n+\"\"\"\n+\n+        # Actual HTML output\n+        with StringIO() as sp:\n+            tc.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+            actual_html = sp.getvalue()\n+\n+        # Assert that the actual HTML output matches the expected formatted output\n+        # This should fail if the bug is present\n+        if actual_html.strip() != expected_html.strip():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 2154682,
  "num_received_chars": 33874,
  "elapsed_time": 235.2543489933014,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 5,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}