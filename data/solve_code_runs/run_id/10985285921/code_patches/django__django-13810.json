{
  "instance_id": "django__django-13810",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da..f311d1c 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -50,12 +50,12 @@ class BaseHandler:\n             else:\n                 middleware_is_async = middleware_can_async\n             try:\n-                # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                # Create a temporary handler to adapt, preserving the original handler in case of MiddlewareNotUsed.\n+                temp_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(temp_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n@@ -63,6 +63,9 @@ class BaseHandler:\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n                 continue\n+            # Only update the handler if the middleware is used.\n+            handler = convert_exception_to_response(mw_instance)\n+            handler_is_async = middleware_is_async\n \n             if mw_instance is None:\n                 raise ImproperlyConfigured(\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1653685,
  "num_received_chars": 12742,
  "elapsed_time": 212.56706070899963,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}