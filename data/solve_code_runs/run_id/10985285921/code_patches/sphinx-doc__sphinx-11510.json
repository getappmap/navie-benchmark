{
  "instance_id": "sphinx-doc__sphinx-11510",
  "edit_test_file": "tests/test_application.py",
  "code_patch": "diff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf..0a7cf64 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -112,6 +112,15 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         # emit \"source-read\" event\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+\n+        # Process included files\n+        if 'include' in self.settings:\n+            for include_file in self.settings['include']:\n+                include_content = self.read_include_file(include_file)\n+                include_arg = [include_content]\n+                env.events.emit('source-read', include_file, include_arg)\n+                content = content.replace(f\".. include:: {include_file}\", include_arg[0])\n+\n         return arg[0]\n \n \n",
  "test_patch": "diff --git a/tests/test_source_read_included_files.py b/tests/test_source_read_included_files.py\nnew file mode 100644\nindex 0000000..4fea456\n--- /dev/null\n+++ b/tests/test_source_read_included_files.py\n@@ -0,0 +1,85 @@\n+import os\n+import shutil\n+import tempfile\n+from unittest import TestCase\n+from sphinx.application import Sphinx\n+\n+class TestSourceReadIncludedFiles(TestCase):\n+    def setUp(self):\n+        # Create a temporary directory\n+        self.test_dir = tempfile.mkdtemp()\n+\n+        # Create conf.py\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"\"\"\n+import sys\n+import os\n+\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = [\n+    'my_extension'\n+]\n+\"\"\")\n+\n+        # Create index.rst\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+This is a test\n+==============\n+\n+.. include:: something-to-include.rst\n+\n+&REPLACE_ME;\n+\"\"\")\n+\n+        # Create something-to-include.rst\n+        with open(os.path.join(self.test_dir, 'something-to-include.rst'), 'w') as f:\n+            f.write(\"\"\"\n+Testing\n+=======\n+\n+&REPLACE_ME;\n+\"\"\")\n+\n+        # Create my_extension.py\n+        with open(os.path.join(self.test_dir, 'my_extension.py'), 'w') as f:\n+            f.write(\"\"\"\n+from sphinx.application import Sphinx\n+\n+__version__ = '1.0'\n+\n+def subst_vars_replace(app: Sphinx, docname, source):\n+    result = source[0]\n+    result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+    source[0] = result\n+\n+def setup(app: Sphinx):\n+    app.connect('source-read', subst_vars_replace)\n+    return dict(\n+        version=__version__,\n+        parallel_read_safe=True,\n+        parallel_write_safe=True\n+    )\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Remove the temporary directory\n+        shutil.rmtree(self.test_dir)\n+\n+    def test_source_read_included_files(self):\n+        # Build the documentation\n+        app = Sphinx(\n+            srcdir=self.test_dir,\n+            confdir=self.test_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctree'),\n+            buildername='html'\n+        )\n+        app.build()\n+\n+        # Check the output\n+        with open(os.path.join(self.test_dir, '_build', 'index.html'), 'r') as f:\n+            content = f.read()\n+            self.assertIn('&amp;REPLACE_ME;', content)\n+            self.assertIn('REPLACED', content)\n",
  "test_inverted_patch": "diff --git a/tests/test_source_read_included_files_inverted.py b/tests/test_source_read_included_files_inverted.py\nnew file mode 100644\nindex 0000000..91ae07c\n--- /dev/null\n+++ b/tests/test_source_read_included_files_inverted.py\n@@ -0,0 +1,87 @@\n+import os\n+import shutil\n+import tempfile\n+from unittest import TestCase\n+from sphinx.application import Sphinx\n+\n+class TestSourceReadIncludedFiles(TestCase):\n+    def setUp(self):\n+        # Create a temporary directory\n+        self.test_dir = tempfile.mkdtemp()\n+\n+        # Create conf.py\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"\"\"\n+import sys\n+import os\n+\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = [\n+    'my_extension'\n+]\n+\"\"\")\n+\n+        # Create index.rst\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+This is a test\n+==============\n+\n+.. include:: something-to-include.rst\n+\n+&REPLACE_ME;\n+\"\"\")\n+\n+        # Create something-to-include.rst\n+        with open(os.path.join(self.test_dir, 'something-to-include.rst'), 'w') as f:\n+            f.write(\"\"\"\n+Testing\n+=======\n+\n+&REPLACE_ME;\n+\"\"\")\n+\n+        # Create my_extension.py\n+        with open(os.path.join(self.test_dir, 'my_extension.py'), 'w') as f:\n+            f.write(\"\"\"\n+from sphinx.application import Sphinx\n+\n+__version__ = '1.0'\n+\n+def subst_vars_replace(app: Sphinx, docname, source):\n+    result = source[0]\n+    result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+    source[0] = result\n+\n+def setup(app: Sphinx):\n+    app.connect('source-read', subst_vars_replace)\n+    return dict(\n+        version=__version__,\n+        parallel_read_safe=True,\n+        parallel_write_safe=True\n+    )\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Remove the temporary directory\n+        shutil.rmtree(self.test_dir)\n+\n+    def test_source_read_included_files(self):\n+        # Build the documentation\n+        app = Sphinx(\n+            srcdir=self.test_dir,\n+            confdir=self.test_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctree'),\n+            buildername='html'\n+        )\n+        app.build()\n+\n+        # Check the output\n+        with open(os.path.join(self.test_dir, '_build', 'index.html'), 'r') as f:\n+            content = f.read()\n+            # The test should fail if '&REPLACE_ME;' is found in the content\n+            if '&amp;REPLACE_ME;' in content:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertIn('REPLACED', content)\n",
  "num_sent_chars": 2914378,
  "num_received_chars": 37760,
  "elapsed_time": 285.5054678916931,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}