{
  "instance_id": "django__django-13670",
  "edit_test_file": "tests/utils_tests/test_dateformat.py",
  "code_patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d7..5264143 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):\n \n     def y(self):\n         \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n",
  "test_patch": "diff --git a/tests/utils_tests/test_year_formatting.py b/tests/utils_tests/test_year_formatting.py\nnew file mode 100644\nindex 0000000..18d61ea\n--- /dev/null\n+++ b/tests/utils_tests/test_year_formatting.py\n@@ -0,0 +1,11 @@\n+from datetime import datetime\n+from django.test import SimpleTestCase\n+from django.utils import dateformat\n+\n+class YearFormattingTest(SimpleTestCase):\n+    def test_year_formatting_with_leading_zeros(self):\n+        # Test for the issue where dateformat.y() doesn't support years < 1000 correctly.\n+        dt = datetime(123, 4, 5, 6, 7)\n+        formatted_year = dateformat.format(dt, 'y')\n+        # The issue is that it returns '3' instead of '23'.\n+        self.assertEqual(formatted_year, '3')\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_year_formatting_inverted.py b/tests/utils_tests/test_year_formatting_inverted.py\nnew file mode 100644\nindex 0000000..1662ca6\n--- /dev/null\n+++ b/tests/utils_tests/test_year_formatting_inverted.py\n@@ -0,0 +1,14 @@\n+from datetime import datetime\n+from django.test import SimpleTestCase\n+from django.utils import dateformat\n+\n+class YearFormattingTest(SimpleTestCase):\n+    def test_year_formatting_with_leading_zeros(self):\n+        # Test for the issue where dateformat.y() doesn't support years < 1000 correctly.\n+        dt = datetime(123, 4, 5, 6, 7)\n+        formatted_year = dateformat.format(dt, 'y')\n+        # The issue is that it returns '3' instead of '23'.\n+        # Alter the test to fail when the issue is observed.\n+        if formatted_year == '3':\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(formatted_year, '23')\n",
  "num_sent_chars": 597519,
  "num_received_chars": 3760,
  "elapsed_time": 37.73515200614929,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}