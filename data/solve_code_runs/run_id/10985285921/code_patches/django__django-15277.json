{
  "instance_id": "django__django-15277",
  "edit_test_file": "tests/invalid_models_tests/test_ordinary_fields.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523..88c9ca9 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_value_output_field_optimization.py b/tests/invalid_models_tests/test_value_output_field_optimization.py\nnew file mode 100644\nindex 0000000..4555236\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_value_output_field_optimization.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from django.db.models import Value\n+from django.core.validators import MaxLengthValidator\n+from django.core.exceptions import ValidationError\n+\n+class ValueOutputFieldOptimizationTest(unittest.TestCase):\n+    def test_value_resolve_output_field_with_string(self):\n+        # Create a Value instance with a string\n+        x = Value('test')\n+        # Resolve the output field\n+        y = x._resolve_output_field()\n+        # Check that a MaxLengthValidator is present\n+        self.assertTrue(any(isinstance(validator, MaxLengthValidator) for validator in y.validators))\n+        # Attempt to clean a value and expect a TypeError due to the issue\n+        with self.assertRaises(TypeError) as context:\n+            y.clean('1', model_instance=None)\n+        self.assertIn(\"'>' not supported between instances of 'int' and 'NoneType'\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_value_output_field_optimization_inverted.py b/tests/invalid_models_tests/test_value_output_field_optimization_inverted.py\nnew file mode 100644\nindex 0000000..f89bb6d\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_value_output_field_optimization_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from django.db.models import Value\n+from django.core.validators import MaxLengthValidator\n+from django.core.exceptions import ValidationError\n+\n+class ValueOutputFieldOptimizationTest(unittest.TestCase):\n+    def test_value_resolve_output_field_with_string(self):\n+        # Create a Value instance with a string\n+        x = Value('test')\n+        # Resolve the output field\n+        y = x._resolve_output_field()\n+        # Check that a MaxLengthValidator is present\n+        self.assertTrue(any(isinstance(validator, MaxLengthValidator) for validator in y.validators))\n+        # Attempt to clean a value and expect a TypeError due to the issue\n+        with self.assertRaises(TypeError) as context:\n+            y.clean('1', model_instance=None)\n+        # Modify the assertion to fail when the bug is observed\n+        self.assertNotIn(\"'>' not supported between instances of 'int' and 'NoneType'\", str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 4855278,
  "num_received_chars": 55165,
  "elapsed_time": 346.66081714630127,
  "lint_repair_count": 9,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}