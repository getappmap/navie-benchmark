{
  "instance_id": "scikit-learn__scikit-learn-13439",
  "edit_test_file": "sklearn/feature_selection/tests/test_rfe.py",
  "code_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 7eaf9a4..b0bafe5 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -233,6 +233,10 @@ class Pipeline(_BaseComposition):\n         estimator = self.steps[-1][1]\n         return 'passthrough' if estimator is None else estimator\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n+\n     # Estimator interface\n \n     def _fit(self, X, y=None, **fit_params):\n",
  "test_patch": "diff --git a/sklearn/feature_selection/tests/test_pipeline_len.py b/sklearn/feature_selection/tests/test_pipeline_len.py\nnew file mode 100644\nindex 0000000..a330f74\n--- /dev/null\n+++ b/sklearn/feature_selection/tests/test_pipeline_len.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from sklearn import svm\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SelectKBest, f_regression\n+from sklearn.pipeline import Pipeline\n+\n+class TestPipelineLen(unittest.TestCase):\n+    def test_pipeline_len(self):\n+        # generate some data to play with\n+        X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+        anova_filter = SelectKBest(f_regression, k=5)\n+        clf = svm.SVC(kernel='linear')\n+        pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+        # Check if accessing len(pipe) raises a TypeError\n+        with self.assertRaises(TypeError):\n+            len(pipe)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/sklearn/feature_selection/tests/test_pipeline_len_inverted.py b/sklearn/feature_selection/tests/test_pipeline_len_inverted.py\nnew file mode 100644\nindex 0000000..cbc5adf\n--- /dev/null\n+++ b/sklearn/feature_selection/tests/test_pipeline_len_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sklearn import svm\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SelectKBest, f_regression\n+from sklearn.pipeline import Pipeline\n+\n+class TestPipelineLen(unittest.TestCase):\n+    def test_pipeline_len(self):\n+        # generate some data to play with\n+        X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+        anova_filter = SelectKBest(f_regression, k=5)\n+        clf = svm.SVC(kernel='linear')\n+        pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+        # Check if accessing len(pipe) raises a TypeError\n+        # Altered to fail when the issue is observed\n+        try:\n+            len(pipe)\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 722947,
  "num_received_chars": 3693,
  "elapsed_time": 44.83069634437561,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}