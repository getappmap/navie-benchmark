{
  "instance_id": "django__django-12708",
  "edit_test_file": "tests/schema/tests.py",
  "code_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f8840..4a635ed 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,13 +407,19 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n+        # Filter out constraints that are not relevant to the current operation\n+        relevant_constraints = [\n+            name for name in constraint_names\n+            if (constraint_kwargs.get('unique') and name.endswith('_uniq')) or\n+               (constraint_kwargs.get('index') and name.endswith('_idx'))\n+        ]\n+        if len(relevant_constraints) != 1:\n+            raise ValueError(\"Found wrong number (%s) of relevant constraints for %s(%s)\" % (\n+                len(relevant_constraints),\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        self.execute(self._delete_constraint_sql(sql, model, relevant_constraints[0]))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n",
  "test_patch": "diff --git a/tests/schema/test_migration_issue_django_1_11_10.py b/tests/schema/test_migration_issue_django_1_11_10.py\nnew file mode 100644\nindex 0000000..508db08\n--- /dev/null\n+++ b/tests/schema/test_migration_issue_django_1_11_10.py\n@@ -0,0 +1,43 @@\n+import unittest\n+from django.db import models, connection, IntegrityError\n+from django.test import TransactionTestCase\n+\n+class TestMigrationIssueDjango11110(TransactionTestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where deleting an index_together fails\n+    if there is a unique_together on the same fields.\n+    \"\"\"\n+\n+    available_apps = []\n+\n+    def setUp(self):\n+        class TestModel(models.Model):\n+            field1 = models.CharField(max_length=255)\n+            field2 = models.CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = 'schema'\n+                unique_together = (('field1', 'field2'),)\n+                index_together = (('field1', 'field2'),)\n+\n+        self.TestModel = TestModel\n+        with connection.schema_editor() as editor:\n+            editor.create_model(self.TestModel)\n+\n+    def tearDown(self):\n+        with connection.schema_editor() as editor:\n+            editor.delete_model(self.TestModel)\n+\n+    def test_delete_index_together_with_unique_together(self):\n+        \"\"\"\n+        Attempt to delete index_together when unique_together is present\n+        on the same fields, expecting a ValueError.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            with connection.schema_editor() as editor:\n+                editor.alter_index_together(self.TestModel, [('field1', 'field2')], [])\n+\n+        self.assertIn(\"Found wrong number (2) of constraints\", str(cm.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/schema/test_migration_issue_django_1_11_10_inverted.py b/tests/schema/test_migration_issue_django_1_11_10_inverted.py\nnew file mode 100644\nindex 0000000..36573b0\n--- /dev/null\n+++ b/tests/schema/test_migration_issue_django_1_11_10_inverted.py\n@@ -0,0 +1,45 @@\n+import unittest\n+from django.db import models, connection, IntegrityError\n+from django.test import TransactionTestCase\n+\n+class TestMigrationIssueDjango11110(TransactionTestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where deleting an index_together fails\n+    if there is a unique_together on the same fields.\n+    \"\"\"\n+\n+    available_apps = []\n+\n+    def setUp(self):\n+        class TestModel(models.Model):\n+            field1 = models.CharField(max_length=255)\n+            field2 = models.CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = 'schema'\n+                unique_together = (('field1', 'field2'),)\n+                index_together = (('field1', 'field2'),)\n+\n+        self.TestModel = TestModel\n+        with connection.schema_editor() as editor:\n+            editor.create_model(self.TestModel)\n+\n+    def tearDown(self):\n+        with connection.schema_editor() as editor:\n+            editor.delete_model(self.TestModel)\n+\n+    def test_delete_index_together_with_unique_together(self):\n+        \"\"\"\n+        Attempt to delete index_together when unique_together is present\n+        on the same fields, expecting a ValueError.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            with connection.schema_editor() as editor:\n+                editor.alter_index_together(self.TestModel, [('field1', 'field2')], [])\n+\n+        # Change the assertion to raise the specific error message \"__BUG__HERE__\"\n+        if \"Found wrong number (2) of constraints\" in str(cm.exception):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 3312484,
  "num_received_chars": 62659,
  "elapsed_time": 346.5927233695984,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}