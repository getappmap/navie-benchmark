{
  "instance_id": "matplotlib__matplotlib-22871",
  "edit_test_file": "lib/matplotlib/tests/test_dates.py",
  "code_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 4d8ddf3..3def9e2 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -797,8 +797,8 @@ class ConciseDateFormatter(ticker.Formatter):\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n-                if level < 2:\n-                    show_offset = False\n+                if level < 2 or (level == 2 and not any(tdt.month == 1 for tdt in tickdatetime)):\n+                    show_offset = True\n                 break\n             elif level == 0:\n                 # all tickdate are the same, so only micros might be different\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_concise_date_formatter_bug.py b/lib/matplotlib/tests/test_concise_date_formatter_bug.py\nnew file mode 100644\nindex 0000000..15a1eb5\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_concise_date_formatter_bug.py\n@@ -0,0 +1,36 @@\n+import matplotlib.pyplot as plt\n+import matplotlib.dates as mdates\n+from datetime import datetime, timedelta\n+import unittest\n+\n+class TestConciseDateFormatterBug(unittest.TestCase):\n+    def test_concise_date_formatter_missing_year(self):\n+        # Create time array\n+        initial = datetime(2021, 2, 14, 0, 0, 0)\n+        time_array = [initial + timedelta(days=x) for x in range(1, 200)]\n+\n+        # Create data array\n+        data = [-x**2 / 20000 for x in range(1, 200)]\n+\n+        # Plot data\n+        fig, ax = plt.subplots()\n+        ax.plot(time_array, data)\n+\n+        locator = mdates.AutoDateLocator()\n+        formatter = mdates.ConciseDateFormatter(locator)\n+\n+        ax.grid(True)\n+        ax.set_ylabel(\"Temperature ($\\\\degree$C)\")\n+        ax.xaxis.set_major_locator(locator)\n+        ax.xaxis.set_major_formatter(formatter)\n+        fig.autofmt_xdate()  # Automatically makes the x-labels rotate\n+\n+        # Draw the canvas to ensure all elements are rendered\n+        fig.canvas.draw()\n+\n+        # Check if the year \"2021\" is missing in the x-axis offset text\n+        offset_text = ax.xaxis.get_offset_text().get_text()\n+        self.assertNotIn(\"2021\", offset_text, \"Year '2021' should not be present in the offset text\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_concise_date_formatter_bug_inverted.py b/lib/matplotlib/tests/test_concise_date_formatter_bug_inverted.py\nnew file mode 100644\nindex 0000000..920eaf8\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_concise_date_formatter_bug_inverted.py\n@@ -0,0 +1,36 @@\n+import matplotlib.pyplot as plt\n+import matplotlib.dates as mdates\n+from datetime import datetime, timedelta\n+import unittest\n+\n+class TestConciseDateFormatterBug(unittest.TestCase):\n+    def test_concise_date_formatter_missing_year(self):\n+        # Create time array\n+        initial = datetime(2021, 2, 14, 0, 0, 0)\n+        time_array = [initial + timedelta(days=x) for x in range(1, 200)]\n+\n+        # Create data array\n+        data = [-x**2 / 20000 for x in range(1, 200)]\n+\n+        # Plot data\n+        fig, ax = plt.subplots()\n+        ax.plot(time_array, data)\n+\n+        locator = mdates.AutoDateLocator()\n+        formatter = mdates.ConciseDateFormatter(locator)\n+\n+        ax.grid(True)\n+        ax.set_ylabel(\"Temperature ($\\\\degree$C)\")\n+        ax.xaxis.set_major_locator(locator)\n+        ax.xaxis.set_major_formatter(formatter)\n+        fig.autofmt_xdate()  # Automatically makes the x-labels rotate\n+\n+        # Draw the canvas to ensure all elements are rendered\n+        fig.canvas.draw()\n+\n+        # Check if the year \"2021\" is missing in the x-axis offset text\n+        offset_text = ax.xaxis.get_offset_text().get_text()\n+        self.assertIn(\"2021\", offset_text, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3002693,
  "num_received_chars": 38016,
  "elapsed_time": 379.7655186653137,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}