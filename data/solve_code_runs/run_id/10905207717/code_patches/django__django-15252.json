{
  "instance_id": "django__django-15252",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b..8ee89d4 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -2,6 +2,7 @@ from django.apps.registry import Apps\n from django.db import DatabaseError, models\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n+from django.db import router\n \n from .exceptions import MigrationSchemaMissing\n \n@@ -58,6 +59,9 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migrations are allowed on this connection\n+        if not router.allow_migrate(self.connection.alias, 'migrations'):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -74,6 +78,8 @@ class MigrationRecorder:\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        if not router.allow_migrate(self.connection.alias, 'migrations'):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -83,11 +89,15 @@ class MigrationRecorder:\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        if not router.allow_migrate(self.connection.alias, app):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        if not router.allow_migrate(self.connection.alias, app):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 943748,
  "num_received_chars": 17736,
  "elapsed_time": 326.5858631134033,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}