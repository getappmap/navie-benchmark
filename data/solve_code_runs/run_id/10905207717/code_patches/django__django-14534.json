{
  "instance_id": "django__django-14534",
  "edit_test_file": "tests/forms_tests/widget_tests/test_checkboxselectmultiple.py",
  "code_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0e..a5e29f9 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,8 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        # Use the predefined ID if available, otherwise fall back to default construction\n+        return self.data['attrs'].get('id', 'id_%s_%s' % (self.data['name'], self.data['index']))\n \n     @property\n     def choice_label(self):\n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_boundwidget_id_for_label.py b/tests/forms_tests/widget_tests/test_boundwidget_id_for_label.py\nnew file mode 100644\nindex 0000000..74f2683\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_boundwidget_id_for_label.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from django import forms\n+from django.forms import CheckboxSelectMultiple\n+from django.forms.boundfield import BoundField\n+\n+class TestBoundWidgetIdForLabel(unittest.TestCase):\n+    def test_boundwidget_id_for_label_ignores_custom_id(self):\n+        class TestForm(forms.Form):\n+            choices = forms.MultipleChoiceField(\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+                choices=[('a', 'A'), ('b', 'B')]\n+            )\n+\n+        form = TestForm()\n+        bound_field = BoundField(form, form.fields['choices'], 'choices')\n+        subwidgets = list(bound_field.subwidgets)\n+        \n+        # Check if the id_for_label ignores the custom id and uses the default format\n+        for index, widget in enumerate(subwidgets):\n+            self.assertEqual(widget.id_for_label, f'id_choices_{index}')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_boundwidget_id_for_label_inverted.py b/tests/forms_tests/widget_tests/test_boundwidget_id_for_label_inverted.py\nnew file mode 100644\nindex 0000000..94f9046\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_boundwidget_id_for_label_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from django import forms\n+from django.forms import CheckboxSelectMultiple\n+from django.forms.boundfield import BoundField\n+\n+class TestBoundWidgetIdForLabel(unittest.TestCase):\n+    def test_boundwidget_id_for_label_ignores_custom_id(self):\n+        class TestForm(forms.Form):\n+            choices = forms.MultipleChoiceField(\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+                choices=[('a', 'A'), ('b', 'B')]\n+            )\n+\n+        form = TestForm()\n+        bound_field = BoundField(form, form.fields['choices'], 'choices')\n+        subwidgets = list(bound_field.subwidgets)\n+        \n+        # Check if the id_for_label uses the custom id instead of the default format\n+        for index, widget in enumerate(subwidgets):\n+            # This assertion should fail if the bug is present\n+            if widget.id_for_label != 'custom_id':\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2163234,
  "num_received_chars": 22225,
  "elapsed_time": 489.79436588287354,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}