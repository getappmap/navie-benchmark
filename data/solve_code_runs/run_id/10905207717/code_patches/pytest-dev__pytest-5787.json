{
  "instance_id": "pytest-dev__pytest-5787",
  "edit_test_file": "testing/test_reports.py",
  "code_patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex a0f4d15..79d2962 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -866,6 +866,9 @@ class TerminalRepr:\n     def __repr__(self):\n         return \"<{} instance at {:0x}>\".format(self.__class__, id(self))\n \n+    def to_dict(self):\n+        raise NotImplementedError(\"Subclasses should implement this method.\")\n+\n \n class ExceptionRepr(TerminalRepr):\n     def __init__(self):\n@@ -897,6 +900,18 @@ class ExceptionChainRepr(ExceptionRepr):\n                 tw.line(element[2], yellow=True)\n         super().toterminal(tw)\n \n+    def to_dict(self):\n+        return {\n+            \"chain\": [\n+                {\n+                    \"reprtraceback\": element[0].to_dict(),\n+                    \"reprcrash\": element[1].to_dict(),\n+                    \"description\": element[2],\n+                }\n+                for element in self.chain\n+            ]\n+        }\n+\n \n class ReprExceptionInfo(ExceptionRepr):\n     def __init__(self, reprtraceback, reprcrash):\n@@ -908,6 +923,12 @@ class ReprExceptionInfo(ExceptionRepr):\n         self.reprtraceback.toterminal(tw)\n         super().toterminal(tw)\n \n+    def to_dict(self):\n+        return {\n+            \"reprtraceback\": self.reprtraceback.to_dict(),\n+            \"reprcrash\": self.reprcrash.to_dict(),\n+        }\n+\n \n class ReprTraceback(TerminalRepr):\n     entrysep = \"_ \"\n",
  "test_patch": "diff --git a/testing/test_chained_exceptions.py b/testing/test_chained_exceptions.py\nnew file mode 100644\nindex 0000000..6795ca7\n--- /dev/null\n+++ b/testing/test_chained_exceptions.py\n@@ -0,0 +1,23 @@\n+import pytest\n+\n+def test_chained_exception_with_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(11)\n+            except Exception as e1:\n+                raise ValueError(12) from e1\n+        except Exception as e2:\n+            raise ValueError(13) from e2\n+    assert str(excinfo.value) == \"13\"\n+\n+def test_chained_exception_without_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(21)\n+            except Exception:\n+                raise ValueError(22)\n+        except Exception:\n+            raise ValueError(23)\n+    assert str(excinfo.value) == \"23\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/test_chained_exceptions_inverted.py b/testing/test_chained_exceptions_inverted.py\nnew file mode 100644\nindex 0000000..5c6abb4\n--- /dev/null\n+++ b/testing/test_chained_exceptions_inverted.py\n@@ -0,0 +1,23 @@\n+import pytest\n+\n+def test_chained_exception_with_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(11)\n+            except Exception as e1:\n+                raise ValueError(12) from e1\n+        except Exception as e2:\n+            raise ValueError(13) from e2\n+    assert str(excinfo.value) != \"13\", \"__BUG__HERE__\"\n+\n+def test_chained_exception_without_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(21)\n+            except Exception:\n+                raise ValueError(22)\n+        except Exception:\n+            raise ValueError(23)\n+    assert str(excinfo.value) != \"23\", \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 3631742,
  "num_received_chars": 66300,
  "elapsed_time": 1388.1590802669525,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}