{
  "instance_id": "sphinx-doc__sphinx-7590",
  "edit_test_file": "tests/test_util_docutils.py",
  "code_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d88..c50adb1 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -788,6 +788,21 @@ class ASTExpression(ASTBase):\n class ASTLiteral(ASTExpression):\n     pass\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str, suffix: str) -> None:\n+        self.literal = literal\n+        self.suffix = suffix\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return f\"{self.literal}{self.suffix}\"\n+\n+    def get_id(self, version: int) -> str:\n+        return f\"Ud{self.literal}{self.suffix}\"\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode.append(nodes.Text(self._stringify(lambda x: x)))\n+\n \n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n@@ -4658,6 +4673,15 @@ class DefinitionParser(BaseParser):\n             return ASTBooleanLiteral(True)\n         if self.skip_word('false'):\n             return ASTBooleanLiteral(False)\n+        \n+        # Attempt to parse a user-defined literal\n+        pos = self.pos\n+        if self.match(_string_re):\n+            literal = self.matched_text\n+            if self.match(identifier_re):\n+                suffix = self.matched_text\n+                return ASTUserDefinedLiteral(literal, suffix)\n+            self.pos = pos  # Reset if no valid suffix\n         for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n                       integer_literal_re, octal_literal_re]:\n             pos = self.pos\n",
  "test_patch": "diff --git a/tests/test_domain_cpp_udl.py b/tests/test_domain_cpp_udl.py\nnew file mode 100644\nindex 0000000..0bcfdb0\n--- /dev/null\n+++ b/tests/test_domain_cpp_udl.py\n@@ -0,0 +1,27 @@\n+import os\n+import unittest\n+from io import StringIO\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestCppUserDefinedLiterals(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.srcdir, '_doctrees')\n+        self.confdir = self.srcdir\n+\n+    def test_cpp_user_defined_literals(self):\n+        with self.assertRaises(ApplicationError) as context:\n+            Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                'html',\n+                warning=StringIO()\n+            )\n+        self.assertIn(\"config directory doesn't contain a conf.py file\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_domain_cpp_udl_inverted.py b/tests/test_domain_cpp_udl_inverted.py\nnew file mode 100644\nindex 0000000..14fad55\n--- /dev/null\n+++ b/tests/test_domain_cpp_udl_inverted.py\n@@ -0,0 +1,28 @@\n+import os\n+import unittest\n+from io import StringIO\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestCppUserDefinedLiterals(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.srcdir, '_doctrees')\n+        self.confdir = self.srcdir\n+\n+    def test_cpp_user_defined_literals(self):\n+        with self.assertRaises(ApplicationError) as context:\n+            Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                'html',\n+                warning=StringIO()\n+            )\n+        # Altered the test to fail when the issue is observed\n+        self.assertNotIn(\"config directory doesn't contain a conf.py file\", str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1393873,
  "num_received_chars": 8261,
  "elapsed_time": 182.8603539466858,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}