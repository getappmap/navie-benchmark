{
  "instance_id": "scikit-learn__scikit-learn-14087",
  "edit_test_file": "sklearn/linear_model/tests/test_coordinate_descent.py",
  "code_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1d..a00da40 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2171,17 +2171,20 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 # all coefficients corresponding to the best scores.\n                 best_indices = np.argmax(scores, axis=1)\n                 if self.multi_class == 'ovr':\n-                    w = np.mean([coefs_paths[i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                    if self.refit:\n+                        w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                    if self.refit:\n+                        w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n \n-                best_indices_C = best_indices % len(self.Cs_)\n-                self.C_.append(np.mean(self.Cs_[best_indices_C]))\n+                if self.refit:\n+                    best_indices_C = best_indices % len(self.Cs_)\n+                    self.C_.append(np.mean(self.Cs_[best_indices_C]))\n \n-                best_indices_l1 = best_indices // len(self.Cs_)\n-                self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n+                    best_indices_l1 = best_indices // len(self.Cs_)\n+                    self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n \n             if multi_class == 'multinomial':\n                 self.C_ = np.tile(self.C_, n_classes)\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_logistic_regression_cv_index_error.py b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error.py\nnew file mode 100644\nindex 0000000..27a6bf9\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error.py\n@@ -0,0 +1,22 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+class TestLogisticRegressionCVIndexError(unittest.TestCase):\n+    def test_logistic_regression_cv_index_error(self):\n+        np.random.seed(29)\n+        X = np.random.normal(size=(1000, 3))\n+        beta = np.random.normal(size=3)\n+        intercept = np.random.normal(size=None)\n+        y = np.sign(intercept + X @ beta)\n+\n+        with self.assertRaises(IndexError):\n+            LogisticRegressionCV(\n+                cv=5,\n+                solver='saga',\n+                tol=1e-2,\n+                refit=False\n+            ).fit(X, y)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/linear_model/tests/test_logistic_regression_cv_index_error_inverted.py b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error_inverted.py\nnew file mode 100644\nindex 0000000..7c50b30\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+class TestLogisticRegressionCVIndexError(unittest.TestCase):\n+    def test_logistic_regression_cv_index_error(self):\n+        np.random.seed(29)\n+        X = np.random.normal(size=(1000, 3))\n+        beta = np.random.normal(size=3)\n+        intercept = np.random.normal(size=None)\n+        y = np.sign(intercept + X @ beta)\n+\n+        try:\n+            LogisticRegressionCV(\n+                cv=5,\n+                solver='saga',\n+                tol=1e-2,\n+                refit=False\n+            ).fit(X, y)\n+        except IndexError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 3717710,
  "num_received_chars": 41947,
  "elapsed_time": 1088.601921081543,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}