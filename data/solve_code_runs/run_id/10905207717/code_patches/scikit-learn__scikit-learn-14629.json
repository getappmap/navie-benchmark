{
  "instance_id": "scikit-learn__scikit-learn-14629",
  "edit_test_file": "sklearn/tests/test_multioutput.py",
  "code_patch": "diff --git a/sklearn/multioutput.py b/sklearn/multioutput.py\nindex 463b72d..6aed603 100644\n--- a/sklearn/multioutput.py\n+++ b/sklearn/multioutput.py\n@@ -316,6 +316,11 @@ class MultiOutputClassifier(MultiOutputEstimator, ClassifierMixin):\n         ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n         for more details.\n \n+    Attributes\n+    ----------\n+    classes_ : list of arrays\n+        A list containing the `classes_` attribute for each estimator.\n+\n     Attributes\n     ----------\n     estimators_ : list of ``n_output`` estimators\n@@ -324,6 +329,11 @@ class MultiOutputClassifier(MultiOutputEstimator, ClassifierMixin):\n \n     def __init__(self, estimator, n_jobs=None):\n         super().__init__(estimator, n_jobs)\n+        self.classes_ = None\n+\n+    def _update_classes(self):\n+        \"\"\"Update the classes_ attribute to store classes for each estimator.\"\"\"\n+        self.classes_ = [estimator.classes_ for estimator in self.estimators_]\n \n     def predict_proba(self, X):\n         \"\"\"Probability estimates.\n@@ -344,6 +354,7 @@ class MultiOutputClassifier(MultiOutputEstimator, ClassifierMixin):\n             The class probabilities of the input samples. The order of the\n             classes corresponds to that in the attribute `classes_`.\n         \"\"\"\n+        self._update_classes()\n         check_is_fitted(self)\n         if not all([hasattr(estimator, \"predict_proba\")\n                     for estimator in self.estimators_]):\n",
  "test_patch": "diff --git a/sklearn/tests/test_cross_val_predict_multioutput.py b/sklearn/tests/test_cross_val_predict_multioutput.py\nnew file mode 100644\nindex 0000000..a20bef4\n--- /dev/null\n+++ b/sklearn/tests/test_cross_val_predict_multioutput.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.exceptions import NotFittedError\n+\n+class TestCrossValPredictMultiOutput(unittest.TestCase):\n+    def test_cross_val_predict_proba_with_multioutputclassifier(self):\n+        X, Y = make_multilabel_classification()\n+        mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+        \n+        # This should work fine\n+        pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+        \n+        # This should raise an AttributeError\n+        with self.assertRaises(AttributeError) as context:\n+            pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+        \n+        self.assertIn(\"object has no attribute 'classes_'\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_cross_val_predict_multioutput_inverted.py b/sklearn/tests/test_cross_val_predict_multioutput_inverted.py\nnew file mode 100644\nindex 0000000..e6b2cbd\n--- /dev/null\n+++ b/sklearn/tests/test_cross_val_predict_multioutput_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+class TestCrossValPredictMultiOutput(unittest.TestCase):\n+    def test_cross_val_predict_proba_with_multioutputclassifier(self):\n+        X, Y = make_multilabel_classification()\n+        mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+        \n+        # This should work fine\n+        pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+        \n+        # This should raise an AttributeError\n+        with self.assertRaises(AttributeError) as context:\n+            pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+        \n+        # Alter the test to fail when the bug is observed\n+        self.assertNotIn(\"object has no attribute 'classes_'\", str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 4948776,
  "num_received_chars": 83974,
  "elapsed_time": 1433.1866908073425,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}