{
  "instance_id": "sympy__sympy-18199",
  "edit_test_file": "sympy/functions/combinatorial/tests/test_comb_factorials.py",
  "code_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 9a3052d..3ff8884 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -765,9 +765,15 @@ def nthroot_mod(a, n, p, all_roots=False):\n     [8, 11]\n     >>> nthroot_mod(68, 3, 109)\n     23\n+    >>> nthroot_mod(17*17, 5, 17, True)\n+    [0, 1, 16]\n     \"\"\"\n     from sympy.core.numbers import igcdex\n     a, n, p = as_int(a), as_int(n), as_int(p)\n+    if a % p == 0:\n+        if all_roots:\n+            return sorted(set([0] + _nthroot_mod1(a, n, p, all_roots)))\n+        return 0\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n@@ -775,7 +781,6 @@ def nthroot_mod(a, n, p, all_roots=False):\n         return None\n     if not isprime(p):\n         raise NotImplementedError(\"Not implemented for composite p\")\n-\n     if (p - 1) % n == 0:\n         return _nthroot_mod1(a, n, p, all_roots)\n     # The roots of ``x**n - a = 0 (mod p)`` are roots of\n",
  "test_patch": "diff --git a/sympy/functions/combinatorial/tests/test_nthroot_mod_zero_root.py b/sympy/functions/combinatorial/tests/test_nthroot_mod_zero_root.py\nnew file mode 100644\nindex 0000000..41584aa\n--- /dev/null\n+++ b/sympy/functions/combinatorial/tests/test_nthroot_mod_zero_root.py\n@@ -0,0 +1,6 @@\n+from sympy.ntheory.residue_ntheory import nthroot_mod\n+\n+def test_nthroot_mod_zero_root():\n+    # Test case to reproduce the issue where nthroot_mod misses the root x = 0 mod p\n+    result = nthroot_mod(17*17, 5, 17, all_roots=True)\n+    assert 0 in result, \"nthroot_mod should return 0 as a root, but it does not.\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/functions/combinatorial/tests/test_nthroot_mod_zero_root_inverted.py b/sympy/functions/combinatorial/tests/test_nthroot_mod_zero_root_inverted.py\nnew file mode 100644\nindex 0000000..026eb68\n--- /dev/null\n+++ b/sympy/functions/combinatorial/tests/test_nthroot_mod_zero_root_inverted.py\n@@ -0,0 +1,6 @@\n+from sympy.ntheory.residue_ntheory import nthroot_mod\n+\n+def test_nthroot_mod_zero_root():\n+    # Test case to reproduce the issue where nthroot_mod misses the root x = 0 mod p\n+    result = nthroot_mod(17*17, 5, 17, all_roots=True)\n+    assert 0 not in result, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2807095,
  "num_received_chars": 38751,
  "elapsed_time": 887.0093660354614,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}