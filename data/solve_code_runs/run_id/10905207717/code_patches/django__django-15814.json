{
  "instance_id": "django__django-15814",
  "edit_test_file": "tests/defer/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..48b30f9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -93,6 +93,8 @@ class ModelIterable(BaseIterable):\n             compiler.annotation_col_map,\n         )\n         model_cls = klass_info[\"model\"]\n+        # Use concrete model's _meta if the model is a proxy\n+        model_meta = model_cls._meta.concrete_model._meta if model_cls._meta.proxy else model_cls._meta\n         select_fields = klass_info[\"select_fields\"]\n         model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1\n         init_list = [\n",
  "test_patch": "diff --git a/tests/defer/test_proxy_model_query_crash.py b/tests/defer/test_proxy_model_query_crash.py\nnew file mode 100644\nindex 0000000..78ba358\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/defer/test_proxy_model_query_crash_inverted.py b/tests/defer/test_proxy_model_query_crash_inverted.py\nnew file mode 100644\nindex 0000000..ec6866b\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash_inverted.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3220500,
  "num_received_chars": 71330,
  "elapsed_time": 906.0663866996765,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}