{
  "instance_id": "django__django-14007",
  "edit_test_file": "tests/queries/test_db_returning.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca..3bd4c2a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -451,6 +451,14 @@ class QuerySet:\n         obj = self.model(**kwargs)\n         self._for_write = True\n         obj.save(force_insert=True, using=self.db)\n+        \n+        # Process returning fields with from_db_value\n+        for field in self.model._meta.db_returning_fields:\n+            if hasattr(field, 'from_db_value'):\n+                value = getattr(obj, field.attname)\n+                converted_value = field.from_db_value(value, None, connections[self.db])\n+                setattr(obj, field.attname, converted_value)\n+        \n         return obj\n \n     def _prepare_for_bulk_create(self, objs):\n@@ -1303,11 +1311,19 @@ class QuerySet:\n         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert\n         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:\n             if bulk_return and not ignore_conflicts:\n-                inserted_rows.extend(self._insert(\n+                returned_columns = self._insert(\n                     item, fields=fields, using=self.db,\n                     returning_fields=self.model._meta.db_returning_fields,\n                     ignore_conflicts=ignore_conflicts,\n-                ))\n+                )\n+                for obj, results in zip(item, returned_columns):\n+                    for result, field in zip(results, self.model._meta.db_returning_fields):\n+                        if hasattr(field, 'from_db_value'):\n+                            result = field.from_db_value(result, None, connections[self.db])\n+                        setattr(obj, field.attname, result)\n+                    obj._state.adding = False\n+                    obj._state.db = self.db\n+                inserted_rows.extend(returned_columns)\n             else:\n                 self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)\n         return inserted_rows\n",
  "test_patch": "diff --git a/tests/queries/test_field_converters.py b/tests/queries/test_field_converters.py\nnew file mode 100644\nindex 0000000..11bce0b\n--- /dev/null\n+++ b/tests/queries/test_field_converters.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import BigAutoField\n+\n+class MyIntWrapper(int):\n+    pass\n+\n+class MyAutoField(BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FieldConvertersTests(TestCase):\n+    def test_insert_does_not_call_from_db_value(self):\n+        am = AutoModel.objects.create()\n+        # The issue is that the id is not wrapped in MyIntWrapper on creation\n+        self.assertIsInstance(am.id, int)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_field_converters_inverted.py b/tests/queries/test_field_converters_inverted.py\nnew file mode 100644\nindex 0000000..45b07f5\n--- /dev/null\n+++ b/tests/queries/test_field_converters_inverted.py\n@@ -0,0 +1,28 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import BigAutoField\n+\n+class MyIntWrapper(int):\n+    pass\n+\n+class MyAutoField(BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FieldConvertersTests(TestCase):\n+    def test_insert_does_not_call_from_db_value(self):\n+        am = AutoModel.objects.create()\n+        # The issue is that the id is not wrapped in MyIntWrapper on creation\n+        # Change the assertion to expect MyIntWrapper, so it fails if the bug is present\n+        if not isinstance(am.id, MyIntWrapper):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3770265,
  "num_received_chars": 69202,
  "elapsed_time": 1207.3513143062592,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}