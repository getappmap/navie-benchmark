{
  "instance_id": "scikit-learn__scikit-learn-14983",
  "edit_test_file": "sklearn/linear_model/tests/test_coordinate_descent.py",
  "code_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce..cc455ac 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1216,6 +1216,13 @@ class RepeatedKFold(_RepeatedSplits):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return (\"{0}(n_splits={1}, n_repeats={2}, random_state={3})\"\n+                .format(self.__class__.__name__,\n+                        self.cvargs['n_splits'],\n+                        self.n_repeats,\n+                        self.random_state))\n+\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1269,6 +1276,13 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return (\"{0}(n_splits={1}, n_repeats={2}, random_state={3})\"\n+                .format(self.__class__.__name__,\n+                        self.cvargs['n_splits'],\n+                        self.n_repeats,\n+                        self.random_state))\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_repeated_kfold_repr.py b/sklearn/linear_model/tests/test_repeated_kfold_repr.py\nnew file mode 100644\nindex 0000000..d188c4c\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_repeated_kfold_repr.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestRepeatedKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        self.assertNotEqual(repr(rkf), \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        self.assertNotEqual(repr(rskf), \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/linear_model/tests/test_repeated_kfold_repr_inverted.py b/sklearn/linear_model/tests/test_repeated_kfold_repr_inverted.py\nnew file mode 100644\nindex 0000000..7511df0\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_repeated_kfold_repr_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestRepeatedKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        # The test should now fail if the bug is present, i.e., if the repr is incorrect\n+        self.assertEqual(repr(rkf), \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\", \"__BUG__HERE__\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        # The test should now fail if the bug is present, i.e., if the repr is incorrect\n+        self.assertEqual(repr(rskf), \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\", \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1191363,
  "num_received_chars": 11784,
  "elapsed_time": 317.91261053085327,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}