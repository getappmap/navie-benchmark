{
  "instance_id": "django__django-13033",
  "edit_test_file": "tests/ordering/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd..425875b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1131,6 +1131,9 @@ class QuerySet:\n         assert not self.query.is_sliced, \\\n             \"Cannot reorder a query once a slice has been taken.\"\n         obj = self._chain()\n+        # Clear default ordering if order_by is explicitly specified\n+        if field_names:\n+            obj.query.default_ordering = False\n         obj.query.clear_ordering(force_empty=False)\n         obj.query.add_ordering(*field_names)\n         return obj\n",
  "test_patch": "diff --git a/tests/ordering/test_self_referencing_foreign_key_ordering.py b/tests/ordering/test_self_referencing_foreign_key_ordering.py\nnew file mode 100644\nindex 0000000..2ec3162\n--- /dev/null\n+++ b/tests/ordering/test_self_referencing_foreign_key_ordering.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query contains the unexpected DESCENDING sort\n+        self.assertIn('ORDER BY T3.\"id\" DESC', sql_query)\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertEqual(sql_query.count('JOIN'), 2)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py b/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py\nnew file mode 100644\nindex 0000000..bda9857\n--- /dev/null\n+++ b/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py\n@@ -0,0 +1,36 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query does not contain the unexpected DESCENDING sort\n+        if 'ORDER BY T3.\"id\" DESC' in sql_query:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertEqual(sql_query.count('JOIN'), 2)\n\\ No newline at end of file\n",
  "num_sent_chars": 5254628,
  "num_received_chars": 162961,
  "elapsed_time": 2684.993575811386,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}