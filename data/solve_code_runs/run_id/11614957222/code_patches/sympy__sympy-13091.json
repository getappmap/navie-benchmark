{
  "instance_id": "sympy__sympy-13091",
  "edit_test_file": "sympy/polys/tests/test_pythonrational.py",
  "code_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 864d055..acb6167 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -686,18 +686,25 @@ def __div__(self, other):\n     __truediv__ = __div__\n \n     def __eq__(self, other):\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         raise NotImplementedError('%s needs .__eq__() method' %\n             (self.__class__.__name__))\n \n     def __ne__(self, other):\n-        raise NotImplementedError('%s needs .__ne__() method' %\n-            (self.__class__.__name__))\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n+        return not self.__eq__(other)\n \n     def __lt__(self, other):\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            raise TypeError(\"Invalid comparison %s < %s\" % (self, other))\n+            return NotImplemented\n         raise NotImplementedError('%s needs .__lt__() method' %\n             (self.__class__.__name__))\n \n@@ -1253,12 +1260,12 @@ def __eq__(self, other):\n             try:\n                 ompf = o._as_mpf_val(self._prec)\n             except ValueError:\n-                return False\n+                return NotImplemented\n             return bool(mlib.mpf_eq(self._mpf_, ompf))\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            return False    # sympy != other  -->  not ==\n+            return NotImplemented\n         if isinstance(other, NumberSymbol):\n             if other.is_irrational:\n                 return False\n@@ -1719,7 +1726,7 @@ def __eq__(self, other):\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            return False    # sympy != other  -->  not ==\n+            return NotImplemented\n         if isinstance(other, NumberSymbol):\n             if other.is_irrational:\n                 return False\n@@ -1731,16 +1738,20 @@ def __eq__(self, other):\n                 return self.p == other.p and self.q == other.q\n             if isinstance(other, Float):\n                 return mlib.mpf_eq(self._as_mpf_val(other._prec), other._mpf_)\n-        return False\n+        return NotImplemented\n \n     def __ne__(self, other):\n+        try:\n+            other = _sympify(other)\n+        except SympifyError:\n+            return NotImplemented\n         return not self.__eq__(other)\n \n     def __gt__(self, other):\n         try:\n             other = _sympify(other)\n         except SympifyError:\n-            raise TypeError(\"Invalid comparison %s > %s\" % (self, other))\n+            return NotImplemented\n         if isinstance(other, NumberSymbol):\n             return other.__le__(self)\n         expr = self\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_richcomparison.py b/sympy/polys/tests/test_richcomparison.py\nnew file mode 100644\nindex 0000000..71a22d0\n--- /dev/null\n+++ b/sympy/polys/tests/test_richcomparison.py\n@@ -0,0 +1,22 @@\n+\"\"\"Test for rich comparison returning NotImplemented.\"\"\"\n+\n+import sympy\n+from sympy.core.basic import Basic\n+from sympy.polys.domains import PythonRational as QQ\n+from sympy.utilities.pytest import raises\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return False\n+        return NotImplemented\n+\n+def test_rich_comparison_not_implemented():\n+    f = Foo()\n+    s = QQ(1, 2)\n+\n+    # Test that s == f returns False instead of delegating to Foo.__eq__\n+    assert (s == f) is False\n+\n+    # Test that f == s returns False as Foo.__eq__ is invoked\n+    assert (f == s) is False\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_richcomparison_inverted.py b/sympy/polys/tests/test_richcomparison_inverted.py\nnew file mode 100644\nindex 0000000..f1c6f4d\n--- /dev/null\n+++ b/sympy/polys/tests/test_richcomparison_inverted.py\n@@ -0,0 +1,26 @@\n+\"\"\"Test for rich comparison returning NotImplemented.\"\"\"\n+\n+import sympy\n+from sympy.core.basic import Basic\n+from sympy.polys.domains import PythonRational as QQ\n+from sympy.utilities.pytest import raises\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return False\n+        return NotImplemented\n+\n+def test_rich_comparison_not_implemented():\n+    f = Foo()\n+    s = QQ(1, 2)\n+\n+    # Test that s == f returns NotImplemented instead of False\n+    # This should fail if the bug is present, raising the error message \"__BUG__HERE__\"\n+    if (s == f) is not NotImplemented:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Test that f == s returns NotImplemented as Foo.__eq__ is invoked\n+    # This should fail if the bug is present, raising the error message \"__BUG__HERE__\"\n+    if (f == s) is not NotImplemented:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 5116986,
  "num_received_chars": 133687,
  "elapsed_time": 1142.2977147102356,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}