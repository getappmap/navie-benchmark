{
  "instance_id": "django__django-10554",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a791908..72ade7a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -347,16 +347,26 @@ class SQLCompiler:\n                 # Relabel order by columns to raw numbers if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n+                found_col = False\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n                     elif col_alias:\n                         continue\n                     if src == sel_expr:\n-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n-                        break\n-                else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                        # For combined queries, ensure the referenced column exists\n+                        # in the SELECT list and use its position\n+                        if idx < len(self.select):\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            found_col = True\n+                            break\n+                if not found_col:\n+                    # If the column isn't in the select list, try to add it\n+                    if hasattr(src, 'target'):\n+                        self.select.append((src, None))\n+                        resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n+                    else:\n+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n@@ -432,6 +442,9 @@ class SQLCompiler:\n                         *self.query.values_select,\n                         *self.query.annotation_select,\n                     ))\n+                    # Ensure ordering columns are included in the select list\n+                    if self.query.order_by:\n+                        compiler.query.add_ordering(*self.query.order_by)\n                 part_sql, part_args = compiler.as_sql()\n                 if compiler.query.combinator:\n                     # Wrap in a subquery if wrapping in parentheses isn't\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 3408809,
  "num_received_chars": 37461,
  "elapsed_time": 521.6034262180328,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}