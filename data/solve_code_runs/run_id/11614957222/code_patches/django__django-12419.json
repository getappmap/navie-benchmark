{
  "instance_id": "django__django-12419",
  "edit_test_file": "tests/middleware/test_security.py",
  "code_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 09c9b95..8bb59a4 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -637,6 +637,6 @@ SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n-SECURE_REFERRER_POLICY = None\n+SECURE_REFERRER_POLICY = 'same-origin'\n SECURE_SSL_HOST = None\n SECURE_SSL_REDIRECT = False\n",
  "test_patch": "diff --git a/tests/middleware/test_secure_referrer_policy.py b/tests/middleware/test_secure_referrer_policy.py\nnew file mode 100644\nindex 0000000..5e3973c\n--- /dev/null\n+++ b/tests/middleware/test_secure_referrer_policy.py\n@@ -0,0 +1,37 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.http import HttpResponse\n+from django.middleware.security import SecurityMiddleware\n+from django.test import RequestFactory\n+\n+class SecureReferrerPolicyTest(SimpleTestCase):\n+    @property\n+    def middleware(self):\n+        return SecurityMiddleware()\n+\n+    def response(self, *args, headers=None, **kwargs):\n+        response = HttpResponse(*args, **kwargs)\n+        if headers:\n+            for k, v in headers.items():\n+                response[k] = v\n+        return response\n+\n+    def process_response(self, *args, secure=False, request=None, **kwargs):\n+        request_kwargs = {}\n+        if secure:\n+            request_kwargs.update({\"wsgi.url_scheme\": \"https\"})\n+        if request is None:\n+            request = self.request.get(\"/some/url\", **request_kwargs)\n+        ret = self.middleware.process_request(request)\n+        if ret:\n+            return ret\n+        return self.middleware.process_response(\n+            request, self.response(*args, **kwargs))\n+\n+    request = RequestFactory()\n+\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        Test that the default SECURE_REFERRER_POLICY is not set to \"same-origin\".\n+        \"\"\"\n+        response = self.process_response(secure=True)\n+        self.assertNotEqual(response.get('Referrer-Policy'), 'same-origin')\n",
  "test_inverted_patch": "diff --git a/tests/middleware/test_secure_referrer_policy_inverted.py b/tests/middleware/test_secure_referrer_policy_inverted.py\nnew file mode 100644\nindex 0000000..66a20cd\n--- /dev/null\n+++ b/tests/middleware/test_secure_referrer_policy_inverted.py\n@@ -0,0 +1,37 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.http import HttpResponse\n+from django.middleware.security import SecurityMiddleware\n+from django.test import RequestFactory\n+\n+class SecureReferrerPolicyTest(SimpleTestCase):\n+    @property\n+    def middleware(self):\n+        return SecurityMiddleware()\n+\n+    def response(self, *args, headers=None, **kwargs):\n+        response = HttpResponse(*args, **kwargs)\n+        if headers:\n+            for k, v in headers.items():\n+                response[k] = v\n+        return response\n+\n+    def process_response(self, *args, secure=False, request=None, **kwargs):\n+        request_kwargs = {}\n+        if secure:\n+            request_kwargs.update({\"wsgi.url_scheme\": \"https\"})\n+        if request is None:\n+            request = self.request.get(\"/some/url\", **request_kwargs)\n+        ret = self.middleware.process_request(request)\n+        if ret:\n+            return ret\n+        return self.middleware.process_response(\n+            request, self.response(*args, **kwargs))\n+\n+    request = RequestFactory()\n+\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        Test that the default SECURE_REFERRER_POLICY is set to \"same-origin\".\n+        \"\"\"\n+        response = self.process_response(secure=True)\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin', \"__BUG__HERE__\")\n",
  "num_sent_chars": 687357,
  "num_received_chars": 5987,
  "elapsed_time": 99.1597466468811,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}