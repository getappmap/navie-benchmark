{
  "instance_id": "sympy__sympy-20438",
  "edit_test_file": "sympy/core/tests/test_relational.py",
  "code_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 3c4aa86..376abc5 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -397,10 +397,35 @@ def is_subset(self, other):\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n+        if isinstance(other, FiniteSet):\n+            # Check if all elements in the ProductSet are in the FiniteSet\n+            # First verify the tuples in FiniteSet match our structure\n+            if not all(isinstance(elem, Tuple) and len(elem) == len(self.sets) \n+                      for elem in other.args):\n+                return False\n+\n+            # For finite base sets, check each element\n+            if all(s.is_finite_set for s in self.sets):\n+                all_elements = set(self)\n+                other_elements = set(other.args)\n+                return all_elements.issubset(other_elements)\n+            \n+            # For infinite sets, we need to check if each element in self\n+            # is contained in other\n+            return None\n         return None\n \n     def _eval_is_superset(self, other):\n-        '''Returns a fuzzy bool for whether self is a subset of other.'''\n+        '''Returns a fuzzy bool for whether self is a superset of other.'''\n+        if isinstance(other, FiniteSet):\n+            # Check if all elements in the FiniteSet are in the ProductSet\n+            # First verify the tuples in FiniteSet match our structure\n+            if not all(isinstance(elem, Tuple) and len(elem) == len(self.sets)\n+                      for elem in other.args):\n+                return False\n+\n+            # Check if each element in other is contained in self\n+            return fuzzy_and(self._contains(elem) for elem in other.args)\n         return None\n \n     # This should be deprecated:\n@@ -799,6 +824,11 @@ def _contains(self, element):\n         if not isinstance(element, Tuple) or len(element) != len(self.sets):\n             return False\n \n+        # Convert element to Tuple if it's not already\n+        if not isinstance(element, Tuple):\n+            element = Tuple(*element)\n+\n+        # Check if each component is in the corresponding set\n         return fuzzy_and(s._contains(e) for s, e in zip(self.sets, element))\n \n     def as_relational(self, *symbols):\n",
  "test_patch": "diff --git a/sympy/core/tests/test_set_operations.py b/sympy/core/tests/test_set_operations.py\nnew file mode 100644\nindex 0000000..871d15b\n--- /dev/null\n+++ b/sympy/core/tests/test_set_operations.py\n@@ -0,0 +1,17 @@\n+from sympy import FiniteSet, ProductSet, Eq\n+from sympy.testing.pytest import raises\n+\n+def test_is_subset_issue():\n+    a = FiniteSet(1, 2)\n+    b = ProductSet(a, a)\n+    c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))\n+\n+    # Check if b is a subset of c\n+    assert b.is_subset(c) is None\n+\n+    # Check if c is a subset of b\n+    assert c.is_subset(b) is True\n+\n+    # Check for the AttributeError when simplifying the equality\n+    with raises(AttributeError):\n+        Eq(b, c).simplify()\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_set_operations_inverted.py b/sympy/core/tests/test_set_operations_inverted.py\nnew file mode 100644\nindex 0000000..1227e79\n--- /dev/null\n+++ b/sympy/core/tests/test_set_operations_inverted.py\n@@ -0,0 +1,18 @@\n+from sympy import FiniteSet, ProductSet, Eq\n+from sympy.testing.pytest import raises\n+\n+def test_is_subset_issue():\n+    a = FiniteSet(1, 2)\n+    b = ProductSet(a, a)\n+    c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))\n+\n+    # Check if b is a subset of c\n+    # This should fail if the bug is present\n+    assert b.is_subset(c) is True, \"__BUG__HERE__\"\n+\n+    # Check if c is a subset of b\n+    assert c.is_subset(b) is True\n+\n+    # Check for the AttributeError when simplifying the equality\n+    with raises(AttributeError):\n+        Eq(b, c).simplify()\n",
  "num_sent_chars": 757226,
  "num_received_chars": 8949,
  "elapsed_time": 147.76193284988403,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}