{
  "instance_id": "matplotlib__matplotlib-24177",
  "edit_test_file": "lib/matplotlib/tests/test_axes.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 2412f81..8904cfb 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6737,7 +6737,7 @@ such objects\n             hist_kwargs['range'] = bin_range\n \n         density = bool(density)\n-        if density and not stacked:\n+        if density and not stacked and histtype != 'step':\n             hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n@@ -6755,13 +6755,14 @@ such objects\n             # If a stacked density plot, normalize so the area of all the\n             # stacked histograms together is 1\n             if density:\n-                tops = (tops / np.diff(bins)) / tops[-1].sum()\n+                tops = tops / (tops[-1].sum() * np.diff(bins)[0])\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n                 slc = slice(None, None, -1)\n             if density:\n-                tops = (tops * np.diff(bins))[:, slc].cumsum(axis=1)[:, slc]\n+                tops = tops[:, slc].cumsum(axis=1)[:, slc]\n+                tops = (tops / (tops[:, -1:] * np.diff(bins)[0]))\n             else:\n                 tops = tops[:, slc].cumsum(axis=1)[:, slc]\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hist_step_autoscale.py b/lib/matplotlib/tests/test_hist_step_autoscale.py\nnew file mode 100644\nindex 0000000..2ecd188\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hist_step_autoscale.py\n@@ -0,0 +1,25 @@\n+# File: lib/matplotlib/tests/test_hist_step_autoscale.py\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_hist_step_autoscale(fig_test, fig_ref):\n+    scale = 1.2\n+    test_random = np.random.randn(100000) * scale\n+\n+    ax_test = fig_test.subplots(1, 2)\n+    ax_ref = fig_ref.subplots(1, 2)\n+\n+    # Test case with histtype='bar'\n+    ax_test[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+    ax_ref[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+\n+    # Test case with histtype='step'\n+    ax_test[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+    ax_ref[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+\n+    # The test will pass if the issue is reproduced, i.e., the y-axis limits\n+    # are not the same for the 'step' histtype compared to the 'bar' histtype.\n+    assert ax_test[1].get_ylim() != ax_test[0].get_ylim()\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_hist_step_autoscale_inverted.py b/lib/matplotlib/tests/test_hist_step_autoscale_inverted.py\nnew file mode 100644\nindex 0000000..9d639a2\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hist_step_autoscale_inverted.py\n@@ -0,0 +1,26 @@\n+# File: lib/matplotlib/tests/test_hist_step_autoscale.py\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_hist_step_autoscale(fig_test, fig_ref):\n+    scale = 1.2\n+    test_random = np.random.randn(100000) * scale\n+\n+    ax_test = fig_test.subplots(1, 2)\n+    ax_ref = fig_ref.subplots(1, 2)\n+\n+    # Test case with histtype='bar'\n+    ax_test[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+    ax_ref[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+\n+    # Test case with histtype='step'\n+    ax_test[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+    ax_ref[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+\n+    # The test will fail if the issue is reproduced, i.e., the y-axis limits\n+    # are not the same for the 'step' histtype compared to the 'bar' histtype.\n+    if ax_test[1].get_ylim() != ax_test[0].get_ylim():\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3517265,
  "num_received_chars": 55914,
  "elapsed_time": 1363.656221628189,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}