{
  "instance_id": "sphinx-doc__sphinx-9673",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47b..a2c672f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -149,7 +149,8 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n+            # Handle both :return: and :returns: fields\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n@@ -166,7 +167,7 @@ def augment_descriptions_with_types(\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n+        if ('return' in has_description or 'returns' in has_description) and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n             field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n",
  "test_patch": "diff --git a/tests/test_ext_napoleon_typehints.py b/tests/test_ext_napoleon_typehints.py\nnew file mode 100644\nindex 0000000..d8c7933\n--- /dev/null\n+++ b/tests/test_ext_napoleon_typehints.py\n@@ -0,0 +1,59 @@\n+\"\"\"\n+    test_ext_napoleon_typehints\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the napoleon extension with typehints configuration.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                   confoverrides={\n+                       'extensions': [\n+                           'sphinx.ext.autodoc',\n+                           'sphinx.ext.napoleon'\n+                       ],\n+                       'autodoc_typehints': \"description\",\n+                       'autodoc_typehints_description_target': \"documented\",\n+                       'napoleon_numpy_docstring': False\n+                   })\n+def test_napoleon_typehints_description_documented(app: SphinxTestApp):\n+    # Create a Python module with our test function\n+    (app.srcdir / 'target' / 'napoleon_typehints.py').write_text('''\n+def example_func(param1: str, param2: int) -> bool:\n+    \"\"\"\n+    Description.\n+\n+    Parameters:\n+        param1: First parameter.\n+        param2: Second parameter.\n+\n+    Returns:\n+        The returned value.\n+    \"\"\"\n+    return True\n+''')\n+\n+    # Add the content to index.rst\n+    (app.srcdir / 'index.rst').write_text('''\n+.. automodule:: target.napoleon_typehints\n+   :members:\n+''')\n+\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the built text file\n+    content = (app.outdir / 'index.txt').read_text()\n+\n+    # The return type (bool) should not appear in the output since\n+    # autodoc_typehints_description_target is set to \"documented\"\n+    assert 'bool' not in content\n+\n+    # The return description should still be present\n+    assert 'The returned value.' in content\n+\n+    # Verify that the return type information is missing from the output\n+    # This assertion should pass since we're reproducing the issue\n+    assert 'Return type:' not in content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_napoleon_typehints_inverted.py b/tests/test_ext_napoleon_typehints_inverted.py\nnew file mode 100644\nindex 0000000..2cbb7f7\n--- /dev/null\n+++ b/tests/test_ext_napoleon_typehints_inverted.py\n@@ -0,0 +1,61 @@\n+\"\"\"\n+    test_ext_napoleon_typehints\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the napoleon extension with typehints configuration.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                   confoverrides={\n+                       'extensions': [\n+                           'sphinx.ext.autodoc',\n+                           'sphinx.ext.napoleon'\n+                       ],\n+                       'autodoc_typehints': \"description\",\n+                       'autodoc_typehints_description_target': \"documented\",\n+                       'napoleon_numpy_docstring': False\n+                   })\n+def test_napoleon_typehints_description_documented(app: SphinxTestApp):\n+    # Create a Python module with our test function\n+    (app.srcdir / 'target' / 'napoleon_typehints.py').write_text('''\n+def example_func(param1: str, param2: int) -> bool:\n+    \"\"\"\n+    Description.\n+\n+    Parameters:\n+        param1: First parameter.\n+        param2: Second parameter.\n+\n+    Returns:\n+        The returned value.\n+    \"\"\"\n+    return True\n+''')\n+\n+    # Add the content to index.rst\n+    (app.srcdir / 'index.rst').write_text('''\n+.. automodule:: target.napoleon_typehints\n+   :members:\n+''')\n+\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the built text file\n+    content = (app.outdir / 'index.txt').read_text()\n+\n+    # The return type (bool) should appear in the output since\n+    # autodoc_typehints_description_target is set to \"documented\"\n+    # and the return value is documented\n+    if 'Return type: bool' not in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # The return description should be present\n+    assert 'The returned value.' in content\n+\n+    # Since the return is documented, the return type information\n+    # should be present in the output\n+    assert 'Return type:' in content\n\\ No newline at end of file\n",
  "num_sent_chars": 3689941,
  "num_received_chars": 59555,
  "elapsed_time": 637.9804048538208,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}