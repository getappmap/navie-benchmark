{
  "instance_id": "matplotlib__matplotlib-25960",
  "edit_test_file": "lib/matplotlib/tests/test_figure.py",
  "code_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4..3659d81 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1581,8 +1581,10 @@ default: %(va)s\n             relative height of ``height_ratios[i] / sum(height_ratios)``.\n             If not given, all rows will have the same height.\n         \"\"\"\n+        # Create GridSpec with explicit spacing parameters\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n-                      wspace=wspace, hspace=hspace,\n+                      wspace=0 if wspace is None else wspace,\n+                      hspace=0 if hspace is None else hspace,\n                       width_ratios=width_ratios,\n                       height_ratios=height_ratios)\n \n@@ -2276,10 +2278,24 @@ class SubFigure(FigureBase):\n         gs = self._subplotspec.get_gridspec()\n         wr = np.asarray(gs.get_width_ratios())\n         hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        \n+        # Get spacing parameters from the gridspec\n+        wspace = gs._wspace if gs._wspace is not None else 0\n+        hspace = gs._hspace if gs._hspace is not None else 0\n+        \n+        # Adjust spacing based on gridspec parameters\n+        total_width = 1.0 - wspace * (len(wr) - 1) / len(wr)\n+        total_height = 1.0 - hspace * (len(hr) - 1) / len(hr)\n+        # Calculate dimensions with spacing taken into account\n+        dx = (wr[self._subplotspec.colspan].sum() / wr.sum()) * total_width\n+        dy = (hr[self._subplotspec.rowspan].sum() / hr.sum()) * total_height\n+        \n+        # Calculate position with spacing offsets\n+        x0 = (wr[:self._subplotspec.colspan.start].sum() / wr.sum()) * total_width\n+        x0 += wspace * self._subplotspec.colspan.start / len(wr)\n+        y0 = 1 - (hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()) * total_height\n+        y0 -= hspace * (len(hr) - self._subplotspec.rowspan.stop) / len(hr)\n+        \n         if self.bbox_relative is None:\n             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n         else:\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_subfigures_spacing.py b/lib/matplotlib/tests/test_subfigures_spacing.py\nnew file mode 100644\nindex 0000000..6e7f7aa\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigures_spacing.py\n@@ -0,0 +1,15 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+def test_subfigures_wspace_hspace():\n+    # Create a figure with subfigures and set wspace and hspace to 0\n+    figs = plt.figure().subfigures(2, 2, wspace=0, hspace=0)\n+    for fig in figs.flat:\n+        ax = fig.subplots()\n+        ax.plot([1, 2])\n+\n+    # Check the positions of the subfigures to ensure wspace and hspace are not applied\n+    positions = [fig.bbox.bounds for fig in figs.flat]\n+    # Assert that the positions are the same, indicating no spacing\n+    assert np.allclose(positions[0][2], positions[1][2]), \"wspace is not working\"\n+    assert np.allclose(positions[0][3], positions[2][3]), \"hspace is not working\"\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_subfigures_spacing_inverted.py b/lib/matplotlib/tests/test_subfigures_spacing_inverted.py\nnew file mode 100644\nindex 0000000..76f2793\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigures_spacing_inverted.py\n@@ -0,0 +1,20 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+\n+def test_subfigures_wspace_hspace():\n+    # Create a figure with subfigures and set wspace and hspace to 0\n+    figs = plt.figure().subfigures(2, 2, wspace=0, hspace=0)\n+    for fig in figs.flat:\n+        ax = fig.subplots()\n+        ax.plot([1, 2])\n+\n+    # Check the positions of the subfigures to ensure wspace and hspace are not applied\n+    positions = [fig.bbox.bounds for fig in figs.flat]\n+    # Assert that the positions are different, indicating spacing should be applied\n+    assert not np.allclose(positions[0][2], positions[1][2]), \"__BUG__HERE__\"\n+    assert not np.allclose(positions[0][3], positions[2][3]), \"__BUG__HERE__\"\n+\n+# Run the test\n+if __name__ == \"__main__\":\n+    pytest.main([__file__])\n",
  "num_sent_chars": 4636798,
  "num_received_chars": 105553,
  "elapsed_time": 1261.7769901752472,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}