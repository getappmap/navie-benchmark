{
  "instance_id": "django__django-14534",
  "edit_test_file": "tests/forms_tests/widget_tests/test_checkboxselectmultiple.py",
  "code_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0e..5e1fd9f 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,6 +277,10 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n+        # First check if an ID exists in the widget's attributes\n+        if 'id' in self.data['attrs']:\n+            return self.data['attrs']['id']\n+        # Fall back to the current name/index pattern if no ID exists\n         return 'id_%s_%s' % (self.data['name'], self.data['index'])\n \n     @property\n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_boundwidget.py b/tests/forms_tests/widget_tests/test_boundwidget.py\nnew file mode 100644\nindex 0000000..44b29df\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_boundwidget.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from django import forms\n+from django.forms import CheckboxSelectMultiple\n+from django.forms.boundfield import BoundField\n+\n+class TestBoundWidgetIdForLabel(unittest.TestCase):\n+    def test_id_for_label_ignores_choicewidget_options_id(self):\n+        class TestForm(forms.Form):\n+            choices = forms.MultipleChoiceField(\n+                choices=[('1', 'One'), ('2', 'Two')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'})\n+            )\n+\n+        form = TestForm()\n+        bound_field = BoundField(form, form.fields['choices'], 'choices')\n+        subwidgets = list(bound_field.subwidgets)\n+        \n+        # Check if the id_for_label ignores the custom id set by ChoiceWidget.options\n+        for index, widget in enumerate(subwidgets):\n+            expected_id = f'custom_id_{index}'\n+            self.assertNotEqual(widget.id_for_label, expected_id, \n+                                f\"Expected id_for_label to not be '{expected_id}', but it was.\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_boundwidget_inverted.py b/tests/forms_tests/widget_tests/test_boundwidget_inverted.py\nnew file mode 100644\nindex 0000000..28ef9c8\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_boundwidget_inverted.py\n@@ -0,0 +1,26 @@\n+import unittest\n+from django import forms\n+from django.forms import CheckboxSelectMultiple\n+from django.forms.boundfield import BoundField\n+\n+class TestBoundWidgetIdForLabel(unittest.TestCase):\n+    def test_id_for_label_ignores_choicewidget_options_id(self):\n+        class TestForm(forms.Form):\n+            choices = forms.MultipleChoiceField(\n+                choices=[('1', 'One'), ('2', 'Two')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'})\n+            )\n+\n+        form = TestForm()\n+        bound_field = BoundField(form, form.fields['choices'], 'choices')\n+        subwidgets = list(bound_field.subwidgets)\n+        \n+        # Check if the id_for_label ignores the custom id set by ChoiceWidget.options\n+        for index, widget in enumerate(subwidgets):\n+            expected_id = f'custom_id_{index}'\n+            # Altered the assertion to fail when the bug is observed\n+            self.assertEqual(widget.id_for_label, expected_id, \n+                             \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 782382,
  "num_received_chars": 5272,
  "elapsed_time": 122.72933006286621,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}