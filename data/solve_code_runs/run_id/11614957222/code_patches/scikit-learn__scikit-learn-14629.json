{
  "instance_id": "scikit-learn__scikit-learn-14629",
  "edit_test_file": "sklearn/model_selection/tests/test_validation.py",
  "code_patch": "diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\nindex 95669a2..9c43592 100644\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -854,11 +854,21 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n     func = getattr(estimator, method)\n     predictions = func(X_test)\n     if method in ['decision_function', 'predict_proba', 'predict_log_proba']:\n+        from sklearn.multioutput import MultiOutputClassifier\n+        is_multi_output = isinstance(estimator, MultiOutputClassifier)\n+        \n         if isinstance(predictions, list):\n-            predictions = [_enforce_prediction_order(\n-                estimator.classes_[i_label], predictions[i_label],\n-                n_classes=len(set(y[:, i_label])), method=method)\n-                for i_label in range(len(predictions))]\n+            if is_multi_output:\n+                predictions = [_enforce_prediction_order(\n+                    estimator.estimators_[i_label].classes_, predictions[i_label],\n+                    n_classes=len(set(y[:, i_label])), method=method,\n+                    is_multi_output=True)\n+                    for i_label in range(len(predictions))]\n+            else:\n+                predictions = [_enforce_prediction_order(\n+                    estimator.classes_[i_label], predictions[i_label],\n+                    n_classes=len(set(y[:, i_label])), method=method)\n+                    for i_label in range(len(predictions))]\n         else:\n             # A 2D y array should be a binary label indicator matrix\n             n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]\n@@ -867,7 +877,7 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n     return predictions, test\n \n \n-def _enforce_prediction_order(classes, predictions, n_classes, method):\n+def _enforce_prediction_order(classes, predictions, n_classes, method, is_multi_output=False):\n     \"\"\"Ensure that prediction arrays have correct column order\n \n     When doing cross-validation, if one or more classes are\n@@ -880,7 +890,7 @@ def _enforce_prediction_order(classes, predictions, n_classes, method):\n     (a subset of the classes in the full training set)\n     and `n_classes` is the number of classes in the full training set.\n     \"\"\"\n-    if n_classes != len(classes):\n+    if not is_multi_output and n_classes != len(classes):\n         recommendation = (\n             'To fix this, use a cross-validation '\n             'technique resulting in properly '\n@@ -892,7 +902,7 @@ def _enforce_prediction_order(classes, predictions, n_classes, method):\n                       RuntimeWarning)\n         if method == 'decision_function':\n             if (predictions.ndim == 2 and\n-                    predictions.shape[1] != len(classes)):\n+                    predictions.shape[1] != len(classes) and not is_multi_output):\n                 # This handles the case when the shape of predictions\n                 # does not match the number of classes used to train\n                 # it with. This case is found when sklearn.svm.SVC is\n@@ -903,7 +913,7 @@ def _enforce_prediction_order(classes, predictions, n_classes, method):\n                                  'are not currently supported by '\n                                  'cross_val_predict'.format(\n                                     predictions.shape, method, len(classes)))\n-            if len(classes) <= 2:\n+            if len(classes) <= 2 and not is_multi_output:\n                 # In this special case, `predictions` contains a 1D array.\n                 raise ValueError('Only {} class/es in training fold, but {} '\n                                  'in overall dataset. This '\n@@ -911,16 +921,20 @@ def _enforce_prediction_order(classes, predictions, n_classes, method):\n                                  'with imbalanced folds. {}'.format(\n                                     len(classes), n_classes, recommendation))\n \n-        float_min = np.finfo(predictions.dtype).min\n-        default_values = {'decision_function': float_min,\n-                          'predict_log_proba': float_min,\n-                          'predict_proba': 0}\n-        predictions_for_all_classes = np.full((_num_samples(predictions),\n-                                               n_classes),\n-                                              default_values[method],\n-                                              dtype=predictions.dtype)\n-        predictions_for_all_classes[:, classes] = predictions\n-        predictions = predictions_for_all_classes\n+        if is_multi_output:\n+            # For multi-output, predictions is a list of arrays\n+            return predictions\n+        else:\n+            float_min = np.finfo(predictions.dtype).min\n+            default_values = {'decision_function': float_min,\n+                              'predict_log_proba': float_min,\n+                              'predict_proba': 0}\n+            predictions_for_all_classes = np.full((_num_samples(predictions),\n+                                                   n_classes),\n+                                                  default_values[method],\n+                                                  dtype=predictions.dtype)\n+            predictions_for_all_classes[:, classes] = predictions\n+            predictions = predictions_for_all_classes\n     return predictions\n \n \n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_cross_val_predict_multioutput.py b/sklearn/model_selection/tests/test_cross_val_predict_multioutput.py\nnew file mode 100644\nindex 0000000..104ae1c\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_cross_val_predict_multioutput.py\n@@ -0,0 +1,19 @@\n+\"\"\"Test for cross_val_predict with MultiOutputClassifier\"\"\"\n+\n+import pytest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    X, Y = make_multilabel_classification()\n+\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # This should work fine\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+    \n+    # This should raise an AttributeError\n+    with pytest.raises(AttributeError, match=\"'MultiOutputClassifier' object has no attribute 'classes_'\"):\n+        pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n",
  "test_inverted_patch": "diff --git a/sklearn/model_selection/tests/test_cross_val_predict_multioutput_inverted.py b/sklearn/model_selection/tests/test_cross_val_predict_multioutput_inverted.py\nnew file mode 100644\nindex 0000000..a49de35\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_cross_val_predict_multioutput_inverted.py\n@@ -0,0 +1,24 @@\n+\"\"\"Test for cross_val_predict with MultiOutputClassifier\"\"\"\n+\n+import pytest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    X, Y = make_multilabel_classification()\n+\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # This should work fine\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+    \n+    # This should now fail with a custom error message\n+    try:\n+        pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    except AttributeError as e:\n+        if \"'MultiOutputClassifier' object has no attribute 'classes_'\" in str(e):\n+            raise RuntimeError(\"__BUG__HERE__\")\n+        else:\n+            raise\n",
  "num_sent_chars": 777031,
  "num_received_chars": 12522,
  "elapsed_time": 116.68766736984253,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}