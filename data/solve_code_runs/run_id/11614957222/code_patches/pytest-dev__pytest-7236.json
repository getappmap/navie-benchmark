{
  "instance_id": "pytest-dev__pytest-7236",
  "edit_test_file": "testing/test_nose.py",
  "code_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545..788fb27 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -214,13 +214,19 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n+            # Check if the test is marked as skipped before modifying tearDown behavior\n+            test_method = getattr(self._testcase, self.name)\n+            skip_marker = getattr(test_method, \"__unittest_skip__\", False)\n+            class_skip_marker = getattr(self._testcase.__class__, \"__unittest_skip__\", False)\n+            is_skipped = skip_marker or class_skip_marker\n+\n             # when --pdb is given, we want to postpone calling tearDown() otherwise\n             # when entering the pdb prompt, tearDown() would have probably cleaned up\n             # instance variables, which makes it difficult to debug\n             # arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not is_skipped:\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n",
  "test_patch": "diff --git a/testing/test_skip_teardown_pdb.py b/testing/test_skip_teardown_pdb.py\nnew file mode 100644\nindex 0000000..0cf7ec5\n--- /dev/null\n+++ b/testing/test_skip_teardown_pdb.py\n@@ -0,0 +1,33 @@\n+import pytest\n+\n+def test_skip_with_pdb_executes_teardown(testdir):\n+    \"\"\"Verify that tearDown is incorrectly executed on skipped tests when using --pdb.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                xxx\n+                \n+            @unittest.skip(\"hello\")\n+            def test_one(self):\n+                pass\n+                \n+            def tearDown(self):\n+                xxx\n+        \"\"\"\n+    )\n+    \n+    # Without --pdb, test should be skipped cleanly\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([\"*1 skipped*\"])\n+    assert result.ret == 0\n+    \n+    # With --pdb, tearDown is incorrectly executed\n+    result = testdir.runpytest(\"--pdb\")\n+    result.stdout.fnmatch_lines([\n+        \"*NameError: name 'xxx' is not defined*\",  # Error from tearDown execution\n+        \"*1 skipped, 1 error*\"  # Both skipped and error status\n+    ])\n+    assert result.ret != 0  # Test run should fail due to tearDown error\n",
  "test_inverted_patch": "diff --git a/testing/test_skip_teardown_pdb_inverted.py b/testing/test_skip_teardown_pdb_inverted.py\nnew file mode 100644\nindex 0000000..6630dde\n--- /dev/null\n+++ b/testing/test_skip_teardown_pdb_inverted.py\n@@ -0,0 +1,33 @@\n+import pytest\n+\n+def test_skip_with_pdb_executes_teardown(testdir):\n+    \"\"\"Verify that tearDown should not be executed on skipped tests when using --pdb.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                self.setup_called = False\n+                \n+            @unittest.skip(\"hello\")\n+            def test_one(self):\n+                pass\n+                \n+            def tearDown(self):\n+                # This should never be called for skipped tests\n+                raise AssertionError(\"__BUG__HERE__\")\n+        \"\"\"\n+    )\n+    \n+    # Without --pdb, test should be skipped cleanly\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([\"*1 skipped*\"])\n+    assert result.ret == 0\n+    \n+    # With --pdb, tearDown should still not be executed\n+    # If it is executed (which is the bug), the test will fail with __BUG__HERE__\n+    result = testdir.runpytest(\"--pdb\")\n+    result.stdout.no_fnmatch_line(\"*__BUG__HERE__*\")\n+    result.stdout.fnmatch_lines([\"*1 skipped*\"])\n+    assert result.ret == 0\n",
  "num_sent_chars": 1842696,
  "num_received_chars": 14278,
  "elapsed_time": 249.6821300983429,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}