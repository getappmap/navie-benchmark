{
  "instance_id": "matplotlib__matplotlib-20826",
  "edit_test_file": "lib/mpl_toolkits/tests/test_axisartist_axislines.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 802fd3c..8fefe21 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1183,7 +1183,7 @@ class _AxesBase(martist.Artist):\n         \"\"\"Clear the axes.\"\"\"\n         # Note: this is called by Axes.__init__()\n \n-        # stash the current visibility state\n+        # stash the current visibility state and shared axes state\n         if hasattr(self, 'patch'):\n             patch_visible = self.patch.get_visible()\n         else:\n@@ -1191,9 +1191,8 @@ class _AxesBase(martist.Artist):\n \n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n-\n-        self.xaxis.clear()\n-        self.yaxis.clear()\n+        sharex = self._sharex\n+        sharey = self._sharey\n \n         for name, spine in self.spines.items():\n             spine.clear()\n@@ -1201,16 +1200,16 @@ class _AxesBase(martist.Artist):\n         self.ignore_existing_data_limits = True\n         self.callbacks = cbook.CallbackRegistry()\n \n-        if self._sharex is not None:\n-            self.sharex(self._sharex)\n+        if sharex is not None:\n+            self.sharex(sharex)\n         else:\n             self.xaxis._set_scale('linear')\n             try:\n                 self.set_xlim(0, 1)\n             except TypeError:\n                 pass\n-        if self._sharey is not None:\n-            self.sharey(self._sharey)\n+        if sharey is not None:\n+            self.sharey(sharey)\n         else:\n             self.yaxis._set_scale('linear')\n             try:\n@@ -1302,12 +1301,28 @@ class _AxesBase(martist.Artist):\n \n         self._shared_axes[\"x\"].clean()\n         self._shared_axes[\"y\"].clean()\n-        if self._sharex is not None:\n+        if sharex is not None:\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n-        if self._sharey is not None:\n+            # Restore proper tick label visibility for shared x axes\n+            if self._sharex is not None:\n+                siblings = self._shared_axes[\"x\"].get_siblings(self)\n+                if len(siblings) > 1:\n+                    # Hide tick labels for all but the bottom-most axes\n+                    bottom_axes = max(siblings, key=lambda ax: ax.get_position().y0)\n+                    for ax in siblings:\n+                        ax.xaxis.set_tick_params(labelbottom=ax is bottom_axes)\n+        if sharey is not None:\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            # Restore proper tick label visibility for shared y axes\n+            if self._sharey is not None:\n+                siblings = self._shared_axes[\"y\"].get_siblings(self)\n+                if len(siblings) > 1:\n+                    # Hide tick labels for all but the left-most axes\n+                    left_axes = min(siblings, key=lambda ax: ax.get_position().x0)\n+                    for ax in siblings:\n+                        ax.yaxis.set_tick_params(labelleft=ax is left_axes)\n \n         self.stale = True\n \n",
  "test_patch": "diff --git a/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py\nnew file mode 100644\nindex 0000000..0d68f04\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestAxClearSharedAxesBug(unittest.TestCase):\n+    def test_ax_clear_shared_axes_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = [label.get_visible() for label in ax.get_xticklabels()]\n+            y_labels_visible = [label.get_visible() for label in ax.get_yticklabels()]\n+            self.assertTrue(any(x_labels_visible), \"X tick labels should be visible\")\n+            self.assertTrue(any(y_labels_visible), \"Y tick labels should be visible\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py\nnew file mode 100644\nindex 0000000..14c9ea2\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py\n@@ -0,0 +1,25 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestAxClearSharedAxesBug(unittest.TestCase):\n+    def test_ax_clear_shared_axes_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = [label.get_visible() for label in ax.get_xticklabels()]\n+            y_labels_visible = [label.get_visible() for label in ax.get_yticklabels()]\n+            # Alter the assertions to fail when the bug is observed\n+            self.assertFalse(any(x_labels_visible), \"__BUG__HERE__\")\n+            self.assertFalse(any(y_labels_visible), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3545330,
  "num_received_chars": 62971,
  "elapsed_time": 798.4806854724884,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}