{
  "instance_id": "django__django-14007",
  "edit_test_file": "tests/queries/test_db_returning.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca..50f828f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -502,7 +502,14 @@ class QuerySet:\n                 returned_columns = self._batched_insert(\n                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n                 )\n+                compiler = self.query.get_compiler(using=self.db)\n+                converters = compiler.get_converters([\n+                    f.get_col(f.model._meta.db_table) if f else None \n+                    for f in opts.db_returning_fields\n+                ])\n                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n+                    if converters:\n+                        results = compiler.apply_converters([results], converters)[0]\n                     for result, field in zip(results, opts.db_returning_fields):\n                         if field != opts.pk:\n                             setattr(obj_with_pk, field.attname, result)\n@@ -516,7 +523,14 @@ class QuerySet:\n                 )\n                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n                     assert len(returned_columns) == len(objs_without_pk)\n+                compiler = self.query.get_compiler(using=self.db)\n+                converters = compiler.get_converters([\n+                    f.get_col(f.model._meta.db_table) if f else None \n+                    for f in opts.db_returning_fields\n+                ])\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n+                    if converters:\n+                        results = compiler.apply_converters([results], converters)[0]\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n                     obj_without_pk._state.adding = False\n@@ -1286,7 +1300,21 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        compiler = query.get_compiler(using=using)\n+        results = compiler.execute_sql(returning_fields)\n+        \n+        if results is None:\n+            return results\n+            \n+        # Apply field converters to returned values\n+        if returning_fields:\n+            converters = compiler.get_converters([\n+                f.get_col(f.model._meta.db_table) if f else None \n+                for f in returning_fields\n+            ])\n+            if converters:\n+                return compiler.apply_converters([results], converters)[0]\n+        return results\n     _insert.alters_data = True\n     _insert.queryset_only = False\n \n",
  "test_patch": "diff --git a/tests/queries/test_from_db_value_on_insert.py b/tests/queries/test_from_db_value_on_insert.py\nnew file mode 100644\nindex 0000000..2518e5a\n--- /dev/null\n+++ b/tests/queries/test_from_db_value_on_insert.py\n@@ -0,0 +1,39 @@\n+import random\n+import string\n+from django.db import models, connection\n+from django.test import TestCase\n+\n+class MyIntWrapper:\n+    def __init__(self, value):\n+        self.value = value\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self.value)\n+\n+    def __eq__(self, other):\n+        if isinstance(other, self.__class__):\n+            return self.value == other.value\n+        return self.value == other\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, conn):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FromDBValueOnInsertTest(TestCase):\n+    def test_from_db_value_not_called_on_insert(self):\n+        # Create an instance of AutoModel\n+        am = AutoModel.objects.create()\n+        # Check if the id is not wrapped in MyIntWrapper\n+        self.assertNotIsInstance(am.id, MyIntWrapper)\n+        # Check if the id is a plain integer\n+        self.assertIsInstance(am.id, int)\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_from_db_value_on_insert_inverted.py b/tests/queries/test_from_db_value_on_insert_inverted.py\nnew file mode 100644\nindex 0000000..89c3487\n--- /dev/null\n+++ b/tests/queries/test_from_db_value_on_insert_inverted.py\n@@ -0,0 +1,40 @@\n+import random\n+import string\n+from django.db import models, connection\n+from django.test import TestCase\n+\n+class MyIntWrapper:\n+    def __init__(self, value):\n+        self.value = value\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self.value)\n+\n+    def __eq__(self, other):\n+        if isinstance(other, self.__class__):\n+            return self.value == other.value\n+        return self.value == other\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, conn):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FromDBValueOnInsertTest(TestCase):\n+    def test_from_db_value_not_called_on_insert(self):\n+        # Create an instance of AutoModel\n+        am = AutoModel.objects.create()\n+        # Check if the id is wrapped in MyIntWrapper\n+        if not isinstance(am.id, MyIntWrapper):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        # Check if the id is not a plain integer\n+        self.assertNotIsInstance(am.id, int)\n",
  "num_sent_chars": 5948199,
  "num_received_chars": 73244,
  "elapsed_time": 916.2344558238983,
  "lint_repair_count": 11,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}