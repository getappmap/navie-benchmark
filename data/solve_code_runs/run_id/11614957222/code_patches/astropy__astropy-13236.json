{
  "instance_id": "astropy__astropy-13236",
  "edit_test_file": "astropy/table/tests/test_groups.py",
  "code_patch": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe212..f9b174d 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1243,6 +1243,14 @@ class Table:\n         # mixin class\n         if (not isinstance(data, Column) and not data_is_mixin\n                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n+            warnings.warn(\n+                'Automatic conversion of structured arrays to NdarrayMixin is '\n+                'deprecated since v5.1 and will be removed in v5.2. Structured '\n+                'arrays will be converted to Column objects by default. To maintain '\n+                'current behavior, explicitly wrap your data in NdarrayMixin:\\n\\n'\n+                '  from astropy.table import NdarrayMixin\\n'\n+                '  data = data.view(NdarrayMixin)',\n+                FutureWarning)\n             data = data.view(NdarrayMixin)\n             data_is_mixin = True\n \n",
  "test_patch": "diff --git a/astropy/table/tests/test_structured_array_transform.py b/astropy/table/tests/test_structured_array_transform.py\nnew file mode 100644\nindex 0000000..0212a19\n--- /dev/null\n+++ b/astropy/table/tests/test_structured_array_transform.py\n@@ -0,0 +1,29 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+import pytest\n+import numpy as np\n+from astropy.table import Table, NdarrayMixin\n+\n+\n+def test_structured_array_auto_transform():\n+    \"\"\"Test that structured numpy arrays are automatically transformed into NdarrayMixin\n+    when added to a Table.\n+    \"\"\"\n+    # Create a structured numpy array\n+    data = np.array([(1, 'a'), (2, 'b'), (3, 'c')],\n+                    dtype=[('num', 'i4'), ('char', 'U1')])\n+    \n+    # Create a table with the structured array\n+    t = Table()\n+    t['data'] = data\n+    \n+    # Verify that the column was automatically transformed into NdarrayMixin\n+    assert isinstance(t['data'], NdarrayMixin)\n+    \n+    # Verify that the data is still accessible and correct\n+    assert t['data'][0]['num'] == 1\n+    assert t['data'][0]['char'] == 'a'\n+    assert t['data'][1]['num'] == 2\n+    assert t['data'][1]['char'] == 'b'\n+    assert t['data'][2]['num'] == 3\n+    assert t['data'][2]['char'] == 'c'\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/table/tests/test_structured_array_transform_inverted.py b/astropy/table/tests/test_structured_array_transform_inverted.py\nnew file mode 100644\nindex 0000000..ad25734\n--- /dev/null\n+++ b/astropy/table/tests/test_structured_array_transform_inverted.py\n@@ -0,0 +1,31 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+import pytest\n+import numpy as np\n+from astropy.table import Table, NdarrayMixin\n+\n+\n+def test_structured_array_no_auto_transform():\n+    \"\"\"Test that structured numpy arrays are NOT automatically transformed into NdarrayMixin\n+    when added to a Table, as this behavior is being deprecated.\n+    \"\"\"\n+    # Create a structured numpy array\n+    data = np.array([(1, 'a'), (2, 'b'), (3, 'c')],\n+                    dtype=[('num', 'i4'), ('char', 'U1')])\n+    \n+    # Create a table with the structured array\n+    t = Table()\n+    t['data'] = data\n+    \n+    # Verify that the column was NOT transformed into NdarrayMixin\n+    if isinstance(t['data'], NdarrayMixin):\n+        raise AssertionError(\"__BUG__HERE__: Structured array was automatically transformed \"\n+                           \"into NdarrayMixin, but this behavior should be removed.\")\n+    \n+    # Verify that the data is still accessible and correct\n+    assert t['data'][0]['num'] == 1\n+    assert t['data'][0]['char'] == 'a'\n+    assert t['data'][1]['num'] == 2\n+    assert t['data'][1]['char'] == 'b'\n+    assert t['data'][2]['num'] == 3\n+    assert t['data'][2]['char'] == 'c'\n\\ No newline at end of file\n",
  "num_sent_chars": 3207184,
  "num_received_chars": 41126,
  "elapsed_time": 643.874657869339,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}