{
  "instance_id": "django__django-16631",
  "edit_test_file": "tests/signing/tests.py",
  "code_patch": "diff --git a/django/utils/crypto.py b/django/utils/crypto.py\nindex 1c0e700..80cfee8 100644\n--- a/django/utils/crypto.py\n+++ b/django/utils/crypto.py\n@@ -15,7 +15,7 @@ class InvalidAlgorithm(ValueError):\n     pass\n \n \n-def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\"):\n+def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\", fallback_secrets=None):\n     \"\"\"\n     Return the HMAC of 'value', using a key generated from key_salt and a\n     secret (which defaults to settings.SECRET_KEY). Default algorithm is SHA1,\n@@ -41,7 +41,8 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\"):\n     # line is redundant and could be replaced by key = key_salt + secret, since\n     # the hmac module does the same thing for keys longer than the block size.\n     # However, we need to ensure that we *always* do this.\n-    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n+    hmac_obj = hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n+    return hmac_obj\n \n \n RANDOM_STRING_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n",
  "test_patch": "diff --git a/tests/signing/test_session_secret_key_fallback.py b/tests/signing/test_session_secret_key_fallback.py\nnew file mode 100644\nindex 0000000..42c0afc\n--- /dev/null\n+++ b/tests/signing/test_session_secret_key_fallback.py\n@@ -0,0 +1,42 @@\n+from django.conf import settings\n+from django.contrib.auth.base_user import AbstractBaseUser\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.crypto import constant_time_compare\n+\n+\n+class TestUser(AbstractBaseUser):\n+    \"\"\"A minimal custom user model for testing session auth hash.\"\"\"\n+    username = models.CharField(max_length=100)\n+    USERNAME_FIELD = 'username'\n+    password = 'testpass'  # Hardcoded for testing\n+\n+\n+class SessionSecretKeyFallbackTest(SimpleTestCase):\n+    \"\"\"Test that session auth hash validation fails after key rotation.\"\"\"\n+\n+    def test_session_auth_hash_with_rotated_keys(self):\n+        \"\"\"\n+        Test that session auth hash generated with old key is invalid after key rotation,\n+        even when the old key is in SECRET_KEY_FALLBACKS.\n+        \"\"\"\n+        user = TestUser()\n+        \n+        # Generate session hash with old secret key\n+        with self.settings(SECRET_KEY='old-key'):\n+            old_session_hash = user.get_session_auth_hash()\n+\n+        # Rotate secret key and move old key to fallbacks\n+        with self.settings(\n+            SECRET_KEY='new-key',\n+            SECRET_KEY_FALLBACKS=['old-key']\n+        ):\n+            new_session_hash = user.get_session_auth_hash()\n+            \n+            # This should be False, demonstrating the issue where \n+            # SECRET_KEY_FALLBACKS is not used for session auth hash validation\n+            self.assertFalse(\n+                constant_time_compare(old_session_hash, new_session_hash),\n+                \"Session hash should not match after key rotation, even with \"\n+                \"old key in SECRET_KEY_FALLBACKS\"\n+            )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/signing/test_session_secret_key_fallback_inverted.py b/tests/signing/test_session_secret_key_fallback_inverted.py\nnew file mode 100644\nindex 0000000..7b0e10e\n--- /dev/null\n+++ b/tests/signing/test_session_secret_key_fallback_inverted.py\n@@ -0,0 +1,40 @@\n+from django.conf import settings\n+from django.contrib.auth.base_user import AbstractBaseUser\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.crypto import constant_time_compare\n+\n+\n+class TestUser(AbstractBaseUser):\n+    \"\"\"A minimal custom user model for testing session auth hash.\"\"\"\n+    username = models.CharField(max_length=100)\n+    USERNAME_FIELD = 'username'\n+    password = 'testpass'  # Hardcoded for testing\n+\n+\n+class SessionSecretKeyFallbackTest(SimpleTestCase):\n+    \"\"\"Test that session auth hash validation works correctly after key rotation.\"\"\"\n+\n+    def test_session_auth_hash_with_rotated_keys(self):\n+        \"\"\"\n+        Test that session auth hash generated with old key should remain valid after key rotation\n+        when the old key is in SECRET_KEY_FALLBACKS.\n+        \"\"\"\n+        user = TestUser()\n+        \n+        # Generate session hash with old secret key\n+        with self.settings(SECRET_KEY='old-key'):\n+            old_session_hash = user.get_session_auth_hash()\n+\n+        # Rotate secret key and move old key to fallbacks\n+        with self.settings(\n+            SECRET_KEY='new-key',\n+            SECRET_KEY_FALLBACKS=['old-key']\n+        ):\n+            new_session_hash = user.get_session_auth_hash()\n+            \n+            # This should be True according to the documentation,\n+            # since the old key is in SECRET_KEY_FALLBACKS\n+            if not constant_time_compare(old_session_hash, new_session_hash):\n+                raise AssertionError(\"__BUG__HERE__: Session hash does not match after key \"\n+                                   \"rotation despite old key being in SECRET_KEY_FALLBACKS\")\n\\ No newline at end of file\n",
  "num_sent_chars": 4724172,
  "num_received_chars": 97555,
  "elapsed_time": 982.9809200763702,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}