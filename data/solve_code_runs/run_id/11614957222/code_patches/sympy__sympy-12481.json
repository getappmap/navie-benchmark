{
  "instance_id": "sympy__sympy-12481",
  "edit_test_file": "sympy/combinatorics/tests/test_permutations.py",
  "code_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a..0b2f12f 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -815,14 +815,17 @@ def __new__(cls, *args, **kwargs):\n         >>> Permutation([0, 2, 1])\n         Permutation([0, 2, 1])\n \n-        Permutations entered in cyclic form are converted to array form;\n-        singletons need not be entered, but can be entered to indicate the\n+        Permutations entered in cyclic form are converted to array form.\n+        Cycles can share elements and will be processed left to right.\n+        Singletons need not be entered, but can be entered to indicate the\n         largest element:\n \n         >>> Permutation([[4, 5, 6], [0, 1]])\n         Permutation([1, 0, 2, 3, 5, 6, 4])\n         >>> Permutation([[4, 5, 6], [0, 1], [19]])\n         Permutation([1, 0, 2, 3, 5, 6, 4], size=20)\n+        >>> Permutation([[0, 1], [0, 1]]) # Applying [0,1] twice gives identity\n+        Permutation([0, 1])\n \n         All manipulation of permutations assumes that the smallest element\n         is 0 (in keeping with 0-based indexing in Python) so if the 0 is\n@@ -895,28 +898,26 @@ def __new__(cls, *args, **kwargs):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n-\n-        if not is_cycle and \\\n-                any(i not in temp for i in range(len(temp))):\n-            raise ValueError(\"Integers 0 through %s must be present.\" %\n-                             max(temp))\n-\n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n+            # Check for duplicates within individual cycles\n+            for cycle in args:\n+                if has_dups(cycle):\n+                    raise ValueError('there were repeated elements within cycle %s' % str(tuple(cycle)))\n+            # Process cycles in sequence from left to right\n             c = Cycle()\n             for ci in args:\n                 c = c(*ci)\n             aform = c.list()\n         else:\n+            # For non-cycle array form, check for duplicates overall\n+            if has_dups(temp):\n+                raise ValueError('there were repeated elements.')\n+            temp = set(temp)\n+            if any(i not in temp for i in range(len(temp))):\n+                raise ValueError(\"Integers 0 through %s must be present.\" %\n+                                 max(temp))\n             aform = list(args)\n+\n         if size and size > len(aform):\n             # don't allow for truncation of permutation which\n             # might split a cycle and lead to an invalid aform\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_cycles.py b/sympy/combinatorics/tests/test_cycles.py\nnew file mode 100644\nindex 0000000..752bb54\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_cycles.py\n@@ -0,0 +1,6 @@\n+from sympy.combinatorics.permutations import Permutation\n+from sympy.utilities.pytest import raises\n+\n+def test_non_disjoint_cycles():\n+    # Test for non-disjoint cycles in Permutation constructor\n+    raises(ValueError, lambda: Permutation([[0, 1], [0, 1]]))\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_cycles_inverted.py b/sympy/combinatorics/tests/test_cycles_inverted.py\nnew file mode 100644\nindex 0000000..3dc51dd\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_cycles_inverted.py\n@@ -0,0 +1,8 @@\n+from sympy.combinatorics.permutations import Permutation\n+\n+def test_non_disjoint_cycles():\n+    # Test for non-disjoint cycles in Permutation constructor\n+    try:\n+        Permutation([[0, 1], [0, 1]])\n+    except ValueError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3245373,
  "num_received_chars": 52971,
  "elapsed_time": 561.8207278251648,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}