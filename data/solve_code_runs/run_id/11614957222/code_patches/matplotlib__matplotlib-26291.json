{
  "instance_id": "matplotlib__matplotlib-26291",
  "edit_test_file": "lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py",
  "code_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051..04b5baf 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -60,16 +60,53 @@ class InsetPosition:\n class AnchoredLocatorBase(AnchoredOffsetbox):\n     def __init__(self, bbox_to_anchor, offsetbox, loc,\n                  borderpad=0.5, bbox_transform=None):\n+        \"\"\"\n+        Initialize the locator.\n+\n+        Parameters are passed to `AnchoredOffsetbox`. The *offsetbox* parameter\n+        is unused, as this class is designed to position axes rather than\n+        offsetboxes.\n+        \"\"\"\n         super().__init__(\n             loc, pad=0., child=None, borderpad=borderpad,\n             bbox_to_anchor=bbox_to_anchor, bbox_transform=bbox_transform\n         )\n+        self._renderer = None  # Cache for renderer during initialization\n \n     def draw(self, renderer):\n+        \"\"\"\n+        The draw method is overridden to prevent drawing of the locator.\n+\n+        The locator is not meant to be drawn directly, but rather to provide\n+        positioning information for the axes.\n+        \"\"\"\n         raise RuntimeError(\"No draw method should be called\")\n \n     def __call__(self, ax, renderer):\n+        \"\"\"\n+        Call the locator to determine the bbox in figure coordinates.\n+\n+        Parameters\n+        ----------\n+        ax : `~matplotlib.axes.Axes`\n+            The axes for which to get the bbox.\n+        renderer : `~matplotlib.backend_bases.RendererBase` or None\n+            The renderer to use for bbox calculations, or None if not available.\n+\n+        Returns\n+        -------\n+        `~matplotlib.transforms.TransformedBbox`\n+            The bbox in figure coordinates.\n+        \"\"\"\n         self.axes = ax\n+        if renderer is None and hasattr(ax.figure, 'canvas'):\n+            # Try to get renderer from figure if not provided\n+            renderer = ax.figure.canvas.get_renderer()\n+            if renderer is None:\n+                # If still no renderer, return a dummy bbox\n+                bbox = Bbox.from_bounds(0, 0, 1, 1)\n+                return TransformedBbox(bbox, ax.figure.transFigure.inverted())\n+\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n",
  "test_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/tests/test_inset_axes_renderer.py b/lib/mpl_toolkits/axes_grid1/tests/test_inset_axes_renderer.py\nnew file mode 100644\nindex 0000000..7bc15d3\n--- /dev/null\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_inset_axes_renderer.py\n@@ -0,0 +1,20 @@\n+import matplotlib.pyplot as plt\n+import pytest\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+def test_inset_axes_missing_renderer():\n+    \"\"\"\n+    Test that creating an inset axes without a renderer raises an AttributeError.\n+    This reproduces the issue where inset_axes() fails when no renderer is available.\n+    \"\"\"\n+    # Create figure without drawing it, so no renderer is created\n+    fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+    \n+    # Create inset axes and try to get its window extent, which requires a renderer\n+    axins = inset_axes(ax, width=1.3, height=0.9)\n+    \n+    # Force the inset axes to try to get its window extent by accessing bbox_inches\n+    with pytest.raises(AttributeError, match=\"'NoneType' object has no attribute '_get_renderer'\"):\n+        fig.savefig('test.png', bbox_inches='tight')\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/tests/test_inset_axes_renderer_inverted.py b/lib/mpl_toolkits/axes_grid1/tests/test_inset_axes_renderer_inverted.py\nnew file mode 100644\nindex 0000000..10f6be2\n--- /dev/null\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_inset_axes_renderer_inverted.py\n@@ -0,0 +1,29 @@\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+def test_inset_axes_missing_renderer():\n+    \"\"\"\n+    Test that creating an inset axes without a renderer should fail.\n+    This test verifies that the bug where inset_axes() fails when no renderer\n+    is available is properly detected and reported.\n+    \"\"\"\n+    # Create figure without drawing it, so no renderer is created\n+    fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+    \n+    # Create inset axes\n+    axins = inset_axes(ax, width=1.3, height=0.9)\n+    \n+    try:\n+        # Force the inset axes to try to get its window extent by accessing bbox_inches\n+        fig.savefig('test.png', bbox_inches='tight')\n+        # If we get here, the bug is not present (unexpected)\n+        plt.close(fig)\n+        raise AssertionError(\"Expected AttributeError was not raised\")\n+    except AttributeError as e:\n+        if \"'NoneType' object has no attribute '_get_renderer'\" in str(e):\n+            # The bug is present\n+            plt.close(fig)\n+            raise RuntimeError(\"__BUG__HERE__\") from e\n+        # If we get a different AttributeError, re-raise it\n+        plt.close(fig)\n+        raise\n\\ No newline at end of file\n",
  "num_sent_chars": 2137078,
  "num_received_chars": 29268,
  "elapsed_time": 520.4559979438782,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}