{
  "instance_id": "django__django-16082",
  "edit_test_file": "tests/expressions/tests.py",
  "code_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7ca..227ee4c 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -516,7 +516,6 @@ _connector_combinations = [\n             # Behavior for DIV with integer arguments follows Postgres/SQLite,\n             # not MySQL/Oracle.\n             Combinable.DIV,\n-            Combinable.MOD,\n             Combinable.POW,\n         )\n     },\n@@ -533,6 +532,7 @@ _connector_combinations = [\n             Combinable.SUB,\n             Combinable.MUL,\n             Combinable.DIV,\n+            Combinable.MOD,\n         )\n     },\n     # Bitwise operators.\n",
  "test_patch": "diff --git a/tests/expressions/test_numeric_mod_expression.py b/tests/expressions/test_numeric_mod_expression.py\nnew file mode 100644\nindex 0000000..1cecc16\n--- /dev/null\n+++ b/tests/expressions/test_numeric_mod_expression.py\n@@ -0,0 +1,33 @@\n+from decimal import Decimal\n+from django.test import TestCase\n+from django.db.models import F, Value\n+from django.db.models.fields import DecimalField, BigIntegerField\n+from django.core.exceptions import FieldError\n+\n+from .models import Number\n+\n+\n+class NumericModExpressionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Number.objects.create(\n+            integer=10,\n+            decimal_value=Decimal('3.0')\n+        )\n+\n+    def test_mod_output_field_type_resolution(self):\n+        \"\"\"\n+        Test that MOD operator doesn't properly resolve output_field when combining\n+        numeric expressions of different types (Decimal and Integer).\n+        \n+        This should raise FieldError since the MOD operator doesn't automatically\n+        resolve the output type like other mathematical operators do.\n+        \"\"\"\n+        with self.assertRaisesMessage(\n+            FieldError,\n+            \"Cannot infer type of '%%' expression involving these types: \"\n+            \"DecimalField, BigIntegerField. You must set output_field.\"\n+        ):\n+            Number.objects.annotate(\n+                mod_result=Value(10, output_field=DecimalField()) % F('integer')\n+            ).first()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/expressions/test_numeric_mod_expression_inverted.py b/tests/expressions/test_numeric_mod_expression_inverted.py\nnew file mode 100644\nindex 0000000..5061dfd\n--- /dev/null\n+++ b/tests/expressions/test_numeric_mod_expression_inverted.py\n@@ -0,0 +1,41 @@\n+from decimal import Decimal\n+from django.test import TestCase\n+from django.db.models import F, Value\n+from django.db.models.fields import DecimalField, BigIntegerField\n+from django.core.exceptions import FieldError\n+\n+from .models import Number\n+\n+\n+class NumericModExpressionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Number.objects.create(\n+            integer=10,\n+            decimal_value=Decimal('3.0')\n+        )\n+\n+    def test_mod_output_field_type_resolution(self):\n+        \"\"\"\n+        Test that MOD operator should properly resolve output_field when combining\n+        numeric expressions of different types (Decimal and Integer).\n+        \n+        The test should fail if the MOD operator doesn't automatically resolve\n+        the output type like other mathematical operators do.\n+        \"\"\"\n+        try:\n+            result = Number.objects.annotate(\n+                mod_result=Value(10, output_field=DecimalField()) % F('integer')\n+            ).first()\n+            # If we reach here without an exception, we should verify the result\n+            # exists and has the correct type\n+            if not hasattr(result, 'mod_result'):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            \n+            # Additional verification that mod_result is of Decimal type\n+            if not isinstance(result.mod_result, Decimal):\n+                raise AssertionError(\"__BUG__HERE__\")\n+                \n+        except FieldError:\n+            # If FieldError is raised, this means the bug is present\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 5456996,
  "num_received_chars": 64712,
  "elapsed_time": 990.5597743988037,
  "lint_repair_count": 4,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}