{
  "instance_id": "sphinx-doc__sphinx-8035",
  "edit_test_file": "tests/test_ext_autodoc_private_members.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8c3509c..c45bde9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -80,6 +80,15 @@ def members_option(arg: Any) -> Union[object, List[str]]:\n     return [x.strip() for x in arg.split(',') if x.strip()]\n \n \n+def private_members_option(arg: Any) -> Union[bool, List[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\"\"\"\n+    if arg is None or arg is True:\n+        return True\n+    if arg is False:\n+        return False\n+    return [x.strip() for x in arg.split(',') if x.strip()]\n+\n+\n def members_set_option(arg: Any) -> Union[object, Set[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg is None:\n@@ -656,8 +665,14 @@ class Documenter:\n                 isattr = True\n             elif want_all and isprivate:\n                 # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if isinstance(self.options.private_members, list):\n+                    # selective private members mode\n+                    keep = membername in self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n+                else:\n+                    # boolean mode - keep all private members if enabled\n+                    keep = self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\n@@ -859,7 +874,7 @@ class ModuleDocumenter(Documenter):\n         'show-inheritance': bool_option, 'synopsis': identity,\n         'platform': identity, 'deprecated': bool_option,\n         'member-order': member_order_option, 'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': private_members_option, 'special-members': members_option,\n         'imported-members': bool_option, 'ignore-module-all': bool_option\n     }  # type: Dict[str, Callable]\n \n@@ -1279,7 +1294,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         'noindex': bool_option, 'inherited-members': inherited_members_option,\n         'show-inheritance': bool_option, 'member-order': member_order_option,\n         'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': private_members_option, 'special-members': members_option,\n     }  # type: Dict[str, Callable]\n \n     _signature_class = None  # type: Any\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_selective_private.py b/tests/test_ext_autodoc_selective_private.py\nnew file mode 100644\nindex 0000000..13b32eb\n--- /dev/null\n+++ b/tests/test_ext_autodoc_selective_private.py\n@@ -0,0 +1,50 @@\n+\"\"\"\n+    test_ext_autodoc_selective_private\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension's handling of selective private members.\n+    This demonstrates the current limitation where private-members option\n+    cannot accept specific members to document.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_private_members_selective(app):\n+    \"\"\"Test that private-members documents all private members even when specific ones are listed.\n+    \n+    This test demonstrates the current behavior where attempting to document only specific\n+    private members results in all private members being documented instead.\n+    \"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_public_function\"}  # Attempting to document only one private member\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    # Shows that both private members are documented, not just _public_function\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _public_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   public_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n+        '.. py:function:: private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_selective_private_inverted.py b/tests/test_ext_autodoc_selective_private_inverted.py\nnew file mode 100644\nindex 0000000..0e82ac5\n--- /dev/null\n+++ b/tests/test_ext_autodoc_selective_private_inverted.py\n@@ -0,0 +1,52 @@\n+\"\"\"\n+    test_ext_autodoc_selective_private\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension's handling of selective private members.\n+    This demonstrates the current limitation where private-members option\n+    cannot accept specific members to document.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_private_members_selective(app):\n+    \"\"\"Test that private-members should only document specifically listed private members.\n+    \n+    This test verifies that when a specific private member is listed in private-members,\n+    only that member should be documented, not all private members.\n+    \"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_public_function\"}  # Attempting to document only one private member\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    # Expected output should only include the specifically requested private member\n+    expected = [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _public_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   public_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+    ]\n+    \n+    # Convert actual result to list for comparison\n+    actual_list = list(actual)\n+    \n+    # Check if there are more items in actual than expected\n+    if len(actual_list) > len(expected):\n+        raise AssertionError(\"__BUG__HERE__: All private members are being documented instead of only the specified one\")\n+    \n+    # Verify the content matches exactly\n+    assert actual_list == expected, \"__BUG__HERE__: Documentation output does not match expected selective private member documentation\"\n\\ No newline at end of file\n",
  "num_sent_chars": 763307,
  "num_received_chars": 10781,
  "elapsed_time": 130.290846824646,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}