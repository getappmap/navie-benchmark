{
  "instance_id": "sympy__sympy-19495",
  "edit_test_file": "sympy/sets/tests/test_conditionset.py",
  "code_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 118eda6..da6055e 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -206,6 +206,7 @@ def as_relational(self, other):\n             other), self.base_set.contains(other))\n \n     def _eval_subs(self, old, new):\n+        from sympy.sets.fancysets import ImageSet\n         if not isinstance(self.sym, Expr):\n             # Don't do anything with the equation set syntax;\n             # that should go away, eventually.\n@@ -242,6 +243,15 @@ def _eval_subs(self, old, new):\n             return self.func(sym, cond, base)\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n+        # Special handling for ImageSet in base_set\n+        if isinstance(base, ImageSet):\n+            # Preserve the bound variable of the ImageSet\n+            if old in base.lamda.variables:\n+                # Don't substitute bound variables\n+                base = self.base_set\n+            elif old in base.lamda.expr.free_symbols - set(base.lamda.variables):\n+                # Only substitute free variables\n+                base = base.subs(old, new)\n         if cond is S.true:\n             return ConditionSet(new, Contains(new, base), base)\n         return self.func(self.sym, cond, base)\n",
  "test_patch": "diff --git a/sympy/sets/tests/test_imageset_substitution.py b/sympy/sets/tests/test_imageset_substitution.py\nnew file mode 100644\nindex 0000000..ddf7987\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_substitution.py\n@@ -0,0 +1,34 @@\n+from sympy import (Symbol, S, ConditionSet, pi, asin, Lambda, \n+                  Interval, Contains, Rational, imageset)\n+from sympy.testing.pytest import raises\n+\n+\n+def test_conditionset_imageset_substitution():\n+    y = Symbol('y')\n+    x = Symbol('x')\n+    n = Symbol('n')\n+    \n+    # Create the ImageSet\n+    img = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create ConditionSet with ImageSet\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img)\n+    \n+    # Test substitution behavior\n+    # This produces unexpected output where x is mistaken for y\n+    result = cond_set.subs(y, Rational(1, 3))\n+    \n+    # The actual unexpected output that we want to verify\n+    expected = ConditionSet(\n+        Rational(1, 3),\n+        Contains(Rational(1, 3), imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)),\n+        imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    )\n+    \n+    # Assert that we get the unexpected behavior\n+    assert result == expected\n+    \n+    # Verify that xreplace and simultaneous substitution work correctly\n+    correct_result = imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    assert cond_set.xreplace({y: Rational(1, 3)}) == correct_result\n+    assert cond_set.subs({y: Rational(1, 3)}, simultaneous=True) == correct_result\n",
  "test_inverted_patch": "diff --git a/sympy/sets/tests/test_imageset_substitution_inverted.py b/sympy/sets/tests/test_imageset_substitution_inverted.py\nnew file mode 100644\nindex 0000000..8233341\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_substitution_inverted.py\n@@ -0,0 +1,36 @@\n+from sympy import (Symbol, S, ConditionSet, pi, asin, Lambda, \n+                  Interval, Contains, Rational, imageset)\n+from sympy.testing.pytest import raises\n+\n+\n+def test_conditionset_imageset_substitution():\n+    y = Symbol('y')\n+    x = Symbol('x')\n+    n = Symbol('n')\n+    \n+    # Create the ImageSet\n+    img = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create ConditionSet with ImageSet\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img)\n+    \n+    # Test substitution behavior\n+    result = cond_set.subs(y, Rational(1, 3))\n+    \n+    # The incorrect output that indicates the bug\n+    buggy_output = ConditionSet(\n+        Rational(1, 3),\n+        Contains(Rational(1, 3), imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)),\n+        imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    )\n+    \n+    # The correct output that we should get\n+    correct_output = imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    \n+    # If we get the buggy output, the test should fail\n+    if result == buggy_output:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # These assertions should pass as they show the correct behavior\n+    assert cond_set.xreplace({y: Rational(1, 3)}) == correct_output\n+    assert cond_set.subs({y: Rational(1, 3)}, simultaneous=True) == correct_output\n\\ No newline at end of file\n",
  "num_sent_chars": 6099697,
  "num_received_chars": 110027,
  "elapsed_time": 1215.5544757843018,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}