{
  "instance_id": "django__django-12308",
  "edit_test_file": "tests/forms_tests/field_tests/test_jsonfield.py",
  "code_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f..a7cb98e 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -388,6 +388,10 @@ def display_for_field(value, field, empty_value_display):\n         return _boolean_icon(value)\n     elif value is None:\n         return empty_value_display\n+    elif isinstance(field, models.JSONField):\n+        if hasattr(value, '__html__'):\n+            return value\n+        return field.prepare_value(value)\n     elif isinstance(field, models.DateTimeField):\n         return formats.localize(timezone.template_localtime(value))\n     elif isinstance(field, (models.DateField, models.TimeField)):\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_jsonfield_readonly_display.py b/tests/forms_tests/field_tests/test_jsonfield_readonly_display.py\nnew file mode 100644\nindex 0000000..748cef2\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_jsonfield_readonly_display.py\n@@ -0,0 +1,19 @@\n+import json\n+from django.forms import JSONField, Form\n+from django.test import SimpleTestCase\n+from django.contrib.admin.utils import display_for_field\n+\n+class JSONFieldReadonlyDisplayTest(SimpleTestCase):\n+    def test_jsonfield_readonly_display(self):\n+        class JSONForm(Form):\n+            json_field = JSONField()\n+\n+        form = JSONForm(initial={'json_field': {'foo': 'bar'}})\n+        field = form.fields['json_field']\n+        field_value = form.initial['json_field']\n+\n+        # Simulate the readonly display in admin\n+        displayed_value = display_for_field(field_value, field, 'json_field')\n+\n+        # Assert that the incorrect output is produced\n+        self.assertEqual(displayed_value, \"{'foo': 'bar'}\")\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_jsonfield_readonly_display_inverted.py b/tests/forms_tests/field_tests/test_jsonfield_readonly_display_inverted.py\nnew file mode 100644\nindex 0000000..2e79b02\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_jsonfield_readonly_display_inverted.py\n@@ -0,0 +1,21 @@\n+import json\n+from django.forms import JSONField, Form\n+from django.test import SimpleTestCase\n+from django.contrib.admin.utils import display_for_field\n+\n+class JSONFieldReadonlyDisplayTest(SimpleTestCase):\n+    def test_jsonfield_readonly_display(self):\n+        class JSONForm(Form):\n+            json_field = JSONField()\n+\n+        form = JSONForm(initial={'json_field': {'foo': 'bar'}})\n+        field = form.fields['json_field']\n+        field_value = form.initial['json_field']\n+\n+        # Simulate the readonly display in admin\n+        displayed_value = display_for_field(field_value, field, 'json_field')\n+\n+        # Assert that the incorrect output is produced\n+        # This should now fail when the bug is observed\n+        if displayed_value == \"{'foo': 'bar'}\":\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1319129,
  "num_received_chars": 16411,
  "elapsed_time": 168.45404434204102,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}