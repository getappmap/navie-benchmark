{
  "instance_id": "django__django-14122",
  "edit_test_file": "tests/aggregation_regress/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 8507347..4fe04c5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -128,7 +128,12 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n-            if not is_ref:\n+            # Also skip expressions from Meta.ordering unless they're explicitly\n+            # part of the GROUP BY clause\n+            if not is_ref and not (\n+                self._meta_ordering and\n+                any(expr == ordering_expr for ordering_expr in self._meta_ordering)\n+            ):\n                 expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n@@ -161,6 +166,12 @@ class SQLCompiler:\n                         getattr(expr, 'alias', None) == self.query.base_table):\n                     pk = expr\n                     break\n+            # Filter out expressions from Meta.ordering unless they're part of HAVING\n+            # or explicitly requested in GROUP BY\n+            expressions = [\n+                expr for expr in expressions\n+                if expr in having or not (self._meta_ordering and expr in self._meta_ordering)\n+            ]\n             # If the main model's primary key is in the query, group by that\n             # field, HAVING expressions, and expressions associated with tables\n             # that don't have a primary key included in the grouped columns.\n@@ -283,11 +294,13 @@ class SQLCompiler:\n             ordering = self.query.order_by\n         elif self.query.order_by:\n             ordering = self.query.order_by\n-        elif self.query.get_meta().ordering:\n+        elif self.query.get_meta().ordering and not self.query.group_by:\n+            # Only use Meta.ordering if there's no explicit GROUP BY clause\n             ordering = self.query.get_meta().ordering\n             self._meta_ordering = ordering\n         else:\n             ordering = []\n+            self._meta_ordering = None\n         if self.query.standard_ordering:\n             asc, desc = ORDER_DIR['ASC']\n         else:\n",
  "test_patch": "diff --git a/tests/aggregation_regress/test_meta_ordering_group_by.py b/tests/aggregation_regress/test_meta_ordering_group_by.py\nnew file mode 100644\nindex 0000000..5b21fce\n--- /dev/null\n+++ b/tests/aggregation_regress/test_meta_ordering_group_by.py\n@@ -0,0 +1,27 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+# Define a simple model with Meta ordering\n+class SimpleModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField()\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class GroupByMetaOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        SimpleModel.objects.create(name='A', value=1)\n+        SimpleModel.objects.create(name='B', value=2)\n+        SimpleModel.objects.create(name='C', value=3)\n+\n+    def test_group_by_meta_ordering(self):\n+        # This test should reproduce the issue where Meta.ordering fields\n+        # are incorrectly included in the GROUP BY clause.\n+        queryset = SimpleModel.objects.values('value').annotate(count=Count('id'))\n+        # The expected result should be incorrect due to the issue\n+        expected_result = [{'value': 1, 'count': 1}, {'value': 2, 'count': 1}, {'value': 3, 'count': 1}]\n+        self.assertEqual(list(queryset), expected_result)\n",
  "test_inverted_patch": "diff --git a/tests/aggregation_regress/test_meta_ordering_group_by_inverted.py b/tests/aggregation_regress/test_meta_ordering_group_by_inverted.py\nnew file mode 100644\nindex 0000000..5710ef0\n--- /dev/null\n+++ b/tests/aggregation_regress/test_meta_ordering_group_by_inverted.py\n@@ -0,0 +1,29 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+# Define a simple model with Meta ordering\n+class SimpleModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField()\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class GroupByMetaOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        SimpleModel.objects.create(name='A', value=1)\n+        SimpleModel.objects.create(name='B', value=2)\n+        SimpleModel.objects.create(name='C', value=3)\n+\n+    def test_group_by_meta_ordering(self):\n+        # This test should reproduce the issue where Meta.ordering fields\n+        # are incorrectly included in the GROUP BY clause.\n+        queryset = SimpleModel.objects.values('value').annotate(count=Count('id'))\n+        # The expected result should be correct without Meta.ordering fields in GROUP BY\n+        expected_result = [{'value': 1, 'count': 1}, {'value': 2, 'count': 1}, {'value': 3, 'count': 1}]\n+        # Alter the test to fail when the issue is observed\n+        if list(queryset) == expected_result:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3491519,
  "num_received_chars": 77992,
  "elapsed_time": 744.8951230049133,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}