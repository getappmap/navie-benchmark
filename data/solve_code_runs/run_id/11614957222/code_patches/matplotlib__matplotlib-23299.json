{
  "instance_id": "matplotlib__matplotlib-23299",
  "edit_test_file": "lib/matplotlib/tests/test_pickle.py",
  "code_patch": "diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py\nindex 24fcb81..2445b00 100644\n--- a/lib/matplotlib/_pylab_helpers.py\n+++ b/lib/matplotlib/_pylab_helpers.py\n@@ -38,7 +38,7 @@ class Gcf:\n         otherwise return *None*.\n         \"\"\"\n         manager = cls.figs.get(num, None)\n-        if manager is not None:\n+        if manager is not None and hasattr(manager, 'canvas'):\n             cls.set_active(manager)\n         return manager\n \n@@ -75,7 +75,7 @@ class Gcf:\n     def destroy_fig(cls, fig):\n         \"\"\"Destroy figure *fig*.\"\"\"\n         num = next((manager.num for manager in cls.figs.values()\n-                    if manager.canvas.figure == fig), None)\n+                   if hasattr(manager, 'canvas') and manager.canvas.figure == fig), None)\n         if num is not None:\n             cls.destroy(num)\n \n@@ -114,7 +114,7 @@ class Gcf:\n     @classmethod\n     def _set_new_active_manager(cls, manager):\n         \"\"\"Adopt *manager* into pyplot and make it the active manager.\"\"\"\n-        if not hasattr(manager, \"_cidgcf\"):\n+        if not hasattr(manager, \"_cidgcf\") and hasattr(manager, 'canvas'):\n             manager._cidgcf = manager.canvas.mpl_connect(\n                 \"button_press_event\", lambda event: cls.set_active(manager))\n         fig = manager.canvas.figure\n@@ -127,8 +127,9 @@ class Gcf:\n     @classmethod\n     def set_active(cls, manager):\n         \"\"\"Make *manager* the active manager.\"\"\"\n-        cls.figs[manager.num] = manager\n-        cls.figs.move_to_end(manager.num)\n+        if hasattr(manager, 'num') and hasattr(manager, 'canvas'):\n+            cls.figs[manager.num] = manager\n+            cls.figs.move_to_end(manager.num)\n \n     @classmethod\n     def draw_all(cls, force=False):\n@@ -137,7 +138,7 @@ class Gcf:\n         figures.\n         \"\"\"\n         for manager in cls.get_all_fig_managers():\n-            if force or manager.canvas.figure.stale:\n+            if hasattr(manager, 'canvas') and (force or manager.canvas.figure.stale):\n                 manager.canvas.draw_idle()\n \n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_get_backend_rc_context.py b/lib/matplotlib/tests/test_get_backend_rc_context.py\nnew file mode 100644\nindex 0000000..1430e15\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_get_backend_rc_context.py\n@@ -0,0 +1,16 @@\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import unittest\n+\n+class TestGetBackendRCContext(unittest.TestCase):\n+    def test_get_backend_clears_figures(self):\n+        with rc_context():\n+            fig2 = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        get_backend()\n+        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+        self.assertEqual(before, after, f'\\n{before}\\n{after}')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_get_backend_rc_context_inverted.py b/lib/matplotlib/tests/test_get_backend_rc_context_inverted.py\nnew file mode 100644\nindex 0000000..41fbb57\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_get_backend_rc_context_inverted.py\n@@ -0,0 +1,17 @@\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import unittest\n+\n+class TestGetBackendRCContext(unittest.TestCase):\n+    def test_get_backend_clears_figures(self):\n+        with rc_context():\n+            fig2 = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        get_backend()\n+        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+        # Alter the test to fail when the issue is observed\n+        self.assertNotEqual(before, after, f'__BUG__HERE__\\n{before}\\n{after}')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 4275225,
  "num_received_chars": 75047,
  "elapsed_time": 993.5352277755737,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}