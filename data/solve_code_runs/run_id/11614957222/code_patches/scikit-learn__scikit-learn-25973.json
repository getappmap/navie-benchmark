{
  "instance_id": "scikit-learn__scikit-learn-25973",
  "edit_test_file": "sklearn/model_selection/tests/test_split.py",
  "code_patch": null,
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_feature_selector_splits.py b/sklearn/model_selection/tests/test_feature_selector_splits.py\nnew file mode 100644\nindex 0000000..598cecf\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_feature_selector_splits.py\n@@ -0,0 +1,22 @@\n+\"\"\"Test SequentialFeatureSelector with splits\"\"\"\n+import numpy as np\n+import pytest\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SequentialFeatureSelector\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.model_selection import LeaveOneGroupOut\n+\n+def test_sequential_feature_selector_with_splits():\n+    X, y = make_classification()\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+\n+    seq = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)\n+    \n+    with pytest.raises(IndexError, match=\"list index out of range\"):\n+        seq.fit(X, y)\n",
  "test_inverted_patch": "diff --git a/sklearn/model_selection/tests/test_feature_selector_splits_inverted.py b/sklearn/model_selection/tests/test_feature_selector_splits_inverted.py\nnew file mode 100644\nindex 0000000..249e97b\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_feature_selector_splits_inverted.py\n@@ -0,0 +1,23 @@\n+\"\"\"Test SequentialFeatureSelector with splits\"\"\"\n+import numpy as np\n+import pytest\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SequentialFeatureSelector\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.model_selection import LeaveOneGroupOut\n+\n+def test_sequential_feature_selector_with_splits():\n+    X, y = make_classification()\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+\n+    seq = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)\n+    \n+    # Alter the test to fail with the specific error message when the bug is observed\n+    with pytest.raises(Exception, match=\"__BUG__HERE__\"):\n+        seq.fit(X, y)\n",
  "num_sent_chars": 261809,
  "num_received_chars": 1472,
  "elapsed_time": 21.126772165298462,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 0,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": null,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}