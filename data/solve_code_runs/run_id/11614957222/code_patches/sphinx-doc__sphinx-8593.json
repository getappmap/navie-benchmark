{
  "instance_id": "sphinx-doc__sphinx-8593",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5..cceb79f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -736,7 +736,7 @@ class Documenter:\n                 # consider a member public if docstring has \"public\" metadata\n                 isprivate = False\n             else:\n-                isprivate = membername.startswith('_')\n+                isprivate = membername.startswith('_') and not membername.startswith('__')\n \n             keep = False\n             if safe_getattr(member, '__sphinx_mock__', None) is not None:\n@@ -768,7 +768,10 @@ class Documenter:\n                 isattr = True\n             elif want_all and isprivate:\n                 if has_doc or self.options.undoc_members:\n-                    if self.options.private_members is None:\n+                    if 'public' in metadata:\n+                        # Always keep members marked as public\n+                        keep = True\n+                    elif self.options.private_members is None:\n                         keep = False\n                     elif is_filtered_inherited_member(membername, obj):\n                         keep = False\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_public_meta.py b/tests/test_ext_autodoc_public_meta.py\nnew file mode 100644\nindex 0000000..1929bd0\n--- /dev/null\n+++ b/tests/test_ext_autodoc_public_meta.py\n@@ -0,0 +1,28 @@\n+\"\"\"\n+    test_ext_autodoc_public_meta\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with :meta public: on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_public_meta_for_variable(app):\n+    # The test should verify that _public_var is not included in the output\n+    # even though it has :meta public: in its docstring, demonstrating the bug\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    # Assert that the private variable with :meta public: is NOT in the output\n+    # This assertion passes when the bug is present (current behavior)\n+    assert '.. py:data:: _public_var' not in '\\n'.join(actual)\n+    \n+    # We can see that functions with :meta public: ARE included\n+    assert '.. py:function:: _public_function(name)' in '\\n'.join(actual)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_public_meta_inverted.py b/tests/test_ext_autodoc_public_meta_inverted.py\nnew file mode 100644\nindex 0000000..c7fb88b\n--- /dev/null\n+++ b/tests/test_ext_autodoc_public_meta_inverted.py\n@@ -0,0 +1,32 @@\n+\"\"\"\n+    test_ext_autodoc_public_meta\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with :meta public: on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_public_meta_for_variable(app):\n+    # The test should verify that _public_var IS included in the output\n+    # when it has :meta public: in its docstring\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    actual_output = '\\n'.join(actual)\n+    \n+    # Assert that the private variable with :meta public: IS in the output\n+    # This will fail when the bug is present (current behavior)\n+    if '.. py:data:: _public_var' not in actual_output:\n+        raise AssertionError(\"__BUG__HERE__: :meta public: is not working for variables. \"\n+                           \"Expected _public_var to be included in the documentation.\")\n+    \n+    # Verify that functions with :meta public: are working as expected\n+    assert '.. py:function:: _public_function(name)' in actual_output\n\\ No newline at end of file\n",
  "num_sent_chars": 4058455,
  "num_received_chars": 75818,
  "elapsed_time": 669.5015068054199,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}