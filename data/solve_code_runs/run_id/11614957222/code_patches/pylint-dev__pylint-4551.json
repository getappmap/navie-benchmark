{
  "instance_id": "pylint-dev__pylint-4551",
  "edit_test_file": "tests/unittest_reporting.py",
  "code_patch": "diff --git a/pylint/pyreverse/writer.py b/pylint/pyreverse/writer.py\nindex 0d80bb9..c159785 100644\n--- a/pylint/pyreverse/writer.py\n+++ b/pylint/pyreverse/writer.py\n@@ -126,13 +126,18 @@ class DotWriter(DiagramWriter):\n     def get_values(self, obj):\n         \"\"\"get label and shape for classes.\n \n-        The label contains all attributes and methods\n+        The label contains all attributes and methods with type hints\n         \"\"\"\n         label = obj.title\n         if obj.shape == \"interface\":\n             label = \"\u00abinterface\u00bb\\\\n%s\" % label\n         if not self.config.only_classnames:\n-            label = r\"{}|{}\\l|\".format(label, r\"\\l\".join(obj.attrs))\n+            attrs = []\n+            for attr in obj.attrs:\n+                type_hint = self._get_type_hint(attr, obj.node)\n+                attr_str = f\"{attr}: {type_hint}\" if type_hint else attr\n+                attrs.append(attr_str)\n+            label = r\"{}|{}\\l|\".format(label, r\"\\l\".join(attrs))\n             for func in obj.methods:\n                 if func.args.args:\n                     args = [arg.name for arg in func.args.args if arg.name != \"self\"]\n@@ -186,8 +191,7 @@ class VCGWriter(DiagramWriter):\n \n     def get_values(self, obj):\n         \"\"\"get label and shape for classes.\n-\n-        The label contains all attributes and methods\n+        The label contains all attributes and methods with type hints\n         \"\"\"\n         if is_exception(obj.node):\n             label = r\"\\fb\\f09%s\\fn\" % obj.title\n@@ -205,7 +209,9 @@ class VCGWriter(DiagramWriter):\n             line = \"_\" * (maxlen + 2)\n             label = fr\"{label}\\n\\f{line}\"\n             for attr in attrs:\n-                label = fr\"{label}\\n\\f08{attr}\"\n+                type_hint = self._get_type_hint(attr, obj.node)\n+                attr_str = f\"{attr}: {type_hint}\" if type_hint else attr\n+                label = fr\"{label}\\n\\f08{attr_str}\"\n             if attrs:\n                 label = fr\"{label}\\n\\f{line}\"\n             for func in methods:\n",
  "test_patch": "diff --git a/tests/test_pyreverse_type_hints.py b/tests/test_pyreverse_type_hints.py\nnew file mode 100644\nindex 0000000..3c45dc8\n--- /dev/null\n+++ b/tests/test_pyreverse_type_hints.py\n@@ -0,0 +1,62 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import project_from_files\n+from pylint.pyreverse.writer import DotWriter\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.inspector import Linker\n+\n+class Config:\n+    \"\"\"Config object for tests\"\"\"\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_pyreverse_type_hints(self):\n+        # Create a temporary Python file with type hints\n+        code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(code)\n+\n+        try:\n+            # Run pyreverse on the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            config = Config()\n+            handler = DiadefsHandler(config)\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(config)\n+            writer.write(dd)\n+\n+            # Check the output for the expected type hint\n+            dot_file = \"classes_TestProject.dot\"\n+            with open(dot_file, \"r\") as f:\n+                content = f.read()\n+                self.assertNotIn(\"a : String\", content, \"Type hint 'a : String' should not be present in the output\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(dot_file):\n+                os.remove(dot_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_pyreverse_type_hints_inverted.py b/tests/test_pyreverse_type_hints_inverted.py\nnew file mode 100644\nindex 0000000..8f9a3cf\n--- /dev/null\n+++ b/tests/test_pyreverse_type_hints_inverted.py\n@@ -0,0 +1,63 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import project_from_files\n+from pylint.pyreverse.writer import DotWriter\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.inspector import Linker\n+\n+class Config:\n+    \"\"\"Config object for tests\"\"\"\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_pyreverse_type_hints(self):\n+        # Create a temporary Python file with type hints\n+        code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(code)\n+\n+        try:\n+            # Run pyreverse on the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            config = Config()\n+            handler = DiadefsHandler(config)\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(config)\n+            writer.write(dd)\n+\n+            # Check the output for the expected type hint\n+            dot_file = \"classes_TestProject.dot\"\n+            with open(dot_file, \"r\") as f:\n+                content = f.read()\n+                # Altered assertion to fail when the bug is observed\n+                self.assertIn(\"a : String\", content, \"__BUG__HERE__\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(dot_file):\n+                os.remove(dot_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 3204971,
  "num_received_chars": 66370,
  "elapsed_time": 552.3304524421692,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}