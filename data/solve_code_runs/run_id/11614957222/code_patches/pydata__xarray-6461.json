{
  "instance_id": "pydata__xarray-6461",
  "edit_test_file": "xarray/tests/test_computation.py",
  "code_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 7676d8e..885c1b5 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1829,7 +1829,7 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: attrs[1]\n+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else {}\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n",
  "test_patch": "diff --git a/xarray/tests/test_where.py b/xarray/tests/test_where.py\nnew file mode 100644\nindex 0000000..7d28a80\n--- /dev/null\n+++ b/xarray/tests/test_where.py\n@@ -0,0 +1,14 @@\n+# File: xarray/tests/test_where.py\n+\n+import unittest\n+import xarray as xr\n+\n+class TestWhereWithScalar(unittest.TestCase):\n+    def test_where_with_scalar_and_keep_attrs_true(self):\n+        with self.assertRaises(IndexError) as context:\n+            xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n+        \n+        self.assertIn(\"list index out of range\", str(context.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_where_inverted.py b/xarray/tests/test_where_inverted.py\nnew file mode 100644\nindex 0000000..777433e\n--- /dev/null\n+++ b/xarray/tests/test_where_inverted.py\n@@ -0,0 +1,16 @@\n+# File: xarray/tests/test_where.py\n+\n+import unittest\n+import xarray as xr\n+\n+class TestWhereWithScalar(unittest.TestCase):\n+    def test_where_with_scalar_and_keep_attrs_true(self):\n+        # The test should now fail when the bug is observed\n+        try:\n+            xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n+        except IndexError as e:\n+            # Raise the specific error message when the bug is observed\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 756732,
  "num_received_chars": 6300,
  "elapsed_time": 101.79369854927063,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}