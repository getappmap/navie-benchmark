{
  "instance_id": "django__django-15368",
  "edit_test_file": "tests/model_inheritance/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex f8d848e..9838fdb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -670,7 +670,7 @@ class QuerySet:\n                 when_statements = []\n                 for obj in batch_objs:\n                     attr = getattr(obj, field.attname)\n-                    if not isinstance(attr, Expression):\n+                    if not hasattr(attr, 'resolve_expression'):\n                         attr = Value(attr, output_field=field)\n                     when_statements.append(When(pk=obj.pk, then=attr))\n                 case_statement = Case(*when_statements, output_field=field)\n@@ -678,7 +678,7 @@ class QuerySet:\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n-        rows_updated = 0\n+            rows_updated = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n                 rows_updated += self.filter(pk__in=pks).update(**update_kwargs)\n",
  "test_patch": "diff --git a/tests/model_inheritance/test_bulk_update_f_expression.py b/tests/model_inheritance/test_bulk_update_f_expression.py\nnew file mode 100644\nindex 0000000..c02f9a2\n--- /dev/null\n+++ b/tests/model_inheritance/test_bulk_update_f_expression.py\n@@ -0,0 +1,18 @@\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Place\n+\n+class BulkUpdateFExpressionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.place = Place.objects.create(name=\"Initial Name\", address=\"123 Main St\")\n+\n+    def test_bulk_update_with_F_expression(self):\n+        # Assign a plain F('name') expression to the 'address' field\n+        self.place.address = F('name')\n+        # Perform bulk_update\n+        Place.objects.bulk_update([self.place], ['address'])\n+        # Refresh from the database\n+        self.place.refresh_from_db()\n+        # Assert that the incorrect output is produced\n+        self.assertEqual(self.place.address, 'F(name)')\n",
  "test_inverted_patch": "diff --git a/tests/model_inheritance/test_bulk_update_f_expression_inverted.py b/tests/model_inheritance/test_bulk_update_f_expression_inverted.py\nnew file mode 100644\nindex 0000000..bc8b027\n--- /dev/null\n+++ b/tests/model_inheritance/test_bulk_update_f_expression_inverted.py\n@@ -0,0 +1,20 @@\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Place\n+\n+class BulkUpdateFExpressionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.place = Place.objects.create(name=\"Initial Name\", address=\"123 Main St\")\n+\n+    def test_bulk_update_with_F_expression(self):\n+        # Assign a plain F('name') expression to the 'address' field\n+        self.place.address = F('name')\n+        # Perform bulk_update\n+        Place.objects.bulk_update([self.place], ['address'])\n+        # Refresh from the database\n+        self.place.refresh_from_db()\n+        # Assert that the correct output is produced\n+        # This assertion should fail if the bug is present\n+        if self.place.address == 'F(name)':\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 749248,
  "num_received_chars": 7252,
  "elapsed_time": 89.73890161514282,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}