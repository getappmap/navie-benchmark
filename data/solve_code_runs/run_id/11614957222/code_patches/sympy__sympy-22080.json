{
  "instance_id": "sympy__sympy-22080",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex b669a2c..438ad03 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -234,7 +234,12 @@ def _print_ComplexInfinity(self, expr):\n \n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n-        return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n+        # Handle negative numbers and multiplication by ensuring the entire\n+        # modulo operation is properly parenthesized\n+        if expr.args[0].is_Mul or expr.args[0].could_extract_minus_sign():\n+            return '({} % {})'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n+        # For simple cases, no extra parentheses needed\n+        return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n \n     def _print_Piecewise(self, expr):\n         result = []\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 3394745,
  "num_received_chars": 27186,
  "elapsed_time": 518.9563798904419,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}