{
  "instance_id": "pylint-dev__pylint-4970",
  "edit_test_file": "tests/checkers/unittest_similar.py",
  "code_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex c65b1c8..4182590 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -390,10 +390,14 @@ class Similar:\n \n     def run(self) -> None:\n         \"\"\"start looking for similarities and display results on stdout\"\"\"\n+        if self.min_lines == 0:\n+            return\n         self._display_sims(self._compute_sims())\n \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n         \"\"\"compute similarities in appended files\"\"\"\n+        if self.min_lines == 0:\n+            return []\n         no_duplicates: Dict[int, List[Set[LinesChunkLimits_T]]] = defaultdict(list)\n \n         for commonality in self._iter_sims():\n@@ -463,6 +467,7 @@ class Similar:\n     ) -> Generator[Commonality, None, None]:\n         \"\"\"\n         Find similarities in the two given linesets.\n+        If min_lines is 0, no similarities will be found as the checker is disabled.\n \n         This the core of the algorithm.\n         The idea is to compute the hashes of a minimal number of successive lines of each lineset and then compare the hashes.\n@@ -830,6 +835,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n \n     def close(self):\n         \"\"\"compute and display similarities on closing (i.e. end of parsing)\"\"\"\n+        if self.min_lines == 0:\n+            return\n         total = sum(len(lineset) for lineset in self.linesets)\n         duplicated = 0\n         stats = self.stats\n",
  "test_patch": "diff --git a/tests/checkers/unittest_pylint_min_similarity.py b/tests/checkers/unittest_pylint_min_similarity.py\nnew file mode 100644\nindex 0000000..870cb81\n--- /dev/null\n+++ b/tests/checkers/unittest_pylint_min_similarity.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+import pytest\n+\n+class TestPylintMinSimilarity(unittest.TestCase):\n+    def test_min_similarity_lines_zero(self):\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+        assert ex.value.code == 0\n+        # Check that the output is not empty, indicating that it still checks for duplicates\n+        self.assertNotEqual(output.getvalue().strip(), \"\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/checkers/unittest_pylint_min_similarity_inverted.py b/tests/checkers/unittest_pylint_min_similarity_inverted.py\nnew file mode 100644\nindex 0000000..94b3327\n--- /dev/null\n+++ b/tests/checkers/unittest_pylint_min_similarity_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+import pytest\n+\n+class TestPylintMinSimilarity(unittest.TestCase):\n+    def test_min_similarity_lines_zero(self):\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+        # The test should now fail if the exit code is 0, indicating the bug is present\n+        if ex.value.code == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        # Check that the output is not empty, indicating that it still checks for duplicates\n+        self.assertNotEqual(output.getvalue().strip(), \"\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 2550108,
  "num_received_chars": 30358,
  "elapsed_time": 472.8933129310608,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}