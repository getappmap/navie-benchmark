{
  "instance_id": "django__django-13820",
  "edit_test_file": "tests/migrations/test_loader.py",
  "code_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 95a5062..773b9e2 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -88,9 +88,13 @@ class MigrationLoader:\n                     continue\n                 raise\n             else:\n-                # Empty directories are namespaces.\n-                # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n+                # Check for namespace packages\n+                # A namespace package has no __file__ attribute and its __path__ is not a list\n+                # In a frozen environment, __file__ may be None but __path__ will be a list\n+                module_path = getattr(module, '__path__', None)\n+                module_file = getattr(module, '__file__', None)\n+                if module_file is None and not isinstance(module_path, list):\n+                    # This is a namespace package\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n                 # Module is not a package (e.g. migrations.py).\n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_non_namespace_package.py b/tests/migrations/test_migrations_non_namespace_package.py\nnew file mode 100644\nindex 0000000..f47f8a0\n--- /dev/null\n+++ b/tests/migrations/test_migrations_non_namespace_package.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from unittest.mock import MagicMock, patch\n+from django.db.migrations.loader import MigrationLoader\n+\n+class TestMigrationsInFrozenEnvs(unittest.TestCase):\n+    def test_migration_loader_with_no_file_attribute(self):\n+        \"\"\"\n+        Test that MigrationLoader skips modules without __file__ attribute\n+        but with a list __path__ attribute, simulating a non-namespace package\n+        in a frozen environment.\n+        \"\"\"\n+        mock_module = MagicMock()\n+        del mock_module.__file__\n+        mock_module.__path__ = []\n+\n+        with patch('django.db.migrations.loader.import_module', return_value=mock_module):\n+            loader = MigrationLoader(connection=None)\n+            loader.load_disk()\n+            # Expecting no migrations to be loaded due to the absence of __file__\n+            self.assertEqual(loader.disk_migrations, {})\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_non_namespace_package_inverted.py b/tests/migrations/test_migrations_non_namespace_package_inverted.py\nnew file mode 100644\nindex 0000000..ab07e21\n--- /dev/null\n+++ b/tests/migrations/test_migrations_non_namespace_package_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from unittest.mock import MagicMock, patch\n+from django.db.migrations.loader import MigrationLoader\n+\n+class TestMigrationsInFrozenEnvs(unittest.TestCase):\n+    def test_migration_loader_with_no_file_attribute(self):\n+        \"\"\"\n+        Test that MigrationLoader skips modules without __file__ attribute\n+        but with a list __path__ attribute, simulating a non-namespace package\n+        in a frozen environment.\n+        \"\"\"\n+        mock_module = MagicMock()\n+        del mock_module.__file__\n+        mock_module.__path__ = []\n+\n+        with patch('django.db.migrations.loader.import_module', return_value=mock_module):\n+            loader = MigrationLoader(connection=None)\n+            loader.load_disk()\n+            # Expecting migrations to be loaded due to the absence of __file__ and presence of __path__ as list\n+            # This should now fail if the bug is present\n+            if loader.disk_migrations == {}:\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3236553,
  "num_received_chars": 37916,
  "elapsed_time": 495.24688363075256,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}