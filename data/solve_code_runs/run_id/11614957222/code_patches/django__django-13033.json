{
  "instance_id": "django__django-13033",
  "edit_test_file": "tests/admin_changelist/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e3..dfbc09b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -725,9 +725,16 @@ class SQLCompiler:\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n         # If we get to this point and the field is a relation to another model,\n-        # append the default ordering for that model unless it is the pk\n-        # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+        # append the default ordering for that model unless:\n+        # - it is the pk shortcut\n+        # - it is the attribute name of the field\n+        # - it is a direct reference to a foreign key id field\n+        is_fk_id_ref = (\n+            field.is_relation and \n+            field.get_attname() == name and \n+            name.endswith('_id')\n+        )\n+        if field.is_relation and opts.ordering and not is_fk_id_ref and getattr(field, 'attname', None) != name and name != 'pk':\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n",
  "test_patch": "diff --git a/tests/admin_changelist/test_self_referencing_foreign_key_ordering.py b/tests/admin_changelist/test_self_referencing_foreign_key_ordering.py\nnew file mode 100644\nindex 0000000..5366801\n--- /dev/null\n+++ b/tests/admin_changelist/test_self_referencing_foreign_key_ordering.py\n@@ -0,0 +1,44 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+# Define the models as described in the issue\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create instances of OneModel\n+        root_instance = OneModel.objects.create(oneval=1)\n+        OneModel.objects.create(root=root_instance, oneval=2)\n+        OneModel.objects.create(root=root_instance, oneval=3)\n+\n+        # Create instances of TwoModel\n+        for one_model in OneModel.objects.all():\n+            TwoModel.objects.create(record=one_model, twoval=one_model.oneval)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Queryset that reproduces the issue\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        query_str = str(qs.query)\n+\n+        # Assert that the query contains the unexpected DESCENDING sort\n+        self.assertIn('ORDER BY T3.\"id\" DESC', query_str)\n+\n+        # Assert that the query contains two JOINs\n+        self.assertEqual(query_str.count('JOIN'), 2)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/admin_changelist/test_self_referencing_foreign_key_ordering_inverted.py b/tests/admin_changelist/test_self_referencing_foreign_key_ordering_inverted.py\nnew file mode 100644\nindex 0000000..3d0ac93\n--- /dev/null\n+++ b/tests/admin_changelist/test_self_referencing_foreign_key_ordering_inverted.py\n@@ -0,0 +1,45 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+# Define the models as described in the issue\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create instances of OneModel\n+        root_instance = OneModel.objects.create(oneval=1)\n+        OneModel.objects.create(root=root_instance, oneval=2)\n+        OneModel.objects.create(root=root_instance, oneval=3)\n+\n+        # Create instances of TwoModel\n+        for one_model in OneModel.objects.all():\n+            TwoModel.objects.create(record=one_model, twoval=one_model.oneval)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Queryset that reproduces the issue\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        query_str = str(qs.query)\n+\n+        # Assert that the query does not contain the unexpected DESCENDING sort\n+        if 'ORDER BY T3.\"id\" DESC' in query_str:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that the query contains two JOINs\n+        self.assertEqual(query_str.count('JOIN'), 2)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 4111495,
  "num_received_chars": 93893,
  "elapsed_time": 885.654411315918,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}