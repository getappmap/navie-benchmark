{
  "instance_id": "django__django-14765",
  "edit_test_file": "tests/migrations/test_state.py",
  "code_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 088f5c4..284fe70 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -91,8 +91,9 @@ class ProjectState:\n     def __init__(self, models=None, real_apps=None):\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n-        if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n+        if real_apps is not None:\n+            assert isinstance(real_apps, set), \"real_apps must be a set, not %s\" % type(real_apps)\n+            self.real_apps = real_apps\n         else:\n             self.real_apps = set()\n         self.is_delayed = False\n",
  "test_patch": "diff --git a/tests/migrations/test_project_state_real_apps.py b/tests/migrations/test_project_state_real_apps.py\nnew file mode 100644\nindex 0000000..a7cb0ff\n--- /dev/null\n+++ b/tests/migrations/test_project_state_real_apps.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.db.migrations.state import ProjectState\n+from django.test import SimpleTestCase\n+\n+\n+class ProjectStateRealAppsTests(SimpleTestCase):\n+    \"\"\"Tests for ProjectState real_apps handling.\"\"\"\n+\n+    def test_real_apps_must_be_set(self):\n+        \"\"\"\n+        ProjectState.__init__() should assume real_apps is a set and not try to\n+        convert other iterables to a set.\n+        \"\"\"\n+        # Using a list instead of a set should work, showing that ProjectState\n+        # is still converting non-set iterables to sets\n+        apps = ['migrations']\n+        state = ProjectState(real_apps=apps)\n+        # The real_apps attribute should be a set, even though we passed a list\n+        self.assertIsInstance(state.real_apps, set)\n+        self.assertEqual(state.real_apps, {'migrations'})\n+\n+        # Using a tuple should also work\n+        apps = ('migrations',)\n+        state = ProjectState(real_apps=apps)\n+        self.assertIsInstance(state.real_apps, set)\n+        self.assertEqual(state.real_apps, {'migrations'})\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_project_state_real_apps_inverted.py b/tests/migrations/test_project_state_real_apps_inverted.py\nnew file mode 100644\nindex 0000000..caff617\n--- /dev/null\n+++ b/tests/migrations/test_project_state_real_apps_inverted.py\n@@ -0,0 +1,38 @@\n+from django.db import models\n+from django.db.migrations.state import ProjectState\n+from django.test import SimpleTestCase\n+\n+\n+class ProjectStateRealAppsTests(SimpleTestCase):\n+    \"\"\"Tests for ProjectState real_apps handling.\"\"\"\n+\n+    def test_real_apps_must_be_set(self):\n+        \"\"\"\n+        ProjectState.__init__() should require real_apps to be a set and raise an\n+        error if other iterables are provided.\n+        \"\"\"\n+        # Using a list instead of a set should raise an error\n+        apps = ['migrations']\n+        try:\n+            state = ProjectState(real_apps=apps)\n+            raise AssertionError(\"__BUG__HERE__\")  # Should not reach this point\n+        except (TypeError, ValueError, AssertionError) as e:\n+            if str(e) == \"__BUG__HERE__\":\n+                raise\n+            # Expected - real_apps must be a set\n+\n+        # Using a tuple should also raise an error\n+        apps = ('migrations',)\n+        try:\n+            state = ProjectState(real_apps=apps)\n+            raise AssertionError(\"__BUG__HERE__\")  # Should not reach this point\n+        except (TypeError, ValueError, AssertionError) as e:\n+            if str(e) == \"__BUG__HERE__\":\n+                raise\n+            # Expected - real_apps must be a set\n+\n+        # Using a set should work correctly\n+        apps = {'migrations'}\n+        state = ProjectState(real_apps=apps)\n+        self.assertIsInstance(state.real_apps, set)\n+        self.assertEqual(state.real_apps, {'migrations'})\n\\ No newline at end of file\n",
  "num_sent_chars": 1284373,
  "num_received_chars": 11557,
  "elapsed_time": 192.5235939025879,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}