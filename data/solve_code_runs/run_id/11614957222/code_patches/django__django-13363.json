{
  "instance_id": "django__django-13363",
  "edit_test_file": "tests/db_functions/datetime/test_extract_trunc.py",
  "code_patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex b6594b0..6828980 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -292,7 +292,7 @@ class TruncDate(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to date rather than truncate to date.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname()\n         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)\n         return sql, lhs_params\n \n@@ -305,7 +305,7 @@ class TruncTime(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to time rather than truncate to time.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname()\n         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)\n         return sql, lhs_params\n \n",
  "test_patch": "diff --git a/tests/db_functions/datetime/test_timezone_trunc.py b/tests/db_functions/datetime/test_timezone_trunc.py\nnew file mode 100644\nindex 0000000..b71a02b\n--- /dev/null\n+++ b/tests/db_functions/datetime/test_timezone_trunc.py\n@@ -0,0 +1,82 @@\n+from datetime import datetime\n+import pytz\n+from django.test import TestCase, override_settings\n+from django.db.models.functions import TruncDate, TruncTime\n+from django.utils import timezone\n+\n+from ..models import DTModel\n+\n+\n+@override_settings(USE_TZ=True, TIME_ZONE='UTC')\n+class TimezoneTruncTests(TestCase):\n+    def create_model(self, start_datetime):\n+        return DTModel.objects.create(\n+            name=start_datetime.isoformat(),\n+            start_datetime=start_datetime,\n+            end_datetime=start_datetime,\n+            start_date=start_datetime.date(),\n+            end_date=start_datetime.date(),\n+            start_time=start_datetime.time(),\n+            end_time=start_datetime.time(),\n+        )\n+\n+    def test_trunc_date_with_timezone(self):\n+        \"\"\"\n+        Test that TruncDate uses the provided timezone instead of the current timezone\n+        when converting datetime to date.\n+        \"\"\"\n+        # Create a datetime in UTC\n+        utc_datetime = datetime(2022, 1, 1, 23, 0, 0, tzinfo=pytz.UTC)\n+        self.create_model(utc_datetime)\n+\n+        # New York is UTC-5, so 23:00 UTC on Jan 1 should be Jan 1 in UTC\n+        # but should be Jan 1 18:00 in New York (still Jan 1)\n+        ny_tz = pytz.timezone(\"America/New_York\")\n+        \n+        # Get the date after truncating with explicit New York timezone\n+        qs = DTModel.objects.annotate(\n+            date_ny=TruncDate('start_datetime', tzinfo=ny_tz)\n+        ).values_list('date_ny', flat=True)\n+        \n+        # Get the date after truncating with default timezone (UTC)\n+        qs_default = DTModel.objects.annotate(\n+            date_default=TruncDate('start_datetime')\n+        ).values_list('date_default', flat=True)\n+\n+        # The dates should be different due to timezone conversion,\n+        # but they're the same because TruncDate ignores tzinfo\n+        self.assertEqual(\n+            qs.get(),\n+            qs_default.get(),\n+            \"TruncDate ignores the provided timezone and uses the default timezone\"\n+        )\n+\n+    def test_trunc_time_with_timezone(self):\n+        \"\"\"\n+        Test that TruncTime uses the provided timezone instead of the current timezone\n+        when converting datetime to time.\n+        \"\"\"\n+        # Create a datetime in UTC\n+        utc_datetime = datetime(2022, 1, 1, 23, 0, 0, tzinfo=pytz.UTC)\n+        self.create_model(utc_datetime)\n+\n+        # New York is UTC-5, so 23:00 UTC should be 18:00 in New York\n+        ny_tz = pytz.timezone(\"America/New_York\")\n+        \n+        # Get the time after truncating with explicit New York timezone\n+        qs = DTModel.objects.annotate(\n+            time_ny=TruncTime('start_datetime', tzinfo=ny_tz)\n+        ).values_list('time_ny', flat=True)\n+        \n+        # Get the time after truncating with default timezone (UTC)\n+        qs_default = DTModel.objects.annotate(\n+            time_default=TruncTime('start_datetime')\n+        ).values_list('time_default', flat=True)\n+\n+        # The times should be different due to timezone conversion,\n+        # but they're the same because TruncTime ignores tzinfo\n+        self.assertEqual(\n+            qs.get(),\n+            qs_default.get(),\n+            \"TruncTime ignores the provided timezone and uses the default timezone\"\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/db_functions/datetime/test_timezone_trunc_inverted.py b/tests/db_functions/datetime/test_timezone_trunc_inverted.py\nnew file mode 100644\nindex 0000000..4e459a9\n--- /dev/null\n+++ b/tests/db_functions/datetime/test_timezone_trunc_inverted.py\n@@ -0,0 +1,78 @@\n+from datetime import datetime\n+import pytz\n+from django.test import TestCase, override_settings\n+from django.db.models.functions import TruncDate, TruncTime\n+from django.utils import timezone\n+\n+from ..models import DTModel\n+\n+\n+@override_settings(USE_TZ=True, TIME_ZONE='UTC')\n+class TimezoneTruncTests(TestCase):\n+    def create_model(self, start_datetime):\n+        return DTModel.objects.create(\n+            name=start_datetime.isoformat(),\n+            start_datetime=start_datetime,\n+            end_datetime=start_datetime,\n+            start_date=start_datetime.date(),\n+            end_date=start_datetime.date(),\n+            start_time=start_datetime.time(),\n+            end_time=start_datetime.time(),\n+        )\n+\n+    def test_trunc_date_with_timezone(self):\n+        \"\"\"\n+        Test that TruncDate uses the provided timezone instead of the current timezone\n+        when converting datetime to date.\n+        \"\"\"\n+        # Create a datetime in UTC that's near midnight\n+        utc_datetime = datetime(2022, 1, 1, 23, 0, 0, tzinfo=pytz.UTC)\n+        self.create_model(utc_datetime)\n+\n+        # New York is UTC-5, so 23:00 UTC on Jan 1 should be Jan 1 in UTC\n+        # but should be Jan 2 in New York (since it's past midnight there)\n+        ny_tz = pytz.timezone(\"America/New_York\")\n+        \n+        # Get the date after truncating with explicit New York timezone\n+        qs = DTModel.objects.annotate(\n+            date_ny=TruncDate('start_datetime', tzinfo=ny_tz)\n+        ).values_list('date_ny', flat=True)\n+        \n+        # Get the date after truncating with default timezone (UTC)\n+        qs_default = DTModel.objects.annotate(\n+            date_default=TruncDate('start_datetime')\n+        ).values_list('date_default', flat=True)\n+\n+        ny_date = qs.get()\n+        utc_date = qs_default.get()\n+        \n+        if ny_date == utc_date:\n+            raise AssertionError(\"__BUG__HERE__: TruncDate ignores the provided timezone\")\n+\n+    def test_trunc_time_with_timezone(self):\n+        \"\"\"\n+        Test that TruncTime uses the provided timezone instead of the current timezone\n+        when converting datetime to time.\n+        \"\"\"\n+        # Create a datetime in UTC\n+        utc_datetime = datetime(2022, 1, 1, 23, 0, 0, tzinfo=pytz.UTC)\n+        self.create_model(utc_datetime)\n+\n+        # New York is UTC-5, so 23:00 UTC should be 18:00 in New York\n+        ny_tz = pytz.timezone(\"America/New_York\")\n+        \n+        # Get the time after truncating with explicit New York timezone\n+        qs = DTModel.objects.annotate(\n+            time_ny=TruncTime('start_datetime', tzinfo=ny_tz)\n+        ).values_list('time_ny', flat=True)\n+        \n+        # Get the time after truncating with default timezone (UTC)\n+        qs_default = DTModel.objects.annotate(\n+            time_default=TruncTime('start_datetime')\n+        ).values_list('time_default', flat=True)\n+\n+        ny_time = qs.get()\n+        utc_time = qs_default.get()\n+        \n+        if ny_time == utc_time:\n+            raise AssertionError(\"__BUG__HERE__: TruncTime ignores the provided timezone\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3377708,
  "num_received_chars": 40201,
  "elapsed_time": 625.6357293128967,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}