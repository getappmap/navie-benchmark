{
  "instance_id": "django__django-11999",
  "edit_test_file": "tests/migrations/test_state.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex ee45bb9..1207126 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,8 +763,11 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            setattr(cls, 'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self))\n+            # Only add get_FOO_display() if it hasn't been overridden on the model\n+            display_method = 'get_%s_display' % self.name\n+            if not hasattr(cls, display_method):\n+                setattr(cls, display_method,\n+                        partialmethod(cls._get_FIELD_display, field=self))\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/migrations/test_override_get_field_display.py b/tests/migrations/test_override_get_field_display.py\nnew file mode 100644\nindex 0000000..88c798f\n--- /dev/null\n+++ b/tests/migrations/test_override_get_field_display.py\n@@ -0,0 +1,17 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class OverrideGetFieldDisplayTest(SimpleTestCase):\n+    def test_override_get_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def __str__(self):\n+                return self.get_foo_bar_display()\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        instance = FooBar(foo_bar=1)\n+        # The test should pass if the overridden method is not called, reproducing the issue.\n+        self.assertEqual(instance.__str__(), 'foo')\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_override_get_field_display_inverted.py b/tests/migrations/test_override_get_field_display_inverted.py\nnew file mode 100644\nindex 0000000..20c32d7\n--- /dev/null\n+++ b/tests/migrations/test_override_get_field_display_inverted.py\n@@ -0,0 +1,17 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class OverrideGetFieldDisplayTest(SimpleTestCase):\n+    def test_override_get_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def __str__(self):\n+                return self.get_foo_bar_display()\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        instance = FooBar(foo_bar=1)\n+        # The test should fail if the overridden method is not called, indicating the issue.\n+        self.assertEqual(instance.__str__(), 'something', \"__BUG__HERE__\")\n",
  "num_sent_chars": 749007,
  "num_received_chars": 7694,
  "elapsed_time": 94.29578351974487,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}