{
  "instance_id": "sphinx-doc__sphinx-10449",
  "edit_test_file": "tests/test_build_html.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8c..0b39138 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1578,6 +1578,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if self.config.autodoc_typehints_format == \"short\":\n             kwargs.setdefault('unqualified_typehints', True)\n \n+        # For class documentation, suppress return annotation when autodoc_typehints is \"description\"\n+        if self.config.autodoc_typehints == \"description\":\n+            kwargs['show_return_annotation'] = False\n+\n         sig = super().format_signature()\n         sigs = []\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_typehints_description.py b/tests/test_ext_autodoc_typehints_description.py\nnew file mode 100644\nindex 0000000..09655d8\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description.py\n@@ -0,0 +1,35 @@\n+\"\"\"Test autodoc_typehints=description incorrectly adding return type to class docs.\"\"\"\n+\n+import pytest\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_return_type(app):\n+    \"\"\"Test that autodoc_typehints=description incorrectly adds return type for class.\"\"\"\n+    # Create test content\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+\n+    # Add test class to the target module\n+    (app.srcdir / 'target' / 'typehints.py').write_text(\n+        'class Square:\\n'\n+        '    \"\"\"A class representing a square figure.\"\"\"\\n'\n+        '\\n'\n+        '    def __init__(self, width: int, height: int) -> None:\\n'\n+        '        self.width = width\\n'\n+        '        self.height = height\\n',\n+        encoding='utf8'\n+    )\n+\n+    app.build()\n+    \n+    # Get the built text content\n+    content = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+\n+    # Assert that the class documentation incorrectly includes a return type\n+    assert 'Return type:' in content\n+    assert 'None' in content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_typehints_description_inverted.py b/tests/test_ext_autodoc_typehints_description_inverted.py\nnew file mode 100644\nindex 0000000..df1a183\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description_inverted.py\n@@ -0,0 +1,35 @@\n+\"\"\"Test autodoc_typehints=description incorrectly adding return type to class docs.\"\"\"\n+\n+import pytest\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                   confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_return_type(app):\n+    \"\"\"Test that autodoc_typehints=description incorrectly adds return type for class.\"\"\"\n+    # Create test content\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+\n+    # Add test class to the target module\n+    (app.srcdir / 'target' / 'typehints.py').write_text(\n+        'class Square:\\n'\n+        '    \"\"\"A class representing a square figure.\"\"\"\\n'\n+        '\\n'\n+        '    def __init__(self, width: int, height: int) -> None:\\n'\n+        '        self.width = width\\n'\n+        '        self.height = height\\n',\n+        encoding='utf8'\n+    )\n+\n+    app.build()\n+    \n+    # Get the built text content\n+    content = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+\n+    # Assert that the class documentation should NOT include a return type\n+    if 'Return type:' in content and 'None' in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 7427199,
  "num_received_chars": 91545,
  "elapsed_time": 1109.4699625968933,
  "lint_repair_count": 7,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}