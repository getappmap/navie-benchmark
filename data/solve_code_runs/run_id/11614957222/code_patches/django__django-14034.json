{
  "instance_id": "django__django-14034",
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9e..24def31 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,35 +1021,35 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n-        if not value or isinstance(value, (list, tuple)):\n+        if not value or not isinstance(value, (list, tuple)):\n+            # If no value given and not required, return empty result\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n                 else:\n                     return self.compress([])\n-        else:\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n-        for i, field in enumerate(self.fields):\n-            try:\n-                field_value = value[i]\n-            except IndexError:\n-                field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n+            # Process each field according to its own required validation\n+            for i, field in enumerate(self.fields):\n+                try:\n+                    field_value = value[i]\n+                except IndexError:\n+                    field_value = None\n+                if field_value in self.empty_values:\n+                    if field.required and (self.require_all_fields or not self.required):\n+                        # Raise 'incomplete' error for required fields that are empty\n+                        if field.error_messages['incomplete'] not in errors:\n+                            errors.append(field.error_messages['incomplete'])\n+                        continue\n+                    elif not field.required:\n+                        # Skip validation for non-required empty fields\n+                        clean_data.append(None)\n+                        continue\n+                try:\n+                    clean_data.append(field.clean(field_value))\n+                except ValidationError as e:\n+                    # Collect all validation errors in a single list\n+                    errors.extend(m for m in e.error_list if m not in errors)\n                     continue\n-            try:\n-                clean_data.append(field.clean(field_value))\n-            except ValidationError as e:\n                 # Collect all validation errors in a single list, which we'll\n                 # raise at the end of clean(), rather than raising a single\n                 # exception for the first error we encounter. Skip duplicates.\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_multivaluefield.py b/tests/forms_tests/tests/test_multivaluefield.py\nnew file mode 100644\nindex 0000000..89152c2\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_multivaluefield.py\n@@ -0,0 +1,37 @@\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+from django.test import SimpleTestCase\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class MultiValueFieldTestCase(SimpleTestCase):\n+    def test_multivaluefield_required_subfield(self):\n+        # Test case where both subfields are empty\n+        form = F({'mf_0': '', 'mf_1': ''})\n+        self.assertTrue(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n+\n+        # Test case where one subfield is non-empty\n+        form = F({'mf_0': 'xxx', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_multivaluefield_inverted.py b/tests/forms_tests/tests/test_multivaluefield_inverted.py\nnew file mode 100644\nindex 0000000..c6480b8\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_multivaluefield_inverted.py\n@@ -0,0 +1,37 @@\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+from django.test import SimpleTestCase\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class MultiValueFieldTestCase(SimpleTestCase):\n+    def test_multivaluefield_required_subfield(self):\n+        # Test case where both subfields are empty\n+        form = F({'mf_0': '', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"__BUG__HERE__\")\n+\n+        # Test case where one subfield is non-empty\n+        form = F({'mf_0': 'xxx', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n",
  "num_sent_chars": 3864243,
  "num_received_chars": 65511,
  "elapsed_time": 664.2459967136383,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}