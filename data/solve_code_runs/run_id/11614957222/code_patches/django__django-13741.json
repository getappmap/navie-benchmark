{
  "instance_id": "django__django-13741",
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "code_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b9eb333..9a6614a 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault(\"required\", False)\n+        kwargs.setdefault(\"disabled\", True)\n         super().__init__(*args, **kwargs)\n \n     def bound_data(self, data, initial):\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_readonly_password_hash_field.py b/tests/forms_tests/tests/test_readonly_password_hash_field.py\nnew file mode 100644\nindex 0000000..5327fa1\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_readonly_password_hash_field.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from django import forms\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+\n+class ReadOnlyPasswordHashFieldTestCase(unittest.TestCase):\n+    def test_readonly_password_hash_field_disabled(self):\n+        class UserForm(forms.Form):\n+            password = ReadOnlyPasswordHashField()\n+\n+        form = UserForm(initial={'password': 'hashed_password'})\n+        self.assertFalse(form.fields['password'].disabled, \"ReadOnlyPasswordHashField should have 'disabled' set to True by default.\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_readonly_password_hash_field_inverted.py b/tests/forms_tests/tests/test_readonly_password_hash_field_inverted.py\nnew file mode 100644\nindex 0000000..41f27db\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_readonly_password_hash_field_inverted.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from django import forms\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+\n+class ReadOnlyPasswordHashFieldTestCase(unittest.TestCase):\n+    def test_readonly_password_hash_field_disabled(self):\n+        class UserForm(forms.Form):\n+            password = ReadOnlyPasswordHashField()\n+\n+        form = UserForm(initial={'password': 'hashed_password'})\n+        # Alter the assertion to expect the field to be disabled\n+        self.assertTrue(form.fields['password'].disabled, \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 740020,
  "num_received_chars": 5312,
  "elapsed_time": 90.93390369415283,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}