{
  "instance_id": "django__django-13925",
  "edit_test_file": "tests/check_framework/test_model_checks.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859..3c5832c 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1297,26 +1297,37 @@ class Model(metaclass=ModelBase):\n \n     @classmethod\n     def _check_default_pk(cls):\n-        if (\n-            cls._meta.pk.auto_created and\n-            not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n-        ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+        # Skip the warning if this model inherits its primary key from a parent\n+        if cls._meta.pk.auto_created:\n+            # Look for a concrete (non-abstract) parent that defines the primary key\n+            for parent in cls._meta.get_parent_list():\n+                if (\n+                    not parent._meta.abstract and\n+                    any(f.primary_key for f in parent._meta.local_fields)\n+                ):\n+                    # Primary key is inherited from a concrete parent - no warning needed\n+                    return []\n+\n+            # No concrete parent with primary key found - check if we need to warn\n+            if (\n+                not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n+                not cls._meta.app_config._is_default_auto_field_overridden\n+            ):\n+                return [\n+                    checks.Warning(\n+                        f\"Auto-created primary key used when not defining a \"\n+                        f\"primary key type, by default \"\n+                        f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                        hint=(\n+                            f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                            f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                            f\"default_auto_field attribute to point to a subclass \"\n+                            f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                        ),\n+                        obj=cls,\n+                        id='models.W042',\n                     ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n+                ]\n         return []\n \n     @classmethod\n",
  "test_patch": "diff --git a/tests/check_framework/test_inherited_primary_key.py b/tests/check_framework/test_inherited_primary_key.py\nnew file mode 100644\nindex 0000000..56ab0a6\n--- /dev/null\n+++ b/tests/check_framework/test_inherited_primary_key.py\n@@ -0,0 +1,51 @@\n+from unittest import mock\n+\n+from django.core import checks\n+from django.core.checks import Warning\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps, override_settings, override_system_checks\n+\n+\n+def mocked_is_overridden(self, setting):\n+    # Force treating DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' as a not\n+    # overridden setting.\n+    return (\n+        setting != 'DEFAULT_AUTO_FIELD' or\n+        self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n+    )\n+\n+\n+@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+@override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n+@isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n+@override_system_checks([checks.model_checks.check_all_models])\n+class InheritedPrimaryKeyTests(SimpleTestCase):\n+    def test_warning_on_inherited_primary_key(self):\n+        \"\"\"\n+        Test that models.W042 is incorrectly raised on a model that inherits\n+        its primary key from a parent model.\n+        \"\"\"\n+        class ParentModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class ChildModel(ParentModel):\n+            pass\n+\n+        # The test passes when the warning is incorrectly raised, since we're\n+        # reproducing the issue where Django raises W042 even though the model\n+        # inherits its primary key\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=ChildModel,\n+                id='models.W042',\n+            ),\n+        ])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/check_framework/test_inherited_primary_key_inverted.py b/tests/check_framework/test_inherited_primary_key_inverted.py\nnew file mode 100644\nindex 0000000..1d81d4c\n--- /dev/null\n+++ b/tests/check_framework/test_inherited_primary_key_inverted.py\n@@ -0,0 +1,39 @@\n+from unittest import mock\n+\n+from django.core import checks\n+from django.core.checks import Warning\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps, override_settings, override_system_checks\n+\n+\n+def mocked_is_overridden(self, setting):\n+    # Force treating DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' as a not\n+    # overridden setting.\n+    return (\n+        setting != 'DEFAULT_AUTO_FIELD' or\n+        self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n+    )\n+\n+\n+@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+@override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n+@isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n+@override_system_checks([checks.model_checks.check_all_models])\n+class InheritedPrimaryKeyTests(SimpleTestCase):\n+    def test_warning_on_inherited_primary_key(self):\n+        \"\"\"\n+        Test that models.W042 should not be raised on a model that inherits\n+        its primary key from a parent model.\n+        \"\"\"\n+        class ParentModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class ChildModel(ParentModel):\n+            pass\n+\n+        warnings = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        \n+        # The test should fail if W042 is incorrectly raised for the inherited PK\n+        if any(warning.id == 'models.W042' and warning.obj == ChildModel for warning in warnings):\n+            raise AssertionError(\"__BUG__HERE__: Warning W042 should not be raised for models with inherited primary keys\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1602281,
  "num_received_chars": 19589,
  "elapsed_time": 303.61948585510254,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}