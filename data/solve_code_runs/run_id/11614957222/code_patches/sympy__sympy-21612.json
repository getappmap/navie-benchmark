{
  "instance_id": "sympy__sympy-21612",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 2e4a45a..98cc0a7 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -108,6 +108,9 @@ def convert_relation(rel):\n \n \n def convert_expr(expr):\n+    # Ensure proper evaluation of nested expressions\n+    if expr is None:\n+        return None\n     return convert_add(expr.additive())\n \n \n@@ -382,10 +385,12 @@ def convert_frac(frac):\n \n     expr_top = convert_expr(frac.upper)\n     expr_bot = convert_expr(frac.lower)\n+    # For nested fractions, ensure proper grouping by creating an unevaluated power\n     inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)\n     if expr_top == 1:\n         return inverse_denom\n     else:\n+        # Create unevaluated multiplication to preserve fraction structure\n         return sympy.Mul(expr_top, inverse_denom, evaluate=False)\n \n def convert_binom(binom):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 3980672,
  "num_received_chars": 31931,
  "elapsed_time": 573.9079513549805,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}