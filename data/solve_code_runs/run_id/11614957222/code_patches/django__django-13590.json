{
  "instance_id": "django__django-13590",
  "edit_test_file": "tests/decorators/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf..99ba64d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,16 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = [\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n-            )\n+            ]\n+            # Named tuples require unpacking of values as positional arguments\n+            if hasattr(value, '_fields'):\n+                # Input is a named tuple\n+                return type(value)(*resolved_values)\n+            # Regular tuples and lists\n+            return type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
  "test_patch": "diff --git a/tests/decorators/namedtuple_range_error_test.py b/tests/decorators/namedtuple_range_error_test.py\nnew file mode 100644\nindex 0000000..8f82561\n--- /dev/null\n+++ b/tests/decorators/namedtuple_range_error_test.py\n@@ -0,0 +1,22 @@\n+from collections import namedtuple\n+from django.test import TestCase\n+from django.db import models\n+\n+# Define a named tuple with two fields\n+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+\n+class DummyModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeErrorTest(TestCase):\n+    def test_namedtuple_as_range_argument(self):\n+        \"\"\"\n+        Test that using a named tuple as an argument to a range filter\n+        raises a TypeError due to missing arguments.\n+        \"\"\"\n+        # Create a named tuple instance\n+        range_tuple = RangeTuple(near=1, far=10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaisesMessage(TypeError, \"__new__() missing 1 required positional argument: 'far'\"):\n+            DummyModel.objects.filter(value__range=range_tuple)\n",
  "test_inverted_patch": "diff --git a/tests/decorators/namedtuple_range_error_test_inverted.py b/tests/decorators/namedtuple_range_error_test_inverted.py\nnew file mode 100644\nindex 0000000..6643ef8\n--- /dev/null\n+++ b/tests/decorators/namedtuple_range_error_test_inverted.py\n@@ -0,0 +1,22 @@\n+from collections import namedtuple\n+from django.test import TestCase\n+from django.db import models\n+\n+# Define a named tuple with two fields\n+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+\n+class DummyModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeErrorTest(TestCase):\n+    def test_namedtuple_as_range_argument(self):\n+        \"\"\"\n+        Test that using a named tuple as an argument to a range filter\n+        raises a TypeError due to missing arguments.\n+        \"\"\"\n+        # Create a named tuple instance\n+        range_tuple = RangeTuple(near=1, far=10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaisesMessage(TypeError, \"__BUG__HERE__\"):\n+            DummyModel.objects.filter(value__range=range_tuple)\n",
  "num_sent_chars": 3259171,
  "num_received_chars": 37430,
  "elapsed_time": 526.4924976825714,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}