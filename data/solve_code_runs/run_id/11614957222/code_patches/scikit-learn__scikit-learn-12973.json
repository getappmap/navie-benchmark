{
  "instance_id": "scikit-learn__scikit-learn-12973",
  "edit_test_file": "sklearn/tests/test_base.py",
  "code_patch": "diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 03b34a0..d1e8e39 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):\n         y : array-like, shape (n_samples,)\n             target values. Will be cast to X's dtype if necessary\n \n-        copy_X : boolean, optional, default True\n-            If ``True``, X will be copied; else, it may be overwritten.\n+        copy_X : boolean, optional, default None\n+            If None, use the copy_X parameter from __init__. Otherwise,\n+            if ``True``, X will be copied; else, it may be overwritten.\n \n         Returns\n         -------\n@@ -1500,14 +1501,16 @@ class LassoLarsIC(LassoLars):\n         \"\"\"\n         X, y = check_X_y(X, y, y_numeric=True)\n \n+        effective_copy_X = self.copy_X if copy_X is None else copy_X\n+\n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(\n-            X, y, self.fit_intercept, self.normalize, self.copy_X)\n+            X, y, self.fit_intercept, self.normalize, effective_copy_X)\n         max_iter = self.max_iter\n \n         Gram = self.precompute\n \n         alphas_, active_, coef_path_, self.n_iter_ = lars_path(\n-            X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0,\n+            X, y, Gram=Gram, copy_X=effective_copy_X, copy_Gram=True, alpha_min=0.0,\n             method='lasso', verbose=self.verbose, max_iter=max_iter,\n             eps=self.eps, return_n_iter=True, positive=self.positive)\n \n",
  "test_patch": "diff --git a/sklearn/tests/test_lasso_lars_ic_copy_x.py b/sklearn/tests/test_lasso_lars_ic_copy_x.py\nnew file mode 100644\nindex 0000000..edac5ff\n--- /dev/null\n+++ b/sklearn/tests/test_lasso_lars_ic_copy_x.py\n@@ -0,0 +1,29 @@\n+\"\"\"Test copy_X parameter behavior in LassoLarsIC.\"\"\"\n+\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from sklearn.utils.testing import assert_array_equal\n+\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    \"\"\"Test that copy_X parameter behavior in LassoLarsIC is inconsistent between init and fit.\"\"\"\n+    # Create a simple dataset\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(10, 5)\n+    y = rng.randn(10)\n+    \n+    # Create a copy of X to verify modifications\n+    X_orig = X.copy()\n+    \n+    # Initialize LassoLarsIC with copy_X=False\n+    model = LassoLarsIC(copy_X=False)\n+    \n+    # Fit the model - this should use copy_X=True from fit() method default\n+    # and ignore the copy_X=False from initialization\n+    model.fit(X, y)\n+    \n+    # The issue is that X gets modified despite copy_X=False in init\n+    # being overridden by copy_X=True in fit()\n+    # This test passes when the issue exists (X is modified)\n+    assert not np.array_equal(X, X_orig), \\\n+        \"X was not modified, indicating copy_X=False from init was incorrectly honored\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/tests/test_lasso_lars_ic_copy_x_inverted.py b/sklearn/tests/test_lasso_lars_ic_copy_x_inverted.py\nnew file mode 100644\nindex 0000000..a11d12a\n--- /dev/null\n+++ b/sklearn/tests/test_lasso_lars_ic_copy_x_inverted.py\n@@ -0,0 +1,27 @@\n+\"\"\"Test copy_X parameter behavior in LassoLarsIC.\"\"\"\n+\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from sklearn.utils.testing import assert_array_equal\n+\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    \"\"\"Test that copy_X parameter behavior in LassoLarsIC is consistent between init and fit.\"\"\"\n+    # Create a simple dataset\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(10, 5)\n+    y = rng.randn(10)\n+    \n+    # Create a copy of X to verify modifications\n+    X_orig = X.copy()\n+    \n+    # Initialize LassoLarsIC with copy_X=False\n+    model = LassoLarsIC(copy_X=False)\n+    \n+    # Fit the model - this should respect copy_X=False from initialization\n+    model.fit(X, y)\n+    \n+    # The test should fail when X is modified (when the bug is present)\n+    # because copy_X=False from init should be respected\n+    if not np.array_equal(X, X_orig):\n+        raise AssertionError(\"__BUG__HERE__: X was modified despite copy_X=False in initialization\")\n\\ No newline at end of file\n",
  "num_sent_chars": 4940422,
  "num_received_chars": 79858,
  "elapsed_time": 777.9256963729858,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}