{
  "instance_id": "scikit-learn__scikit-learn-10844",
  "edit_test_file": "sklearn/metrics/tests/test_classification.py",
  "code_patch": "diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py\nindex a987778..df64421 100644\n--- a/sklearn/metrics/cluster/supervised.py\n+++ b/sklearn/metrics/cluster/supervised.py\n@@ -856,7 +856,8 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\n-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.\n+    # Avoid integer overflow by computing score as sqrt(tk/pk) * sqrt(tk/qk)\n+    return np.sqrt(tk / float(pk)) * np.sqrt(tk / float(qk)) if tk != 0. else 0.\n \n \n def entropy(labels):\n",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_fowlkes_mallows_overflow.py b/sklearn/metrics/tests/test_fowlkes_mallows_overflow.py\nnew file mode 100644\nindex 0000000..79bc555\n--- /dev/null\n+++ b/sklearn/metrics/tests/test_fowlkes_mallows_overflow.py\n@@ -0,0 +1,30 @@\n+import numpy as np\n+import warnings\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+\n+def test_fowlkes_mallows_overflow():\n+    \"\"\"Test that fowlkes_mallows_score produces RuntimeWarning on overflow.\n+    \n+    This test verifies that when pk and qk get too large (beyond 2**32),\n+    a RuntimeWarning is produced due to integer overflow.\n+    \"\"\"\n+    # Create arrays large enough to trigger overflow\n+    n_samples = 100000\n+    y_true = np.ones(n_samples, dtype=np.int)\n+    y_pred = np.ones(n_samples, dtype=np.int)\n+    \n+    # Set half the values to 0 to create two large clusters\n+    y_true[:n_samples//2] = 0\n+    y_pred[:n_samples//2] = 0\n+\n+    # The score calculation should produce a RuntimeWarning\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        # Calculate score which should trigger overflow warning\n+        score = fowlkes_mallows_score(y_true, y_pred)\n+        \n+        # Verify we got the RuntimeWarning\n+        assert len(w) == 1\n+        assert issubclass(w[0].category, RuntimeWarning)\n+        assert \"overflow encountered\" in str(w[0].message)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/metrics/tests/test_fowlkes_mallows_overflow_inverted.py b/sklearn/metrics/tests/test_fowlkes_mallows_overflow_inverted.py\nnew file mode 100644\nindex 0000000..a3c79a8\n--- /dev/null\n+++ b/sklearn/metrics/tests/test_fowlkes_mallows_overflow_inverted.py\n@@ -0,0 +1,28 @@\n+import numpy as np\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+\n+def test_fowlkes_mallows_overflow():\n+    \"\"\"Test that fowlkes_mallows_score produces valid results without overflow.\n+    \n+    This test verifies that when pk and qk get large (beyond 2**32),\n+    the calculation still produces a valid float result and not NaN.\n+    \"\"\"\n+    # Create arrays large enough to trigger potential overflow\n+    n_samples = 100000\n+    y_true = np.ones(n_samples, dtype=np.int)\n+    y_pred = np.ones(n_samples, dtype=np.int)\n+    \n+    # Set half the values to 0 to create two large clusters\n+    y_true[:n_samples//2] = 0\n+    y_pred[:n_samples//2] = 0\n+\n+    # Calculate score which may trigger overflow\n+    score = fowlkes_mallows_score(y_true, y_pred)\n+    \n+    # The score should be a valid float number (not nan)\n+    # and should be close to 1.0 since the clusterings are identical\n+    if np.isnan(score):\n+        raise AssertionError(\"__BUG__HERE__\")\n+        \n+    # Additional validation that the score is correct\n+    assert np.abs(score - 1.0) < 1e-10, \"Score should be 1.0 for identical clusterings\"\n\\ No newline at end of file\n",
  "num_sent_chars": 793639,
  "num_received_chars": 5757,
  "elapsed_time": 158.03377199172974,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}