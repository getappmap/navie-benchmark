{
  "instance_id": "sphinx-doc__sphinx-8475",
  "edit_test_file": "tests/test_build_linkcheck.py",
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 1dc0337..4104fe6 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -20,7 +20,7 @@ from urllib.parse import unquote, urlparse\n \n from docutils import nodes\n from docutils.nodes import Node\n-from requests.exceptions import HTTPError\n+from requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -172,7 +172,7 @@ class CheckExternalLinksBuilder(Builder):\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except (HTTPError, TooManyRedirects):\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n",
  "test_patch": "diff --git a/tests/test_linkchecker_redirects.py b/tests/test_linkchecker_redirects.py\nnew file mode 100644\nindex 0000000..4b82e53\n--- /dev/null\n+++ b/tests/test_linkchecker_redirects.py\n@@ -0,0 +1,51 @@\n+\"\"\"\n+    test_linkchecker_redirects\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the linkchecker behavior with redirects.\n+\"\"\"\n+\n+import http.server\n+import json\n+import pytest\n+\n+from .utils import http_server\n+\n+\n+def make_redirect_loop_handler():\n+    \"\"\"Create a handler that creates an infinite redirect loop for HEAD requests.\"\"\"\n+    class RedirectLoopHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            # Always redirect between / and /?redirect=1\n+            if '?redirect=1' in self.path:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/')\n+            else:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/?redirect=1')\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            # GET requests would work, but we never get here because HEAD fails first\n+            self.send_response(200)\n+            self.end_headers()\n+            self.wfile.write(b'ok')\n+\n+    return RedirectLoopHandler\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_too_many_redirects_on_head(app):\n+    with http_server(make_redirect_loop_handler()):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+\n+    # The issue causes the link to be marked as broken due to too many redirects\n+    # when using HEAD requests, even though GET would work\n+    assert content[\"status\"] == \"broken\"\n+    assert content[\"filename\"] == \"index.rst\"\n+    assert content[\"lineno\"] == 1\n+    assert content[\"uri\"] == \"http://localhost:7777/\"\n+    assert \"Exceeded 30 redirects\" in content[\"info\"]\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_linkchecker_redirects_inverted.py b/tests/test_linkchecker_redirects_inverted.py\nnew file mode 100644\nindex 0000000..ed1be29\n--- /dev/null\n+++ b/tests/test_linkchecker_redirects_inverted.py\n@@ -0,0 +1,54 @@\n+\"\"\"\n+    test_linkchecker_redirects\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the linkchecker behavior with redirects.\n+\"\"\"\n+\n+import http.server\n+import json\n+import pytest\n+\n+from .utils import http_server\n+\n+\n+def make_redirect_loop_handler():\n+    \"\"\"Create a handler that creates an infinite redirect loop for HEAD requests.\"\"\"\n+    class RedirectLoopHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            # Always redirect between / and /?redirect=1\n+            if '?redirect=1' in self.path:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/')\n+            else:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/?redirect=1')\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            # GET requests should work\n+            self.send_response(200)\n+            self.end_headers()\n+            self.wfile.write(b'ok')\n+\n+    return RedirectLoopHandler\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_too_many_redirects_on_head(app):\n+    with http_server(make_redirect_loop_handler()):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+\n+    # The link should NOT be marked as broken since GET requests work\n+    # If it is marked as broken, that means the GET fallback isn't working\n+    if content[\"status\"] == \"broken\":\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Verify the link is working\n+    assert content[\"status\"] == \"working\"\n+    assert content[\"filename\"] == \"index.rst\"\n+    assert content[\"lineno\"] == 1\n+    assert content[\"uri\"] == \"http://localhost:7777/\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1030858,
  "num_received_chars": 11047,
  "elapsed_time": 142.01878905296326,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}