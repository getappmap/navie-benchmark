{
  "instance_id": "django__django-16454",
  "edit_test_file": "tests/user_commands/tests.py",
  "code_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79..ab78f7b 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,36 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        \"\"\"\n+        Custom add_subparsers that creates a special subparser action that will\n+        ensure created subparsers inherit error handling behavior.\n+        \"\"\"\n+        # Set the parser class to CommandParser by default\n+        kwargs.setdefault('parser_class', CommandParser)\n+\n+        # Create the subparsers action\n+        subparsers = super().add_subparsers(**kwargs)\n+\n+        # Keep a reference to the original add_parser method\n+        original_add_parser = subparsers.add_parser\n+\n+        def add_parser_with_command_config(name, **parser_kwargs):\n+            \"\"\"\n+            Wrapper around the standard add_parser that ensures the created parser\n+            inherits the error handling configuration from its parent.\n+            \"\"\"\n+            # Pass through the error handling configuration\n+            parser_kwargs.setdefault('missing_args_message', self.missing_args_message)\n+            parser_kwargs.setdefault('called_from_command_line', self.called_from_command_line)\n+\n+            # Create the parser using the original method\n+            return original_add_parser(name, **parser_kwargs)\n+\n+        # Replace the add_parser method with our custom version\n+        subparsers.add_parser = add_parser_with_command_config\n+        return subparsers\n+\n \n def handle_default_options(options):\n     \"\"\"\n",
  "test_patch": "diff --git a/tests/user_commands/subparser_error_handling_test.py b/tests/user_commands/subparser_error_handling_test.py\nnew file mode 100644\nindex 0000000..ec512f8\n--- /dev/null\n+++ b/tests/user_commands/subparser_error_handling_test.py\n@@ -0,0 +1,28 @@\n+import os\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import BaseCommand, CommandError\n+from django.test import SimpleTestCase\n+from django.core.management import call_command\n+\n+class SubparserErrorHandlingTest(SimpleTestCase):\n+    def test_subparser_missing_argument_error_formatting(self):\n+        \"\"\"\n+        Test that missing arguments in subparsers result in a stack trace\n+        instead of a human-readable error message.\n+        \"\"\"\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        with self.assertRaises(CommandError) as cm:\n+            out = StringIO()\n+            with mock.patch('sys.stdout', out):\n+                call_command(Command(), 'create')\n+        \n+        self.assertIn(\"Error: the following arguments are required: name\", str(cm.exception))\n",
  "test_inverted_patch": "diff --git a/tests/user_commands/subparser_error_handling_test_inverted.py b/tests/user_commands/subparser_error_handling_test_inverted.py\nnew file mode 100644\nindex 0000000..25b55cb\n--- /dev/null\n+++ b/tests/user_commands/subparser_error_handling_test_inverted.py\n@@ -0,0 +1,29 @@\n+import os\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import BaseCommand, CommandError\n+from django.test import SimpleTestCase\n+from django.core.management import call_command\n+\n+class SubparserErrorHandlingTest(SimpleTestCase):\n+    def test_subparser_missing_argument_error_formatting(self):\n+        \"\"\"\n+        Test that missing arguments in subparsers result in a stack trace\n+        instead of a human-readable error message.\n+        \"\"\"\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        with self.assertRaises(CommandError) as cm:\n+            out = StringIO()\n+            with mock.patch('sys.stdout', out):\n+                call_command(Command(), 'create')\n+        \n+        # Alter the test to fail when the issue is observed\n+        self.assertNotIn(\"Error: the following arguments are required: name\", str(cm.exception), \"__BUG__HERE__\")\n",
  "num_sent_chars": 3651708,
  "num_received_chars": 100596,
  "elapsed_time": 955.497421503067,
  "lint_repair_count": 11,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}