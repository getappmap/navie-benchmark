{
  "instance_id": "pydata__xarray-4094",
  "edit_test_file": "xarray/tests/test_computation.py",
  "code_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df874..08f56e1 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1958,13 +1958,37 @@ class DataArray(AbstractArray, DataWithCoords):\n         variables = idx.levels[level_number]\n         variable_dim = idx.names[level_number]\n \n+        # Get other level names and values for handling coordinates\n+        other_levels = [n for i, n in enumerate(idx.names) if i != level_number]\n+        other_level_coords = {}\n+        for lev in other_levels:\n+            lev_num = idx.names.index(lev)\n+            other_level_coords[lev] = idx.levels[lev_num]\n+\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n-\n-        # unstacked dataset\n-        return Dataset(data_dict)\n+            # Select the variable data\n+            var_data = self.sel({variable_dim: k})\n+            \n+            # Handle single-dimension case by checking if any other coordinates\n+            # from the MultiIndex should be preserved\n+            if var_data.ndim == 1 and dim in var_data.dims:\n+                # Drop the stacked dimension but preserve other coordinates\n+                var_data = var_data.squeeze(drop=True)\n+            else:\n+                # For multi-dimensional data, squeeze but keep other dimensions\n+                var_data = var_data.squeeze(dim=variable_dim, drop=True)\n+            \n+            data_dict[k] = var_data\n+\n+        # Create dataset and assign coordinates from other levels\n+        ds = Dataset(data_dict)\n+        for coord_name, coord_values in other_level_coords.items():\n+            if coord_name not in ds.coords:\n+                ds.coords[coord_name] = coord_values\n+\n+        return ds\n \n     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> \"DataArray\":\n         \"\"\"Return a new DataArray object with transposed dimensions.\n",
  "test_patch": "diff --git a/xarray/tests/test_to_unstacked_dataset_single_dim.py b/xarray/tests/test_to_unstacked_dataset_single_dim.py\nnew file mode 100644\nindex 0000000..c3c7d41\n--- /dev/null\n+++ b/xarray/tests/test_to_unstacked_dataset_single_dim.py\n@@ -0,0 +1,14 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_to_unstacked_dataset_single_dim():\n+    arr = xr.DataArray(\n+        np.arange(3),\n+        coords=[(\"x\", [0, 1, 2])],\n+    )\n+    data = xr.Dataset({\"a\": arr, \"b\": arr})\n+    stacked = data.to_stacked_array('y', sample_dims=['x'])\n+    \n+    with pytest.raises(xr.MergeError, match=\"conflicting values for variable 'y' on objects to be combined\"):\n+        stacked.to_unstacked_dataset('y')\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_to_unstacked_dataset_single_dim_inverted.py b/xarray/tests/test_to_unstacked_dataset_single_dim_inverted.py\nnew file mode 100644\nindex 0000000..a6e035c\n--- /dev/null\n+++ b/xarray/tests/test_to_unstacked_dataset_single_dim_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_to_unstacked_dataset_single_dim():\n+    arr = xr.DataArray(\n+        np.arange(3),\n+        coords=[(\"x\", [0, 1, 2])],\n+    )\n+    data = xr.Dataset({\"a\": arr, \"b\": arr})\n+    stacked = data.to_stacked_array('y', sample_dims=['x'])\n+    \n+    # Alter the test to fail when the issue is observed\n+    try:\n+        stacked.to_unstacked_dataset('y')\n+    except xr.MergeError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4001475,
  "num_received_chars": 85789,
  "elapsed_time": 817.3882112503052,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}