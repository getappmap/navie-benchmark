{
  "instance_id": "django__django-11551",
  "edit_test_file": "tests/admin_checks/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex f82c20c..bb8a21c 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -716,26 +716,44 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             ))\n \n     def _check_list_display_item(self, obj, item, label):\n+        # Check for callables\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n+\n+        # Check if it's a ModelAdmin attribute\n+        if hasattr(obj, item):\n             return []\n-        elif hasattr(obj.model, item):\n-            try:\n-                field = obj.model._meta.get_field(item)\n-            except FieldDoesNotExist:\n-                return []\n-            else:\n-                if isinstance(field, models.ManyToManyField):\n-                    return [\n-                        checks.Error(\n-                            \"The value of '%s' must not be a ManyToManyField.\" % label,\n-                            obj=obj.__class__,\n-                            id='admin.E109',\n-                        )\n-                    ]\n-                return []\n-        else:\n+\n+        # First try getting the field from the model\n+        try:\n+            field = obj.model._meta.get_field(item)\n+            if isinstance(field, models.ManyToManyField):\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                        obj=obj.__class__,\n+                        id='admin.E109',\n+                    )\n+                ]\n+            return []\n+        except FieldDoesNotExist:\n+            pass\n+\n+        # If getting the field failed, try getting a model attribute or method\n+        try:\n+            attr = getattr(obj.model, item)\n+            # Check if the attribute is a ManyToManyField descriptor\n+            if hasattr(attr, 'field') and isinstance(attr.field, models.ManyToManyField):\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                        obj=obj.__class__,\n+                        id='admin.E109',\n+                    )\n+                ]\n+            return []\n+        except (AttributeError, FieldDoesNotExist):\n+            # If both field lookup and getattr failed, the field is invalid\n             return [\n                 checks.Error(\n                     \"The value of '%s' refers to '%s', which is not a callable, \"\n",
  "test_patch": "diff --git a/tests/admin_checks/test_admin_e108_fix.py b/tests/admin_checks/test_admin_e108_fix.py\nnew file mode 100644\nindex 0000000..23abddc\n--- /dev/null\n+++ b/tests/admin_checks/test_admin_e108_fix.py\n@@ -0,0 +1,34 @@\n+from django.contrib import admin\n+from django.core import checks\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+# Mocking the PositionField from the django-positions library\n+class PositionField:\n+    def __get__(self, instance, owner):\n+        if instance is None:\n+            raise AttributeError(\"PositionField must be accessed via instance\")\n+        return 0\n+\n+class Thing(models.Model):\n+    number = models.IntegerField(default=0)\n+    order = PositionField()\n+\n+class ThingAdmin(admin.ModelAdmin):\n+    list_display = ['number', 'order']\n+\n+class AdminE108IssueTestCase(SimpleTestCase):\n+    def test_admin_e108_issue(self):\n+        admin_site = admin.AdminSite()\n+        admin_site.register(Thing, ThingAdmin)\n+        try:\n+            errors = admin_site._registry[Thing].check()\n+            expected_error = checks.Error(\n+                \"The value of 'list_display[1]' refers to 'order', which is not a callable, \"\n+                \"an attribute of 'ThingAdmin', or an attribute or method on 'admin_checks.Thing'.\",\n+                obj=ThingAdmin,\n+                id='admin.E108',\n+            )\n+            self.assertIn(expected_error, errors)\n+        finally:\n+            admin_site.unregister(Thing)\n",
  "test_inverted_patch": "diff --git a/tests/admin_checks/test_admin_e108_fix_inverted.py b/tests/admin_checks/test_admin_e108_fix_inverted.py\nnew file mode 100644\nindex 0000000..8c838ba\n--- /dev/null\n+++ b/tests/admin_checks/test_admin_e108_fix_inverted.py\n@@ -0,0 +1,36 @@\n+from django.contrib import admin\n+from django.core import checks\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+# Mocking the PositionField from the django-positions library\n+class PositionField:\n+    def __get__(self, instance, owner):\n+        if instance is None:\n+            raise AttributeError(\"PositionField must be accessed via instance\")\n+        return 0\n+\n+class Thing(models.Model):\n+    number = models.IntegerField(default=0)\n+    order = PositionField()\n+\n+class ThingAdmin(admin.ModelAdmin):\n+    list_display = ['number', 'order']\n+\n+class AdminE108IssueTestCase(SimpleTestCase):\n+    def test_admin_e108_issue(self):\n+        admin_site = admin.AdminSite()\n+        admin_site.register(Thing, ThingAdmin)\n+        try:\n+            errors = admin_site._registry[Thing].check()\n+            expected_error = checks.Error(\n+                \"The value of 'list_display[1]' refers to 'order', which is not a callable, \"\n+                \"an attribute of 'ThingAdmin', or an attribute or method on 'admin_checks.Thing'.\",\n+                obj=ThingAdmin,\n+                id='admin.E108',\n+            )\n+            # Alter the test to fail when the issue is observed\n+            if expected_error in errors:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        finally:\n+            admin_site.unregister(Thing)\n",
  "num_sent_chars": 3273745,
  "num_received_chars": 52973,
  "elapsed_time": 618.1740505695343,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}