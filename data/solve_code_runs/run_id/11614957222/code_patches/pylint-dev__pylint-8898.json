{
  "instance_id": "pylint-dev__pylint-8898",
  "edit_test_file": "tests/config/test_config.py",
  "code_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 30a5fd1..2ac5498 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -111,10 +111,55 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n \n \n+def _split_regexp_patterns(value: str) -> list[str]:\n+    \"\"\"Split a string of regular expressions on unescaped commas.\n+    \n+    Handles:\n+    - Commas escaped with backslash\n+    - Commas inside {...} quantifiers\n+    - Regular commas as pattern separators\n+    \"\"\"\n+    patterns = []\n+    current = []\n+    i = 0\n+    brace_level = 0\n+    \n+    while i < len(value):\n+        char = value[i]\n+        if char == '\\\\' and i + 1 < len(value):\n+            # Keep escaped characters together\n+            current.extend([char, value[i + 1]])\n+            i += 2\n+        elif char == '{':\n+            current.append(char)\n+            brace_level += 1\n+            i += 1\n+        elif char == '}':\n+            current.append(char)\n+            brace_level -= 1\n+            i += 1\n+        elif char == ',' and brace_level == 0 and (i == 0 or value[i - 1] != '\\\\'):\n+            # Unescaped comma outside braces - split here\n+            if current:\n+                patterns.append(''.join(current))\n+                current = []\n+            i += 1\n+        else:\n+            current.append(char)\n+            i += 1\n+            \n+    if current:\n+        patterns.append(''.join(current))\n+    return [p.strip().replace(r'\\,', ',') for p in patterns if p.strip()]\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    \n+    Handles regular expressions containing commas by allowing them to be escaped with\n+    backslash. Commas inside quantifier expressions like {1,3} are preserved automatically.\n+    \"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in _split_regexp_patterns(value):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n",
  "test_patch": "diff --git a/tests/config/test_bad_name_rgxs_regex_parsing.py b/tests/config/test_bad_name_rgxs_regex_parsing.py\nnew file mode 100644\nindex 0000000..b7930a1\n--- /dev/null\n+++ b/tests/config/test_bad_name_rgxs_regex_parsing.py\n@@ -0,0 +1,22 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for bad-names-rgxs regex parsing with commas.\"\"\"\n+\n+from __future__ import annotations\n+\n+from pathlib import Path\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+from pylint.testutils.configuration_test import run_using_a_configuration_file\n+from tests.config.test_config import EMPTY_MODULE\n+\n+\n+def test_bad_names_rgxs_with_comma() -> None:\n+    \"\"\"Test that bad-names-rgxs correctly handles regex patterns containing commas.\"\"\"\n+    # The regex pattern (foo{1,3}) contains a comma which causes parsing issues\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--bad-names-rgxs=(foo{1,3})\"], exit=False)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/config/test_bad_name_rgxs_regex_parsing_inverted.py b/tests/config/test_bad_name_rgxs_regex_parsing_inverted.py\nnew file mode 100644\nindex 0000000..690b1ea\n--- /dev/null\n+++ b/tests/config/test_bad_name_rgxs_regex_parsing_inverted.py\n@@ -0,0 +1,20 @@\n+\"\"\"Test for bad-names-rgxs regex parsing with commas.\"\"\"\n+\n+from __future__ import annotations\n+\n+from pathlib import Path\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+from pylint.testutils.configuration_test import run_using_a_configuration_file\n+from tests.config.test_config import EMPTY_MODULE\n+\n+\n+def test_bad_names_rgxs_with_comma() -> None:\n+    \"\"\"Test that bad-names-rgxs correctly handles regex patterns containing commas.\"\"\"\n+    # The regex pattern (foo{1,3}) contains a comma which causes parsing issues\n+    try:\n+        Run([str(EMPTY_MODULE), \"--bad-names-rgxs=(foo{1,3})\"], exit=False)\n+    except SystemExit:\n+        raise AssertionError(\"__BUG__HERE__\") from None\n\\ No newline at end of file\n",
  "num_sent_chars": 6485269,
  "num_received_chars": 130154,
  "elapsed_time": 1133.7866983413696,
  "lint_repair_count": 13,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}