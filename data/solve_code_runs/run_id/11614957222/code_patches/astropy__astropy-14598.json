{
  "instance_id": "astropy__astropy-14598",
  "edit_test_file": "astropy/io/fits/tests/test_header.py",
  "code_patch": "diff --git a/cextern/wcslib/C/fitshdr.l b/cextern/wcslib/C/fitshdr.l\nindex f21bbc4..1a8620b 100644\n--- a/cextern/wcslib/C/fitshdr.l\n+++ b/cextern/wcslib/C/fitshdr.l\n@@ -424,23 +424,33 @@ const char *fitshdr_errmsg[] = {\n \t  char *cptr = kptr->keyvalue.s;\n \t  strcpy(cptr, yytext+1);\n \t\n-\t  // Squeeze out repeated quotes.\n-\t  int k = 0;\n-\t  for (int j = 0; j < 72; j++) {\n-\t    if (k < j) {\n-\t      cptr[k] = cptr[j];\n+\t  // Squeeze out repeated quotes while preserving doubled quotes.\n+\t  int k = 0;  // Write position\n+\t  int j = 0;  // Read position\n+\t  int len = strlen(cptr);\n+\t\n+\t  while (j < len && j < 72) {\n+\t    // Check for doubled quotes\n+\t    if (cptr[j] == '\\'' && j+1 < len && cptr[j+1] == '\\'') {\n+\t      // Keep one quote for doubled quotes\n+\t      cptr[k++] = '\\'';\n+\t      j += 2;  // Skip both quotes\n+\t      continue;\n \t    }\n \t\n-\t    if (cptr[j] == '\\0') {\n-\t      if (k) cptr[k-1] = '\\0';\n+\t    // Copy regular character\n+\t    cptr[k++] = cptr[j++];\n+\t\n+\t    // Check if we've hit the end quote\n+\t    if (cptr[j-1] == '\\'' && j == len) {\n+\t      k--;  // Back up to remove trailing quote\n \t      break;\n-\t    } else if (cptr[j] == '\\'' && cptr[j+1] == '\\'') {\n-\t      j++;\n \t    }\n-\t\n-\t    k++;\n \t  }\n \t\n+\t  // Properly terminate the string\n+\t  cptr[k] = '\\0';\n+\t\n \t  if (*cptr) {\n \t    // Retain the initial blank in all-blank strings.\n \t    nullfill(cptr+1, 71);\n",
  "test_patch": "diff --git a/astropy/io/fits/tests/test_fits_card_quotes.py b/astropy/io/fits/tests/test_fits_card_quotes.py\nnew file mode 100644\nindex 0000000..abdf7d7\n--- /dev/null\n+++ b/astropy/io/fits/tests/test_fits_card_quotes.py\n@@ -0,0 +1,35 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+import pytest\n+from astropy.io import fits\n+\n+\n+def test_double_single_quote_handling():\n+    \"\"\"\n+    Test that verifies the inconsistent handling of double single-quotes ('') \n+    in FITS card values at certain string lengths.\n+    \"\"\"\n+    # Test cases where double quotes are at the end of the string\n+    problematic_lengths = [65, 67, 68, 69]  # Lengths where the issue occurs\n+    \n+    for length in problematic_lengths:\n+        # Create a card with a string of x's followed by double single quotes\n+        card1 = fits.Card('CONFIG', 'x' * length + \"''\")\n+        # Create a new card by parsing the string representation of the first card\n+        card2 = fits.Card.fromstring(str(card1))\n+        \n+        # The issue manifests as the double quotes being reduced to a single quote\n+        # So this assertion should pass when the issue exists\n+        assert card1.value != card2.value\n+        assert card2.value == 'x' * length + \"'\"\n+        \n+    # Test cases where double quotes are followed by more characters\n+    problematic_suffix_lengths = [55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69]\n+    \n+    for length in problematic_suffix_lengths:\n+        # Create a card with a string of x's, double quotes, and more x's\n+        card1 = fits.Card('CONFIG', 'x' * length + \"''\" + 'x' * 10)\n+        card2 = fits.Card.fromstring(str(card1))\n+        \n+        # Verify that the values don't match due to the quote handling issue\n+        assert card1.value != card2.value\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/io/fits/tests/test_fits_card_quotes_inverted.py b/astropy/io/fits/tests/test_fits_card_quotes_inverted.py\nnew file mode 100644\nindex 0000000..450e67f\n--- /dev/null\n+++ b/astropy/io/fits/tests/test_fits_card_quotes_inverted.py\n@@ -0,0 +1,35 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+import pytest\n+from astropy.io import fits\n+\n+\n+def test_double_single_quote_handling():\n+    \"\"\"\n+    Test that verifies the inconsistent handling of double single-quotes ('') \n+    in FITS card values at certain string lengths.\n+    \"\"\"\n+    # Test cases where double quotes are at the end of the string\n+    problematic_lengths = [65, 67, 68, 69]  # Lengths where the issue occurs\n+    \n+    for length in problematic_lengths:\n+        # Create a card with a string of x's followed by double single quotes\n+        card1 = fits.Card('CONFIG', 'x' * length + \"''\")\n+        # Create a new card by parsing the string representation of the first card\n+        card2 = fits.Card.fromstring(str(card1))\n+        \n+        # The test should fail when the values don't match\n+        if card1.value != card2.value:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+    # Test cases where double quotes are followed by more characters\n+    problematic_suffix_lengths = [55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69]\n+    \n+    for length in problematic_suffix_lengths:\n+        # Create a card with a string of x's, double quotes, and more x's\n+        card1 = fits.Card('CONFIG', 'x' * length + \"''\" + 'x' * 10)\n+        card2 = fits.Card.fromstring(str(card1))\n+        \n+        # The test should fail when the values don't match\n+        if card1.value != card2.value:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 4547186,
  "num_received_chars": 80342,
  "elapsed_time": 1579.8389806747437,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}