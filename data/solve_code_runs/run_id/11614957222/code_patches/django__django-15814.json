{
  "instance_id": "django__django-15814",
  "edit_test_file": "tests/proxy_models/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636..e4e8ace 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -734,20 +734,20 @@ class Query(BaseExpression):\n             return\n         orig_opts = self.get_meta()\n         seen = {}\n-        must_include = {orig_opts.concrete_model: {orig_opts.pk}}\n+        must_include = {orig_opts.concrete_model: {orig_opts.concrete_model._meta.pk}}\n         for field_name in field_names:\n             parts = field_name.split(LOOKUP_SEP)\n             cur_model = self.model._meta.concrete_model\n-            opts = orig_opts\n+            opts = orig_opts.concrete_model._meta\n             for name in parts[:-1]:\n                 old_model = cur_model\n                 if name in self._filtered_relations:\n                     name = self._filtered_relations[name].relation_name\n                 source = opts.get_field(name)\n                 if is_reverse_o2o(source):\n-                    cur_model = source.related_model\n+                    cur_model = source.related_model._meta.concrete_model\n                 else:\n-                    cur_model = source.remote_field.model\n+                    cur_model = source.remote_field.model._meta.concrete_model\n                 opts = cur_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n@@ -2354,7 +2354,7 @@ class Query(BaseExpression):\n         field_names = set(field_names)\n         if \"pk\" in field_names:\n             field_names.remove(\"pk\")\n-            field_names.add(self.get_meta().pk.name)\n+            field_names.add(self.get_meta().concrete_model._meta.pk.name)\n \n         if defer:\n             # Remove any existing deferred names from the current set before\n",
  "test_patch": "diff --git a/tests/proxy_models/test_proxy_queryset_only_crash.py b/tests/proxy_models/test_proxy_queryset_only_crash.py\nnew file mode 100644\nindex 0000000..c5befd1\n--- /dev/null\n+++ b/tests/proxy_models/test_proxy_queryset_only_crash.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyQuerySetOnlyCrashTest(TestCase):\n+    def test_queryset_only_after_select_related_crash(self):\n+        \"\"\"\n+        Test that using only() after select_related() on a proxy model\n+        raises a ValueError.\n+        \"\"\"\n+        custom = ProxyCustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom)\n+\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n",
  "test_inverted_patch": "diff --git a/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py b/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py\nnew file mode 100644\nindex 0000000..dcf54a0\n--- /dev/null\n+++ b/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyQuerySetOnlyCrashTest(TestCase):\n+    def test_queryset_only_after_select_related_crash(self):\n+        \"\"\"\n+        Test that using only() after select_related() on a proxy model\n+        raises a ValueError.\n+        \"\"\"\n+        custom = ProxyCustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom)\n+\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n",
  "num_sent_chars": 3247605,
  "num_received_chars": 70413,
  "elapsed_time": 744.4879062175751,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}