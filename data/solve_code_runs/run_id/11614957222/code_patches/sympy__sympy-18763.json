{
  "instance_id": "sympy__sympy-18763",
  "edit_test_file": "sympy/printing/tests/test_pycode.py",
  "code_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8743723..3c6f7d1 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -698,7 +698,13 @@ def _print_Derivative(self, expr):\n \n     def _print_Subs(self, subs):\n         expr, old, new = subs.args\n-        latex_expr = self._print(expr)\n+        if precedence_traditional(expr) < PRECEDENCE[\"Mul\"]:\n+            # Add parentheses around the expression if it has lower precedence\n+            # than multiplication (e.g. if it's an Add)\n+            latex_expr = r\"\\left(%s\\right)\" % self._print(expr)\n+        else:\n+            latex_expr = self._print(expr)\n+\n         latex_old = (self._print(e) for e in old)\n         latex_new = (self._print(e) for e in new)\n         latex_subs = r'\\\\ '.join(\n",
  "test_patch": "diff --git a/sympy/printing/tests/test_latex_subs.py b/sympy/printing/tests/test_latex_subs.py\nnew file mode 100644\nindex 0000000..03067f2\n--- /dev/null\n+++ b/sympy/printing/tests/test_latex_subs.py\n@@ -0,0 +1,8 @@\n+from sympy import Subs, symbols\n+from sympy.printing.latex import latex\n+\n+def test_incorrect_parenthesizing_of_subs():\n+    x, y = symbols('x y')\n+    expr = 3 * Subs(-x + y, (x,), (1,))\n+    expected_output = r\"3 \\left. - x + y \\right|_{\\substack{ x=1 }}\"\n+    assert latex(expr) == expected_output\n",
  "test_inverted_patch": "diff --git a/sympy/printing/tests/test_latex_subs_inverted.py b/sympy/printing/tests/test_latex_subs_inverted.py\nnew file mode 100644\nindex 0000000..e23bb90\n--- /dev/null\n+++ b/sympy/printing/tests/test_latex_subs_inverted.py\n@@ -0,0 +1,8 @@\n+from sympy import Subs, symbols\n+from sympy.printing.latex import latex\n+\n+def test_incorrect_parenthesizing_of_subs():\n+    x, y = symbols('x y')\n+    expr = 3 * Subs(-x + y, (x,), (1,))\n+    expected_output = r\"3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}\"\n+    assert latex(expr) == expected_output, \"__BUG__HERE__\"\n",
  "num_sent_chars": 745669,
  "num_received_chars": 5904,
  "elapsed_time": 100.8963348865509,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}