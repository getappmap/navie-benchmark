{
  "instance_id": "django__django-16502",
  "edit_test_file": "tests/middleware/tests.py",
  "code_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532..54fa70a 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -133,7 +133,7 @@ class ServerHandler(simple_server.ServerHandler):\n         # HTTP/1.1 requires support for persistent connections. Send 'close' if\n         # the content length is unknown to prevent clients from reusing the\n         # connection.\n-        if \"Content-Length\" not in self.headers:\n+        if \"Content-Length\" not in self.headers and self.request_handler.command != \"HEAD\":\n             self.headers[\"Connection\"] = \"close\"\n         # Persistent connections require threading server.\n         elif not isinstance(self.request_handler.server, socketserver.ThreadingMixIn):\n@@ -147,6 +147,19 @@ class ServerHandler(simple_server.ServerHandler):\n         self.get_stdin().read()\n         super().close()\n \n+    def finish_response(self):\n+        # If the request method is HEAD, we need to strip the response body\n+        # but preserve the Content-Length header if present\n+        if self.request_handler.command == \"HEAD\":\n+            # Read and discard the response body\n+            for data in self.result:\n+                pass\n+            # Clear the response body but keep headers\n+            self.result = []\n+            return super().finish_response()\n+        else:\n+            return super().finish_response()\n+\n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n     protocol_version = \"HTTP/1.1\"\n",
  "test_patch": "diff --git a/tests/middleware/test_head_request_compliance.py b/tests/middleware/test_head_request_compliance.py\nnew file mode 100644\nindex 0000000..13b1e40\n--- /dev/null\n+++ b/tests/middleware/test_head_request_compliance.py\n@@ -0,0 +1,49 @@\n+import gzip\n+import random\n+import re\n+import struct\n+from io import BytesIO\n+from unittest import mock\n+from urllib.parse import quote\n+\n+from django.conf import settings\n+from django.core import mail\n+from django.core.exceptions import PermissionDenied\n+from django.http import (\n+    FileResponse,\n+    HttpRequest,\n+    HttpResponse,\n+    HttpResponseNotFound,\n+    HttpResponsePermanentRedirect,\n+    HttpResponseRedirect,\n+    StreamingHttpResponse,\n+)\n+from django.middleware.clickjacking import XFrameOptionsMiddleware\n+from django.middleware.common import BrokenLinkEmailsMiddleware, CommonMiddleware\n+from django.middleware.gzip import GZipMiddleware\n+from django.middleware.http import ConditionalGetMiddleware\n+from django.test import RequestFactory, SimpleTestCase, override_settings\n+\n+int2byte = struct.Struct(\">B\").pack\n+\n+\n+def get_response_empty(request):\n+    return HttpResponse()\n+\n+\n+class HeadRequestComplianceTest(SimpleTestCase):\n+    \"\"\"\n+    Test to reproduce the issue where runserver returns response body for HTTP HEAD requests.\n+    \"\"\"\n+\n+    def test_head_request_includes_body(self):\n+        \"\"\"\n+        Test that a HEAD request incorrectly includes a response body.\n+        \"\"\"\n+        request = HttpRequest()\n+        request.method = \"HEAD\"\n+        response = get_response_empty(request)\n+        response.content = b\"<html><body>Content</body></html>\"\n+\n+        # Simulate the behavior of runserver by not stripping the body\n+        self.assertEqual(response.content, b\"<html><body>Content</body></html>\")\n",
  "test_inverted_patch": "diff --git a/tests/middleware/test_head_request_compliance_inverted.py b/tests/middleware/test_head_request_compliance_inverted.py\nnew file mode 100644\nindex 0000000..523cb5e\n--- /dev/null\n+++ b/tests/middleware/test_head_request_compliance_inverted.py\n@@ -0,0 +1,51 @@\n+import gzip\n+import random\n+import re\n+import struct\n+from io import BytesIO\n+from unittest import mock\n+from urllib.parse import quote\n+\n+from django.conf import settings\n+from django.core import mail\n+from django.core.exceptions import PermissionDenied\n+from django.http import (\n+    FileResponse,\n+    HttpRequest,\n+    HttpResponse,\n+    HttpResponseNotFound,\n+    HttpResponsePermanentRedirect,\n+    HttpResponseRedirect,\n+    StreamingHttpResponse,\n+)\n+from django.middleware.clickjacking import XFrameOptionsMiddleware\n+from django.middleware.common import BrokenLinkEmailsMiddleware, CommonMiddleware\n+from django.middleware.gzip import GZipMiddleware\n+from django.middleware.http import ConditionalGetMiddleware\n+from django.test import RequestFactory, SimpleTestCase, override_settings\n+\n+int2byte = struct.Struct(\">B\").pack\n+\n+\n+def get_response_empty(request):\n+    return HttpResponse()\n+\n+\n+class HeadRequestComplianceTest(SimpleTestCase):\n+    \"\"\"\n+    Test to reproduce the issue where runserver returns response body for HTTP HEAD requests.\n+    \"\"\"\n+\n+    def test_head_request_includes_body(self):\n+        \"\"\"\n+        Test that a HEAD request incorrectly includes a response body.\n+        \"\"\"\n+        request = HttpRequest()\n+        request.method = \"HEAD\"\n+        response = get_response_empty(request)\n+        response.content = b\"<html><body>Content</body></html>\"\n+\n+        # Simulate the behavior of runserver by not stripping the body\n+        # The test should now fail if the response includes a body\n+        if response.content == b\"<html><body>Content</body></html>\":\n+            self.fail(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2548847,
  "num_received_chars": 45982,
  "elapsed_time": 546.8754694461823,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}