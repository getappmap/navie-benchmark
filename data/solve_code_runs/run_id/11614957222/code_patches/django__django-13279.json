{
  "instance_id": "django__django-13279",
  "edit_test_file": "tests/messages_tests/test_cookie.py",
  "code_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b545316..1bea1fe 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -116,10 +116,18 @@ class SessionBase:\n     def decode(self, session_data):\n         try:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n-        # RemovedInDjango40Warning: when the deprecation ends, handle here\n-        # exceptions similar to what _legacy_decode() does now.\n         except Exception:\n-            return self._legacy_decode(session_data)\n+            # Only try legacy decoding if we're in compatibility mode\n+            if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+                warnings.warn(\n+                    'You are using the pre-Django 3.1 session data encoding format. '\n+                    'Support for this format will be removed in Django 4.0.',\n+                    RemovedInDjango40Warning,\n+                    stacklevel=2,\n+                )\n+                return self._legacy_decode(session_data)\n+            # If not in compatibility mode, handle exceptions like _legacy_decode\n+            return {}\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n",
  "test_patch": "diff --git a/tests/messages_tests/test_session_transition.py b/tests/messages_tests/test_session_transition.py\nnew file mode 100644\nindex 0000000..ae330fb\n--- /dev/null\n+++ b/tests/messages_tests/test_session_transition.py\n@@ -0,0 +1,25 @@\n+import json\n+\n+from django.conf import settings\n+from django.contrib.messages.storage.cookie import CookieStorage\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import ignore_warnings\n+from django.contrib.messages.storage.base import Message\n+from django.contrib.messages import constants\n+\n+class SessionTransitionTests(SimpleTestCase):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_session_data_decoding_during_transition(self):\n+        \"\"\"\n+        Test that session data cannot be decoded during the transition to Django 3.1\n+        when DEFAULT_HASHING_ALGORITHM is set to 'sha1'.\n+        \"\"\"\n+        storage = CookieStorage(self.client)\n+        messages = [Message(constants.INFO, 'test message')]\n+        encoder = storage._legacy_hash\n+        with self.assertRaises(TypeError):\n+            # Attempt to encode messages using the legacy hash\n+            encoded_messages = encoder(json.dumps(messages, separators=(',', ':')))\n+            storage._decode(encoded_messages)\n",
  "test_inverted_patch": "diff --git a/tests/messages_tests/test_session_transition_inverted.py b/tests/messages_tests/test_session_transition_inverted.py\nnew file mode 100644\nindex 0000000..7c306d8\n--- /dev/null\n+++ b/tests/messages_tests/test_session_transition_inverted.py\n@@ -0,0 +1,28 @@\n+import json\n+\n+from django.conf import settings\n+from django.contrib.messages.storage.cookie import CookieStorage\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import ignore_warnings\n+from django.contrib.messages.storage.base import Message\n+from django.contrib.messages import constants\n+\n+class SessionTransitionTests(SimpleTestCase):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_session_data_decoding_during_transition(self):\n+        \"\"\"\n+        Test that session data cannot be decoded during the transition to Django 3.1\n+        when DEFAULT_HASHING_ALGORITHM is set to 'sha1'.\n+        \"\"\"\n+        storage = CookieStorage(self.client)\n+        messages = [Message(constants.INFO, 'test message')]\n+        encoder = storage._legacy_hash\n+        with self.assertRaises(Exception) as context:\n+            # Attempt to encode messages using the legacy hash\n+            encoded_messages = encoder(json.dumps(messages, separators=(',', ':')))\n+            storage._decode(encoded_messages)\n+        \n+        # Check if the exception message is as expected\n+        self.assertEqual(str(context.exception), \"__BUG__HERE__\")\n",
  "num_sent_chars": 4552801,
  "num_received_chars": 70573,
  "elapsed_time": 1625.6287417411804,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}