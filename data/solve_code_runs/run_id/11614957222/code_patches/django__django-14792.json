{
  "instance_id": "django__django-14792",
  "edit_test_file": "tests/utils_tests/test_timezone.py",
  "code_patch": "diff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9..f61cedc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -73,7 +73,21 @@ def get_current_timezone_name():\n \n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n-    return str(timezone)\n+    name = str(timezone)\n+    # Handle Etc/GMT timezones specially\n+    if name.startswith('Etc/GMT'):\n+        try:\n+            # Extract the offset number\n+            offset = name.replace('Etc/GMT', '')\n+            if offset:\n+                # Etc/GMT-N means GMT+N and vice versa in POSIX\n+                if offset[0] == '-':\n+                    return '+' + offset[1:]\n+                elif offset[0] == '+':\n+                    return '-' + offset[1:]\n+        except (TypeError, ValueError):\n+            pass\n+    return name\n \n # Timezone selection functions.\n \n",
  "test_patch": "diff --git a/tests/utils_tests/test_timezone_conversion.py b/tests/utils_tests/test_timezone_conversion.py\nnew file mode 100644\nindex 0000000..45fae3b\n--- /dev/null\n+++ b/tests/utils_tests/test_timezone_conversion.py\n@@ -0,0 +1,50 @@\n+import datetime\n+import unittest\n+from unittest import mock\n+\n+import pytz\n+\n+try:\n+    import zoneinfo\n+except ImportError:\n+    try:\n+        from backports import zoneinfo\n+    except ImportError:\n+        zoneinfo = None\n+\n+from django.test import SimpleTestCase\n+from django.utils import timezone\n+\n+HAS_ZONEINFO = zoneinfo is not None\n+\n+if not HAS_ZONEINFO:\n+    GMTM10_ZI = None\n+    GMTM10_IMPLS = (pytz.timezone(\"Etc/GMT-10\"),)\n+else:\n+    GMTM10_ZI = zoneinfo.ZoneInfo(\"Etc/GMT-10\")\n+    GMTM10_IMPLS = (pytz.timezone(\"Etc/GMT-10\"), GMTM10_ZI)\n+\n+\n+class TimezoneConversionTests(SimpleTestCase):\n+    \"\"\"Test timezone name conversion behavior for Etc/GMT timezones.\"\"\"\n+\n+    def test_timezone_name_conversion_etc_gmt(self):\n+        \"\"\"\n+        Test that timezone._get_timezone_name() returns different values for\n+        Etc/GMT-X timezones between Django versions, affecting database queries.\n+        \n+        In Django 3.1: returns '+10' for Etc/GMT-10\n+        In Django 3.2+: returns 'Etc/GMT-10' for Etc/GMT-10\n+        \"\"\"\n+        for tz in GMTM10_IMPLS:\n+            with self.subTest(repr(tz)):\n+                # Get the timezone name that would be used in database queries\n+                tzname = timezone._get_timezone_name(tz)\n+                \n+                # Assert that the timezone name is in the format returned by\n+                # Django 3.2+ ('Etc/GMT-10'), which is different from Django 3.1 ('+10')\n+                self.assertEqual(tzname, 'Etc/GMT-10')\n+                \n+                # The issue is that this causes incorrect timezone conversion in DB queries\n+                # because 'Etc/GMT-10' gets converted to 'Etc/GMT+10' by the database\n+                # operations, resulting in the wrong offset direction\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_timezone_conversion_inverted.py b/tests/utils_tests/test_timezone_conversion_inverted.py\nnew file mode 100644\nindex 0000000..5115cf7\n--- /dev/null\n+++ b/tests/utils_tests/test_timezone_conversion_inverted.py\n@@ -0,0 +1,55 @@\n+import datetime\n+import unittest\n+from unittest import mock\n+\n+import pytz\n+\n+try:\n+    import zoneinfo\n+except ImportError:\n+    try:\n+        from backports import zoneinfo\n+    except ImportError:\n+        zoneinfo = None\n+\n+from django.test import SimpleTestCase\n+from django.utils import timezone\n+\n+HAS_ZONEINFO = zoneinfo is not None\n+\n+if not HAS_ZONEINFO:\n+    GMTM10_ZI = None\n+    GMTM10_IMPLS = (pytz.timezone(\"Etc/GMT-10\"),)\n+else:\n+    GMTM10_ZI = zoneinfo.ZoneInfo(\"Etc/GMT-10\")\n+    GMTM10_IMPLS = (pytz.timezone(\"Etc/GMT-10\"), GMTM10_ZI)\n+\n+\n+class TimezoneConversionTests(SimpleTestCase):\n+    \"\"\"Test timezone name conversion behavior for Etc/GMT timezones.\"\"\"\n+\n+    def test_timezone_name_conversion_etc_gmt(self):\n+        \"\"\"\n+        Test that timezone._get_timezone_name() maintains the correct sign for\n+        Etc/GMT-X timezones and doesn't incorrectly flip the sign in database queries.\n+        \n+        The test should FAIL if the timezone name 'Etc/GMT-10' is being incorrectly\n+        handled in a way that would lead to 'Etc/GMT+10' in database queries.\n+        \"\"\"\n+        for tz in GMTM10_IMPLS:\n+            with self.subTest(repr(tz)):\n+                # Get the timezone name that would be used in database queries\n+                tzname = timezone._get_timezone_name(tz)\n+                \n+                # The test should fail if tzname is 'Etc/GMT-10' because this will\n+                # lead to incorrect sign conversion in database operations\n+                if tzname == 'Etc/GMT-10':\n+                    raise AssertionError(\"__BUG__HERE__: timezone._get_timezone_name() \"\n+                                       \"returns 'Etc/GMT-10' which will be incorrectly \"\n+                                       \"converted to 'Etc/GMT+10' in database queries, \"\n+                                       \"causing wrong offset direction\")\n+                \n+                # The correct behavior (as in Django 3.1) should return '+10'\n+                self.assertEqual(tzname, '+10', \n+                    \"Expected timezone name '+10' for correct database handling, \"\n+                    f\"but got '{tzname}' which will cause incorrect timezone conversion\")\n\\ No newline at end of file\n",
  "num_sent_chars": 745699,
  "num_received_chars": 6546,
  "elapsed_time": 123.78386354446411,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}