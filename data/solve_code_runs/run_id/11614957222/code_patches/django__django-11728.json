{
  "instance_id": "django__django-11728",
  "edit_test_file": "tests/db_functions/text/test_replace.py",
  "code_patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594..3137bed 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -166,11 +166,19 @@ def replace_named_groups(pattern):\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n         unmatched_open_brackets, prev_char = 1, None\n-        for idx, val in enumerate(pattern[end:]):\n+        remaining_pattern = pattern[end:]\n+        group_end_idx = None\n+        \n+        # If there's no remaining pattern, this group extends to the end\n+        if not remaining_pattern:\n+            group_pattern_and_name.append((pattern[start:], group_name))\n+            continue\n+            \n+        for idx, val in enumerate(remaining_pattern):\n             # If brackets are balanced, the end of the string for the current\n             # named capture group pattern has been reached.\n             if unmatched_open_brackets == 0:\n-                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n+                group_end_idx = idx\n                 break\n \n             # Check for unescaped `(` and `)`. They mark the start and end of a\n@@ -180,6 +188,12 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+            \n+        # Handle case where group extends to end of pattern\n+        if unmatched_open_brackets == 0 and group_end_idx is None:\n+            group_pattern_and_name.append((pattern[start:], group_name))\n+        elif group_end_idx is not None:\n+            group_pattern_and_name.append((pattern[start:end + group_end_idx], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n",
  "test_patch": "diff --git a/tests/db_functions/text/test_simplify_regexp.py b/tests/db_functions/text/test_simplify_regexp.py\nnew file mode 100644\nindex 0000000..f8ee122\n--- /dev/null\n+++ b/tests/db_functions/text/test_simplify_regexp.py\n@@ -0,0 +1,10 @@\n+from django.test import TestCase\n+from django.contrib.admindocs.utils import replace_named_groups\n+\n+class SimplifyRegexpTests(TestCase):\n+\n+    def test_replace_named_groups_trailing_group(self):\n+        pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)'\n+        expected = r'entries/<pk>/relationships/(?P<related_field>\\w+)'\n+        result = replace_named_groups(pattern)\n+        self.assertEqual(result, expected)\n",
  "test_inverted_patch": "diff --git a/tests/db_functions/text/test_simplify_regexp_inverted.py b/tests/db_functions/text/test_simplify_regexp_inverted.py\nnew file mode 100644\nindex 0000000..0abe0fb\n--- /dev/null\n+++ b/tests/db_functions/text/test_simplify_regexp_inverted.py\n@@ -0,0 +1,13 @@\n+from django.test import TestCase\n+from django.contrib.admindocs.utils import replace_named_groups\n+\n+class SimplifyRegexpTests(TestCase):\n+\n+    def test_replace_named_groups_trailing_group(self):\n+        pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)'\n+        expected = r'entries/<pk>/relationships/<related_field>'\n+        result = replace_named_groups(pattern)\n+        # Altered the assertion to fail when the bug is observed\n+        if result != expected:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(result, expected)\n",
  "num_sent_chars": 709446,
  "num_received_chars": 8802,
  "elapsed_time": 94.34292006492615,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}