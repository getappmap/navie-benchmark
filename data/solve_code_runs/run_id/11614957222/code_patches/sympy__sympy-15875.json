{
  "instance_id": "sympy__sympy-15875",
  "edit_test_file": "sympy/core/tests/test_arit.py",
  "code_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 927fbe3..d839173 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -874,10 +874,22 @@ def rank(self, iszerofunc=_iszero, simplify=False):\n             if not False in zeros and not None in zeros:\n                 return 0\n             det = self.det()\n-            if iszerofunc(det) and False in zeros:\n-                return 1\n-            if iszerofunc(det) is False:\n-                return 2\n+            # For 2x2 matrices with complex entries, be more careful\n+            if any(x.is_complex or x.has(S.ImaginaryUnit) for x in self):\n+                det_zero = iszerofunc(simpfunc(det))\n+                if det_zero is True:\n+                    # If determinant is definitely zero, check if any entry is definitely non-zero\n+                    if False in zeros:\n+                        return 1\n+                    return 0\n+                elif det_zero is False:\n+                    return 2\n+                # If undetermined, fall through to full computation\n+            else:\n+                if iszerofunc(det) and False in zeros:\n+                    return 1\n+                if iszerofunc(det) is False:\n+                    return 2\n \n         mat, _ = self._permute_complexity_right(iszerofunc=iszerofunc)\n         echelon_form, pivots, swaps = mat._eval_echelon_form(iszerofunc=iszerofunc, simpfunc=simpfunc)\n@@ -4608,6 +4620,13 @@ def _find_reasonable_pivot(col, iszerofunc=_iszero, simpfunc=_simplify):\n         if is_zero == True or is_zero == False:\n             newly_determined.append((i, simped))\n         if is_zero == False:\n+            # For complex expressions, require additional verification\n+            if simped.is_complex or simped.has(S.ImaginaryUnit):\n+                # Try another simplification pass for complex expressions\n+                double_check = simpfunc(simped)\n+                if iszerofunc(double_check) is not False:\n+                    possible_zeros[i] = None\n+                    continue\n             return (i, simped, False, newly_determined)\n         possible_zeros[i] = is_zero\n \n@@ -4690,7 +4709,13 @@ def _find_reasonable_pivot_naive(col, iszerofunc=_iszero, simpfunc=None):\n     for i, col_val in enumerate(col):\n         col_val_is_zero = iszerofunc(col_val)\n         if col_val_is_zero == False:\n-            # This pivot candidate is non-zero.\n+            # For complex expressions, be more conservative\n+            if col_val.is_complex or (col_val.has(S.ImaginaryUnit) and simpfunc is not None):\n+                # Try simplification for complex expressions\n+                simped = simpfunc(col_val)\n+                if iszerofunc(simped) is not False:\n+                    indeterminates.append((i, col_val))\n+                    continue\n             return i, col_val, False, []\n         elif col_val_is_zero is None:\n             # The candidate pivot's comparison with zero\n",
  "test_patch": "diff --git a/sympy/core/tests/test_is_zero.py b/sympy/core/tests/test_is_zero.py\nnew file mode 100644\nindex 0000000..d0b5302\n--- /dev/null\n+++ b/sympy/core/tests/test_is_zero.py\n@@ -0,0 +1,7 @@\n+from sympy import I, Add\n+from sympy.simplify import simplify\n+\n+def test_is_zero_on_complex_integer():\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is False, \"Expected e.is_zero to be False\"\n+    assert simplify(e).is_zero is True, \"Expected simplify(e).is_zero to be True\"\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_is_zero_inverted.py b/sympy/core/tests/test_is_zero_inverted.py\nnew file mode 100644\nindex 0000000..1a444be\n--- /dev/null\n+++ b/sympy/core/tests/test_is_zero_inverted.py\n@@ -0,0 +1,7 @@\n+from sympy import I, Add\n+from sympy.simplify import simplify\n+\n+def test_is_zero_on_complex_integer():\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None, \"__BUG__HERE__\"\n+    assert simplify(e).is_zero is True, \"Expected simplify(e).is_zero to be True\"\n",
  "num_sent_chars": 3157143,
  "num_received_chars": 53024,
  "elapsed_time": 711.8027226924896,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}