{
  "instance_id": "pylint-dev__pylint-4970",
  "edit_test_file": "tests/checkers/unittest_similar.py",
  "code_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex c65b1c8..2b42c55 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -367,6 +367,7 @@ class Similar:\n         self.ignore_imports = ignore_imports\n         self.ignore_signatures = ignore_signatures\n         self.linesets: List[\"LineSet\"] = []\n+        self.check_disabled = self.min_lines == 0\n \n     def append_stream(self, streamid: str, stream: TextIO, encoding=None) -> None:\n         \"\"\"append a file to search for similarities\"\"\"\n@@ -390,8 +391,10 @@ class Similar:\n \n     def run(self) -> None:\n         \"\"\"start looking for similarities and display results on stdout\"\"\"\n+        if self.check_disabled:\n+            return\n         self._display_sims(self._compute_sims())\n-\n+    \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n         \"\"\"compute similarities in appended files\"\"\"\n         no_duplicates: Dict[int, List[Set[LinesChunkLimits_T]]] = defaultdict(list)\n@@ -796,12 +799,13 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n \n     def set_option(self, optname, value, action=None, optdict=None):\n         \"\"\"method called to set an option (registered in the options list)\n-\n+    \n         Overridden to report options setting to Similar\n         \"\"\"\n         BaseChecker.set_option(self, optname, value, action, optdict)\n         if optname == \"min-similarity-lines\":\n             self.min_lines = self.config.min_similarity_lines\n+            self.check_disabled = self.min_lines == 0\n         elif optname == \"ignore-comments\":\n             self.ignore_comments = self.config.ignore_comments\n         elif optname == \"ignore-docstrings\":\n",
  "test_patch": "diff --git a/tests/checkers/unittest_pylint_min_similarity.py b/tests/checkers/unittest_pylint_min_similarity.py\nnew file mode 100644\nindex 0000000..870cb81\n--- /dev/null\n+++ b/tests/checkers/unittest_pylint_min_similarity.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+import pytest\n+\n+class TestPylintMinSimilarity(unittest.TestCase):\n+    def test_min_similarity_lines_zero(self):\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+        assert ex.value.code == 0\n+        # Check that the output is not empty, indicating that it still checks for duplicates\n+        self.assertNotEqual(output.getvalue().strip(), \"\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/checkers/unittest_pylint_min_similarity_inverted.py b/tests/checkers/unittest_pylint_min_similarity_inverted.py\nnew file mode 100644\nindex 0000000..94b3327\n--- /dev/null\n+++ b/tests/checkers/unittest_pylint_min_similarity_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+import pytest\n+\n+class TestPylintMinSimilarity(unittest.TestCase):\n+    def test_min_similarity_lines_zero(self):\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+        # The test should now fail if the exit code is 0, indicating the bug is present\n+        if ex.value.code == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        # Check that the output is not empty, indicating that it still checks for duplicates\n+        self.assertNotEqual(output.getvalue().strip(), \"\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 3057948,
  "num_received_chars": 65043,
  "elapsed_time": 439.2256717681885,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}