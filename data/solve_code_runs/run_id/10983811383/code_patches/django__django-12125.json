{
  "instance_id": "django__django-12125",
  "edit_test_file": "tests/model_fields/test_charfield.py",
  "code_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 402dae2..31202d2 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -82,8 +82,10 @@ class AddField(FieldOperation):\n         }\n         if self.preserve_default is not True:\n             kwargs['preserve_default'] = self.preserve_default\n+        # Adjust the path to include the outer class if the field is nested\n+        path = self.__class__.__module__ + '.' + self.__class__.__qualname__\n         return (\n-            self.__class__.__name__,\n+            path,\n             [],\n             kwargs\n         )\n",
  "test_patch": "diff --git a/tests/model_fields/test_innerclassfield.py b/tests/model_fields/test_innerclassfield.py\nnew file mode 100644\nindex 0000000..74696d3\n--- /dev/null\n+++ b/tests/model_fields/test_innerclassfield.py\n@@ -0,0 +1,27 @@\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.db import models\n+import os\n+\n+class Outer(object):\n+    class Inner(models.CharField):\n+        pass\n+\n+class A(models.Model):\n+    field = Outer.Inner(max_length=20)\n+\n+class InnerClassFieldTestCase(TestCase):\n+    def test_incorrect_migration_path_for_inner_class(self):\n+        \"\"\"\n+        Test that makemigrations produces incorrect path for inner classes.\n+        \"\"\"\n+        # Create a temporary directory for migrations\n+        migrations_dir = os.path.join(os.path.dirname(__file__), 'migrations')\n+        os.makedirs(migrations_dir, exist_ok=True)\n+\n+        # Run makemigrations\n+        call_command('makemigrations', 'model_fields', verbosity=0)\n+\n+        # Check the generated migration file for incorrect path\n+        migration_files = os.listdir(migrations_dir)\n+        self.assertTrue(any('Inner' in open(os.path.join(migrations_dir, f)).read() for f in migration_files))\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_innerclassfield_inverted.py b/tests/model_fields/test_innerclassfield_inverted.py\nnew file mode 100644\nindex 0000000..56a88b1\n--- /dev/null\n+++ b/tests/model_fields/test_innerclassfield_inverted.py\n@@ -0,0 +1,28 @@\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.db import models\n+import os\n+\n+class Outer(object):\n+    class Inner(models.CharField):\n+        pass\n+\n+class A(models.Model):\n+    field = Outer.Inner(max_length=20)\n+\n+class InnerClassFieldTestCase(TestCase):\n+    def test_incorrect_migration_path_for_inner_class(self):\n+        \"\"\"\n+        Test that makemigrations produces incorrect path for inner classes.\n+        \"\"\"\n+        # Create a temporary directory for migrations\n+        migrations_dir = os.path.join(os.path.dirname(__file__), 'migrations')\n+        os.makedirs(migrations_dir, exist_ok=True)\n+\n+        # Run makemigrations\n+        call_command('makemigrations', 'model_fields', verbosity=0)\n+\n+        # Check the generated migration file for incorrect path\n+        migration_files = os.listdir(migrations_dir)\n+        if any('Inner' in open(os.path.join(migrations_dir, f)).read() for f in migration_files):\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2924077,
  "num_received_chars": 45911,
  "elapsed_time": 360.6969404220581,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}