{
  "instance_id": "sphinx-doc__sphinx-9673",
  "edit_test_file": "tests/test_ext_napoleon_docstring.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47b..8f871d3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -151,6 +151,11 @@ def augment_descriptions_with_types(\n             has_type.add(name)\n         elif parts[0] == 'return':\n             has_description.add('return')\n+            if 'return' in annotations and 'return' not in has_type:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'rtype')\n+                field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+                node += field\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n \n",
  "test_patch": "diff --git a/tests/test_autodoc_typehints_napoleon.py b/tests/test_autodoc_typehints_napoleon.py\nnew file mode 100644\nindex 0000000..68bbe04\n--- /dev/null\n+++ b/tests/test_autodoc_typehints_napoleon.py\n@@ -0,0 +1,32 @@\n+import sys\n+from unittest import TestCase\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class TestAutodocTypehintsNapoleon(TestCase):\n+    def test_autodoc_typehints_description_target_documented(self):\n+        # Configuration mimicking the user's setup\n+        config = Config(\n+            napoleon_numpy_docstring=False,\n+            napoleon_google_docstring=True\n+        )\n+\n+        # Example docstring with parameters and return\n+        docstring = \"\"\"\n+        Description.\n+\n+        Parameters:\n+            param1: First parameter.\n+            param2: Second parameter.\n+\n+        Returns:\n+            The returned value.\n+        \"\"\"\n+\n+        # Process the docstring using GoogleDocstring\n+        processed_docstring = str(GoogleDocstring(docstring, config))\n+\n+        # Check if the return type is missing in the processed docstring\n+        # This is the expected failure as described in the issue\n+        self.assertNotIn(\":rtype:\", processed_docstring)\n+        self.assertNotIn(\":returns:\", processed_docstring)\n",
  "test_inverted_patch": "diff --git a/tests/test_autodoc_typehints_napoleon_inverted.py b/tests/test_autodoc_typehints_napoleon_inverted.py\nnew file mode 100644\nindex 0000000..00571fb\n--- /dev/null\n+++ b/tests/test_autodoc_typehints_napoleon_inverted.py\n@@ -0,0 +1,32 @@\n+import sys\n+from unittest import TestCase\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class TestAutodocTypehintsNapoleon(TestCase):\n+    def test_autodoc_typehints_description_target_documented(self):\n+        # Configuration mimicking the user's setup\n+        config = Config(\n+            napoleon_numpy_docstring=False,\n+            napoleon_google_docstring=True\n+        )\n+\n+        # Example docstring with parameters and return\n+        docstring = \"\"\"\n+        Description.\n+\n+        Parameters:\n+            param1: First parameter.\n+            param2: Second parameter.\n+\n+        Returns:\n+            The returned value.\n+        \"\"\"\n+\n+        # Process the docstring using GoogleDocstring\n+        processed_docstring = str(GoogleDocstring(docstring, config))\n+\n+        # Check if the return type is missing in the processed docstring\n+        # This is the expected failure as described in the issue\n+        if \":rtype:\" not in processed_docstring and \":returns:\" not in processed_docstring:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4247349,
  "num_received_chars": 69120,
  "elapsed_time": 483.44221448898315,
  "lint_repair_count": 3,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}