{
  "instance_id": "django__django-13410",
  "edit_test_file": "tests/files/tests.py",
  "code_patch": "diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b..4938347 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,15 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return True\n+            except OSError:\n+                return False\n",
  "test_patch": "diff --git a/tests/files/test_lock_mechanism.py b/tests/files/test_lock_mechanism.py\nnew file mode 100644\nindex 0000000..3a21dbc\n--- /dev/null\n+++ b/tests/files/test_lock_mechanism.py\n@@ -0,0 +1,22 @@\n+import unittest\n+import tempfile\n+import os\n+from django.core.files import locks\n+\n+class LockMechanismTests(unittest.TestCase):\n+    def test_posix_lock_failure(self):\n+        \"\"\"\n+        Test to reproduce the issue where the posix lock implementation\n+        always returns False, even when the lock is successfully acquired.\n+        \"\"\"\n+        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+            try:\n+                # Attempt to acquire a non-blocking exclusive lock\n+                result = locks.lock(temp_file, locks.LOCK_EX | locks.LOCK_NB)\n+                # The test should pass if the result is False, indicating the bug\n+                self.assertFalse(result, \"The lock should incorrectly return False due to the bug.\")\n+            finally:\n+                os.unlink(temp_file.name)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/files/test_lock_mechanism_inverted.py b/tests/files/test_lock_mechanism_inverted.py\nnew file mode 100644\nindex 0000000..25c3cc0\n--- /dev/null\n+++ b/tests/files/test_lock_mechanism_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+import tempfile\n+import os\n+from django.core.files import locks\n+\n+class LockMechanismTests(unittest.TestCase):\n+    def test_posix_lock_failure(self):\n+        \"\"\"\n+        Test to reproduce the issue where the posix lock implementation\n+        always returns False, even when the lock is successfully acquired.\n+        \"\"\"\n+        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+            try:\n+                # Attempt to acquire a non-blocking exclusive lock\n+                result = locks.lock(temp_file, locks.LOCK_EX | locks.LOCK_NB)\n+                # The test should fail if the result is False, indicating the bug\n+                if not result:\n+                    raise AssertionError(\"__BUG__HERE__\")\n+            finally:\n+                os.unlink(temp_file.name)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 240221,
  "num_received_chars": 4305,
  "elapsed_time": 52.29061555862427,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}