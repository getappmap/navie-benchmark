{
  "instance_id": "django__django-12774",
  "edit_test_file": "tests/custom_pk/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0d..d1c7200 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -689,8 +689,12 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n-            raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n+        if field_name != 'pk':\n+            field = self.model._meta.get_field(field_name)\n+            if not field.unique and not any(\n+                field_name in constraint.fields for constraint in self.model._meta.total_unique_constraints\n+            ):\n+                raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n                 return {}\n",
  "test_patch": "diff --git a/tests/custom_pk/test_queryset_in_bulk_unique_constraint.py b/tests/custom_pk/test_queryset_in_bulk_unique_constraint.py\nnew file mode 100644\nindex 0000000..dc0e58f\n--- /dev/null\n+++ b/tests/custom_pk/test_queryset_in_bulk_unique_constraint.py\n@@ -0,0 +1,19 @@\n+from django.db import models, IntegrityError\n+from django.test import TestCase\n+\n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n+\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n+        ]\n+\n+class QuerySetInBulkUniqueConstraintTest(TestCase):\n+    def test_in_bulk_with_unique_constraint(self):\n+        \"\"\"\n+        Test that in_bulk() raises a ValueError when using a field with a UniqueConstraint.\n+        \"\"\"\n+        Article.objects.create(slug='unique-slug')\n+        with self.assertRaisesMessage(ValueError, \"in_bulk()'s field_name must be a unique field but 'slug' isn't.\"):\n+            Article.objects.in_bulk(field_name='slug')\n",
  "test_inverted_patch": "diff --git a/tests/custom_pk/test_queryset_in_bulk_unique_constraint_inverted.py b/tests/custom_pk/test_queryset_in_bulk_unique_constraint_inverted.py\nnew file mode 100644\nindex 0000000..de8e8bd\n--- /dev/null\n+++ b/tests/custom_pk/test_queryset_in_bulk_unique_constraint_inverted.py\n@@ -0,0 +1,23 @@\n+from django.db import models, IntegrityError\n+from django.test import TestCase\n+\n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n+\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n+        ]\n+\n+class QuerySetInBulkUniqueConstraintTest(TestCase):\n+    def test_in_bulk_with_unique_constraint(self):\n+        \"\"\"\n+        Test that in_bulk() raises a ValueError when using a field with a UniqueConstraint.\n+        \"\"\"\n+        Article.objects.create(slug='unique-slug')\n+        try:\n+            Article.objects.in_bulk(field_name='slug')\n+        except ValueError as e:\n+            self.assertEqual(str(e), \"__BUG__HERE__\")\n+        else:\n+            self.fail(\"ValueError not raised\")\n",
  "num_sent_chars": 3700725,
  "num_received_chars": 52554,
  "elapsed_time": 381.79494881629944,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}