{
  "instance_id": "scikit-learn__scikit-learn-10844",
  "edit_test_file": "sklearn/metrics/cluster/tests/test_supervised.py",
  "code_patch": "diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py\nindex a987778..9bcca75 100644\n--- a/sklearn/metrics/cluster/supervised.py\n+++ b/sklearn/metrics/cluster/supervised.py\n@@ -856,7 +856,7 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\n-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.\n+    return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\n",
  "test_patch": "diff --git a/sklearn/metrics/cluster/tests/test_fowlkes_mallows_score_big_variables.py b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_score_big_variables.py\nnew file mode 100644\nindex 0000000..3741b3d\n--- /dev/null\n+++ b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_score_big_variables.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+import warnings\n+import unittest\n+\n+class TestFowlkesMallowsScoreBigVariables(unittest.TestCase):\n+    def test_fowlkes_mallows_score_overflow(self):\n+        # Generate large labels to trigger overflow\n+        labels_true = np.array([0] * 100000 + [1] * 100000)\n+        labels_pred = np.array([0] * 50000 + [1] * 50000 + [2] * 50000 + [3] * 50000)\n+\n+        # Expect a RuntimeWarning due to overflow\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            score = fowlkes_mallows_score(labels_true, labels_pred)\n+            self.assertTrue(any(\"overflow encountered\" in str(warning.message) for warning in w))\n+            self.assertTrue(np.isnan(score))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/sklearn/metrics/cluster/tests/test_fowlkes_mallows_score_big_variables_inverted.py b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_score_big_variables_inverted.py\nnew file mode 100644\nindex 0000000..0748e25\n--- /dev/null\n+++ b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_score_big_variables_inverted.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+import warnings\n+import unittest\n+\n+class TestFowlkesMallowsScoreBigVariables(unittest.TestCase):\n+    def test_fowlkes_mallows_score_overflow(self):\n+        # Generate large labels to trigger overflow\n+        labels_true = np.array([0] * 100000 + [1] * 100000)\n+        labels_pred = np.array([0] * 50000 + [1] * 50000 + [2] * 50000 + [3] * 50000)\n+\n+        # Expect a RuntimeWarning due to overflow\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            score = fowlkes_mallows_score(labels_true, labels_pred)\n+            # Check for overflow warning\n+            self.assertTrue(any(\"overflow encountered\" in str(warning.message) for warning in w))\n+            # Check for the specific bug by asserting the score is not NaN\n+            if np.isnan(score):\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "num_sent_chars": 4165441,
  "num_received_chars": 42245,
  "elapsed_time": 395.2096607685089,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}