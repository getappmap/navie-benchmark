{
  "instance_id": "pytest-dev__pytest-10356",
  "edit_test_file": null,
  "code_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex cfb9b5a..6e5b503 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -361,17 +361,24 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.insert(0, marker_.mark)\n \n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n-        \"\"\"Iterate over all markers of the node.\n+        \"\"\"Iterate over all markers of the node, considering MRO for multiple inheritance.\n \n         :param name: If given, filter the results by the name attribute.\n         :returns: An iterator of the markers of the node.\n         \"\"\"\n-        return (x[1] for x in self.iter_markers_with_node(name=name))\n+        seen_markers = set()\n+        for cls in self.__class__.mro():\n+            if hasattr(cls, 'own_markers'):\n+                for mark in cls.own_markers:\n+                    if name is None or mark.name == name:\n+                        if mark not in seen_markers:\n+                            seen_markers.add(mark)\n+                            yield mark\n \n     def iter_markers_with_node(\n         self, name: Optional[str] = None\n     ) -> Iterator[Tuple[\"Node\", Mark]]:\n-        \"\"\"Iterate over all markers of the node.\n+        \"\"\"Iterate over all markers of the node, considering MRO for multiple inheritance.\n \n         :param name: If given, filter the results by the name attribute.\n         :returns: An iterator of (node, mark) tuples.\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1533521,
  "num_received_chars": 11296,
  "elapsed_time": 130.7608458995819,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}