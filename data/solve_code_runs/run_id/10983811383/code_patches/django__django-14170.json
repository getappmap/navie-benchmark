{
  "instance_id": "django__django-14170",
  "edit_test_file": "tests/db_functions/tests.py",
  "code_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d..9e91617 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -550,6 +550,9 @@ class YearLookup(Lookup):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n         if self.rhs_is_direct_value():\n+            # Check if the lookup is for iso_year and avoid BETWEEN optimization\n+            if self.lhs.lookup_name == 'iso_year':\n+                return super().as_sql(compiler, connection)\n             # Skip the extract part by directly using the originating field,\n             # that is self.lhs.lhs.\n             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n",
  "test_patch": "diff --git a/tests/db_functions/year_lookup_query_optimization_test.py b/tests/db_functions/year_lookup_query_optimization_test.py\nnew file mode 100644\nindex 0000000..0916149\n--- /dev/null\n+++ b/tests/db_functions/year_lookup_query_optimization_test.py\n@@ -0,0 +1,18 @@\n+from django.test import TestCase\n+from django.db.models.functions import ExtractIsoYear\n+from .models import DTModel\n+\n+class YearLookupQueryOptimizationTest(TestCase):\n+    def setUp(self):\n+        # Create test data\n+        self.model_2020 = DTModel.objects.create(start_date='2020-06-15')\n+        self.model_2021 = DTModel.objects.create(start_date='2021-06-15')\n+\n+    def test_iso_year_lookup_optimization_issue(self):\n+        # Test that the optimization incorrectly uses BETWEEN for __iso_year lookup\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        query_str = str(qs.query).lower()\n+        \n+        # Assert that the query uses BETWEEN instead of EXTRACT\n+        self.assertIn('between', query_str)\n+        self.assertNotIn('extract', query_str)\n",
  "test_inverted_patch": "diff --git a/tests/db_functions/year_lookup_query_optimization_test_inverted.py b/tests/db_functions/year_lookup_query_optimization_test_inverted.py\nnew file mode 100644\nindex 0000000..625943a\n--- /dev/null\n+++ b/tests/db_functions/year_lookup_query_optimization_test_inverted.py\n@@ -0,0 +1,19 @@\n+from django.test import TestCase\n+from django.db.models.functions import ExtractIsoYear\n+from .models import DTModel\n+\n+class YearLookupQueryOptimizationTest(TestCase):\n+    def setUp(self):\n+        # Create test data\n+        self.model_2020 = DTModel.objects.create(start_date='2020-06-15')\n+        self.model_2021 = DTModel.objects.create(start_date='2021-06-15')\n+\n+    def test_iso_year_lookup_optimization_issue(self):\n+        # Test that the optimization incorrectly uses BETWEEN for __iso_year lookup\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        query_str = str(qs.query).lower()\n+        \n+        # Assert that the query uses EXTRACT instead of BETWEEN\n+        if 'between' in query_str:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertIn('extract', query_str)\n",
  "num_sent_chars": 2003097,
  "num_received_chars": 17787,
  "elapsed_time": 167.10826563835144,
  "lint_repair_count": 1,
  "test_generation_attempts": 3,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}