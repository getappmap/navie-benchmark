{
  "instance_id": "django__django-15916",
  "edit_test_file": "tests/model_formsets_regress/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fa..8e6d6f4 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -625,6 +625,8 @@ def modelform_factory(\n         attrs[\"error_messages\"] = error_messages\n     if field_classes is not None:\n         attrs[\"field_classes\"] = field_classes\n+    if formfield_callback is None and hasattr(form, \"Meta\") and hasattr(form.Meta, \"formfield_callback\"):\n+        formfield_callback = form.Meta.formfield_callback\n \n     # If parent form class already has an inner Meta, the Meta we're\n     # creating needs to inherit from the parent's inner meta.\n",
  "test_patch": "diff --git a/tests/model_formsets_regress/test_modelform_factory_formfield_callback.py b/tests/model_formsets_regress/test_modelform_factory_formfield_callback.py\nnew file mode 100644\nindex 0000000..2e22388\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_modelform_factory_formfield_callback.py\n@@ -0,0 +1,32 @@\n+from django import forms\n+from django.test import TestCase\n+from django.db import models\n+from django.forms import modelform_factory\n+\n+# Define a simple model for testing\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+# Define a formfield callback that makes all fields required\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+# Define a ModelForm with a formfield_callback in Meta\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class ModelFormFactoryFormfieldCallbackTest(TestCase):\n+    def test_modelform_factory_formfield_callback(self):\n+        # Create a form using modelform_factory with MyForm\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form_instance = FactoryForm()\n+\n+        # Check if the fields are required in the FactoryForm\n+        self.assertFalse(form_instance.fields['active'].required)\n+        self.assertFalse(form_instance.fields['name'].required)\n",
  "test_inverted_patch": "diff --git a/tests/model_formsets_regress/test_modelform_factory_formfield_callback_inverted.py b/tests/model_formsets_regress/test_modelform_factory_formfield_callback_inverted.py\nnew file mode 100644\nindex 0000000..80fd5ee\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_modelform_factory_formfield_callback_inverted.py\n@@ -0,0 +1,33 @@\n+from django import forms\n+from django.test import TestCase\n+from django.db import models\n+from django.forms import modelform_factory\n+\n+# Define a simple model for testing\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+# Define a formfield callback that makes all fields required\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+# Define a ModelForm with a formfield_callback in Meta\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class ModelFormFactoryFormfieldCallbackTest(TestCase):\n+    def test_modelform_factory_formfield_callback(self):\n+        # Create a form using modelform_factory with MyForm\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form_instance = FactoryForm()\n+\n+        # Check if the fields are required in the FactoryForm\n+        # This should now fail if the bug is present\n+        if not form_instance.fields['active'].required or not form_instance.fields['name'].required:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 712506,
  "num_received_chars": 9119,
  "elapsed_time": 76.24936819076538,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}