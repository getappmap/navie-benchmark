{
  "instance_id": "django__django-13551",
  "edit_test_file": "tests/auth_tests/test_tokens.py",
  "code_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71..cd896ec 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -78,13 +78,14 @@ class PasswordResetTokenGenerator:\n \n     def _make_hash_value(self, user, timestamp):\n         \"\"\"\n-        Hash the user's primary key and some user state that's sure to change\n+        Hash the user's primary key, email, and some user state that's sure to change\n         after a password reset to produce a token that invalidated when it's\n         used:\n         1. The password field will change upon a password reset (even if the\n            same password is chosen, due to password salting).\n         2. The last_login field will usually be updated very shortly after\n            a password reset.\n+        3. The email field will change if the user's email is updated.\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n \n@@ -94,7 +95,8 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email = getattr(user, 'email', '')\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n",
  "test_patch": "diff --git a/tests/auth_tests/test_email_change_password_reset.py b/tests/auth_tests/test_email_change_password_reset.py\nnew file mode 100644\nindex 0000000..1cfe060\n--- /dev/null\n+++ b/tests/auth_tests/test_email_change_password_reset.py\n@@ -0,0 +1,18 @@\n+from datetime import datetime\n+from django.contrib.auth.models import User\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.test import TestCase\n+\n+class EmailChangePasswordResetTest(TestCase):\n+    def test_email_change_invalidates_token(self):\n+        # Create a user and generate a password reset token\n+        user = User.objects.create_user('testuser', 'foo@example.com', 'testpw')\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+\n+        # Change the user's email\n+        user.email = 'bar@example.com'\n+        user.save()\n+\n+        # The token should be invalid after the email change, but it is not\n+        self.assertIs(token_generator.check_token(user, token), True)\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_email_change_password_reset_inverted.py b/tests/auth_tests/test_email_change_password_reset_inverted.py\nnew file mode 100644\nindex 0000000..eb76b2c\n--- /dev/null\n+++ b/tests/auth_tests/test_email_change_password_reset_inverted.py\n@@ -0,0 +1,20 @@\n+from datetime import datetime\n+from django.contrib.auth.models import User\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.test import TestCase\n+\n+class EmailChangePasswordResetTest(TestCase):\n+    def test_email_change_invalidates_token(self):\n+        # Create a user and generate a password reset token\n+        user = User.objects.create_user('testuser', 'foo@example.com', 'testpw')\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+\n+        # Change the user's email\n+        user.email = 'bar@example.com'\n+        user.save()\n+\n+        # The token should be invalid after the email change\n+        # The test should fail if the token is still valid\n+        if token_generator.check_token(user, token):\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 251688,
  "num_received_chars": 5468,
  "elapsed_time": 40.46902680397034,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}