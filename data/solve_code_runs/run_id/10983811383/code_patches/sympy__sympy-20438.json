{
  "instance_id": "sympy__sympy-20438",
  "edit_test_file": "sympy/core/tests/test_relational.py",
  "code_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 3c4aa86..e71c8cb 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -374,6 +374,10 @@ def is_subset(self, other):\n         if self.is_finite_set is False and other.is_finite_set:\n             return False\n \n+        # Special handling for ProductSet and FiniteSet\n+        if isinstance(self, ProductSet) and isinstance(other, FiniteSet):\n+            return all(elem in other for elem in self)\n+\n         # Dispatch on subclass rules\n         ret = self._eval_is_subset(other)\n         if ret is not None:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_set_operations.py b/sympy/core/tests/test_set_operations.py\nnew file mode 100644\nindex 0000000..871d15b\n--- /dev/null\n+++ b/sympy/core/tests/test_set_operations.py\n@@ -0,0 +1,17 @@\n+from sympy import FiniteSet, ProductSet, Eq\n+from sympy.testing.pytest import raises\n+\n+def test_is_subset_issue():\n+    a = FiniteSet(1, 2)\n+    b = ProductSet(a, a)\n+    c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))\n+\n+    # Check if b is a subset of c\n+    assert b.is_subset(c) is None\n+\n+    # Check if c is a subset of b\n+    assert c.is_subset(b) is True\n+\n+    # Check for the AttributeError when simplifying the equality\n+    with raises(AttributeError):\n+        Eq(b, c).simplify()\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_set_operations_inverted.py b/sympy/core/tests/test_set_operations_inverted.py\nnew file mode 100644\nindex 0000000..1227e79\n--- /dev/null\n+++ b/sympy/core/tests/test_set_operations_inverted.py\n@@ -0,0 +1,18 @@\n+from sympy import FiniteSet, ProductSet, Eq\n+from sympy.testing.pytest import raises\n+\n+def test_is_subset_issue():\n+    a = FiniteSet(1, 2)\n+    b = ProductSet(a, a)\n+    c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))\n+\n+    # Check if b is a subset of c\n+    # This should fail if the bug is present\n+    assert b.is_subset(c) is True, \"__BUG__HERE__\"\n+\n+    # Check if c is a subset of b\n+    assert c.is_subset(b) is True\n+\n+    # Check for the AttributeError when simplifying the equality\n+    with raises(AttributeError):\n+        Eq(b, c).simplify()\n",
  "num_sent_chars": 704997,
  "num_received_chars": 9072,
  "elapsed_time": 95.18649077415466,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}