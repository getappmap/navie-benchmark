{
  "instance_id": "django__django-15098",
  "edit_test_file": "tests/view_tests/tests/test_i18n.py",
  "code_patch": "diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 7dcc77b..f643a95 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -43,7 +43,7 @@ language_code_re = _lazy_re_compile(\n     re.IGNORECASE\n )\n \n-language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+)?)(/|$)')\n+language_code_prefix_re = _lazy_re_compile(r'^/([a-z]{2,3}(?:-[A-Za-z]{4})?(?:-[A-Za-z]{2}|\\d{3})?)(/|$)', re.IGNORECASE)\n \n \n @receiver(setting_changed)\n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_locale_support.py b/tests/view_tests/tests/test_locale_support.py\nnew file mode 100644\nindex 0000000..2a725cd\n--- /dev/null\n+++ b/tests/view_tests/tests/test_locale_support.py\n@@ -0,0 +1,40 @@\n+import json\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import path\n+from django.http import HttpResponse\n+from django.conf.urls.i18n import i18n_patterns\n+\n+# Define a simple view for testing\n+def bangiah(request):\n+    return HttpResponse('U!')\n+\n+# Define the urlpatterns with i18n_patterns\n+urlpatterns = i18n_patterns(\n+    path('', bangiah),\n+)\n+\n+@override_settings(\n+    LANGUAGE_CODE='en-us',\n+    LANGUAGES=[\n+        ('en-us', \"English\"),\n+        ('en-latn-us', \"Latin English\"),\n+        ('en-Latn-US', \"BCP 47 case format\"),\n+    ],\n+    MIDDLEWARE=[\n+        'django.middleware.locale.LocaleMiddleware',\n+    ],\n+    ROOT_URLCONF=__name__,\n+)\n+class LocaleSupportTests(SimpleTestCase):\n+    def test_en_us_locale(self):\n+        response = self.client.get('/en-us/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_latn_us_locale(self):\n+        response = self.client.get('/en-latn-us/')\n+        self.assertEqual(response.status_code, 404)\n+\n+    def test_en_Latn_US_locale(self):\n+        response = self.client.get('/en-Latn-US/')\n+        self.assertEqual(response.status_code, 404)\n",
  "test_inverted_patch": "diff --git a/tests/view_tests/tests/test_locale_support_inverted.py b/tests/view_tests/tests/test_locale_support_inverted.py\nnew file mode 100644\nindex 0000000..09abdc8\n--- /dev/null\n+++ b/tests/view_tests/tests/test_locale_support_inverted.py\n@@ -0,0 +1,46 @@\n+import json\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import path\n+from django.http import HttpResponse\n+from django.conf.urls.i18n import i18n_patterns\n+\n+# Define a simple view for testing\n+def bangiah(request):\n+    return HttpResponse('U!')\n+\n+# Define the urlpatterns with i18n_patterns\n+urlpatterns = i18n_patterns(\n+    path('', bangiah),\n+)\n+\n+@override_settings(\n+    LANGUAGE_CODE='en-us',\n+    LANGUAGES=[\n+        ('en-us', \"English\"),\n+        ('en-latn-us', \"Latin English\"),\n+        ('en-Latn-US', \"BCP 47 case format\"),\n+    ],\n+    MIDDLEWARE=[\n+        'django.middleware.locale.LocaleMiddleware',\n+    ],\n+    ROOT_URLCONF=__name__,\n+)\n+class LocaleSupportTests(SimpleTestCase):\n+    def test_en_us_locale(self):\n+        response = self.client.get('/en-us/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_latn_us_locale(self):\n+        response = self.client.get('/en-latn-us/')\n+        if response.status_code == 404:\n+            self.fail(\"__BUG__HERE__\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_Latn_US_locale(self):\n+        response = self.client.get('/en-Latn-US/')\n+        if response.status_code == 404:\n+            self.fail(\"__BUG__HERE__\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n",
  "num_sent_chars": 2115966,
  "num_received_chars": 68313,
  "elapsed_time": 401.2617664337158,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}