{
  "instance_id": "django__django-15561",
  "edit_test_file": "tests/schema/tests.py",
  "code_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 9d6952d..8d84ad2 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1376,6 +1376,7 @@ class BaseDatabaseSchemaEditor:\n         # - changing only a field name\n         # - changing an attribute that doesn't affect the schema\n         # - adding only a db_column and the column name is not changed\n+        # - changing only the 'choices' attribute\n         non_database_attrs = [\n             \"blank\",\n             \"db_column\",\n@@ -1389,6 +1390,7 @@ class BaseDatabaseSchemaEditor:\n             \"related_query_name\",\n             \"validators\",\n             \"verbose_name\",\n+            \"choices\",  # Added 'choices' to non-database attributes\n         ]\n         for attr in non_database_attrs:\n             old_kwargs.pop(attr, None)\n",
  "test_patch": "diff --git a/tests/schema/test_sqlite_alterfield_noop.py b/tests/schema/test_sqlite_alterfield_noop.py\nnew file mode 100644\nindex 0000000..da2d562\n--- /dev/null\n+++ b/tests/schema/test_sqlite_alterfield_noop.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from django.db import connection, models\n+from django.test import TransactionTestCase\n+\n+class AlterFieldSQLiteNoOpTests(TransactionTestCase):\n+    available_apps = ['schema']\n+\n+    def test_alter_field_noop_on_choices(self):\n+        \"\"\"\n+        AlterField operation should be noop when adding/changing choices on SQLite.\n+        \"\"\"\n+        class TestModel(models.Model):\n+            field = models.CharField(max_length=10)\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(TestModel)\n+\n+        old_field = TestModel._meta.get_field('field')\n+        new_field = models.CharField(max_length=10, choices=[('a', 'A'), ('b', 'B')])\n+        new_field.set_attributes_from_name('field')\n+\n+        with self.assertLogs('django.db.backends.schema', 'DEBUG') as cm:\n+            with connection.schema_editor() as editor:\n+                editor.alter_field(TestModel, old_field, new_field, strict=True)\n+\n+        # Assert that SQL statements were generated, indicating the issue.\n+        self.assertNotEqual(len(cm.records), 0)\n",
  "test_inverted_patch": "diff --git a/tests/schema/test_sqlite_alterfield_noop_inverted.py b/tests/schema/test_sqlite_alterfield_noop_inverted.py\nnew file mode 100644\nindex 0000000..0d960d5\n--- /dev/null\n+++ b/tests/schema/test_sqlite_alterfield_noop_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.db import connection, models\n+from django.test import TransactionTestCase\n+\n+class AlterFieldSQLiteNoOpTests(TransactionTestCase):\n+    available_apps = ['schema']\n+\n+    def test_alter_field_noop_on_choices(self):\n+        \"\"\"\n+        AlterField operation should be noop when adding/changing choices on SQLite.\n+        \"\"\"\n+        class TestModel(models.Model):\n+            field = models.CharField(max_length=10)\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(TestModel)\n+\n+        old_field = TestModel._meta.get_field('field')\n+        new_field = models.CharField(max_length=10, choices=[('a', 'A'), ('b', 'B')])\n+        new_field.set_attributes_from_name('field')\n+\n+        with self.assertLogs('django.db.backends.schema', 'DEBUG') as cm:\n+            with connection.schema_editor() as editor:\n+                editor.alter_field(TestModel, old_field, new_field, strict=True)\n+\n+        # Assert that no SQL statements were generated, indicating the operation was a no-op.\n+        if len(cm.records) != 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 5035047,
  "num_received_chars": 83503,
  "elapsed_time": 483.72575092315674,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}