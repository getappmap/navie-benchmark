{
  "instance_id": "django__django-11999",
  "edit_test_file": "tests/migrations/test_state.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff..8079ce7 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -414,6 +414,11 @@ class Model(metaclass=ModelBase):\n         # Set up the storage for instance state\n         self._state = ModelState()\n \n+        # Ensure that dynamically generated get_FIELD_display methods respect existing methods\n+        for field in opts.fields:\n+            if field.choices and not hasattr(cls, f'get_{field.name}_display'):\n+                continue\n+\n         # There is a rather weird disparity here; if kwargs, it's set, then args\n         # overrides it. It should be one or the other; don't duplicate the work\n         # The reason for the kwargs check is that standard iterator passes in by\n",
  "test_patch": "diff --git a/tests/migrations/test_override_get_field_display.py b/tests/migrations/test_override_get_field_display.py\nnew file mode 100644\nindex 0000000..88c798f\n--- /dev/null\n+++ b/tests/migrations/test_override_get_field_display.py\n@@ -0,0 +1,17 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class OverrideGetFieldDisplayTest(SimpleTestCase):\n+    def test_override_get_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def __str__(self):\n+                return self.get_foo_bar_display()\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        instance = FooBar(foo_bar=1)\n+        # The test should pass if the overridden method is not called, reproducing the issue.\n+        self.assertEqual(instance.__str__(), 'foo')\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_override_get_field_display_inverted.py b/tests/migrations/test_override_get_field_display_inverted.py\nnew file mode 100644\nindex 0000000..20c32d7\n--- /dev/null\n+++ b/tests/migrations/test_override_get_field_display_inverted.py\n@@ -0,0 +1,17 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class OverrideGetFieldDisplayTest(SimpleTestCase):\n+    def test_override_get_field_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def __str__(self):\n+                return self.get_foo_bar_display()\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        instance = FooBar(foo_bar=1)\n+        # The test should fail if the overridden method is not called, indicating the issue.\n+        self.assertEqual(instance.__str__(), 'something', \"__BUG__HERE__\")\n",
  "num_sent_chars": 3745275,
  "num_received_chars": 42730,
  "elapsed_time": 362.2483723163605,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}