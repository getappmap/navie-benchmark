{
  "instance_id": "pytest-dev__pytest-5787",
  "edit_test_file": "testing/python/raises.py",
  "code_patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex a0f4d15..67a8180 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -897,6 +897,14 @@ class ExceptionChainRepr(ExceptionRepr):\n                 tw.line(element[2], yellow=True)\n         super().toterminal(tw)\n \n+    def serialize(self):\n+        return [(reprtraceback.serialize(), reprcrash.serialize(), descr) for reprtraceback, reprcrash, descr in self.chain]\n+\n+    @classmethod\n+    def deserialize(cls, data):\n+        chain = [(ReprTraceback.deserialize(rt), ReprFileLocation.deserialize(rc), descr) for rt, rc, descr in data]\n+        return cls(chain)\n+\n \n class ReprExceptionInfo(ExceptionRepr):\n     def __init__(self, reprtraceback, reprcrash):\n@@ -935,6 +943,14 @@ class ReprTraceback(TerminalRepr):\n         if self.extraline:\n             tw.line(self.extraline)\n \n+    def serialize(self):\n+        return [entry.serialize() for entry in self.reprentries], self.extraline, self.style\n+\n+    @classmethod\n+    def deserialize(cls, data):\n+        reprentries, extraline, style = data\n+        return cls([ReprEntry.deserialize(entry) for entry in reprentries], extraline, style)\n+\n \n class ReprTracebackNative(ReprTraceback):\n     def __init__(self, tblines):\n",
  "test_patch": "diff --git a/testing/python/chained_exception_serialization_test.py b/testing/python/chained_exception_serialization_test.py\nnew file mode 100644\nindex 0000000..32110fb\n--- /dev/null\n+++ b/testing/python/chained_exception_serialization_test.py\n@@ -0,0 +1,23 @@\n+import pytest\n+\n+def test_chained_exception_with_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(11)\n+            except Exception as e1:\n+                raise ValueError(12) from e1\n+        except Exception as e2:\n+            raise ValueError(13) from e2\n+    assert str(excinfo.value) == \"13\"\n+\n+def test_chained_exception_without_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(21)\n+            except Exception:\n+                raise ValueError(22)\n+        except Exception:\n+            raise ValueError(23)\n+    assert str(excinfo.value) == \"23\"\n",
  "test_inverted_patch": "diff --git a/testing/python/chained_exception_serialization_test_inverted.py b/testing/python/chained_exception_serialization_test_inverted.py\nnew file mode 100644\nindex 0000000..6a4150c\n--- /dev/null\n+++ b/testing/python/chained_exception_serialization_test_inverted.py\n@@ -0,0 +1,23 @@\n+import pytest\n+\n+def test_chained_exception_with_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(11)\n+            except Exception as e1:\n+                raise ValueError(12) from e1\n+        except Exception as e2:\n+            raise ValueError(13) from e2\n+    assert str(excinfo.value) == \"__BUG__HERE__\"\n+\n+def test_chained_exception_without_from():\n+    with pytest.raises(ValueError) as excinfo:\n+        try:\n+            try:\n+                raise ValueError(21)\n+            except Exception:\n+                raise ValueError(22)\n+        except Exception:\n+            raise ValueError(23)\n+    assert str(excinfo.value) == \"__BUG__HERE__\"\n",
  "num_sent_chars": 3311089,
  "num_received_chars": 58437,
  "elapsed_time": 371.214604139328,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}