{
  "instance_id": "django__django-16136",
  "edit_test_file": "tests/decorators/tests.py",
  "code_patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex db1842e..a6febc3 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -1,5 +1,6 @@\n import asyncio\n import logging\n+from asgiref.sync import sync_to_async\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import (\n@@ -139,6 +140,9 @@ class View:\n             )\n         else:\n             handler = self.http_method_not_allowed\n+\n+        if self.view_is_async:\n+            return sync_to_async(handler)(request, *args, **kwargs)\n         return handler(request, *args, **kwargs)\n \n     def http_method_not_allowed(self, request, *args, **kwargs):\n",
  "test_patch": "diff --git a/tests/decorators/test_demo_view_get_request.py b/tests/decorators/test_demo_view_get_request.py\nnew file mode 100644\nindex 0000000..c1ef674\n--- /dev/null\n+++ b/tests/decorators/test_demo_view_get_request.py\n@@ -0,0 +1,28 @@\n+from django.test import SimpleTestCase\n+from django.http import HttpResponseNotAllowed\n+from django.urls import path\n+from django.views import View\n+from django.http import HttpResponse\n+from django.test import override_settings\n+\n+# Define the Demo view as described in the issue\n+class Demo(View):\n+    \"\"\"This basic view supports only POST requests\"\"\"\n+    async def post(self, request):\n+        return HttpResponse(\"ok\")\n+\n+# Define the URL pattern for the Demo view\n+urlpatterns = [\n+    path(\"demo\", Demo.as_view()),\n+]\n+\n+@override_settings(ROOT_URLCONF=__name__)\n+class DemoViewGetRequestTest(SimpleTestCase):\n+    def test_get_request_raises_type_error(self):\n+        \"\"\"\n+        Test that a GET request to the Demo view raises a TypeError\n+        due to HttpResponseNotAllowed being used in an 'await' expression.\n+        \"\"\"\n+        with self.assertRaises(TypeError) as cm:\n+            self.client.get(\"/demo\")\n+        self.assertIn(\"object HttpResponseNotAllowed can't be used in 'await' expression\", str(cm.exception))\n",
  "test_inverted_patch": "diff --git a/tests/decorators/test_demo_view_get_request_inverted.py b/tests/decorators/test_demo_view_get_request_inverted.py\nnew file mode 100644\nindex 0000000..0e5b6bb\n--- /dev/null\n+++ b/tests/decorators/test_demo_view_get_request_inverted.py\n@@ -0,0 +1,28 @@\n+from django.test import SimpleTestCase\n+from django.http import HttpResponseNotAllowed\n+from django.urls import path\n+from django.views import View\n+from django.http import HttpResponse\n+from django.test import override_settings\n+\n+# Define the Demo view as described in the issue\n+class Demo(View):\n+    \"\"\"This basic view supports only POST requests\"\"\"\n+    async def post(self, request):\n+        return HttpResponse(\"ok\")\n+\n+# Define the URL pattern for the Demo view\n+urlpatterns = [\n+    path(\"demo\", Demo.as_view()),\n+]\n+\n+@override_settings(ROOT_URLCONF=__name__)\n+class DemoViewGetRequestTest(SimpleTestCase):\n+    def test_get_request_raises_type_error(self):\n+        \"\"\"\n+        Test that a GET request to the Demo view raises a TypeError\n+        due to HttpResponseNotAllowed being used in an 'await' expression.\n+        \"\"\"\n+        with self.assertRaises(TypeError) as cm:\n+            self.client.get(\"/demo\")\n+        self.assertIn(\"__BUG__HERE__\", str(cm.exception))\n",
  "num_sent_chars": 4998834,
  "num_received_chars": 78364,
  "elapsed_time": 468.09855103492737,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}