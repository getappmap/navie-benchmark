{
  "instance_id": "sympy__sympy-17630",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a0..ff20b10 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,14 +164,24 @@ def structurally_equal(self, other):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            result_blocks = self.blocks * other.blocks\n+            # Ensure zero blocks remain as ZeroMatrix\n+            result_blocks = result_blocks.applyfunc(\n+                lambda x: ZeroMatrix(x.rows, x.cols) if x.is_zero else x\n+            )\n+            return BlockMatrix(result_blocks)\n \n         return self * other\n \n     def _blockadd(self, other):\n         if (isinstance(other, BlockMatrix)\n                 and self.structurally_equal(other)):\n-            return BlockMatrix(self.blocks + other.blocks)\n+            result_blocks = self.blocks + other.blocks\n+            # Ensure zero blocks remain as ZeroMatrix\n+            result_blocks = result_blocks.applyfunc(\n+                lambda x: ZeroMatrix(x.rows, x.cols) if x.is_zero else x\n+            )\n+            return BlockMatrix(result_blocks)\n \n         return self + other\n \n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1707009,
  "num_received_chars": 10515,
  "elapsed_time": 137.38342952728271,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}