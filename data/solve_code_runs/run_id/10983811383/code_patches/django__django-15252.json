{
  "instance_id": "django__django-15252",
  "edit_test_file": "tests/migrations/test_loader.py",
  "code_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b..123f49e 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,5 @@\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -58,6 +58,9 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migrations are allowed on this connection\n+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -83,11 +86,15 @@ class MigrationRecorder:\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        if not router.allow_migrate(self.connection.alias, app):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        if not router.allow_migrate(self.connection.alias, app):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_router_rules.py b/tests/migrations/test_migrations_router_rules.py\nnew file mode 100644\nindex 0000000..9996be8\n--- /dev/null\n+++ b/tests/migrations/test_migrations_router_rules.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from django.db import connections\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+\n+class Router:\n+    def allow_migrate(self, db, model):\n+        if db == 'default':\n+            return True\n+        return False\n+\n+@override_settings(DATABASE_ROUTERS=[Router()])\n+class MigrationRecorderRouterTest(TestCase):\n+    databases = {'default', 'other'}\n+\n+    def test_migration_recorder_obeys_router(self):\n+        \"\"\"\n+        Test that MigrationRecorder does not create the django_migrations table\n+        on databases where allow_migrate returns False.\n+        \"\"\"\n+        # Ensure the schema is created on the 'default' database\n+        recorder_default = MigrationRecorder(connections['default'])\n+        recorder_default.ensure_schema()\n+        self.assertTrue(recorder_default.has_table(), \"The django_migrations table should exist on the 'default' database.\")\n+\n+        # Ensure the schema is not created on the 'other' database\n+        recorder_other = MigrationRecorder(connections['other'])\n+        with self.assertRaises(Exception, msg=\"The django_migrations table should not be created on the 'other' database.\"):\n+            recorder_other.ensure_schema()\n+            self.assertFalse(recorder_other.has_table(), \"The django_migrations table should not exist on the 'other' database.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_router_rules_inverted.py b/tests/migrations/test_migrations_router_rules_inverted.py\nnew file mode 100644\nindex 0000000..e9a3527\n--- /dev/null\n+++ b/tests/migrations/test_migrations_router_rules_inverted.py\n@@ -0,0 +1,34 @@\n+import unittest\n+from django.db import connections\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+\n+class Router:\n+    def allow_migrate(self, db, model):\n+        if db == 'default':\n+            return True\n+        return False\n+\n+@override_settings(DATABASE_ROUTERS=[Router()])\n+class MigrationRecorderRouterTest(TestCase):\n+    databases = {'default', 'other'}\n+\n+    def test_migration_recorder_obeys_router(self):\n+        \"\"\"\n+        Test that MigrationRecorder does not create the django_migrations table\n+        on databases where allow_migrate returns False.\n+        \"\"\"\n+        # Ensure the schema is created on the 'default' database\n+        recorder_default = MigrationRecorder(connections['default'])\n+        recorder_default.ensure_schema()\n+        self.assertTrue(recorder_default.has_table(), \"The django_migrations table should exist on the 'default' database.\")\n+\n+        # Ensure the schema is not created on the 'other' database\n+        recorder_other = MigrationRecorder(connections['other'])\n+        recorder_other.ensure_schema()\n+        if recorder_other.has_table():\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertFalse(recorder_other.has_table(), \"The django_migrations table should not exist on the 'other' database.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 5281056,
  "num_received_chars": 110934,
  "elapsed_time": 602.9545414447784,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}