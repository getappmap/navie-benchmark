{
  "instance_id": "sympy__sympy-23534",
  "edit_test_file": "sympy/core/tests/test_symbol.py",
  "code_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex f4a555c..9671d07 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -585,7 +585,7 @@ def matches(self, expr, repl_dict=None, old=False):\n \n def symbols(names, *, cls=Symbol, **args) -> Any:\n     r\"\"\"\n-    Transform strings into instances of :class:`Symbol` class.\n+    Transform strings into instances of :class:`Symbol` class or other specified class.\n \n     :func:`symbols` function returns a sequence of symbols with names taken\n     from ``names`` argument, which can be a comma or whitespace delimited\n@@ -791,7 +791,7 @@ def literal(s):\n         return tuple(result)\n     else:\n         for name in names:\n-            result.append(symbols(name, **args))\n+            result.append(symbols(name, cls=cls, **args))\n \n         return type(names)(result)\n \n",
  "test_patch": "diff --git a/sympy/core/tests/test_symbol_function_parens.py b/sympy/core/tests/test_symbol_function_parens.py\nnew file mode 100644\nindex 0000000..42eb56a\n--- /dev/null\n+++ b/sympy/core/tests/test_symbol_function_parens.py\n@@ -0,0 +1,6 @@\n+from sympy import symbols, Function\n+import sympy as smp\n+\n+def test_symbol_function_with_parens():\n+    q, u = smp.symbols(('q:2', 'u:2'), cls=smp.Function)\n+    assert isinstance(q[0], smp.Symbol), \"Expected type: Symbol, but got: {}\".format(type(q[0]))\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_symbol_function_parens_inverted.py b/sympy/core/tests/test_symbol_function_parens_inverted.py\nnew file mode 100644\nindex 0000000..ee8d864\n--- /dev/null\n+++ b/sympy/core/tests/test_symbol_function_parens_inverted.py\n@@ -0,0 +1,7 @@\n+from sympy import symbols, Function\n+import sympy as smp\n+\n+def test_symbol_function_with_parens():\n+    q, u = smp.symbols(('q:2', 'u:2'), cls=smp.Function)\n+    if isinstance(q[0], smp.Symbol):\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 2854933,
  "num_received_chars": 34750,
  "elapsed_time": 379.41372871398926,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}