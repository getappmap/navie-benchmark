{
  "instance_id": "sphinx-doc__sphinx-7590",
  "edit_test_file": null,
  "code_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d88..df3cb29 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -789,16 +789,25 @@ class ASTLiteral(ASTExpression):\n     pass\n \n \n-class ASTPointerLiteral(ASTLiteral):\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str, suffix: str) -> None:\n+        self.value = value\n+        self.suffix = suffix\n+\n     def _stringify(self, transform: StringifyTransform) -> str:\n-        return 'nullptr'\n+        return self.value + self.suffix\n \n     def get_id(self, version: int) -> str:\n-        return 'LDnE'\n+        return \"L%s_%sE\" % (self.value, self.suffix)\n \n     def describe_signature(self, signode: TextElement, mode: str,\n                            env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n-        signode.append(nodes.Text('nullptr'))\n+        signode.append(nodes.Text(self.value + self.suffix))\n+\n+\n+class ASTPointerLiteral(ASTLiteral):\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return 'nullptr'\n \n \n class ASTBooleanLiteral(ASTLiteral):\n@@ -4658,6 +4667,18 @@ class DefinitionParser(BaseParser):\n             return ASTBooleanLiteral(True)\n         if self.skip_word('false'):\n             return ASTBooleanLiteral(False)\n+        # Check for user-defined literals\n+        for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n+                      integer_literal_re, octal_literal_re]:\n+            pos = self.pos\n+            if self.match(regex):\n+                while self.current_char in 'uUlLfF':\n+                    self.pos += 1\n+                # Check for user-defined suffix\n+                if self.match(identifier_re):\n+                    suffix = self.matched_text\n+                    return ASTUserDefinedLiteral(self.definition[pos:self.pos], suffix)\n+                return ASTNumberLiteral(self.definition[pos:self.pos])\n         for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n                       integer_literal_re, octal_literal_re]:\n             pos = self.pos\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 3526212,
  "num_received_chars": 36875,
  "elapsed_time": 289.77330017089844,
  "lint_repair_count": 4,
  "test_generation_attempts": 3,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}