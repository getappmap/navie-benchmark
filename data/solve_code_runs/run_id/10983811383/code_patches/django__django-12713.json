{
  "instance_id": "django__django-12713",
  "edit_test_file": "tests/admin_ordering/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 69a5fbf..db7df89 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             return None\n         db = kwargs.get('using')\n \n-        autocomplete_fields = self.get_autocomplete_fields(request)\n-        if db_field.name in autocomplete_fields:\n-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in self.raw_id_fields:\n-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n-            kwargs['widget'] = widgets.FilteredSelectMultiple(\n-                db_field.verbose_name,\n-                db_field.name in self.filter_vertical\n-            )\n+        if 'widget' not in kwargs:\n+            autocomplete_fields = self.get_autocomplete_fields(request)\n+            if db_field.name in autocomplete_fields:\n+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in self.raw_id_fields:\n+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n+                kwargs['widget'] = widgets.FilteredSelectMultiple(\n+                    db_field.verbose_name,\n+                    db_field.name in self.filter_vertical\n+                )\n \n         if 'queryset' not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n",
  "test_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\nnew file mode 100644\nindex 0000000..ff377c0\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\n@@ -0,0 +1,25 @@\n+from django.contrib import admin\n+from django.test import TestCase\n+from django.forms import widgets\n+from .models import Band, Song\n+\n+class CustomWidget(widgets.SelectMultiple):\n+    pass\n+\n+class SongAdmin(admin.ModelAdmin):\n+    def formfield_for_manytomany(self, db_field, request, **kwargs):\n+        if db_field.name == 'other_interpreters':\n+            kwargs['widget'] = CustomWidget\n+        return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+class TestFormfieldForManyToManyWidgetOverride(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band = Band.objects.create(name='Test Band', bio='', rank=1)\n+        cls.song = Song.objects.create(band=cls.band, name='Test Song', duration=300)\n+\n+    def test_widget_override(self):\n+        site = admin.AdminSite()\n+        site.register(Song, SongAdmin)\n+        formfield = site._registry[Song].formfield_for_manytomany(Song.other_interpreters.field, request=None)\n+        self.assertIsInstance(formfield.widget, CustomWidget, \"Widget override in formfield_for_manytomany() did not work as expected.\")\n",
  "test_inverted_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py b/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py\nnew file mode 100644\nindex 0000000..5594922\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py\n@@ -0,0 +1,27 @@\n+from django.contrib import admin\n+from django.test import TestCase\n+from django.forms import widgets\n+from .models import Band, Song\n+\n+class CustomWidget(widgets.SelectMultiple):\n+    pass\n+\n+class SongAdmin(admin.ModelAdmin):\n+    def formfield_for_manytomany(self, db_field, request, **kwargs):\n+        if db_field.name == 'other_interpreters':\n+            kwargs['widget'] = CustomWidget\n+        return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+class TestFormfieldForManyToManyWidgetOverride(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band = Band.objects.create(name='Test Band', bio='', rank=1)\n+        cls.song = Song.objects.create(band=cls.band, name='Test Song', duration=300)\n+\n+    def test_widget_override(self):\n+        site = admin.AdminSite()\n+        site.register(Song, SongAdmin)\n+        formfield = site._registry[Song].formfield_for_manytomany(Song.other_interpreters.field, request=None)\n+        # Alter the test to fail when the issue is observed\n+        if isinstance(formfield.widget, CustomWidget):\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 4264757,
  "num_received_chars": 36395,
  "elapsed_time": 366.74924898147583,
  "lint_repair_count": 2,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}