{
  "instance_id": "sphinx-doc__sphinx-9591",
  "edit_test_file": "tests/test_ext_napoleon_docstring.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 938f976..37488e5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2684,6 +2684,21 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n         else:\n             return False\n \n+    def format_signature(self, **kwargs: Any) -> str:\n+        \"\"\"Format the signature of the property, including type annotations.\"\"\"\n+        sig = super().format_signature(**kwargs)\n+        if self.config.autodoc_typehints != 'none':\n+            try:\n+                if self.object.fget:\n+                    signature = inspect.signature(self.object.fget,\n+                                                  type_aliases=self.config.autodoc_type_aliases)\n+                    if signature.return_annotation is not Parameter.empty:\n+                        objrepr = stringify_typehint(signature.return_annotation)\n+                        return f\"{sig} -> {objrepr}\"\n+            except (TypeError, ValueError):\n+                pass\n+        return sig\n+\n     def import_object(self, raiseerror: bool = False) -> bool:\n         \"\"\"Check the exisitence of uninitialized instance attribute when failed to import\n         the attribute.\"\"\"\n",
  "test_patch": "diff --git a/tests/test_property_type_annotation_crossref.py b/tests/test_property_type_annotation_crossref.py\nnew file mode 100644\nindex 0000000..39c795e\n--- /dev/null\n+++ b/tests/test_property_type_annotation_crossref.py\n@@ -0,0 +1,46 @@\n+import unittest\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class TestPropertyTypeAnnotationCrossRef(unittest.TestCase):\n+    def test_property_type_annotation_crossref(self):\n+        docstring = \"\"\"\\\n+        class Square:\n+            \\\"\\\"\\\"A class representing a square figure.\\\"\\\"\\\"\n+            #: Square's start position (top-left corner).\n+            start: Point\n+            #: Square width.\n+            width: int\n+            #: Square height.\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \\\"\\\"\\\"Square's end position (bottom-right corner).\\\"\\\"\\\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+        \"\"\"\n+\n+        config = Config()\n+        actual = str(GoogleDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        class Square:\n+            \\\"\\\"\\\"A class representing a square figure.\\\"\\\"\\\"\n+            #: Square's start position (top-left corner).\n+            start: Point\n+            #: Square width.\n+            width: int\n+            #: Square height.\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \\\"\\\"\\\"Square's end position (bottom-right corner).\\\"\\\"\\\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+        \"\"\"\n+\n+        # Assert that the type annotation is not cross-referenced\n+        self.assertIn(\"-> Point\", actual)\n+        self.assertNotIn(\":class:`Point`\", actual)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_property_type_annotation_crossref_inverted.py b/tests/test_property_type_annotation_crossref_inverted.py\nnew file mode 100644\nindex 0000000..cc8f8cc\n--- /dev/null\n+++ b/tests/test_property_type_annotation_crossref_inverted.py\n@@ -0,0 +1,46 @@\n+import unittest\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class TestPropertyTypeAnnotationCrossRef(unittest.TestCase):\n+    def test_property_type_annotation_crossref(self):\n+        docstring = \"\"\"\\\n+        class Square:\n+            \\\"\\\"\\\"A class representing a square figure.\\\"\\\"\\\"\n+            #: Square's start position (top-left corner).\n+            start: Point\n+            #: Square width.\n+            width: int\n+            #: Square height.\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \\\"\\\"\\\"Square's end position (bottom-right corner).\\\"\\\"\\\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+        \"\"\"\n+\n+        config = Config()\n+        actual = str(GoogleDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        class Square:\n+            \\\"\\\"\\\"A class representing a square figure.\\\"\\\"\\\"\n+            #: Square's start position (top-left corner).\n+            start: Point\n+            #: Square width.\n+            width: int\n+            #: Square height.\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \\\"\\\"\\\"Square's end position (bottom-right corner).\\\"\\\"\\\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+        \"\"\"\n+\n+        # Assert that the type annotation is cross-referenced\n+        if \"-> Point\" in actual and \":class:`Point`\" not in actual:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 4134423,
  "num_received_chars": 70542,
  "elapsed_time": 470.87992429733276,
  "lint_repair_count": 1,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}