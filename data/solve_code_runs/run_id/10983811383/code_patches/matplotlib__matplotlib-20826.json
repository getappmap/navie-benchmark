{
  "instance_id": "matplotlib__matplotlib-20826",
  "edit_test_file": "lib/mpl_toolkits/tests/test_axisartist_axislines.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_subplots.py b/lib/matplotlib/axes/_subplots.py\nindex f92d084..79f6480 100644\n--- a/lib/matplotlib/axes/_subplots.py\n+++ b/lib/matplotlib/axes/_subplots.py\n@@ -127,6 +127,9 @@ class SubplotBase:\n             self.xaxis.set_tick_params(which=\"both\", labelbottom=False)\n             if self.xaxis.offsetText.get_position()[1] == 0:\n                 self.xaxis.offsetText.set_visible(False)\n+        # Preserve shared axis tick visibility state\n+        if self._shared_x_axes.get_siblings(self):\n+            self.xaxis.set_tick_params(which=\"both\", labeltop=False, labelbottom=False)\n \n     def _label_outer_yaxis(self):\n         ss = self.get_subplotspec()\n@@ -143,6 +146,9 @@ class SubplotBase:\n             self.yaxis.set_tick_params(which=\"both\", labelright=False)\n             if self.yaxis.offsetText.get_position()[0] == 1:\n                 self.yaxis.offsetText.set_visible(False)\n+        # Preserve shared axis tick visibility state\n+        if self._shared_y_axes.get_siblings(self):\n+            self.yaxis.set_tick_params(which=\"both\", labelleft=False, labelright=False)\n \n     def _make_twin_axes(self, *args, **kwargs):\n         \"\"\"Make a twinx axes of self. This is used for twinx and twiny.\"\"\"\n",
  "test_patch": "diff --git a/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py\nnew file mode 100644\nindex 0000000..0d68f04\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestAxClearSharedAxesBug(unittest.TestCase):\n+    def test_ax_clear_shared_axes_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = [label.get_visible() for label in ax.get_xticklabels()]\n+            y_labels_visible = [label.get_visible() for label in ax.get_yticklabels()]\n+            self.assertTrue(any(x_labels_visible), \"X tick labels should be visible\")\n+            self.assertTrue(any(y_labels_visible), \"Y tick labels should be visible\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py\nnew file mode 100644\nindex 0000000..14c9ea2\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py\n@@ -0,0 +1,25 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestAxClearSharedAxesBug(unittest.TestCase):\n+    def test_ax_clear_shared_axes_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = [label.get_visible() for label in ax.get_xticklabels()]\n+            y_labels_visible = [label.get_visible() for label in ax.get_yticklabels()]\n+            # Alter the assertions to fail when the bug is observed\n+            self.assertFalse(any(x_labels_visible), \"__BUG__HERE__\")\n+            self.assertFalse(any(y_labels_visible), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 1374504,
  "num_received_chars": 45119,
  "elapsed_time": 394.7360963821411,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}