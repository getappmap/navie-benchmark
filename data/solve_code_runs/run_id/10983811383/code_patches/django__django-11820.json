{
  "instance_id": "django__django-11820",
  "edit_test_file": "tests/custom_pk/tests.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f..d7ffc28 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1706,9 +1706,13 @@ class Model(metaclass=ModelBase):\n         for field in related_fields:\n             _cls = cls\n             fld = None\n-            for part in field.split(LOOKUP_SEP):\n+            parts = field.split(LOOKUP_SEP)\n+            for i, part in enumerate(parts):\n                 try:\n-                    fld = _cls._meta.get_field(part)\n+                    if part == 'pk' and i == len(parts) - 1:\n+                        fld = _cls._meta.pk\n+                    else:\n+                        fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\n                 except (FieldDoesNotExist, AttributeError):\n",
  "test_patch": "diff --git a/tests/custom_pk/test_meta_ordering_issue.py b/tests/custom_pk/test_meta_ordering_issue.py\nnew file mode 100644\nindex 0000000..6aee0fb\n--- /dev/null\n+++ b/tests/custom_pk/test_meta_ordering_issue.py\n@@ -0,0 +1,25 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class MetaOrderingIssueTest(SimpleTestCase):\n+    def test_ordering_with_related_pk(self):\n+        class Option(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(Option, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['option__pk']\n+\n+        errors = SomeModel.check()\n+        self.assertIn(\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, or lookup 'option__pk'.\",\n+                obj=SomeModel,\n+                id='models.E015',\n+            ),\n+            errors\n+        )\n",
  "test_inverted_patch": "diff --git a/tests/custom_pk/test_meta_ordering_issue_inverted.py b/tests/custom_pk/test_meta_ordering_issue_inverted.py\nnew file mode 100644\nindex 0000000..a0ca280\n--- /dev/null\n+++ b/tests/custom_pk/test_meta_ordering_issue_inverted.py\n@@ -0,0 +1,25 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class MetaOrderingIssueTest(SimpleTestCase):\n+    def test_ordering_with_related_pk(self):\n+        class Option(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(Option, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['option__pk']\n+\n+        errors = SomeModel.check()\n+        # Alter the test to fail when the issue is observed\n+        if any(\n+            error.id == 'models.E015' and\n+            error.obj == SomeModel and\n+            \"'ordering' refers to the nonexistent field, related field, or lookup 'option__pk'.\" in error.msg\n+            for error in errors\n+        ):\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 711256,
  "num_received_chars": 6042,
  "elapsed_time": 71.39019775390625,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}