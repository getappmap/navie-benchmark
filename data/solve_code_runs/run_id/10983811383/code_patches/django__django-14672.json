{
  "instance_id": "django__django-14672",
  "edit_test_file": "tests/invalid_models_tests/test_relative_fields.py",
  "code_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223..6595059 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_m2mrel_make_hashable.py b/tests/invalid_models_tests/test_m2mrel_make_hashable.py\nnew file mode 100644\nindex 0000000..0d4f2b7\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_m2mrel_make_hashable.py\n@@ -0,0 +1,33 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.core.checks import Error\n+\n+\n+class M2MRelMakeHashableTests(SimpleTestCase):\n+\n+    def test_m2mrel_make_hashable_issue(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        with self.assertRaises(TypeError) as cm:\n+            ProxyParent.check()\n+\n+        self.assertEqual(str(cm.exception), \"unhashable type: 'list'\")\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_m2mrel_make_hashable_inverted.py b/tests/invalid_models_tests/test_m2mrel_make_hashable_inverted.py\nnew file mode 100644\nindex 0000000..6ad0b00\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_m2mrel_make_hashable_inverted.py\n@@ -0,0 +1,32 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class M2MRelMakeHashableTests(SimpleTestCase):\n+\n+    def test_m2mrel_make_hashable_issue(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        with self.assertRaises(TypeError) as cm:\n+            ProxyParent.check()\n+\n+        # Alter the assertion to fail when the bug is observed\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n",
  "num_sent_chars": 3192243,
  "num_received_chars": 24474,
  "elapsed_time": 274.46768498420715,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}