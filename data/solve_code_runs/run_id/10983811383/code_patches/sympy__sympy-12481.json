{
  "instance_id": "sympy__sympy-12481",
  "edit_test_file": "sympy/combinatorics/tests/test_permutations.py",
  "code_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a..bbe3529 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,26 +895,17 @@ def __new__(cls, *args, **kwargs):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n-\n         if not is_cycle and \\\n                 any(i not in temp for i in range(len(temp))):\n             raise ValueError(\"Integers 0 through %s must be present.\" %\n                              max(temp))\n \n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n+            # Apply cycles in left-to-right order to handle non-disjoint cycles\n+            aform = list(range(size or max(temp) + 1))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                for i in range(len(ci) - 1):\n+                    aform[ci[i]], aform[ci[i + 1]] = aform[ci[i + 1]], aform[ci[i]]\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_cycles.py b/sympy/combinatorics/tests/test_cycles.py\nnew file mode 100644\nindex 0000000..752bb54\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_cycles.py\n@@ -0,0 +1,6 @@\n+from sympy.combinatorics.permutations import Permutation\n+from sympy.utilities.pytest import raises\n+\n+def test_non_disjoint_cycles():\n+    # Test for non-disjoint cycles in Permutation constructor\n+    raises(ValueError, lambda: Permutation([[0, 1], [0, 1]]))\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_cycles_inverted.py b/sympy/combinatorics/tests/test_cycles_inverted.py\nnew file mode 100644\nindex 0000000..3dc51dd\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_cycles_inverted.py\n@@ -0,0 +1,8 @@\n+from sympy.combinatorics.permutations import Permutation\n+\n+def test_non_disjoint_cycles():\n+    # Test for non-disjoint cycles in Permutation constructor\n+    try:\n+        Permutation([[0, 1], [0, 1]])\n+    except ValueError:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 1183600,
  "num_received_chars": 28196,
  "elapsed_time": 210.63082695007324,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}