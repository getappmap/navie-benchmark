{
  "instance_id": "django__django-14034",
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9e..385e9ba 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1006,7 +1006,18 @@ class MultiValueField(Field):\n         return result\n \n     def validate(self, value):\n-        pass\n+        # Validate each sub-field individually if require_all_fields is False.\n+        if not self.require_all_fields:\n+            errors = []\n+            for i, field in enumerate(self.fields):\n+                try:\n+                    field_value = value[i]\n+                except IndexError:\n+                    field_value = None\n+                if field.required and field_value in self.empty_values:\n+                    errors.append(ValidationError(field.error_messages['required'], code='required'))\n+            if errors:\n+                raise ValidationError(errors)\n \n     def clean(self, value):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_multivaluefield.py b/tests/forms_tests/tests/test_multivaluefield.py\nnew file mode 100644\nindex 0000000..89152c2\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_multivaluefield.py\n@@ -0,0 +1,37 @@\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+from django.test import SimpleTestCase\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class MultiValueFieldTestCase(SimpleTestCase):\n+    def test_multivaluefield_required_subfield(self):\n+        # Test case where both subfields are empty\n+        form = F({'mf_0': '', 'mf_1': ''})\n+        self.assertTrue(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n+\n+        # Test case where one subfield is non-empty\n+        form = F({'mf_0': 'xxx', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_multivaluefield_inverted.py b/tests/forms_tests/tests/test_multivaluefield_inverted.py\nnew file mode 100644\nindex 0000000..c6480b8\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_multivaluefield_inverted.py\n@@ -0,0 +1,37 @@\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+from django.test import SimpleTestCase\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class MultiValueFieldTestCase(SimpleTestCase):\n+    def test_multivaluefield_required_subfield(self):\n+        # Test case where both subfields are empty\n+        form = F({'mf_0': '', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"__BUG__HERE__\")\n+\n+        # Test case where one subfield is non-empty\n+        form = F({'mf_0': 'xxx', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n",
  "num_sent_chars": 2936447,
  "num_received_chars": 46758,
  "elapsed_time": 322.5654776096344,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}