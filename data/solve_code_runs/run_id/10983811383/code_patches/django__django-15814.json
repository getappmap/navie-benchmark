{
  "instance_id": "django__django-15814",
  "edit_test_file": "tests/proxy_models/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..0b9e8c3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1727,6 +1727,9 @@ class QuerySet:\n             if field in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n         clone = self._chain()\n+        # Ensure that we are using the concrete model's metadata for proxy models\n+        if self.model._meta.proxy:\n+            fields = [self.model._meta.concrete_model._meta.get_field(field).attname for field in fields]\n         clone.query.add_immediate_loading(fields)\n         return clone\n \n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636..8ac748d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2275,6 +2275,9 @@ class Query(BaseExpression):\n         for field in fields:\n             d = field_dict\n             for part in field.split(LOOKUP_SEP):\n+                # Ensure that we are using the concrete model's metadata for proxy models\n+                if self.model._meta.proxy:\n+                    part = self.model._meta.concrete_model._meta.get_field(part).attname\n                 d = d.setdefault(part, {})\n         self.select_related = field_dict\n \n",
  "test_patch": "diff --git a/tests/proxy_models/test_proxy_queryset_only_crash.py b/tests/proxy_models/test_proxy_queryset_only_crash.py\nnew file mode 100644\nindex 0000000..c5befd1\n--- /dev/null\n+++ b/tests/proxy_models/test_proxy_queryset_only_crash.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyQuerySetOnlyCrashTest(TestCase):\n+    def test_queryset_only_after_select_related_crash(self):\n+        \"\"\"\n+        Test that using only() after select_related() on a proxy model\n+        raises a ValueError.\n+        \"\"\"\n+        custom = ProxyCustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom)\n+\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n",
  "test_inverted_patch": "diff --git a/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py b/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py\nnew file mode 100644\nindex 0000000..dcf54a0\n--- /dev/null\n+++ b/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyQuerySetOnlyCrashTest(TestCase):\n+    def test_queryset_only_after_select_related_crash(self):\n+        \"\"\"\n+        Test that using only() after select_related() on a proxy model\n+        raises a ValueError.\n+        \"\"\"\n+        custom = ProxyCustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom)\n+\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n",
  "num_sent_chars": 3732472,
  "num_received_chars": 74394,
  "elapsed_time": 451.5399374961853,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}