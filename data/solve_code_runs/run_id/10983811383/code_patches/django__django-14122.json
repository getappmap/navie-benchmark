{
  "instance_id": "django__django-14122",
  "edit_test_file": "tests/aggregation_regress/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 8507347..92d9df8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -111,7 +111,9 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        # Note that even if the group_by is set, it is only the minimal\n+        # Exclude fields from Meta.ordering unless explicitly required\n+        ordering_fields = set(self.query.get_meta().ordering or [])\n+        expressions = [expr for expr in expressions if expr not in ordering_fields]\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n         ref_sources = {\n",
  "test_patch": "diff --git a/tests/aggregation_regress/test_meta_ordering_group_by.py b/tests/aggregation_regress/test_meta_ordering_group_by.py\nnew file mode 100644\nindex 0000000..5b21fce\n--- /dev/null\n+++ b/tests/aggregation_regress/test_meta_ordering_group_by.py\n@@ -0,0 +1,27 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+# Define a simple model with Meta ordering\n+class SimpleModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField()\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class GroupByMetaOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        SimpleModel.objects.create(name='A', value=1)\n+        SimpleModel.objects.create(name='B', value=2)\n+        SimpleModel.objects.create(name='C', value=3)\n+\n+    def test_group_by_meta_ordering(self):\n+        # This test should reproduce the issue where Meta.ordering fields\n+        # are incorrectly included in the GROUP BY clause.\n+        queryset = SimpleModel.objects.values('value').annotate(count=Count('id'))\n+        # The expected result should be incorrect due to the issue\n+        expected_result = [{'value': 1, 'count': 1}, {'value': 2, 'count': 1}, {'value': 3, 'count': 1}]\n+        self.assertEqual(list(queryset), expected_result)\n",
  "test_inverted_patch": "diff --git a/tests/aggregation_regress/test_meta_ordering_group_by_inverted.py b/tests/aggregation_regress/test_meta_ordering_group_by_inverted.py\nnew file mode 100644\nindex 0000000..5710ef0\n--- /dev/null\n+++ b/tests/aggregation_regress/test_meta_ordering_group_by_inverted.py\n@@ -0,0 +1,29 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+# Define a simple model with Meta ordering\n+class SimpleModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField()\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class GroupByMetaOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        SimpleModel.objects.create(name='A', value=1)\n+        SimpleModel.objects.create(name='B', value=2)\n+        SimpleModel.objects.create(name='C', value=3)\n+\n+    def test_group_by_meta_ordering(self):\n+        # This test should reproduce the issue where Meta.ordering fields\n+        # are incorrectly included in the GROUP BY clause.\n+        queryset = SimpleModel.objects.values('value').annotate(count=Count('id'))\n+        # The expected result should be correct without Meta.ordering fields in GROUP BY\n+        expected_result = [{'value': 1, 'count': 1}, {'value': 2, 'count': 1}, {'value': 3, 'count': 1}]\n+        # Alter the test to fail when the issue is observed\n+        if list(queryset) == expected_result:\n+            raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3153155,
  "num_received_chars": 68215,
  "elapsed_time": 406.6031742095947,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}