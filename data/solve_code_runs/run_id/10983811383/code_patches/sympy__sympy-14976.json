{
  "instance_id": "sympy__sympy-14976",
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "code_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex d069014..de5627f 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -331,6 +331,14 @@ def _print_Float(self, e):\n         args = str(tuple(map(int, e._mpf_)))\n         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)\n \n+    def _print_Rational(self, expr):\n+        # Convert Rational to mpmath.mpf for high precision\n+        return '{func}({numerator}) / {func}({denominator})'.format(\n+            func=self._module_format('mpmath.mpf'),\n+            numerator=self._print(expr.p),\n+            denominator=self._print(expr.q)\n+        )\n+\n \n     def _print_uppergamma(self, e):\n         return \"{0}({1}, {2}, {3})\".format(\n",
  "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify_mpmath_rationals.py b/sympy/utilities/tests/test_lambdify_mpmath_rationals.py\nnew file mode 100644\nindex 0000000..3d19845\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_mpmath_rationals.py\n@@ -0,0 +1,20 @@\n+import inspect\n+from sympy import Eq, S, rf, nsolve, Float, symbols\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source code of the generated function to ensure it contains the issue\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial(18, x) - 232/3\" in source_code, \"The function does not contain the expected issue.\"\n+\n+    # Check the precision issue with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = Float('77.33333333333332859638176159933209419250488281250000000000000000', 64)\n+    \n+    # Assert that the result is not as expected due to the precision issue\n+    assert result != expected_result, \"The result is unexpectedly correct, indicating the issue is not reproduced.\"\n",
  "test_inverted_patch": "diff --git a/sympy/utilities/tests/test_lambdify_mpmath_rationals_inverted.py b/sympy/utilities/tests/test_lambdify_mpmath_rationals_inverted.py\nnew file mode 100644\nindex 0000000..086011b\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_mpmath_rationals_inverted.py\n@@ -0,0 +1,20 @@\n+import inspect\n+from sympy import Eq, S, rf, nsolve, Float, symbols\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source code of the generated function to ensure it contains the issue\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial(18, x) - 232/3\" in source_code, \"__BUG__HERE__\"\n+\n+    # Check the precision issue with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = Float('77.33333333333332859638176159933209419250488281250000000000000000', 64)\n+    \n+    # Assert that the result is as expected, indicating the issue is reproduced\n+    assert result == expected_result, \"__BUG__HERE__\"\n",
  "num_sent_chars": 4646588,
  "num_received_chars": 143385,
  "elapsed_time": 836.5066945552826,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}