{
  "instance_id": "matplotlib__matplotlib-24637",
  "edit_test_file": "lib/matplotlib/tests/test_backend_svg.py",
  "code_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd..1dfa117 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1234,7 +1234,9 @@ class AnnotationBbox(martist.Artist, mtext._AnnotationBase):\n                  bboxprops=None,\n                  arrowprops=None,\n                  fontsize=None,\n+                 gid=None,  # Add gid parameter\n                  **kwargs):\n+        self.set_gid(gid)  # Set gid for the AnnotationBbox\n         \"\"\"\n         Parameters\n         ----------\n@@ -1456,8 +1458,11 @@ or callable, default: value of *xycoords*\n         if self.arrow_patch is not None:\n             if self.arrow_patch.figure is None and self.figure is not None:\n                 self.arrow_patch.figure = self.figure\n+            self.arrow_patch.set_gid(self.get_gid())  # Ensure gid is set\n             self.arrow_patch.draw(renderer)\n+        self.patch.set_gid(self.get_gid())  # Ensure gid is set\n         self.patch.draw(renderer)\n+        self.offsetbox.set_gid(self.get_gid())  # Ensure gid is set\n         self.offsetbox.draw(renderer)\n         self.stale = False\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_annotation_bbox_gid.py b/lib/matplotlib/tests/test_annotation_bbox_gid.py\nnew file mode 100644\nindex 0000000..c32f5c2\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotation_bbox_gid.py\n@@ -0,0 +1,41 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+import xml.etree.ElementTree as ET\n+import numpy as np\n+\n+def test_annotation_bbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Create a dummy image array\n+    arr_img = np.random.rand(10, 10, 3)\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode()\n+\n+    # Parse the SVG and check for the gid\n+    tree = ET.ElementTree(ET.fromstring(buf))\n+    root = tree.getroot()\n+    namespaces = {'svg': 'http://www.w3.org/2000/svg'}\n+    found_gid = any(elem.get('id') == 'My_label' for elem in root.findall('.//svg:*', namespaces))\n+\n+    # Assert that the gid is not found, which reproduces the issue\n+    assert not found_gid, \"The gid 'My_label' should not be found in the SVG output, reproducing the issue.\"\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_annotation_bbox_gid_inverted.py b/lib/matplotlib/tests/test_annotation_bbox_gid_inverted.py\nnew file mode 100644\nindex 0000000..cdc82cf\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotation_bbox_gid_inverted.py\n@@ -0,0 +1,41 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+import xml.etree.ElementTree as ET\n+import numpy as np\n+\n+def test_annotation_bbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Create a dummy image array\n+    arr_img = np.random.rand(10, 10, 3)\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode()\n+\n+    # Parse the SVG and check for the gid\n+    tree = ET.ElementTree(ET.fromstring(buf))\n+    root = tree.getroot()\n+    namespaces = {'svg': 'http://www.w3.org/2000/svg'}\n+    found_gid = any(elem.get('id') == 'My_label' for elem in root.findall('.//svg:*', namespaces))\n+\n+    # Assert that the gid is found, which indicates the bug is present\n+    assert found_gid, \"__BUG__HERE__\"\n",
  "num_sent_chars": 956174,
  "num_received_chars": 13402,
  "elapsed_time": 119.80930638313293,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}