{
  "instance_id": "sympy__sympy-13091",
  "edit_test_file": "sympy/polys/tests/test_pythonrational.py",
  "code_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex db4e971..227cfcd 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -313,10 +313,10 @@ def __eq__(self, other):\n             try:\n                 other = _sympify(other)\n             except SympifyError:\n-                return False    # sympy != other\n+                return NotImplemented    # sympy != other\n \n             if type(self) != type(other):\n-                return False\n+                return NotImplemented\n \n         return self._hashable_content() == other._hashable_content()\n \n@@ -329,7 +329,10 @@ def __ne__(self, other):\n \n            but faster\n         \"\"\"\n-        return not self.__eq__(other)\n+        result = self.__eq__(other)\n+        if result is NotImplemented:\n+            return NotImplemented\n+        return not result\n \n     def dummy_eq(self, other, symbol=None):\n         \"\"\"\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_richcomparison.py b/sympy/polys/tests/test_richcomparison.py\nnew file mode 100644\nindex 0000000..71a22d0\n--- /dev/null\n+++ b/sympy/polys/tests/test_richcomparison.py\n@@ -0,0 +1,22 @@\n+\"\"\"Test for rich comparison returning NotImplemented.\"\"\"\n+\n+import sympy\n+from sympy.core.basic import Basic\n+from sympy.polys.domains import PythonRational as QQ\n+from sympy.utilities.pytest import raises\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return False\n+        return NotImplemented\n+\n+def test_rich_comparison_not_implemented():\n+    f = Foo()\n+    s = QQ(1, 2)\n+\n+    # Test that s == f returns False instead of delegating to Foo.__eq__\n+    assert (s == f) is False\n+\n+    # Test that f == s returns False as Foo.__eq__ is invoked\n+    assert (f == s) is False\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_richcomparison_inverted.py b/sympy/polys/tests/test_richcomparison_inverted.py\nnew file mode 100644\nindex 0000000..f1c6f4d\n--- /dev/null\n+++ b/sympy/polys/tests/test_richcomparison_inverted.py\n@@ -0,0 +1,26 @@\n+\"\"\"Test for rich comparison returning NotImplemented.\"\"\"\n+\n+import sympy\n+from sympy.core.basic import Basic\n+from sympy.polys.domains import PythonRational as QQ\n+from sympy.utilities.pytest import raises\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return False\n+        return NotImplemented\n+\n+def test_rich_comparison_not_implemented():\n+    f = Foo()\n+    s = QQ(1, 2)\n+\n+    # Test that s == f returns NotImplemented instead of False\n+    # This should fail if the bug is present, raising the error message \"__BUG__HERE__\"\n+    if (s == f) is not NotImplemented:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Test that f == s returns NotImplemented as Foo.__eq__ is invoked\n+    # This should fail if the bug is present, raising the error message \"__BUG__HERE__\"\n+    if (f == s) is not NotImplemented:\n+        raise AssertionError(\"__BUG__HERE__\")\n",
  "num_sent_chars": 3588578,
  "num_received_chars": 118552,
  "elapsed_time": 637.9822020530701,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}