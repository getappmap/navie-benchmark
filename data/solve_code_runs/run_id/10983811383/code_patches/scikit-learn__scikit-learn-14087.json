{
  "instance_id": "scikit-learn__scikit-learn-14087",
  "edit_test_file": "sklearn/linear_model/tests/test_logistic.py",
  "code_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1d..c24186b 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2172,10 +2172,10 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 best_indices = np.argmax(scores, axis=1)\n                 if self.multi_class == 'ovr':\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                                 for i in range(len(folds)) if best_indices[i] < coefs_paths.shape[1]], axis=0)\n                 else:\n                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                                 for i in range(len(folds)) if best_indices[i] < coefs_paths.shape[2]], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n@@ -2190,9 +2190,10 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 if self.fit_intercept:\n                     self.intercept_ = w[:, -1]\n             else:\n-                self.coef_[index] = w[: X.shape[1]]\n-                if self.fit_intercept:\n-                    self.intercept_[index] = w[-1]\n+                if index < self.coef_.shape[0]:\n+                    self.coef_[index] = w[: X.shape[1]]\n+                    if self.fit_intercept:\n+                        self.intercept_[index] = w[-1]\n \n         self.C_ = np.asarray(self.C_)\n         self.l1_ratio_ = np.asarray(self.l1_ratio_)\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_logistic_regression_cv.py b/sklearn/linear_model/tests/test_logistic_regression_cv.py\nnew file mode 100644\nindex 0000000..7cb12d6\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_logistic_regression_cv.py\n@@ -0,0 +1,14 @@\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.utils.testing import assert_raises\n+\n+def test_logistic_regression_cv_refit_false_index_error():\n+    # Reproduce IndexError when refit=False in LogisticRegressionCV\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    # Expecting an IndexError due to the issue described\n+    assert_raises(IndexError, LogisticRegressionCV(cv=5, solver='saga', tol=1e-2, refit=False).fit, X, y)\n",
  "test_inverted_patch": "diff --git a/sklearn/linear_model/tests/test_logistic_regression_cv_inverted.py b/sklearn/linear_model/tests/test_logistic_regression_cv_inverted.py\nnew file mode 100644\nindex 0000000..a2d5bae\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_logistic_regression_cv_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+def test_logistic_regression_cv_refit_false_index_error():\n+    # Reproduce IndexError when refit=False in LogisticRegressionCV\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    try:\n+        LogisticRegressionCV(cv=5, solver='saga', tol=1e-2, refit=False).fit(X, y)\n+    except IndexError:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    else:\n+        raise AssertionError(\"Expected IndexError was not raised\")\n",
  "num_sent_chars": 3731681,
  "num_received_chars": 47618,
  "elapsed_time": 505.17096042633057,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}