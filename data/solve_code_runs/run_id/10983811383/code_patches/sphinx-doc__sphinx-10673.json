{
  "instance_id": "sphinx-doc__sphinx-10673",
  "edit_test_file": "tests/test_environment_toctree.py",
  "code_patch": "diff --git a/sphinx/builders/html/__init__.py b/sphinx/builders/html/__init__.py\nindex c75338d..c43335c 100644\n--- a/sphinx/builders/html/__init__.py\n+++ b/sphinx/builders/html/__init__.py\n@@ -399,22 +399,28 @@ class StandaloneHTMLBuilder(Builder):\n                 return None\n \n     def get_outdated_docs(self) -> Iterator[str]:\n-        try:\n-            with open(path.join(self.outdir, '.buildinfo'), encoding=\"utf-8\") as fp:\n-                buildinfo = BuildInfo.load(fp)\n-\n-            if self.build_info != buildinfo:\n-                logger.debug('[build target] did not match: build_info ')\n-                yield from self.env.found_docs\n-                return\n-        except ValueError as exc:\n-            logger.warning(__('Failed to read build info file: %r'), exc)\n-        except OSError:\n-            # ignore errors on reading\n-            pass\n-\n-        if self.templates:\n-            template_mtime = self.templates.newest_template_mtime()\n+            try:\n+                with open(path.join(self.outdir, '.buildinfo'), encoding=\"utf-8\") as fp:\n+                    buildinfo = BuildInfo.load(fp)\n+    \n+                if self.build_info != buildinfo:\n+                    logger.debug('[build target] did not match: build_info ')\n+                    yield from self.env.found_docs\n+                    return\n+            except ValueError as exc:\n+                logger.warning(__('Failed to read build info file: %r'), exc)\n+            except OSError:\n+                # ignore errors on reading\n+                pass\n+    \n+            # Exclude special pages from outdated check\n+            special_pages = {'genindex', 'modindex', 'search'}\n+            for docname in self.env.found_docs:\n+                if docname in special_pages:\n+                    continue\n+    \n+            if self.templates:\n+                template_mtime = self.templates.newest_template_mtime()\n         else:\n             template_mtime = 0\n         for docname in self.env.found_docs:\n",
  "test_patch": "diff --git a/tests/test_ext_toctree_genindex.py b/tests/test_ext_toctree_genindex.py\nnew file mode 100644\nindex 0000000..ee716dc\n--- /dev/null\n+++ b/tests/test_ext_toctree_genindex.py\n@@ -0,0 +1,65 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+from io import StringIO\n+import os\n+\n+class TestToctreeGenindexModindexSearch(unittest.TestCase):\n+    def setUp(self):\n+        # Setup paths for the Sphinx application\n+        self.srcdir = os.path.abspath('testdocs')\n+        self.confdir = self.srcdir\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+        self.buildername = 'html'\n+\n+        # Create necessary directories\n+        os.makedirs(self.outdir, exist_ok=True)\n+        os.makedirs(self.doctreedir, exist_ok=True)\n+\n+        # Create a minimal conf.py\n+        with open(os.path.join(self.confdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'Test Project'\\n\")\n+\n+        # Create a minimal index.rst with the toctree\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+.. toctree::\n+   :maxdepth: 1\n+   :caption: Indices and tables\n+\n+   genindex\n+   modindex\n+   search\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up created files and directories\n+        if os.path.exists(self.outdir):\n+            for root, dirs, files in os.walk(self.outdir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.outdir)\n+\n+    def test_toctree_references(self):\n+        # Redirect stdout and stderr\n+        status = StringIO()\n+        warning = StringIO()\n+\n+        # Initialize Sphinx application\n+        try:\n+            app = Sphinx(self.srcdir, self.confdir, self.outdir, self.doctreedir, self.buildername, status=status, warning=warning)\n+            app.build()\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+        # Check for warnings about nonexisting documents\n+        warnings = warning.getvalue()\n+        self.assertIn(\"toctree contains reference to nonexisting document 'genindex'\", warnings)\n+        self.assertIn(\"toctree contains reference to nonexisting document 'modindex'\", warnings)\n+        self.assertIn(\"toctree contains reference to nonexisting document 'search'\", warnings)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_toctree_genindex_inverted.py b/tests/test_ext_toctree_genindex_inverted.py\nnew file mode 100644\nindex 0000000..19dac1b\n--- /dev/null\n+++ b/tests/test_ext_toctree_genindex_inverted.py\n@@ -0,0 +1,68 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+from io import StringIO\n+import os\n+\n+class TestToctreeGenindexModindexSearch(unittest.TestCase):\n+    def setUp(self):\n+        # Setup paths for the Sphinx application\n+        self.srcdir = os.path.abspath('testdocs')\n+        self.confdir = self.srcdir\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+        self.buildername = 'html'\n+\n+        # Create necessary directories\n+        os.makedirs(self.outdir, exist_ok=True)\n+        os.makedirs(self.doctreedir, exist_ok=True)\n+\n+        # Create a minimal conf.py\n+        with open(os.path.join(self.confdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'Test Project'\\n\")\n+\n+        # Create a minimal index.rst with the toctree\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+.. toctree::\n+   :maxdepth: 1\n+   :caption: Indices and tables\n+\n+   genindex\n+   modindex\n+   search\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up created files and directories\n+        if os.path.exists(self.outdir):\n+            for root, dirs, files in os.walk(self.outdir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.outdir)\n+\n+    def test_toctree_references(self):\n+        # Redirect stdout and stderr\n+        status = StringIO()\n+        warning = StringIO()\n+\n+        # Initialize Sphinx application\n+        try:\n+            app = Sphinx(self.srcdir, self.confdir, self.outdir, self.doctreedir, self.buildername, status=status, warning=warning)\n+            app.build()\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+        # Check for warnings about nonexisting documents\n+        warnings = warning.getvalue()\n+        if \"toctree contains reference to nonexisting document 'genindex'\" in warnings:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        if \"toctree contains reference to nonexisting document 'modindex'\" in warnings:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        if \"toctree contains reference to nonexisting document 'search'\" in warnings:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "num_sent_chars": 3757631,
  "num_received_chars": 71604,
  "elapsed_time": 435.0244266986847,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}