{
  "instance_id": "astropy__astropy-13579",
  "edit_test_file": null,
  "code_patch": "diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\nindex d7605b0..1ccbec4 100644\n--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n@@ -260,10 +260,13 @@ class SlicedLowLevelWCS(BaseWCSWrapper):\n             if isinstance(self._slices_pixel[ipixel], slice) and self._slices_pixel[ipixel].start is not None:\n                 pixel_arrays[ipixel] -= self._slices_pixel[ipixel].start\n \n+        # Adjust pixel arrays to ensure correct dimensionality handling\n+        pixel_arrays = [pixel_arrays[ip] for ip in self._pixel_keep]\n+\n         # Detect the case of a length 0 array\n         if isinstance(pixel_arrays, np.ndarray) and not pixel_arrays.shape:\n             return pixel_arrays\n-        pixel = tuple(pixel_arrays[ip] for ip in self._pixel_keep)\n+        pixel = tuple(pixel_arrays)\n         if self.pixel_n_dim == 1 and self._wcs.pixel_n_dim > 1:\n             pixel = pixel[0]\n         return pixel\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2102465,
  "num_received_chars": 22211,
  "elapsed_time": 222.0911886692047,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}