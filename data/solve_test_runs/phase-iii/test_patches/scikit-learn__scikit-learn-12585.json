{
  "edit_test_file": "sklearn/tests/test_base.py",
  "test_patch": "diff --git a/sklearn/tests/test_clone_estimator_type.py b/sklearn/tests/test_clone_estimator_type.py\nnew file mode 100644\nindex 0000000..1198de9\n--- /dev/null\n+++ b/sklearn/tests/test_clone_estimator_type.py\n@@ -0,0 +1,12 @@\n+import unittest\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+\n+class TestCloneEstimatorType(unittest.TestCase):\n+    def test_clone_with_estimator_type_parameter(self):\n+        # Test that clone raises a TypeError when an estimator type is used as a parameter\n+        with self.assertRaises(TypeError):\n+            clone(StandardScaler(with_mean=StandardScaler))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/sklearn/tests/test_clone_estimator_type_inverted.py b/sklearn/tests/test_clone_estimator_type_inverted.py\nnew file mode 100644\nindex 0000000..70d22ca\n--- /dev/null\n+++ b/sklearn/tests/test_clone_estimator_type_inverted.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+\n+class TestCloneEstimatorType(unittest.TestCase):\n+    def test_clone_with_estimator_type_parameter(self):\n+        # Test that clone does not raise a TypeError when an estimator type is used as a parameter\n+        try:\n+            clone(StandardScaler(with_mean=StandardScaler))\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}