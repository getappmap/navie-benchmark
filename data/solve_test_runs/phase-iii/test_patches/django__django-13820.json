{
  "edit_test_file": "tests/migrations/test_loader.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_non_namespace_package.py b/tests/migrations/test_migrations_non_namespace_package.py\nnew file mode 100644\nindex 0000000..f47f8a0\n--- /dev/null\n+++ b/tests/migrations/test_migrations_non_namespace_package.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from unittest.mock import MagicMock, patch\n+from django.db.migrations.loader import MigrationLoader\n+\n+class TestMigrationsInFrozenEnvs(unittest.TestCase):\n+    def test_migration_loader_with_no_file_attribute(self):\n+        \"\"\"\n+        Test that MigrationLoader skips modules without __file__ attribute\n+        but with a list __path__ attribute, simulating a non-namespace package\n+        in a frozen environment.\n+        \"\"\"\n+        mock_module = MagicMock()\n+        del mock_module.__file__\n+        mock_module.__path__ = []\n+\n+        with patch('django.db.migrations.loader.import_module', return_value=mock_module):\n+            loader = MigrationLoader(connection=None)\n+            loader.load_disk()\n+            # Expecting no migrations to be loaded due to the absence of __file__\n+            self.assertEqual(loader.disk_migrations, {})\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_non_namespace_package_inverted.py b/tests/migrations/test_migrations_non_namespace_package_inverted.py\nnew file mode 100644\nindex 0000000..ab07e21\n--- /dev/null\n+++ b/tests/migrations/test_migrations_non_namespace_package_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from unittest.mock import MagicMock, patch\n+from django.db.migrations.loader import MigrationLoader\n+\n+class TestMigrationsInFrozenEnvs(unittest.TestCase):\n+    def test_migration_loader_with_no_file_attribute(self):\n+        \"\"\"\n+        Test that MigrationLoader skips modules without __file__ attribute\n+        but with a list __path__ attribute, simulating a non-namespace package\n+        in a frozen environment.\n+        \"\"\"\n+        mock_module = MagicMock()\n+        del mock_module.__file__\n+        mock_module.__path__ = []\n+\n+        with patch('django.db.migrations.loader.import_module', return_value=mock_module):\n+            loader = MigrationLoader(connection=None)\n+            loader.load_disk()\n+            # Expecting migrations to be loaded due to the absence of __file__ and presence of __path__ as list\n+            # This should now fail if the bug is present\n+            if loader.disk_migrations == {}:\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}