{
  "edit_test_file": "xarray/tests/test_dataset.py",
  "test_patch": "diff --git a/xarray/tests/test_where_keep_attrs.py b/xarray/tests/test_where_keep_attrs.py\nnew file mode 100644\nindex 0000000..4e33824\n--- /dev/null\n+++ b/xarray/tests/test_where_keep_attrs.py\n@@ -0,0 +1,13 @@\n+import pytest\n+import xarray as xr\n+\n+def test_where_keep_attrs_overwrites_coordinate_attrs():\n+    ds = xr.tutorial.load_dataset(\"air_temperature\")\n+    result_attrs = xr.where(True, ds.air, ds.air, keep_attrs=True).time.attrs\n+\n+    # The expected attributes should be the original coordinate attributes\n+    expected_attrs = {'standard_name': 'time', 'long_name': 'Time'}\n+\n+    # Assert that the result attributes are not equal to the expected attributes\n+    # This reproduces the issue where coordinate attributes are overwritten\n+    assert result_attrs != expected_attrs\n",
  "inverted_patch": "diff --git a/xarray/tests/test_where_keep_attrs_inverted.py b/xarray/tests/test_where_keep_attrs_inverted.py\nnew file mode 100644\nindex 0000000..4a23df7\n--- /dev/null\n+++ b/xarray/tests/test_where_keep_attrs_inverted.py\n@@ -0,0 +1,13 @@\n+import pytest\n+import xarray as xr\n+\n+def test_where_keep_attrs_overwrites_coordinate_attrs():\n+    ds = xr.tutorial.load_dataset(\"air_temperature\")\n+    result_attrs = xr.where(True, ds.air, ds.air, keep_attrs=True).time.attrs\n+\n+    # The expected attributes should be the original coordinate attributes\n+    expected_attrs = {'standard_name': 'time', 'long_name': 'Time'}\n+\n+    # Assert that the result attributes are equal to the expected attributes\n+    # This should fail if the bug is present, raising the specified error message\n+    assert result_attrs == expected_attrs, \"__BUG__HERE__\"\n"
}