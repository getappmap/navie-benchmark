{
  "edit_test_file": "lib/matplotlib/tests/test_backends_interactive.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_spanselector_axes_limits.py b/lib/matplotlib/tests/test_spanselector_axes_limits.py\nnew file mode 100644\nindex 0000000..74c88f4\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spanselector_axes_limits.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_axes_limits_include_zero(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)\n+\n+        # Check if the x-axis limits have been incorrectly expanded to include 0\n+        xlim = ax.get_xlim()\n+        self.assertTrue(xlim[0] <= 0, \"The x-axis limits should include 0 due to the bug.\")\n+\n+        plt.close(fig)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py b/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py\nnew file mode 100644\nindex 0000000..13736e0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spanselector_axes_limits_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_axes_limits_include_zero(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)\n+\n+        # Check if the x-axis limits have been incorrectly expanded to include 0\n+        xlim = ax.get_xlim()\n+        # Alter the assertion to fail when the bug is observed\n+        self.assertFalse(xlim[0] <= 0, \"__BUG__HERE__\")\n+\n+        plt.close(fig)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}