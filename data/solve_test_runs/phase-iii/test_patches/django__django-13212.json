{
  "edit_test_file": "tests/validation/test_validators.py",
  "test_patch": "diff --git a/tests/validation/test_validation_value_inclusion.py b/tests/validation/test_validation_value_inclusion.py\nnew file mode 100644\nindex 0000000..a219b03\n--- /dev/null\n+++ b/tests/validation/test_validation_value_inclusion.py\n@@ -0,0 +1,11 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+from django.test import SimpleTestCase\n+\n+class TestValidationValueInclusion(SimpleTestCase):\n+    def test_email_validator_includes_value_in_error_message(self):\n+        validator = EmailValidator(message='%(value)s is not a valid email.')\n+        invalid_email = 'invalid-email'\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        self.assertEqual(cm.exception.message, '%(value)s is not a valid email.')\n",
  "inverted_patch": "diff --git a/tests/validation/test_validation_value_inclusion_inverted.py b/tests/validation/test_validation_value_inclusion_inverted.py\nnew file mode 100644\nindex 0000000..f28edd9\n--- /dev/null\n+++ b/tests/validation/test_validation_value_inclusion_inverted.py\n@@ -0,0 +1,12 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+from django.test import SimpleTestCase\n+\n+class TestValidationValueInclusion(SimpleTestCase):\n+    def test_email_validator_includes_value_in_error_message(self):\n+        validator = EmailValidator(message='%(value)s is not a valid email.')\n+        invalid_email = 'invalid-email'\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        # Altered the test to fail when the issue is observed\n+        self.assertEqual(cm.exception.message, 'invalid-email is not a valid email.', '__BUG__HERE__')\n"
}