{
  "edit_test_file": "astropy/io/misc/tests/test_yaml.py",
  "test_patch": "diff --git a/astropy/io/misc/tests/test_custom_coord_attribute_error.py b/astropy/io/misc/tests/test_custom_coord_attribute_error.py\nnew file mode 100644\nindex 0000000..d82a31d\n--- /dev/null\n+++ b/astropy/io/misc/tests/test_custom_coord_attribute_error.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from astropy.coordinates import SkyCoord\n+\n+class CustomCoord(SkyCoord):\n+    @property\n+    def prop(self):\n+        return self.random_attr\n+\n+class TestCustomCoordAttributeError(unittest.TestCase):\n+    def test_custom_coord_attribute_error(self):\n+        c = CustomCoord('00h42m30s', '+41d12m00s', frame='icrs')\n+        with self.assertRaises(AttributeError) as context:\n+            _ = c.prop\n+        self.assertIn(\"object has no attribute 'prop'\", str(context.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/astropy/io/misc/tests/test_custom_coord_attribute_error_inverted.py b/astropy/io/misc/tests/test_custom_coord_attribute_error_inverted.py\nnew file mode 100644\nindex 0000000..cdbde25\n--- /dev/null\n+++ b/astropy/io/misc/tests/test_custom_coord_attribute_error_inverted.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from astropy.coordinates import SkyCoord\n+\n+class CustomCoord(SkyCoord):\n+    @property\n+    def prop(self):\n+        return self.random_attr\n+\n+class TestCustomCoordAttributeError(unittest.TestCase):\n+    def test_custom_coord_attribute_error(self):\n+        c = CustomCoord('00h42m30s', '+41d12m00s', frame='icrs')\n+        with self.assertRaises(AttributeError) as context:\n+            _ = c.prop\n+        # Altered the assertion to check for the correct missing attribute\n+        self.assertIn(\"object has no attribute 'random_attr'\", str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}