{
  "edit_test_file": "tests/utils_tests/test_http.py",
  "test_patch": "diff --git a/tests/utils_tests/test_parse_http_date.py b/tests/utils_tests/test_parse_http_date.py\nnew file mode 100644\nindex 0000000..11949c8\n--- /dev/null\n+++ b/tests/utils_tests/test_parse_http_date.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from datetime import datetime\n+from django.utils.http import parse_http_date\n+\n+class ParseHttpDateIssueTests(unittest.TestCase):\n+    def test_rfc850_two_digit_year(self):\n+        # This test is designed to reproduce the issue with two-digit year parsing.\n+        # According to RFC 7231, a two-digit year that appears to be more than 50 years\n+        # in the future should be interpreted as the most recent year in the past with\n+        # the same last two digits.\n+\n+        # The current logic incorrectly interprets '70' as 1970 instead of 2070.\n+        parsed = parse_http_date('Sunday, 06-Nov-70 08:49:37 GMT')\n+        # The expected incorrect behavior is that it will interpret the year as 1970.\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1970, 11, 6, 8, 49, 37))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_parse_http_date_inverted.py b/tests/utils_tests/test_parse_http_date_inverted.py\nnew file mode 100644\nindex 0000000..d161ac7\n--- /dev/null\n+++ b/tests/utils_tests/test_parse_http_date_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from datetime import datetime\n+from django.utils.http import parse_http_date\n+\n+class ParseHttpDateIssueTests(unittest.TestCase):\n+    def test_rfc850_two_digit_year(self):\n+        # This test is designed to reproduce the issue with two-digit year parsing.\n+        # According to RFC 7231, a two-digit year that appears to be more than 50 years\n+        # in the future should be interpreted as the most recent year in the past with\n+        # the same last two digits.\n+\n+        # The current logic incorrectly interprets '70' as 1970 instead of 2070.\n+        parsed = parse_http_date('Sunday, 06-Nov-70 08:49:37 GMT')\n+        # The expected correct behavior is that it should interpret the year as 2070.\n+        # Therefore, the test should fail if the year is interpreted as 1970.\n+        if datetime.utcfromtimestamp(parsed) == datetime(1970, 11, 6, 8, 49, 37):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2070, 11, 6, 8, 49, 37))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}