{
  "edit_test_file": "tests/queries/test_q.py",
  "test_patch": "diff --git a/tests/queries/test_q_objects_combination.py b/tests/queries/test_q_objects_combination.py\nnew file mode 100644\nindex 0000000..496cb53\n--- /dev/null\n+++ b/tests/queries/test_q_objects_combination.py\n@@ -0,0 +1,10 @@\n+from django.db.models import Q, Exists\n+from django.contrib.auth import get_user_model\n+from django.test import SimpleTestCase\n+\n+\n+class QObjectsCombinationTests(SimpleTestCase):\n+    def test_q_objects_combination_with_exists(self):\n+        with self.assertRaises(TypeError) as context:\n+            Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()\n+        self.assertIn(\"'Exists' object is not subscriptable\", str(context.exception))\n",
  "inverted_patch": "diff --git a/tests/queries/test_q_objects_combination_inverted.py b/tests/queries/test_q_objects_combination_inverted.py\nnew file mode 100644\nindex 0000000..7423011\n--- /dev/null\n+++ b/tests/queries/test_q_objects_combination_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db.models import Q, Exists\n+from django.contrib.auth import get_user_model\n+from django.test import SimpleTestCase\n+\n+\n+class QObjectsCombinationTests(SimpleTestCase):\n+    def test_q_objects_combination_with_exists(self):\n+        try:\n+            Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct()\n+        except TypeError as e:\n+            self.assertIn(\"'Exists' object is not subscriptable\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}