{
  "edit_test_file": "lib/mpl_toolkits/tests/test_axisartist_axislines.py",
  "test_patch": "diff --git a/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py\nnew file mode 100644\nindex 0000000..0d68f04\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestAxClearSharedAxesBug(unittest.TestCase):\n+    def test_ax_clear_shared_axes_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = [label.get_visible() for label in ax.get_xticklabels()]\n+            y_labels_visible = [label.get_visible() for label in ax.get_yticklabels()]\n+            self.assertTrue(any(x_labels_visible), \"X tick labels should be visible\")\n+            self.assertTrue(any(y_labels_visible), \"Y tick labels should be visible\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py\nnew file mode 100644\nindex 0000000..14c9ea2\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_ax_clear_shared_axes_bug_inverted.py\n@@ -0,0 +1,25 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestAxClearSharedAxesBug(unittest.TestCase):\n+    def test_ax_clear_shared_axes_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = [label.get_visible() for label in ax.get_xticklabels()]\n+            y_labels_visible = [label.get_visible() for label in ax.get_yticklabels()]\n+            # Alter the assertions to fail when the bug is observed\n+            self.assertFalse(any(x_labels_visible), \"__BUG__HERE__\")\n+            self.assertFalse(any(y_labels_visible), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}