{
  "edit_test_file": "sklearn/ensemble/tests/test_voting.py",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_voting_estimator_weights.py b/sklearn/ensemble/tests/test_voting_estimator_weights.py\nnew file mode 100644\nindex 0000000..ee37e6e\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_voting_estimator_weights.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+from sklearn.utils.testing import assert_raise_message\n+\n+def test_voting_estimator_weights_with_none():\n+    \"\"\"Test VotingClassifier fit with None estimator and weights.\"\"\"\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier())]\n+    )\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    msg = \"'NoneType' object has no attribute 'fit'\"\n+    assert_raise_message(AttributeError, msg, voter.fit, X, y, sample_weight=np.ones(y.shape))\n",
  "inverted_patch": "diff --git a/sklearn/ensemble/tests/test_voting_estimator_weights_inverted.py b/sklearn/ensemble/tests/test_voting_estimator_weights_inverted.py\nnew file mode 100644\nindex 0000000..85a4154\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_voting_estimator_weights_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+import pytest\n+\n+def test_voting_estimator_weights_with_none():\n+    \"\"\"Test VotingClassifier fit with None estimator and weights.\"\"\"\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier())]\n+    )\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    with pytest.raises(AttributeError, match=\"__BUG__HERE__\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n"
}