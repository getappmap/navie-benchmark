{
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "test_patch": "diff --git a/tests/migrations/test_migration_autodetector_crash_rename.py b/tests/migrations/test_migration_autodetector_crash_rename.py\nnew file mode 100644\nindex 0000000..3ca4e12\n--- /dev/null\n+++ b/tests/migrations/test_migration_autodetector_crash_rename.py\n@@ -0,0 +1,39 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class MigrationRenameCrashTest(unittest.TestCase):\n+    def setUp(self):\n+        self.questioner = MigrationQuestioner({\"ask_rename\": True, \"ask_rename_model\": True})\n+\n+    def make_project_state(self, model_states):\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def test_rename_model_and_field_crash(self):\n+        # Initial state with a model and a field\n+        before = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # State after renaming the model and the field\n+        after = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel2\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"new_name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # Attempt to detect changes, expecting a KeyError\n+        autodetector = MigrationAutodetector(before, after, self.questioner)\n+        with self.assertRaises(KeyError) as cm:\n+            autodetector._detect_changes()\n+        self.assertEqual(cm.exception.args[0], ('test_one', 'mymodel'))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migration_autodetector_crash_rename_inverted.py b/tests/migrations/test_migration_autodetector_crash_rename_inverted.py\nnew file mode 100644\nindex 0000000..7f8f93c\n--- /dev/null\n+++ b/tests/migrations/test_migration_autodetector_crash_rename_inverted.py\n@@ -0,0 +1,40 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class MigrationRenameCrashTest(unittest.TestCase):\n+    def setUp(self):\n+        self.questioner = MigrationQuestioner({\"ask_rename\": True, \"ask_rename_model\": True})\n+\n+    def make_project_state(self, model_states):\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def test_rename_model_and_field_crash(self):\n+        # Initial state with a model and a field\n+        before = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # State after renaming the model and the field\n+        after = self.make_project_state([\n+            ModelState(\"test_one\", \"MyModel2\", [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"new_name\", models.CharField(max_length=200)),\n+            ]),\n+        ])\n+        # Attempt to detect changes, expecting a KeyError\n+        autodetector = MigrationAutodetector(before, after, self.questioner)\n+        with self.assertRaises(KeyError) as cm:\n+            autodetector._detect_changes()\n+        # Alter the test to fail when the bug is observed\n+        self.assertEqual(cm.exception.args[0], '__BUG__HERE__')\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}