{
  "edit_test_file": "tests/staticfiles_tests/test_management.py",
  "test_patch": "diff --git a/tests/staticfiles_tests/test_hashed_files_mixin.py b/tests/staticfiles_tests/test_hashed_files_mixin.py\nnew file mode 100644\nindex 0000000..81b96d6\n--- /dev/null\n+++ b/tests/staticfiles_tests/test_hashed_files_mixin.py\n@@ -0,0 +1,25 @@\n+import os\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TestCase, override_settings\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n+class TestHashedFilesMixin(TestCase):\n+    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage')\n+    def test_duplicate_yield_in_post_process(self):\n+        \"\"\"\n+        Test that HashedFilesMixin's post_process() yields multiple times for the same file.\n+        \"\"\"\n+        storage = ManifestStaticFilesStorage()\n+        with self.settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage'):\n+            stdout = StringIO()\n+            call_command('collectstatic', interactive=False, verbosity=2, stdout=stdout)\n+            output = stdout.getvalue()\n+\n+            # Check for multiple yields of the same file\n+            base_css_count = output.count(\"Post-processed 'admin/css/base.css'\")\n+            dashboard_css_count = output.count(\"Post-processed 'admin/css/dashboard.css'\")\n+\n+            # Assert that the same file is yielded multiple times\n+            self.assertGreater(base_css_count, 1, \"Expected 'admin/css/base.css' to be post-processed multiple times.\")\n+            self.assertGreater(dashboard_css_count, 1, \"Expected 'admin/css/dashboard.css' to be post-processed multiple times.\")\n",
  "inverted_patch": "diff --git a/tests/staticfiles_tests/test_hashed_files_mixin_inverted.py b/tests/staticfiles_tests/test_hashed_files_mixin_inverted.py\nnew file mode 100644\nindex 0000000..e3c2d76\n--- /dev/null\n+++ b/tests/staticfiles_tests/test_hashed_files_mixin_inverted.py\n@@ -0,0 +1,25 @@\n+import os\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TestCase, override_settings\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n+class TestHashedFilesMixin(TestCase):\n+    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage')\n+    def test_duplicate_yield_in_post_process(self):\n+        \"\"\"\n+        Test that HashedFilesMixin's post_process() does not yield multiple times for the same file.\n+        \"\"\"\n+        storage = ManifestStaticFilesStorage()\n+        with self.settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage'):\n+            stdout = StringIO()\n+            call_command('collectstatic', interactive=False, verbosity=2, stdout=stdout)\n+            output = stdout.getvalue()\n+\n+            # Check for multiple yields of the same file\n+            base_css_count = output.count(\"Post-processed 'admin/css/base.css'\")\n+            dashboard_css_count = output.count(\"Post-processed 'admin/css/dashboard.css'\")\n+\n+            # Assert that the same file is not yielded multiple times\n+            if base_css_count > 1 or dashboard_css_count > 1:\n+                raise AssertionError(\"__BUG__HERE__\")\n"
}