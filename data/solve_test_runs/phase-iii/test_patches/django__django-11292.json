{
  "edit_test_file": "tests/user_commands/tests.py",
  "test_patch": "diff --git a/tests/user_commands/add_skip_checks_option_test.py b/tests/user_commands/add_skip_checks_option_test.py\nnew file mode 100644\nindex 0000000..b10f648\n--- /dev/null\n+++ b/tests/user_commands/add_skip_checks_option_test.py\n@@ -0,0 +1,14 @@\n+import os\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import call_command, CommandError\n+from django.test import SimpleTestCase\n+\n+class SkipChecksOptionTest(SimpleTestCase):\n+    def test_skip_checks_option_not_exposed(self):\n+        \"\"\"\n+        Test that the --skip-checks option is not exposed on the command line.\n+        \"\"\"\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('dance', '--skip-checks', stdout=StringIO())\n+        self.assertIn(\"unrecognized arguments: --skip-checks\", str(cm.exception))\n",
  "inverted_patch": "diff --git a/tests/user_commands/add_skip_checks_option_test_inverted.py b/tests/user_commands/add_skip_checks_option_test_inverted.py\nnew file mode 100644\nindex 0000000..0438579\n--- /dev/null\n+++ b/tests/user_commands/add_skip_checks_option_test_inverted.py\n@@ -0,0 +1,16 @@\n+import os\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import call_command, CommandError\n+from django.test import SimpleTestCase\n+\n+class SkipChecksOptionTest(SimpleTestCase):\n+    def test_skip_checks_option_not_exposed(self):\n+        \"\"\"\n+        Test that the --skip-checks option is not exposed on the command line.\n+        \"\"\"\n+        try:\n+            call_command('dance', '--skip-checks', stdout=StringIO())\n+        except CommandError as cm:\n+            self.assertIn(\"unrecognized arguments: --skip-checks\", str(cm))\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}