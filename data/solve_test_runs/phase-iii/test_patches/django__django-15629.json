{
  "edit_test_file": "tests/invalid_models_tests/test_ordinary_fields.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_db_collation_foreignkey.py b/tests/invalid_models_tests/test_db_collation_foreignkey.py\nnew file mode 100644\nindex 0000000..ef4432c\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_db_collation_foreignkey.py\n@@ -0,0 +1,34 @@\n+import unittest\n+from django.db import models, connection\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+@unittest.skipUnless(connection.vendor == \"mysql\", \"Test valid only for MySQL\")\n+class DbCollationForeignKeyTests(TestCase):\n+    def test_foreign_key_collation_mismatch(self):\n+        class Account(models.Model):\n+            id = models.CharField(\n+                primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22\n+            )\n+\n+        class Address(models.Model):\n+            id = models.CharField(\n+                primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22\n+            )\n+            account = models.OneToOneField(Account, on_delete=models.CASCADE)\n+\n+        class Profile(models.Model):\n+            id = models.CharField(\n+                primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22\n+            )\n+            account = models.ForeignKey(\n+                'Account', verbose_name=_('account'), null=True, blank=True, on_delete=models.CASCADE\n+            )\n+\n+        with self.assertRaises(Exception) as context:\n+            with connection.schema_editor() as schema_editor:\n+                schema_editor.create_model(Account)\n+                schema_editor.create_model(Address)\n+                schema_editor.create_model(Profile)\n+\n+        self.assertIn('COLLATE', str(context.exception))\n",
  "inverted_patch": null
}