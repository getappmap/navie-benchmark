{
  "edit_test_file": "tests/migrations/test_multidb.py",
  "test_patch": "diff --git a/tests/migrations/test_queryset_ordering.py b/tests/migrations/test_queryset_ordering.py\nnew file mode 100644\nindex 0000000..e72c18c\n--- /dev/null\n+++ b/tests/migrations/test_queryset_ordering.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+class Foo(models.Model):\n+    uuid = models.CharField(max_length=36)\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class QuerySetOrderingTests(TestCase):\n+    def test_queryset_ordered_property_with_group_by(self):\n+        # Create some test data\n+        Foo.objects.create(uuid='1', name='Alice')\n+        Foo.objects.create(uuid='2', name='Bob')\n+\n+        # QuerySet with default ordering\n+        qs = Foo.objects.all()\n+        self.assertTrue(qs.ordered)\n+        self.assertTrue(qs.query.default_ordering)\n+\n+        # QuerySet with GROUP BY\n+        qs2 = Foo.objects.annotate(Count(\"pk\")).all()\n+        self.assertTrue(qs2.ordered)  # This should be True according to the issue\n+        self.assertTrue(qs2.query.default_ordering)  # This should be True according to the issue\n",
  "inverted_patch": "diff --git a/tests/migrations/test_queryset_ordering_inverted.py b/tests/migrations/test_queryset_ordering_inverted.py\nnew file mode 100644\nindex 0000000..5f139b7\n--- /dev/null\n+++ b/tests/migrations/test_queryset_ordering_inverted.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+class Foo(models.Model):\n+    uuid = models.CharField(max_length=36)\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class QuerySetOrderingTests(TestCase):\n+    def test_queryset_ordered_property_with_group_by(self):\n+        # Create some test data\n+        Foo.objects.create(uuid='1', name='Alice')\n+        Foo.objects.create(uuid='2', name='Bob')\n+\n+        # QuerySet with default ordering\n+        qs = Foo.objects.all()\n+        self.assertTrue(qs.ordered)\n+        self.assertTrue(qs.query.default_ordering)\n+\n+        # QuerySet with GROUP BY\n+        qs2 = Foo.objects.annotate(Count(\"pk\")).all()\n+        self.assertFalse(qs2.ordered, \"__BUG__HERE__\")  # This should be False according to the issue\n+        self.assertFalse(qs2.query.default_ordering, \"__BUG__HERE__\")  # This should be False according to the issue\n"
}