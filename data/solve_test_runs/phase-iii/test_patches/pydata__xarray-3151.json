{
  "edit_test_file": "xarray/tests/test_combine.py",
  "test_patch": "diff --git a/xarray/tests/test_combine_by_coords.py b/xarray/tests/test_combine_by_coords.py\nnew file mode 100644\nindex 0000000..6f37d69\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords.py\n@@ -0,0 +1,36 @@\n+from datetime import datetime\n+import numpy as np\n+from xarray import Dataset, combine_by_coords\n+import unittest\n+\n+class TestCombineByCoordsNonMonotonic(unittest.TestCase):\n+    def test_non_monotonic_identical_coords(self):\n+        yCoord = ['a', 'c', 'b']  # non-monotonic coordinates\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        with self.assertRaises(ValueError) as context:\n+            combine_by_coords((ds1, ds2))\n+\n+        self.assertIn(\"does not have monotonic global indexes along dimension y\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/xarray/tests/test_combine_by_coords_inverted.py b/xarray/tests/test_combine_by_coords_inverted.py\nnew file mode 100644\nindex 0000000..df173bb\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords_inverted.py\n@@ -0,0 +1,36 @@\n+from datetime import datetime\n+import numpy as np\n+from xarray import Dataset, combine_by_coords\n+import unittest\n+\n+class TestCombineByCoordsNonMonotonic(unittest.TestCase):\n+    def test_non_monotonic_identical_coords(self):\n+        yCoord = ['a', 'c', 'b']  # non-monotonic coordinates\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        try:\n+            combine_by_coords((ds1, ds2))\n+        except ValueError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}