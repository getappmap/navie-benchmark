{
  "edit_test_file": "tests/requests/tests.py",
  "test_patch": "diff --git a/tests/requests/test_catch_all_view_force_script_name.py b/tests/requests/test_catch_all_view_force_script_name.py\nnew file mode 100644\nindex 0000000..a0627f1\n--- /dev/null\n+++ b/tests/requests/test_catch_all_view_force_script_name.py\n@@ -0,0 +1,24 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.http import HttpRequest\n+from django.urls import reverse\n+\n+def catch_all_view(request):\n+    # Simulate the behavior of the catch_all_view that returns a redirect\n+    # to '%s/' % request.path_info instead of '%s/' % request.path\n+    return '%s/' % request.path_info\n+\n+class CatchAllViewForceScriptNameTests(SimpleTestCase):\n+    @override_settings(FORCE_SCRIPT_NAME='/PREFIX/')\n+    def test_catch_all_view_does_not_support_force_script_name(self):\n+        request = HttpRequest()\n+        request.path = '/somepath/'\n+        request.path_info = '/somepath/'\n+        request.META['SCRIPT_NAME'] = '/PREFIX/'\n+\n+        # Simulate calling the catch_all_view\n+        redirect_url = catch_all_view(request)\n+\n+        # The issue is that the redirect URL is based on path_info, not path\n+        # This test should pass if the issue is present, i.e., the redirect\n+        # URL is incorrect.\n+        self.assertEqual(redirect_url, '/somepath//')\n",
  "inverted_patch": "diff --git a/tests/requests/test_catch_all_view_force_script_name_inverted.py b/tests/requests/test_catch_all_view_force_script_name_inverted.py\nnew file mode 100644\nindex 0000000..de63e65\n--- /dev/null\n+++ b/tests/requests/test_catch_all_view_force_script_name_inverted.py\n@@ -0,0 +1,25 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.http import HttpRequest\n+\n+def catch_all_view(request):\n+    # Simulate the behavior of the catch_all_view that returns a redirect\n+    # to '%s/' % request.path_info instead of '%s/' % request.path\n+    return '%s/' % request.path_info\n+\n+class CatchAllViewForceScriptNameTests(SimpleTestCase):\n+    @override_settings(FORCE_SCRIPT_NAME='/PREFIX/')\n+    def test_catch_all_view_does_not_support_force_script_name(self):\n+        request = HttpRequest()\n+        request.path = '/somepath/'\n+        request.path_info = '/somepath/'\n+        request.META['SCRIPT_NAME'] = '/PREFIX/'\n+\n+        # Simulate calling the catch_all_view\n+        redirect_url = catch_all_view(request)\n+\n+        # The issue is that the redirect URL is based on path_info, not path\n+        # This test should fail if the issue is present, i.e., the redirect\n+        # URL is incorrect.\n+        if redirect_url == '/somepath//':\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(redirect_url, '/PREFIX/somepath/')\n"
}