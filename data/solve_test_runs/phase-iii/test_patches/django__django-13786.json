{
  "edit_test_file": "tests/migrations/test_operations.py",
  "test_patch": "diff --git a/tests/migrations/test_squashmigrations_optimize_model_options.py b/tests/migrations/test_squashmigrations_optimize_model_options.py\nnew file mode 100644\nindex 0000000..f03e4f1\n--- /dev/null\n+++ b/tests/migrations/test_squashmigrations_optimize_model_options.py\n@@ -0,0 +1,51 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.state import ProjectState, ModelState\n+\n+class TestSquashMigrationsModelOptions(SimpleTestCase):\n+    def test_squashmigrations_does_not_unset_model_options(self):\n+        \"\"\"\n+        Test that squashing migrations does not unset model options when\n+        optimizing CreateModel and AlterModelOptions.\n+        \"\"\"\n+        # Initial state with a model having some options\n+        initial_state = ProjectState()\n+        initial_state.add_model(ModelState(\n+            app_label='test_app',\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        ))\n+\n+        # CreateModel operation\n+        create_model_op = migrations.CreateModel(\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        )\n+\n+        # AlterModelOptions operation that should clear options\n+        alter_model_options_op = migrations.AlterModelOptions(\n+            name='TestModel',\n+            options={},\n+        )\n+\n+        # Apply the CreateModel operation\n+        create_model_op.state_forwards('test_app', initial_state)\n+\n+        # Apply the AlterModelOptions operation\n+        alter_model_options_op.state_forwards('test_app', initial_state)\n+\n+        # Reduce the operations\n+        reduced_operations = create_model_op.reduce(alter_model_options_op, 'test_app')\n+\n+        # Check if the options are not cleared in the reduced CreateModel operation\n+        self.assertEqual(\n+            reduced_operations[0].options,\n+            {'verbose_name': 'Test Model'},\n+            \"Model options were not cleared when they should have been.\"\n+        )\n",
  "inverted_patch": "diff --git a/tests/migrations/test_squashmigrations_optimize_model_options_inverted.py b/tests/migrations/test_squashmigrations_optimize_model_options_inverted.py\nnew file mode 100644\nindex 0000000..6cfb114\n--- /dev/null\n+++ b/tests/migrations/test_squashmigrations_optimize_model_options_inverted.py\n@@ -0,0 +1,51 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.state import ProjectState, ModelState\n+\n+class TestSquashMigrationsModelOptions(SimpleTestCase):\n+    def test_squashmigrations_does_not_unset_model_options(self):\n+        \"\"\"\n+        Test that squashing migrations does not unset model options when\n+        optimizing CreateModel and AlterModelOptions.\n+        \"\"\"\n+        # Initial state with a model having some options\n+        initial_state = ProjectState()\n+        initial_state.add_model(ModelState(\n+            app_label='test_app',\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        ))\n+\n+        # CreateModel operation\n+        create_model_op = migrations.CreateModel(\n+            name='TestModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ],\n+            options={'verbose_name': 'Test Model'},\n+        )\n+\n+        # AlterModelOptions operation that should clear options\n+        alter_model_options_op = migrations.AlterModelOptions(\n+            name='TestModel',\n+            options={},\n+        )\n+\n+        # Apply the CreateModel operation\n+        create_model_op.state_forwards('test_app', initial_state)\n+\n+        # Apply the AlterModelOptions operation\n+        alter_model_options_op.state_forwards('test_app', initial_state)\n+\n+        # Reduce the operations\n+        reduced_operations = create_model_op.reduce(alter_model_options_op, 'test_app')\n+\n+        # Check if the options are cleared in the reduced CreateModel operation\n+        self.assertEqual(\n+            reduced_operations[0].options,\n+            {},\n+            \"__BUG__HERE__\"\n+        )\n"
}