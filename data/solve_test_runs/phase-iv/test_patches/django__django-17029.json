{
  "edit_test_file": "tests/model_meta/tests.py",
  "test_patch": "diff --git a/tests/model_meta/test_clear_cache.py b/tests/model_meta/test_clear_cache.py\nnew file mode 100644\nindex 0000000..a1b0640\n--- /dev/null\n+++ b/tests/model_meta/test_clear_cache.py\n@@ -0,0 +1,14 @@\n+from django.test import SimpleTestCase\n+from django.apps import apps\n+\n+class ClearCacheTest(SimpleTestCase):\n+    def test_clear_cache_does_not_clear_get_swappable_settings_name_cache(self):\n+        # Access the cache to populate it\n+        apps.get_swappable_settings_name('auth.User')\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check if the cache is still populated\n+        cached_value = apps.get_swappable_settings_name('auth.User')\n+        self.assertIsNotNone(cached_value, \"Cache should not be cleared by clear_cache()\")\n",
  "inverted_patch": "diff --git a/tests/model_meta/test_clear_cache_inverted.py b/tests/model_meta/test_clear_cache_inverted.py\nnew file mode 100644\nindex 0000000..e771873\n--- /dev/null\n+++ b/tests/model_meta/test_clear_cache_inverted.py\n@@ -0,0 +1,14 @@\n+from django.test import SimpleTestCase\n+from django.apps import apps\n+\n+class ClearCacheTest(SimpleTestCase):\n+    def test_clear_cache_does_not_clear_get_swappable_settings_name_cache(self):\n+        # Access the cache to populate it\n+        apps.get_swappable_settings_name('auth.User')\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Check if the cache is still populated\n+        cached_value = apps.get_swappable_settings_name('auth.User')\n+        self.assertIsNone(cached_value, \"__BUG__HERE__\")\n"
}