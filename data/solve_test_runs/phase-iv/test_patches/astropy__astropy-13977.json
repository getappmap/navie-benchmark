{
  "edit_test_file": "astropy/units/tests/test_quantity.py",
  "test_patch": "diff --git a/astropy/units/tests/test_duckarray_ufunc.py b/astropy/units/tests/test_duckarray_ufunc.py\nnew file mode 100644\nindex 0000000..71ed708\n--- /dev/null\n+++ b/astropy/units/tests/test_duckarray_ufunc.py\n@@ -0,0 +1,34 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the DuckArray class and related ufunc behavior.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_duckarray_ufunc_incompatible_units():\n+    \"\"\"Test that DuckArray with incompatible units raises ValueError.\"\"\"\n+    duck_array = DuckArray(1 * u.mm)\n+    with pytest.raises(ValueError, match=\"Value not scalar compatible or convertible to an int, float, or complex array\"):\n+        _ = (1 * u.m) + duck_array\n",
  "inverted_patch": "diff --git a/astropy/units/tests/test_duckarray_ufunc_inverted.py b/astropy/units/tests/test_duckarray_ufunc_inverted.py\nnew file mode 100644\nindex 0000000..f329840\n--- /dev/null\n+++ b/astropy/units/tests/test_duckarray_ufunc_inverted.py\n@@ -0,0 +1,34 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"Test the DuckArray class and related ufunc behavior.\"\"\"\n+\n+import dataclasses\n+import numpy as np\n+import pytest\n+from astropy import units as u\n+\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+\n+def test_duckarray_ufunc_incompatible_units():\n+    \"\"\"Test that DuckArray with incompatible units raises ValueError.\"\"\"\n+    duck_array = DuckArray(1 * u.mm)\n+    with pytest.raises(NotImplementedError, match=\"__BUG__HERE__\"):\n+        _ = (1 * u.m) + duck_array\n"
}