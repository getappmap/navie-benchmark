{
  "edit_test_file": "tests/auth_tests/test_checks.py",
  "test_patch": "diff --git a/tests/auth_tests/test_modelbackend_authenticate.py b/tests/auth_tests/test_modelbackend_authenticate.py\nnew file mode 100644\nindex 0000000..ac519e0\n--- /dev/null\n+++ b/tests/auth_tests/test_modelbackend_authenticate.py\n@@ -0,0 +1,15 @@\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.backends import ModelBackend\n+from django.db import connection\n+\n+UserModel = get_user_model()\n+\n+class ModelBackendAuthenticateTests(TestCase):\n+    def test_authenticate_with_none_username(self):\n+        \"\"\"\n+        ModelBackend.authenticate() should not make a database query when username is None.\n+        \"\"\"\n+        backend = ModelBackend()\n+        with self.assertNumQueries(1):\n+            backend.authenticate(None, username=None, password=None)\n",
  "inverted_patch": "diff --git a/tests/auth_tests/test_modelbackend_authenticate_inverted.py b/tests/auth_tests/test_modelbackend_authenticate_inverted.py\nnew file mode 100644\nindex 0000000..706b197\n--- /dev/null\n+++ b/tests/auth_tests/test_modelbackend_authenticate_inverted.py\n@@ -0,0 +1,16 @@\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.backends import ModelBackend\n+from django.db import connection\n+\n+UserModel = get_user_model()\n+\n+class ModelBackendAuthenticateTests(TestCase):\n+    def test_authenticate_with_none_username(self):\n+        \"\"\"\n+        ModelBackend.authenticate() should not make a database query when username is None.\n+        \"\"\"\n+        backend = ModelBackend()\n+        with self.assertRaisesMessage(AssertionError, \"__BUG__HERE__\"):\n+            with self.assertNumQueries(0):\n+                backend.authenticate(None, username=None, password=None)\n"
}