{
  "edit_test_file": "xarray/tests/test_computation.py",
  "test_patch": "diff --git a/xarray/tests/test_where_preserve_attrs.py b/xarray/tests/test_where_preserve_attrs.py\nnew file mode 100644\nindex 0000000..e14d5a9\n--- /dev/null\n+++ b/xarray/tests/test_where_preserve_attrs.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWherePreserveAttrs(unittest.TestCase):\n+    def test_where_drops_attributes(self):\n+        # Create a DataArray with attributes\n+        data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+        data.attrs[\"attr_1\"] = \"test1\"\n+        data.attrs[\"attr_2\"] = \"test2\"\n+\n+        # Apply xr.where\n+        result = xr.where(data == 1, 5, 0)\n+\n+        # Check that attributes are not preserved\n+        self.assertEqual(result.attrs, {})\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/xarray/tests/test_where_preserve_attrs_inverted.py b/xarray/tests/test_where_preserve_attrs_inverted.py\nnew file mode 100644\nindex 0000000..c4581a6\n--- /dev/null\n+++ b/xarray/tests/test_where_preserve_attrs_inverted.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWherePreserveAttrs(unittest.TestCase):\n+    def test_where_drops_attributes(self):\n+        # Create a DataArray with attributes\n+        data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+        data.attrs[\"attr_1\"] = \"test1\"\n+        data.attrs[\"attr_2\"] = \"test2\"\n+\n+        # Apply xr.where\n+        result = xr.where(data == 1, 5, 0)\n+\n+        # Check that attributes are preserved\n+        if result.attrs != data.attrs:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}