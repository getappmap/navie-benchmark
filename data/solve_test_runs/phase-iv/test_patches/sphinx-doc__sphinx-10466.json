{
  "edit_test_file": "tests/test_util_docutils.py",
  "test_patch": "diff --git a/tests/test_bug_duplicate_locations.py b/tests/test_bug_duplicate_locations.py\nnew file mode 100644\nindex 0000000..3717f15\n--- /dev/null\n+++ b/tests/test_bug_duplicate_locations.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sphinx.builders.gettext import Message, Catalog, MsgOrigin\n+\n+class TestDuplicateLocations(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        catalog = Catalog()\n+        origin1 = MsgOrigin('manual/modeling/hair.rst', 0)\n+        origin2 = MsgOrigin('manual/modeling/hair.rst', 0)\n+        origin3 = MsgOrigin('manual/modeling/hair.rst', 0)\n+        \n+        catalog.add(\"Type\", origin1)\n+        catalog.add(\"Type\", origin2)\n+        catalog.add(\"Type\", origin3)\n+\n+        messages = list(catalog)\n+        self.assertEqual(len(messages), 1)\n+        message = messages[0]\n+        \n+        # Check if the locations are duplicated\n+        self.assertEqual(len(message.locations), 3)\n+        self.assertEqual(message.locations.count(('manual/modeling/hair.rst', 0)), 3)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/test_bug_duplicate_locations_inverted.py b/tests/test_bug_duplicate_locations_inverted.py\nnew file mode 100644\nindex 0000000..766e841\n--- /dev/null\n+++ b/tests/test_bug_duplicate_locations_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from sphinx.builders.gettext import Message, Catalog, MsgOrigin\n+\n+class TestDuplicateLocations(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        catalog = Catalog()\n+        origin1 = MsgOrigin('manual/modeling/hair.rst', 0)\n+        origin2 = MsgOrigin('manual/modeling/hair.rst', 0)\n+        origin3 = MsgOrigin('manual/modeling/hair.rst', 0)\n+        \n+        catalog.add(\"Type\", origin1)\n+        catalog.add(\"Type\", origin2)\n+        catalog.add(\"Type\", origin3)\n+\n+        messages = list(catalog)\n+        self.assertEqual(len(messages), 1)\n+        message = messages[0]\n+        \n+        # Check if the locations are duplicated\n+        # This assertion should now fail if the bug is present\n+        if len(message.locations) != 1 or message.locations.count(('manual/modeling/hair.rst', 0)) != 1:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}