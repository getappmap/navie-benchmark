{
  "edit_test_file": "tests/queries/test_db_returning.py",
  "test_patch": "diff --git a/tests/queries/test_from_db_value_on_insert.py b/tests/queries/test_from_db_value_on_insert.py\nnew file mode 100644\nindex 0000000..2518e5a\n--- /dev/null\n+++ b/tests/queries/test_from_db_value_on_insert.py\n@@ -0,0 +1,39 @@\n+import random\n+import string\n+from django.db import models, connection\n+from django.test import TestCase\n+\n+class MyIntWrapper:\n+    def __init__(self, value):\n+        self.value = value\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self.value)\n+\n+    def __eq__(self, other):\n+        if isinstance(other, self.__class__):\n+            return self.value == other.value\n+        return self.value == other\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, conn):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FromDBValueOnInsertTest(TestCase):\n+    def test_from_db_value_not_called_on_insert(self):\n+        # Create an instance of AutoModel\n+        am = AutoModel.objects.create()\n+        # Check if the id is not wrapped in MyIntWrapper\n+        self.assertNotIsInstance(am.id, MyIntWrapper)\n+        # Check if the id is a plain integer\n+        self.assertIsInstance(am.id, int)\n",
  "inverted_patch": "diff --git a/tests/queries/test_from_db_value_on_insert_inverted.py b/tests/queries/test_from_db_value_on_insert_inverted.py\nnew file mode 100644\nindex 0000000..89c3487\n--- /dev/null\n+++ b/tests/queries/test_from_db_value_on_insert_inverted.py\n@@ -0,0 +1,40 @@\n+import random\n+import string\n+from django.db import models, connection\n+from django.test import TestCase\n+\n+class MyIntWrapper:\n+    def __init__(self, value):\n+        self.value = value\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self.value)\n+\n+    def __eq__(self, other):\n+        if isinstance(other, self.__class__):\n+            return self.value == other.value\n+        return self.value == other\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, conn):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class FromDBValueOnInsertTest(TestCase):\n+    def test_from_db_value_not_called_on_insert(self):\n+        # Create an instance of AutoModel\n+        am = AutoModel.objects.create()\n+        # Check if the id is wrapped in MyIntWrapper\n+        if not isinstance(am.id, MyIntWrapper):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        # Check if the id is not a plain integer\n+        self.assertNotIsInstance(am.id, int)\n"
}