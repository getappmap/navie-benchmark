{
  "edit_test_file": "lib/matplotlib/tests/test_ticker.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_invert_log_scale.py b/lib/matplotlib/tests/test_invert_log_scale.py\nnew file mode 100644\nindex 0000000..ebd5eea\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_invert_log_scale.py\n@@ -0,0 +1,25 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestInvertLogScale(unittest.TestCase):\n+    def test_invert_log_scale(self):\n+        y = np.linspace(1000e2, 1, 100)\n+        x = np.exp(-np.linspace(0, 1, y.size))\n+\n+        for yscale in ('linear', 'log'):\n+            fig, ax = plt.subplots()\n+            ax.plot(x, y)\n+            ax.set_yscale(yscale)\n+            ax.set_ylim(y.max(), y.min())\n+\n+            # Check if the y-axis is inverted\n+            y_limits = ax.get_ylim()\n+            if yscale == 'linear':\n+                self.assertEqual(y_limits, (y.max(), y.min()))\n+            else:\n+                # For log scale, the axis should not be inverted, reproducing the issue\n+                self.assertNotEqual(y_limits, (y.max(), y.min()))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_invert_log_scale_inverted.py b/lib/matplotlib/tests/test_invert_log_scale_inverted.py\nnew file mode 100644\nindex 0000000..5234826\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_invert_log_scale_inverted.py\n@@ -0,0 +1,27 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestInvertLogScale(unittest.TestCase):\n+    def test_invert_log_scale(self):\n+        y = np.linspace(1000e2, 1, 100)\n+        x = np.exp(-np.linspace(0, 1, y.size))\n+\n+        for yscale in ('linear', 'log'):\n+            fig, ax = plt.subplots()\n+            ax.plot(x, y)\n+            ax.set_yscale(yscale)\n+            ax.set_ylim(y.max(), y.min())\n+\n+            # Check if the y-axis is inverted\n+            y_limits = ax.get_ylim()\n+            if yscale == 'linear':\n+                self.assertEqual(y_limits, (y.max(), y.min()))\n+            else:\n+                # For log scale, the axis should be inverted, but it is not\n+                # This should now fail when the bug is observed\n+                if y_limits != (y.max(), y.min()):\n+                    raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}