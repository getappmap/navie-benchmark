{
  "edit_test_file": "sympy/logic/tests/test_inference.py",
  "test_patch": "diff --git a/sympy/logic/tests/test_diophantine_sym_order.py b/sympy/logic/tests/test_diophantine_sym_order.py\nnew file mode 100644\nindex 0000000..7a151c4\n--- /dev/null\n+++ b/sympy/logic/tests/test_diophantine_sym_order.py\n@@ -0,0 +1,14 @@\n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+def test_diophantine_sym_order_issue():\n+    m, n = symbols('m n', integer=True)\n+    expr = n**4 + m**4 - 2**4 - 3**4\n+\n+    # Test with syms order (m, n)\n+    result_mn = diophantine(expr, syms=(m, n), permute=True)\n+    assert result_mn == {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Test with syms order (n, m)\n+    result_nm = diophantine(expr, syms=(n, m), permute=True)\n+    assert result_nm == {(3, 2)}\n",
  "inverted_patch": "diff --git a/sympy/logic/tests/test_diophantine_sym_order_inverted.py b/sympy/logic/tests/test_diophantine_sym_order_inverted.py\nnew file mode 100644\nindex 0000000..9d31ef2\n--- /dev/null\n+++ b/sympy/logic/tests/test_diophantine_sym_order_inverted.py\n@@ -0,0 +1,15 @@\n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+def test_diophantine_sym_order_issue():\n+    m, n = symbols('m n', integer=True)\n+    expr = n**4 + m**4 - 2**4 - 3**4\n+\n+    # Test with syms order (m, n)\n+    result_mn = diophantine(expr, syms=(m, n), permute=True)\n+    assert result_mn == {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Test with syms order (n, m)\n+    result_nm = diophantine(expr, syms=(n, m), permute=True)\n+    if result_nm == {(3, 2)}:\n+        raise AssertionError(\"__BUG__HERE__\")\n"
}