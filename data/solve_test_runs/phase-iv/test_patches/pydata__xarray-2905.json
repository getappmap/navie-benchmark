{
  "edit_test_file": "xarray/tests/test_variable.py",
  "test_patch": "diff --git a/xarray/tests/test_assignment_coercion.py b/xarray/tests/test_assignment_coercion.py\nnew file mode 100644\nindex 0000000..91a77f7\n--- /dev/null\n+++ b/xarray/tests/test_assignment_coercion.py\n@@ -0,0 +1,21 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestAssignmentCoercion(unittest.TestCase):\n+    def test_variable_setitem_coercion(self):\n+        class HasValues:\n+            values = 5\n+\n+        good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+        # Perform assignments\n+        good_indexed.loc[{'dim_0': 0}] = set()\n+        bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+        # Assert the expected incorrect behavior\n+        self.assertTrue(np.array_equal(bad_indexed.values, np.array([np.array(5)], dtype=object)),\n+                        \"Expected coercion to occur, but it did not.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/xarray/tests/test_assignment_coercion_inverted.py b/xarray/tests/test_assignment_coercion_inverted.py\nnew file mode 100644\nindex 0000000..fd90d3a\n--- /dev/null\n+++ b/xarray/tests/test_assignment_coercion_inverted.py\n@@ -0,0 +1,21 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestAssignmentCoercion(unittest.TestCase):\n+    def test_variable_setitem_coercion(self):\n+        class HasValues:\n+            values = 5\n+\n+        good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+        # Perform assignments\n+        good_indexed.loc[{'dim_0': 0}] = set()\n+        bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+        # Assert the expected incorrect behavior\n+        if np.array_equal(bad_indexed.values, np.array([np.array(5)], dtype=object)):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}