{
  "edit_test_file": "tests/test_util_inspect.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature.py b/tests/test_ext_autodoc_docstring_signature.py\nnew file mode 100644\nindex 0000000..f8c5113\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature.py\n@@ -0,0 +1,28 @@\n+\"\"\"\n+    test_ext_autodoc_docstring_signature\n+    ~~~~~~~~~~~~~~~\n+\n+    Tests autodoc_docstring_signature with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_with_overloaded_methods():\n+    class SwigWrappedClass:\n+        def overloaded_method(self, arg1):\n+            \"\"\"overloaded_method(int arg1)\n+            overloaded_method(float arg1)\n+            \"\"\"\n+            pass\n+\n+    # Simulate the behavior of autodoc_docstring_signature\n+    docstring = SwigWrappedClass.overloaded_method.__doc__\n+    first_signature = docstring.splitlines()[0]\n+\n+    # The issue is that only the first signature is picked up\n+    assert first_signature == \"overloaded_method(int arg1)\"\n+    # The test should pass when the issue is observed, i.e., only the first signature is picked up\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature_inverted.py b/tests/test_ext_autodoc_docstring_signature_inverted.py\nnew file mode 100644\nindex 0000000..2d5cb80\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature_inverted.py\n@@ -0,0 +1,29 @@\n+\"\"\"\n+    test_ext_autodoc_docstring_signature\n+    ~~~~~~~~~~~~~~~\n+\n+    Tests autodoc_docstring_signature with overloaded methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+from sphinx.util import inspect\n+\n+def test_autodoc_docstring_signature_with_overloaded_methods():\n+    class SwigWrappedClass:\n+        def overloaded_method(self, arg1):\n+            \"\"\"overloaded_method(int arg1)\n+            overloaded_method(float arg1)\n+            \"\"\"\n+            pass\n+\n+    # Simulate the behavior of autodoc_docstring_signature\n+    docstring = SwigWrappedClass.overloaded_method.__doc__\n+    first_signature = docstring.splitlines()[0]\n+\n+    # The issue is that only the first signature is picked up\n+    # The test should fail when the issue is observed, i.e., only the first signature is picked up\n+    if first_signature == \"overloaded_method(int arg1)\":\n+        raise AssertionError(\"__BUG__HERE__\")\n"
}