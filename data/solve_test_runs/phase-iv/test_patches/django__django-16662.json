{
  "edit_test_file": "tests/template_backends/test_django.py",
  "test_patch": "diff --git a/tests/template_backends/test_migration_import_ordering.py b/tests/template_backends/test_migration_import_ordering.py\nnew file mode 100644\nindex 0000000..152b546\n--- /dev/null\n+++ b/tests/template_backends/test_migration_import_ordering.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from pathlib import Path\n+\n+class TestMigrationImportOrdering(unittest.TestCase):\n+    def test_migration_import_ordering(self):\n+        # Path to the migration file to be tested\n+        migration_file_path = Path(__file__).parent.parent / \"migrations\" / \"test_migrations_order\" / \"0001.py\"\n+        \n+        # Read the content of the migration file\n+        with open(migration_file_path, \"r\") as file:\n+            content = file.readlines()\n+        \n+        # Check the order of imports\n+        import_statements = [line.strip() for line in content if line.startswith(\"import\") or line.startswith(\"from\")]\n+        \n+        # Expected order of imports\n+        expected_order = [\n+            \"import datetime\",\n+            \"import time\",\n+            \"from django.db import migrations, models\"\n+        ]\n+        \n+        # Assert that the import statements are not in the expected order\n+        self.assertNotEqual(import_statements, expected_order, \"Migration imports are in the correct order, expected them to be incorrect.\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/template_backends/test_migration_import_ordering_inverted.py b/tests/template_backends/test_migration_import_ordering_inverted.py\nnew file mode 100644\nindex 0000000..a471063\n--- /dev/null\n+++ b/tests/template_backends/test_migration_import_ordering_inverted.py\n@@ -0,0 +1,28 @@\n+import unittest\n+from pathlib import Path\n+\n+class TestMigrationImportOrdering(unittest.TestCase):\n+    def test_migration_import_ordering(self):\n+        # Path to the migration file to be tested\n+        migration_file_path = Path(__file__).parent.parent / \"migrations\" / \"test_migrations_order\" / \"0001.py\"\n+        \n+        # Read the content of the migration file\n+        with open(migration_file_path, \"r\") as file:\n+            content = file.readlines()\n+        \n+        # Check the order of imports\n+        import_statements = [line.strip() for line in content if line.startswith(\"import\") or line.startswith(\"from\")]\n+        \n+        # Expected order of imports\n+        expected_order = [\n+            \"import datetime\",\n+            \"import time\",\n+            \"from django.db import migrations, models\"\n+        ]\n+        \n+        # Assert that the import statements are in the expected order\n+        # This will now fail if the imports are not in the expected order\n+        self.assertEqual(import_statements, expected_order, \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}