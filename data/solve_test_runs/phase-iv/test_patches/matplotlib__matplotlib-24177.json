{
  "edit_test_file": "lib/matplotlib/tests/test_axes.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hist_step_autoscale.py b/lib/matplotlib/tests/test_hist_step_autoscale.py\nnew file mode 100644\nindex 0000000..2ecd188\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hist_step_autoscale.py\n@@ -0,0 +1,25 @@\n+# File: lib/matplotlib/tests/test_hist_step_autoscale.py\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_hist_step_autoscale(fig_test, fig_ref):\n+    scale = 1.2\n+    test_random = np.random.randn(100000) * scale\n+\n+    ax_test = fig_test.subplots(1, 2)\n+    ax_ref = fig_ref.subplots(1, 2)\n+\n+    # Test case with histtype='bar'\n+    ax_test[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+    ax_ref[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+\n+    # Test case with histtype='step'\n+    ax_test[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+    ax_ref[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+\n+    # The test will pass if the issue is reproduced, i.e., the y-axis limits\n+    # are not the same for the 'step' histtype compared to the 'bar' histtype.\n+    assert ax_test[1].get_ylim() != ax_test[0].get_ylim()\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_hist_step_autoscale_inverted.py b/lib/matplotlib/tests/test_hist_step_autoscale_inverted.py\nnew file mode 100644\nindex 0000000..9d639a2\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hist_step_autoscale_inverted.py\n@@ -0,0 +1,26 @@\n+# File: lib/matplotlib/tests/test_hist_step_autoscale.py\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_hist_step_autoscale(fig_test, fig_ref):\n+    scale = 1.2\n+    test_random = np.random.randn(100000) * scale\n+\n+    ax_test = fig_test.subplots(1, 2)\n+    ax_ref = fig_ref.subplots(1, 2)\n+\n+    # Test case with histtype='bar'\n+    ax_test[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+    ax_ref[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+\n+    # Test case with histtype='step'\n+    ax_test[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+    ax_ref[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+\n+    # The test will fail if the issue is reproduced, i.e., the y-axis limits\n+    # are not the same for the 'step' histtype compared to the 'bar' histtype.\n+    if ax_test[1].get_ylim() != ax_test[0].get_ylim():\n+        raise AssertionError(\"__BUG__HERE__\")\n"
}