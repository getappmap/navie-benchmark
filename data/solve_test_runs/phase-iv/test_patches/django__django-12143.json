{
  "edit_test_file": "tests/model_formsets/tests.py",
  "test_patch": "diff --git a/tests/model_formsets/test_regex_special_chars.py b/tests/model_formsets/test_regex_special_chars.py\nnew file mode 100644\nindex 0000000..988a88c\n--- /dev/null\n+++ b/tests/model_formsets/test_regex_special_chars.py\n@@ -0,0 +1,37 @@\n+import re\n+from django import forms\n+from django.forms.models import inlineformset_factory\n+from django.test import TestCase\n+from .models import Author, Book\n+\n+class RegexSpecialCharsTest(TestCase):\n+    def test_formset_with_special_chars_in_prefix(self):\n+        \"\"\"\n+        Test to reproduce the issue where using regex special characters in\n+        formset prefix can cause data loss in admin changeform view.\n+        \"\"\"\n+        # Create an author instance\n+        author = Author.objects.create(name='Charles Baudelaire')\n+\n+        # Define a formset with a prefix containing regex special characters\n+        special_prefix = 'book_set[0]'\n+        AuthorBooksFormSet = inlineformset_factory(Author, Book, fields=\"__all__\")\n+\n+        # Create formset data with the special prefix\n+        data = {\n+            f'{special_prefix}-TOTAL_FORMS': '1',\n+            f'{special_prefix}-INITIAL_FORMS': '0',\n+            f'{special_prefix}-MAX_NUM_FORMS': '',\n+            f'{special_prefix}-0-title': 'Les Fleurs du Mal',\n+        }\n+\n+        # Initialize the formset with the special prefix\n+        formset = AuthorBooksFormSet(data, instance=author, prefix=special_prefix)\n+\n+        # Check if the formset is valid\n+        self.assertTrue(formset.is_valid())\n+\n+        # Save the formset and check if the book was saved correctly\n+        saved_books = formset.save()\n+        self.assertEqual(len(saved_books), 1)\n+        self.assertEqual(saved_books[0].title, 'Les Fleurs du Mal')\n",
  "inverted_patch": null
}