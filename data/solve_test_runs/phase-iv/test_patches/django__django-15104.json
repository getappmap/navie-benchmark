{
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "test_patch": "diff --git a/tests/migrations/test_keyerror_fk_hardcoded_field.py b/tests/migrations/test_keyerror_fk_hardcoded_field.py\nnew file mode 100644\nindex 0000000..f15d104\n--- /dev/null\n+++ b/tests/migrations/test_keyerror_fk_hardcoded_field.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class TestKeyErrorFKHardcodedField(unittest.TestCase):\n+    def test_keyerror_with_hardcoded_fk_field(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        with self.assertRaises(KeyError) as context:\n+            MigrationAutodetector(before, after)._detect_changes()\n+        \n+        self.assertEqual(str(context.exception), \"'to'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/migrations/test_keyerror_fk_hardcoded_field_inverted.py b/tests/migrations/test_keyerror_fk_hardcoded_field_inverted.py\nnew file mode 100644\nindex 0000000..b928ee2\n--- /dev/null\n+++ b/tests/migrations/test_keyerror_fk_hardcoded_field_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class TestKeyErrorFKHardcodedField(unittest.TestCase):\n+    def test_keyerror_with_hardcoded_fk_field(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        with self.assertRaises(KeyError) as context:\n+            MigrationAutodetector(before, after)._detect_changes()\n+        \n+        # Alter the assertion to ensure the test fails when the bug is observed\n+        self.assertEqual(str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}