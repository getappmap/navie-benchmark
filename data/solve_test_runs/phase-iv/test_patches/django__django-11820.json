{
  "edit_test_file": "tests/custom_pk/tests.py",
  "test_patch": "diff --git a/tests/custom_pk/test_meta_ordering_issue.py b/tests/custom_pk/test_meta_ordering_issue.py\nnew file mode 100644\nindex 0000000..6aee0fb\n--- /dev/null\n+++ b/tests/custom_pk/test_meta_ordering_issue.py\n@@ -0,0 +1,25 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class MetaOrderingIssueTest(SimpleTestCase):\n+    def test_ordering_with_related_pk(self):\n+        class Option(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(Option, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['option__pk']\n+\n+        errors = SomeModel.check()\n+        self.assertIn(\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, or lookup 'option__pk'.\",\n+                obj=SomeModel,\n+                id='models.E015',\n+            ),\n+            errors\n+        )\n",
  "inverted_patch": "diff --git a/tests/custom_pk/test_meta_ordering_issue_inverted.py b/tests/custom_pk/test_meta_ordering_issue_inverted.py\nnew file mode 100644\nindex 0000000..a0ca280\n--- /dev/null\n+++ b/tests/custom_pk/test_meta_ordering_issue_inverted.py\n@@ -0,0 +1,25 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+class MetaOrderingIssueTest(SimpleTestCase):\n+    def test_ordering_with_related_pk(self):\n+        class Option(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(Option, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['option__pk']\n+\n+        errors = SomeModel.check()\n+        # Alter the test to fail when the issue is observed\n+        if any(\n+            error.id == 'models.E015' and\n+            error.obj == SomeModel and\n+            \"'ordering' refers to the nonexistent field, related field, or lookup 'option__pk'.\" in error.msg\n+            for error in errors\n+        ):\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}