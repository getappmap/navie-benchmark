{
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield_key_transform_in_operator.py b/tests/model_fields/test_jsonfield_key_transform_in_operator.py\nnew file mode 100644\nindex 0000000..2c85e13\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_key_transform_in_operator.py\n@@ -0,0 +1,47 @@\n+import operator\n+import uuid\n+from unittest import mock\n+\n+from django import forms\n+from django.core import serializers\n+from django.core.exceptions import ValidationError\n+from django.core.serializers.json import DjangoJSONEncoder\n+from django.db import (\n+    DataError, IntegrityError, NotSupportedError, OperationalError, connection,\n+    models,\n+)\n+from django.db.models import Count, F, OuterRef, Q, Subquery, Transform, Value\n+from django.db.models.expressions import RawSQL\n+from django.db.models.fields.json import (\n+    KeyTextTransform, KeyTransform, KeyTransformFactory,\n+    KeyTransformTextLookupMixin,\n+)\n+from django.db.models.functions import Cast\n+from django.test import (\n+    SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature,\n+)\n+from django.test.utils import CaptureQueriesContext\n+\n+from .models import CustomJSONDecoder, JSONModel, NullableJSONModel\n+\n+\n+@skipUnlessDBFeature('supports_json_field')\n+class TestKeyTransformInOperator(TestCase):\n+    def test_key_transform_in_operator(self):\n+        # Create test data\n+        obj1 = NullableJSONModel.objects.create(value={'key': 0})\n+        obj2 = NullableJSONModel.objects.create(value={'key': 1})\n+        obj3 = NullableJSONModel.objects.create(value={'key': 0})\n+\n+        # Test using __in lookup on key transform\n+        in_filter = {'value__key__in': [0]}\n+        in_items = NullableJSONModel.objects.filter(**in_filter)\n+\n+        # Test using direct equality lookup\n+        direct_filter = {'value__key': 0}\n+        direct_items = NullableJSONModel.objects.filter(**direct_filter)\n+\n+        # Assert that the __in lookup does not work as expected\n+        self.assertNotEqual(len(in_items), len(direct_items))\n+        self.assertEqual(len(in_items), 0)\n+        self.assertEqual(len(direct_items), 2)\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_jsonfield_key_transform_in_operator_inverted.py b/tests/model_fields/test_jsonfield_key_transform_in_operator_inverted.py\nnew file mode 100644\nindex 0000000..8d72fc1\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_key_transform_in_operator_inverted.py\n@@ -0,0 +1,49 @@\n+import operator\n+import uuid\n+from unittest import mock\n+\n+from django import forms\n+from django.core import serializers\n+from django.core.exceptions import ValidationError\n+from django.core.serializers.json import DjangoJSONEncoder\n+from django.db import (\n+    DataError, IntegrityError, NotSupportedError, OperationalError, connection,\n+    models,\n+)\n+from django.db.models import Count, F, OuterRef, Q, Subquery, Transform, Value\n+from django.db.models.expressions import RawSQL\n+from django.db.models.fields.json import (\n+    KeyTextTransform, KeyTransform, KeyTransformFactory,\n+    KeyTransformTextLookupMixin,\n+)\n+from django.db.models.functions import Cast\n+from django.test import (\n+    SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature,\n+)\n+from django.test.utils import CaptureQueriesContext\n+\n+from .models import CustomJSONDecoder, JSONModel, NullableJSONModel\n+\n+\n+@skipUnlessDBFeature('supports_json_field')\n+class TestKeyTransformInOperator(TestCase):\n+    def test_key_transform_in_operator(self):\n+        # Create test data\n+        obj1 = NullableJSONModel.objects.create(value={'key': 0})\n+        obj2 = NullableJSONModel.objects.create(value={'key': 1})\n+        obj3 = NullableJSONModel.objects.create(value={'key': 0})\n+\n+        # Test using __in lookup on key transform\n+        in_filter = {'value__key__in': [0]}\n+        in_items = NullableJSONModel.objects.filter(**in_filter)\n+\n+        # Test using direct equality lookup\n+        direct_filter = {'value__key': 0}\n+        direct_items = NullableJSONModel.objects.filter(**direct_filter)\n+\n+        # Assert that the __in lookup does not work as expected\n+        # This should now fail when the issue is observed\n+        if len(in_items) != len(direct_items):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(len(in_items), 0)\n+        self.assertEqual(len(direct_items), 2)\n"
}