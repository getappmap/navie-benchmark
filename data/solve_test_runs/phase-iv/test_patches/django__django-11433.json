{
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_cleaned_data_overwrite.py b/tests/forms_tests/tests/test_cleaned_data_overwrite.py\nnew file mode 100644\nindex 0000000..697226d\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_cleaned_data_overwrite.py\n@@ -0,0 +1,32 @@\n+import datetime\n+from django.forms import CharField, DateField, Form\n+from django.test import SimpleTestCase\n+\n+class DefaultValueModel:\n+    some_field = 'default_value'\n+\n+class CleanedDataOverwriteForm(Form):\n+    some_field = CharField(required=False)\n+    another_field = DateField()\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Attempt to overwrite 'some_field' with a new value\n+        cleaned_data['some_field'] = 'new_value'\n+        return cleaned_data\n+\n+class CleanedDataOverwriteTestCase(SimpleTestCase):\n+    def test_cleaned_data_overwrite(self):\n+        # Simulate form submission without 'some_field'\n+        form_data = {'another_field': '2023-10-10'}\n+        form = CleanedDataOverwriteForm(data=form_data)\n+\n+        # Check if the form is valid\n+        self.assertTrue(form.is_valid())\n+\n+        # Check if 'some_field' is overwritten in cleaned_data\n+        self.assertEqual(form.cleaned_data['some_field'], 'new_value')\n+\n+        # Check if the model's default value is not overwritten\n+        model_instance = DefaultValueModel()\n+        self.assertEqual(model_instance.some_field, 'default_value')\n",
  "inverted_patch": "diff --git a/tests/forms_tests/tests/test_cleaned_data_overwrite_inverted.py b/tests/forms_tests/tests/test_cleaned_data_overwrite_inverted.py\nnew file mode 100644\nindex 0000000..8995ded\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_cleaned_data_overwrite_inverted.py\n@@ -0,0 +1,33 @@\n+import datetime\n+from django.forms import CharField, DateField, Form\n+from django.test import SimpleTestCase\n+\n+class DefaultValueModel:\n+    some_field = 'default_value'\n+\n+class CleanedDataOverwriteForm(Form):\n+    some_field = CharField(required=False)\n+    another_field = DateField()\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Attempt to overwrite 'some_field' with a new value\n+        cleaned_data['some_field'] = 'new_value'\n+        return cleaned_data\n+\n+class CleanedDataOverwriteTestCase(SimpleTestCase):\n+    def test_cleaned_data_overwrite(self):\n+        # Simulate form submission without 'some_field'\n+        form_data = {'another_field': '2023-10-10'}\n+        form = CleanedDataOverwriteForm(data=form_data)\n+\n+        # Check if the form is valid\n+        self.assertTrue(form.is_valid())\n+\n+        # Check if 'some_field' is overwritten in cleaned_data\n+        if form.cleaned_data['some_field'] == 'new_value':\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Check if the model's default value is not overwritten\n+        model_instance = DefaultValueModel()\n+        self.assertEqual(model_instance.some_field, 'default_value')\n"
}