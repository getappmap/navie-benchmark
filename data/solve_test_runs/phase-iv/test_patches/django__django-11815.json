{
  "edit_test_file": "tests/migrations/test_writer.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_enum_default_value.py b/tests/migrations/test_migrations_enum_default_value.py\nnew file mode 100644\nindex 0000000..e2b08aa\n--- /dev/null\n+++ b/tests/migrations/test_migrations_enum_default_value.py\n@@ -0,0 +1,18 @@\n+import enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db.migrations.writer import MigrationWriter\n+from django.utils.translation import gettext_lazy as _\n+\n+class Status(enum.Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class MigrationEnumDefaultValueTest(SimpleTestCase):\n+    def test_enum_default_value_in_migration(self):\n+        field = Item._meta.get_field('status')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Status('Good')\", string)\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_enum_default_value_inverted.py b/tests/migrations/test_migrations_enum_default_value_inverted.py\nnew file mode 100644\nindex 0000000..5c13630\n--- /dev/null\n+++ b/tests/migrations/test_migrations_enum_default_value_inverted.py\n@@ -0,0 +1,20 @@\n+import enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db.migrations.writer import MigrationWriter\n+from django.utils.translation import gettext_lazy as _\n+\n+class Status(enum.Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class MigrationEnumDefaultValueTest(SimpleTestCase):\n+    def test_enum_default_value_in_migration(self):\n+        field = Item._meta.get_field('status')\n+        string, imports = MigrationWriter.serialize(field)\n+        # Altered the test to fail when the issue is observed\n+        if \"Status('Good')\" in string:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}