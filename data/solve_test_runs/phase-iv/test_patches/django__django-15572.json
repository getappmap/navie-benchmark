{
  "edit_test_file": "tests/template_tests/test_autoreloader.py",
  "test_patch": "diff --git a/tests/template_tests/test_template_dirs_issue.py b/tests/template_tests/test_template_dirs_issue.py\nnew file mode 100644\nindex 0000000..75d8c18\n--- /dev/null\n+++ b/tests/template_tests/test_template_dirs_issue.py\n@@ -0,0 +1,25 @@\n+from pathlib import Path\n+from unittest import mock\n+\n+from django.template import autoreload\n+from django.test import SimpleTestCase, override_settings\n+\n+ROOT = Path(__file__).parent.absolute()\n+\n+@override_settings(\n+    TEMPLATES=[\n+        {\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"DIRS\": [''],  # This is the problematic configuration\n+        }\n+    ]\n+)\n+class TemplateDirsIssueTest(SimpleTestCase):\n+    @mock.patch(\"django.template.autoreload.reset_loaders\")\n+    def test_template_changed_with_empty_dir(self, mock_reset):\n+        # Simulate a template file change\n+        template_path = Path(__file__).parent / \"templates\" / \"index.html\"\n+        # Expect template_changed to always return True due to the issue\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        # Check that reset_loaders is called due to the issue\n+        mock_reset.assert_called_once()\n",
  "inverted_patch": "diff --git a/tests/template_tests/test_template_dirs_issue_inverted.py b/tests/template_tests/test_template_dirs_issue_inverted.py\nnew file mode 100644\nindex 0000000..6de2f1c\n--- /dev/null\n+++ b/tests/template_tests/test_template_dirs_issue_inverted.py\n@@ -0,0 +1,26 @@\n+from pathlib import Path\n+from unittest import mock\n+\n+from django.template import autoreload\n+from django.test import SimpleTestCase, override_settings\n+\n+ROOT = Path(__file__).parent.absolute()\n+\n+@override_settings(\n+    TEMPLATES=[\n+        {\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"DIRS\": [''],  # This is the problematic configuration\n+        }\n+    ]\n+)\n+class TemplateDirsIssueTest(SimpleTestCase):\n+    @mock.patch(\"django.template.autoreload.reset_loaders\")\n+    def test_template_changed_with_empty_dir(self, mock_reset):\n+        # Simulate a template file change\n+        template_path = Path(__file__).parent / \"templates\" / \"index.html\"\n+        # Expect template_changed to return False due to the issue\n+        if autoreload.template_changed(None, template_path):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        # Check that reset_loaders is not called due to the issue\n+        mock_reset.assert_not_called()\n"
}