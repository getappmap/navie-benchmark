{
  "edit_test_file": "tests/signals/tests.py",
  "test_patch": "diff --git a/tests/signals/test_model_deletion_pks.py b/tests/signals/test_model_deletion_pks.py\nnew file mode 100644\nindex 0000000..69e3a53\n--- /dev/null\n+++ b/tests/signals/test_model_deletion_pks.py\n@@ -0,0 +1,13 @@\n+from django.test import TestCase\n+from .models import Person\n+\n+class ModelDeletionPKsTest(TestCase):\n+    def test_delete_clears_primary_key(self):\n+        # Create a Person instance\n+        person = Person.objects.create(first_name=\"John\", last_name=\"Doe\")\n+        \n+        # Delete the Person instance\n+        person.delete()\n+        \n+        # Check if the primary key is not cleared (issue reproduction)\n+        self.assertIsNotNone(person.pk, \"Primary key should be None after deletion, but it is not.\")\n",
  "inverted_patch": "diff --git a/tests/signals/test_model_deletion_pks_inverted.py b/tests/signals/test_model_deletion_pks_inverted.py\nnew file mode 100644\nindex 0000000..35bca13\n--- /dev/null\n+++ b/tests/signals/test_model_deletion_pks_inverted.py\n@@ -0,0 +1,15 @@\n+from django.test import TestCase\n+from .models import Person\n+\n+class ModelDeletionPKsTest(TestCase):\n+    def test_delete_clears_primary_key(self):\n+        # Create a Person instance\n+        person = Person.objects.create(first_name=\"John\", last_name=\"Doe\")\n+        \n+        # Delete the Person instance\n+        person.delete()\n+        \n+        # Check if the primary key is cleared (issue reproduction)\n+        # This should fail if the bug is present\n+        if person.pk is not None:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}