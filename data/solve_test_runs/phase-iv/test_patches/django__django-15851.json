{
  "edit_test_file": "tests/dbshell/test_postgresql.py",
  "test_patch": "diff --git a/tests/dbshell/test_dbshell_param_order.py b/tests/dbshell/test_dbshell_param_order.py\nnew file mode 100644\nindex 0000000..58e25d6\n--- /dev/null\n+++ b/tests/dbshell/test_dbshell_param_order.py\n@@ -0,0 +1,37 @@\n+import os\n+import subprocess\n+import sys\n+from pathlib import Path\n+from unittest import mock, TestCase\n+\n+from django.db import connection\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class PostgreSqlDbshellParamOrderTestCase(TestCase):\n+    def settings_to_cmd_args_env(self, settings_dict, parameters=None):\n+        if parameters is None:\n+            parameters = []\n+        return DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n+\n+    def test_parameter_order(self):\n+        # Simulate the issue where additional parameters are passed incorrectly\n+        args, env = self.settings_to_cmd_args_env(\n+            {\n+                \"NAME\": \"dbname\",\n+                \"USER\": \"someuser\",\n+                \"PASSWORD\": \"somepassword\",\n+                \"HOST\": \"somehost\",\n+                \"PORT\": \"444\",\n+            },\n+            [\"-c\", \"select * from some_table;\"]\n+        )\n+        if env:\n+            env = {**os.environ, **env}\n+        fake_client = Path(__file__).with_name(\"fake_client.py\")\n+        args[0:1] = [sys.executable, str(fake_client)]\n+        \n+        # Mock subprocess.run to capture the command and check the order of arguments\n+        with mock.patch(\"subprocess.run\") as mock_run:\n+            subprocess.run(args, check=True, env=env)\n+            # Check if the database name is not at the end of the args list\n+            self.assertNotEqual(args[-1], \"dbname\")\n",
  "inverted_patch": "diff --git a/tests/dbshell/test_dbshell_param_order_inverted.py b/tests/dbshell/test_dbshell_param_order_inverted.py\nnew file mode 100644\nindex 0000000..0fc6ed2\n--- /dev/null\n+++ b/tests/dbshell/test_dbshell_param_order_inverted.py\n@@ -0,0 +1,37 @@\n+import os\n+import subprocess\n+import sys\n+from pathlib import Path\n+from unittest import mock, TestCase\n+\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class PostgreSqlDbshellParamOrderTestCase(TestCase):\n+    def settings_to_cmd_args_env(self, settings_dict, parameters=None):\n+        if parameters is None:\n+            parameters = []\n+        return DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n+\n+    def test_parameter_order(self):\n+        # Simulate the issue where additional parameters are passed incorrectly\n+        args, env = self.settings_to_cmd_args_env(\n+            {\n+                \"NAME\": \"dbname\",\n+                \"USER\": \"someuser\",\n+                \"PASSWORD\": \"somepassword\",\n+                \"HOST\": \"somehost\",\n+                \"PORT\": \"444\",\n+            },\n+            [\"-c\", \"select * from some_table;\"]\n+        )\n+        if env:\n+            env = {**os.environ, **env}\n+        fake_client = Path(__file__).with_name(\"fake_client.py\")\n+        args[0:1] = [sys.executable, str(fake_client)]\n+        \n+        # Mock subprocess.run to capture the command and check the order of arguments\n+        with mock.patch(\"subprocess.run\") as mock_run:\n+            subprocess.run(args, check=True, env=env)\n+            # Check if the database name is at the end of the args list\n+            if args[-1] != \"dbname\":\n+                raise AssertionError(\"__BUG__HERE__\")\n"
}