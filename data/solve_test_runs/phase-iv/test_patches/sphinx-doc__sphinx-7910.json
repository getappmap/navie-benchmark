{
  "edit_test_file": "tests/test_ext_autodoc_mock.py",
  "test_patch": "diff --git a/tests/test_decorated_init_doc_issue.py b/tests/test_decorated_init_doc_issue.py\nnew file mode 100644\nindex 0000000..81ffdf3\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_issue.py\n@@ -0,0 +1,25 @@\n+import functools\n+import unittest\n+from sphinx.ext.napoleon import _skip_member\n+\n+class TestDecoratedInitDocIssue(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        class TestClass:\n+            @functools.wraps(object.__init__)\n+            def __init__(self):\n+                \"\"\"This is a decorated init method.\"\"\"\n+                pass\n+\n+        # Mock Sphinx app and config\n+        class MockApp:\n+            class MockConfig:\n+                napoleon_include_init_with_doc = True\n+\n+            config = MockConfig()\n+\n+        # Test if the decorated __init__ is skipped\n+        result = _skip_member(MockApp(), 'class', '__init__', TestClass.__init__, False, None)\n+        self.assertIsNone(result, \"Decorated __init__ should not be documented\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/test_decorated_init_doc_issue_inverted.py b/tests/test_decorated_init_doc_issue_inverted.py\nnew file mode 100644\nindex 0000000..c90f470\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_issue_inverted.py\n@@ -0,0 +1,25 @@\n+import functools\n+import unittest\n+from sphinx.ext.napoleon import _skip_member\n+\n+class TestDecoratedInitDocIssue(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        class TestClass:\n+            @functools.wraps(object.__init__)\n+            def __init__(self):\n+                \"\"\"This is a decorated init method.\"\"\"\n+                pass\n+\n+        # Mock Sphinx app and config\n+        class MockApp:\n+            class MockConfig:\n+                napoleon_include_init_with_doc = True\n+\n+            config = MockConfig()\n+\n+        # Test if the decorated __init__ is skipped\n+        result = _skip_member(MockApp(), 'class', '__init__', TestClass.__init__, False, None)\n+        self.assertIsNotNone(result, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}