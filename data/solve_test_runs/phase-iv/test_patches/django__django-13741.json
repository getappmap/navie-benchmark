{
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_readonly_password_hash_field.py b/tests/forms_tests/tests/test_readonly_password_hash_field.py\nnew file mode 100644\nindex 0000000..5327fa1\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_readonly_password_hash_field.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from django import forms\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+\n+class ReadOnlyPasswordHashFieldTestCase(unittest.TestCase):\n+    def test_readonly_password_hash_field_disabled(self):\n+        class UserForm(forms.Form):\n+            password = ReadOnlyPasswordHashField()\n+\n+        form = UserForm(initial={'password': 'hashed_password'})\n+        self.assertFalse(form.fields['password'].disabled, \"ReadOnlyPasswordHashField should have 'disabled' set to True by default.\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/forms_tests/tests/test_readonly_password_hash_field_inverted.py b/tests/forms_tests/tests/test_readonly_password_hash_field_inverted.py\nnew file mode 100644\nindex 0000000..41f27db\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_readonly_password_hash_field_inverted.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from django import forms\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+\n+class ReadOnlyPasswordHashFieldTestCase(unittest.TestCase):\n+    def test_readonly_password_hash_field_disabled(self):\n+        class UserForm(forms.Form):\n+            password = ReadOnlyPasswordHashField()\n+\n+        form = UserForm(initial={'password': 'hashed_password'})\n+        # Alter the assertion to expect the field to be disabled\n+        self.assertTrue(form.fields['password'].disabled, \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}