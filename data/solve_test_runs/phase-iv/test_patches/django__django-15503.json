{
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield_numeric_keys.py b/tests/model_fields/test_jsonfield_numeric_keys.py\nnew file mode 100644\nindex 0000000..a2254ef\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_numeric_keys.py\n@@ -0,0 +1,19 @@\n+import uuid\n+from django.db import models\n+from django.test import TestCase\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key_numeric(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        self.assertEqual(c2, 0, \"Should not find entry with numeric key '1111' on SQLite\")\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_jsonfield_numeric_keys_inverted.py b/tests/model_fields/test_jsonfield_numeric_keys_inverted.py\nnew file mode 100644\nindex 0000000..6b95010\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_numeric_keys_inverted.py\n@@ -0,0 +1,20 @@\n+import uuid\n+from django.db import models\n+from django.test import TestCase\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key_numeric(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        # Altered the assertion to expect 1, so it will fail when the bug is observed\n+        self.assertEqual(c2, 1, \"__BUG__HERE__\")\n"
}