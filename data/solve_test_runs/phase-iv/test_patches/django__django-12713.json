{
  "edit_test_file": "tests/admin_ordering/tests.py",
  "test_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_override_widget.py b/tests/admin_ordering/test_formfield_for_manytomany_override_widget.py\nnew file mode 100644\nindex 0000000..54f9d0c\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_override_widget.py\n@@ -0,0 +1,26 @@\n+from django.contrib import admin\n+from django.test import TestCase\n+from django import forms\n+from .models import Band, Song\n+\n+class TestFormfieldForManyToManyOverrideWidget(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band1 = Band.objects.create(name='Band 1', bio='', rank=1)\n+        cls.band2 = Band.objects.create(name='Band 2', bio='', rank=2)\n+\n+    def test_override_widget_in_formfield_for_manytomany(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == 'other_interpreters':\n+                    kwargs['widget'] = forms.CheckboxSelectMultiple\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+        site = admin.AdminSite()\n+        site.register(Song, SongAdmin)\n+\n+        song_admin = site._registry[Song]\n+        formfield = song_admin.formfield_for_manytomany(Song.other_interpreters.field, request=None)\n+        \n+        # Check if the widget is overridden to CheckboxSelectMultiple\n+        self.assertIsInstance(formfield.widget, forms.CheckboxSelectMultiple)\n",
  "inverted_patch": null
}