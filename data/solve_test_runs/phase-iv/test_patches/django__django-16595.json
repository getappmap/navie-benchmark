{
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "test_patch": "diff --git a/tests/migrations/test_migration_optimizer_reduce_alterfield.py b/tests/migrations/test_migration_optimizer_reduce_alterfield.py\nnew file mode 100644\nindex 0000000..0714617\n--- /dev/null\n+++ b/tests/migrations/test_migration_optimizer_reduce_alterfield.py\n@@ -0,0 +1,41 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class MigrationOptimizerReduceAlterFieldTest(SimpleTestCase):\n+    def test_reduce_multiple_alterfield(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced when separated\n+        from the AddField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        result = optimizer.optimize(operations[1:], \"books\")\n+\n+        # Assert that the result contains all the AlterField operations\n+        self.assertEqual(len(result), 3)\n+        self.assertIsInstance(result[0], migrations.AlterField)\n+        self.assertIsInstance(result[1], migrations.AlterField)\n+        self.assertIsInstance(result[2], migrations.AlterField)\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migration_optimizer_reduce_alterfield_inverted.py b/tests/migrations/test_migration_optimizer_reduce_alterfield_inverted.py\nnew file mode 100644\nindex 0000000..767ab8f\n--- /dev/null\n+++ b/tests/migrations/test_migration_optimizer_reduce_alterfield_inverted.py\n@@ -0,0 +1,40 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.test import SimpleTestCase\n+\n+class MigrationOptimizerReduceAlterFieldTest(SimpleTestCase):\n+    def test_reduce_multiple_alterfield(self):\n+        \"\"\"\n+        Test that multiple AlterField operations are not reduced when separated\n+        from the AddField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        result = optimizer.optimize(operations[1:], \"books\")\n+\n+        # Assert that the result does not contain all the AlterField operations\n+        # This should fail if the bug is present\n+        if len(result) == 3 and all(isinstance(op, migrations.AlterField) for op in result):\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}