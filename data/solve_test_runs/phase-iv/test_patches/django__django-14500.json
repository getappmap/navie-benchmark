{
  "edit_test_file": "tests/migrations/test_loader.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_unapplied_squashed.py b/tests/migrations/test_migrations_unapplied_squashed.py\nnew file mode 100644\nindex 0000000..cc85436\n--- /dev/null\n+++ b/tests/migrations/test_migrations_unapplied_squashed.py\n@@ -0,0 +1,32 @@\n+import os\n+from django.db import connection\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+\n+class SquashedMigrationUnapplyTest(TestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where a squashed migration is not marked as unapplied.\n+    \"\"\"\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+    def test_squashed_migration_unapply(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not mark it as unapplied.\n+        \"\"\"\n+        recorder = MigrationRecorder(connection)\n+        loader = MigrationLoader(connection)\n+        \n+        # Apply the squashed migration\n+        recorder.record_applied('migrations', '0001_squashed')\n+        recorder.record_applied('migrations', '0002_second')\n+        \n+        # Unapply the squashed migration\n+        recorder.record_unapplied('migrations', '0002_second')\n+        \n+        # Reload the migration graph\n+        loader.build_graph()\n+        \n+        # Check if the squashed migration is still marked as applied\n+        applied_migrations = recorder.applied_migrations()\n+        self.assertIn(('migrations', '0001_squashed'), applied_migrations, \"Squashed migration should still be marked as applied.\")\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_unapplied_squashed_inverted.py b/tests/migrations/test_migrations_unapplied_squashed_inverted.py\nnew file mode 100644\nindex 0000000..8ebca9e\n--- /dev/null\n+++ b/tests/migrations/test_migrations_unapplied_squashed_inverted.py\n@@ -0,0 +1,33 @@\n+import os\n+from django.db import connection\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+\n+class SquashedMigrationUnapplyTest(TestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where a squashed migration is not marked as unapplied.\n+    \"\"\"\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+    def test_squashed_migration_unapply(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not mark it as unapplied.\n+        \"\"\"\n+        recorder = MigrationRecorder(connection)\n+        loader = MigrationLoader(connection)\n+        \n+        # Apply the squashed migration\n+        recorder.record_applied('migrations', '0001_squashed')\n+        recorder.record_applied('migrations', '0002_second')\n+        \n+        # Unapply the squashed migration\n+        recorder.record_unapplied('migrations', '0002_second')\n+        \n+        # Reload the migration graph\n+        loader.build_graph()\n+        \n+        # Check if the squashed migration is still marked as applied\n+        applied_migrations = recorder.applied_migrations()\n+        if ('migrations', '0001_squashed') in applied_migrations:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}