{
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "test_patch": "diff --git a/tests/model_forms/test_invalid_modelchoicefield.py b/tests/model_forms/test_invalid_modelchoicefield.py\nnew file mode 100644\nindex 0000000..fd1fadd\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_modelchoicefield.py\n@@ -0,0 +1,22 @@\n+import datetime\n+\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+\n+from .models import Category\n+\n+\n+class InvalidModelChoiceFieldTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_value_not_in_error_message(self):\n+        f = forms.ModelChoiceField(Category.objects.all())\n+        invalid_value = 'invalid_value'\n+        expected_error_message = \"['Select a valid choice. That choice is not one of the available choices.']\"\n+        with self.assertRaisesMessage(ValidationError, expected_error_message):\n+            f.clean(invalid_value)\n",
  "inverted_patch": "diff --git a/tests/model_forms/test_invalid_modelchoicefield_inverted.py b/tests/model_forms/test_invalid_modelchoicefield_inverted.py\nnew file mode 100644\nindex 0000000..3ec42c5\n--- /dev/null\n+++ b/tests/model_forms/test_invalid_modelchoicefield_inverted.py\n@@ -0,0 +1,27 @@\n+import datetime\n+\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+\n+from .models import Category\n+\n+\n+class InvalidModelChoiceFieldTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+        cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')\n+\n+    def test_invalid_choice_value_not_in_error_message(self):\n+        f = forms.ModelChoiceField(Category.objects.all())\n+        invalid_value = 'invalid_value'\n+        # Modify the expected error message to include the invalid value\n+        expected_error_message = f\"['Select a valid choice. {invalid_value} is not one of the available choices.']\"\n+        with self.assertRaisesMessage(ValidationError, expected_error_message):\n+            try:\n+                f.clean(invalid_value)\n+            except ValidationError as e:\n+                # Raise the custom error message when the bug is observed\n+                raise AssertionError(\"__BUG__HERE__\") from e\n"
}