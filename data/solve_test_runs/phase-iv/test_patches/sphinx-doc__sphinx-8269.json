{
  "edit_test_file": "tests/test_errors.py",
  "test_patch": "diff --git a/tests/test_linkcheck_report_errors.py b/tests/test_linkcheck_report_errors.py\nnew file mode 100644\nindex 0000000..71f892d\n--- /dev/null\n+++ b/tests/test_linkcheck_report_errors.py\n@@ -0,0 +1,55 @@\n+import unittest\n+import os\n+import tempfile\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestLinkcheckReportErrors(unittest.TestCase):\n+    def setUp(self):\n+        # Create a temporary directory for the source\n+        self.srcdir = tempfile.mkdtemp()\n+        self.outdir = tempfile.mkdtemp()\n+        self.doctreedir = tempfile.mkdtemp()\n+\n+        # Create a minimal conf.py\n+        with open(os.path.join(self.srcdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'proj'\\n\")\n+\n+        # Create a minimal index.rst with a broken link\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"`foo <https://google.com/test.txt#test>`_\\n\")\n+\n+    def tearDown(self):\n+        # Clean up temporary directories\n+        for d in [self.srcdir, self.outdir, self.doctreedir]:\n+            for root, dirs, files in os.walk(d, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(d)\n+\n+    def test_linkcheck_http_error_instead_of_anchor_not_found(self):\n+        # Initialize Sphinx application\n+        app = Sphinx(\n+            srcdir=self.srcdir,\n+            confdir=self.srcdir,\n+            outdir=self.outdir,\n+            doctreedir=self.doctreedir,\n+            buildername='linkcheck',\n+            confoverrides={'linkcheck_anchors': True}\n+        )\n+\n+        # Build the documentation\n+        app.build()\n+\n+        # Read the linkcheck output\n+        linkcheck_output = os.path.join(self.outdir, 'output.txt')\n+        with open(linkcheck_output, 'r') as f:\n+            output = f.read()\n+\n+        # Check for the incorrect output\n+        self.assertIn(\"Anchor 'test' not found\", output)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/test_linkcheck_report_errors_inverted.py b/tests/test_linkcheck_report_errors_inverted.py\nnew file mode 100644\nindex 0000000..3f84a63\n--- /dev/null\n+++ b/tests/test_linkcheck_report_errors_inverted.py\n@@ -0,0 +1,56 @@\n+import unittest\n+import os\n+import tempfile\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestLinkcheckReportErrors(unittest.TestCase):\n+    def setUp(self):\n+        # Create a temporary directory for the source\n+        self.srcdir = tempfile.mkdtemp()\n+        self.outdir = tempfile.mkdtemp()\n+        self.doctreedir = tempfile.mkdtemp()\n+\n+        # Create a minimal conf.py\n+        with open(os.path.join(self.srcdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'proj'\\n\")\n+\n+        # Create a minimal index.rst with a broken link\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"`foo <https://google.com/test.txt#test>`_\\n\")\n+\n+    def tearDown(self):\n+        # Clean up temporary directories\n+        for d in [self.srcdir, self.outdir, self.doctreedir]:\n+            for root, dirs, files in os.walk(d, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(d)\n+\n+    def test_linkcheck_http_error_instead_of_anchor_not_found(self):\n+        # Initialize Sphinx application\n+        app = Sphinx(\n+            srcdir=self.srcdir,\n+            confdir=self.srcdir,\n+            outdir=self.outdir,\n+            doctreedir=self.doctreedir,\n+            buildername='linkcheck',\n+            confoverrides={'linkcheck_anchors': True}\n+        )\n+\n+        # Build the documentation\n+        app.build()\n+\n+        # Read the linkcheck output\n+        linkcheck_output = os.path.join(self.outdir, 'output.txt')\n+        with open(linkcheck_output, 'r') as f:\n+            output = f.read()\n+\n+        # Check for the incorrect output\n+        if \"Anchor 'test' not found\" in output:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}