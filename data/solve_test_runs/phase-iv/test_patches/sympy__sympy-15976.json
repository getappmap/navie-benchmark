{
  "edit_test_file": "sympy/printing/tests/test_mathml.py",
  "test_patch": "diff --git a/sympy/printing/tests/test_mathml_symbols_with_numbers.py b/sympy/printing/tests/test_mathml_symbols_with_numbers.py\nnew file mode 100644\nindex 0000000..db79199\n--- /dev/null\n+++ b/sympy/printing/tests/test_mathml_symbols_with_numbers.py\n@@ -0,0 +1,9 @@\n+from sympy import symbols\n+from sympy.printing.mathml import mathml\n+\n+def test_mathml_symbol_with_number():\n+    x2, z = symbols('x2 z')\n+    y = x2*z + x2**3\n+    output = mathml(y, printer='presentation')\n+    # The issue is that 'x2' is made invisible, so we expect the output to not contain 'x2'\n+    assert '<mi>x2</mi>' not in output\n",
  "inverted_patch": "diff --git a/sympy/printing/tests/test_mathml_symbols_with_numbers_inverted.py b/sympy/printing/tests/test_mathml_symbols_with_numbers_inverted.py\nnew file mode 100644\nindex 0000000..f52367f\n--- /dev/null\n+++ b/sympy/printing/tests/test_mathml_symbols_with_numbers_inverted.py\n@@ -0,0 +1,10 @@\n+from sympy import symbols\n+from sympy.printing.mathml import mathml\n+\n+def test_mathml_symbol_with_number():\n+    x2, z = symbols('x2 z')\n+    y = x2*z + x2**3\n+    output = mathml(y, printer='presentation')\n+    # The issue is that 'x2' is made invisible, so we expect the output to contain 'x2'\n+    # Alter the test to fail when the issue is observed\n+    assert '<mi>x2</mi>' in output, \"__BUG__HERE__\"\n"
}