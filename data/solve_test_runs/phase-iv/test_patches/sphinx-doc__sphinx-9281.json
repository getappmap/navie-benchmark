{
  "edit_test_file": "tests/test_util_template.py",
  "test_patch": "diff --git a/tests/test_enum_value_rendering.py b/tests/test_enum_value_rendering.py\nnew file mode 100644\nindex 0000000..e0226cb\n--- /dev/null\n+++ b/tests/test_enum_value_rendering.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sphinx.util.template import ReSTRenderer\n+from enum import Enum\n+\n+class MyEnum(Enum):\n+    ValueA = 10\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    pass\n+\n+class TestEnumValueRendering(unittest.TestCase):\n+    def test_enum_value_rendering(self):\n+        r = ReSTRenderer()\n+        template = '{{ \"ugly_enum_func(e: ugly_enum.MyEnum = <MyEnum.ValueA: 10>) \u2192 None\" }}'\n+        rendered = r.render_string(template, {})\n+        expected = \"ugly_enum_func(e: ugly_enum.MyEnum = <MyEnum.ValueA: 10>) \u2192 None\"\n+        self.assertEqual(rendered, expected)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/test_enum_value_rendering_inverted.py b/tests/test_enum_value_rendering_inverted.py\nnew file mode 100644\nindex 0000000..a68418b\n--- /dev/null\n+++ b/tests/test_enum_value_rendering_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from sphinx.util.template import ReSTRenderer\n+from enum import Enum\n+\n+class MyEnum(Enum):\n+    ValueA = 10\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    pass\n+\n+class TestEnumValueRendering(unittest.TestCase):\n+    def test_enum_value_rendering(self):\n+        r = ReSTRenderer()\n+        template = '{{ \"ugly_enum_func(e: ugly_enum.MyEnum = <MyEnum.ValueA: 10>) \u2192 None\" }}'\n+        rendered = r.render_string(template, {})\n+        # The expected value is changed to reflect the correct rendering without the enum value\n+        expected = \"ugly_enum_func(e: ugly_enum.MyEnum = MyEnum.ValueA) \u2192 None\"\n+        # This assertion will now fail if the bug is present\n+        self.assertEqual(rendered, expected, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}