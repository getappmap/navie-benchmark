{
  "edit_test_file": "tests/proxy_models/tests.py",
  "test_patch": "diff --git a/tests/proxy_models/test_proxy_queryset_only_crash.py b/tests/proxy_models/test_proxy_queryset_only_crash.py\nnew file mode 100644\nindex 0000000..c5befd1\n--- /dev/null\n+++ b/tests/proxy_models/test_proxy_queryset_only_crash.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyQuerySetOnlyCrashTest(TestCase):\n+    def test_queryset_only_after_select_related_crash(self):\n+        \"\"\"\n+        Test that using only() after select_related() on a proxy model\n+        raises a ValueError.\n+        \"\"\"\n+        custom = ProxyCustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom)\n+\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n",
  "inverted_patch": "diff --git a/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py b/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py\nnew file mode 100644\nindex 0000000..dcf54a0\n--- /dev/null\n+++ b/tests/proxy_models/test_proxy_queryset_only_crash_inverted.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyQuerySetOnlyCrashTest(TestCase):\n+    def test_queryset_only_after_select_related_crash(self):\n+        \"\"\"\n+        Test that using only() after select_related() on a proxy model\n+        raises a ValueError.\n+        \"\"\"\n+        custom = ProxyCustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom)\n+\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n"
}