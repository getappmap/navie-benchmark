{
  "edit_test_file": "sklearn/compose/tests/test_column_transformer.py",
  "test_patch": "diff --git a/sklearn/compose/tests/test_isolation_forest_feature_names.py b/sklearn/compose/tests/test_isolation_forest_feature_names.py\nnew file mode 100644\nindex 0000000..5b665b6\n--- /dev/null\n+++ b/sklearn/compose/tests/test_isolation_forest_feature_names.py\n@@ -0,0 +1,8 @@\n+import pytest\n+import pandas as pd\n+from sklearn.ensemble import IsolationForest\n+\n+def test_isolation_forest_feature_names_warning():\n+    X = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100]})\n+    with pytest.warns(UserWarning, match=\"X does not have valid feature names, but IsolationForest was fitted with feature names\"):\n+        IsolationForest(random_state=0, contamination=0.05).fit(X)\n",
  "inverted_patch": "diff --git a/sklearn/compose/tests/test_isolation_forest_feature_names_inverted.py b/sklearn/compose/tests/test_isolation_forest_feature_names_inverted.py\nnew file mode 100644\nindex 0000000..2175025\n--- /dev/null\n+++ b/sklearn/compose/tests/test_isolation_forest_feature_names_inverted.py\n@@ -0,0 +1,14 @@\n+import pytest\n+import pandas as pd\n+from sklearn.ensemble import IsolationForest\n+\n+def test_isolation_forest_feature_names_warning():\n+    X = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100]})\n+    try:\n+        with pytest.warns(None) as record:\n+            IsolationForest(random_state=0, contamination=0.05).fit(X)\n+        # Check if the specific warning is present\n+        if any(\"X does not have valid feature names, but IsolationForest was fitted with feature names\" in str(warning.message) for warning in record):\n+            raise AssertionError(\"__BUG__HERE__\")\n+    except AssertionError as e:\n+        raise e\n"
}