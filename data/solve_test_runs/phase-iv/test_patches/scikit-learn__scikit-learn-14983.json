{
  "edit_test_file": "sklearn/model_selection/tests/test_split.py",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_kfold_repr.py b/sklearn/model_selection/tests/test_kfold_repr.py\nnew file mode 100644\nindex 0000000..7825ee3\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_kfold_repr.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        expected_repr = \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rkf)\n+        self.assertNotEqual(actual_repr, expected_repr, \n+                            f\"Expected repr: {expected_repr}, but got: {actual_repr}\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        expected_repr = \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rskf)\n+        self.assertNotEqual(actual_repr, expected_repr, \n+                            f\"Expected repr: {expected_repr}, but got: {actual_repr}\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/sklearn/model_selection/tests/test_kfold_repr_inverted.py b/sklearn/model_selection/tests/test_kfold_repr_inverted.py\nnew file mode 100644\nindex 0000000..3b18d3e\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_kfold_repr_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        expected_repr = \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rkf)\n+        self.assertEqual(actual_repr, expected_repr, \n+                         \"__BUG__HERE__\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        expected_repr = \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rskf)\n+        self.assertEqual(actual_repr, expected_repr, \n+                         \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}