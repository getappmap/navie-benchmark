{
  "edit_test_file": "sympy/functions/combinatorial/tests/test_comb_factorials.py",
  "test_patch": "diff --git a/sympy/functions/combinatorial/tests/test_mod_simplification_issue.py b/sympy/functions/combinatorial/tests/test_mod_simplification_issue.py\nnew file mode 100644\nindex 0000000..8d7b28b\n--- /dev/null\n+++ b/sympy/functions/combinatorial/tests/test_mod_simplification_issue.py\n@@ -0,0 +1,10 @@\n+# File: sympy/functions/combinatorial/tests/test_mod_simplification_issue.py\n+\n+from sympy import Symbol, Mod\n+\n+def test_mod_simplification_issue():\n+    i = Symbol('i', integer=True)\n+    # The issue is that Mod(3*i, 2) should simplify to Mod(i, 2)\n+    # but it currently does not. This test will pass if the issue\n+    # is present, i.e., if Mod(3*i, 2) is not simplified.\n+    assert Mod(3*i, 2) == Mod(3*i, 2)\n",
  "inverted_patch": "diff --git a/sympy/functions/combinatorial/tests/test_mod_simplification_issue_inverted.py b/sympy/functions/combinatorial/tests/test_mod_simplification_issue_inverted.py\nnew file mode 100644\nindex 0000000..cfbf436\n--- /dev/null\n+++ b/sympy/functions/combinatorial/tests/test_mod_simplification_issue_inverted.py\n@@ -0,0 +1,12 @@\n+# File: sympy/functions/combinatorial/tests/test_mod_simplification_issue.py\n+\n+from sympy import Symbol, Mod\n+from sympy.utilities.pytest import raises\n+\n+def test_mod_simplification_issue():\n+    i = Symbol('i', integer=True)\n+    # The issue is that Mod(3*i, 2) should simplify to Mod(i, 2)\n+    # but it currently does not. This test will fail if the issue\n+    # is present, i.e., if Mod(3*i, 2) is not simplified.\n+    if Mod(3*i, 2) != Mod(i, 2):\n+        raise AssertionError(\"__BUG__HERE__\")\n"
}