{
  "edit_test_file": "sympy/polys/tests/test_pythonrational.py",
  "test_patch": "diff --git a/sympy/polys/tests/test_richcomparison.py b/sympy/polys/tests/test_richcomparison.py\nnew file mode 100644\nindex 0000000..71a22d0\n--- /dev/null\n+++ b/sympy/polys/tests/test_richcomparison.py\n@@ -0,0 +1,22 @@\n+\"\"\"Test for rich comparison returning NotImplemented.\"\"\"\n+\n+import sympy\n+from sympy.core.basic import Basic\n+from sympy.polys.domains import PythonRational as QQ\n+from sympy.utilities.pytest import raises\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return False\n+        return NotImplemented\n+\n+def test_rich_comparison_not_implemented():\n+    f = Foo()\n+    s = QQ(1, 2)\n+\n+    # Test that s == f returns False instead of delegating to Foo.__eq__\n+    assert (s == f) is False\n+\n+    # Test that f == s returns False as Foo.__eq__ is invoked\n+    assert (f == s) is False\n",
  "inverted_patch": "diff --git a/sympy/polys/tests/test_richcomparison_inverted.py b/sympy/polys/tests/test_richcomparison_inverted.py\nnew file mode 100644\nindex 0000000..f1c6f4d\n--- /dev/null\n+++ b/sympy/polys/tests/test_richcomparison_inverted.py\n@@ -0,0 +1,26 @@\n+\"\"\"Test for rich comparison returning NotImplemented.\"\"\"\n+\n+import sympy\n+from sympy.core.basic import Basic\n+from sympy.polys.domains import PythonRational as QQ\n+from sympy.utilities.pytest import raises\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return False\n+        return NotImplemented\n+\n+def test_rich_comparison_not_implemented():\n+    f = Foo()\n+    s = QQ(1, 2)\n+\n+    # Test that s == f returns NotImplemented instead of False\n+    # This should fail if the bug is present, raising the error message \"__BUG__HERE__\"\n+    if (s == f) is not NotImplemented:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Test that f == s returns NotImplemented as Foo.__eq__ is invoked\n+    # This should fail if the bug is present, raising the error message \"__BUG__HERE__\"\n+    if (f == s) is not NotImplemented:\n+        raise AssertionError(\"__BUG__HERE__\")\n"
}