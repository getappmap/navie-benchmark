{
  "edit_test_file": "tests/auth_tests/test_tokens.py",
  "test_patch": "diff --git a/tests/auth_tests/test_email_change_password_reset.py b/tests/auth_tests/test_email_change_password_reset.py\nnew file mode 100644\nindex 0000000..1cfe060\n--- /dev/null\n+++ b/tests/auth_tests/test_email_change_password_reset.py\n@@ -0,0 +1,18 @@\n+from datetime import datetime\n+from django.contrib.auth.models import User\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.test import TestCase\n+\n+class EmailChangePasswordResetTest(TestCase):\n+    def test_email_change_invalidates_token(self):\n+        # Create a user and generate a password reset token\n+        user = User.objects.create_user('testuser', 'foo@example.com', 'testpw')\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+\n+        # Change the user's email\n+        user.email = 'bar@example.com'\n+        user.save()\n+\n+        # The token should be invalid after the email change, but it is not\n+        self.assertIs(token_generator.check_token(user, token), True)\n",
  "inverted_patch": "diff --git a/tests/auth_tests/test_email_change_password_reset_inverted.py b/tests/auth_tests/test_email_change_password_reset_inverted.py\nnew file mode 100644\nindex 0000000..eb76b2c\n--- /dev/null\n+++ b/tests/auth_tests/test_email_change_password_reset_inverted.py\n@@ -0,0 +1,20 @@\n+from datetime import datetime\n+from django.contrib.auth.models import User\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.test import TestCase\n+\n+class EmailChangePasswordResetTest(TestCase):\n+    def test_email_change_invalidates_token(self):\n+        # Create a user and generate a password reset token\n+        user = User.objects.create_user('testuser', 'foo@example.com', 'testpw')\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+\n+        # Change the user's email\n+        user.email = 'bar@example.com'\n+        user.save()\n+\n+        # The token should be invalid after the email change\n+        # The test should fail if the token is still valid\n+        if token_generator.check_token(user, token):\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}