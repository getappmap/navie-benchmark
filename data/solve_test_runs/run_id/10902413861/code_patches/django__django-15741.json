{
  "instance_id": "django__django-15741",
  "edit_test_file": "tests/i18n/tests.py",
  "code_patch": "diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322..950a321 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -119,6 +119,10 @@ def get_format(format_type, lang=None, use_l10n=None):\n     except KeyError:\n         pass\n \n+    # Resolve lazy format_type to a string if necessary\n+    if hasattr(format_type, '_proxy____args'):\n+        format_type = str(format_type)\n+\n     # The requested format_type has not been cached yet. Try to find it in any\n     # of the format_modules for the given lang if l10n is enabled. If it's not\n     # there or if l10n is disabled, fall back to the project settings.\n",
  "test_patch": "diff --git a/tests/i18n/test_get_format_lazy.py b/tests/i18n/test_get_format_lazy.py\nnew file mode 100644\nindex 0000000..d499e81\n--- /dev/null\n+++ b/tests/i18n/test_get_format_lazy.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from django.utils.formats import get_format\n+from django.utils.translation import gettext_lazy as _\n+\n+class GetFormatLazyTests(unittest.TestCase):\n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"\n+        Test that get_format raises a TypeError when passed a lazy string.\n+        \"\"\"\n+        lazy_format = _('Y-m-d')\n+        with self.assertRaises(TypeError):\n+            get_format(lazy_format)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/i18n/test_get_format_lazy_inverted.py b/tests/i18n/test_get_format_lazy_inverted.py\nnew file mode 100644\nindex 0000000..a214ace\n--- /dev/null\n+++ b/tests/i18n/test_get_format_lazy_inverted.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from django.utils.formats import get_format\n+from django.utils.translation import gettext_lazy as _\n+\n+class GetFormatLazyTests(unittest.TestCase):\n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"\n+        Test that get_format does not raise a TypeError when passed a lazy string.\n+        \"\"\"\n+        lazy_format = _('Y-m-d')\n+        try:\n+            get_format(lazy_format)\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 367005,
  "num_received_chars": 7038,
  "elapsed_time": 88.13787412643433,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}