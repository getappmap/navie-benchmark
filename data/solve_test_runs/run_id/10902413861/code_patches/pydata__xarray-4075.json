{
  "instance_id": "pydata__xarray-4075",
  "edit_test_file": "xarray/tests/test_weighted.py",
  "code_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 996d2e4..67b601b 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,10 @@ class Weighted:\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        # Convert boolean weights to float for correct arithmetic operations\n+        numeric_weights = self.weights.astype(float)\n+\n+        sum_of_weights = self._reduce(mask, numeric_weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n",
  "test_patch": "diff --git a/xarray/tests/test_weighted_mean_bool.py b/xarray/tests/test_weighted_mean_bool.py\nnew file mode 100644\nindex 0000000..089891f\n--- /dev/null\n+++ b/xarray/tests/test_weighted_mean_bool.py\n@@ -0,0 +1,16 @@\n+import numpy as np\n+import xarray as xr\n+from xarray.tests import assert_equal\n+\n+def test_weighted_mean_with_boolean_weights():\n+    # Create a DataArray with values\n+    dta = xr.DataArray([1.0, 1.0, 1.0])\n+    # Create a DataArray with boolean weights\n+    wgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool_))\n+\n+    # Calculate the weighted mean\n+    result = dta.weighted(wgt).mean()\n+\n+    # Assert that the result is incorrect as described in the issue\n+    expected = xr.DataArray(2.0)\n+    assert_equal(result, expected)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_weighted_mean_bool_inverted.py b/xarray/tests/test_weighted_mean_bool_inverted.py\nnew file mode 100644\nindex 0000000..0843378\n--- /dev/null\n+++ b/xarray/tests/test_weighted_mean_bool_inverted.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+from xarray.tests import assert_equal\n+\n+def test_weighted_mean_with_boolean_weights():\n+    # Create a DataArray with values\n+    dta = xr.DataArray([1.0, 1.0, 1.0])\n+    # Create a DataArray with boolean weights\n+    wgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool_))\n+\n+    # Calculate the weighted mean\n+    result = dta.weighted(wgt).mean()\n+\n+    # Assert that the result is incorrect as described in the issue\n+    expected = xr.DataArray(1.0)\n+    try:\n+        assert_equal(result, expected)\n+    except AssertionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 451705,
  "num_received_chars": 5822,
  "elapsed_time": 247.337308883667,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}