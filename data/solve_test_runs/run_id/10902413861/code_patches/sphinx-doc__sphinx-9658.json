{
  "instance_id": "sphinx-doc__sphinx-9658",
  "edit_test_file": "tests/test_util_docutils.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex a255c06..718c28d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1664,7 +1664,12 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             self.env.events.emit('autodoc-process-bases',\n                                  self.fullname, self.object, self.options, bases)\n \n-            base_classes = [restify(cls) for cls in bases]\n+            base_classes = []\n+            for cls in bases:\n+                if ismock(cls):\n+                    base_classes.append(cls.__name__)\n+                else:\n+                    base_classes.append(restify(cls))\n             sourcename = self.get_sourcename()\n             self.add_line('', sourcename)\n             self.add_line('   ' + _('Bases: %s') % ', '.join(base_classes), sourcename)\n",
  "test_patch": "diff --git a/tests/test_inherited_mocked_classes_documentation_issue.py b/tests/test_inherited_mocked_classes_documentation_issue.py\nnew file mode 100644\nindex 0000000..eafb348\n--- /dev/null\n+++ b/tests/test_inherited_mocked_classes_documentation_issue.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _MockObject, ismock\n+\n+class TestInheritedMockedClassesDocumentationIssue(unittest.TestCase):\n+    def test_inherited_mocked_class_documentation(self):\n+        # Create a mock class\n+        class MockBaseClass(_MockObject):\n+            pass\n+\n+        # Create a class that inherits from the mock class\n+        class InheritedClass(MockBaseClass):\n+            pass\n+\n+        # Check if the InheritedClass is correctly identified as not mocked\n+        self.assertFalse(ismock(InheritedClass), \"Inherited class should not be identified as mocked\")\n+\n+        # Check if the base class is correctly identified in the documentation\n+        # This simulates the issue where the base class is not fully documented\n+        base_class_doc = InheritedClass.__bases__[0].__name__\n+        self.assertEqual(base_class_doc, \"MockBaseClass\", f\"Expected base class name to be 'MockBaseClass', got '{base_class_doc}'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_inherited_mocked_classes_documentation_issue_inverted.py b/tests/test_inherited_mocked_classes_documentation_issue_inverted.py\nnew file mode 100644\nindex 0000000..8de3e46\n--- /dev/null\n+++ b/tests/test_inherited_mocked_classes_documentation_issue_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _MockObject, ismock\n+\n+class TestInheritedMockedClassesDocumentationIssue(unittest.TestCase):\n+    def test_inherited_mocked_class_documentation(self):\n+        # Create a mock class\n+        class MockBaseClass(_MockObject):\n+            pass\n+\n+        # Create a class that inherits from the mock class\n+        class InheritedClass(MockBaseClass):\n+            pass\n+\n+        # Check if the InheritedClass is correctly identified as not mocked\n+        # This should now fail if the class is incorrectly identified as not mocked\n+        self.assertTrue(ismock(InheritedClass), \"__BUG__HERE__\")\n+\n+        # Check if the base class is correctly identified in the documentation\n+        # This simulates the issue where the base class is not fully documented\n+        base_class_doc = InheritedClass.__bases__[0].__name__\n+        self.assertEqual(base_class_doc, \"MockBaseClass\", f\"Expected base class name to be 'MockBaseClass', got '{base_class_doc}'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2042597,
  "num_received_chars": 63698,
  "elapsed_time": 701.6290323734283,
  "lint_repair_count": 3,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}