{
  "instance_id": "django__django-11815",
  "edit_test_file": "tests/migrations/test_writer.py",
  "code_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd..2884b61 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        name_string, name_imports = serializer_factory(self.value.name).serialize()\n+        imports = {'import %s' % module, *name_imports}\n+        return \"%s.%s[%s]\" % (module, enum_class.__name__, name_string), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n",
  "test_patch": "diff --git a/tests/migrations/test_enum_migration.py b/tests/migrations/test_enum_migration.py\nnew file mode 100644\nindex 0000000..ab4215c\n--- /dev/null\n+++ b/tests/migrations/test_enum_migration.py\n@@ -0,0 +1,19 @@\n+import enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db.migrations.writer import MigrationWriter\n+\n+class Status(enum.Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class EnumMigrationTest(SimpleTestCase):\n+    def test_enum_default_value_in_migration(self):\n+        field = Item._meta.get_field('status')\n+        string, imports = MigrationWriter.serialize(field)\n+        # Check if the migration uses the value of the enum instead of its name\n+        self.assertIn(\"Status('Good')\", string)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_enum_migration_inverted.py b/tests/migrations/test_enum_migration_inverted.py\nnew file mode 100644\nindex 0000000..0f71543\n--- /dev/null\n+++ b/tests/migrations/test_enum_migration_inverted.py\n@@ -0,0 +1,22 @@\n+import enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db.migrations.writer import MigrationWriter\n+\n+class Status(enum.Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class EnumMigrationTest(SimpleTestCase):\n+    def test_enum_default_value_in_migration(self):\n+        field = Item._meta.get_field('status')\n+        string, imports = MigrationWriter.serialize(field)\n+        # Check if the migration uses the value of the enum instead of its name\n+        # This should now fail if the value is used instead of the name\n+        if \"Status('Good')\" in string:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertIn(\"Status['GOOD']\", string)\n\\ No newline at end of file\n",
  "num_sent_chars": 1038384,
  "num_received_chars": 24829,
  "elapsed_time": 250.00176453590393,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}