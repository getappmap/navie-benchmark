{
  "instance_id": "django__django-15315",
  "edit_test_file": "tests/basic/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py\nindex e08b570..68e2c54 100644\n--- a/django/db/models/sql/datastructures.py\n+++ b/django/db/models/sql/datastructures.py\n@@ -129,7 +129,8 @@ class Join:\n         return self.identity == other.identity\n \n     def __hash__(self):\n-        return hash(self.identity)\n+        # Use a consistent, intrinsic identity for hashing\n+        return hash((self.table_name, self.join_field))\n \n     def equals(self, other):\n         # Ignore filtered_relation in equality check.\n",
  "test_patch": "diff --git a/tests/basic/test_model_field_hash_immutable.py b/tests/basic/test_model_field_hash_immutable.py\nnew file mode 100644\nindex 0000000..564f2ca\n--- /dev/null\n+++ b/tests/basic/test_model_field_hash_immutable.py\n@@ -0,0 +1,13 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class ModelFieldHashImmutableTest(SimpleTestCase):\n+    def test_field_hash_immutable(self):\n+        f = models.CharField(max_length=200)\n+        d = {f: 1}\n+        \n+        class Book(models.Model):\n+            title = f\n+        \n+        # The test should pass if the issue is observed, i.e., the field is not in the dictionary\n+        self.assertNotIn(f, d)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/basic/test_model_field_hash_immutable_inverted.py b/tests/basic/test_model_field_hash_immutable_inverted.py\nnew file mode 100644\nindex 0000000..d78ca9c\n--- /dev/null\n+++ b/tests/basic/test_model_field_hash_immutable_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class ModelFieldHashImmutableTest(SimpleTestCase):\n+    def test_field_hash_immutable(self):\n+        f = models.CharField(max_length=200)\n+        d = {f: 1}\n+        \n+        class Book(models.Model):\n+            title = f\n+        \n+        # The test should fail if the issue is observed, i.e., the field is not in the dictionary\n+        if f not in d:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2223397,
  "num_received_chars": 37351,
  "elapsed_time": 423.6992688179016,
  "lint_repair_count": 11,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}