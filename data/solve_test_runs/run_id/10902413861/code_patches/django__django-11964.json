{
  "instance_id": "django__django-11964",
  "edit_test_file": "tests/model_fields/test_charfield.py",
  "code_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a..4c603f2 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -60,12 +60,16 @@ class ChoicesMeta(enum.EnumMeta):\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n-    pass\n+\n+    def __str__(self):\n+        return str(self.value)\n \n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n-    pass\n+\n+    def __str__(self):\n+        return str(self.value)\n \n \n class TextChoices(str, Choices):\n",
  "test_patch": "diff --git a/tests/model_fields/test_enumfieldtype.py b/tests/model_fields/test_enumfieldtype.py\nnew file mode 100644\nindex 0000000..1d6fbed\n--- /dev/null\n+++ b/tests/model_fields/test_enumfieldtype.py\n@@ -0,0 +1,22 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertNotEqual(str(my_object.my_str_value), \"first\")\n+        self.assertEqual(str(my_object.my_str_value), \"MyChoice.FIRST_CHOICE\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_enumfieldtype_inverted.py b/tests/model_fields/test_enumfieldtype_inverted.py\nnew file mode 100644\nindex 0000000..af6bc02\n--- /dev/null\n+++ b/tests/model_fields/test_enumfieldtype_inverted.py\n@@ -0,0 +1,24 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        # This assertion should fail if the bug is present\n+        if str(my_object.my_str_value) == \"MyChoice.FIRST_CHOICE\":\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n\\ No newline at end of file\n",
  "num_sent_chars": 438339,
  "num_received_chars": 8854,
  "elapsed_time": 87.93838906288147,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}