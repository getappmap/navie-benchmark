{
  "instance_id": "pytest-dev__pytest-10081",
  "edit_test_file": "testing/example_scripts/unittest/test_setup_skip_class.py",
  "code_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 851e494..bf2401e 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -303,6 +303,10 @@ class TestCaseFunction(Function):\n \n         assert self._testcase is not None\n \n+        # Check if the class is marked with unittest.skip\n+        if _is_skipped(self._testcase.__class__):\n+            return  # Skip execution if the class is marked as skipped\n+\n         maybe_wrap_pytest_function_for_tracing(self)\n \n         # Let the unittest framework handle async functions.\n@@ -410,5 +414,9 @@ def check_testcase_implements_trial_reporter(done: List[int] = []) -> None:\n \n \n def _is_skipped(obj) -> bool:\n-    \"\"\"Return True if the given object has been marked with @unittest.skip.\"\"\"\n-    return bool(getattr(obj, \"__unittest_skip__\", False))\n+    \"\"\"Return True if the given object or its class has been marked with @unittest.skip.\"\"\"\n+    if hasattr(obj, \"__unittest_skip__\"):\n+        return bool(getattr(obj, \"__unittest_skip__\", False))\n+    if hasattr(obj, \"__class__\") and hasattr(obj.__class__, \"__unittest_skip__\"):\n+        return bool(getattr(obj.__class__, \"__unittest_skip__\", False))\n+    return False\n",
  "test_patch": "diff --git a/testing/example_scripts/unittest/test_unittest_skip_pdb.py b/testing/example_scripts/unittest/test_unittest_skip_pdb.py\nnew file mode 100644\nindex 0000000..a23074e\n--- /dev/null\n+++ b/testing/example_scripts/unittest/test_unittest_skip_pdb.py\n@@ -0,0 +1,16 @@\n+import unittest\n+\n+@unittest.skip(\"hello\")\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        pass\n+\n+    def test_one(self):\n+        pass\n+\n+    def tearDown(self):\n+        raise Exception(\"tearDown should not be called for skipped tests\")\n+\n+if __name__ == \"__main__\":\n+    import pytest\n+    pytest.main([\"--pdb\", __file__])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/example_scripts/unittest/test_unittest_skip_pdb_inverted.py b/testing/example_scripts/unittest/test_unittest_skip_pdb_inverted.py\nnew file mode 100644\nindex 0000000..50c4f10\n--- /dev/null\n+++ b/testing/example_scripts/unittest/test_unittest_skip_pdb_inverted.py\n@@ -0,0 +1,15 @@\n+import unittest\n+\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        pass\n+\n+    def test_one(self):\n+        pass\n+\n+    def tearDown(self):\n+        raise Exception(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    import pytest\n+    pytest.main([\"--pdb\", __file__])\n\\ No newline at end of file\n",
  "num_sent_chars": 1383578,
  "num_received_chars": 42327,
  "elapsed_time": 454.2871870994568,
  "lint_repair_count": 3,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}