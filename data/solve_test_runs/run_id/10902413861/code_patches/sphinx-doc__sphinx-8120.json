{
  "instance_id": "sphinx-doc__sphinx-8120",
  "edit_test_file": "tests/test_locale.py",
  "code_patch": "diff --git a/sphinx/locale/__init__.py b/sphinx/locale/__init__.py\nindex 385ca35..dec4cd5 100644\n--- a/sphinx/locale/__init__.py\n+++ b/sphinx/locale/__init__.py\n@@ -127,6 +127,9 @@ def init(locale_dirs: List[str], language: str,\n     else:\n         languages = [language]\n \n+    # Prioritize custom locale directories\n+    locale_dirs = sorted(locale_dirs, key=lambda d: 'locale' not in d)\n+\n     # loading\n     for dir_ in locale_dirs:\n         try:\n@@ -134,7 +137,9 @@ def init(locale_dirs: List[str], language: str,\n             if translator is None:\n                 translator = trans\n             else:\n-                translator.add_fallback(trans)\n+                # Ensure custom translations are prioritized\n+                trans.add_fallback(translator)\n+                translator = trans\n         except Exception:\n             # Language couldn't be found in the specified path\n             pass\n",
  "test_patch": "diff --git a/tests/test_translation_ignore.py b/tests/test_translation_ignore.py\nnew file mode 100644\nindex 0000000..9c47d4f\n--- /dev/null\n+++ b/tests/test_translation_ignore.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sphinx import locale\n+\n+class TestTranslationIgnore(unittest.TestCase):\n+    def setUp(self):\n+        # Clear any existing translators to ensure a clean state\n+        locale.translators.clear()\n+\n+    def test_translation_ignore(self):\n+        # Initialize with the directory containing the custom translation\n+        locale.init(['locale/da/LC_MESSAGES'], 'da', 'sphinx')\n+\n+        # Get the translation function for the 'sphinx' domain\n+        _ = locale.get_translation('sphinx')\n+\n+        # Check if the custom translations are ignored\n+        # The expected behavior is that the custom translations are not used\n+        # and the default translations are still in effect.\n+        self.assertEqual(_('Fig. %s') % 1, 'Fig. 1')  # Should be 'Foobar 1' if custom translation was used\n+        self.assertEqual(_('Listing %s') % 1, 'Listing 1')  # Should be 'Whatever 1' if custom translation was used\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_translation_ignore_inverted.py b/tests/test_translation_ignore_inverted.py\nnew file mode 100644\nindex 0000000..deafea1\n--- /dev/null\n+++ b/tests/test_translation_ignore_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sphinx import locale\n+\n+class TestTranslationIgnore(unittest.TestCase):\n+    def setUp(self):\n+        # Clear any existing translators to ensure a clean state\n+        locale.translators.clear()\n+\n+    def test_translation_ignore(self):\n+        # Initialize with the directory containing the custom translation\n+        locale.init(['locale/da/LC_MESSAGES'], 'da', 'sphinx')\n+\n+        # Get the translation function for the 'sphinx' domain\n+        _ = locale.get_translation('sphinx')\n+\n+        # Check if the custom translations are ignored\n+        # The expected behavior is that the custom translations are not used\n+        # and the default translations are still in effect.\n+        # Alter the assertions to fail when the bug is observed\n+        self.assertEqual(_('Fig. %s') % 1, 'Foobar 1', \"__BUG__HERE__\")  # Should be 'Foobar 1' if custom translation was used\n+        self.assertEqual(_('Listing %s') % 1, 'Whatever 1', \"__BUG__HERE__\")  # Should be 'Whatever 1' if custom translation was used\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 997123,
  "num_received_chars": 48554,
  "elapsed_time": 455.0767710208893,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}