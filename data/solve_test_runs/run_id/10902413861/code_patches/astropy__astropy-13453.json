{
  "instance_id": "astropy__astropy-13453",
  "edit_test_file": "astropy/io/ascii/tests/test_html.py",
  "code_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf22..6684440 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -339,7 +339,7 @@ class HTML(core.BaseReader):\n         self.outputter = HTMLOutputter()\n         return super().read(table)\n \n-    def write(self, table):\n+    def write(self, table, formats=None):\n         \"\"\"\n         Return data in ``table`` converted to HTML as a list of strings.\n         \"\"\"\n@@ -357,6 +357,13 @@ class HTML(core.BaseReader):\n \n         lines = []\n \n+        # Apply formats to columns if provided\n+        if formats:\n+            for col in cols:\n+                if col.info.name in formats:\n+                    format_func = formats[col.info.name]\n+                    col.data = [format_func(val) for val in col.data]\n+\n         # Set HTML escaping to False for any column in the raw_html_cols input\n         raw_html_cols = self.html.get('raw_html_cols', [])\n         if isinstance(raw_html_cols, str):\n",
  "test_patch": "diff --git a/astropy/io/ascii/tests/test_html_formats.py b/astropy/io/ascii/tests/test_html_formats.py\nnew file mode 100644\nindex 0000000..f043795\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_html_formats.py\n@@ -0,0 +1,50 @@\n+from astropy.table import Table\n+from io import StringIO\n+import unittest\n+\n+class TestHTMLFormatIssue(unittest.TestCase):\n+    def test_html_format_ignored(self):\n+        \"\"\"\n+        Test to reproduce the issue where the 'formats' argument is ignored\n+        when writing an Astropy table to HTML format.\n+        \"\"\"\n+        # Generate table\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        tc = t.copy()  # Copy table\n+\n+        # Write HTML table with \"a\" column formatted to show 2 decimal places\n+        with StringIO() as sp:\n+            tc.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+            output = sp.getvalue()\n+\n+        # Check that the output does not respect the formatting\n+        expected_output = \"\"\"\\\n+<html>\n+ <head>\n+  <meta charset=\"utf-8\"/>\n+  <meta content=\"text/html;charset=UTF-8\" http-equiv=\"Content-type\"/>\n+ </head>\n+ <body>\n+  <table>\n+   <thead>\n+    <tr>\n+     <th>a</th>\n+     <th>b</th>\n+    </tr>\n+   </thead>\n+   <tr>\n+    <td>1.23875234858e-24</td>\n+    <td>2</td>\n+   </tr>\n+   <tr>\n+    <td>3.2348748432e-15</td>\n+    <td>4</td>\n+   </tr>\n+  </table>\n+ </body>\n+</html>\n+\"\"\"\n+        self.assertEqual(output.strip(), expected_output.strip())\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/io/ascii/tests/test_html_formats_inverted.py b/astropy/io/ascii/tests/test_html_formats_inverted.py\nnew file mode 100644\nindex 0000000..32de479\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_html_formats_inverted.py\n@@ -0,0 +1,51 @@\n+from astropy.table import Table\n+from io import StringIO\n+import unittest\n+\n+class TestHTMLFormatIssue(unittest.TestCase):\n+    def test_html_format_ignored(self):\n+        \"\"\"\n+        Test to reproduce the issue where the 'formats' argument is ignored\n+        when writing an Astropy table to HTML format.\n+        \"\"\"\n+        # Generate table\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        tc = t.copy()  # Copy table\n+\n+        # Write HTML table with \"a\" column formatted to show 2 decimal places\n+        with StringIO() as sp:\n+            tc.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+            output = sp.getvalue()\n+\n+        # Check that the output respects the formatting\n+        expected_output = \"\"\"\\\n+<html>\n+ <head>\n+  <meta charset=\"utf-8\"/>\n+  <meta content=\"text/html;charset=UTF-8\" http-equiv=\"Content-type\"/>\n+ </head>\n+ <body>\n+  <table>\n+   <thead>\n+    <tr>\n+     <th>a</th>\n+     <th>b</th>\n+    </tr>\n+   </thead>\n+   <tr>\n+    <td>1.24e-24</td>\n+    <td>2</td>\n+   </tr>\n+   <tr>\n+    <td>3.23e-15</td>\n+    <td>4</td>\n+   </tr>\n+  </table>\n+ </body>\n+</html>\n+\"\"\"\n+        if output.strip() != expected_output.strip():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1367778,
  "num_received_chars": 62817,
  "elapsed_time": 453.83408093452454,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}