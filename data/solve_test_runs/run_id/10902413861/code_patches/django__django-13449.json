{
  "instance_id": "django__django-13449",
  "edit_test_file": "tests/backends/base/test_operations.py",
  "code_patch": "diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 84b2b24..ed5cb0e 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -25,6 +25,8 @@ class FirstValue(Func):\n     window_compatible = True\n \n \n+from django.db.models.fields import DecimalField\n+\n class LagLeadFunction(Func):\n     window_compatible = True\n \n@@ -46,6 +48,8 @@ class LagLeadFunction(Func):\n \n     def _resolve_output_field(self):\n         sources = self.get_source_expressions()\n+        if isinstance(sources[0].output_field, DecimalField):\n+            return FloatField()\n         return sources[0].output_field\n \n \n",
  "test_patch": "diff --git a/tests/backends/base/test_window_functions.py b/tests/backends/base/test_window_functions.py\nnew file mode 100644\nindex 0000000..597e028\n--- /dev/null\n+++ b/tests/backends/base/test_window_functions.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.db import models, connection\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagFunctionTest(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests.')\n+    def test_lag_with_decimalfield_crashes(self):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=10.1234)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=20.5678)\n+        \n+        w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+        queryset = LagTest.objects.all().annotate(w=w)\n+        \n+        with self.assertRaisesMessage(Exception, 'near \"OVER\": syntax error'):\n+            list(queryset)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/backends/base/test_window_functions_inverted.py b/tests/backends/base/test_window_functions_inverted.py\nnew file mode 100644\nindex 0000000..977b5eb\n--- /dev/null\n+++ b/tests/backends/base/test_window_functions_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.db import models, connection\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagFunctionTest(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests.')\n+    def test_lag_with_decimalfield_crashes(self):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=10.1234)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=20.5678)\n+        \n+        w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+        queryset = LagTest.objects.all().annotate(w=w)\n+        \n+        with self.assertRaisesMessage(Exception, '__BUG__HERE__'):\n+            list(queryset)\n\\ No newline at end of file\n",
  "num_sent_chars": 2625904,
  "num_received_chars": 72035,
  "elapsed_time": 635.638106584549,
  "lint_repair_count": 11,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}