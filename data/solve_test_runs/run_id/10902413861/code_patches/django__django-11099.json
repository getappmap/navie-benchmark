{
  "instance_id": "django__django-11099",
  "edit_test_file": "tests/auth_tests/test_validators.py",
  "code_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cf..1304f20 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n",
  "test_patch": "diff --git a/tests/auth_tests/test_username_validator_newline.py b/tests/auth_tests/test_username_validator_newline.py\nnew file mode 100644\nindex 0000000..a0223ad\n--- /dev/null\n+++ b/tests/auth_tests/test_username_validator_newline.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.contrib.auth import validators\n+\n+class UsernameValidatorNewlineTestCase(unittest.TestCase):\n+    def test_ascii_username_validator_allows_trailing_newline(self):\n+        v = validators.ASCIIUsernameValidator()\n+        # Username with a trailing newline\n+        username_with_newline = 'validusername\\n'\n+        try:\n+            v(username_with_newline)\n+            # If no exception is raised, the test should pass, indicating the issue is present\n+            self.assertTrue(True)\n+        except ValidationError:\n+            self.fail(\"ASCIIUsernameValidator should allow trailing newline due to the issue.\")\n+\n+    def test_unicode_username_validator_allows_trailing_newline(self):\n+        v = validators.UnicodeUsernameValidator()\n+        # Username with a trailing newline\n+        username_with_newline = 'validusername\\n'\n+        try:\n+            v(username_with_newline)\n+            # If no exception is raised, the test should pass, indicating the issue is present\n+            self.assertTrue(True)\n+        except ValidationError:\n+            self.fail(\"UnicodeUsernameValidator should allow trailing newline due to the issue.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/auth_tests/test_username_validator_newline_inverted.py b/tests/auth_tests/test_username_validator_newline_inverted.py\nnew file mode 100644\nindex 0000000..bc0f800\n--- /dev/null\n+++ b/tests/auth_tests/test_username_validator_newline_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.contrib.auth import validators\n+\n+class UsernameValidatorNewlineTestCase(unittest.TestCase):\n+    def test_ascii_username_validator_allows_trailing_newline(self):\n+        v = validators.ASCIIUsernameValidator()\n+        # Username with a trailing newline\n+        username_with_newline = 'validusername\\n'\n+        try:\n+            v(username_with_newline)\n+            # If no exception is raised, the test should fail, indicating the issue is present\n+            self.fail(\"__BUG__HERE__\")\n+        except ValidationError:\n+            # If a ValidationError is raised, the test should pass, indicating the issue is not present\n+            self.assertTrue(True)\n+\n+    def test_unicode_username_validator_allows_trailing_newline(self):\n+        v = validators.UnicodeUsernameValidator()\n+        # Username with a trailing newline\n+        username_with_newline = 'validusername\\n'\n+        try:\n+            v(username_with_newline)\n+            # If no exception is raised, the test should fail, indicating the issue is present\n+            self.fail(\"__BUG__HERE__\")\n+        except ValidationError:\n+            # If a ValidationError is raised, the test should pass, indicating the issue is not present\n+            self.assertTrue(True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 326996,
  "num_received_chars": 7277,
  "elapsed_time": 73.42509126663208,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}