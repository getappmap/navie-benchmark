{
  "instance_id": "pylint-dev__pylint-6528",
  "edit_test_file": "tests/checkers/unittest_similar.py",
  "code_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6..d90cd23 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -565,8 +565,8 @@ class PyLinter(\n                 self._msgs_state[msg.msgid] = False\n \n     @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n-        \"\"\"Discover python modules and packages in sub-directory.\n+    def _discover_files(files_or_modules: Sequence[str], ignore: list[str], ignore_patterns: list[str], ignore_paths: list[str]) -> Iterator[str]:\n+        \"\"\"Discover python modules and packages in sub-directory, respecting ignore settings.\n \n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n@@ -579,6 +579,12 @@ class PyLinter(\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+                    if any(\n+                        os.path.basename(root) in ignore or\n+                        any(re.match(pattern, os.path.basename(root)) for pattern in ignore_patterns) or\n+                        any(re.match(pattern, root) for pattern in ignore_paths)\n+                    ):\n+                        continue\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n@@ -586,10 +592,19 @@ class PyLinter(\n                         yield from (\n                             os.path.join(root, file)\n                             for file in files\n-                            if file.endswith(\".py\")\n+                            if file.endswith(\".py\") and not (\n+                                os.path.basename(file) in ignore or\n+                                any(re.match(pattern, os.path.basename(file)) for pattern in ignore_patterns) or\n+                                any(re.match(pattern, os.path.join(root, file)) for pattern in ignore_paths)\n+                            )\n                         )\n             else:\n-                yield something\n+                if not (\n+                    os.path.basename(something) in ignore or\n+                    any(re.match(pattern, os.path.basename(something)) for pattern in ignore_patterns) or\n+                    any(re.match(pattern, something) for pattern in ignore_paths)\n+                ):\n+                    yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n",
  "test_patch": "diff --git a/tests/checkers/unittest_recursive_ignore.py b/tests/checkers/unittest_recursive_ignore.py\nnew file mode 100644\nindex 0000000..9253d46\n--- /dev/null\n+++ b/tests/checkers/unittest_recursive_ignore.py\n@@ -0,0 +1,22 @@\n+import os\n+import tempfile\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.lint import Run\n+import pytest\n+\n+def test_recursive_ignore() -> None:\n+    with tempfile.TemporaryDirectory() as tempdir:\n+        # Create directories and files\n+        os.makedirs(os.path.join(tempdir, '.a'), exist_ok=True)\n+        with open(os.path.join(tempdir, '.a', 'foo.py'), 'w') as f:\n+            f.write('import re\\n')\n+        with open(os.path.join(tempdir, 'bar.py'), 'w') as f:\n+            f.write('import re\\n')\n+\n+        # Capture the output\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            Run(['--recursive=y', tempdir])\n+        assert ex.value.code == 20  # Expecting a non-zero exit code due to the issue\n+        assert \".a/foo.py\" in output.getvalue()  # Check that foo.py is not ignored\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/checkers/unittest_recursive_ignore_inverted.py b/tests/checkers/unittest_recursive_ignore_inverted.py\nnew file mode 100644\nindex 0000000..11036a5\n--- /dev/null\n+++ b/tests/checkers/unittest_recursive_ignore_inverted.py\n@@ -0,0 +1,24 @@\n+import os\n+import tempfile\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.lint import Run\n+import pytest\n+\n+def test_recursive_ignore() -> None:\n+    with tempfile.TemporaryDirectory() as tempdir:\n+        # Create directories and files\n+        os.makedirs(os.path.join(tempdir, '.a'), exist_ok=True)\n+        with open(os.path.join(tempdir, '.a', 'foo.py'), 'w') as f:\n+            f.write('import re\\n')\n+        with open(os.path.join(tempdir, 'bar.py'), 'w') as f:\n+            f.write('import re\\n')\n+\n+        # Capture the output\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            Run(['--recursive=y', tempdir])\n+        \n+        # Altered assertion to make the test fail when the bug is observed\n+        assert ex.value.code != 20, \"__BUG__HERE__\"  # Expecting a zero exit code if the issue is fixed\n+        assert \".a/foo.py\" not in output.getvalue(), \"__BUG__HERE__\"  # Check that foo.py is ignored\n\\ No newline at end of file\n",
  "num_sent_chars": 1440259,
  "num_received_chars": 70752,
  "elapsed_time": 947.3605527877808,
  "lint_repair_count": 0,
  "test_generation_attempts": 8,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}