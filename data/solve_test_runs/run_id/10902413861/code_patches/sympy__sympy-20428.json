{
  "instance_id": "sympy__sympy-20428",
  "edit_test_file": "sympy/polys/tests/test_polytools.py",
  "code_patch": "diff --git a/sympy/polys/densetools.py b/sympy/polys/densetools.py\nindex f057824..8a120da 100644\n--- a/sympy/polys/densetools.py\n+++ b/sympy/polys/densetools.py\n@@ -1198,6 +1198,8 @@ def dup_clear_denoms(f, K0, K1=None, convert=False):\n     if not K1.is_one(common):\n         f = dup_mul_ground(f, common, K0)\n \n+    f = dup_strip(f)  # Ensure the polynomial is normalized by stripping leading zeros\n+\n     if not convert:\n         return common, f\n     else:\n@@ -1252,6 +1254,8 @@ def dmp_clear_denoms(f, u, K0, K1=None, convert=False):\n     if not K1.is_one(common):\n         f = dmp_mul_ground(f, common, u, K0)\n \n+    f = dmp_strip(f, u)  # Ensure the polynomial is normalized by stripping leading zeros\n+\n     if not convert:\n         return common, f\n     else:\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_clear_denoms_behavior.py b/sympy/polys/tests/test_clear_denoms_behavior.py\nnew file mode 100644\nindex 0000000..82a65e0\n--- /dev/null\n+++ b/sympy/polys/tests/test_clear_denoms_behavior.py\n@@ -0,0 +1,22 @@\n+# File: sympy/polys/tests/test_clear_denoms_behavior.py\n+\n+from sympy import symbols, sympify, Poly, sqrt\n+from sympy.testing.pytest import raises\n+\n+def test_clear_denoms_behavior():\n+    x = symbols(\"x\")\n+    f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+    coeff, bad_poly = f.clear_denoms()\n+    \n+    # Check if the polynomial is incorrectly identified as zero\n+    assert bad_poly.is_zero is False, \"Expected bad_poly.is_zero to be False\"\n+    \n+    # Check if the polynomial's expression is zero\n+    assert bad_poly.as_expr() == 0, \"Expected bad_poly.as_expr() to be 0\"\n+    \n+    # Check if the expression's zero status is True\n+    assert bad_poly.as_expr().is_zero is True, \"Expected bad_poly.as_expr().is_zero to be True\"\n+    \n+    # Check if terms_gcd raises an IndexError\n+    with raises(IndexError):\n+        bad_poly.terms_gcd()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_clear_denoms_behavior_inverted.py b/sympy/polys/tests/test_clear_denoms_behavior_inverted.py\nnew file mode 100644\nindex 0000000..4541c79\n--- /dev/null\n+++ b/sympy/polys/tests/test_clear_denoms_behavior_inverted.py\n@@ -0,0 +1,22 @@\n+# File: sympy/polys/tests/test_clear_denoms_behavior.py\n+\n+from sympy import symbols, sympify, Poly, sqrt\n+from sympy.testing.pytest import raises\n+\n+def test_clear_denoms_behavior():\n+    x = symbols(\"x\")\n+    f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+    coeff, bad_poly = f.clear_denoms()\n+    \n+    # Check if the polynomial is incorrectly identified as zero\n+    assert bad_poly.is_zero is True, \"__BUG__HERE__\"\n+    \n+    # Check if the polynomial's expression is zero\n+    assert bad_poly.as_expr() == 0, \"Expected bad_poly.as_expr() to be 0\"\n+    \n+    # Check if the expression's zero status is True\n+    assert bad_poly.as_expr().is_zero is True, \"Expected bad_poly.as_expr().is_zero to be True\"\n+    \n+    # Check if terms_gcd raises an IndexError\n+    with raises(IndexError):\n+        bad_poly.terms_gcd()\n\\ No newline at end of file\n",
  "num_sent_chars": 1741792,
  "num_received_chars": 79379,
  "elapsed_time": 911.4295377731323,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}