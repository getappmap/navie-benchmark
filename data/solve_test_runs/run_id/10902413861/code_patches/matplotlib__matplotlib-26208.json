{
  "instance_id": "matplotlib__matplotlib-26208",
  "edit_test_file": "lib/matplotlib/tests/test_axes.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e32..f9ef844 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2260,7 +2260,10 @@ class _AxesBase(martist.Artist):\n                 # the call so that self.dataLim will update its own minpos.\n                 # This ensures that log scales see the correct minimum.\n                 points = np.concatenate([points, [datalim.minpos]])\n-            self.update_datalim(points)\n+            # Only update data limits if this is not a twinned axis or if\n+            # the collection is not a stackplot.\n+            if not self._twinned_axes.get_siblings(self) or not isinstance(collection, mcoll.PolyCollection):\n+                self.update_datalim(points)\n \n         self.stale = True\n         return collection\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_stackplot_twinx.py b/lib/matplotlib/tests/test_stackplot_twinx.py\nnew file mode 100644\nindex 0000000..85ee827\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_stackplot_twinx.py\n@@ -0,0 +1,29 @@\n+# File: lib/matplotlib/tests/test_stackplot_twinx.py\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+def test_stackplot_twinx_datalim_issue():\n+    def print_datalim(*ax):\n+        return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+    df1_index = ['16 May', '17 May']  # == df2_index\n+    df1_values = [-22.717708333333402, 26.584999999999937]\n+    df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+    fig, ax1 = plt.subplots()\n+\n+    ax1.stackplot(df1_index, df1_values)\n+    initial_datalim_ax1 = print_datalim(ax1)\n+\n+    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n+    datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+    ax2.plot(df1_index, df2_values)\n+    final_datalim = print_datalim(ax1, ax2)\n+\n+    # Assert that the dataLim of ax1 becomes inf after plotting on ax2\n+    assert np.isinf(final_datalim[0][0]) and np.isinf(final_datalim[0][1]), \\\n+        f\"Expected dataLim of ax1 to be inf, but got {final_datalim[0]}\"\n+    assert not np.isinf(final_datalim[1][0]) and not np.isinf(final_datalim[1][1]), \\\n+        f\"Expected dataLim of ax2 to be finite, but got {final_datalim[1]}\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_stackplot_twinx_inverted.py b/lib/matplotlib/tests/test_stackplot_twinx_inverted.py\nnew file mode 100644\nindex 0000000..4268185\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_stackplot_twinx_inverted.py\n@@ -0,0 +1,29 @@\n+# File: lib/matplotlib/tests/test_stackplot_twinx.py\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+def test_stackplot_twinx_datalim_issue():\n+    def print_datalim(*ax):\n+        return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+    df1_index = ['16 May', '17 May']  # == df2_index\n+    df1_values = [-22.717708333333402, 26.584999999999937]\n+    df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+    fig, ax1 = plt.subplots()\n+\n+    ax1.stackplot(df1_index, df1_values)\n+    initial_datalim_ax1 = print_datalim(ax1)\n+\n+    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n+    datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+    ax2.plot(df1_index, df2_values)\n+    final_datalim = print_datalim(ax1, ax2)\n+\n+    # Altered assertion to fail when the bug is observed\n+    assert not (np.isinf(final_datalim[0][0]) and np.isinf(final_datalim[0][1])), \\\n+        \"__BUG__HERE__\"\n+    assert not np.isinf(final_datalim[1][0]) and not np.isinf(final_datalim[1][1]), \\\n+        f\"Expected dataLim of ax2 to be finite, but got {final_datalim[1]}\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2020318,
  "num_received_chars": 51440,
  "elapsed_time": 1408.0756964683533,
  "lint_repair_count": 2,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}