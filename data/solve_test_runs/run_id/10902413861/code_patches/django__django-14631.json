{
  "instance_id": "django__django-14631",
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex f1275aa..e9c3942 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -198,6 +198,19 @@ class Field:\n         \"\"\"\n         return BoundField(form, self, field_name)\n \n+    def did_change(self, initial_value, data_value):\n+        \"\"\"\n+        Determine if the field's data has changed from its initial value.\n+        \"\"\"\n+        if not self.show_hidden_initial:\n+            return self.has_changed(initial_value, data_value)\n+        else:\n+            try:\n+                initial_value = self.to_python(initial_value)\n+            except ValidationError:\n+                return True\n+            return self.has_changed(initial_value, data_value)\n+\n     def __deepcopy__(self, memo):\n         result = copy.copy(self)\n         memo[id(self)] = result\n\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037b..5e22268 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -388,13 +388,14 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n+            bound_field = self[name]\n             if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+                value = bound_field.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bound_field.value()\n             try:\n                 if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n+                    initial = bound_field.initial\n                     value = field.clean(value, initial)\n                 else:\n                     value = field.clean(value)\n@@ -437,24 +438,9 @@ class BaseForm:\n     @cached_property\n     def changed_data(self):\n         data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n+        for name in self.fields:\n+            bound_field = self[name]\n+            if bound_field.did_change():\n                 data.append(name)\n         return data\n \n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_boundfield_access.py b/tests/forms_tests/tests/test_boundfield_access.py\nnew file mode 100644\nindex 0000000..1b97e81\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_boundfield_access.py\n@@ -0,0 +1,14 @@\n+import datetime\n+from django.forms import DateTimeField, Form\n+from django.test import SimpleTestCase\n+\n+class TestBoundFieldAccess(SimpleTestCase):\n+    def test_clean_fields_and_changed_data_consistency(self):\n+        class DateTimeForm(Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=True)\n+\n+        form = DateTimeForm({})\n+        form.is_valid()  # Trigger form validation to populate cleaned_data\n+\n+        # This test reproduces the issue where form.cleaned_data['dt'] can differ from form['dt'].initial\n+        self.assertEqual(form.cleaned_data['dt'], form['dt'].initial)\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 2797563,
  "num_received_chars": 114024,
  "elapsed_time": 961.693619966507,
  "lint_repair_count": 10,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}