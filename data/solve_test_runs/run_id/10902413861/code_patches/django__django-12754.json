{
  "instance_id": "django__django-12754",
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0955a5a..a23329a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -346,6 +346,13 @@ class ModelBase(type):\n                 remote = wrt.remote_field.model\n                 lazy_related_operation(make_foreign_order_accessors, cls, remote)\n \n+        # Adjust migration operation order to handle field transfer from base to subclass\n+        if hasattr(cls, '_meta') and cls._meta.parents:\n+            for parent, field in cls._meta.parents.items():\n+                if field and field.name in cls._meta.local_fields:\n+                    cls._meta.local_fields.remove(field)\n+                    cls._meta.local_fields.insert(0, field)\n+\n         # Give the class a docstring -- its definition.\n         if cls.__doc__ is None:\n             cls.__doc__ = \"%s(%s)\" % (cls.__name__, \", \".join(f.name for f in opts.fields))\n",
  "test_patch": "diff --git a/tests/migrations/test_migrations_field_error_fix.py b/tests/migrations/test_migrations_field_error_fix.py\nnew file mode 100644\nindex 0000000..b1a7318\n--- /dev/null\n+++ b/tests/migrations/test_migrations_field_error_fix.py\n@@ -0,0 +1,47 @@\n+import unittest\n+from django.db import models\n+from django.core.exceptions import FieldError\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+\n+class MigrationFieldErrorTests(unittest.TestCase):\n+    def make_project_state(self, model_states):\n+        \"Shortcut to make ProjectStates from lists of predefined models\"\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def get_changes(self, before_states, after_states, questioner=None):\n+        return MigrationAutodetector(\n+            self.make_project_state(before_states),\n+            self.make_project_state(after_states),\n+            questioner,\n+        )._detect_changes()\n+\n+    def test_field_error_on_migration(self):\n+        \"\"\"Reproduce FieldError when migrating field to new model subclass.\"\"\"\n+        # Initial state with Readable model having a title field\n+        before = [\n+            ModelState('app', 'Readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        # New state with Readable model without title and Book subclass with title\n+        after = [\n+            ModelState('app', 'Readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'Book', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.Readable',)),\n+        ]\n+        # Expect FieldError due to migration order\n+        with self.assertRaises(FieldError):\n+            self.get_changes(before, after, MigrationQuestioner({\"ask_rename\": True}))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_migrations_field_error_fix_inverted.py b/tests/migrations/test_migrations_field_error_fix_inverted.py\nnew file mode 100644\nindex 0000000..a891c9b\n--- /dev/null\n+++ b/tests/migrations/test_migrations_field_error_fix_inverted.py\n@@ -0,0 +1,49 @@\n+import unittest\n+from django.db import models\n+from django.core.exceptions import FieldError\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+\n+class MigrationFieldErrorTests(unittest.TestCase):\n+    def make_project_state(self, model_states):\n+        \"Shortcut to make ProjectStates from lists of predefined models\"\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n+\n+    def get_changes(self, before_states, after_states, questioner=None):\n+        return MigrationAutodetector(\n+            self.make_project_state(before_states),\n+            self.make_project_state(after_states),\n+            questioner,\n+        )._detect_changes()\n+\n+    def test_field_error_on_migration(self):\n+        \"\"\"Reproduce FieldError when migrating field to new model subclass.\"\"\"\n+        # Initial state with Readable model having a title field\n+        before = [\n+            ModelState('app', 'Readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        # New state with Readable model without title and Book subclass with title\n+        after = [\n+            ModelState('app', 'Readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'Book', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.Readable',)),\n+        ]\n+        # Expect FieldError due to migration order\n+        try:\n+            self.get_changes(before, after, MigrationQuestioner({\"ask_rename\": True}))\n+        except FieldError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1757064,
  "num_received_chars": 71187,
  "elapsed_time": 503.48553562164307,
  "lint_repair_count": 3,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}