{
  "instance_id": "scikit-learn__scikit-learn-14496",
  "edit_test_file": "sklearn/cluster/tests/test_optics.py",
  "code_patch": "diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\nindex 4f7eb11..e7d2a5c 100755\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -437,7 +437,7 @@ if metric=\u2019precomputed\u2019.\n     n_samples = X.shape[0]\n     _validate_size(min_samples, n_samples, 'min_samples')\n     if min_samples <= 1:\n-        min_samples = max(2, min_samples * n_samples)\n+        min_samples = max(2, int(round(min_samples * n_samples)))\n \n     # Start all points as 'unprocessed' ##\n     reachability_ = np.empty(n_samples)\n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_optics_min_samples_fix.py b/sklearn/cluster/tests/test_optics_min_samples_fix.py\nnew file mode 100644\nindex 0000000..00a0f35\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_optics_min_samples_fix.py\n@@ -0,0 +1,17 @@\n+# sklearn/cluster/tests/test_optics_min_samples_fix.py\n+\n+import numpy as np\n+from sklearn.cluster.optics_ import OPTICS\n+from sklearn.datasets import make_blobs\n+from sklearn.utils.testing import assert_raise_message\n+\n+def test_optics_float_min_samples():\n+    # Generate sample data\n+    X, _ = make_blobs(n_samples=100, centers=3, cluster_std=0.5, random_state=0)\n+\n+    # Initialize OPTICS with min_samples as a float\n+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)\n+\n+    # Assert that a TypeError is raised with the expected message\n+    expected_message = \"n_neighbors does not take <class 'float'> value, enter integer value\"\n+    assert_raise_message(TypeError, expected_message, clust.fit, X)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/cluster/tests/test_optics_min_samples_fix_inverted.py b/sklearn/cluster/tests/test_optics_min_samples_fix_inverted.py\nnew file mode 100644\nindex 0000000..79be695\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_optics_min_samples_fix_inverted.py\n@@ -0,0 +1,17 @@\n+# sklearn/cluster/tests/test_optics_min_samples_fix.py\n+\n+import numpy as np\n+from sklearn.cluster.optics_ import OPTICS\n+from sklearn.datasets import make_blobs\n+import pytest\n+\n+def test_optics_float_min_samples():\n+    # Generate sample data\n+    X, _ = make_blobs(n_samples=100, centers=3, cluster_std=0.5, random_state=0)\n+\n+    # Initialize OPTICS with min_samples as a float\n+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)\n+\n+    # Attempt to fit the model and expect a TypeError with a specific message\n+    with pytest.raises(TypeError, match=\"__BUG__HERE__\"):\n+        clust.fit(X)\n\\ No newline at end of file\n",
  "num_sent_chars": 986761,
  "num_received_chars": 21125,
  "elapsed_time": 335.15372133255005,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}