{
  "instance_id": "sympy__sympy-24443",
  "edit_test_file": "sympy/combinatorics/tests/test_fp_groups.py",
  "code_patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf3..44badc8 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -315,6 +315,11 @@ def _check_homomorphism(domain, codomain, images):\n         rels = domain.presentation().relators\n     identity = codomain.identity\n \n+    def _get_generator(g):\n+        if isinstance(domain, PermutationGroup):\n+            return domain.generators[abs(g) - 1]\n+        return g\n+\n     def _image(r):\n         if r.is_identity:\n             return identity\n@@ -323,20 +328,9 @@ def _image(r):\n             r_arr = r.array_form\n             i = 0\n             j = 0\n-            # i is the index for r and j is for\n-            # r_arr. r_arr[j] is the tuple (sym, p)\n-            # where sym is the generator symbol\n-            # and p is the power to which it is\n-            # raised while r[i] is a generator\n-            # (not just its symbol) or the inverse of\n-            # a generator - hence the need for\n-            # both indices\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n-                else:\n-                    s = r[i]\n+                s = _get_generator(r[i])\n                 if s in images:\n                     w = w*images[s]**power\n                 elif s**-1 in images:\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_group_homomorphisms.py b/sympy/combinatorics/tests/test_group_homomorphisms.py\nnew file mode 100644\nindex 0000000..2baa876\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_group_homomorphisms.py\n@@ -0,0 +1,7 @@\n+from sympy.combinatorics.named_groups import DihedralGroup\n+from sympy.combinatorics.homomorphisms import homomorphism\n+from sympy.testing.pytest import raises\n+\n+def test_homomorphism_issue():\n+    D3 = DihedralGroup(3)\n+    raises(ValueError, lambda: homomorphism(D3, D3, D3.generators, D3.generators))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_group_homomorphisms_inverted.py b/sympy/combinatorics/tests/test_group_homomorphisms_inverted.py\nnew file mode 100644\nindex 0000000..1b993d8\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_group_homomorphisms_inverted.py\n@@ -0,0 +1,10 @@\n+from sympy.combinatorics.named_groups import DihedralGroup\n+from sympy.combinatorics.homomorphisms import homomorphism\n+from sympy.testing.pytest import raises\n+\n+def test_homomorphism_issue():\n+    D3 = DihedralGroup(3)\n+    try:\n+        homomorphism(D3, D3, D3.generators, D3.generators)\n+    except ValueError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3375480,
  "num_received_chars": 66074,
  "elapsed_time": 720.048018693924,
  "lint_repair_count": 12,
  "test_generation_attempts": 6,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}