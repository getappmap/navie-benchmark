{
  "instance_id": "django__django-16032",
  "edit_test_file": "tests/annotations/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8419dc0..d1d1158 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2357,16 +2357,20 @@ class Query(BaseExpression):\n             # Replace any existing \"immediate load\" field names.\n             self.deferred_loading = frozenset(field_names), False\n \n-    def set_annotation_mask(self, names):\n+    def set_annotation_mask(self, names, clear_existing=False):\n         \"\"\"Set the mask of annotations that will be returned by the SELECT.\"\"\"\n+        if clear_existing:\n+            self.annotation_select_mask = set()\n         if names is None:\n             self.annotation_select_mask = None\n         else:\n             self.annotation_select_mask = set(names)\n         self._annotation_select_cache = None\n \n-    def append_annotation_mask(self, names):\n+    def append_annotation_mask(self, names, clear_existing=False):\n         if self.annotation_select_mask is not None:\n+            if clear_existing:\n+                self.annotation_select_mask = set()\n             self.set_annotation_mask(self.annotation_select_mask.union(names))\n \n     def set_extra_mask(self, names):\n@@ -2380,7 +2384,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n-    def set_values(self, fields):\n+    def set_values(self, fields, clear_annotations=False):\n         self.select_related = False\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n@@ -2403,7 +2407,7 @@ class Query(BaseExpression):\n                     else:\n                         field_names.append(f)\n             self.set_extra_mask(extra_names)\n-            self.set_annotation_mask(annotation_names)\n+            self.set_annotation_mask(annotation_names, clear_existing=clear_annotations)\n             selected = frozenset(field_names + extra_names + annotation_names)\n         else:\n             field_names = [f.attname for f in self.model._meta.concrete_fields]\n",
  "test_patch": "diff --git a/tests/annotations/test_annotation_alias_issue.py b/tests/annotations/test_annotation_alias_issue.py\nnew file mode 100644\nindex 0000000..05550c2\n--- /dev/null\n+++ b/tests/annotations/test_annotation_alias_issue.py\n@@ -0,0 +1,88 @@\n+# File: tests/annotations/test_annotation_alias_issue.py\n+\n+import datetime\n+from decimal import Decimal\n+from django.core.exceptions import FieldError\n+from django.db.models import Value, Count\n+from django.test import TestCase\n+from .models import Author, Book, Publisher\n+\n+class AnnotationAliasIssueTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.a2 = Author.objects.create(name=\"Jacob Kaplan-Moss\", age=35)\n+        cls.a3 = Author.objects.create(name=\"James Bennett\", age=34)\n+        cls.a4 = Author.objects.create(name=\"Peter Norvig\", age=57)\n+        cls.a5 = Author.objects.create(name=\"Stuart Russell\", age=46)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.p2 = Publisher.objects.create(name=\"Sams\", num_awards=1)\n+        cls.p3 = Publisher.objects.create(name=\"Prentice Hall\", num_awards=7)\n+        cls.p4 = Publisher.objects.create(name=\"Morgan Kaufmann\", num_awards=9)\n+\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+        )\n+        cls.b2 = Book.objects.create(\n+            isbn=\"159059996\",\n+            pages=300,\n+            rating=4.0,\n+            price=Decimal(\"29.69\"),\n+            contact=cls.a3,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2008, 6, 23),\n+            name=\"Practical Django Projects\",\n+        )\n+        cls.b3 = Book.objects.create(\n+            isbn=\"013790395\",\n+            pages=1132,\n+            rating=4.0,\n+            price=Decimal(\"82.80\"),\n+            contact=cls.a4,\n+            publisher=cls.p3,\n+            pubdate=datetime.date(1995, 1, 15),\n+            name=\"Artificial Intelligence: A Modern Approach\",\n+        )\n+        cls.b4 = Book.objects.create(\n+            isbn=\"155860191\",\n+            pages=946,\n+            rating=5.0,\n+            price=Decimal(\"75.00\"),\n+            contact=cls.a4,\n+            publisher=cls.p4,\n+            pubdate=datetime.date(1991, 10, 15),\n+            name=(\n+                \"Paradigms of Artificial Intelligence Programming: Case Studies in \"\n+                \"Common Lisp\"\n+            ),\n+        )\n+        cls.b1.authors.add(cls.a1, cls.a2)\n+        cls.b2.authors.add(cls.a3)\n+        cls.b3.authors.add(cls.a4, cls.a5)\n+        cls.b4.authors.add(cls.a4)\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        with self.assertRaisesMessage(\n+            Exception, \"sub-select returns 10 columns - expected 1\"\n+        ):\n+            list(publisher_books_qs)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/annotations/test_annotation_alias_issue_inverted.py b/tests/annotations/test_annotation_alias_issue_inverted.py\nnew file mode 100644\nindex 0000000..3294be6\n--- /dev/null\n+++ b/tests/annotations/test_annotation_alias_issue_inverted.py\n@@ -0,0 +1,88 @@\n+# File: tests/annotations/test_annotation_alias_issue.py\n+\n+import datetime\n+from decimal import Decimal\n+from django.core.exceptions import FieldError\n+from django.db.models import Value, Count\n+from django.test import TestCase\n+from .models import Author, Book, Publisher\n+\n+class AnnotationAliasIssueTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.a2 = Author.objects.create(name=\"Jacob Kaplan-Moss\", age=35)\n+        cls.a3 = Author.objects.create(name=\"James Bennett\", age=34)\n+        cls.a4 = Author.objects.create(name=\"Peter Norvig\", age=57)\n+        cls.a5 = Author.objects.create(name=\"Stuart Russell\", age=46)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.p2 = Publisher.objects.create(name=\"Sams\", num_awards=1)\n+        cls.p3 = Publisher.objects.create(name=\"Prentice Hall\", num_awards=7)\n+        cls.p4 = Publisher.objects.create(name=\"Morgan Kaufmann\", num_awards=9)\n+\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+        )\n+        cls.b2 = Book.objects.create(\n+            isbn=\"159059996\",\n+            pages=300,\n+            rating=4.0,\n+            price=Decimal(\"29.69\"),\n+            contact=cls.a3,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2008, 6, 23),\n+            name=\"Practical Django Projects\",\n+        )\n+        cls.b3 = Book.objects.create(\n+            isbn=\"013790395\",\n+            pages=1132,\n+            rating=4.0,\n+            price=Decimal(\"82.80\"),\n+            contact=cls.a4,\n+            publisher=cls.p3,\n+            pubdate=datetime.date(1995, 1, 15),\n+            name=\"Artificial Intelligence: A Modern Approach\",\n+        )\n+        cls.b4 = Book.objects.create(\n+            isbn=\"155860191\",\n+            pages=946,\n+            rating=5.0,\n+            price=Decimal(\"75.00\"),\n+            contact=cls.a4,\n+            publisher=cls.p4,\n+            pubdate=datetime.date(1991, 10, 15),\n+            name=(\n+                \"Paradigms of Artificial Intelligence Programming: Case Studies in \"\n+                \"Common Lisp\"\n+            ),\n+        )\n+        cls.b1.authors.add(cls.a1, cls.a2)\n+        cls.b2.authors.add(cls.a3)\n+        cls.b3.authors.add(cls.a4, cls.a5)\n+        cls.b4.authors.add(cls.a4)\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        with self.assertRaisesMessage(\n+            Exception, \"__BUG__HERE__\"\n+        ):\n+            list(publisher_books_qs)\n\\ No newline at end of file\n",
  "num_sent_chars": 1666278,
  "num_received_chars": 90292,
  "elapsed_time": 654.2159156799316,
  "lint_repair_count": 1,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}