{
  "instance_id": "django__django-14311",
  "edit_test_file": "tests/model_fields/test_foreignkey.py",
  "code_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5..9818ad2 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -218,6 +218,10 @@ def get_child_arguments():\n     \"\"\"\n     import __main__\n     py_script = Path(sys.argv[0])\n+    if py_script.name == \"-m\":\n+        # Handle the case where the script is executed with `-m <module>`\n+        module_name = sys.argv[1]\n+        return [sys.executable, \"-m\", module_name] + sys.argv[2:]\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n     # __spec__ is set when the server was started with the `-m` option,\n",
  "test_patch": "diff --git a/tests/model_fields/test_autoreload_module.py b/tests/model_fields/test_autoreload_module.py\nnew file mode 100644\nindex 0000000..7fcda48\n--- /dev/null\n+++ b/tests/model_fields/test_autoreload_module.py\n@@ -0,0 +1,16 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadModule(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'custom_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_python_m_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue where autoreload does not handle\n+        `python -m custom_module runserver` correctly.\n+        \"\"\"\n+        with self.assertRaises(RuntimeError) as cm:\n+            autoreload.get_child_arguments()\n+        self.assertIn('Script -m does not exist.', str(cm.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_autoreload_module_inverted.py b/tests/model_fields/test_autoreload_module_inverted.py\nnew file mode 100644\nindex 0000000..463902a\n--- /dev/null\n+++ b/tests/model_fields/test_autoreload_module_inverted.py\n@@ -0,0 +1,16 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadModule(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'custom_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_python_m_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue where autoreload does not handle\n+        `python -m custom_module runserver` correctly.\n+        \"\"\"\n+        with self.assertRaises(RuntimeError) as cm:\n+            autoreload.get_child_arguments()\n+        self.assertIn('__BUG__HERE__', str(cm.exception))\n\\ No newline at end of file\n",
  "num_sent_chars": 1338963,
  "num_received_chars": 36217,
  "elapsed_time": 374.7038252353668,
  "lint_repair_count": 1,
  "test_generation_attempts": 6,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}