{
  "instance_id": "matplotlib__matplotlib-25775",
  "edit_test_file": "lib/matplotlib/tests/test_legend.py",
  "code_patch": "diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\nindex 6520b1d..5397f70 100644\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -763,6 +763,7 @@ class GraphicsContextBase:\n         self._alpha = 1.0\n         self._forced_alpha = False  # if True, _alpha overrides A from RGBA\n         self._antialiased = 1  # use 0, 1 not True, False for extension code\n+        self._text_antialiased = rcParams[\"text.antialiased\"]\n         self._capstyle = CapStyle('butt')\n         self._cliprect = None\n         self._clippath = None\n@@ -817,6 +818,10 @@ class GraphicsContextBase:\n         \"\"\"Return whether the object should try to do antialiased rendering.\"\"\"\n         return self._antialiased\n \n+    def get_text_antialiased(self):\n+        \"\"\"Return whether the text should be rendered with antialiasing.\"\"\"\n+        return self._text_antialiased\n+\n     def get_capstyle(self):\n         \"\"\"Return the `.CapStyle`.\"\"\"\n         return self._capstyle.name\n@@ -912,6 +917,10 @@ class GraphicsContextBase:\n         # Use ints to make life easier on extension code trying to read the gc.\n         self._antialiased = int(bool(b))\n \n+    def set_text_antialiased(self, b):\n+        \"\"\"Set whether text should be rendered with antialiasing.\"\"\"\n+        self._text_antialiased = bool(b)\n+\n     @_docstring.interpd\n     def set_capstyle(self, cs):\n         \"\"\"\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiasing.py b/lib/matplotlib/tests/test_text_antialiasing.py\nnew file mode 100644\nindex 0000000..d03b3f9\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiasing.py\n@@ -0,0 +1,28 @@\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_text_antialiasing():\n+    \"\"\"\n+    Test to reproduce the issue where Text objects do not have\n+    get/set_antialiased methods and rely on global rcParams for antialiasing.\n+    \"\"\"\n+\n+    fig, ax = plt.subplots()\n+    text = ax.text(0.5, 0.5, 'Test', fontsize=20)\n+\n+    # Attempt to set antialiasing on the text object\n+    try:\n+        text.set_antialiased(True)\n+    except AttributeError as e:\n+        assert str(e) == \"'Text' object has no attribute 'set_antialiased'\"\n+\n+    # Attempt to get antialiasing state from the text object\n+    try:\n+        antialiased = text.get_antialiased()\n+    except AttributeError as e:\n+        assert str(e) == \"'Text' object has no attribute 'get_antialiased'\"\n+\n+    # Check if the global rcParams is being used instead\n+    assert plt.rcParams[\"text.antialiased\"] is True\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiasing_inverted.py b/lib/matplotlib/tests/test_text_antialiasing_inverted.py\nnew file mode 100644\nindex 0000000..da796be\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiasing_inverted.py\n@@ -0,0 +1,25 @@\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_text_antialiasing():\n+    \"\"\"\n+    Test to reproduce the issue where Text objects do not have\n+    get/set_antialiased methods and rely on global rcParams for antialiasing.\n+    This test should FAIL when the issue is observed.\n+    \"\"\"\n+\n+    fig, ax = plt.subplots()\n+    text = ax.text(0.5, 0.5, 'Test', fontsize=20)\n+\n+    # Attempt to set antialiasing on the text object\n+    with pytest.raises(AttributeError, match=\"__BUG__HERE__\"):\n+        text.set_antialiased(True)\n+\n+    # Attempt to get antialiasing state from the text object\n+    with pytest.raises(AttributeError, match=\"__BUG__HERE__\"):\n+        antialiased = text.get_antialiased()\n+\n+    # Check if the global rcParams is being used instead\n+    assert plt.rcParams[\"text.antialiased\"] is True\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "num_sent_chars": 2735260,
  "num_received_chars": 104151,
  "elapsed_time": 1440.358182668686,
  "lint_repair_count": 13,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}