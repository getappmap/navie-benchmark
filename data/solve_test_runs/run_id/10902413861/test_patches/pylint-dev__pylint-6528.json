{
  "edit_test_file": "tests/checkers/unittest_similar.py",
  "test_patch": "diff --git a/tests/checkers/unittest_recursive_ignore.py b/tests/checkers/unittest_recursive_ignore.py\nnew file mode 100644\nindex 0000000..9253d46\n--- /dev/null\n+++ b/tests/checkers/unittest_recursive_ignore.py\n@@ -0,0 +1,22 @@\n+import os\n+import tempfile\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.lint import Run\n+import pytest\n+\n+def test_recursive_ignore() -> None:\n+    with tempfile.TemporaryDirectory() as tempdir:\n+        # Create directories and files\n+        os.makedirs(os.path.join(tempdir, '.a'), exist_ok=True)\n+        with open(os.path.join(tempdir, '.a', 'foo.py'), 'w') as f:\n+            f.write('import re\\n')\n+        with open(os.path.join(tempdir, 'bar.py'), 'w') as f:\n+            f.write('import re\\n')\n+\n+        # Capture the output\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            Run(['--recursive=y', tempdir])\n+        assert ex.value.code == 20  # Expecting a non-zero exit code due to the issue\n+        assert \".a/foo.py\" in output.getvalue()  # Check that foo.py is not ignored\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/checkers/unittest_recursive_ignore_inverted.py b/tests/checkers/unittest_recursive_ignore_inverted.py\nnew file mode 100644\nindex 0000000..11036a5\n--- /dev/null\n+++ b/tests/checkers/unittest_recursive_ignore_inverted.py\n@@ -0,0 +1,24 @@\n+import os\n+import tempfile\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.lint import Run\n+import pytest\n+\n+def test_recursive_ignore() -> None:\n+    with tempfile.TemporaryDirectory() as tempdir:\n+        # Create directories and files\n+        os.makedirs(os.path.join(tempdir, '.a'), exist_ok=True)\n+        with open(os.path.join(tempdir, '.a', 'foo.py'), 'w') as f:\n+            f.write('import re\\n')\n+        with open(os.path.join(tempdir, 'bar.py'), 'w') as f:\n+            f.write('import re\\n')\n+\n+        # Capture the output\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            Run(['--recursive=y', tempdir])\n+        \n+        # Altered assertion to make the test fail when the bug is observed\n+        assert ex.value.code != 20, \"__BUG__HERE__\"  # Expecting a zero exit code if the issue is fixed\n+        assert \".a/foo.py\" not in output.getvalue(), \"__BUG__HERE__\"  # Check that foo.py is ignored\n\\ No newline at end of file\n"
}