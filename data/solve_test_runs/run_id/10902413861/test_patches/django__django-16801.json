{
  "edit_test_file": "tests/signals/tests.py",
  "test_patch": "diff --git a/tests/signals/test_improve_imagefield_performance.py b/tests/signals/test_improve_imagefield_performance.py\nnew file mode 100644\nindex 0000000..7b43982\n--- /dev/null\n+++ b/tests/signals/test_improve_imagefield_performance.py\n@@ -0,0 +1,19 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.signals import post_init\n+\n+class TestImageFieldPerformance(TestCase):\n+    def test_imagefield_post_init_signal_handler(self):\n+        class TestModel(models.Model):\n+            image = models.ImageField()\n+\n+        # Check if the post_init signal handler is connected\n+        handlers_before = len(post_init.receivers)\n+        instance = TestModel()\n+        handlers_after = len(post_init.receivers)\n+\n+        # The number of handlers should not increase if width_field and height_field are not set\n+        self.assertEqual(\n+            handlers_before, handlers_after,\n+            \"ImageField unnecessarily adds a post_init signal handler to the model\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/signals/test_improve_imagefield_performance_inverted.py b/tests/signals/test_improve_imagefield_performance_inverted.py\nnew file mode 100644\nindex 0000000..ba3f91f\n--- /dev/null\n+++ b/tests/signals/test_improve_imagefield_performance_inverted.py\n@@ -0,0 +1,20 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.signals import post_init\n+\n+class TestImageFieldPerformance(TestCase):\n+    def test_imagefield_post_init_signal_handler(self):\n+        class TestModel(models.Model):\n+            image = models.ImageField()\n+\n+        # Check if the post_init signal handler is connected\n+        handlers_before = len(post_init.receivers)\n+        instance = TestModel()\n+        handlers_after = len(post_init.receivers)\n+\n+        # The number of handlers should increase if width_field and height_field are not set\n+        # This test should now fail if the bug is present\n+        self.assertNotEqual(\n+            handlers_before, handlers_after,\n+            \"__BUG__HERE__\"\n+        )\n\\ No newline at end of file\n"
}