{
  "edit_test_file": "tests/constraints/tests.py",
  "test_patch": "diff --git a/tests/constraints/test_base_constraint_validation.py b/tests/constraints/test_base_constraint_validation.py\nnew file mode 100644\nindex 0000000..5aacb92\n--- /dev/null\n+++ b/tests/constraints/test_base_constraint_validation.py\n@@ -0,0 +1,18 @@\n+from unittest import TestCase\n+from django.core.exceptions import ValidationError\n+from django.db.models.constraints import BaseConstraint\n+\n+class BaseConstraintValidationTest(TestCase):\n+    def test_custom_violation_error_code(self):\n+        class CustomConstraint(BaseConstraint):\n+            def validate(self, model, instance, **kwargs):\n+                raise ValidationError(\n+                    \"Custom error message\",\n+                    code=\"custom_code\"\n+                )\n+\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        \n+        self.assertEqual(cm.exception.code, \"custom_code\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/constraints/test_base_constraint_validation_inverted.py b/tests/constraints/test_base_constraint_validation_inverted.py\nnew file mode 100644\nindex 0000000..8f7244b\n--- /dev/null\n+++ b/tests/constraints/test_base_constraint_validation_inverted.py\n@@ -0,0 +1,19 @@\n+from unittest import TestCase\n+from django.core.exceptions import ValidationError\n+from django.db.models.constraints import BaseConstraint\n+\n+class BaseConstraintValidationTest(TestCase):\n+    def test_custom_violation_error_code(self):\n+        class CustomConstraint(BaseConstraint):\n+            def validate(self, model, instance, **kwargs):\n+                raise ValidationError(\n+                    \"Custom error message\",\n+                    code=\"custom_code\"\n+                )\n+\n+        constraint = CustomConstraint(name=\"custom_constraint\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(None, None)\n+        \n+        # Altered the test to fail when the issue is observed\n+        self.assertNotEqual(cm.exception.code, \"custom_code\", \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}