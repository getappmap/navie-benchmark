{
  "edit_test_file": "tests/test_util_docutils.py",
  "test_patch": "diff --git a/tests/test_inherited_mocked_classes_documentation_issue.py b/tests/test_inherited_mocked_classes_documentation_issue.py\nnew file mode 100644\nindex 0000000..eafb348\n--- /dev/null\n+++ b/tests/test_inherited_mocked_classes_documentation_issue.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _MockObject, ismock\n+\n+class TestInheritedMockedClassesDocumentationIssue(unittest.TestCase):\n+    def test_inherited_mocked_class_documentation(self):\n+        # Create a mock class\n+        class MockBaseClass(_MockObject):\n+            pass\n+\n+        # Create a class that inherits from the mock class\n+        class InheritedClass(MockBaseClass):\n+            pass\n+\n+        # Check if the InheritedClass is correctly identified as not mocked\n+        self.assertFalse(ismock(InheritedClass), \"Inherited class should not be identified as mocked\")\n+\n+        # Check if the base class is correctly identified in the documentation\n+        # This simulates the issue where the base class is not fully documented\n+        base_class_doc = InheritedClass.__bases__[0].__name__\n+        self.assertEqual(base_class_doc, \"MockBaseClass\", f\"Expected base class name to be 'MockBaseClass', got '{base_class_doc}'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_inherited_mocked_classes_documentation_issue_inverted.py b/tests/test_inherited_mocked_classes_documentation_issue_inverted.py\nnew file mode 100644\nindex 0000000..8de3e46\n--- /dev/null\n+++ b/tests/test_inherited_mocked_classes_documentation_issue_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _MockObject, ismock\n+\n+class TestInheritedMockedClassesDocumentationIssue(unittest.TestCase):\n+    def test_inherited_mocked_class_documentation(self):\n+        # Create a mock class\n+        class MockBaseClass(_MockObject):\n+            pass\n+\n+        # Create a class that inherits from the mock class\n+        class InheritedClass(MockBaseClass):\n+            pass\n+\n+        # Check if the InheritedClass is correctly identified as not mocked\n+        # This should now fail if the class is incorrectly identified as not mocked\n+        self.assertTrue(ismock(InheritedClass), \"__BUG__HERE__\")\n+\n+        # Check if the base class is correctly identified in the documentation\n+        # This simulates the issue where the base class is not fully documented\n+        base_class_doc = InheritedClass.__bases__[0].__name__\n+        self.assertEqual(base_class_doc, \"MockBaseClass\", f\"Expected base class name to be 'MockBaseClass', got '{base_class_doc}'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}