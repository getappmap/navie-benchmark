{
  "edit_test_file": "tests/model_fields/test_foreignkey.py",
  "test_patch": "diff --git a/tests/model_fields/test_autoreload_module.py b/tests/model_fields/test_autoreload_module.py\nnew file mode 100644\nindex 0000000..7fcda48\n--- /dev/null\n+++ b/tests/model_fields/test_autoreload_module.py\n@@ -0,0 +1,16 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadModule(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'custom_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_python_m_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue where autoreload does not handle\n+        `python -m custom_module runserver` correctly.\n+        \"\"\"\n+        with self.assertRaises(RuntimeError) as cm:\n+            autoreload.get_child_arguments()\n+        self.assertIn('Script -m does not exist.', str(cm.exception))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_autoreload_module_inverted.py b/tests/model_fields/test_autoreload_module_inverted.py\nnew file mode 100644\nindex 0000000..463902a\n--- /dev/null\n+++ b/tests/model_fields/test_autoreload_module_inverted.py\n@@ -0,0 +1,16 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadModule(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'custom_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_python_m_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue where autoreload does not handle\n+        `python -m custom_module runserver` correctly.\n+        \"\"\"\n+        with self.assertRaises(RuntimeError) as cm:\n+            autoreload.get_child_arguments()\n+        self.assertIn('__BUG__HERE__', str(cm.exception))\n\\ No newline at end of file\n"
}