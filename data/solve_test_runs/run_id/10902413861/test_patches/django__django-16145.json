{
  "edit_test_file": "tests/admin_scripts/tests.py",
  "test_patch": "diff --git a/tests/admin_scripts/test_runserver_output_format.py b/tests/admin_scripts/test_runserver_output_format.py\nnew file mode 100644\nindex 0000000..e1317b8\n--- /dev/null\n+++ b/tests/admin_scripts/test_runserver_output_format.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n+class RunserverOutputFormatTest(unittest.TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.cmd = RunserverCommand(stdout=self.output)\n+\n+    def test_runserver_zero_address(self):\n+        \"\"\"\n+        Test that running `runserver 0:8000` outputs the incorrect address.\n+        \"\"\"\n+        with mock.patch('django.core.management.commands.runserver.run'):\n+            call_command(self.cmd, addrport='0:8000', use_reloader=False)\n+        self.assertIn(\"Starting development server at http://0:8000/\", self.output.getvalue())\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/admin_scripts/test_runserver_output_format_inverted.py b/tests/admin_scripts/test_runserver_output_format_inverted.py\nnew file mode 100644\nindex 0000000..3819c3d\n--- /dev/null\n+++ b/tests/admin_scripts/test_runserver_output_format_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from io import StringIO\n+from unittest import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n+class RunserverOutputFormatTest(unittest.TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+        self.cmd = RunserverCommand(stdout=self.output)\n+\n+    def test_runserver_zero_address(self):\n+        \"\"\"\n+        Test that running `runserver 0:8000` outputs the incorrect address.\n+        \"\"\"\n+        with mock.patch('django.core.management.commands.runserver.run'):\n+            call_command(self.cmd, addrport='0:8000', use_reloader=False)\n+        # The test should fail if the incorrect address is output\n+        if \"Starting development server at http://0:8000/\" in self.output.getvalue():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}