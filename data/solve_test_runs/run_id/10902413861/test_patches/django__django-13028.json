{
  "edit_test_file": "tests/foreign_object/tests.py",
  "test_patch": "diff --git a/tests/foreign_object/test_not_supported_error_filterable.py b/tests/foreign_object/test_not_supported_error_filterable.py\nnew file mode 100644\nindex 0000000..117606b\n--- /dev/null\n+++ b/tests/foreign_object/test_not_supported_error_filterable.py\n@@ -0,0 +1,38 @@\n+import datetime\n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db.utils import NotSupportedError\n+\n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+\n+    class Meta:\n+        app_label = \"foreign_object\"\n+        verbose_name = _(\"product meta data type\")\n+        verbose_name_plural = _(\"product meta data types\")\n+\n+    def __str__(self):\n+        return self.label\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField(null=False, blank=False)\n+    date_created = models.DateTimeField(null=True, default=datetime.datetime.now)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"foreign_object\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n+\n+class NotSupportedErrorFilterableTest(TestCase):\n+    def setUp(self):\n+        self.brand_metadata = ProductMetaDataType.objects.create(label=\"Brand\", filterable=False)\n+\n+    def test_filter_with_non_filterable_field_raises_error(self):\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\n\\ No newline at end of file\n",
  "inverted_patch": null
}