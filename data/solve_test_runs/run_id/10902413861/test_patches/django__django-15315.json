{
  "edit_test_file": "tests/basic/tests.py",
  "test_patch": "diff --git a/tests/basic/test_model_field_hash_immutable.py b/tests/basic/test_model_field_hash_immutable.py\nnew file mode 100644\nindex 0000000..564f2ca\n--- /dev/null\n+++ b/tests/basic/test_model_field_hash_immutable.py\n@@ -0,0 +1,13 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class ModelFieldHashImmutableTest(SimpleTestCase):\n+    def test_field_hash_immutable(self):\n+        f = models.CharField(max_length=200)\n+        d = {f: 1}\n+        \n+        class Book(models.Model):\n+            title = f\n+        \n+        # The test should pass if the issue is observed, i.e., the field is not in the dictionary\n+        self.assertNotIn(f, d)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/basic/test_model_field_hash_immutable_inverted.py b/tests/basic/test_model_field_hash_immutable_inverted.py\nnew file mode 100644\nindex 0000000..d78ca9c\n--- /dev/null\n+++ b/tests/basic/test_model_field_hash_immutable_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class ModelFieldHashImmutableTest(SimpleTestCase):\n+    def test_field_hash_immutable(self):\n+        f = models.CharField(max_length=200)\n+        d = {f: 1}\n+        \n+        class Book(models.Model):\n+            title = f\n+        \n+        # The test should fail if the issue is observed, i.e., the field is not in the dictionary\n+        if f not in d:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}