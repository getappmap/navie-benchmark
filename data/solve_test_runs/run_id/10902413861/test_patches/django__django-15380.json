{
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_rename_model_field_crash.py b/tests/migrations/test_migrations_rename_model_field_crash.py\nnew file mode 100644\nindex 0000000..8864c7a\n--- /dev/null\n+++ b/tests/migrations/test_migrations_rename_model_field_crash.py\n@@ -0,0 +1,49 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+\n+class MigrationAutodetectorRenameModelFieldTest(unittest.TestCase):\n+    def test_rename_model_and_field_crash(self):\n+        \"\"\"\n+        Test case to reproduce the issue where the migration autodetector crashes\n+        when renaming a model and field in a single step.\n+        \"\"\"\n+        # Initial state with the original model and field\n+        before = [\n+            ModelState('test_one', 'MyModel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('old_field', models.CharField(max_length=100)),\n+            ]),\n+        ]\n+\n+        # State after renaming the model and field\n+        after = [\n+            ModelState('test_one', 'MyModel2', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('new_field', models.CharField(max_length=100)),\n+            ]),\n+        ]\n+\n+        # Create project states\n+        before_state = ProjectState()\n+        after_state = ProjectState()\n+        for model_state in before:\n+            before_state.add_model(model_state)\n+        for model_state in after:\n+            after_state.add_model(model_state)\n+\n+        # Initialize the autodetector\n+        autodetector = MigrationAutodetector(\n+            before_state,\n+            after_state,\n+            MigrationQuestioner({'ask_rename': True, 'ask_rename_model': True})\n+        )\n+\n+        # Assert that the KeyError is raised\n+        with self.assertRaises(KeyError):\n+            autodetector._detect_changes()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": null
}