{
  "edit_test_file": "xarray/tests/test_dataarray.py",
  "test_patch": "diff --git a/xarray/tests/test_dataarray_quantile.py b/xarray/tests/test_dataarray_quantile.py\nnew file mode 100644\nindex 0000000..bbc96e6\n--- /dev/null\n+++ b/xarray/tests/test_dataarray_quantile.py\n@@ -0,0 +1,11 @@\n+import xarray as xr\n+import unittest\n+\n+class TestDataArrayQuantile(unittest.TestCase):\n+    def test_quantile_keep_attrs(self):\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        self.assertEqual(out.attrs, {})\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_dataarray_quantile_inverted.py b/xarray/tests/test_dataarray_quantile_inverted.py\nnew file mode 100644\nindex 0000000..7633c1d\n--- /dev/null\n+++ b/xarray/tests/test_dataarray_quantile_inverted.py\n@@ -0,0 +1,13 @@\n+import xarray as xr\n+import unittest\n+\n+class TestDataArrayQuantile(unittest.TestCase):\n+    def test_quantile_keep_attrs(self):\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        # The test should now fail if the attributes are not kept\n+        if out.attrs != {'units': 'K'}:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}