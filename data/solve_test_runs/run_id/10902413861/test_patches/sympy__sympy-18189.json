{
  "edit_test_file": "sympy/solvers/tests/test_diophantine.py",
  "test_patch": "diff --git a/sympy/solvers/tests/test_diophantine_symorder.py b/sympy/solvers/tests/test_diophantine_symorder.py\nnew file mode 100644\nindex 0000000..c8276e1\n--- /dev/null\n+++ b/sympy/solvers/tests/test_diophantine_symorder.py\n@@ -0,0 +1,12 @@\n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+def test_diophantine_syms_order_issue():\n+    m, n = symbols('m n', integer=True)\n+    # Test with syms order (m, n)\n+    result_mn = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True)\n+    assert result_mn == {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Test with syms order (n, m)\n+    result_nm = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True)\n+    assert result_nm == {(3, 2)}\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/solvers/tests/test_diophantine_symorder_inverted.py b/sympy/solvers/tests/test_diophantine_symorder_inverted.py\nnew file mode 100644\nindex 0000000..bf33970\n--- /dev/null\n+++ b/sympy/solvers/tests/test_diophantine_symorder_inverted.py\n@@ -0,0 +1,13 @@\n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+def test_diophantine_syms_order_issue():\n+    m, n = symbols('m n', integer=True)\n+    # Test with syms order (m, n)\n+    result_mn = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True)\n+    assert result_mn == {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Test with syms order (n, m)\n+    result_nm = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True)\n+    if result_nm != {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}