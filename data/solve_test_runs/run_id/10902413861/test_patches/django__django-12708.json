{
  "edit_test_file": "tests/schema/tests.py",
  "test_patch": "diff --git a/tests/schema/test_migration_issue_unique_index.py b/tests/schema/test_migration_issue_unique_index.py\nnew file mode 100644\nindex 0000000..66bb867\n--- /dev/null\n+++ b/tests/schema/test_migration_issue_unique_index.py\n@@ -0,0 +1,43 @@\n+import unittest\n+from django.db import models, connection, IntegrityError\n+from django.test import TransactionTestCase\n+\n+class TestMigrationIssueUniqueIndex(TransactionTestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where deleting an index_together\n+    fails if there is a unique_together on the same fields.\n+    \"\"\"\n+\n+    available_apps = []\n+\n+    def setUp(self):\n+        class TestModel(models.Model):\n+            field1 = models.CharField(max_length=255)\n+            field2 = models.CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = 'schema'\n+                unique_together = (('field1', 'field2'),)\n+                index_together = (('field1', 'field2'),)\n+\n+        self.TestModel = TestModel\n+        with connection.schema_editor() as editor:\n+            editor.create_model(self.TestModel)\n+\n+    def tearDown(self):\n+        with connection.schema_editor() as editor:\n+            editor.delete_model(self.TestModel)\n+\n+    def test_delete_index_together_with_unique_together(self):\n+        \"\"\"\n+        Attempt to delete index_together when unique_together is present\n+        on the same fields, expecting a ValueError.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            with connection.schema_editor() as editor:\n+                editor.alter_index_together(self.TestModel, [('field1', 'field2')], [])\n+\n+        self.assertIn(\"Found wrong number (2) of constraints\", str(cm.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/schema/test_migration_issue_unique_index_inverted.py b/tests/schema/test_migration_issue_unique_index_inverted.py\nnew file mode 100644\nindex 0000000..cdce2c5\n--- /dev/null\n+++ b/tests/schema/test_migration_issue_unique_index_inverted.py\n@@ -0,0 +1,45 @@\n+import unittest\n+from django.db import models, connection, IntegrityError\n+from django.test import TransactionTestCase\n+\n+class TestMigrationIssueUniqueIndex(TransactionTestCase):\n+    \"\"\"\n+    Test case to reproduce the issue where deleting an index_together\n+    fails if there is a unique_together on the same fields.\n+    \"\"\"\n+\n+    available_apps = []\n+\n+    def setUp(self):\n+        class TestModel(models.Model):\n+            field1 = models.CharField(max_length=255)\n+            field2 = models.CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = 'schema'\n+                unique_together = (('field1', 'field2'),)\n+                index_together = (('field1', 'field2'),)\n+\n+        self.TestModel = TestModel\n+        with connection.schema_editor() as editor:\n+            editor.create_model(self.TestModel)\n+\n+    def tearDown(self):\n+        with connection.schema_editor() as editor:\n+            editor.delete_model(self.TestModel)\n+\n+    def test_delete_index_together_with_unique_together(self):\n+        \"\"\"\n+        Attempt to delete index_together when unique_together is present\n+        on the same fields, expecting a ValueError.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            with connection.schema_editor() as editor:\n+                editor.alter_index_together(self.TestModel, [('field1', 'field2')], [])\n+\n+        # Change the assertion to raise the specific error message \"__BUG__HERE__\"\n+        if \"Found wrong number (2) of constraints\" in str(cm.exception):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}