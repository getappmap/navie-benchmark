{
  "edit_test_file": "tests/model_fields/test_imagefield.py",
  "test_patch": "diff --git a/tests/model_fields/test_post_init_signal.py b/tests/model_fields/test_post_init_signal.py\nnew file mode 100644\nindex 0000000..bbc2e0e\n--- /dev/null\n+++ b/tests/model_fields/test_post_init_signal.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from django.db import models\n+from django.db.models.signals import post_init\n+from django.test import TestCase\n+\n+class TestImageFieldModel(models.Model):\n+    image = models.ImageField()\n+\n+class PostInitSignalTest(TestCase):\n+    def test_post_init_signal_handler(self):\n+        # Track if the post_init signal handler is called\n+        signal_called = []\n+\n+        def post_init_handler(sender, instance, **kwargs):\n+            signal_called.append(True)\n+\n+        # Connect the post_init signal to the handler\n+        post_init.connect(post_init_handler, sender=TestImageFieldModel)\n+\n+        # Create an instance of the model to trigger the post_init signal\n+        instance = TestImageFieldModel()\n+\n+        # Assert that the post_init signal handler was called\n+        self.assertTrue(signal_called)\n+\n+        # Clean up by disconnecting the signal\n+        post_init.disconnect(post_init_handler, sender=TestImageFieldModel)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_post_init_signal_inverted.py b/tests/model_fields/test_post_init_signal_inverted.py\nnew file mode 100644\nindex 0000000..4831c12\n--- /dev/null\n+++ b/tests/model_fields/test_post_init_signal_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.db import models\n+from django.db.models.signals import post_init\n+from django.test import TestCase\n+\n+class TestImageFieldModel(models.Model):\n+    image = models.ImageField()\n+\n+class PostInitSignalTest(TestCase):\n+    def test_post_init_signal_handler(self):\n+        # Track if the post_init signal handler is called\n+        signal_called = []\n+\n+        def post_init_handler(sender, instance, **kwargs):\n+            signal_called.append(True)\n+\n+        # Connect the post_init signal to the handler\n+        post_init.connect(post_init_handler, sender=TestImageFieldModel)\n+\n+        # Create an instance of the model to trigger the post_init signal\n+        instance = TestImageFieldModel()\n+\n+        # Assert that the post_init signal handler was NOT called\n+        if signal_called:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Clean up by disconnecting the signal\n+        post_init.disconnect(post_init_handler, sender=TestImageFieldModel)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}