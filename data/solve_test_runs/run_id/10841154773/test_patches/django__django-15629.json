{
  "edit_test_file": "tests/invalid_models_tests/test_ordinary_fields.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_foreignkey_collation_propagation.py b/tests/invalid_models_tests/test_foreignkey_collation_propagation.py\nnew file mode 100644\nindex 0000000..bd56fb8\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_foreignkey_collation_propagation.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from django.db import connection, models, IntegrityError\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class Account(models.Model):\n+    id = models.CharField(primary_key=True, max_length=22, db_collation='utf8_bin')\n+\n+class Address(models.Model):\n+    id = models.CharField(primary_key=True, max_length=22, db_collation='utf8_bin')\n+    account = models.OneToOneField(Account, on_delete=models.CASCADE)\n+\n+class Profile(models.Model):\n+    id = models.CharField(primary_key=True, max_length=22, db_collation='utf8_bin')\n+    account = models.ForeignKey(Account, null=True, blank=True, on_delete=models.CASCADE)\n+\n+@unittest.skipUnless(connection.vendor == \"mysql\", \"MySQL tests.\")\n+class TestForeignKeyCollationPropagation(TestCase):\n+    def test_foreign_key_collation_propagation(self):\n+        with self.assertRaises(IntegrityError):\n+            with connection.schema_editor() as schema_editor:\n+                schema_editor.create_model(Account)\n+                schema_editor.create_model(Address)\n+                schema_editor.create_model(Profile)\n\\ No newline at end of file\n",
  "inverted_patch": null
}