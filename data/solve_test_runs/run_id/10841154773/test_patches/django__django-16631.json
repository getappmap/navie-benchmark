{
  "edit_test_file": "tests/auth_tests/test_tokens.py",
  "test_patch": "diff --git a/tests/auth_tests/test_secret_key_fallbacks.py b/tests/auth_tests/test_secret_key_fallbacks.py\nnew file mode 100644\nindex 0000000..bfb206e\n--- /dev/null\n+++ b/tests/auth_tests/test_secret_key_fallbacks.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.contrib.sessions.middleware import SessionMiddleware\n+from django.test.client import RequestFactory\n+\n+User = get_user_model()\n+\n+class SecretKeyFallbacksSessionTest(TestCase):\n+    @override_settings(\n+        SECRET_KEY=\"newsecret\",\n+        SECRET_KEY_FALLBACKS=[\"oldsecret\"],\n+    )\n+    def test_secret_key_fallbacks_not_used_for_sessions(self):\n+        # Create a user and simulate a login\n+        user = User.objects.create_user(\"sessiontestuser\", \"test@example.com\", \"testpw\")\n+        request = RequestFactory().get('/')\n+        middleware = SessionMiddleware(lambda req: None)\n+        middleware.process_request(request)\n+        request.session.save()\n+\n+        # Simulate setting the session auth hash with the old secret\n+        token_generator = PasswordResetTokenGenerator()\n+        token_generator.secret = \"oldsecret\"\n+        session_auth_hash = token_generator.make_token(user)\n+        request.session['HASH_SESSION_KEY'] = session_auth_hash\n+\n+        # Rotate the secret key\n+        with self.settings(SECRET_KEY=\"newsecret\", SECRET_KEY_FALLBACKS=[\"oldsecret\"]):\n+            # Simulate a request with the new secret key\n+            request = RequestFactory().get('/')\n+            middleware.process_request(request)\n+            request.session.save()\n+\n+            # Check if the session is still valid\n+            self.assertNotEqual(\n+                request.session.get('HASH_SESSION_KEY'),\n+                session_auth_hash,\n+                \"Session should be invalidated due to secret key rotation.\"\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/auth_tests/test_secret_key_fallbacks_inverted.py b/tests/auth_tests/test_secret_key_fallbacks_inverted.py\nnew file mode 100644\nindex 0000000..cadd658\n--- /dev/null\n+++ b/tests/auth_tests/test_secret_key_fallbacks_inverted.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.contrib.sessions.middleware import SessionMiddleware\n+from django.test.client import RequestFactory\n+\n+User = get_user_model()\n+\n+class SecretKeyFallbacksSessionTest(TestCase):\n+    @override_settings(\n+        SECRET_KEY=\"newsecret\",\n+        SECRET_KEY_FALLBACKS=[\"oldsecret\"],\n+    )\n+    def test_secret_key_fallbacks_not_used_for_sessions(self):\n+        # Create a user and simulate a login\n+        user = User.objects.create_user(\"sessiontestuser\", \"test@example.com\", \"testpw\")\n+        request = RequestFactory().get('/')\n+        middleware = SessionMiddleware(lambda req: None)\n+        middleware.process_request(request)\n+        request.session.save()\n+\n+        # Simulate setting the session auth hash with the old secret\n+        token_generator = PasswordResetTokenGenerator()\n+        token_generator.secret = \"oldsecret\"\n+        session_auth_hash = token_generator.make_token(user)\n+        request.session['HASH_SESSION_KEY'] = session_auth_hash\n+\n+        # Rotate the secret key\n+        with self.settings(SECRET_KEY=\"newsecret\", SECRET_KEY_FALLBACKS=[\"oldsecret\"]):\n+            # Simulate a request with the new secret key\n+            request = RequestFactory().get('/')\n+            middleware.process_request(request)\n+            request.session.save()\n+\n+            # Check if the session is still valid\n+            self.assertEqual(\n+                request.session.get('HASH_SESSION_KEY'),\n+                session_auth_hash,\n+                \"__BUG__HERE__\"\n+            )\n\\ No newline at end of file\n"
}