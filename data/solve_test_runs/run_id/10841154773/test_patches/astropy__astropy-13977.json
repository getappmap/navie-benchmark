{
  "edit_test_file": "astropy/utils/masked/tests/test_functions.py",
  "test_patch": "diff --git a/astropy/utils/masked/tests/test_array_ufunc.py b/astropy/utils/masked/tests/test_array_ufunc.py\nnew file mode 100644\nindex 0000000..332d9db\n--- /dev/null\n+++ b/astropy/utils/masked/tests/test_array_ufunc.py\n@@ -0,0 +1,27 @@\n+import dataclasses\n+import numpy as np\n+import pytest\n+import astropy.units as u\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+def test_quantity_array_ufunc_not_implemented():\n+    with pytest.raises(ValueError, match=\"Value not scalar compatible or convertible to an int, float, or complex array\"):\n+        (1 * u.m) + DuckArray(1 * u.mm)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/astropy/utils/masked/tests/test_array_ufunc_inverted.py b/astropy/utils/masked/tests/test_array_ufunc_inverted.py\nnew file mode 100644\nindex 0000000..fa85569\n--- /dev/null\n+++ b/astropy/utils/masked/tests/test_array_ufunc_inverted.py\n@@ -0,0 +1,27 @@\n+import dataclasses\n+import numpy as np\n+import pytest\n+import astropy.units as u\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+\n+        return NotImplemented\n+\n+def test_quantity_array_ufunc_not_implemented():\n+    with pytest.raises(ValueError, match=\"__BUG__HERE__\"):\n+        (1 * u.m) + DuckArray(1 * u.mm)\n\\ No newline at end of file\n"
}