{
  "edit_test_file": "tests/custom_lookups/tests.py",
  "test_patch": "diff --git a/tests/custom_lookups/test_year_lookup_issue.py b/tests/custom_lookups/test_year_lookup_issue.py\nnew file mode 100644\nindex 0000000..02d9262\n--- /dev/null\n+++ b/tests/custom_lookups/test_year_lookup_issue.py\n@@ -0,0 +1,20 @@\n+import datetime\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models.functions import ExtractIsoYear\n+\n+class DTModel(models.Model):\n+    start_date = models.DateField()\n+\n+class YearLookupIssueTest(TestCase):\n+    def setUp(self):\n+        # Create test data\n+        DTModel.objects.create(start_date=datetime.date(2020, 1, 1))\n+        DTModel.objects.create(start_date=datetime.date(2020, 12, 31))\n+        DTModel.objects.create(start_date=datetime.date(2019, 12, 31))\n+\n+    def test_iso_year_lookup_issue(self):\n+        # This should use EXTRACT('isoyear' FROM ...) but instead uses BETWEEN\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        query_str = str(qs.query)\n+        self.assertIn('BETWEEN 2020-01-01 AND 2020-12-31', query_str)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/custom_lookups/test_year_lookup_issue_inverted.py b/tests/custom_lookups/test_year_lookup_issue_inverted.py\nnew file mode 100644\nindex 0000000..edde68f\n--- /dev/null\n+++ b/tests/custom_lookups/test_year_lookup_issue_inverted.py\n@@ -0,0 +1,22 @@\n+import datetime\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models.functions import ExtractIsoYear\n+\n+class DTModel(models.Model):\n+    start_date = models.DateField()\n+\n+class YearLookupIssueTest(TestCase):\n+    def setUp(self):\n+        # Create test data\n+        DTModel.objects.create(start_date=datetime.date(2020, 1, 1))\n+        DTModel.objects.create(start_date=datetime.date(2020, 12, 31))\n+        DTModel.objects.create(start_date=datetime.date(2019, 12, 31))\n+\n+    def test_iso_year_lookup_issue(self):\n+        # This should use EXTRACT('isoyear' FROM ...) but instead uses BETWEEN\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        query_str = str(qs.query)\n+        # Alter the test to fail when the issue is observed\n+        if 'BETWEEN 2020-01-01 AND 2020-12-31' in query_str:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}