{
  "edit_test_file": "tests/defer/tests.py",
  "test_patch": "diff --git a/tests/defer/test_proxy_model_query_crash.py b/tests/defer/test_proxy_model_query_crash.py\nnew file mode 100644\nindex 0000000..78ba358\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/defer/test_proxy_model_query_crash_inverted.py b/tests/defer/test_proxy_model_query_crash_inverted.py\nnew file mode 100644\nindex 0000000..ec6866b\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash_inverted.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}