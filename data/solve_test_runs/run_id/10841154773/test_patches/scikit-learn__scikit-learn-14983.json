{
  "edit_test_file": "sklearn/linear_model/tests/test_coordinate_descent.py",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_repeated_kfold_repr.py b/sklearn/linear_model/tests/test_repeated_kfold_repr.py\nnew file mode 100644\nindex 0000000..d188c4c\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_repeated_kfold_repr.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestRepeatedKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        self.assertNotEqual(repr(rkf), \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        self.assertNotEqual(repr(rskf), \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/linear_model/tests/test_repeated_kfold_repr_inverted.py b/sklearn/linear_model/tests/test_repeated_kfold_repr_inverted.py\nnew file mode 100644\nindex 0000000..7511df0\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_repeated_kfold_repr_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestRepeatedKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        # The test should now fail if the bug is present, i.e., if the repr is incorrect\n+        self.assertEqual(repr(rkf), \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\", \"__BUG__HERE__\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        # The test should now fail if the bug is present, i.e., if the repr is incorrect\n+        self.assertEqual(repr(rskf), \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\", \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}