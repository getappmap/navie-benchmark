{
  "edit_test_file": "sklearn/manifold/tests/test_isomap.py",
  "test_patch": "diff --git a/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py\nnew file mode 100644\nindex 0000000..1a9dcdd\n--- /dev/null\n+++ b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from numpy.testing import assert_array_equal\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    # Create a simple dataset\n+    X = np.array([[1, 2], [3, 4], [5, 6]])\n+    y = np.array([1, 2, 3])\n+\n+    # Create a copy of X to check if it gets modified\n+    X_original = X.copy()\n+\n+    # Initialize LassoLarsIC with copy_X=False\n+    lasso_lars_ic = LassoLarsIC(copy_X=False)\n+\n+    # Fit the model\n+    lasso_lars_ic.fit(X, y)\n+\n+    # Check if X has been modified\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified despite copy_X=False\")\n+\n+    # Now fit with copy_X=True and check if X is still unmodified\n+    lasso_lars_ic.fit(X, y, copy_X=True)\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified with copy_X=True\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py\nnew file mode 100644\nindex 0000000..d0d13dd\n--- /dev/null\n+++ b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from numpy.testing import assert_array_equal, assert_raises\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    # Create a simple dataset\n+    X = np.array([[1, 2], [3, 4], [5, 6]])\n+    y = np.array([1, 2, 3])\n+\n+    # Create a copy of X to check if it gets modified\n+    X_original = X.copy()\n+\n+    # Initialize LassoLarsIC with copy_X=False\n+    lasso_lars_ic = LassoLarsIC(copy_X=False)\n+\n+    # Fit the model\n+    lasso_lars_ic.fit(X, y)\n+\n+    # Check if X has been modified\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified despite copy_X=False\")\n+\n+    # Now fit with copy_X=True and check if X is still unmodified\n+    lasso_lars_ic.fit(X, y, copy_X=True)\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified with copy_X=True\")\n+\n+    # Test for the bug: Fit with copy_X=False and expect X to be modified\n+    lasso_lars_ic.fit(X, y, copy_X=False)\n+    with assert_raises(AssertionError, match=\"__BUG__HERE__\"):\n+        assert_array_equal(X, X_original, err_msg=\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}