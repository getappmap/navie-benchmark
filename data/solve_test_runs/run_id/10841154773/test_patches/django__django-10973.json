{
  "edit_test_file": "tests/queries/test_explain.py",
  "test_patch": "diff --git a/tests/queries/test_postgres_subprocess.py b/tests/queries/test_postgres_subprocess.py\nnew file mode 100644\nindex 0000000..0b838d9\n--- /dev/null\n+++ b/tests/queries/test_postgres_subprocess.py\n@@ -0,0 +1,31 @@\n+import os\n+import unittest\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class PostgresSubprocessTest(unittest.TestCase):\n+    def test_pgpassword_environment_variable(self):\n+        # Simulate database connection parameters\n+        dbinfo = {\n+            'host': 'localhost',\n+            'port': '5432',\n+            'database': 'test_db',\n+            'user': 'test_user',\n+            'password': 'test_password'\n+        }\n+\n+        # Set the PGPASSWORD environment variable\n+        os.environ['PGPASSWORD'] = dbinfo['password']\n+\n+        # Attempt to run the shell command\n+        with self.assertRaises(FileNotFoundError) as context:\n+            DatabaseClient.runshell_db(dbinfo)\n+\n+        # Check if the error is due to missing 'psql' executable\n+        self.assertIn('No such file or directory', str(context.exception))\n+        self.assertIn('psql', str(context.exception))\n+\n+        # Clean up the environment variable\n+        del os.environ['PGPASSWORD']\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": null
}