{
  "edit_test_file": "tests/model_fields/test_datetimefield.py",
  "test_patch": "diff --git a/tests/model_fields/test_timezone_database_settings.py b/tests/model_fields/test_timezone_database_settings.py\nnew file mode 100644\nindex 0000000..d51a0e2\n--- /dev/null\n+++ b/tests/model_fields/test_timezone_database_settings.py\n@@ -0,0 +1,39 @@\n+import datetime\n+\n+from django.test import TestCase, override_settings\n+from django.utils import timezone\n+\n+from .models import DateTimeModel\n+\n+\n+class TimeZoneDatabaseSettingsTests(TestCase):\n+    databases = {'default', 'other'}\n+\n+    @override_settings(USE_TZ=True, TIME_ZONE='Europe/Paris')\n+    def test_date_lookup_ignores_database_timezone(self):\n+        \"\"\"\n+        The date lookup should respect the database's TIME_ZONE setting instead of \n+        always converting from UTC.\n+        \"\"\"\n+        # Create a datetime in Europe/Paris timezone\n+        dt = timezone.make_aware(\n+            datetime.datetime(2017, 7, 6, 20, 50),\n+            timezone.get_default_timezone()\n+        )\n+\n+        # Save a model instance with this datetime\n+        model = DateTimeModel.objects.create(\n+            d=dt.date(),\n+            dt=dt,\n+            t=dt.time()\n+        )\n+\n+        # The date lookup should work since both the database and Django\n+        # are configured to use Europe/Paris timezone\n+        exists = DateTimeModel.objects.filter(\n+            dt__date=dt.date()\n+        ).exists()\n+\n+        # This should be True but fails because Django converts from UTC to Paris\n+        # instead of Paris to Paris\n+        self.assertTrue(exists)\n\\ No newline at end of file\n",
  "inverted_patch": null
}