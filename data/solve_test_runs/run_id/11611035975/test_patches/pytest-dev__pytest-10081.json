{
  "edit_test_file": "testing/test_nose.py",
  "test_patch": "diff --git a/testing/test_skip_class_teardown.py b/testing/test_skip_class_teardown.py\nnew file mode 100644\nindex 0000000..e98f394\n--- /dev/null\n+++ b/testing/test_skip_class_teardown.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from _pytest.pytester import Pytester\n+\n+\n+def test_skip_class_teardown_with_pdb(pytester: Pytester) -> None:\n+    \"\"\"Test that tearDown is incorrectly called for skipped test classes when using --pdb.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        @unittest.skip(\"hello\")\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                xxx\n+            def test_one(self):\n+                pass\n+            def tearDown(self):\n+                xxx\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--pdb\")\n+    # The test should be skipped\n+    result.stdout.fnmatch_lines([\"*s*\"])\n+    # But we should see the NameError from tearDown being incorrectly called\n+    result.stdout.fnmatch_lines([\"*NameError: name 'xxx' is not defined*\"])\n+    # And we should see PDB being triggered\n+    result.stdout.fnmatch_lines([\"*entering PDB*\"])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/test_skip_class_teardown_inverted.py b/testing/test_skip_class_teardown_inverted.py\nnew file mode 100644\nindex 0000000..287d25f\n--- /dev/null\n+++ b/testing/test_skip_class_teardown_inverted.py\n@@ -0,0 +1,43 @@\n+import unittest\n+from _pytest.pytester import Pytester\n+\n+\n+def test_skip_class_teardown_with_pdb(pytester: Pytester) -> None:\n+    \"\"\"Test that tearDown should not be called for skipped test classes when using --pdb.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TearDownTracker:\n+            tear_down_called = False\n+\n+        tracker = TearDownTracker()\n+\n+        @unittest.skip(\"hello\")\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pass\n+            \n+            def test_one(self):\n+                pass\n+            \n+            def tearDown(self):\n+                TearDownTracker.tear_down_called = True\n+                raise AssertionError(\"__BUG__HERE__\")\n+        \"\"\"\n+    )\n+    \n+    result = pytester.runpytest(\"--pdb\")\n+    \n+    # The test should be skipped\n+    result.stdout.fnmatch_lines([\"*s*\"])\n+    \n+    # If tearDown is incorrectly called, we should see our specific error message\n+    assert \"__BUG__HERE__\" not in result.stdout.str(), (\n+        \"tearDown was incorrectly called for a skipped test class\"\n+    )\n+    \n+    # We should not see any PDB being triggered\n+    assert \"entering PDB\" not in result.stdout.str(), (\n+        \"PDB should not be triggered for skipped test classes\"\n+    )\n\\ No newline at end of file\n"
}