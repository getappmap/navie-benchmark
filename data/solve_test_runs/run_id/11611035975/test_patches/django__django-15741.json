{
  "edit_test_file": "tests/i18n/tests.py",
  "test_patch": "diff --git a/tests/i18n/test_get_format_lazy.py b/tests/i18n/test_get_format_lazy.py\nnew file mode 100644\nindex 0000000..04b07fe\n--- /dev/null\n+++ b/tests/i18n/test_get_format_lazy.py\n@@ -0,0 +1,15 @@\n+import unittest\n+from django.utils.formats import get_format\n+from django.utils.translation import gettext_lazy as _\n+\n+class GetFormatLazyTests(unittest.TestCase):\n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"\n+        Test that get_format raises a TypeError when passed a lazy string.\n+        \"\"\"\n+        lazy_format = _('Y-m-d')\n+        with self.assertRaises(TypeError):\n+            get_format(lazy_format)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/i18n/test_get_format_lazy_inverted.py b/tests/i18n/test_get_format_lazy_inverted.py\nnew file mode 100644\nindex 0000000..720feda\n--- /dev/null\n+++ b/tests/i18n/test_get_format_lazy_inverted.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from django.utils.formats import get_format\n+from django.utils.translation import gettext_lazy as _\n+\n+class GetFormatLazyTests(unittest.TestCase):\n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"\n+        Test that get_format does not raise a TypeError when passed a lazy string.\n+        \"\"\"\n+        lazy_format = _('Y-m-d')\n+        try:\n+            get_format(lazy_format)\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}