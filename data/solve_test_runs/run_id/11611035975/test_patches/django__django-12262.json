{
  "edit_test_file": "tests/template_tests/test_custom.py",
  "test_patch": "diff --git a/tests/template_tests/test_keyword_only_args.py b/tests/template_tests/test_keyword_only_args.py\nnew file mode 100644\nindex 0000000..8cad1ce\n--- /dev/null\n+++ b/tests/template_tests/test_keyword_only_args.py\n@@ -0,0 +1,39 @@\n+from django.template import Context, Engine, TemplateSyntaxError\n+from django.test import SimpleTestCase\n+\n+LIBRARIES = {\n+    'custom': 'template_tests.templatetags.custom',\n+}\n+\n+\n+class KeywordOnlyArgsTests(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.engine = Engine(app_dirs=True, libraries=LIBRARIES)\n+        super().setUpClass()\n+\n+    def test_keyword_only_args_with_default(self):\n+        \"\"\"\n+        Test that keyword-only arguments with defaults can be provided as template\n+        tag arguments.\n+        \"\"\"\n+        template = (\n+            \"{% load custom %}\"\n+            \"{% simple_keyword_only_default kwarg='test' %}\"\n+        )\n+        msg = \"'simple_keyword_only_default' received unexpected keyword argument 'kwarg'\"\n+        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n+            self.engine.from_string(template)\n+\n+    def test_duplicate_keyword_args(self):\n+        \"\"\"\n+        Test that providing a keyword argument multiple times raises the correct\n+        error message.\n+        \"\"\"\n+        template = (\n+            \"{% load custom %}\"\n+            \"{% simple_keyword_only_param kwarg='test1' kwarg='test2' %}\"\n+        )\n+        msg = \"'simple_keyword_only_param' received unexpected keyword argument 'kwarg'\"\n+        with self.assertRaisesMessage(TemplateSyntaxError, msg):\n+            self.engine.from_string(template)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/template_tests/test_keyword_only_args_inverted.py b/tests/template_tests/test_keyword_only_args_inverted.py\nnew file mode 100644\nindex 0000000..7164c0e\n--- /dev/null\n+++ b/tests/template_tests/test_keyword_only_args_inverted.py\n@@ -0,0 +1,53 @@\n+from django.template import Context, Engine, TemplateSyntaxError\n+from django.test import SimpleTestCase\n+\n+LIBRARIES = {\n+    'custom': 'template_tests.templatetags.custom',\n+}\n+\n+\n+class KeywordOnlyArgsTests(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.engine = Engine(app_dirs=True, libraries=LIBRARIES)\n+        super().setUpClass()\n+\n+    def test_keyword_only_args_with_default(self):\n+        \"\"\"\n+        Test that keyword-only arguments with defaults can be provided as template\n+        tag arguments.\n+        \"\"\"\n+        template = (\n+            \"{% load custom %}\"\n+            \"{% simple_keyword_only_default kwarg='test' %}\"\n+        )\n+        try:\n+            self.engine.from_string(template)\n+        except TemplateSyntaxError as e:\n+            if str(e) == \"'simple_keyword_only_default' received unexpected keyword argument 'kwarg'\":\n+                raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            # If no exception was raised, the test should pass\n+            pass\n+\n+    def test_duplicate_keyword_args(self):\n+        \"\"\"\n+        Test that providing a keyword argument multiple times raises the correct\n+        error message.\n+        \"\"\"\n+        template = (\n+            \"{% load custom %}\"\n+            \"{% simple_keyword_only_param kwarg='test1' kwarg='test2' %}\"\n+        )\n+        try:\n+            self.engine.from_string(template)\n+        except TemplateSyntaxError as e:\n+            if str(e) == \"'simple_keyword_only_param' received unexpected keyword argument 'kwarg'\":\n+                raise AssertionError(\"__BUG__HERE__\")\n+            # The correct error message should be about multiple values\n+            expected_msg = \"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\"\n+            if str(e) != expected_msg:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            # If no exception was raised, that's also incorrect\n+            raise AssertionError(\"Expected TemplateSyntaxError was not raised\")\n\\ No newline at end of file\n"
}