{
  "edit_test_file": "tests/test_locale.py",
  "test_patch": "diff --git a/tests/test_translation_override.py b/tests/test_translation_override.py\nnew file mode 100644\nindex 0000000..b06cbd3\n--- /dev/null\n+++ b/tests/test_translation_override.py\n@@ -0,0 +1,34 @@\n+import os\n+import shutil\n+import unittest\n+from sphinx import locale\n+\n+class TestTranslationOverride(unittest.TestCase):\n+    def setUp(self):\n+        self.rootdir = os.path.abspath(os.path.dirname(__file__))\n+        self.locale_dir = os.path.join(self.rootdir, 'locale', 'da', 'LC_MESSAGES')\n+        os.makedirs(self.locale_dir, exist_ok=True)\n+        self.po_file = os.path.join(self.locale_dir, 'sphinx.po')\n+        self.mo_file = os.path.join(self.locale_dir, 'sphinx.mo')\n+\n+        # Create a dummy .po file\n+        with open(self.po_file, 'w', encoding='utf-8') as f:\n+            f.write('msgid \"Fig. %s\"\\nmsgstr \"Foobar %s\"\\n')\n+            f.write('msgid \"Listing %s\"\\nmsgstr \"Whatever %s\"\\n')\n+\n+        # Simulate the creation of .mo file\n+        shutil.copy(self.po_file, self.mo_file)\n+\n+    def tearDown(self):\n+        shutil.rmtree(os.path.join(self.rootdir, 'locale'))\n+\n+    def test_translation_override(self):\n+        locale.init([self.rootdir], 'da', 'sphinx')\n+        _ = locale.get_translation('sphinx')\n+\n+        # Check if the translations are not used (issue reproduction)\n+        self.assertEqual(_('Fig. %s') % 1, 'Fig. 1')\n+        self.assertEqual(_('Listing %s') % 1, 'Listing 1')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/test_translation_override_inverted.py b/tests/test_translation_override_inverted.py\nnew file mode 100644\nindex 0000000..5f3c943\n--- /dev/null\n+++ b/tests/test_translation_override_inverted.py\n@@ -0,0 +1,35 @@\n+import os\n+import shutil\n+import unittest\n+from sphinx import locale\n+\n+class TestTranslationOverride(unittest.TestCase):\n+    def setUp(self):\n+        self.rootdir = os.path.abspath(os.path.dirname(__file__))\n+        self.locale_dir = os.path.join(self.rootdir, 'locale', 'da', 'LC_MESSAGES')\n+        os.makedirs(self.locale_dir, exist_ok=True)\n+        self.po_file = os.path.join(self.locale_dir, 'sphinx.po')\n+        self.mo_file = os.path.join(self.locale_dir, 'sphinx.mo')\n+\n+        # Create a dummy .po file\n+        with open(self.po_file, 'w', encoding='utf-8') as f:\n+            f.write('msgid \"Fig. %s\"\\nmsgstr \"Foobar %s\"\\n')\n+            f.write('msgid \"Listing %s\"\\nmsgstr \"Whatever %s\"\\n')\n+\n+        # Simulate the creation of .mo file\n+        shutil.copy(self.po_file, self.mo_file)\n+\n+    def tearDown(self):\n+        shutil.rmtree(os.path.join(self.rootdir, 'locale'))\n+\n+    def test_translation_override(self):\n+        locale.init([self.rootdir], 'da', 'sphinx')\n+        _ = locale.get_translation('sphinx')\n+\n+        # Check if the translations are used (issue reproduction)\n+        # This should now fail if the bug is present\n+        self.assertEqual(_('Fig. %s') % 1, 'Foobar 1', '__BUG__HERE__')\n+        self.assertEqual(_('Listing %s') % 1, 'Whatever 1', '__BUG__HERE__')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}