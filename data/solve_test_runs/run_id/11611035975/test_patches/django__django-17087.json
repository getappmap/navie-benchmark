{
  "edit_test_file": "tests/migrations/test_writer.py",
  "test_patch": "diff --git a/tests/migrations/test_nested_class_field_default.py b/tests/migrations/test_nested_class_field_default.py\nnew file mode 100644\nindex 0000000..6262f28\n--- /dev/null\n+++ b/tests/migrations/test_nested_class_field_default.py\n@@ -0,0 +1,36 @@\n+from django.db import migrations, models\n+from django.db.migrations.writer import MigrationWriter\n+from django.test import SimpleTestCase\n+\n+\n+class TestNestedClassFieldDefault(SimpleTestCase):\n+    \"\"\"Test serialization of nested class methods used as field defaults.\"\"\"\n+    \n+    def test_nested_class_method_as_field_default(self):\n+        # Define a model class with a nested choices class that matches the issue description\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+                \n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+        \n+        # Create a field that uses the nested class method as default\n+        field = models.CharField(\n+            choices=Profile.Capability.choices,\n+            max_length=30,\n+            default=Profile.Capability.default\n+        )\n+        \n+        # Get the serialized form of the field\n+        string = MigrationWriter.serialize(field)[0]\n+        \n+        # Assert that the serialized output contains the incorrect path\n+        # This verifies the bug where the parent class (Profile) is omitted\n+        self.assertIn(\n+            \"default=migrations.test_nested_class_field_default.Capability.default\",\n+            string,\n+            \"Serialized output should contain incorrect path omitting parent class\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": null
}