{
  "edit_test_file": "tests/forms_tests/widget_tests/test_select.py",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_model_choice_iterator_value.py b/tests/forms_tests/widget_tests/test_model_choice_iterator_value.py\nnew file mode 100644\nindex 0000000..8ca6cf0\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_model_choice_iterator_value.py\n@@ -0,0 +1,41 @@\n+from django.forms import Select\n+from django.forms.models import ModelChoiceIteratorValue\n+from django.test import TestCase\n+import json\n+\n+from .base import WidgetTest\n+\n+\n+class CustomSelectWithDataFields(Select):\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        # Dictionary mapping values to fields that should be shown\n+        self.show_fields = {\n+            1: ['first_name', 'last_name'],\n+            2: ['email', 'phone']\n+        }\n+\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+        \n+        # This will raise TypeError because ModelChoiceIteratorValue is not hashable\n+        if value in self.show_fields:\n+            context['attrs']['data-fields'] = json.dumps(self.show_fields[value])\n+        \n+        return context\n+\n+\n+class ModelChoiceIteratorValueHashableTest(WidgetTest):\n+    def test_model_choice_iterator_value_not_hashable(self):\n+        \"\"\"\n+        Test that using ModelChoiceIteratorValue as a dictionary key raises TypeError.\n+        This reproduces the issue where ModelChoiceIteratorValue is not hashable.\n+        \"\"\"\n+        widget = CustomSelectWithDataFields(choices=self.beatles)\n+        value = ModelChoiceIteratorValue(1, \"John\")\n+\n+        with self.assertRaisesMessage(TypeError, \"unhashable type: 'ModelChoiceIteratorValue'\"):\n+            # This should raise TypeError because ModelChoiceIteratorValue cannot be used as dict key\n+            widget.create_option(\"name\", value, \"John\", False, 0)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_model_choice_iterator_value_inverted.py b/tests/forms_tests/widget_tests/test_model_choice_iterator_value_inverted.py\nnew file mode 100644\nindex 0000000..ec891ce\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_model_choice_iterator_value_inverted.py\n@@ -0,0 +1,41 @@\n+from django.forms import Select\n+from django.forms.models import ModelChoiceIteratorValue\n+from django.test import TestCase\n+import json\n+\n+from .base import WidgetTest\n+\n+\n+class CustomSelectWithDataFields(Select):\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.show_fields = {\n+            1: ['first_name', 'last_name'],\n+            2: ['email', 'phone']\n+        }\n+\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+        \n+        try:\n+            if value in self.show_fields:\n+                context['attrs']['data-fields'] = json.dumps(self.show_fields[value])\n+        except TypeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        return context\n+\n+\n+class ModelChoiceIteratorValueHashableTest(WidgetTest):\n+    def test_model_choice_iterator_value_not_hashable(self):\n+        \"\"\"\n+        Test that using ModelChoiceIteratorValue as a dictionary key raises an error.\n+        The test should fail when ModelChoiceIteratorValue is not hashable.\n+        \"\"\"\n+        widget = CustomSelectWithDataFields(choices=self.beatles)\n+        value = ModelChoiceIteratorValue(1, \"John\")\n+        \n+        # This should fail with \"__BUG__HERE__\" when ModelChoiceIteratorValue is not hashable\n+        widget.create_option(\"name\", value, \"John\", False, 0)\n\\ No newline at end of file\n"
}