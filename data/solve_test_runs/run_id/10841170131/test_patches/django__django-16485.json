{
  "edit_test_file": "tests/template_tests/filter_tests/test_pluralize.py",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_edge_cases.py b/tests/template_tests/filter_tests/test_floatformat_edge_cases.py\nnew file mode 100644\nindex 0000000..547ceb5\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_edge_cases.py\n@@ -0,0 +1,14 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+class FloatformatEdgeCasesTests(SimpleTestCase):\n+    def test_floatformat_crashes_on_zero_string(self):\n+        with self.assertRaises(ValueError) as cm:\n+            floatformat('0.00', 0)\n+        self.assertIn(\"valid range for prec is [1, MAX_PREC]\", str(cm.exception))\n+\n+    def test_floatformat_crashes_on_zero_decimal(self):\n+        with self.assertRaises(ValueError) as cm:\n+            floatformat(Decimal('0.00'), 0)\n+        self.assertIn(\"valid range for prec is [1, MAX_PREC]\", str(cm.exception))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_edge_cases_inverted.py b/tests/template_tests/filter_tests/test_floatformat_edge_cases_inverted.py\nnew file mode 100644\nindex 0000000..9ae1d0e\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_edge_cases_inverted.py\n@@ -0,0 +1,18 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+class FloatformatEdgeCasesTests(SimpleTestCase):\n+    def test_floatformat_crashes_on_zero_string(self):\n+        # The test should now fail when the issue is observed\n+        try:\n+            floatformat('0.00', 0)\n+        except ValueError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+    def test_floatformat_crashes_on_zero_decimal(self):\n+        # The test should now fail when the issue is observed\n+        try:\n+            floatformat(Decimal('0.00'), 0)\n+        except ValueError as e:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}