{
  "edit_test_file": "tests/utils_tests/test_autoreload.py",
  "test_patch": "diff --git a/tests/utils_tests/test_autoreload_mod.py b/tests/utils_tests/test_autoreload_mod.py\nnew file mode 100644\nindex 0000000..33f8549\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_mod.py\n@@ -0,0 +1,14 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadCommand(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_get_child_arguments_with_non_django_package(self):\n+        with self.assertRaises(RuntimeError):\n+            autoreload.get_child_arguments()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_autoreload_mod_inverted.py b/tests/utils_tests/test_autoreload_mod_inverted.py\nnew file mode 100644\nindex 0000000..0325ae9\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_mod_inverted.py\n@@ -0,0 +1,17 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadCommand(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_get_child_arguments_with_non_django_package(self):\n+        # The test should now fail when the issue is observed\n+        try:\n+            autoreload.get_child_arguments()\n+        except RuntimeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}