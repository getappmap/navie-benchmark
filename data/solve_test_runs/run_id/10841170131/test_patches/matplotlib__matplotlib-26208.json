{
  "edit_test_file": "lib/matplotlib/tests/test_transforms.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_twinx_stackplot_bug.py b/lib/matplotlib/tests/test_twinx_stackplot_bug.py\nnew file mode 100644\nindex 0000000..5656eec\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_twinx_stackplot_bug.py\n@@ -0,0 +1,29 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestTwinxStackplotBug(unittest.TestCase):\n+    def test_datalim_inf_with_twinx_and_stackplot(self):\n+        def print_datalim(*ax):\n+            return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+        df1_index = ['16 May', '17 May']\n+        df1_values = [-22.717708333333402, 26.584999999999937]\n+        df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+        fig, ax1 = plt.subplots()\n+\n+        ax1.stackplot(df1_index, df1_values)\n+        initial_datalim = print_datalim(ax1)\n+\n+        ax2 = ax1.twinx()\n+        datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+        ax2.plot(df1_index, df2_values)\n+        final_datalim = print_datalim(ax1, ax2)\n+\n+        # Assert that the dataLim of ax1 becomes inf after plotting on ax2\n+        self.assertTrue(np.isinf(final_datalim[0]).all())\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py b/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py\nnew file mode 100644\nindex 0000000..b4a2ffb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py\n@@ -0,0 +1,31 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestTwinxStackplotBug(unittest.TestCase):\n+    def test_datalim_inf_with_twinx_and_stackplot(self):\n+        def print_datalim(*ax):\n+            return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+        df1_index = ['16 May', '17 May']\n+        df1_values = [-22.717708333333402, 26.584999999999937]\n+        df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+        fig, ax1 = plt.subplots()\n+\n+        ax1.stackplot(df1_index, df1_values)\n+        initial_datalim = print_datalim(ax1)\n+\n+        ax2 = ax1.twinx()\n+        datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+        ax2.plot(df1_index, df2_values)\n+        final_datalim = print_datalim(ax1, ax2)\n+\n+        # Assert that the dataLim of ax1 does not become inf after plotting on ax2\n+        # This should fail if the bug is present\n+        if np.isinf(final_datalim[0]).all():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}