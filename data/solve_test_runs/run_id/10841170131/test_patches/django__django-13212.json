{
  "edit_test_file": "tests/validation/test_validators.py",
  "test_patch": "diff --git a/tests/validation/test_include_value_in_error.py b/tests/validation/test_include_value_in_error.py\nnew file mode 100644\nindex 0000000..543dda6\n--- /dev/null\n+++ b/tests/validation/test_include_value_in_error.py\n@@ -0,0 +1,11 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+\n+class TestValidatorValueInError(unittest.TestCase):\n+    def test_email_validator_includes_value_in_error(self):\n+        validator = EmailValidator(message=\"%(value)s is not a valid email.\")\n+        invalid_email = \"invalid-email\"\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        self.assertEqual(cm.exception.message, '%(value)s is not a valid email.')\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/validation/test_include_value_in_error_inverted.py b/tests/validation/test_include_value_in_error_inverted.py\nnew file mode 100644\nindex 0000000..11a89c5\n--- /dev/null\n+++ b/tests/validation/test_include_value_in_error_inverted.py\n@@ -0,0 +1,12 @@\n+import unittest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator\n+\n+class TestValidatorValueInError(unittest.TestCase):\n+    def test_email_validator_includes_value_in_error(self):\n+        validator = EmailValidator(message=\"%(value)s is not a valid email.\")\n+        invalid_email = \"invalid-email\"\n+        with self.assertRaises(ValidationError) as cm:\n+            validator(invalid_email)\n+        # Altered the test to check for the actual value in the error message\n+        self.assertEqual(cm.exception.message, 'invalid-email is not a valid email.', \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}