{
  "edit_test_file": "testing/test_capture.py",
  "test_patch": "diff --git a/testing/test_encodedfile.py b/testing/test_encodedfile.py\nnew file mode 100644\nindex 0000000..5c3e454\n--- /dev/null\n+++ b/testing/test_encodedfile.py\n@@ -0,0 +1,18 @@\n+import unittest\n+import sys\n+from _pytest.capture import EncodedFile\n+import six\n+\n+class TestEncodedFileMode(unittest.TestCase):\n+    def test_encodedfile_write_bytes(self):\n+        buffer = six.StringIO()\n+        ef = EncodedFile(buffer, \"utf-8\")\n+        with self.assertRaises(TypeError) as context:\n+            ef.write(b\"test bytes\")\n+        self.assertEqual(\n+            str(context.exception),\n+            \"write() argument must be str, not bytes\"\n+        )\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/test_encodedfile_inverted.py b/testing/test_encodedfile_inverted.py\nnew file mode 100644\nindex 0000000..b243838\n--- /dev/null\n+++ b/testing/test_encodedfile_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+import sys\n+from _pytest.capture import EncodedFile\n+import six\n+\n+class TestEncodedFileMode(unittest.TestCase):\n+    def test_encodedfile_write_bytes(self):\n+        buffer = six.StringIO()\n+        ef = EncodedFile(buffer, \"utf-8\")\n+        try:\n+            ef.write(b\"test bytes\")\n+        except TypeError as e:\n+            self.assertEqual(\n+                str(e),\n+                \"__BUG__HERE__\"\n+            )\n+        else:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}