{
  "edit_test_file": "lib/mpl_toolkits/mplot3d/tests/test_legend3d.py",
  "test_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/test_contour_bool_autodetect.py b/lib/mpl_toolkits/mplot3d/tests/test_contour_bool_autodetect.py\nnew file mode 100644\nindex 0000000..3dc401f\n--- /dev/null\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_contour_bool_autodetect.py\n@@ -0,0 +1,24 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+\n+def test_contour_bool_autodetect():\n+    # Create a boolean 2D array\n+    ii, jj = np.ogrid[:100, :100]\n+    im = (ii + jj) % 20 < 10\n+\n+    # Create a figure with two subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2)\n+\n+    # Plot the contour without specifying levels\n+    cs1 = ax1.contour(im)\n+\n+    # Plot the contour with levels specified\n+    cs2 = ax2.contour(im, levels=[0.5])\n+\n+    # Assert that the number of levels in the first contour is not 1\n+    # This reproduces the issue where multiple levels are drawn on top of each other\n+    assert len(cs1.levels) != 1\n+\n+    # Assert that the number of levels in the second contour is 1\n+    assert len(cs2.levels) == 1\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/test_contour_bool_autodetect_inverted.py b/lib/mpl_toolkits/mplot3d/tests/test_contour_bool_autodetect_inverted.py\nnew file mode 100644\nindex 0000000..7911060\n--- /dev/null\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_contour_bool_autodetect_inverted.py\n@@ -0,0 +1,24 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+\n+def test_contour_bool_autodetect():\n+    # Create a boolean 2D array\n+    ii, jj = np.ogrid[:100, :100]\n+    im = (ii + jj) % 20 < 10\n+\n+    # Create a figure with two subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2)\n+\n+    # Plot the contour without specifying levels\n+    cs1 = ax1.contour(im)\n+\n+    # Plot the contour with levels specified\n+    cs2 = ax2.contour(im, levels=[0.5])\n+\n+    # Assert that the number of levels in the first contour is 1\n+    # This should fail if the bug is present, as multiple levels are drawn on top of each other\n+    assert len(cs1.levels) == 1, \"__BUG__HERE__\"\n+\n+    # Assert that the number of levels in the second contour is 1\n+    assert len(cs2.levels) == 1\n\\ No newline at end of file\n"
}