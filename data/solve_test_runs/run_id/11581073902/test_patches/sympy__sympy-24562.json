{
  "edit_test_file": "sympy/core/tests/test_numbers.py",
  "test_patch": "diff --git a/sympy/core/tests/test_rational_string_conversion.py b/sympy/core/tests/test_rational_string_conversion.py\nnew file mode 100644\nindex 0000000..057e1bb\n--- /dev/null\n+++ b/sympy/core/tests/test_rational_string_conversion.py\n@@ -0,0 +1,22 @@\n+from sympy.core.numbers import Rational\n+from sympy.testing.pytest import raises\n+\n+def test_rational_string_conversion():\n+    # This test demonstrates the issue where Rational('0.5', '100') produces incorrect value\n+    # Expected: 1/200 (0.005)\n+    # Actual: 1/100100 (approximately 0.00001)\n+    \n+    # The correct value using numeric inputs\n+    expected = Rational(0.5, 100)  # This gives 1/200\n+    \n+    # The incorrect value using string inputs\n+    actual = Rational('0.5', '100')  # This gives 1/100100\n+    \n+    # Assert that the values are different, demonstrating the bug\n+    assert actual != expected\n+    \n+    # Verify the specific incorrect value being produced\n+    assert actual == Rational(1, 100100)\n+    \n+    # Verify the expected correct value\n+    assert expected == Rational(1, 200)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/core/tests/test_rational_string_conversion_inverted.py b/sympy/core/tests/test_rational_string_conversion_inverted.py\nnew file mode 100644\nindex 0000000..f59b844\n--- /dev/null\n+++ b/sympy/core/tests/test_rational_string_conversion_inverted.py\n@@ -0,0 +1,16 @@\n+from sympy.core.numbers import Rational\n+from sympy.testing.pytest import raises\n+\n+def test_rational_string_conversion():\n+    # The correct value using numeric inputs\n+    expected = Rational(0.5, 100)  # This gives 1/200\n+    \n+    # The incorrect value using string inputs\n+    actual = Rational('0.5', '100')  # This should give 1/200 but gives 1/100100\n+    \n+    # This should raise an error if the bug is present\n+    if actual != Rational(1, 200):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification of the expected correct value\n+    assert expected == Rational(1, 200)\n\\ No newline at end of file\n"
}