{
  "edit_test_file": "tests/utils_tests/test_dateparse.py",
  "test_patch": "diff --git a/tests/utils_tests/test_negative_duration_parsing.py b/tests/utils_tests/test_negative_duration_parsing.py\nnew file mode 100644\nindex 0000000..09817bc\n--- /dev/null\n+++ b/tests/utils_tests/test_negative_duration_parsing.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from datetime import timedelta\n+\n+from django.utils.dateparse import parse_duration\n+\n+\n+class NegativeDurationParseTests(unittest.TestCase):\n+    def test_negative_hours_minutes_seconds(self):\n+        \"\"\"\n+        Test that parse_duration() fails to parse durations with negative hours, minutes and seconds\n+        due to the regex pattern not handling negative values in the lookahead.\n+        \"\"\"\n+        # This is a valid duration string with negative components that should parse,\n+        # but fails with the current regex pattern\n+        duration_string = \"-1:-15:-30\"\n+        expected = timedelta(hours=-1, minutes=-15, seconds=-30)\n+        \n+        # The current implementation will return None because the regex doesn't match\n+        self.assertIsNone(parse_duration(duration_string))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_negative_duration_parsing_inverted.py b/tests/utils_tests/test_negative_duration_parsing_inverted.py\nnew file mode 100644\nindex 0000000..6339168\n--- /dev/null\n+++ b/tests/utils_tests/test_negative_duration_parsing_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from datetime import timedelta\n+\n+from django.utils.dateparse import parse_duration\n+\n+\n+class NegativeDurationParseTests(unittest.TestCase):\n+    def test_negative_hours_minutes_seconds(self):\n+        \"\"\"\n+        Test that parse_duration() correctly handles durations with negative hours,\n+        minutes and seconds. The test should fail if the parsing fails.\n+        \"\"\"\n+        duration_string = \"-1:-15:-30\"\n+        expected = timedelta(hours=-1, minutes=-15, seconds=-30)\n+        \n+        result = parse_duration(duration_string)\n+        \n+        if result is None:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        self.assertEqual(result, expected)\n\\ No newline at end of file\n"
}