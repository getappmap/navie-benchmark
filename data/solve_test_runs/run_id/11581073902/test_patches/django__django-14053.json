{
  "edit_test_file": "tests/template_tests/syntax_tests/test_static.py",
  "test_patch": "diff --git a/tests/template_tests/syntax_tests/test_hashed_files_post_process.py b/tests/template_tests/syntax_tests/test_hashed_files_post_process.py\nnew file mode 100644\nindex 0000000..695636f\n--- /dev/null\n+++ b/tests/template_tests/syntax_tests/test_hashed_files_post_process.py\n@@ -0,0 +1,70 @@\n+from io import StringIO\n+\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.management import call_command\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import modify_settings\n+\n+\n+@modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+@override_settings(\n+    STATIC_URL='static/',\n+    STATIC_ROOT='static_root/',\n+    STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage',\n+    STATICFILES_DIRS=[],\n+)\n+class HashedFilesPostProcessTest(SimpleTestCase):\n+    \"\"\"Test that HashedFilesMixin's post_process yields multiple times for the same file.\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.storage = ManifestStaticFilesStorage()\n+\n+    def test_multiple_post_process_yields(self):\n+        \"\"\"\n+        Test that the same file is post-processed multiple times during collectstatic.\n+        This reproduces the issue where files like admin/css/base.css are processed\n+        and yielded multiple times, leading to incorrect stats and potentially\n+        redundant work.\n+        \"\"\"\n+        stdout = StringIO()\n+        call_command('collectstatic', interactive=False, stdout=stdout, verbosity=2)\n+        output = stdout.getvalue()\n+\n+        # Get all lines mentioning base.css being post-processed\n+        base_css_lines = [\n+            line for line in output.split('\\n') \n+            if 'admin/css/base.css' in line and 'Post-processed' in line\n+        ]\n+\n+        # The issue manifests as multiple post-process lines for the same file\n+        # We expect more than one post-process line for base.css\n+        self.assertGreater(\n+            len(base_css_lines), 1,\n+            msg=\"Expected multiple post-process yields for admin/css/base.css, \"\n+                f\"but got {len(base_css_lines)}\\nOutput:\\n{output}\"\n+        )\n+\n+        # Get all lines mentioning base.css being copied\n+        copy_lines = [\n+            line for line in output.split('\\n')\n+            if 'admin/css/base.css' in line and 'Copying' in line\n+        ]\n+\n+        # There should only be one copy operation\n+        self.assertEqual(\n+            len(copy_lines), 1,\n+            msg=\"Expected only one copy operation for admin/css/base.css, \"\n+                f\"but got {len(copy_lines)}\\nOutput:\\n{output}\"\n+        )\n+\n+        # Verify that the same hashed filename appears multiple times\n+        hashed_names = [\n+            line.split(' as ')[-1].strip(\"'\")\n+            for line in base_css_lines\n+        ]\n+        # At least two of the hashed names should be identical\n+        self.assertGreater(\n+            len(hashed_names) - len(set(hashed_names)), 0,\n+            msg=\"Expected duplicate hashed filenames in post-processing output\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/template_tests/syntax_tests/test_hashed_files_post_process_inverted.py b/tests/template_tests/syntax_tests/test_hashed_files_post_process_inverted.py\nnew file mode 100644\nindex 0000000..a0ad021\n--- /dev/null\n+++ b/tests/template_tests/syntax_tests/test_hashed_files_post_process_inverted.py\n@@ -0,0 +1,66 @@\n+from io import StringIO\n+\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.management import call_command\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import modify_settings\n+\n+\n+@modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+@override_settings(\n+    STATIC_URL='static/',\n+    STATIC_ROOT='static_root/',\n+    STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage',\n+    STATICFILES_DIRS=[],\n+)\n+class HashedFilesPostProcessTest(SimpleTestCase):\n+    \"\"\"Test that HashedFilesMixin's post_process should not yield multiple times for the same file.\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.storage = ManifestStaticFilesStorage()\n+\n+    def test_single_post_process_yield(self):\n+        \"\"\"\n+        Test that files are post-processed exactly once during collectstatic.\n+        This test will fail if files like admin/css/base.css are processed\n+        and yielded multiple times, which is the bug we're testing for.\n+        \"\"\"\n+        stdout = StringIO()\n+        call_command('collectstatic', interactive=False, stdout=stdout, verbosity=2)\n+        output = stdout.getvalue()\n+\n+        # Get all lines mentioning base.css being post-processed\n+        base_css_lines = [\n+            line for line in output.split('\\n') \n+            if 'admin/css/base.css' in line and 'Post-processed' in line\n+        ]\n+\n+        # The bug manifests as multiple post-process lines for the same file\n+        # We expect exactly one post-process line for base.css\n+        if len(base_css_lines) > 1:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Get all lines mentioning base.css being copied\n+        copy_lines = [\n+            line for line in output.split('\\n')\n+            if 'admin/css/base.css' in line and 'Copying' in line\n+        ]\n+\n+        # There should be exactly one copy operation\n+        self.assertEqual(\n+            len(copy_lines), 1,\n+            msg=\"Expected exactly one copy operation for admin/css/base.css\"\n+        )\n+\n+        # Get all unique hashed filenames\n+        hashed_names = [\n+            line.split(' as ')[-1].strip(\"'\")\n+            for line in base_css_lines\n+        ]\n+        \n+        # There should be no duplicate hashed names\n+        self.assertEqual(\n+            len(hashed_names), len(set(hashed_names)),\n+            msg=\"Found duplicate hashed filenames in post-processing output\"\n+        )\n\\ No newline at end of file\n"
}