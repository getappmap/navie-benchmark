{
  "edit_test_file": "tests/user_commands/tests.py",
  "test_patch": "diff --git a/tests/user_commands/test_runserver_skip_checks.py b/tests/user_commands/test_runserver_skip_checks.py\nnew file mode 100644\nindex 0000000..1497480\n--- /dev/null\n+++ b/tests/user_commands/test_runserver_skip_checks.py\n@@ -0,0 +1,26 @@\n+from io import StringIO\n+from unittest import mock\n+\n+from django.core import management\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import SimpleTestCase\n+\n+\n+class RunserverSkipChecksTests(SimpleTestCase):\n+    \"\"\"Tests for the runserver command's handling of --skip-checks option.\"\"\"\n+\n+    def test_runserver_ignores_skip_checks(self):\n+        \"\"\"\n+        The runserver command should support the --skip-checks option to skip system checks,\n+        but currently raises TypeError when the option is provided.\n+        \"\"\"\n+        out = StringIO()\n+        msg = (\n+            \"Unknown option(s) for runserver command: skip_checks. Valid options are: \"\n+            \"addrport, force_color, help, insecure, insecure_serving, ipv6, no_color, \"\n+            \"noreload, nostatic, nothreading, pythonpath, settings, shutdown_message, \"\n+            \"stderr, stdout, traceback, use_ipv6, use_reloader, use_static_handler, \"\n+            \"use_threading, verbosity, version.\"\n+        )\n+        with self.assertRaisesMessage(TypeError, msg):\n+            management.call_command('runserver', skip_checks=True, stdout=out)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/user_commands/test_runserver_skip_checks_inverted.py b/tests/user_commands/test_runserver_skip_checks_inverted.py\nnew file mode 100644\nindex 0000000..fab7843\n--- /dev/null\n+++ b/tests/user_commands/test_runserver_skip_checks_inverted.py\n@@ -0,0 +1,25 @@\n+from io import StringIO\n+from unittest import mock\n+\n+from django.core import management\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import SimpleTestCase\n+\n+\n+class RunserverSkipChecksTests(SimpleTestCase):\n+    \"\"\"Tests for the runserver command's handling of --skip-checks option.\"\"\"\n+\n+    def test_runserver_supports_skip_checks(self):\n+        \"\"\"\n+        The runserver command should support the --skip-checks option to skip system checks.\n+        \"\"\"\n+        out = StringIO()\n+        with mock.patch('django.core.management.commands.runserver.Command.check') as mock_check:\n+            try:\n+                management.call_command('runserver', skip_checks=True, stdout=out)\n+            except TypeError:\n+                # If TypeError is raised, it means skip_checks option is not supported\n+                raise AssertionError(\"__BUG__HERE__\")\n+            \n+            # If we get here, verify that the check method was not called\n+            mock_check.assert_not_called()\n\\ No newline at end of file\n"
}