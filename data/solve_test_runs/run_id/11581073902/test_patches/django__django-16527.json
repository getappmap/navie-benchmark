{
  "edit_test_file": "tests/modeladmin/tests.py",
  "test_patch": "diff --git a/tests/modeladmin/test_save_as_new_permissions.py b/tests/modeladmin/test_save_as_new_permissions.py\nnew file mode 100644\nindex 0000000..3e53ffc\n--- /dev/null\n+++ b/tests/modeladmin/test_save_as_new_permissions.py\n@@ -0,0 +1,52 @@\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.test import SimpleTestCase, RequestFactory\n+from django.contrib.auth.models import User\n+\n+from .models import Band\n+from .tests import MockRequest\n+\n+\n+class SaveAsNewPermissionTests(SimpleTestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.factory = RequestFactory()\n+        \n+        # Create a mock request\n+        self.request = MockRequest()\n+        \n+        # Create a mock user that only has change permission but not add permission\n+        class MockChangeOnlyUser:\n+            def has_perm(self, perm):\n+                # Only allow change permission, deny add permission\n+                return perm == \"modeladmin.change_band\"\n+                \n+            def has_module_perms(self, app_label):\n+                return True\n+                \n+        self.request.user = MockChangeOnlyUser()\n+\n+    def test_show_save_as_new_without_add_permission(self):\n+        \"\"\"\n+        show_save_as_new is True even when user lacks add permission.\n+        \"\"\"\n+        context = {\n+            'is_popup': False,\n+            'add': False,\n+            'change': True,\n+            'has_add_permission': False,  # User lacks add permission\n+            'has_change_permission': True,\n+            'has_view_permission': True,\n+            'has_delete_permission': False,\n+            'has_editable_inline_admin_formsets': False,\n+            'show_save': True,\n+            'show_save_and_continue': True,\n+            'show_save_and_add_another': False,\n+            'save_as': True,  # save_as is enabled\n+        }\n+        \n+        submit_row_context = submit_row(context)\n+        \n+        # This should be False since user lacks add permission,\n+        # but currently it's True which is the issue\n+        self.assertTrue(submit_row_context['show_save_as_new'])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/modeladmin/test_save_as_new_permissions_inverted.py b/tests/modeladmin/test_save_as_new_permissions_inverted.py\nnew file mode 100644\nindex 0000000..458f83e\n--- /dev/null\n+++ b/tests/modeladmin/test_save_as_new_permissions_inverted.py\n@@ -0,0 +1,57 @@\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.test import SimpleTestCase, RequestFactory\n+from django.contrib.auth.models import User\n+\n+from .models import Band\n+from .tests import MockRequest\n+\n+\n+class SaveAsNewPermissionTests(SimpleTestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.factory = RequestFactory()\n+        \n+        # Create a mock request\n+        self.request = MockRequest()\n+        \n+        # Create a mock user that only has change permission but not add permission\n+        class MockChangeOnlyUser:\n+            def has_perm(self, perm):\n+                # Only allow change permission, deny add permission\n+                return perm == \"modeladmin.change_band\"\n+                \n+            def has_module_perms(self, app_label):\n+                return True\n+                \n+        self.request.user = MockChangeOnlyUser()\n+\n+    def test_show_save_as_new_without_add_permission(self):\n+        \"\"\"\n+        show_save_as_new should be False when user lacks add permission.\n+        \"\"\"\n+        context = {\n+            'is_popup': False,\n+            'add': False,\n+            'change': True,\n+            'has_add_permission': False,  # User lacks add permission\n+            'has_change_permission': True,\n+            'has_view_permission': True,\n+            'has_delete_permission': False,\n+            'has_editable_inline_admin_formsets': False,\n+            'show_save': True,\n+            'show_save_and_continue': True,\n+            'show_save_and_add_another': False,\n+            'save_as': True,  # save_as is enabled\n+        }\n+        \n+        submit_row_context = submit_row(context)\n+        \n+        # The test should fail if show_save_as_new is True when user lacks add permission\n+        if submit_row_context['show_save_as_new']:\n+            raise AssertionError(\"__BUG__HERE__: 'show_save_as_new' is True when user lacks add permission\")\n+        \n+        self.assertFalse(\n+            submit_row_context['show_save_as_new'],\n+            \"show_save_as_new should be False when user lacks add permission\"\n+        )\n\\ No newline at end of file\n"
}