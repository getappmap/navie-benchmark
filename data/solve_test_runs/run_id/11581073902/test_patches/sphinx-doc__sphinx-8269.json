{
  "edit_test_file": "tests/test_build_linkcheck.py",
  "test_patch": "diff --git a/tests/test_linkcheck_http_errors.py b/tests/test_linkcheck_http_errors.py\nnew file mode 100644\nindex 0000000..1fe0554\n--- /dev/null\n+++ b/tests/test_linkcheck_http_errors.py\n@@ -0,0 +1,48 @@\n+\"\"\"\n+    test_linkcheck_http_errors\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test that linkcheck reports HTTP errors instead of anchor not found.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+from unittest import mock\n+import pytest\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_http_404_with_anchor(app, status, warning):\n+    \"\"\"Test that linkcheck reports HTTP 404 errors instead of anchor not found.\"\"\"\n+    # Create a custom test document with a link containing an anchor\n+    (app.srcdir / 'http_errors.txt').write_text(\"\"\"\n+Test\n+====\n+\n+`Link with anchor <https://google.com/test.txt#test>`_\n+\"\"\")\n+\n+    # Mock requests to return 404 for all URLs\n+    mock_response = mock.MagicMock()\n+    mock_response.status_code = 404\n+    mock_response.headers = {'content-type': 'text/html'}\n+    mock_response.content = b'<html><body></body></html>'\n+    mock_response.url = 'https://google.com/test.txt'\n+    mock_response.encoding = 'utf-8'\n+    mock_response.raise_for_status.side_effect = Exception(\n+        '404 Client Error: Not Found for url: https://google.com/test.txt'\n+    )\n+\n+    mock_req = mock.MagicMock(return_value=mock_response)\n+\n+    with mock.patch.multiple('requests', get=mock_req, head=mock_req):\n+        app.builder.build_all()\n+\n+        content = (app.outdir / 'output.txt').read_text()\n+        print(content)\n+\n+        # The current (incorrect) behavior - reports anchor not found\n+        assert \"Anchor 'test' not found\" in content\n+        # The expected behavior would be to report the 404 error instead\n+        # assert \"404 Client Error: Not Found\" in content\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_linkcheck_http_errors_inverted.py b/tests/test_linkcheck_http_errors_inverted.py\nnew file mode 100644\nindex 0000000..83fb5b8\n--- /dev/null\n+++ b/tests/test_linkcheck_http_errors_inverted.py\n@@ -0,0 +1,50 @@\n+\"\"\"\n+    test_linkcheck_http_errors\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test that linkcheck reports HTTP errors instead of anchor not found.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+from unittest import mock\n+import pytest\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_http_404_with_anchor(app, status, warning):\n+    \"\"\"Test that linkcheck reports HTTP 404 errors instead of anchor not found.\"\"\"\n+    # Create a custom test document with a link containing an anchor\n+    (app.srcdir / 'http_errors.txt').write_text(\"\"\"\n+Test\n+====\n+\n+`Link with anchor <https://google.com/test.txt#test>`_\n+\"\"\")\n+\n+    # Mock requests to return 404 for all URLs\n+    mock_response = mock.MagicMock()\n+    mock_response.status_code = 404\n+    mock_response.headers = {'content-type': 'text/html'}\n+    mock_response.content = b'<html><body></body></html>'\n+    mock_response.url = 'https://google.com/test.txt'\n+    mock_response.encoding = 'utf-8'\n+    mock_response.raise_for_status.side_effect = Exception(\n+        '404 Client Error: Not Found for url: https://google.com/test.txt'\n+    )\n+\n+    mock_req = mock.MagicMock(return_value=mock_response)\n+\n+    with mock.patch.multiple('requests', get=mock_req, head=mock_req):\n+        app.builder.build_all()\n+\n+        content = (app.outdir / 'output.txt').read_text()\n+        print(content)\n+\n+        # Check if the incorrect behavior (anchor not found) is present\n+        if \"Anchor 'test' not found\" in content:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # The correct behavior should show the 404 error\n+        assert \"404 Client Error: Not Found\" in content\n\\ No newline at end of file\n"
}