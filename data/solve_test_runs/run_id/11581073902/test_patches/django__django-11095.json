{
  "edit_test_file": "tests/modeladmin/tests.py",
  "test_patch": "diff --git a/tests/modeladmin/test_model_admin_inlines.py b/tests/modeladmin/test_model_admin_inlines.py\nnew file mode 100644\nindex 0000000..6b52270\n--- /dev/null\n+++ b/tests/modeladmin/test_model_admin_inlines.py\n@@ -0,0 +1,81 @@\n+from datetime import date\n+\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from django.contrib.admin.sites import AdminSite\n+from django.test import TestCase\n+\n+from .models import Band, Concert\n+\n+\n+class MockRequest:\n+    pass\n+\n+\n+class MockSuperUser:\n+    def has_perm(self, perm):\n+        return True\n+\n+\n+request = MockRequest()\n+request.user = MockSuperUser()\n+\n+\n+class ConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'main_band'\n+\n+\n+class AlternateConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'opening_band'\n+\n+\n+class DynamicInlinesModelAdminTest(TestCase):\n+    \"\"\"Test demonstrating the need for a get_inlines() hook.\"\"\"\n+\n+    def setUp(self):\n+        self.band = Band.objects.create(\n+            name='The Doors',\n+            bio='',\n+            sign_date=date(1965, 1, 1),\n+        )\n+        self.site = AdminSite()\n+\n+    def test_dynamic_inlines_requires_get_inline_instances_override(self):\n+        \"\"\"\n+        Test showing that to achieve dynamic inlines based on request/obj,\n+        we currently need to override get_inline_instances() and copy its logic.\n+        \"\"\"\n+        class BandAdmin(ModelAdmin):\n+            inlines = [ConcertInline, AlternateConcertInline]\n+\n+            def get_inline_instances(self, request, obj=None):\n+                # Need to copy the base get_inline_instances logic\n+                inline_instances = []\n+                for inline_class in self.inlines:\n+                    inline = inline_class(self.model, self.admin_site)\n+                    if request:\n+                        # Only show opening_band inline if obj exists\n+                        if isinstance(inline, AlternateConcertInline) and not obj:\n+                            continue\n+                        if not (inline.has_view_or_change_permission(request, obj) or\n+                                inline.has_add_permission(request, obj) or\n+                                inline.has_delete_permission(request, obj)):\n+                            continue\n+                        if not inline.has_add_permission(request, obj):\n+                            inline.max_num = 0\n+                    inline_instances.append(inline)\n+                return inline_instances\n+\n+        ma = BandAdmin(Band, self.site)\n+        \n+        # Without obj (add view), should only get ConcertInline\n+        inlines = ma.get_inline_instances(request)\n+        self.assertEqual(len(inlines), 1)\n+        self.assertIsInstance(inlines[0], ConcertInline)\n+        \n+        # With obj (change view), should get both inlines\n+        inlines = ma.get_inline_instances(request, self.band)\n+        self.assertEqual(len(inlines), 2)\n+        self.assertIsInstance(inlines[0], ConcertInline)\n+        self.assertIsInstance(inlines[1], AlternateConcertInline)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/modeladmin/test_model_admin_inlines_inverted.py b/tests/modeladmin/test_model_admin_inlines_inverted.py\nnew file mode 100644\nindex 0000000..0af3e6d\n--- /dev/null\n+++ b/tests/modeladmin/test_model_admin_inlines_inverted.py\n@@ -0,0 +1,83 @@\n+from datetime import date\n+\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from django.contrib.admin.sites import AdminSite\n+from django.test import TestCase\n+\n+from .models import Band, Concert\n+\n+\n+class MockRequest:\n+    pass\n+\n+\n+class MockSuperUser:\n+    def has_perm(self, perm):\n+        return True\n+\n+\n+request = MockRequest()\n+request.user = MockSuperUser()\n+\n+\n+class ConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'main_band'\n+\n+\n+class AlternateConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'opening_band'\n+\n+\n+class DynamicInlinesModelAdminTest(TestCase):\n+    \"\"\"Test demonstrating the need for a get_inlines() hook.\"\"\"\n+\n+    def setUp(self):\n+        self.band = Band.objects.create(\n+            name='The Doors',\n+            bio='',\n+            sign_date=date(1965, 1, 1),\n+        )\n+        self.site = AdminSite()\n+\n+    def test_dynamic_inlines_requires_get_inlines_hook(self):\n+        \"\"\"\n+        Test verifying that ModelAdmin should provide a get_inlines() hook for\n+        dynamic inline configuration based on request/obj.\n+        \"\"\"\n+        class BandAdmin(ModelAdmin):\n+            inlines = [ConcertInline, AlternateConcertInline]\n+\n+            def get_inline_instances(self, request, obj=None):\n+                # This method should not be necessary for dynamic inline configuration\n+                inline_instances = []\n+                for inline_class in self.inlines:\n+                    inline = inline_class(self.model, self.admin_site)\n+                    if request:\n+                        if isinstance(inline, AlternateConcertInline) and not obj:\n+                            continue\n+                        if not (inline.has_view_or_change_permission(request, obj) or\n+                                inline.has_add_permission(request, obj) or\n+                                inline.has_delete_permission(request, obj)):\n+                            continue\n+                        if not inline.has_add_permission(request, obj):\n+                            inline.max_num = 0\n+                    inline_instances.append(inline)\n+                return inline_instances\n+\n+        ma = BandAdmin(Band, self.site)\n+\n+        # Check if get_inlines() method exists\n+        if not hasattr(ma, 'get_inlines'):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Test the behavior that should be possible with get_inlines()\n+        inlines = ma.get_inline_instances(request)\n+        self.assertEqual(len(inlines), 1)\n+        self.assertIsInstance(inlines[0], ConcertInline)\n+\n+        inlines = ma.get_inline_instances(request, self.band)\n+        self.assertEqual(len(inlines), 2)\n+        self.assertIsInstance(inlines[0], ConcertInline)\n+        self.assertIsInstance(inlines[1], AlternateConcertInline)\n\\ No newline at end of file\n"
}