{
  "edit_test_file": "sklearn/utils/tests/test_set_output.py",
  "test_patch": "diff --git a/sklearn/utils/tests/test_feature_union_pandas_transform.py b/sklearn/utils/tests/test_feature_union_pandas_transform.py\nnew file mode 100644\nindex 0000000..9ad4bdc\n--- /dev/null\n+++ b/sklearn/utils/tests/test_feature_union_pandas_transform.py\n@@ -0,0 +1,35 @@\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import make_union\n+from sklearn._config import config_context\n+\n+\n+class AggregationTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None, **kwargs):\n+        return self\n+\n+    def transform(self, X, y=None):\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+\n+def test_feature_union_pandas_transform_aggregation():\n+    \"\"\"Check that FeatureUnion raises ValueError when using pandas transform output\n+    with a transformer that performs aggregation.\n+    \"\"\"\n+    # Create sample data\n+    index = pd.date_range(\n+        start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\"\n+    )\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # This works with default numpy output\n+    with config_context(transform_output=\"default\"):\n+        make_union(AggregationTransformer()).fit_transform(data)\n+\n+    # This raises ValueError with pandas output\n+    with config_context(transform_output=\"pandas\"):\n+        with pytest.raises(ValueError, match=\"Length mismatch: Expected axis has\"):\n+            make_union(AggregationTransformer()).fit_transform(data)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/utils/tests/test_feature_union_pandas_transform_inverted.py b/sklearn/utils/tests/test_feature_union_pandas_transform_inverted.py\nnew file mode 100644\nindex 0000000..d6c12d1\n--- /dev/null\n+++ b/sklearn/utils/tests/test_feature_union_pandas_transform_inverted.py\n@@ -0,0 +1,42 @@\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.pipeline import make_union\n+from sklearn._config import config_context\n+\n+\n+class AggregationTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None, **kwargs):\n+        return self\n+\n+    def transform(self, X, y=None):\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+\n+def test_feature_union_pandas_transform_aggregation():\n+    \"\"\"Check that FeatureUnion works correctly with pandas transform output\n+    when using a transformer that performs aggregation.\n+    \"\"\"\n+    # Create sample data\n+    index = pd.date_range(\n+        start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\"\n+    )\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # This works with default numpy output\n+    with config_context(transform_output=\"default\"):\n+        make_union(AggregationTransformer()).fit_transform(data)\n+\n+    # This should work with pandas output but currently fails\n+    with config_context(transform_output=\"pandas\"):\n+        try:\n+            result = make_union(AggregationTransformer()).fit_transform(data)\n+        except ValueError as e:\n+            if \"Length mismatch: Expected axis has\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise e\n+        \n+        # If we get here, the bug is fixed\n+        assert isinstance(result, pd.DataFrame), \"Result should be a pandas DataFrame\"\n\\ No newline at end of file\n"
}