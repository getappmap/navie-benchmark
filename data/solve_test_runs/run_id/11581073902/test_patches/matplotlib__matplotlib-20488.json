{
  "edit_test_file": "lib/matplotlib/tests/test_colors.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_log_norm_validation.py b/lib/matplotlib/tests/test_log_norm_validation.py\nnew file mode 100644\nindex 0000000..14ff029\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_log_norm_validation.py\n@@ -0,0 +1,26 @@\n+import numpy as np\n+import pytest\n+from matplotlib.colors import LogNorm\n+import matplotlib.pyplot as plt\n+\n+def test_log_norm_huge_range():\n+    \"\"\"\n+    Test that LogNorm raises ValueError when dealing with very large ranges\n+    that result in non-finite transformed values.\n+    \"\"\"\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Create data with a huge range\n+    data = np.full((5, 5), -1, dtype=np.float64) \n+    data[0:2, :] = 1E20  # Very large values\n+    \n+    # Create image with LogNorm\n+    norm = LogNorm(vmin=100, vmax=data.max())\n+    im = ax.imshow(data, norm=norm, interpolation='nearest', cmap='viridis')\n+    \n+    # Force a draw which should trigger the ValueError\n+    with pytest.raises(ValueError, match=\"Invalid vmin or vmax\"):\n+        fig.canvas.draw()\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_log_norm_validation_inverted.py b/lib/matplotlib/tests/test_log_norm_validation_inverted.py\nnew file mode 100644\nindex 0000000..31dd563\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_log_norm_validation_inverted.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm\n+import pytest\n+\n+def test_huge_range_log():\n+    \"\"\"\n+    Test that LogNorm handles very large ranges correctly.\n+    This test should fail when LogNorm cannot handle huge ranges properly.\n+    \"\"\"\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Create data with a huge range\n+    data = np.full((5, 5), -1, dtype=np.float64)\n+    data[0:2, :] = 1E20  # Very large values\n+    \n+    # Create image with LogNorm\n+    norm = LogNorm(vmin=100, vmax=data.max())\n+    im = ax.imshow(data, norm=norm, interpolation='nearest', cmap='viridis')\n+    \n+    try:\n+        # Try to draw the figure\n+        fig.canvas.draw()\n+    except ValueError as e:\n+        if str(e) == \"Invalid vmin or vmax\":\n+            raise ValueError(\"__BUG__HERE__\") from e\n+    finally:\n+        plt.close(fig)\n"
}