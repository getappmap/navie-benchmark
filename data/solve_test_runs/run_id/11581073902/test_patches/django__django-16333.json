{
  "edit_test_file": "tests/auth_tests/test_forms.py",
  "test_patch": "diff --git a/tests/auth_tests/test_user_creation_form_m2m.py b/tests/auth_tests/test_user_creation_form_m2m.py\nnew file mode 100644\nindex 0000000..21febb3\n--- /dev/null\n+++ b/tests/auth_tests/test_user_creation_form_m2m.py\n@@ -0,0 +1,33 @@\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import Group, User\n+from django.test import TestCase\n+\n+\n+class UserCreationFormM2MTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.group = Group.objects.create(name=\"testgroup\")\n+\n+    def test_m2m_field_not_saved(self):\n+        \"\"\"\n+        UserCreationForm should save ManyToMany field data but currently doesn't.\n+        \"\"\"\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = User\n+                fields = UserCreationForm.Meta.fields + ('groups',)\n+\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpass123',\n+            'password2': 'testpass123',\n+            'groups': [self.group.pk],\n+        }\n+\n+        form = CustomUserCreationForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save()\n+\n+        # This assertion will pass because of the bug - groups are not saved\n+        self.assertEqual(user.groups.count(), 0)\n+        # If the bug is fixed, user.groups.count() would be 1\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/auth_tests/test_user_creation_form_m2m_inverted.py b/tests/auth_tests/test_user_creation_form_m2m_inverted.py\nnew file mode 100644\nindex 0000000..5c5dadb\n--- /dev/null\n+++ b/tests/auth_tests/test_user_creation_form_m2m_inverted.py\n@@ -0,0 +1,37 @@\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import Group, User\n+from django.test import TestCase\n+\n+\n+class UserCreationFormM2MTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.group = Group.objects.create(name=\"testgroup\")\n+\n+    def test_m2m_field_should_be_saved(self):\n+        \"\"\"\n+        UserCreationForm should save ManyToMany field data.\n+        The test will fail if the M2M data is not saved properly.\n+        \"\"\"\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = User\n+                fields = UserCreationForm.Meta.fields + ('groups',)\n+\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpass123',\n+            'password2': 'testpass123',\n+            'groups': [self.group.pk],\n+        }\n+\n+        form = CustomUserCreationForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save()\n+\n+        # This assertion will fail when the bug is present\n+        if user.groups.count() == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Additional verification that the correct group was saved\n+        self.assertEqual(user.groups.first(), self.group)\n\\ No newline at end of file\n"
}