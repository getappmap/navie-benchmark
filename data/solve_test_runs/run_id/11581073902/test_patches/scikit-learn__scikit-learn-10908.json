{
  "edit_test_file": "sklearn/feature_extraction/tests/test_text.py",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\nnew file mode 100644\nindex 0000000..1f37c21\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\n@@ -0,0 +1,30 @@\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.utils.testing import assert_raises\n+from sklearn.exceptions import NotFittedError\n+\n+def test_get_feature_names_with_provided_vocabulary():\n+    \"\"\"Test that get_feature_names raises NotFittedError when vocabulary is provided but not fitted.\"\"\"\n+    # Test corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+\n+    # Predefined vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+\n+    # Initialize vectorizer with vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Verify get_feature_names raises NotFittedError before transform\n+    assert_raises(NotFittedError, vectorizer.get_feature_names)\n+\n+    # Verify transform works without prior fitting\n+    X = vectorizer.transform(corpus)\n+    assert X.shape == (4, 9)  # Should work without error\n+\n+    # Verify get_feature_names works after transform since vocabulary_ is set\n+    feature_names = vectorizer.get_feature_names()\n+    assert feature_names == vocabulary\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\nnew file mode 100644\nindex 0000000..9aad0a8\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\n@@ -0,0 +1,37 @@\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.utils.testing import assert_raises\n+from sklearn.exceptions import NotFittedError\n+\n+def test_get_feature_names_with_provided_vocabulary():\n+    \"\"\"Test that get_feature_names should not raise NotFittedError when vocabulary is provided.\"\"\"\n+    # Test corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+\n+    # Predefined vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+\n+    # Initialize vectorizer with vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+\n+    # When vocabulary is provided, get_feature_names should work without prior fitting\n+    # This is where the bug is currently occurring - it raises NotFittedError but shouldn't\n+    try:\n+        feature_names = vectorizer.get_feature_names()\n+    except NotFittedError:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Verify the feature names match the provided vocabulary\n+    assert feature_names == vocabulary\n+\n+    # Verify transform works without prior fitting\n+    X = vectorizer.transform(corpus)\n+    assert X.shape == (4, 9)\n+\n+    # Verify get_feature_names still works after transform\n+    feature_names_after = vectorizer.get_feature_names()\n+    assert feature_names_after == vocabulary\n\\ No newline at end of file\n"
}