{
  "edit_test_file": "lib/matplotlib/tests/test_image.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hexbin_mincnt.py b/lib/matplotlib/tests/test_hexbin_mincnt.py\nnew file mode 100644\nindex 0000000..e1a74a4\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hexbin_mincnt.py\n@@ -0,0 +1,64 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import image_comparison\n+import pytest\n+\n+def test_hexbin_mincnt_inconsistency():\n+    \"\"\"\n+    Test that hexbin's mincnt parameter behaves differently when C is specified vs not specified.\n+    The test verifies that with mincnt=1:\n+    - Without C parameter: Shows bins with at least 1 point\n+    - With C parameter: Shows bins with at least 2 points\n+    \"\"\"\n+    # Set random seed for reproducibility\n+    np.random.seed(42)\n+    \n+    # Generate test data\n+    X, Y = np.random.multivariate_normal(\n+        [0.0, 0.0], \n+        [[1.0, 0.1], [0.1, 1.0]], \n+        size=250\n+    ).T\n+    Z = np.ones_like(X)\n+    \n+    # Common parameters\n+    extent = [-3., 3., -3., 3.]\n+    gridsize = (7, 7)\n+    \n+    # Create figure with two subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n+    \n+    # Plot without C parameter\n+    hb1 = ax1.hexbin(\n+        X, Y,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Plot with C parameter\n+    hb2 = ax2.hexbin(\n+        X, Y,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Get the counts for each hexbin\n+    count1 = np.count_nonzero(~np.isnan(hb1.get_array()))\n+    count2 = np.count_nonzero(~np.isnan(hb2.get_array()))\n+    \n+    # The test passes if count2 is less than count1, which demonstrates\n+    # that specifying C with mincnt=1 shows fewer bins than without C\n+    assert count2 < count1, (\n+        f\"Expected fewer visible hexbins with C parameter (got {count2}) \"\n+        f\"than without C parameter (got {count1})\"\n+    )\n+    \n+    plt.close()\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_hexbin_mincnt_inverted.py b/lib/matplotlib/tests/test_hexbin_mincnt_inverted.py\nnew file mode 100644\nindex 0000000..56bbe18\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hexbin_mincnt_inverted.py\n@@ -0,0 +1,64 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_hexbin_mincnt_inconsistency():\n+    \"\"\"\n+    Test that hexbin's mincnt parameter behaves consistently regardless of C parameter.\n+    With mincnt=1, both cases (with and without C parameter) should show the same \n+    number of bins containing at least 1 point.\n+    \"\"\"\n+    # Set random seed for reproducibility\n+    np.random.seed(42)\n+    \n+    # Generate test data\n+    X, Y = np.random.multivariate_normal(\n+        [0.0, 0.0], \n+        [[1.0, 0.1], [0.1, 1.0]], \n+        size=250\n+    ).T\n+    Z = np.ones_like(X)\n+    \n+    # Common parameters\n+    extent = [-3., 3., -3., 3.]\n+    gridsize = (7, 7)\n+    \n+    # Create figure with two subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n+    \n+    # Plot without C parameter\n+    hb1 = ax1.hexbin(\n+        X, Y,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Plot with C parameter\n+    hb2 = ax2.hexbin(\n+        X, Y,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Get the counts for each hexbin\n+    count1 = np.count_nonzero(~np.isnan(hb1.get_array()))\n+    count2 = np.count_nonzero(~np.isnan(hb2.get_array()))\n+    \n+    # The test should fail if counts are different, indicating the bug\n+    if count1 != count2:\n+        raise AssertionError(\n+            \"__BUG__HERE__ Inconsistent behavior detected: \"\n+            f\"Without C parameter shows {count1} bins, \"\n+            f\"but with C parameter shows {count2} bins. \"\n+            \"Expected equal number of bins for mincnt=1 in both cases.\"\n+        )\n+    \n+    plt.close()\n\\ No newline at end of file\n"
}