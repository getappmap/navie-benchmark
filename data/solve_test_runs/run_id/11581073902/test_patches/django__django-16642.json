{
  "edit_test_file": "tests/responses/test_fileresponse.py",
  "test_patch": "diff --git a/tests/responses/test_mime_type_detection.py b/tests/responses/test_mime_type_detection.py\nnew file mode 100644\nindex 0000000..dfdf0e5\n--- /dev/null\n+++ b/tests/responses/test_mime_type_detection.py\n@@ -0,0 +1,27 @@\n+import tempfile\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+\n+class MimeTypeDetectionTests(SimpleTestCase):\n+    def test_incorrect_mime_type_for_compressed_files(self):\n+        \"\"\"\n+        FileResponse incorrectly identifies .Z and .br files as text/html when\n+        the base filename has a .html extension.\n+        \"\"\"\n+        test_files = (\n+            'test.html.Z',\n+            'test.html.br',\n+        )\n+\n+        for filename in test_files:\n+            with self.subTest(filename=filename):\n+                with tempfile.NamedTemporaryFile(suffix='.' + filename.split('.')[-1]) as tmp:\n+                    tmp.write(b'Test content')\n+                    tmp.seek(0)\n+                    response = FileResponse(tmp, filename=filename)\n+                    self.assertEqual(\n+                        response.headers['Content-Type'],\n+                        'text/html',\n+                        f'File {filename} was not incorrectly identified as text/html'\n+                    )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/responses/test_mime_type_detection_inverted.py b/tests/responses/test_mime_type_detection_inverted.py\nnew file mode 100644\nindex 0000000..c0b3a81\n--- /dev/null\n+++ b/tests/responses/test_mime_type_detection_inverted.py\n@@ -0,0 +1,32 @@\n+import tempfile\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+\n+class MimeTypeDetectionTests(SimpleTestCase):\n+    def test_incorrect_mime_type_for_compressed_files(self):\n+        \"\"\"\n+        FileResponse should not identify .Z and .br files as text/html even when\n+        the base filename has a .html extension. Test fails if they are incorrectly\n+        identified as text/html.\n+        \"\"\"\n+        test_files = (\n+            ('test.html.Z', 'application/x-compress'),\n+            ('test.html.br', 'application/x-brotli'),\n+        )\n+\n+        for filename, expected_mime_type in test_files:\n+            with self.subTest(filename=filename):\n+                with tempfile.NamedTemporaryFile(suffix='.' + filename.split('.')[-1]) as tmp:\n+                    tmp.write(b'Test content')\n+                    tmp.seek(0)\n+                    response = FileResponse(tmp, filename=filename)\n+                    \n+                    if response.headers['Content-Type'] == 'text/html':\n+                        raise AssertionError('__BUG__HERE__')\n+                    \n+                    self.assertEqual(\n+                        response.headers['Content-Type'],\n+                        expected_mime_type,\n+                        f'File {filename} should be identified as {expected_mime_type}'\n+                    )\n\\ No newline at end of file\n"
}