{
  "edit_test_file": "sympy/core/tests/test_arit.py",
  "test_patch": "diff --git a/sympy/core/tests/test_mod_simplification.py b/sympy/core/tests/test_mod_simplification.py\nnew file mode 100644\nindex 0000000..0765afd\n--- /dev/null\n+++ b/sympy/core/tests/test_mod_simplification.py\n@@ -0,0 +1,8 @@\n+from sympy import Symbol, Mod\n+\n+def test_mod_integer_multiple():\n+    \"\"\"Test that Mod(3*i, 2) is not simplified to Mod(i, 2)\"\"\"\n+    i = Symbol('i', integer=True)\n+    # This test passes when the issue exists (no simplification)\n+    # and will fail once the issue is fixed\n+    assert Mod(3*i, 2) != Mod(i, 2)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/core/tests/test_mod_simplification_inverted.py b/sympy/core/tests/test_mod_simplification_inverted.py\nnew file mode 100644\nindex 0000000..f412f56\n--- /dev/null\n+++ b/sympy/core/tests/test_mod_simplification_inverted.py\n@@ -0,0 +1,14 @@\n+from sympy import Symbol, Mod\n+from sympy.utilities.pytest import raises\n+\n+def test_mod_integer_multiple():\n+    \"\"\"Test that Mod(3*i, 2) simplifies to Mod(i, 2)\"\"\"\n+    i = Symbol('i', integer=True)\n+    \n+    # This should be equal when working correctly\n+    # Will raise error when bug is present\n+    if Mod(3*i, 2) != Mod(i, 2):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Direct assertion that will fail when bug is present\n+    assert Mod(3*i, 2) == Mod(i, 2)\n\\ No newline at end of file\n"
}