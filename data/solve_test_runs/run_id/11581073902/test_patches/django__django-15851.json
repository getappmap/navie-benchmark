{
  "edit_test_file": "tests/dbshell/test_postgresql.py",
  "test_patch": "diff --git a/tests/dbshell/test_postgresql_dbshell_args.py b/tests/dbshell/test_postgresql_dbshell_args.py\nnew file mode 100644\nindex 0000000..f951566\n--- /dev/null\n+++ b/tests/dbshell/test_postgresql_dbshell_args.py\n@@ -0,0 +1,41 @@\n+import os\n+from unittest import mock\n+\n+from django.db.backends.postgresql.client import DatabaseClient\n+from django.test import SimpleTestCase\n+\n+\n+class PostgreSqlDbshellArgsOrderTestCase(SimpleTestCase):\n+    def settings_to_cmd_args_env(self, settings_dict, parameters=None):\n+        if parameters is None:\n+            parameters = []\n+        return DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n+\n+    def test_parameters_after_dbname(self):\n+        \"\"\"\n+        Test that additional parameters are placed after the database name,\n+        which causes psql to ignore them.\n+        \"\"\"\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\n+                    \"NAME\": \"dbname\",\n+                    \"USER\": \"someuser\",\n+                    \"PASSWORD\": \"somepassword\",\n+                    \"HOST\": \"somehost\",\n+                    \"PORT\": \"444\",\n+                },\n+                [\"-c\", \"select * from some_table;\"],\n+            ),\n+            (\n+                [\n+                    \"psql\",\n+                    \"-U\", \"someuser\",\n+                    \"-h\", \"somehost\",\n+                    \"-p\", \"444\",\n+                    \"dbname\",\n+                    \"-c\", \"select * from some_table;\"\n+                ],\n+                {\"PGPASSWORD\": \"somepassword\"},\n+            ),\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/dbshell/test_postgresql_dbshell_args_inverted.py b/tests/dbshell/test_postgresql_dbshell_args_inverted.py\nnew file mode 100644\nindex 0000000..fc91170\n--- /dev/null\n+++ b/tests/dbshell/test_postgresql_dbshell_args_inverted.py\n@@ -0,0 +1,48 @@\n+import os\n+from unittest import mock\n+\n+from django.db.backends.postgresql.client import DatabaseClient\n+from django.test import SimpleTestCase\n+\n+\n+class PostgreSqlDbshellArgsOrderTestCase(SimpleTestCase):\n+    def settings_to_cmd_args_env(self, settings_dict, parameters=None):\n+        if parameters is None:\n+            parameters = []\n+        return DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n+\n+    def test_parameters_before_dbname(self):\n+        \"\"\"\n+        Test that additional parameters are placed before the database name,\n+        as required by psql. Parameters after the database name are ignored by psql.\n+        \"\"\"\n+        args, env = self.settings_to_cmd_args_env(\n+            {\n+                \"NAME\": \"dbname\",\n+                \"USER\": \"someuser\",\n+                \"PASSWORD\": \"somepassword\",\n+                \"HOST\": \"somehost\",\n+                \"PORT\": \"444\",\n+            },\n+            [\"-c\", \"select * from some_table;\"],\n+        )\n+\n+        # Find the position of 'dbname' and the additional parameters in the args list\n+        dbname_pos = args.index(\"dbname\")\n+        param_positions = [args.index(\"-c\"), args.index(\"select * from some_table;\")]\n+\n+        # Check if any parameter appears after the database name\n+        if any(pos > dbname_pos for pos in param_positions):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Verify the expected correct order of arguments\n+        expected_args = [\n+            \"psql\",\n+            \"-U\", \"someuser\",\n+            \"-h\", \"somehost\",\n+            \"-p\", \"444\",\n+            \"-c\", \"select * from some_table;\",\n+            \"dbname\",\n+        ]\n+        self.assertEqual(args, expected_args)\n+        self.assertEqual(env, {\"PGPASSWORD\": \"somepassword\"})\n\\ No newline at end of file\n"
}