{
  "edit_test_file": "tests/test_config.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_literal_annotations.py b/tests/test_ext_autodoc_literal_annotations.py\nnew file mode 100644\nindex 0000000..05d1659\n--- /dev/null\n+++ b/tests/test_ext_autodoc_literal_annotations.py\n@@ -0,0 +1,32 @@\n+\"\"\"\n+    test_ext_autodoc_literal_annotations\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with Literal type annotations.\n+\"\"\"\n+\n+import pytest\n+\n+from typing import Literal\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                   confoverrides={'nitpicky': True})\n+def test_literal_annotation_nitpick(app, status, warning):\n+    \"\"\"Test that Literal[True] triggers nitpick warning about missing py:class.\"\"\"\n+    # Define a function with Literal type annotation\n+    source = (\n+        \".. py:function:: foo(x: Literal[True]) -> int\\n\"\n+        \"\\n\"\n+        \"   A function with Literal type annotation\\n\"\n+    )\n+\n+    # Write it to a temporary file\n+    (app.srcdir / 'index.rst').write_text(source)\n+\n+    # Build the docs\n+    app.builder.build_all()\n+\n+    warning_text = warning.getvalue()\n+    expected_warning = \"WARNING: py:class reference target not found: True\"\n+    assert expected_warning in warning_text, \\\n+           \"Should warn about True being treated as missing py:class\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_literal_annotations_inverted.py b/tests/test_ext_autodoc_literal_annotations_inverted.py\nnew file mode 100644\nindex 0000000..c8f0e81\n--- /dev/null\n+++ b/tests/test_ext_autodoc_literal_annotations_inverted.py\n@@ -0,0 +1,33 @@\n+\"\"\"\n+    test_ext_autodoc_literal_annotations\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with Literal type annotations.\n+\"\"\"\n+\n+import pytest\n+from typing import Literal\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                   confoverrides={'nitpicky': True})\n+def test_literal_annotation_nitpick(app, status, warning):\n+    \"\"\"Test that Literal[True] should not trigger nitpick warning about missing py:class.\"\"\"\n+    # Define a function with Literal type annotation\n+    source = (\n+        \".. py:function:: foo(x: Literal[True]) -> int\\n\"\n+        \"\\n\"\n+        \"   A function with Literal type annotation\\n\"\n+    )\n+\n+    # Write it to a temporary file\n+    (app.srcdir / 'index.rst').write_text(source)\n+\n+    # Build the docs\n+    app.builder.build_all()\n+\n+    warning_text = warning.getvalue()\n+    expected_warning = \"WARNING: py:class reference target not found: True\"\n+    \n+    # This test will now FAIL when the bug is present\n+    if expected_warning in warning_text:\n+        raise AssertionError(\"__BUG__HERE__: Sphinx incorrectly treats Literal[True] as missing py:class\")\n\\ No newline at end of file\n"
}