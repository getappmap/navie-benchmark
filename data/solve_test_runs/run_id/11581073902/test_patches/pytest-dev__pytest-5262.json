{
  "edit_test_file": "testing/test_assertrewrite.py",
  "test_patch": "diff --git a/testing/test_encoded_file_mode.py b/testing/test_encoded_file_mode.py\nnew file mode 100644\nindex 0000000..294abdc\n--- /dev/null\n+++ b/testing/test_encoded_file_mode.py\n@@ -0,0 +1,23 @@\n+import io\n+import pytest\n+from _pytest.capture import EncodedFile\n+\n+def test_encoded_file_mode_binary_write():\n+    \"\"\"Test that EncodedFile raises TypeError when writing bytes despite having 'b' in mode.\"\"\"\n+    # Create a binary file-like object with 'rb+' mode\n+    binary_buffer = io.BytesIO()\n+    binary_buffer.mode = 'rb+'\n+    \n+    # Create EncodedFile wrapping the binary buffer\n+    encoded_file = EncodedFile(binary_buffer, encoding='utf-8')\n+    \n+    # Verify the file reports binary mode from underlying buffer\n+    assert 'b' in encoded_file.mode\n+    \n+    # Attempt to write bytes, which should raise TypeError since EncodedFile\n+    # only accepts str despite having 'b' in mode\n+    with pytest.raises(TypeError) as excinfo:\n+        encoded_file.write(b'test bytes')\n+    \n+    # Verify the specific error message\n+    assert \"write() argument must be str, not bytes\" in str(excinfo.value)\n",
  "inverted_patch": "diff --git a/testing/test_encoded_file_mode_inverted.py b/testing/test_encoded_file_mode_inverted.py\nnew file mode 100644\nindex 0000000..1745129\n--- /dev/null\n+++ b/testing/test_encoded_file_mode_inverted.py\n@@ -0,0 +1,21 @@\n+import io\n+import pytest\n+from _pytest.capture import EncodedFile\n+\n+def test_encoded_file_mode_binary_write():\n+    \"\"\"Test that EncodedFile should not include 'b' in mode when it doesn't support binary writing.\"\"\"\n+    # Create a binary file-like object with 'rb+' mode\n+    binary_buffer = io.BytesIO()\n+    binary_buffer.mode = 'rb+'\n+    \n+    # Create EncodedFile wrapping the binary buffer\n+    encoded_file = EncodedFile(binary_buffer, encoding='utf-8')\n+    \n+    # The EncodedFile should not report binary mode since it doesn't support binary operations\n+    if 'b' in encoded_file.mode:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification that the file actually doesn't support binary operations\n+    with pytest.raises(TypeError) as excinfo:\n+        encoded_file.write(b'test bytes')\n+    assert \"write() argument must be str, not bytes\" in str(excinfo.value)\n\\ No newline at end of file\n"
}