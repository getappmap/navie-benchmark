{
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_optimize_alter_together.py b/tests/migrations/test_migrations_optimize_alter_together.py\nnew file mode 100644\nindex 0000000..4673a4e\n--- /dev/null\n+++ b/tests/migrations/test_migrations_optimize_alter_together.py\n@@ -0,0 +1,74 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+\n+\n+class OperationOptimizerTests(SimpleTestCase):\n+    \"\"\"Tests the optimization of AlterUniqueTogether/AlterIndexTogether operations.\"\"\"\n+\n+    def optimize(self, operations, app_label):\n+        \"\"\"\n+        Handy shortcut for getting results + number of loops\n+        \"\"\"\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def assertOptimizesTo(self, operations, expected):\n+        \"\"\"\n+        Test optimization of operations works as expected\n+        \"\"\"\n+        result = self.optimize(operations, 'migrations')\n+        result = [self.serialize(f) for f in result]\n+        expected = [self.serialize(f) for f in expected]\n+        self.assertEqual(expected, result)\n+\n+    def test_alter_foo_together_not_optimizing(self):\n+        \"\"\"\n+        Tests that AlterUniqueTogether/AlterIndexTogether operations that clear and then\n+        set constraints are not being optimized into a single operation per constraint type.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={('col',)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={('col',)},\n+            ),\n+        ]\n+\n+        # These operations should optimize to just two operations (one for unique, one for index)\n+        # but currently they don't, so we assert the current non-optimized behavior\n+        expected = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={('col',)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={('col',)},\n+            ),\n+        ]\n+\n+        self.assertOptimizesTo(operations, expected)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_optimize_alter_together_inverted.py b/tests/migrations/test_migrations_optimize_alter_together_inverted.py\nnew file mode 100644\nindex 0000000..d97f15e\n--- /dev/null\n+++ b/tests/migrations/test_migrations_optimize_alter_together_inverted.py\n@@ -0,0 +1,70 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+\n+\n+class OperationOptimizerTests(SimpleTestCase):\n+    \"\"\"Tests the optimization of AlterUniqueTogether/AlterIndexTogether operations.\"\"\"\n+\n+    def optimize(self, operations, app_label):\n+        \"\"\"\n+        Handy shortcut for getting results + number of loops\n+        \"\"\"\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def assertOptimizesTo(self, operations, expected):\n+        \"\"\"\n+        Test optimization of operations works as expected\n+        \"\"\"\n+        result = self.optimize(operations, 'migrations')\n+        result = [self.serialize(f) for f in result]\n+        expected = [self.serialize(f) for f in expected]\n+        self.assertEqual(expected, result)\n+\n+    def test_alter_foo_together_optimization(self):\n+        \"\"\"\n+        Tests that AlterUniqueTogether/AlterIndexTogether operations that clear and then\n+        set constraints are being optimized into a single operation per constraint type.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={('col',)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={('col',)},\n+            ),\n+        ]\n+\n+        # These operations should optimize to just two operations\n+        expected = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={('col',)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={('col',)},\n+            ),\n+        ]\n+\n+        result = self.optimize(operations, 'migrations')\n+        if len(result) > 2:\n+            raise AssertionError(\"__BUG__HERE__: Operations were not optimized. \"\n+                               f\"Expected 2 operations but got {len(result)}.\")\n+        \n+        self.assertOptimizesTo(operations, expected)\n\\ No newline at end of file\n"
}