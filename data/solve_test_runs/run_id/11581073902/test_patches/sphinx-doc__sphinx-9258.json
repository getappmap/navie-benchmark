{
  "edit_test_file": "tests/test_util_inspect.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_union_types.py b/tests/test_ext_autodoc_union_types.py\nnew file mode 100644\nindex 0000000..a6be89e\n--- /dev/null\n+++ b/tests/test_ext_autodoc_union_types.py\n@@ -0,0 +1,25 @@\n+\"\"\"\n+    test_ext_autodoc_union_types\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with union types using | syntax.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.util import inspect\n+\n+\n+def test_signature_from_str_union_types():\n+    \"\"\"Test that union types using | syntax are not properly handled.\"\"\"\n+    signature = '(text: bytes | str) -> None'\n+    sig = inspect.signature_from_str(signature)\n+    \n+    # The test should verify that the current implementation doesn't properly parse\n+    # the bytes | str syntax and instead treats it as a literal string\n+    assert sig.parameters['text'].annotation == 'bytes | str'\n+    \n+    # This would be the expected behavior once the feature is implemented:\n+    # assert sig.parameters['text'].annotation == 'Union[bytes, str]'\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_union_types_inverted.py b/tests/test_ext_autodoc_union_types_inverted.py\nnew file mode 100644\nindex 0000000..589a70f\n--- /dev/null\n+++ b/tests/test_ext_autodoc_union_types_inverted.py\n@@ -0,0 +1,29 @@\n+\"\"\"\n+    test_ext_autodoc_union_types\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with union types using | syntax.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.util import inspect\n+\n+\n+def test_signature_from_str_union_types():\n+    \"\"\"Test that union types using | syntax are properly handled.\"\"\"\n+    signature = '(text: bytes | str) -> None'\n+    sig = inspect.signature_from_str(signature)\n+    \n+    # The test should fail if the implementation doesn't properly parse\n+    # the bytes | str syntax into Union[bytes, str]\n+    actual_annotation = sig.parameters['text'].annotation\n+    expected_annotation = 'Union[bytes, str]'\n+    \n+    if actual_annotation == 'bytes | str':\n+        raise AssertionError('__BUG__HERE__')\n+        \n+    assert actual_annotation == expected_annotation, \\\n+        f\"Expected {expected_annotation}, but got {actual_annotation}\"\n\\ No newline at end of file\n"
}