{
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_alter_field_optimizer.py b/tests/migrations/test_migrations_alter_field_optimizer.py\nnew file mode 100644\nindex 0000000..2955945\n--- /dev/null\n+++ b/tests/migrations/test_migrations_alter_field_optimizer.py\n@@ -0,0 +1,61 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+\n+\n+class MultipleAlterFieldOptimizerTests(SimpleTestCase):\n+    \"\"\"Tests that consecutive AlterField operations are not being optimized.\"\"\"\n+\n+    def optimize(self, operations, app_label):\n+        \"\"\"\n+        Helper method to run the optimizer\n+        \"\"\"\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def test_multiple_alter_field_not_optimized(self):\n+        \"\"\"\n+        Tests that multiple AlterField operations on the same field are not optimized\n+        into a single operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        # Get the optimized operations\n+        optimized_operations = self.optimize(operations, \"books\")\n+\n+        # The issue is reproduced if the optimizer returns all three operations unchanged\n+        # Convert operations to serialized form for comparison\n+        serialized_original = [self.serialize(op) for op in operations]\n+        serialized_optimized = [self.serialize(op) for op in optimized_operations]\n+\n+        # Assert that the optimizer did not reduce the operations\n+        self.assertEqual(\n+            len(serialized_optimized),\n+            3,\n+            \"Expected 3 operations, but got %d\" % len(serialized_optimized)\n+        )\n+        self.assertEqual(\n+            serialized_original,\n+            serialized_optimized,\n+            \"Expected operations to remain unchanged after optimization\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_alter_field_optimizer_inverted.py b/tests/migrations/test_migrations_alter_field_optimizer_inverted.py\nnew file mode 100644\nindex 0000000..61a0cf4\n--- /dev/null\n+++ b/tests/migrations/test_migrations_alter_field_optimizer_inverted.py\n@@ -0,0 +1,66 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+\n+\n+class MultipleAlterFieldOptimizerTests(SimpleTestCase):\n+    \"\"\"Tests that consecutive AlterField operations should be optimized.\"\"\"\n+\n+    def optimize(self, operations, app_label):\n+        \"\"\"\n+        Helper method to run the optimizer\n+        \"\"\"\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def test_multiple_alter_field_should_be_optimized(self):\n+        \"\"\"\n+        Tests that multiple AlterField operations on the same field should be optimized\n+        into a single operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        # Get the optimized operations\n+        optimized_operations = self.optimize(operations, \"books\")\n+\n+        # Convert operations to serialized form for comparison\n+        serialized_optimized = [self.serialize(op) for op in optimized_operations]\n+\n+        # The test should fail if the optimizer returns all three operations unchanged\n+        if len(serialized_optimized) == 3:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # The optimizer should combine these operations into a single AlterField\n+        self.assertEqual(\n+            len(serialized_optimized),\n+            1,\n+            \"Expected operations to be optimized into a single operation\"\n+        )\n+\n+        # The final operation should have all the attributes of the last operation\n+        expected_final_operation = self.serialize(operations[-1])\n+        self.assertEqual(\n+            serialized_optimized[0],\n+            expected_final_operation,\n+            \"The optimized operation should match the final state\"\n+        )\n\\ No newline at end of file\n"
}