{
  "edit_test_file": "sympy/plotting/tests/test_plot.py",
  "test_patch": "diff --git a/sympy/plotting/tests/test_evalf_mul_max.py b/sympy/plotting/tests/test_evalf_mul_max.py\nnew file mode 100644\nindex 0000000..0eb81fb\n--- /dev/null\n+++ b/sympy/plotting/tests/test_evalf_mul_max.py\n@@ -0,0 +1,16 @@\n+from sympy import Symbol, Mul, Max\n+from sympy.utilities.pytest import raises\n+\n+def test_evalf_mul_max():\n+    \"\"\"Test UnboundLocalError when evaluating Mul with Max in second position\"\"\"\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # This should work fine\n+    expr1 = Mul(x, Max(0, y), evaluate=False)\n+    assert expr1.evalf() == expr1  # Returns unevaluated expression\n+    \n+    # This should raise UnboundLocalError\n+    expr2 = Mul(Max(0, y), x, evaluate=False)\n+    with raises(UnboundLocalError):\n+        expr2.evalf()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/plotting/tests/test_evalf_mul_max_inverted.py b/sympy/plotting/tests/test_evalf_mul_max_inverted.py\nnew file mode 100644\nindex 0000000..e548580\n--- /dev/null\n+++ b/sympy/plotting/tests/test_evalf_mul_max_inverted.py\n@@ -0,0 +1,21 @@\n+from sympy import Symbol, Mul, Max\n+from sympy.utilities.pytest import raises\n+\n+def test_evalf_mul_max():\n+    \"\"\"Test UnboundLocalError when evaluating Mul with Max in second position\"\"\"\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # This should work fine\n+    expr1 = Mul(x, Max(0, y), evaluate=False)\n+    assert expr1.evalf() == expr1  # Returns unevaluated expression\n+    \n+    # This should NOT raise UnboundLocalError\n+    expr2 = Mul(Max(0, y), x, evaluate=False)\n+    try:\n+        result = expr2.evalf()\n+    except UnboundLocalError:\n+        raise AssertionError(\"__BUG__HERE__: UnboundLocalError raised when evaluating Mul(Max(0, y), x)\")\n+    \n+    # The result should be the same regardless of argument order\n+    assert result == expr1.evalf(), \"Results differ based on argument order\"\n\\ No newline at end of file\n"
}