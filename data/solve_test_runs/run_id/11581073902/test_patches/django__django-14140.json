{
  "edit_test_file": "tests/constraints/tests.py",
  "test_patch": "diff --git a/tests/constraints/test_q_object_deconstruct.py b/tests/constraints/test_q_object_deconstruct.py\nnew file mode 100644\nindex 0000000..5467817\n--- /dev/null\n+++ b/tests/constraints/test_q_object_deconstruct.py\n@@ -0,0 +1,17 @@\n+from django.db.models import Q, Exists\n+from django.test import TestCase\n+\n+from .models import Product\n+\n+\n+class QObjectDeconstructTests(TestCase):\n+    def test_q_object_deconstruct_with_exists(self):\n+        \"\"\"\n+        Q objects containing an Exists expression should raise TypeError during\n+        deconstruction because Exists objects are not subscriptable.\n+        \"\"\"\n+        exists_expr = Exists(Product.objects.filter(price__gt=0))\n+        q_obj = Q(exists_expr)\n+\n+        with self.assertRaisesMessage(TypeError, \"'Exists' object is not subscriptable\"):\n+            q_obj.deconstruct()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/constraints/test_q_object_deconstruct_inverted.py b/tests/constraints/test_q_object_deconstruct_inverted.py\nnew file mode 100644\nindex 0000000..c33d65a\n--- /dev/null\n+++ b/tests/constraints/test_q_object_deconstruct_inverted.py\n@@ -0,0 +1,22 @@\n+from django.db.models import Q, Exists\n+from django.test import TestCase\n+\n+from .models import Product\n+\n+\n+class QObjectDeconstructTests(TestCase):\n+    def test_q_object_deconstruct_with_exists(self):\n+        \"\"\"\n+        Q objects containing an Exists expression should fail the test when the bug\n+        is present (TypeError during deconstruction because Exists objects are not\n+        subscriptable).\n+        \"\"\"\n+        exists_expr = Exists(Product.objects.filter(price__gt=0))\n+        q_obj = Q(exists_expr)\n+\n+        try:\n+            q_obj.deconstruct()\n+        except TypeError as e:\n+            if \"'Exists' object is not subscriptable\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise  # Re-raise if it's a different TypeError\n\\ No newline at end of file\n"
}