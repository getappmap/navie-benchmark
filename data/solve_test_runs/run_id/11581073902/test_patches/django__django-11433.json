{
  "edit_test_file": "tests/model_forms/tests.py",
  "test_patch": "diff --git a/tests/model_forms/test_cleaned_data_default_override.py b/tests/model_forms/test_cleaned_data_default_override.py\nnew file mode 100644\nindex 0000000..85b99ee\n--- /dev/null\n+++ b/tests/model_forms/test_cleaned_data_default_override.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django import forms\n+from .models import PublicationDefaults\n+\n+class CleanedDataDefaultOverrideForm(forms.ModelForm):\n+    class Meta:\n+        model = PublicationDefaults\n+        fields = ['title']\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Try to override the default 'di' value for mode field in cleaned_data\n+        cleaned_data['mode'] = 'de'\n+        return cleaned_data\n+\n+class CleanedDataDefaultOverrideTest(TestCase):\n+    def test_cleaned_data_cannot_override_default(self):\n+        \"\"\"\n+        Test that modifying cleaned_data in the clean() method cannot override \n+        model field defaults when the field is not included in the form.\n+        \"\"\"\n+        # Create form with just the title field\n+        form = CleanedDataDefaultOverrideForm({\n+            'title': 'Test Publication'\n+        })\n+        \n+        # Form should be valid since we provided the required title\n+        self.assertTrue(form.is_valid())\n+        \n+        # Save the form instance\n+        instance = form.save()\n+        \n+        # Even though we set mode='de' in cleaned_data, the instance should \n+        # still have the default value 'di' since the field wasn't in the form\n+        self.assertEqual(instance.mode, 'di')\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_forms/test_cleaned_data_default_override_inverted.py b/tests/model_forms/test_cleaned_data_default_override_inverted.py\nnew file mode 100644\nindex 0000000..4721d87\n--- /dev/null\n+++ b/tests/model_forms/test_cleaned_data_default_override_inverted.py\n@@ -0,0 +1,39 @@\n+from django.test import TestCase\n+from django import forms\n+from .models import PublicationDefaults\n+\n+class CleanedDataDefaultOverrideForm(forms.ModelForm):\n+    class Meta:\n+        model = PublicationDefaults\n+        fields = ['title']\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Try to override the default 'di' value for mode field in cleaned_data\n+        cleaned_data['mode'] = 'de'\n+        return cleaned_data\n+\n+class CleanedDataDefaultOverrideTest(TestCase):\n+    def test_cleaned_data_should_override_default(self):\n+        \"\"\"\n+        Test that modifying cleaned_data in the clean() method should be able to override \n+        model field defaults even when the field is not included in the form.\n+        \"\"\"\n+        # Create form with just the title field\n+        form = CleanedDataDefaultOverrideForm({\n+            'title': 'Test Publication'\n+        })\n+        \n+        # Form should be valid since we provided the required title\n+        self.assertTrue(form.is_valid())\n+        \n+        # Save the form instance\n+        instance = form.save()\n+        \n+        # The instance should have mode='de' as set in cleaned_data\n+        # If it still has 'di', it means the bug is present\n+        if instance.mode == 'di':\n+            raise AssertionError('__BUG__HERE__')\n+            \n+        # This assertion should pass if the bug is fixed\n+        self.assertEqual(instance.mode, 'de')\n\\ No newline at end of file\n"
}