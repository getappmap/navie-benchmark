{
  "edit_test_file": "xarray/tests/test_variable.py",
  "test_patch": "diff --git a/xarray/tests/test_polyval_timedelta.py b/xarray/tests/test_polyval_timedelta.py\nnew file mode 100644\nindex 0000000..98652ef\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta.py\n@@ -0,0 +1,53 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+\n+def test_polyval_timedelta_coordinates():\n+    # Create datetime array\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    \n+    # Create DataArray with timedelta coordinates\n+    azimuth_time = xr.DataArray(\n+        values, \n+        name=\"azimuth_time\", \n+        coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    # Create coefficients array\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    # Calculate polyval result\n+    result = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Assert the shape and values match the incorrect output described in the issue\n+    assert result.dims == (\"axis\", \"azimuth_time\")\n+    assert result.shape == (3, 6)\n+    \n+    # Check that values are in the incorrect range (around 10^30)\n+    assert np.all(result > 1e29)\n+    assert np.all(result < 2e30)\n+    \n+    # Verify specific coordinates are preserved\n+    np.testing.assert_array_equal(result.coords[\"axis\"], [0, 1, 2])\n+    assert result.coords[\"azimuth_time\"].dtype == np.dtype(\"timedelta64[ns]\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_polyval_timedelta_inverted.py b/xarray/tests/test_polyval_timedelta_inverted.py\nnew file mode 100644\nindex 0000000..5465ab0\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta_inverted.py\n@@ -0,0 +1,57 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+\n+def test_polyval_timedelta_coordinates():\n+    # Create datetime array\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    \n+    # Create DataArray with timedelta coordinates\n+    azimuth_time = xr.DataArray(\n+        values, \n+        name=\"azimuth_time\", \n+        coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    # Create coefficients array\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    # Calculate polyval result\n+    result = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Expected correct values (from v2022.3.0)\n+    expected_first_row = np.array([4447392.16, 1450539.74, 5299608.57])\n+    \n+    # Check if the first row of results matches expected values within tolerance\n+    actual_first_row = result.isel(azimuth_time=0).values\n+    if not np.allclose(actual_first_row, expected_first_row, rtol=1e-5):\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Verify the dimensions are correct\n+    assert result.dims == (\"azimuth_time\", \"axis\")\n+    assert result.shape == (6, 3)\n+    \n+    # Verify specific coordinates are preserved\n+    np.testing.assert_array_equal(result.coords[\"axis\"], [0, 1, 2])\n+    assert result.coords[\"azimuth_time\"].dtype == np.dtype(\"timedelta64[ns]\")\n\\ No newline at end of file\n"
}