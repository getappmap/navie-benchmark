{
  "edit_test_file": "tests/test_util_nodes.py",
  "test_patch": "diff --git a/tests/test_message_locations.py b/tests/test_message_locations.py\nnew file mode 100644\nindex 0000000..3231bba\n--- /dev/null\n+++ b/tests/test_message_locations.py\n@@ -0,0 +1,34 @@\n+\"\"\"Test Message class location handling.\"\"\"\n+\n+import pytest\n+from sphinx.builders.gettext import Message\n+\n+\n+def test_duplicate_locations():\n+    # Create a Message with duplicate locations\n+    text = \"Type\"\n+    locations = [\n+        (\"manual/modeling/hair.rst\", 0),\n+        (\"manual/modeling/hair.rst\", 0),\n+        (\"manual/modeling/hair.rst\", 0),\n+        (\"manual/modeling/metas/properties.rst\", 92),\n+        (\"manual/render/shader_nodes/vector/vector_rotate.rst\", 38)\n+    ]\n+    uuids = [\"uuid1\", \"uuid2\", \"uuid3\", \"uuid4\", \"uuid5\"]\n+\n+    message = Message(text, locations, uuids)\n+\n+    # Count occurrences of the duplicate location\n+    duplicate_count = sum(1 for loc in message.locations \n+                         if loc == (\"manual/modeling/hair.rst\", 0))\n+\n+    # Assert that duplicates exist (this verifies the issue is present)\n+    assert duplicate_count > 1, \"Expected duplicate locations to be present\"\n+\n+    # Verify specific duplicate pattern from the issue description\n+    assert message.locations.count((\"manual/modeling/hair.rst\", 0)) == 3, \\\n+           \"Expected exactly 3 duplicate locations for hair.rst\"\n+\n+    # Verify the total number of locations matches the input (no filtering)\n+    assert len(message.locations) == len(locations), \\\n+           \"Expected all locations including duplicates to be retained\"\n",
  "inverted_patch": "diff --git a/tests/test_message_locations_inverted.py b/tests/test_message_locations_inverted.py\nnew file mode 100644\nindex 0000000..c021d20\n--- /dev/null\n+++ b/tests/test_message_locations_inverted.py\n@@ -0,0 +1,45 @@\n+\"\"\"Test Message class location handling.\"\"\"\n+\n+import pytest\n+from sphinx.builders.gettext import Message\n+\n+\n+def test_duplicate_locations():\n+    # Create a Message with duplicate locations\n+    text = \"Type\"\n+    locations = [\n+        (\"manual/modeling/hair.rst\", 0),\n+        (\"manual/modeling/hair.rst\", 0),\n+        (\"manual/modeling/hair.rst\", 0),\n+        (\"manual/modeling/metas/properties.rst\", 92),\n+        (\"manual/render/shader_nodes/vector/vector_rotate.rst\", 38)\n+    ]\n+    uuids = [\"uuid1\", \"uuid2\", \"uuid3\", \"uuid4\", \"uuid5\"]\n+\n+    message = Message(text, locations, uuids)\n+\n+    # Count occurrences of the duplicate location\n+    duplicate_count = sum(1 for loc in message.locations \n+                         if loc == (\"manual/modeling/hair.rst\", 0))\n+\n+    # The test should now FAIL if duplicates exist\n+    if duplicate_count > 1:\n+        raise AssertionError(\"__BUG__HERE__: Duplicate locations found in Message object\")\n+\n+    # Verify no duplicates exist for specific location\n+    assert message.locations.count((\"manual/modeling/hair.rst\", 0)) == 1, \\\n+           \"__BUG__HERE__: Duplicate locations found for hair.rst\"\n+\n+    # Each location should appear exactly once\n+    location_set = set(message.locations)\n+    assert len(location_set) == len(message.locations), \\\n+           \"__BUG__HERE__: Message contains duplicate locations\"\n+\n+    # Verify the expected unique locations are present\n+    expected_unique_locations = {\n+        (\"manual/modeling/hair.rst\", 0),\n+        (\"manual/modeling/metas/properties.rst\", 92),\n+        (\"manual/render/shader_nodes/vector/vector_rotate.rst\", 38)\n+    }\n+    assert location_set == expected_unique_locations, \\\n+           \"__BUG__HERE__: Message locations do not match expected unique locations\"\n\\ No newline at end of file\n"
}