{
  "edit_test_file": "sympy/geometry/tests/test_point.py",
  "test_patch": "diff --git a/sympy/geometry/tests/test_point_multiplication.py b/sympy/geometry/tests/test_point_multiplication.py\nnew file mode 100644\nindex 0000000..c857ce3\n--- /dev/null\n+++ b/sympy/geometry/tests/test_point_multiplication.py\n@@ -0,0 +1,16 @@\n+from sympy import Point, sympify\n+from sympy.geometry.exceptions import GeometryError\n+from sympy.utilities.pytest import raises\n+\n+def test_point_multiplication_order():\n+    \"\"\"Test that point multiplication with numbers works consistently regardless of order.\"\"\"\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # This works - multiplying point by number\n+    assert point1 + point2 * scalar == Point(2, 2)\n+\n+    # This raises GeometryError - multiplying number by point\n+    with raises(GeometryError):\n+        point1 + scalar * point2\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/geometry/tests/test_point_multiplication_inverted.py b/sympy/geometry/tests/test_point_multiplication_inverted.py\nnew file mode 100644\nindex 0000000..0b6396a\n--- /dev/null\n+++ b/sympy/geometry/tests/test_point_multiplication_inverted.py\n@@ -0,0 +1,21 @@\n+from sympy import Point, sympify\n+from sympy.geometry.exceptions import GeometryError\n+\n+def test_point_multiplication_order():\n+    \"\"\"Test that point multiplication with numbers works consistently regardless of order.\"\"\"\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # First operation - multiplying point by number\n+    result1 = point1 + point2 * scalar\n+    expected = Point(2, 2)\n+    assert result1 == expected\n+\n+    # Second operation - multiplying number by point\n+    # This should give the same result, but currently raises GeometryError\n+    try:\n+        result2 = point1 + scalar * point2\n+        assert result2 == expected, \"__BUG__HERE__\"\n+    except GeometryError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}