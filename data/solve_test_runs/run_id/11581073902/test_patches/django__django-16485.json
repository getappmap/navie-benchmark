{
  "edit_test_file": "tests/template_tests/filter_tests/test_floatformat.py",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_zero.py b/tests/template_tests/filter_tests/test_floatformat_zero.py\nnew file mode 100644\nindex 0000000..322970a\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_zero.py\n@@ -0,0 +1,16 @@\n+from decimal import Decimal\n+\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+\n+class FloatformatZeroTests(SimpleTestCase):\n+    def test_floatformat_zero_decimal_crash(self):\n+        \"\"\"\n+        Test that floatformat() raises ValueError when formatting \"0.00\" with precision 0.\n+        \"\"\"\n+        with self.assertRaisesMessage(ValueError, \"valid range for prec is [1, MAX_PREC]\"):\n+            floatformat(\"0.00\", 0)\n+\n+        with self.assertRaisesMessage(ValueError, \"valid range for prec is [1, MAX_PREC]\"):\n+            floatformat(Decimal(\"0.00\"), 0)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_zero_inverted.py b/tests/template_tests/filter_tests/test_floatformat_zero_inverted.py\nnew file mode 100644\nindex 0000000..123cfcb\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_zero_inverted.py\n@@ -0,0 +1,21 @@\n+from decimal import Decimal\n+\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+\n+class FloatformatZeroTests(SimpleTestCase):\n+    def test_floatformat_zero_decimal_crash(self):\n+        \"\"\"\n+        Test that floatformat() handles \"0.00\" with precision 0 correctly.\n+        The test should fail if ValueError is raised, as this is considered a bug.\n+        \"\"\"\n+        try:\n+            result = floatformat(\"0.00\", 0)\n+        except ValueError as e:\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+\n+        try:\n+            result = floatformat(Decimal(\"0.00\"), 0)\n+        except ValueError as e:\n+            raise AssertionError(\"__BUG__HERE__\") from e\n\\ No newline at end of file\n"
}