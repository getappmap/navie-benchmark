{
  "edit_test_file": "xarray/tests/test_dataset.py",
  "test_patch": "diff --git a/xarray/tests/test_swap_dims.py b/xarray/tests/test_swap_dims.py\nnew file mode 100644\nindex 0000000..82160cc\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims.py\n@@ -0,0 +1,39 @@\n+from __future__ import annotations\n+\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.testing import assert_identical\n+\n+\n+def test_swap_dims_modifies_original():\n+    # Create a dataset similar to the issue example\n+    nz = 11\n+    ds = xr.Dataset(\n+        data_vars={\n+            \"y\": (\"z\", np.random.rand(nz)),\n+            \"lev\": (\"z\", np.arange(nz) * 10),\n+        },\n+    )\n+    \n+    # Store the original dimensions of the 'lev' variable\n+    original_lev_dims = ds[\"lev\"].dims\n+    \n+    # Perform the sequence of operations that reveals the issue\n+    ds2 = (\n+        ds.swap_dims(z=\"lev\")\n+        .rename_dims(lev=\"z\")\n+        .reset_index(\"lev\")\n+        .reset_coords()\n+    )\n+    \n+    # Verify initial state\n+    assert ds2[\"lev\"].dims == original_lev_dims\n+    \n+    # Perform the operation that triggers the modification\n+    _ = ds2.swap_dims(z=\"lev\")\n+    \n+    # Verify that the original object was modified\n+    # The issue manifests when the dimensions of 'lev' in ds2 have changed\n+    assert ds2[\"lev\"].dims != original_lev_dims\n+    assert ds2[\"lev\"].dims == (\"lev\",)  # This is the unexpected modification\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_swap_dims_inverted.py b/xarray/tests/test_swap_dims_inverted.py\nnew file mode 100644\nindex 0000000..b48eba8\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims_inverted.py\n@@ -0,0 +1,44 @@\n+from __future__ import annotations\n+\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.testing import assert_identical\n+\n+\n+def test_swap_dims_modifies_original():\n+    # Create a dataset similar to the issue example\n+    nz = 11\n+    ds = xr.Dataset(\n+        data_vars={\n+            \"y\": (\"z\", np.random.rand(nz)),\n+            \"lev\": (\"z\", np.arange(nz) * 10),\n+        },\n+    )\n+    \n+    # Store the original dimensions of the 'lev' variable\n+    original_lev_dims = ds[\"lev\"].dims\n+    \n+    # Perform the sequence of operations that reveals the issue\n+    ds2 = (\n+        ds.swap_dims(z=\"lev\")\n+        .rename_dims(lev=\"z\")\n+        .reset_index(\"lev\")\n+        .reset_coords()\n+    )\n+    \n+    # Verify initial state\n+    assert ds2[\"lev\"].dims == original_lev_dims\n+    \n+    # Perform the operation that triggers the modification\n+    _ = ds2.swap_dims(z=\"lev\")\n+    \n+    # The test should now FAIL if the bug is present\n+    # If ds2[\"lev\"].dims has changed from the original, this indicates the bug\n+    if ds2[\"lev\"].dims != original_lev_dims:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification that the dimensions should remain unchanged\n+    assert ds2[\"lev\"].dims == original_lev_dims, (\n+        f\"Expected dimensions {original_lev_dims}, but got {ds2['lev'].dims}\"\n+    )\n\\ No newline at end of file\n"
}