{
  "edit_test_file": "tests/fixtures_regress/tests.py",
  "test_patch": "diff --git a/tests/fixtures_regress/test_fixture_dir_path_duplicates.py b/tests/fixtures_regress/test_fixture_dir_path_duplicates.py\nnew file mode 100644\nindex 0000000..50b1775\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dir_path_duplicates.py\n@@ -0,0 +1,29 @@\n+from pathlib import Path\n+\n+from django.core.management import call_command\n+from django.test import TestCase, override_settings\n+\n+from .models import Absolute\n+\n+_cur_dir = Path(__file__).parent\n+\n+\n+class FixtureDirPathDuplicatesTests(TestCase):\n+    \"\"\"Test duplicate fixture dirs with Path instances.\"\"\"\n+\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures_1\",\n+            str(_cur_dir / \"fixtures_1\"),  # Same dir as above but as string\n+        ]\n+    )\n+    def test_fixture_dir_path_duplicates(self):\n+        \"\"\"\n+        When FIXTURE_DIRS contains Path instances pointing to the same directory,\n+        duplicates should be detected but currently are not.\n+        \"\"\"\n+        # This should raise ImproperlyConfigured but doesn't due to the bug\n+        call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+        \n+        # The fixture loads successfully when it shouldn't\n+        self.assertEqual(Absolute.objects.count(), 1)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/fixtures_regress/test_fixture_dir_path_duplicates_inverted.py b/tests/fixtures_regress/test_fixture_dir_path_duplicates_inverted.py\nnew file mode 100644\nindex 0000000..0bfeab6\n--- /dev/null\n+++ b/tests/fixtures_regress/test_fixture_dir_path_duplicates_inverted.py\n@@ -0,0 +1,30 @@\n+from pathlib import Path\n+\n+from django.core.management import call_command\n+from django.test import TestCase, override_settings\n+\n+from .models import Absolute\n+\n+_cur_dir = Path(__file__).parent\n+\n+\n+class FixtureDirPathDuplicatesTests(TestCase):\n+    \"\"\"Test duplicate fixture dirs with Path instances.\"\"\"\n+\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures_1\",\n+            str(_cur_dir / \"fixtures_1\"),  # Same dir as above but as string\n+        ]\n+    )\n+    def test_fixture_dir_path_duplicates(self):\n+        \"\"\"\n+        When FIXTURE_DIRS contains Path instances pointing to the same directory,\n+        duplicates should be detected and raise an error.\n+        \"\"\"\n+        # Load the fixture\n+        call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+        \n+        # If we get here, it means the duplicate fixtures weren't detected\n+        # This should fail with our specific error message\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}