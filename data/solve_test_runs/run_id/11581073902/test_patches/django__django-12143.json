{
  "edit_test_file": "tests/test_client_regress/tests.py",
  "test_patch": "diff --git a/tests/test_client_regress/test_formset_regex_prefix.py b/tests/test_client_regress/test_formset_regex_prefix.py\nnew file mode 100644\nindex 0000000..ff472f4\n--- /dev/null\n+++ b/tests/test_client_regress/test_formset_regex_prefix.py\n@@ -0,0 +1,45 @@\n+from django.test import TestCase\n+from django.contrib.admin.options import ModelAdmin\n+from django.contrib.auth.models import User\n+import re\n+\n+class FormsetRegexPrefixTests(TestCase):\n+    \"\"\"\n+    Test that regex special characters in formset prefixes can cause issues\n+    with pattern matching in admin changeform view.\n+    \"\"\"\n+    def setUp(self):\n+        self.user = User.objects.create_superuser(\n+            username='admin',\n+            email='admin@example.com',\n+            password='password'\n+        )\n+        self.client.login(username='admin', password='password')\n+\n+    def test_regex_special_chars_in_prefix(self):\n+        \"\"\"\n+        Test that using regex special characters in formset prefix causes\n+        incorrect pattern matching.\n+        \"\"\"\n+        # Create a prefix with regex special characters\n+        prefix = 'form[set]+'\n+        \n+        # Create the pattern as done in admin/options.py\n+        pk_name = 'id'\n+        unsafe_pattern = r'{}-\\d+-{}'.format(prefix, pk_name)\n+        \n+        # This should match but doesn't due to unescaped regex chars\n+        test_string = 'form[set]+-0-id'\n+        \n+        # Assert that the pattern fails to match due to unescaped special chars\n+        self.assertFalse(\n+            bool(re.match(unsafe_pattern, test_string)),\n+            \"Pattern incorrectly matched despite unescaped regex special characters\"\n+        )\n+        \n+        # Show that it would work with escaped characters\n+        safe_pattern = r'{}-\\d+-{}'.format(re.escape(prefix), pk_name)\n+        self.assertTrue(\n+            bool(re.match(safe_pattern, test_string)),\n+            \"Pattern failed to match with escaped regex special characters\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_client_regress/test_formset_regex_prefix_inverted.py b/tests/test_client_regress/test_formset_regex_prefix_inverted.py\nnew file mode 100644\nindex 0000000..444bf89\n--- /dev/null\n+++ b/tests/test_client_regress/test_formset_regex_prefix_inverted.py\n@@ -0,0 +1,44 @@\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+import re\n+\n+class FormsetRegexPrefixTests(TestCase):\n+    \"\"\"\n+    Test that regex special characters in formset prefixes must be properly\n+    escaped to prevent pattern matching issues in admin changeform view.\n+    \"\"\"\n+    def setUp(self):\n+        self.user = User.objects.create_superuser(\n+            username='admin',\n+            email='admin@example.com',\n+            password='password'\n+        )\n+        self.client.login(username='admin', password='password')\n+\n+    def test_regex_special_chars_in_prefix(self):\n+        \"\"\"\n+        Test that using unescaped regex special characters in formset prefix\n+        causes pattern matching failures. This test should FAIL when the bug\n+        is present, indicating that proper escaping is required.\n+        \"\"\"\n+        # Create a prefix with regex special characters\n+        prefix = 'form[set]+'\n+        pk_name = 'id'\n+        \n+        # Create the pattern as done in admin/options.py\n+        # This is the problematic pattern that doesn't escape special characters\n+        unsafe_pattern = r'{}-\\d+-{}'.format(prefix, pk_name)\n+        \n+        # Test string that should match if the pattern was properly escaped\n+        test_string = 'form[set]+-0-id'\n+        \n+        # This should raise an assertion error when the bug is present\n+        if not bool(re.match(unsafe_pattern, test_string)):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Demonstrate the correct behavior with escaped characters\n+        safe_pattern = r'{}-\\d+-{}'.format(re.escape(prefix), pk_name)\n+        self.assertTrue(\n+            bool(re.match(safe_pattern, test_string)),\n+            \"Pattern should match when regex special characters are properly escaped\"\n+        )\n\\ No newline at end of file\n"
}