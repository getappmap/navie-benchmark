{
  "edit_test_file": "sympy/printing/tests/test_mathml.py",
  "test_patch": "diff --git a/sympy/printing/tests/test_mathml_numbered_symbols.py b/sympy/printing/tests/test_mathml_numbered_symbols.py\nnew file mode 100644\nindex 0000000..7de656e\n--- /dev/null\n+++ b/sympy/printing/tests/test_mathml_numbered_symbols.py\n@@ -0,0 +1,17 @@\n+from sympy import Symbol\n+from sympy.printing.mathml import mathml\n+\n+def test_numbered_symbol_presentation():\n+    # Create a symbol with a number at the end\n+    x2 = Symbol('x2')\n+    \n+    # Get the presentation MathML output\n+    numbered_output = mathml(x2, printer='presentation')\n+    \n+    # The actual output will have subscript formatting, making the '2' appear as a subscript\n+    # This is not the desired behavior, but it's what currently happens\n+    expected_output = '<mi><msub><mi>x</mi><mi>2</mi></msub></mi>'\n+    \n+    # Assert that the output matches what actually happens (not what we want)\n+    # This test passes when the bug is present\n+    assert numbered_output == expected_output\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/printing/tests/test_mathml_numbered_symbols_inverted.py b/sympy/printing/tests/test_mathml_numbered_symbols_inverted.py\nnew file mode 100644\nindex 0000000..75d7875\n--- /dev/null\n+++ b/sympy/printing/tests/test_mathml_numbered_symbols_inverted.py\n@@ -0,0 +1,21 @@\n+from sympy import Symbol\n+from sympy.printing.mathml import mathml\n+\n+def test_numbered_symbol_presentation():\n+    # Create a symbol with a number at the end\n+    x2 = Symbol('x2')\n+    \n+    # Get the presentation MathML output\n+    numbered_output = mathml(x2, printer='presentation')\n+    \n+    # The expected output should NOT have subscript formatting\n+    # The '2' should be part of the symbol name, not a subscript\n+    expected_output = '<mi>x2</mi>'\n+    \n+    # This will raise an AssertionError with message \"__BUG__HERE__\" when the bug is present\n+    # (i.e., when the output incorrectly formats the number as a subscript)\n+    if numbered_output == '<mi><msub><mi>x</mi><mi>2</mi></msub></mi>':\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Assert that the output matches what we want (proper symbol name without subscript)\n+    assert numbered_output == expected_output\n\\ No newline at end of file\n"
}