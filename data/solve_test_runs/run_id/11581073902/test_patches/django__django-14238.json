{
  "edit_test_file": "tests/apps/tests.py",
  "test_patch": "diff --git a/tests/apps/test_auto_field_subclass_validation.py b/tests/apps/test_auto_field_subclass_validation.py\nnew file mode 100644\nindex 0000000..1e295fa\n--- /dev/null\n+++ b/tests/apps/test_auto_field_subclass_validation.py\n@@ -0,0 +1,46 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n+\n+\n+class CustomBigAutoField(models.BigAutoField):\n+    pass\n+\n+\n+class CustomSmallAutoField(models.SmallAutoField):\n+    pass\n+\n+\n+class AutoFieldSubclassValidationTests(SimpleTestCase):\n+    \"\"\"Tests for validation of custom AutoField subclasses.\"\"\"\n+\n+    @isolate_apps('apps')\n+    @override_settings(DEFAULT_AUTO_FIELD='apps.test_auto_field_subclass_validation.CustomBigAutoField')\n+    def test_custom_bigautofield_subclass_validation(self):\n+        \"\"\"\n+        Test that a custom BigAutoField subclass raises ValueError when used as\n+        DEFAULT_AUTO_FIELD.\n+        \"\"\"\n+        msg = (\n+            \"Primary key 'apps.test_auto_field_subclass_validation.CustomBigAutoField' \"\n+            \"referred by DEFAULT_AUTO_FIELD must subclass AutoField.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            class Model(models.Model):\n+                pass\n+\n+    @isolate_apps('apps')\n+    @override_settings(DEFAULT_AUTO_FIELD='apps.test_auto_field_subclass_validation.CustomSmallAutoField')\n+    def test_custom_smallautofield_subclass_validation(self):\n+        \"\"\"\n+        Test that a custom SmallAutoField subclass raises ValueError when used as\n+        DEFAULT_AUTO_FIELD.\n+        \"\"\"\n+        msg = (\n+            \"Primary key 'apps.test_auto_field_subclass_validation.CustomSmallAutoField' \"\n+            \"referred by DEFAULT_AUTO_FIELD must subclass AutoField.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            class Model(models.Model):\n+                pass\n\\ No newline at end of file\n",
  "inverted_patch": null
}