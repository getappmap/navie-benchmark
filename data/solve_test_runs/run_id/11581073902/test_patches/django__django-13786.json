{
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_squash_model_options.py b/tests/migrations/test_migrations_squash_model_options.py\nnew file mode 100644\nindex 0000000..aa26c3a\n--- /dev/null\n+++ b/tests/migrations/test_migrations_squash_model_options.py\n@@ -0,0 +1,47 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+\n+class SquashModelOptionsTests(SimpleTestCase):\n+    \"\"\"\n+    Tests squashing behavior of model options in migrations.\n+    \"\"\"\n+    def test_squash_model_options_not_cleared(self):\n+        \"\"\"\n+        When squashing a CreateModel and an AlterModelOptions with empty options,\n+        the original model options should be cleared but aren't.\n+        \"\"\"\n+        # Initial CreateModel with some options\n+        initial_options = {'verbose_name': 'MyModel', 'verbose_name_plural': 'MyModels'}\n+        operations = [\n+            migrations.CreateModel(\n+                name=\"TestModel\",\n+                fields=[(\"name\", models.CharField(max_length=255))],\n+                options=initial_options,\n+            ),\n+            # AlterModelOptions with empty options should clear the options\n+            migrations.AlterModelOptions(\n+                name=\"TestModel\",\n+                options={},\n+            ),\n+        ]\n+\n+        # Optimize the operations\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, \"testapp\")\n+        \n+        # Should be optimized to a single CreateModel\n+        self.assertEqual(len(optimized_operations), 1)\n+        \n+        # The optimized operation should be a CreateModel\n+        optimized_operation = optimized_operations[0]\n+        self.assertIsInstance(optimized_operation, migrations.CreateModel)\n+        \n+        # The options should be empty since AlterModelOptions had empty options\n+        # But due to the bug, they still contain the original options\n+        self.assertEqual(\n+            optimized_operation.options,\n+            initial_options,  # This assertion passes due to the bug\n+            \"Model options were not cleared during optimization\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_squash_model_options_inverted.py b/tests/migrations/test_migrations_squash_model_options_inverted.py\nnew file mode 100644\nindex 0000000..076bba0\n--- /dev/null\n+++ b/tests/migrations/test_migrations_squash_model_options_inverted.py\n@@ -0,0 +1,44 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+\n+class SquashModelOptionsTests(SimpleTestCase):\n+    \"\"\"\n+    Tests squashing behavior of model options in migrations.\n+    \"\"\"\n+    def test_squash_model_options_not_cleared(self):\n+        \"\"\"\n+        When squashing a CreateModel and an AlterModelOptions with empty options,\n+        the original model options should be cleared.\n+        \"\"\"\n+        # Initial CreateModel with some options\n+        initial_options = {'verbose_name': 'MyModel', 'verbose_name_plural': 'MyModels'}\n+        operations = [\n+            migrations.CreateModel(\n+                name=\"TestModel\",\n+                fields=[(\"name\", models.CharField(max_length=255))],\n+                options=initial_options,\n+            ),\n+            # AlterModelOptions with empty options should clear the options\n+            migrations.AlterModelOptions(\n+                name=\"TestModel\",\n+                options={},\n+            ),\n+        ]\n+\n+        # Optimize the operations\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, \"testapp\")\n+        \n+        # Should be optimized to a single CreateModel\n+        self.assertEqual(len(optimized_operations), 1)\n+        \n+        # The optimized operation should be a CreateModel\n+        optimized_operation = optimized_operations[0]\n+        self.assertIsInstance(optimized_operation, migrations.CreateModel)\n+        \n+        # The options should be empty since AlterModelOptions had empty options\n+        if optimized_operation.options != {}:\n+            raise AssertionError(\"__BUG__HERE__: Model options were not cleared during optimization. \"\n+                               f\"Expected empty dict but got {optimized_operation.options}\")\n\\ No newline at end of file\n"
}