{
  "edit_test_file": "tests/backends/oracle/test_operations.py",
  "test_patch": "diff --git a/tests/backends/oracle/test_bulk_create_batch_size.py b/tests/backends/oracle/test_bulk_create_batch_size.py\nnew file mode 100644\nindex 0000000..7432e68\n--- /dev/null\n+++ b/tests/backends/oracle/test_bulk_create_batch_size.py\n@@ -0,0 +1,37 @@\n+import unittest\n+\n+from django.db import connection, models\n+from django.test import TestCase\n+\n+\n+class TestModel(models.Model):\n+    \"\"\"Test model for bulk_create batch size testing.\"\"\"\n+    field = models.IntegerField()\n+\n+    class Meta:\n+        app_label = 'backends'\n+\n+\n+@unittest.skipUnless(connection.vendor == 'oracle', 'Oracle tests')\n+class BulkCreateBatchSizeTests(TestCase):\n+    \"\"\"Test that bulk_create batch_size parameter handling.\"\"\"\n+\n+    def test_batch_size_override(self):\n+        \"\"\"\n+        Test that bulk_create allows batch_size to override the compatible\n+        batch size calculation, which could lead to errors if batch_size is too large.\n+        \"\"\"\n+        # Create enough objects to exceed Oracle's max batch size\n+        num_objects = connection.features.max_query_params + 10\n+        objects = [\n+            TestModel(field=i) for i in range(num_objects)\n+        ]\n+\n+        # Set batch_size larger than max_query_params\n+        # This should succeed but is not optimal since it doesn't respect the \n+        # database's max_query_params limit\n+        oversized_batch = connection.features.max_query_params + 100\n+        TestModel.objects.bulk_create(objects, batch_size=oversized_batch)\n+\n+        # Verify all objects were created\n+        self.assertEqual(TestModel.objects.count(), num_objects)\n\\ No newline at end of file\n",
  "inverted_patch": null
}