{
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_decorated_init.py b/tests/test_ext_autodoc_decorated_init.py\nnew file mode 100644\nindex 0000000..9836376\n--- /dev/null\n+++ b/tests/test_ext_autodoc_decorated_init.py\n@@ -0,0 +1,55 @@\n+\"\"\"\n+    test_ext_autodoc_decorated_init\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with decorated __init__ methods.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import functools\n+import pytest\n+\n+from sphinx.testing import restructuredtext\n+from test_ext_autodoc import do_autodoc\n+\n+\n+def test_decorated_init_not_documented(app):\n+    \"\"\"\n+    Test that a decorated __init__ method is not documented even when\n+    napoleon_include_init_with_doc = True is set.\n+    \"\"\"\n+    # Enable napoleon extension and set config to include __init__ docs\n+    app.config.extensions.append('sphinx.ext.napoleon')\n+    app.config.napoleon_include_init_with_doc = True\n+\n+    # Define a class with a decorated __init__ method in the test\n+    text = \"\"\"\n+    .. py:module:: target_decorated_init\n+\n+    .. py:class:: TestClass\n+        \n+        class TestClass:\n+            @functools.wraps(lambda self, x: None)\n+            def __init__(self, x):\n+                '''\n+                Initialize the class.\n+                \n+                Args:\n+                    x: Some parameter\n+                '''\n+                self.x = x\n+    \"\"\"\n+    \n+    # Parse the text using restructuredtext\n+    restructuredtext.parse(app, text)\n+\n+    # Get the autodoc output\n+    actual = do_autodoc(app, 'class', 'target_decorated_init.TestClass')\n+\n+    # The __init__ docstring should not appear in the output\n+    # even though napoleon_include_init_with_doc is True\n+    assert '   Initialize the class.' not in actual\n+    assert '   Args:' not in actual\n+    assert '       x: Some parameter' not in actual\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_decorated_init_inverted.py b/tests/test_ext_autodoc_decorated_init_inverted.py\nnew file mode 100644\nindex 0000000..b5668a8\n--- /dev/null\n+++ b/tests/test_ext_autodoc_decorated_init_inverted.py\n@@ -0,0 +1,57 @@\n+\"\"\"\n+    test_ext_autodoc_decorated_init\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with decorated __init__ methods.\n+\n+    Tests that a decorated __init__ method is properly documented when\n+    napoleon_include_init_with_doc = True is set.\n+\"\"\"\n+\n+import functools\n+import pytest\n+from sphinx.testing import restructuredtext\n+from test_ext_autodoc import do_autodoc\n+\n+\n+def test_decorated_init_should_be_documented(app):\n+    \"\"\"\n+    Test that a decorated __init__ method is properly documented when\n+    napoleon_include_init_with_doc = True is set.\n+    \"\"\"\n+    # Enable napoleon extension and set config to include __init__ docs\n+    app.config.extensions.append('sphinx.ext.napoleon')\n+    app.config.napoleon_include_init_with_doc = True\n+\n+    # Define a class with a decorated __init__ method\n+    text = \"\"\"\n+    .. py:module:: target_decorated_init\n+\n+    .. py:class:: TestClass\n+\n+        class TestClass:\n+            @functools.wraps(lambda self, x: None)\n+            def __init__(self, x):\n+                '''\n+                Initialize the class.\n+                \n+                Args:\n+                    x: Some parameter\n+                '''\n+                self.x = x\n+    \"\"\"\n+    \n+    # Parse the text using restructuredtext\n+    restructuredtext.parse(app, text)\n+\n+    # Get the autodoc output\n+    actual = do_autodoc(app, 'class', 'target_decorated_init.TestClass')\n+\n+    # The __init__ docstring should appear in the output\n+    # when napoleon_include_init_with_doc is True\n+    if '   Initialize the class.' not in actual:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # These assertions ensure the complete docstring is present\n+    assert '   Args:' in actual, \"Args section missing from documentation\"\n+    assert '       x: Some parameter' in actual, \"Parameter documentation missing\"\n"
}