{
  "edit_test_file": "xarray/tests/test_coarsen.py",
  "test_patch": "diff --git a/xarray/tests/test_coarsen_coordinates.py b/xarray/tests/test_coarsen_coordinates.py\nnew file mode 100644\nindex 0000000..d7b763f\n--- /dev/null\n+++ b/xarray/tests/test_coarsen_coordinates.py\n@@ -0,0 +1,25 @@\n+from __future__ import annotations\n+\n+import numpy as np\n+import xarray as xr\n+from xarray import Dataset\n+\n+\n+def test_coarsen_construct_demotes_coordinates():\n+    \"\"\"Test that coarsen.construct demotes non-dimensional coordinates to variables.\"\"\"\n+    # Create a DataArray with a non-dimensional coordinate\n+    da = xr.DataArray(np.arange(24), dims=[\"time\"])\n+    da = da.assign_coords(day=365 * da)\n+    ds = da.to_dataset(name=\"T\")\n+\n+    # Verify initial state has 'day' as a coordinate\n+    assert \"day\" in ds.coords\n+    assert ds.coords[\"day\"].dims == (\"time\",)\n+\n+    # Apply coarsen.construct\n+    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+\n+    # Verify that 'day' is now a data variable and not a coordinate\n+    assert \"day\" in result.data_vars\n+    assert \"day\" not in result.coords\n+    assert result[\"day\"].dims == (\"year\", \"month\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_coarsen_coordinates_inverted.py b/xarray/tests/test_coarsen_coordinates_inverted.py\nnew file mode 100644\nindex 0000000..dcf71da\n--- /dev/null\n+++ b/xarray/tests/test_coarsen_coordinates_inverted.py\n@@ -0,0 +1,27 @@\n+from __future__ import annotations\n+\n+import numpy as np\n+import xarray as xr\n+from xarray import Dataset\n+\n+\n+def test_coarsen_construct_should_preserve_coordinates():\n+    \"\"\"Test that coarsen.construct preserves non-dimensional coordinates as coordinates.\"\"\"\n+    # Create a DataArray with a non-dimensional coordinate\n+    da = xr.DataArray(np.arange(24), dims=[\"time\"])\n+    da = da.assign_coords(day=365 * da)\n+    ds = da.to_dataset(name=\"T\")\n+\n+    # Verify initial state has 'day' as a coordinate\n+    assert \"day\" in ds.coords\n+    assert ds.coords[\"day\"].dims == (\"time\",)\n+\n+    # Apply coarsen.construct\n+    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+\n+    # The test should now FAIL if 'day' is not in coordinates\n+    if \"day\" not in result.coords:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Additional assertions to verify coordinate properties\n+    assert result.coords[\"day\"].dims == (\"year\", \"month\")\n\\ No newline at end of file\n"
}