{
  "edit_test_file": "tests/model_formsets/tests.py",
  "test_patch": "diff --git a/tests/model_formsets/test_formset_nonform_errors.py b/tests/model_formsets/test_formset_nonform_errors.py\nnew file mode 100644\nindex 0000000..510a694\n--- /dev/null\n+++ b/tests/model_formsets/test_formset_nonform_errors.py\n@@ -0,0 +1,28 @@\n+from django.test import TestCase\n+from django.forms.models import modelformset_factory\n+from .models import Product\n+\n+class FormSetNonFormErrorsTest(TestCase):\n+    def test_nonform_css_class_missing(self):\n+        \"\"\"\n+        Test that FormSet's non-form errors don't have the 'nonform' CSS class.\n+        This test verifies the issue where FormSets don't add a CSS class for\n+        non-form errors, unlike Forms which add 'nonfield' for non-field errors.\n+        \"\"\"\n+        ProductFormSet = modelformset_factory(Product, fields=\"__all__\", extra=2)\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-slug': 'red_car',\n+            'form-1-slug': 'red_car',  # Duplicate slug will cause non-form error\n+        }\n+        formset = ProductFormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Get the HTML output of the non_form_errors\n+        error_html = str(formset.non_form_errors())\n+        \n+        # The error_html should not contain 'nonform' CSS class\n+        # This test passes when the issue exists (no 'nonform' class)\n+        self.assertNotIn('class=\"nonform\"', error_html)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_formsets/test_formset_nonform_errors_inverted.py b/tests/model_formsets/test_formset_nonform_errors_inverted.py\nnew file mode 100644\nindex 0000000..c3839d6\n--- /dev/null\n+++ b/tests/model_formsets/test_formset_nonform_errors_inverted.py\n@@ -0,0 +1,28 @@\n+from django.test import TestCase\n+from django.forms.models import modelformset_factory\n+from .models import Product\n+\n+class FormSetNonFormErrorsTest(TestCase):\n+    def test_nonform_css_class_missing(self):\n+        \"\"\"\n+        Test that FormSet's non-form errors should have the 'nonform' CSS class.\n+        The test will fail if the 'nonform' CSS class is missing, which is the current issue.\n+        \"\"\"\n+        ProductFormSet = modelformset_factory(Product, fields=\"__all__\", extra=2)\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-slug': 'red_car',\n+            'form-1-slug': 'red_car',  # Duplicate slug will cause non-form error\n+        }\n+        formset = ProductFormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Get the HTML output of the non_form_errors\n+        error_html = str(formset.non_form_errors())\n+        \n+        # The error_html should contain 'nonform' CSS class\n+        # This test will fail when the issue exists (no 'nonform' class)\n+        if 'class=\"nonform\"' not in error_html:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}