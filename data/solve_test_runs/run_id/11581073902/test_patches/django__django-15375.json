{
  "edit_test_file": "tests/expressions/tests.py",
  "test_patch": "diff --git a/tests/expressions/test_aggregate_default_after_annotate.py b/tests/expressions/test_aggregate_default_after_annotate.py\nnew file mode 100644\nindex 0000000..08f372a\n--- /dev/null\n+++ b/tests/expressions/test_aggregate_default_after_annotate.py\n@@ -0,0 +1,46 @@\n+from django.db.models import F, Sum\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from django.db.utils import OperationalError\n+\n+from .models import Company, Employee\n+\n+\n+class AggregateDefaultAfterAnnotateTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.ceo = Employee.objects.create(firstname=\"John\", lastname=\"Doe\", salary=100)\n+        cls.company = Company.objects.create(\n+            name=\"Example Inc.\",\n+            num_employees=50,\n+            num_chairs=20,\n+            ceo=cls.ceo\n+        )\n+        cls.company2 = Company.objects.create(\n+            name=\"Other Inc.\",\n+            num_employees=30,\n+            num_chairs=15,\n+            ceo=cls.ceo\n+        )\n+\n+    def test_aggregate_default_after_annotate_raises_error(self):\n+        \"\"\"\n+        Using aggregate() with 'default' parameter after annotate() raises\n+        OperationalError due to invalid SQL syntax.\n+        \"\"\"\n+        with self.assertRaisesMessage(OperationalError, 'near \"FROM\": syntax error'):\n+            Company.objects.annotate(\n+                idx=F('num_employees')\n+            ).aggregate(Sum('num_chairs', default=0))\n+\n+        # Verify that the same query works without default\n+        result = Company.objects.annotate(\n+            idx=F('num_employees')\n+        ).aggregate(Sum('num_chairs'))\n+        self.assertEqual(result['num_chairs__sum'], 35)\n+\n+        # Verify that using Coalesce explicitly works\n+        result = Company.objects.annotate(\n+            idx=F('num_employees')\n+        ).aggregate(total=Coalesce(Sum('num_chairs'), 0))\n+        self.assertEqual(result['total'], 35)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/expressions/test_aggregate_default_after_annotate_inverted.py b/tests/expressions/test_aggregate_default_after_annotate_inverted.py\nnew file mode 100644\nindex 0000000..f1935c9\n--- /dev/null\n+++ b/tests/expressions/test_aggregate_default_after_annotate_inverted.py\n@@ -0,0 +1,47 @@\n+from django.db.models import F, Sum\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from django.db.utils import OperationalError\n+\n+from .models import Company, Employee\n+\n+\n+class AggregateDefaultAfterAnnotateTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.ceo = Employee.objects.create(firstname=\"John\", lastname=\"Doe\", salary=100)\n+        cls.company = Company.objects.create(\n+            name=\"Example Inc.\",\n+            num_employees=50,\n+            num_chairs=20,\n+            ceo=cls.ceo\n+        )\n+        cls.company2 = Company.objects.create(\n+            name=\"Other Inc.\",\n+            num_employees=30,\n+            num_chairs=15,\n+            ceo=cls.ceo\n+        )\n+\n+    def test_aggregate_default_after_annotate(self):\n+        \"\"\"\n+        Using aggregate() with 'default' parameter after annotate() should work\n+        correctly and not raise an OperationalError.\n+        \"\"\"\n+        try:\n+            result = Company.objects.annotate(\n+                idx=F('num_employees')\n+            ).aggregate(Sum('num_chairs', default=0))\n+        except OperationalError as e:\n+            if 'near \"FROM\": syntax error' in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different error\n+\n+        # These assertions won't be reached if the bug is present\n+        self.assertEqual(result['num_chairs__sum'], 35)\n+\n+        # Verify that using Coalesce explicitly works (this should always work)\n+        result = Company.objects.annotate(\n+            idx=F('num_employees')\n+        ).aggregate(total=Coalesce(Sum('num_chairs'), 0))\n+        self.assertEqual(result['total'], 35)\n\\ No newline at end of file\n"
}