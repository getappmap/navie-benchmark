{
  "edit_test_file": "xarray/tests/test_duck_array_ops.py",
  "test_patch": "diff --git a/xarray/tests/test_reduction_min_count.py b/xarray/tests/test_reduction_min_count.py\nnew file mode 100644\nindex 0000000..6a9710a\n--- /dev/null\n+++ b/xarray/tests/test_reduction_min_count.py\n@@ -0,0 +1,18 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.testing import assert_allclose\n+\n+\n+def test_sum_min_count_multiple_dims():\n+    \"\"\"Test that using min_count with multiple dimensions raises a ValueError.\"\"\"\n+    # Create a simple 2D DataArray\n+    da = xr.DataArray(\n+        [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],\n+        dims=[\"dim_0\", \"dim_1\"],\n+        coords={\"dim_0\": [0, 1], \"dim_1\": [0, 1, 2]},\n+    )\n+\n+    # Verify that attempting to use min_count with multiple dimensions raises ValueError\n+    with pytest.raises(ValueError, match=\"min_count is not available for reduction with more than one dimensions\"):\n+        da.sum([\"dim_0\", \"dim_1\"], min_count=1)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_reduction_min_count_inverted.py b/xarray/tests/test_reduction_min_count_inverted.py\nnew file mode 100644\nindex 0000000..14a4951\n--- /dev/null\n+++ b/xarray/tests/test_reduction_min_count_inverted.py\n@@ -0,0 +1,31 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.testing import assert_allclose\n+\n+def test_sum_min_count_multiple_dims():\n+    \"\"\"Test that using min_count with multiple dimensions works correctly.\"\"\"\n+    # Create a 2D DataArray with some NaN values\n+    da = xr.DataArray(\n+        [[1.0, np.nan, 3.0], \n+         [np.nan, 5.0, np.nan]],\n+        dims=[\"dim_0\", \"dim_1\"],\n+        coords={\"dim_0\": [0, 1], \"dim_1\": [0, 1, 2]},\n+    )\n+\n+    # This should work and return the sum (9.0) since we have 3 valid values\n+    # which is >= min_count=3\n+    try:\n+        result = da.sum([\"dim_0\", \"dim_1\"], min_count=3)\n+    except ValueError as e:\n+        if \"min_count is not available for reduction with more than one dimensions\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        raise e\n+\n+    # The test should get here and the result should be 9.0\n+    expected = 9.0  # sum of 1.0 + 5.0 + 3.0\n+    assert_allclose(result, expected)\n+\n+    # Also test with min_count greater than number of valid values\n+    result_null = da.sum([\"dim_0\", \"dim_1\"], min_count=4)\n+    assert np.isnan(result_null)\n\\ No newline at end of file\n"
}