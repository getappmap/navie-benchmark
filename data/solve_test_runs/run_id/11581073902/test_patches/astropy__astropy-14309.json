{
  "edit_test_file": "astropy/io/registry/tests/test_registries.py",
  "test_patch": "diff --git a/astropy/io/registry/tests/test_identify_format_extension.py b/astropy/io/registry/tests/test_identify_format_extension.py\nnew file mode 100644\nindex 0000000..cf4cba7\n--- /dev/null\n+++ b/astropy/io/registry/tests/test_identify_format_extension.py\n@@ -0,0 +1,15 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+import pytest\n+from astropy.table import Table\n+from astropy.io.registry import identify_format\n+\n+\n+def test_identify_format_empty_args():\n+    \"\"\"Test that identify_format raises IndexError when called with empty args list.\n+    \n+    This reproduces the issue where identify_format fails when called with an empty\n+    args list and a non-FITS file extension.\n+    \"\"\"\n+    with pytest.raises(IndexError, match=\"tuple index out of range\"):\n+        identify_format(\"write\", Table, \"test.ecsv\", None, [], {})\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/astropy/io/registry/tests/test_identify_format_extension_inverted.py b/astropy/io/registry/tests/test_identify_format_extension_inverted.py\nnew file mode 100644\nindex 0000000..f83f090\n--- /dev/null\n+++ b/astropy/io/registry/tests/test_identify_format_extension_inverted.py\n@@ -0,0 +1,21 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+import pytest\n+from astropy.table import Table\n+from astropy.io.registry import identify_format\n+\n+def test_identify_format_empty_args():\n+    \"\"\"Test that identify_format handles empty args list correctly.\n+    \n+    This tests that identify_format properly handles being called with an empty\n+    args list and a non-FITS file extension, rather than raising an IndexError.\n+    \"\"\"\n+    result = identify_format(\"write\", Table, \"test.ecsv\", None, [], {})\n+    \n+    # The test should fail with __BUG__HERE__ message if identify_format tries to \n+    # access args[0] when args is empty, which would indicate the bug is present\n+    if result is None:\n+        raise RuntimeError(\"__BUG__HERE__\")\n+        \n+    # The function should return an empty list of valid formats when no format matches\n+    assert result == [], \"identify_format should return empty list for non-matching format\"\n\\ No newline at end of file\n"
}