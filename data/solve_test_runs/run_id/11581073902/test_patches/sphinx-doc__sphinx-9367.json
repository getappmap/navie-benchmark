{
  "edit_test_file": "tests/test_pycode_ast.py",
  "test_patch": "diff --git a/tests/test_tuple_rendering.py b/tests/test_tuple_rendering.py\nnew file mode 100644\nindex 0000000..ccf03dd\n--- /dev/null\n+++ b/tests/test_tuple_rendering.py\n@@ -0,0 +1,22 @@\n+\"\"\"\n+    test_tuple_rendering\n+    ~~~~~~~~~~~~~~~~~~~\n+\n+    Test tuple rendering in pycode.ast\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+from sphinx.pycode import ast\n+\n+\n+def test_single_element_tuple_rendering():\n+    \"\"\"Test that single element tuples maintain their trailing comma.\"\"\"\n+    source = \"(1,)\"\n+    module = ast.parse(source)\n+    result = ast.unparse(module.body[0].value, source)\n+    \n+    # This assertion will pass because it matches the current incorrect behavior\n+    # where the trailing comma is dropped\n+    assert result == \"(1)\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_tuple_rendering_inverted.py b/tests/test_tuple_rendering_inverted.py\nnew file mode 100644\nindex 0000000..b1737b7\n--- /dev/null\n+++ b/tests/test_tuple_rendering_inverted.py\n@@ -0,0 +1,32 @@\n+\"\"\"\n+    test_pycode_ast\n+    ~~~~~~~~~~~~~~~\n+\n+    Test pycode.ast\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.pycode import ast\n+\n+\n+def test_single_element_tuple_rendering():\n+    \"\"\"Test that single element tuples maintain their trailing comma.\"\"\"\n+    source = \"(1,)\"\n+    module = ast.parse(source)\n+    result = ast.unparse(module.body[0].value, source)\n+    \n+    # This assertion will fail when the bug is present (when trailing comma is dropped)\n+    assert result == \"(1,)\", \"__BUG__HERE__: Single element tuple lost its trailing comma\"\n+\n+\n+@pytest.mark.parametrize('source,expected', [\n+    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                # Multi-element tuple (should pass)\n+    (\"()\", \"()\"),                              # Empty tuple (should pass)\n+])\n+def test_other_tuple_cases(source, expected):\n+    \"\"\"Test other tuple cases to ensure they're still working correctly.\"\"\"\n+    module = ast.parse(source)\n+    assert ast.unparse(module.body[0].value, source) == expected\n\\ No newline at end of file\n"
}