{
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_public_meta.py b/tests/test_ext_autodoc_public_meta.py\nnew file mode 100644\nindex 0000000..1929bd0\n--- /dev/null\n+++ b/tests/test_ext_autodoc_public_meta.py\n@@ -0,0 +1,28 @@\n+\"\"\"\n+    test_ext_autodoc_public_meta\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with :meta public: on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_public_meta_for_variable(app):\n+    # The test should verify that _public_var is not included in the output\n+    # even though it has :meta public: in its docstring, demonstrating the bug\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    # Assert that the private variable with :meta public: is NOT in the output\n+    # This assertion passes when the bug is present (current behavior)\n+    assert '.. py:data:: _public_var' not in '\\n'.join(actual)\n+    \n+    # We can see that functions with :meta public: ARE included\n+    assert '.. py:function:: _public_function(name)' in '\\n'.join(actual)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_public_meta_inverted.py b/tests/test_ext_autodoc_public_meta_inverted.py\nnew file mode 100644\nindex 0000000..c7fb88b\n--- /dev/null\n+++ b/tests/test_ext_autodoc_public_meta_inverted.py\n@@ -0,0 +1,32 @@\n+\"\"\"\n+    test_ext_autodoc_public_meta\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with :meta public: on variables.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_public_meta_for_variable(app):\n+    # The test should verify that _public_var IS included in the output\n+    # when it has :meta public: in its docstring\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    actual_output = '\\n'.join(actual)\n+    \n+    # Assert that the private variable with :meta public: IS in the output\n+    # This will fail when the bug is present (current behavior)\n+    if '.. py:data:: _public_var' not in actual_output:\n+        raise AssertionError(\"__BUG__HERE__: :meta public: is not working for variables. \"\n+                           \"Expected _public_var to be included in the documentation.\")\n+    \n+    # Verify that functions with :meta public: are working as expected\n+    assert '.. py:function:: _public_function(name)' in actual_output\n\\ No newline at end of file\n"
}