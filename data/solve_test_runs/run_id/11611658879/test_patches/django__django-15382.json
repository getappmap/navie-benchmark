{
  "edit_test_file": "tests/basic/tests.py",
  "test_patch": "diff --git a/tests/basic/test_exists_subquery_filter.py b/tests/basic/test_exists_subquery_filter.py\nnew file mode 100644\nindex 0000000..8b9067e\n--- /dev/null\n+++ b/tests/basic/test_exists_subquery_filter.py\n@@ -0,0 +1,32 @@\n+from django.core.exceptions import EmptyResultSet\n+from django.db.models import Exists\n+from django.test import TestCase\n+\n+from .models import Article\n+\n+\n+class ExistsSubqueryFilterTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Article.objects.create(\n+            headline='Test Article',\n+            pub_date='2005-07-27'\n+        )\n+\n+    def test_exists_empty_queryset_filter(self):\n+        \"\"\"\n+        Test that filtering with Exists() on an empty queryset combined with another\n+        filter raises EmptyResultSet and removes the WHERE block.\n+        \"\"\"\n+        empty_qs = Article.objects.none()\n+        qs = Article.objects.filter(\n+            ~Exists(empty_qs),\n+            headline='Test Article'\n+        )\n+        \n+        # The query should raise EmptyResultSet when trying to get the SQL\n+        with self.assertRaises(EmptyResultSet):\n+            str(qs.query)\n+            \n+        # The queryset should be empty\n+        self.assertEqual(qs.count(), 0)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/basic/test_exists_subquery_filter_inverted.py b/tests/basic/test_exists_subquery_filter_inverted.py\nnew file mode 100644\nindex 0000000..72f29d6\n--- /dev/null\n+++ b/tests/basic/test_exists_subquery_filter_inverted.py\n@@ -0,0 +1,41 @@\n+from django.core.exceptions import EmptyResultSet\n+from django.db.models import Exists\n+from django.test import TestCase\n+\n+from .models import Article\n+\n+\n+class ExistsSubqueryFilterTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Article.objects.create(\n+            headline='Test Article',\n+            pub_date='2005-07-27'\n+        )\n+\n+    def test_exists_empty_queryset_filter(self):\n+        \"\"\"\n+        Test that filtering with Exists() on an empty queryset combined with another\n+        filter should maintain the WHERE clause and not remove it completely.\n+        The test should fail if the WHERE clause is removed.\n+        \"\"\"\n+        empty_qs = Article.objects.none()\n+        qs = Article.objects.filter(\n+            ~Exists(empty_qs),\n+            headline='Test Article'\n+        )\n+        \n+        try:\n+            # Attempt to get the SQL query string\n+            query_str = str(qs.query)\n+            \n+            # If we get here, the query was generated without raising EmptyResultSet\n+            # Now check if WHERE clause is present\n+            if 'WHERE' not in query_str:\n+                raise AssertionError(\"__BUG__HERE__: WHERE clause was completely removed from the query\")\n+                \n+            # The query should return the article since ~Exists(empty_qs) should be True\n+            self.assertEqual(qs.count(), 1)\n+            \n+        except EmptyResultSet:\n+            raise AssertionError(\"__BUG__HERE__: Query incorrectly raises EmptyResultSet\")\n"
}