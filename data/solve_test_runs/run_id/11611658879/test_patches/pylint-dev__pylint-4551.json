{
  "edit_test_file": "tests/unittest_reporting.py",
  "test_patch": "diff --git a/tests/test_pyreverse_type_hints.py b/tests/test_pyreverse_type_hints.py\nnew file mode 100644\nindex 0000000..3c45dc8\n--- /dev/null\n+++ b/tests/test_pyreverse_type_hints.py\n@@ -0,0 +1,62 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import project_from_files\n+from pylint.pyreverse.writer import DotWriter\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.inspector import Linker\n+\n+class Config:\n+    \"\"\"Config object for tests\"\"\"\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_pyreverse_type_hints(self):\n+        # Create a temporary Python file with type hints\n+        code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(code)\n+\n+        try:\n+            # Run pyreverse on the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            config = Config()\n+            handler = DiadefsHandler(config)\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(config)\n+            writer.write(dd)\n+\n+            # Check the output for the expected type hint\n+            dot_file = \"classes_TestProject.dot\"\n+            with open(dot_file, \"r\") as f:\n+                content = f.read()\n+                self.assertNotIn(\"a : String\", content, \"Type hint 'a : String' should not be present in the output\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(dot_file):\n+                os.remove(dot_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/test_pyreverse_type_hints_inverted.py b/tests/test_pyreverse_type_hints_inverted.py\nnew file mode 100644\nindex 0000000..8f9a3cf\n--- /dev/null\n+++ b/tests/test_pyreverse_type_hints_inverted.py\n@@ -0,0 +1,63 @@\n+import os\n+import unittest\n+from pylint.pyreverse.inspector import project_from_files\n+from pylint.pyreverse.writer import DotWriter\n+from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler\n+from pylint.pyreverse.inspector import Linker\n+\n+class Config:\n+    \"\"\"Config object for tests\"\"\"\n+    def __init__(self):\n+        self.all_ancestors = None\n+        self.show_associated = None\n+        self.module_names = None\n+        self.output_format = \"dot\"\n+        self.diadefs_file = None\n+        self.quiet = 0\n+        self.show_ancestors = None\n+        self.classes = ()\n+        self.all_associated = None\n+        self.mode = \"PUB_ONLY\"\n+        self.show_builtin = False\n+        self.only_classnames = False\n+        self.output_directory = \"\"\n+\n+class TestPyreverseTypeHints(unittest.TestCase):\n+    def test_pyreverse_type_hints(self):\n+        # Create a temporary Python file with type hints\n+        code = \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+        temp_file = \"temp_test_file.py\"\n+        with open(temp_file, \"w\") as f:\n+            f.write(code)\n+\n+        try:\n+            # Run pyreverse on the temporary file\n+            project = project_from_files([temp_file], project_name=\"TestProject\")\n+            linker = Linker(project)\n+            config = Config()\n+            handler = DiadefsHandler(config)\n+            dd = DefaultDiadefGenerator(linker, handler).visit(project)\n+            for diagram in dd:\n+                diagram.extract_relationships()\n+            writer = DotWriter(config)\n+            writer.write(dd)\n+\n+            # Check the output for the expected type hint\n+            dot_file = \"classes_TestProject.dot\"\n+            with open(dot_file, \"r\") as f:\n+                content = f.read()\n+                # Altered assertion to fail when the bug is observed\n+                self.assertIn(\"a : String\", content, \"__BUG__HERE__\")\n+\n+        finally:\n+            # Clean up temporary files\n+            os.remove(temp_file)\n+            if os.path.exists(dot_file):\n+                os.remove(dot_file)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}