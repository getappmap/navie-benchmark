{
  "edit_test_file": "tests/_core/test_properties.py",
  "test_patch": "diff --git a/tests/_core/test_nominal_scale_behavior.py b/tests/_core/test_nominal_scale_behavior.py\nnew file mode 100644\nindex 0000000..3e76d3d\n--- /dev/null\n+++ b/tests/_core/test_nominal_scale_behavior.py\n@@ -0,0 +1,57 @@\n+import numpy as np\n+import pandas as pd\n+import matplotlib.pyplot as plt\n+from matplotlib.gridspec import GridSpec\n+\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+from seaborn._core.scales import Nominal\n+from seaborn._core.properties import Coordinate\n+\n+\n+class TestNominalScaleBehavior:\n+\n+    def test_nominal_scale_axis_behavior(self):\n+        \"\"\"\n+        Test that Nominal scales currently do not exhibit categorical-style behavior:\n+        1. Scale does not extend exactly +/- 0.5 from first/last ticks\n+        2. Grid is shown when style would show it\n+        3. Y-axis is not automatically inverted\n+        \"\"\"\n+        # Create sample data\n+        data = pd.Series(['A', 'B', 'C'])\n+\n+        # Create figure with two subplots\n+        fig = plt.figure(figsize=(10, 5))\n+        gs = GridSpec(1, 2, figure=fig)\n+        ax1 = fig.add_subplot(gs[0, 0])  # For testing x-axis behavior\n+        ax2 = fig.add_subplot(gs[0, 1])  # For testing y-axis behavior\n+\n+        # Setup nominal scales\n+        x_scale = Nominal()._setup(data, Coordinate(), ax1.xaxis)\n+        y_scale = Nominal()._setup(data, Coordinate(), ax2.yaxis)\n+\n+        # Apply scales\n+        x_scale(data)\n+        y_scale(data)\n+\n+        # 1. Test that x-axis limits don't extend exactly +/- 0.5\n+        x_ticks = ax1.get_xticks()\n+        first_tick, last_tick = x_ticks[0], x_ticks[-1]\n+        xlim = ax1.get_xlim()\n+        \n+        # Current behavior: margins are not exactly 0.5\n+        assert xlim[0] != first_tick - 0.5\n+        assert xlim[1] != last_tick + 0.5\n+\n+        # 2. Test that grid is visible when style would show it\n+        ax1.grid(True)\n+        gridlines = ax1.get_xgridlines()\n+        assert len(gridlines) > 0\n+        assert any(line.get_visible() for line in gridlines)\n+\n+        # 3. Test that y-axis is not automatically inverted\n+        assert not ax2.yaxis_inverted()\n+\n+        plt.close(fig)\n",
  "inverted_patch": "diff --git a/tests/_core/test_nominal_scale_behavior_inverted.py b/tests/_core/test_nominal_scale_behavior_inverted.py\nnew file mode 100644\nindex 0000000..c30d0b6\n--- /dev/null\n+++ b/tests/_core/test_nominal_scale_behavior_inverted.py\n@@ -0,0 +1,60 @@\n+import numpy as np\n+import pandas as pd\n+import matplotlib.pyplot as plt\n+from matplotlib.gridspec import GridSpec\n+\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+from seaborn._core.scales import Nominal\n+from seaborn._core.properties import Coordinate\n+\n+\n+class TestNominalScaleBehavior:\n+\n+    def test_nominal_scale_should_behave_like_categorical(self):\n+        \"\"\"\n+        Test that Nominal scales should exhibit categorical-style behavior:\n+        1. Scale should extend exactly +/- 0.5 from first/last ticks\n+        2. Grid should not be shown even when style would show it\n+        3. Y-axis should be automatically inverted\n+        \"\"\"\n+        # Create sample data\n+        data = pd.Series(['A', 'B', 'C'])\n+\n+        # Create figure with two subplots\n+        fig = plt.figure(figsize=(10, 5))\n+        gs = GridSpec(1, 2, figure=fig)\n+        ax1 = fig.add_subplot(gs[0, 0])  # For testing x-axis behavior\n+        ax2 = fig.add_subplot(gs[0, 1])  # For testing y-axis behavior\n+\n+        # Setup nominal scales\n+        x_scale = Nominal()._setup(data, Coordinate(), ax1.xaxis)\n+        y_scale = Nominal()._setup(data, Coordinate(), ax2.yaxis)\n+\n+        # Apply scales\n+        x_scale(data)\n+        y_scale(data)\n+\n+        # 1. Test that x-axis limits should extend exactly +/- 0.5\n+        x_ticks = ax1.get_xticks()\n+        first_tick, last_tick = x_ticks[0], x_ticks[-1]\n+        xlim = ax1.get_xlim()\n+        \n+        if xlim[0] != first_tick - 0.5 or xlim[1] != last_tick + 0.5:\n+            plt.close(fig)\n+            raise AssertionError(\"__BUG__HERE__: Nominal scale limits should extend exactly +/- 0.5 from first/last ticks\")\n+\n+        # 2. Test that grid should not be visible even when style would show it\n+        ax1.grid(True)\n+        gridlines = ax1.get_xgridlines()\n+        if len(gridlines) > 0 and any(line.get_visible() for line in gridlines):\n+            plt.close(fig)\n+            raise AssertionError(\"__BUG__HERE__: Grid should not be visible for nominal scales\")\n+\n+        # 3. Test that y-axis should be automatically inverted\n+        if not ax2.yaxis_inverted():\n+            plt.close(fig)\n+            raise AssertionError(\"__BUG__HERE__: Y-axis should be automatically inverted for nominal scales\")\n+\n+        plt.close(fig)\n\\ No newline at end of file\n"
}