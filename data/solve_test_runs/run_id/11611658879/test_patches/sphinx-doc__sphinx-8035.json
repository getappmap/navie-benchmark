{
  "edit_test_file": "tests/test_ext_autodoc_private_members.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_selective_private.py b/tests/test_ext_autodoc_selective_private.py\nnew file mode 100644\nindex 0000000..13b32eb\n--- /dev/null\n+++ b/tests/test_ext_autodoc_selective_private.py\n@@ -0,0 +1,50 @@\n+\"\"\"\n+    test_ext_autodoc_selective_private\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension's handling of selective private members.\n+    This demonstrates the current limitation where private-members option\n+    cannot accept specific members to document.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_private_members_selective(app):\n+    \"\"\"Test that private-members documents all private members even when specific ones are listed.\n+    \n+    This test demonstrates the current behavior where attempting to document only specific\n+    private members results in all private members being documented instead.\n+    \"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_public_function\"}  # Attempting to document only one private member\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    # Shows that both private members are documented, not just _public_function\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _public_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   public_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n+        '.. py:function:: private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_selective_private_inverted.py b/tests/test_ext_autodoc_selective_private_inverted.py\nnew file mode 100644\nindex 0000000..0e82ac5\n--- /dev/null\n+++ b/tests/test_ext_autodoc_selective_private_inverted.py\n@@ -0,0 +1,52 @@\n+\"\"\"\n+    test_ext_autodoc_selective_private\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension's handling of selective private members.\n+    This demonstrates the current limitation where private-members option\n+    cannot accept specific members to document.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_private_members_selective(app):\n+    \"\"\"Test that private-members should only document specifically listed private members.\n+    \n+    This test verifies that when a specific private member is listed in private-members,\n+    only that member should be documented, not all private members.\n+    \"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_public_function\"}  # Attempting to document only one private member\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    \n+    # Expected output should only include the specifically requested private member\n+    expected = [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _public_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   public_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+    ]\n+    \n+    # Convert actual result to list for comparison\n+    actual_list = list(actual)\n+    \n+    # Check if there are more items in actual than expected\n+    if len(actual_list) > len(expected):\n+        raise AssertionError(\"__BUG__HERE__: All private members are being documented instead of only the specified one\")\n+    \n+    # Verify the content matches exactly\n+    assert actual_list == expected, \"__BUG__HERE__: Documentation output does not match expected selective private member documentation\"\n\\ No newline at end of file\n"
}