{
  "edit_test_file": "tests/test_environment_toctree.py",
  "test_patch": "diff --git a/tests/test_ext_toctree_genindex.py b/tests/test_ext_toctree_genindex.py\nnew file mode 100644\nindex 0000000..ee716dc\n--- /dev/null\n+++ b/tests/test_ext_toctree_genindex.py\n@@ -0,0 +1,65 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+from io import StringIO\n+import os\n+\n+class TestToctreeGenindexModindexSearch(unittest.TestCase):\n+    def setUp(self):\n+        # Setup paths for the Sphinx application\n+        self.srcdir = os.path.abspath('testdocs')\n+        self.confdir = self.srcdir\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+        self.buildername = 'html'\n+\n+        # Create necessary directories\n+        os.makedirs(self.outdir, exist_ok=True)\n+        os.makedirs(self.doctreedir, exist_ok=True)\n+\n+        # Create a minimal conf.py\n+        with open(os.path.join(self.confdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'Test Project'\\n\")\n+\n+        # Create a minimal index.rst with the toctree\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+.. toctree::\n+   :maxdepth: 1\n+   :caption: Indices and tables\n+\n+   genindex\n+   modindex\n+   search\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up created files and directories\n+        if os.path.exists(self.outdir):\n+            for root, dirs, files in os.walk(self.outdir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.outdir)\n+\n+    def test_toctree_references(self):\n+        # Redirect stdout and stderr\n+        status = StringIO()\n+        warning = StringIO()\n+\n+        # Initialize Sphinx application\n+        try:\n+            app = Sphinx(self.srcdir, self.confdir, self.outdir, self.doctreedir, self.buildername, status=status, warning=warning)\n+            app.build()\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+        # Check for warnings about nonexisting documents\n+        warnings = warning.getvalue()\n+        self.assertIn(\"toctree contains reference to nonexisting document 'genindex'\", warnings)\n+        self.assertIn(\"toctree contains reference to nonexisting document 'modindex'\", warnings)\n+        self.assertIn(\"toctree contains reference to nonexisting document 'search'\", warnings)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/tests/test_ext_toctree_genindex_inverted.py b/tests/test_ext_toctree_genindex_inverted.py\nnew file mode 100644\nindex 0000000..19dac1b\n--- /dev/null\n+++ b/tests/test_ext_toctree_genindex_inverted.py\n@@ -0,0 +1,68 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+from io import StringIO\n+import os\n+\n+class TestToctreeGenindexModindexSearch(unittest.TestCase):\n+    def setUp(self):\n+        # Setup paths for the Sphinx application\n+        self.srcdir = os.path.abspath('testdocs')\n+        self.confdir = self.srcdir\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+        self.buildername = 'html'\n+\n+        # Create necessary directories\n+        os.makedirs(self.outdir, exist_ok=True)\n+        os.makedirs(self.doctreedir, exist_ok=True)\n+\n+        # Create a minimal conf.py\n+        with open(os.path.join(self.confdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'Test Project'\\n\")\n+\n+        # Create a minimal index.rst with the toctree\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+.. toctree::\n+   :maxdepth: 1\n+   :caption: Indices and tables\n+\n+   genindex\n+   modindex\n+   search\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up created files and directories\n+        if os.path.exists(self.outdir):\n+            for root, dirs, files in os.walk(self.outdir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.outdir)\n+\n+    def test_toctree_references(self):\n+        # Redirect stdout and stderr\n+        status = StringIO()\n+        warning = StringIO()\n+\n+        # Initialize Sphinx application\n+        try:\n+            app = Sphinx(self.srcdir, self.confdir, self.outdir, self.doctreedir, self.buildername, status=status, warning=warning)\n+            app.build()\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+        # Check for warnings about nonexisting documents\n+        warnings = warning.getvalue()\n+        if \"toctree contains reference to nonexisting document 'genindex'\" in warnings:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        if \"toctree contains reference to nonexisting document 'modindex'\" in warnings:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        if \"toctree contains reference to nonexisting document 'search'\" in warnings:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}