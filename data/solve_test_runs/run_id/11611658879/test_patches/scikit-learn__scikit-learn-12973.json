{
  "edit_test_file": "sklearn/tests/test_base.py",
  "test_patch": "diff --git a/sklearn/tests/test_lasso_lars_ic_copy_x.py b/sklearn/tests/test_lasso_lars_ic_copy_x.py\nnew file mode 100644\nindex 0000000..edac5ff\n--- /dev/null\n+++ b/sklearn/tests/test_lasso_lars_ic_copy_x.py\n@@ -0,0 +1,29 @@\n+\"\"\"Test copy_X parameter behavior in LassoLarsIC.\"\"\"\n+\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from sklearn.utils.testing import assert_array_equal\n+\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    \"\"\"Test that copy_X parameter behavior in LassoLarsIC is inconsistent between init and fit.\"\"\"\n+    # Create a simple dataset\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(10, 5)\n+    y = rng.randn(10)\n+    \n+    # Create a copy of X to verify modifications\n+    X_orig = X.copy()\n+    \n+    # Initialize LassoLarsIC with copy_X=False\n+    model = LassoLarsIC(copy_X=False)\n+    \n+    # Fit the model - this should use copy_X=True from fit() method default\n+    # and ignore the copy_X=False from initialization\n+    model.fit(X, y)\n+    \n+    # The issue is that X gets modified despite copy_X=False in init\n+    # being overridden by copy_X=True in fit()\n+    # This test passes when the issue exists (X is modified)\n+    assert not np.array_equal(X, X_orig), \\\n+        \"X was not modified, indicating copy_X=False from init was incorrectly honored\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/tests/test_lasso_lars_ic_copy_x_inverted.py b/sklearn/tests/test_lasso_lars_ic_copy_x_inverted.py\nnew file mode 100644\nindex 0000000..a11d12a\n--- /dev/null\n+++ b/sklearn/tests/test_lasso_lars_ic_copy_x_inverted.py\n@@ -0,0 +1,27 @@\n+\"\"\"Test copy_X parameter behavior in LassoLarsIC.\"\"\"\n+\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from sklearn.utils.testing import assert_array_equal\n+\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    \"\"\"Test that copy_X parameter behavior in LassoLarsIC is consistent between init and fit.\"\"\"\n+    # Create a simple dataset\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(10, 5)\n+    y = rng.randn(10)\n+    \n+    # Create a copy of X to verify modifications\n+    X_orig = X.copy()\n+    \n+    # Initialize LassoLarsIC with copy_X=False\n+    model = LassoLarsIC(copy_X=False)\n+    \n+    # Fit the model - this should respect copy_X=False from initialization\n+    model.fit(X, y)\n+    \n+    # The test should fail when X is modified (when the bug is present)\n+    # because copy_X=False from init should be respected\n+    if not np.array_equal(X, X_orig):\n+        raise AssertionError(\"__BUG__HERE__: X was modified despite copy_X=False in initialization\")\n\\ No newline at end of file\n"
}