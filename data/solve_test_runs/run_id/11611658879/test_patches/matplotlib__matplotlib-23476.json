{
  "edit_test_file": "lib/matplotlib/tests/test_pickle.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_dpi_unpickle.py b/lib/matplotlib/tests/test_dpi_unpickle.py\nnew file mode 100644\nindex 0000000..e2a973c\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_dpi_unpickle.py\n@@ -0,0 +1,32 @@\n+from io import BytesIO\n+import pickle\n+import platform\n+\n+import numpy as np\n+import pytest\n+import matplotlib.pyplot as plt\n+\n+\n+def test_dpi_doubles_after_unpickle():\n+    \"\"\"Test that figure DPI doubles after each unpickle operation on M1 Mac.\"\"\"\n+    # Skip if not on macOS\n+    if platform.system() != 'Darwin':\n+        pytest.skip(\"This test is specific to macOS\")\n+\n+    # Create a simple figure\n+    fig = plt.figure()\n+    initial_dpi = fig.dpi\n+\n+    # Perform a few pickle/unpickle cycles and check DPI\n+    for i in range(3):  # Test first 3 iterations to avoid potential overflow\n+        # Pickle and unpickle the figure\n+        buf = BytesIO()\n+        pickle.dump(fig, buf)\n+        buf.seek(0)\n+        fig = pickle.loads(buf.getbuffer())\n+        \n+        # Verify DPI has doubled\n+        expected_dpi = initial_dpi * (2 ** (i + 1))\n+        assert fig.dpi == expected_dpi, f\"DPI should be {expected_dpi} but got {fig.dpi}\"\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "inverted_patch": null
}