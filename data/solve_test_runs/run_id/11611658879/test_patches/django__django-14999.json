{
  "edit_test_file": "tests/migrations/test_operations.py",
  "test_patch": "diff --git a/tests/migrations/test_rename_model_db_table.py b/tests/migrations/test_rename_model_db_table.py\nnew file mode 100644\nindex 0000000..3af128c\n--- /dev/null\n+++ b/tests/migrations/test_rename_model_db_table.py\n@@ -0,0 +1,62 @@\n+from django.db import connection, migrations, models\n+from django.db.migrations.state import ProjectState\n+from django.test import TransactionTestCase\n+from django.test.utils import CaptureQueriesContext\n+\n+\n+class TestRenameModelDBTable(TransactionTestCase):\n+    \"\"\"Test RenameModel operation with db_table defined.\"\"\"\n+    \n+    available_apps = ['migrations']\n+\n+    def test_rename_model_db_table_not_noop(self):\n+        \"\"\"\n+        RenameModel operation with db_table defined should be a noop,\n+        but currently performs unnecessary database operations.\n+        \"\"\"\n+        app_label = 'test_rename_model_db_table'\n+        table_name = 'custom_table_name'\n+\n+        # Set up initial model state\n+        initial_state = ProjectState()\n+        model_options = {'db_table': table_name}\n+        operations = [\n+            migrations.CreateModel(\n+                'MyModel',\n+                [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('data', models.CharField(max_length=100)),\n+                ],\n+                options=model_options,\n+            ),\n+            migrations.CreateModel(\n+                'Related',\n+                [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('fk', models.ForeignKey('MyModel', models.CASCADE)),\n+                ],\n+            ),\n+        ]\n+\n+        # Apply initial state\n+        project_state = initial_state.clone()\n+        for operation in operations:\n+            operation.state_forwards(app_label, project_state)\n+            with connection.schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, initial_state, project_state)\n+            initial_state = project_state\n+            project_state = project_state.clone()\n+\n+        # Attempt to rename model that has custom db_table\n+        rename_operation = migrations.RenameModel('MyModel', 'NewModel')\n+        rename_operation.state_forwards(app_label, project_state)\n+\n+        # Capture SQL queries during rename operation\n+        with connection.schema_editor() as editor:\n+            with CaptureQueriesContext(connection) as ctx:\n+                rename_operation.database_forwards(app_label, editor, initial_state, project_state)\n+\n+        # The operation should be a noop since db_table is explicitly set,\n+        # but currently executes unnecessary SQL\n+        self.assertGreater(len(ctx.captured_queries), 0, \n+            \"RenameModel operation should be a noop when db_table is set but executed SQL queries\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_rename_model_db_table_inverted.py b/tests/migrations/test_rename_model_db_table_inverted.py\nnew file mode 100644\nindex 0000000..1c76f0c\n--- /dev/null\n+++ b/tests/migrations/test_rename_model_db_table_inverted.py\n@@ -0,0 +1,62 @@\n+from django.db import connection, migrations, models\n+from django.db.migrations.state import ProjectState\n+from django.test import TransactionTestCase\n+from django.test.utils import CaptureQueriesContext\n+\n+\n+class TestRenameModelDBTable(TransactionTestCase):\n+    \"\"\"Test RenameModel operation with db_table defined.\"\"\"\n+    \n+    available_apps = ['migrations']\n+\n+    def test_rename_model_db_table_should_be_noop(self):\n+        \"\"\"\n+        RenameModel operation with db_table defined should be a noop,\n+        and should not perform any database operations.\n+        \"\"\"\n+        app_label = 'test_rename_model_db_table'\n+        table_name = 'custom_table_name'\n+\n+        # Set up initial model state\n+        initial_state = ProjectState()\n+        model_options = {'db_table': table_name}\n+        operations = [\n+            migrations.CreateModel(\n+                'MyModel',\n+                [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('data', models.CharField(max_length=100)),\n+                ],\n+                options=model_options,\n+            ),\n+            migrations.CreateModel(\n+                'Related',\n+                [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('fk', models.ForeignKey('MyModel', models.CASCADE)),\n+                ],\n+            ),\n+        ]\n+\n+        # Apply initial state\n+        project_state = initial_state.clone()\n+        for operation in operations:\n+            operation.state_forwards(app_label, project_state)\n+            with connection.schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, initial_state, project_state)\n+            initial_state = project_state\n+            project_state = project_state.clone()\n+\n+        # Attempt to rename model that has custom db_table\n+        rename_operation = migrations.RenameModel('MyModel', 'NewModel')\n+        rename_operation.state_forwards(app_label, project_state)\n+\n+        # Capture SQL queries during rename operation\n+        with connection.schema_editor() as editor:\n+            with CaptureQueriesContext(connection) as ctx:\n+                rename_operation.database_forwards(app_label, editor, initial_state, project_state)\n+\n+        # The operation should be a noop since db_table is explicitly set\n+        # If any queries are executed, this indicates a bug\n+        if len(ctx.captured_queries) > 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}