{
  "edit_test_file": "tests/config/test_config.py",
  "test_patch": "diff --git a/tests/config/test_bad_name_rgxs_regex_parsing.py b/tests/config/test_bad_name_rgxs_regex_parsing.py\nnew file mode 100644\nindex 0000000..b7930a1\n--- /dev/null\n+++ b/tests/config/test_bad_name_rgxs_regex_parsing.py\n@@ -0,0 +1,22 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for bad-names-rgxs regex parsing with commas.\"\"\"\n+\n+from __future__ import annotations\n+\n+from pathlib import Path\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+from pylint.testutils.configuration_test import run_using_a_configuration_file\n+from tests.config.test_config import EMPTY_MODULE\n+\n+\n+def test_bad_names_rgxs_with_comma() -> None:\n+    \"\"\"Test that bad-names-rgxs correctly handles regex patterns containing commas.\"\"\"\n+    # The regex pattern (foo{1,3}) contains a comma which causes parsing issues\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--bad-names-rgxs=(foo{1,3})\"], exit=False)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/config/test_bad_name_rgxs_regex_parsing_inverted.py b/tests/config/test_bad_name_rgxs_regex_parsing_inverted.py\nnew file mode 100644\nindex 0000000..690b1ea\n--- /dev/null\n+++ b/tests/config/test_bad_name_rgxs_regex_parsing_inverted.py\n@@ -0,0 +1,20 @@\n+\"\"\"Test for bad-names-rgxs regex parsing with commas.\"\"\"\n+\n+from __future__ import annotations\n+\n+from pathlib import Path\n+\n+import pytest\n+\n+from pylint.testutils._run import _Run as Run\n+from pylint.testutils.configuration_test import run_using_a_configuration_file\n+from tests.config.test_config import EMPTY_MODULE\n+\n+\n+def test_bad_names_rgxs_with_comma() -> None:\n+    \"\"\"Test that bad-names-rgxs correctly handles regex patterns containing commas.\"\"\"\n+    # The regex pattern (foo{1,3}) contains a comma which causes parsing issues\n+    try:\n+        Run([str(EMPTY_MODULE), \"--bad-names-rgxs=(foo{1,3})\"], exit=False)\n+    except SystemExit:\n+        raise AssertionError(\"__BUG__HERE__\") from None\n\\ No newline at end of file\n"
}