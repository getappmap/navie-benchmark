{
  "edit_test_file": "tests/test_check_parallel.py",
  "test_patch": "diff --git a/tests/test_cpu_count_calculation.py b/tests/test_cpu_count_calculation.py\nnew file mode 100644\nindex 0000000..f626332\n--- /dev/null\n+++ b/tests/test_cpu_count_calculation.py\n@@ -0,0 +1,46 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for CPU count calculation in Kubernetes environments.\"\"\"\n+\n+from unittest.mock import mock_open, patch\n+\n+import pytest\n+\n+from pylint.lint.run import _cpu_count, _query_cpu\n+\n+\n+class TestCPUCountCalculation:\n+    \"\"\"Test class for CPU count calculation in Kubernetes environments.\"\"\"\n+\n+    @patch(\"pathlib.Path.is_file\")\n+    @patch(\"builtins.open\")\n+    def test_zero_cpu_count_in_kubernetes(self, mock_open_files, mock_is_file):\n+        \"\"\"Test that using --jobs=0 raises ValueError when CPU count is calculated as 0 in Kubernetes.\"\"\"\n+        # Mock the file existence checks\n+        mock_is_file.return_value = True\n+\n+        # Mock the file contents to simulate Kubernetes environment\n+        mock_file_data = {\n+            \"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\": \"-1\",\n+            \"/sys/fs/cgroup/cpu/cpu.cfs_period_us\": \"100000\",\n+            \"/sys/fs/cgroup/cpu/cpu.shares\": \"2\"\n+        }\n+\n+        def mock_open_side_effect(filename, *args, **kwargs):\n+            return mock_open(read_data=mock_file_data[filename]).return_value\n+\n+        mock_open_files.side_effect = mock_open_side_effect\n+\n+        # First verify that _query_cpu returns 0 in this environment\n+        cpu_count = _query_cpu()\n+        assert cpu_count == 0, \"Expected _query_cpu() to return 0 in Kubernetes environment\"\n+\n+        # Then verify that this causes _cpu_count to raise ValueError\n+        with pytest.raises(ValueError, match=\"Number of processes must be at least 1\"):\n+            # This simulates what happens when --jobs=0 is used\n+            processes = _cpu_count()\n+            # The multiprocessing.Pool creation will fail with this value\n+            from multiprocessing import Pool\n+            Pool(processes)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_cpu_count_calculation_inverted.py b/tests/test_cpu_count_calculation_inverted.py\nnew file mode 100644\nindex 0000000..df7dbe9\n--- /dev/null\n+++ b/tests/test_cpu_count_calculation_inverted.py\n@@ -0,0 +1,50 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n+\n+\"\"\"Test for CPU count calculation in Kubernetes environments.\"\"\"\n+\n+from unittest.mock import mock_open, patch\n+\n+import pytest\n+\n+from pylint.lint.run import _cpu_count, _query_cpu\n+\n+\n+class TestCPUCountCalculation:\n+    \"\"\"Test class for CPU count calculation in Kubernetes environments.\"\"\"\n+\n+    @patch(\"pathlib.Path.is_file\")\n+    @patch(\"builtins.open\")\n+    def test_zero_cpu_count_in_kubernetes(self, mock_open_files, mock_is_file):\n+        \"\"\"Test that CPU count should not be zero in Kubernetes environment.\"\"\"\n+        # Mock the file existence checks\n+        mock_is_file.return_value = True\n+\n+        # Mock the file contents to simulate Kubernetes environment\n+        mock_file_data = {\n+            \"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\": \"-1\",\n+            \"/sys/fs/cgroup/cpu/cpu.cfs_period_us\": \"100000\",\n+            \"/sys/fs/cgroup/cpu/cpu.shares\": \"2\"\n+        }\n+\n+        def mock_open_side_effect(filename, *args, **kwargs):\n+            return mock_open(read_data=mock_file_data[filename]).return_value\n+\n+        mock_open_files.side_effect = mock_open_side_effect\n+\n+        # Verify that _query_cpu should not return 0 in this environment\n+        cpu_count = _query_cpu()\n+        if cpu_count == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Calculate the number of processes\n+        processes = _cpu_count()\n+        \n+        # Verify that the process count is at least 1\n+        assert processes >= 1, \"Process count should be at least 1\"\n+\n+        # Verify that Pool creation works with the calculated processes\n+        from multiprocessing import Pool\n+        with Pool(processes) as pool:\n+            pass\n\\ No newline at end of file\n"
}