{
  "edit_test_file": "tests/model_inheritance_regress/tests.py",
  "test_patch": "diff --git a/tests/model_inheritance_regress/test_pk_reset.py b/tests/model_inheritance_regress/test_pk_reset.py\nnew file mode 100644\nindex 0000000..c79567c\n--- /dev/null\n+++ b/tests/model_inheritance_regress/test_pk_reset.py\n@@ -0,0 +1,43 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Item(models.Model):\n+    uid = models.AutoField(primary_key=True, editable=False)\n+    f = models.BooleanField(default=False)\n+\n+    def reset(self):\n+        self.uid = None\n+        self.f = False\n+\n+    class Meta:\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class Derived(Item):\n+    class Meta:\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class PKResetTest(TestCase):\n+    \"\"\"\n+    Test case that reproduces issue where resetting PK on a child model\n+    doesn't create a new object but modifies the existing one.\n+    \"\"\"\n+    def test_pk_reset_in_derived_model(self):\n+        # Create initial derived object with f=True\n+        derived = Derived.objects.create(f=True)\n+        initial_pk = derived.pk\n+        \n+        # Get the object through parent model and cast to derived\n+        item = Item.objects.get(pk=derived.pk)\n+        derived_obj = item.derived\n+        \n+        # Try to reset and save as new object\n+        derived_obj.reset()  # Sets pk=None and f=False\n+        derived_obj.save()\n+        \n+        # Get the original object and verify it was modified instead of creating new\n+        obj = Item.objects.get(pk=initial_pk)\n+        self.assertFalse(obj.f, \n+            \"Bug reproduced: PK reset didn't create new object, modified existing one\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_inheritance_regress/test_pk_reset_inverted.py b/tests/model_inheritance_regress/test_pk_reset_inverted.py\nnew file mode 100644\nindex 0000000..01dbb56\n--- /dev/null\n+++ b/tests/model_inheritance_regress/test_pk_reset_inverted.py\n@@ -0,0 +1,49 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Item(models.Model):\n+    uid = models.AutoField(primary_key=True, editable=False)\n+    f = models.BooleanField(default=False)\n+\n+    def reset(self):\n+        self.uid = None\n+        self.f = False\n+\n+    class Meta:\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class Derived(Item):\n+    class Meta:\n+        app_label = 'model_inheritance_regress'\n+\n+\n+class PKResetTest(TestCase):\n+    \"\"\"\n+    Test case that verifies resetting PK on a child model creates a new object\n+    instead of modifying the existing one.\n+    \"\"\"\n+    def test_pk_reset_in_derived_model(self):\n+        # Create initial derived object with f=True\n+        derived = Derived.objects.create(f=True)\n+        initial_pk = derived.pk\n+        \n+        # Get the object through parent model and cast to derived\n+        item = Item.objects.get(pk=derived.pk)\n+        derived_obj = item.derived\n+        \n+        # Try to reset and save as new object\n+        derived_obj.reset()  # Sets pk=None and f=False\n+        derived_obj.save()\n+        \n+        # Get the original object\n+        obj = Item.objects.get(pk=initial_pk)\n+        \n+        # This should now FAIL when the bug is present\n+        if not obj.f:\n+            raise AssertionError(\"__BUG__HERE__: PK reset didn't create new object, modified existing one\")\n+        \n+        # Additional verification that we should have two objects\n+        self.assertEqual(Item.objects.count(), 2, \n+            \"Expected two objects after reset and save\")\n\\ No newline at end of file\n"
}