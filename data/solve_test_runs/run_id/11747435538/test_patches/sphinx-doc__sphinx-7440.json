{
  "edit_test_file": "tests/test_domain_std.py",
  "test_patch": "diff --git a/tests/test_glossary_case_sensitivity.py b/tests/test_glossary_case_sensitivity.py\nnew file mode 100644\nindex 0000000..5dd1a4c\n--- /dev/null\n+++ b/tests/test_glossary_case_sensitivity.py\n@@ -0,0 +1,32 @@\n+\"\"\"\n+    test_glossary_case_sensitivity\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test glossary term case sensitivity handling.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing import restructuredtext\n+\n+\n+@pytest.mark.sphinx('html')\n+def test_glossary_term_case_sensitivity(app, warning):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       The MySQL database server.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       The MySQL command line tool.\\n\")\n+\n+    restructuredtext.parse(app, text)\n+\n+    warnings = warning.getvalue().replace('\\n', ' ')\n+    assert \"duplicate term description of mysql, other instance in\" in warnings\n+\n+    # Verify that both terms were indexed despite the warning\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_glossary_case_sensitivity_inverted.py b/tests/test_glossary_case_sensitivity_inverted.py\nnew file mode 100644\nindex 0000000..e9e5068\n--- /dev/null\n+++ b/tests/test_glossary_case_sensitivity_inverted.py\n@@ -0,0 +1,36 @@\n+\"\"\"\n+    test_glossary_case_sensitivity\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test glossary term case sensitivity handling.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.testing import restructuredtext\n+\n+\n+@pytest.mark.sphinx('html')\n+def test_glossary_term_case_sensitivity(app, warning):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       The MySQL database server.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       The MySQL command line tool.\\n\")\n+\n+    restructuredtext.parse(app, text)\n+\n+    warnings = warning.getvalue().replace('\\n', ' ')\n+    \n+    # The test should fail if we detect a duplicate warning for case-different terms\n+    if \"duplicate term description of mysql, other instance in\" in warnings:\n+        raise AssertionError(\"__BUG__HERE__: Sphinx incorrectly treats 'MySQL' and 'mysql' as duplicate terms\")\n+\n+    # Verify that both terms were properly indexed as distinct entries\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n\\ No newline at end of file\n"
}