{
  "edit_test_file": "tests/test_markup.py",
  "test_patch": "diff --git a/tests/test_kbd_role.py b/tests/test_kbd_role.py\nnew file mode 100644\nindex 0000000..be20ce4\n--- /dev/null\n+++ b/tests/test_kbd_role.py\n@@ -0,0 +1,94 @@\n+\"\"\"\n+    test_kbd_role\n+    ~~~~~~~~~~~~~\n+\n+    Test the kbd role handling of compound-key separators.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from docutils import frontend, nodes, utils\n+from docutils.parsers.rst import Parser as RstParser\n+\n+from sphinx.builders.html.transforms import KeyboardTransform\n+from sphinx.testing.util import assert_node\n+from sphinx.util.docutils import sphinx_domains\n+from sphinx.writers.html import HTMLTranslator, HTMLWriter\n+\n+\n+@pytest.fixture\n+def settings(app):\n+    optparser = frontend.OptionParser(\n+        components=(RstParser, HTMLWriter))\n+    settings = optparser.get_default_values()\n+    settings.env = app.builder.env\n+    settings.env.temp_data['docname'] = 'dummy'\n+    domain_context = sphinx_domains(settings.env)\n+    domain_context.enable()\n+    yield settings\n+    domain_context.disable()\n+\n+\n+@pytest.fixture\n+def parse(new_document):\n+    def parse_(rst):\n+        document = new_document()\n+        parser = RstParser()\n+        parser.parse(rst, document)\n+        KeyboardTransform(document).apply()\n+        return document\n+    return parse_\n+\n+\n+@pytest.fixture\n+def new_document(settings):\n+    def create():\n+        document = utils.new_document('test data', settings)\n+        document['file'] = 'dummy'\n+        return document\n+    return create\n+\n+\n+def test_kbd_role_compound_separators(app, parse):\n+    # Test single keystroke with minus\n+    text = ':kbd:`-`'\n+    doctree = parse(text)\n+    html_translator = HTMLTranslator(doctree, app.builder)\n+    doctree.walkabout(html_translator)\n+    html_output = ''.join(html_translator.fragment).strip()\n+    expected = ('<p><kbd class=\"kbd docutils literal notranslate\">'\n+               '<kbd class=\"kbd docutils literal notranslate\"></kbd>'\n+               '-'\n+               '<kbd class=\"kbd docutils literal notranslate\"></kbd>'\n+               '</kbd></p>')\n+    assert html_output == expected\n+\n+    # Test single keystroke with plus\n+    text = ':kbd:`+`'\n+    doctree = parse(text)\n+    html_translator = HTMLTranslator(doctree, app.builder)\n+    doctree.walkabout(html_translator)\n+    html_output = ''.join(html_translator.fragment).strip()\n+    expected = ('<p><kbd class=\"kbd docutils literal notranslate\">'\n+               '<kbd class=\"kbd docutils literal notranslate\"></kbd>'\n+               '+'\n+               '<kbd class=\"kbd docutils literal notranslate\"></kbd>'\n+               '</kbd></p>')\n+    assert html_output == expected\n+\n+    # Test compound keystroke with plus\n+    text = ':kbd:`Shift-+`'\n+    doctree = parse(text)\n+    html_translator = HTMLTranslator(doctree, app.builder)\n+    doctree.walkabout(html_translator)\n+    html_output = ''.join(html_translator.fragment).strip()\n+    expected = ('<p><kbd class=\"kbd docutils literal notranslate\">'\n+               '<kbd class=\"kbd docutils literal notranslate\">Shift</kbd>'\n+               '-'\n+               '<kbd class=\"kbd docutils literal notranslate\"></kbd>'\n+               '+'\n+               '<kbd class=\"kbd docutils literal notranslate\"></kbd>'\n+               '</kbd></p>')\n+    assert html_output == expected\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_kbd_role_inverted.py b/tests/test_kbd_role_inverted.py\nnew file mode 100644\nindex 0000000..d8e9c35\n--- /dev/null\n+++ b/tests/test_kbd_role_inverted.py\n@@ -0,0 +1,83 @@\n+\"\"\"\n+    test_kbd_role\n+    ~~~~~~~~~~~~~\n+\n+    Test the kbd role handling of compound-key separators.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from docutils import frontend, nodes, utils\n+from docutils.parsers.rst import Parser as RstParser\n+\n+from sphinx.builders.html.transforms import KeyboardTransform\n+from sphinx.testing.util import assert_node\n+from sphinx.util.docutils import sphinx_domains\n+from sphinx.writers.html import HTMLTranslator, HTMLWriter\n+\n+\n+@pytest.fixture\n+def settings(app):\n+    optparser = frontend.OptionParser(\n+        components=(RstParser, HTMLWriter))\n+    settings = optparser.get_default_values()\n+    settings.env = app.builder.env\n+    settings.env.temp_data['docname'] = 'dummy'\n+    domain_context = sphinx_domains(settings.env)\n+    domain_context.enable()\n+    yield settings\n+    domain_context.disable()\n+\n+\n+@pytest.fixture\n+def parse(new_document):\n+    def parse_(rst):\n+        document = new_document()\n+        parser = RstParser()\n+        parser.parse(rst, document)\n+        KeyboardTransform(document).apply()\n+        return document\n+    return parse_\n+\n+\n+@pytest.fixture\n+def new_document(settings):\n+    def create():\n+        document = utils.new_document('test data', settings)\n+        document['file'] = 'dummy'\n+        return document\n+    return create\n+\n+\n+def test_kbd_role_compound_separators(app, parse):\n+    # Test single keystroke with minus\n+    text = ':kbd:`-`'\n+    doctree = parse(text)\n+    html_translator = HTMLTranslator(doctree, app.builder)\n+    doctree.walkabout(html_translator)\n+    html_output = ''.join(html_translator.fragment).strip()\n+    expected = '<p><kbd class=\"kbd docutils literal notranslate\">-</kbd></p>'\n+    if html_output != expected:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Test single keystroke with plus\n+    text = ':kbd:`+`'\n+    doctree = parse(text)\n+    html_translator = HTMLTranslator(doctree, app.builder)\n+    doctree.walkabout(html_translator)\n+    html_output = ''.join(html_translator.fragment).strip()\n+    expected = '<p><kbd class=\"kbd docutils literal notranslate\">+</kbd></p>'\n+    if html_output != expected:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Test compound keystroke with plus\n+    text = ':kbd:`Shift-+`'\n+    doctree = parse(text)\n+    html_translator = HTMLTranslator(doctree, app.builder)\n+    doctree.walkabout(html_translator)\n+    html_output = ''.join(html_translator.fragment).strip()\n+    expected = '<p><kbd class=\"kbd docutils literal notranslate\"><kbd class=\"kbd docutils literal notranslate\">Shift</kbd>-<kbd class=\"kbd docutils literal notranslate\">+</kbd></kbd></p>'\n+    if html_output != expected:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}