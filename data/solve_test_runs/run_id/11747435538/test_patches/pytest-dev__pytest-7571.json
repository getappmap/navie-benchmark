{
  "edit_test_file": "testing/logging/test_fixture.py",
  "test_patch": "diff --git a/testing/logging/test_caplog_level_restore.py b/testing/logging/test_caplog_level_restore.py\nnew file mode 100644\nindex 0000000..ebce163\n--- /dev/null\n+++ b/testing/logging/test_caplog_level_restore.py\n@@ -0,0 +1,15 @@\n+import logging\n+import pytest\n+\n+def test_set_level(caplog):\n+    \"\"\"First test that sets a custom log level.\"\"\"\n+    custom_level = 42\n+    caplog.set_level(custom_level)\n+    # The custom level should be set during this test\n+    assert caplog.handler.level == custom_level\n+\n+def test_check_level_persists(caplog):\n+    \"\"\"Second test verifies that the previous level incorrectly persists.\"\"\"\n+    # When the bug is present, the level will still be 42 from the previous test\n+    # When working correctly, it should be reset to 0 (NOTSET)\n+    assert caplog.handler.level == 42, \"Issue not reproduced - log level was restored correctly\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/logging/test_caplog_level_restore_inverted.py b/testing/logging/test_caplog_level_restore_inverted.py\nnew file mode 100644\nindex 0000000..6fc368d\n--- /dev/null\n+++ b/testing/logging/test_caplog_level_restore_inverted.py\n@@ -0,0 +1,20 @@\n+import logging\n+import pytest\n+\n+def test_set_level(caplog):\n+    \"\"\"First test that sets a custom log level.\"\"\"\n+    custom_level = 42\n+    caplog.set_level(custom_level)\n+    # The custom level should be set during this test\n+    assert caplog.handler.level == custom_level\n+\n+def test_check_level_persists(caplog):\n+    \"\"\"Second test verifies that the log level is properly reset.\n+    This test will fail if the bug is present (level persists).\"\"\"\n+    # The level should be reset to 0 (NOTSET) between tests\n+    # If it's still 42, the bug is present and the test should fail\n+    if caplog.handler.level == 42:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # The default level should be 0 (NOTSET)\n+    assert caplog.handler.level == 0\n\\ No newline at end of file\n"
}