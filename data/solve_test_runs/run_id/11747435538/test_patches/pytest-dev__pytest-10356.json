{
  "edit_test_file": "testing/test_mark.py",
  "test_patch": "diff --git a/testing/test_marker_inheritance.py b/testing/test_marker_inheritance.py\nnew file mode 100644\nindex 0000000..59f4c76\n--- /dev/null\n+++ b/testing/test_marker_inheritance.py\n@@ -0,0 +1,38 @@\n+import pytest\n+\n+\n+def test_marker_inheritance_from_multiple_bases(pytester):\n+    \"\"\"Test that markers from multiple base classes are properly inherited.\n+    \n+    This test verifies that when a test class inherits from multiple base classes\n+    that have different markers, only one marker is inherited (current behavior)\n+    rather than both markers being merged (expected behavior).\n+    \"\"\"\n+    pytester.makepyfile(\"\"\"\n+        import pytest\n+\n+        @pytest.mark.foo\n+        class Foo:\n+            pass\n+\n+        @pytest.mark.bar\n+        class Bar:\n+            pass\n+\n+        class TestMultipleInheritance(Foo, Bar):\n+            def test_method(self):\n+                pass\n+    \"\"\")\n+\n+    result = pytester.runpytest(\"--markers\")\n+    \n+    # Get all markers for the test_method\n+    items, rec = pytester.inline_genitems()\n+    test_item = items[0]  # Get the test_method item\n+    markers = {mark.name for mark in test_item.iter_markers()}\n+    \n+    # Current behavior: only one marker is present (foo, due to MRO)\n+    # This assertion passes with the current implementation\n+    assert len(markers) == 1\n+    assert \"foo\" in markers\n+    assert \"bar\" not in markers\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/test_marker_inheritance_inverted.py b/testing/test_marker_inheritance_inverted.py\nnew file mode 100644\nindex 0000000..a2eb0a5\n--- /dev/null\n+++ b/testing/test_marker_inheritance_inverted.py\n@@ -0,0 +1,36 @@\n+import pytest\n+\n+\n+def test_marker_inheritance_from_multiple_bases(pytester):\n+    \"\"\"Test that markers from multiple base classes are properly inherited.\n+    \n+    This test verifies that when a test class inherits from multiple base classes\n+    that have different markers, both markers should be inherited (expected behavior)\n+    rather than only one marker being inherited (current buggy behavior).\n+    \"\"\"\n+    pytester.makepyfile(\"\"\"\n+        import pytest\n+\n+        @pytest.mark.foo\n+        class Foo:\n+            pass\n+\n+        @pytest.mark.bar\n+        class Bar:\n+            pass\n+\n+        class TestMultipleInheritance(Foo, Bar):\n+            def test_method(self):\n+                pass\n+    \"\"\")\n+\n+    result = pytester.runpytest(\"--markers\")\n+    \n+    # Get all markers for the test_method\n+    items, rec = pytester.inline_genitems()\n+    test_item = items[0]  # Get the test_method item\n+    markers = {mark.name for mark in test_item.iter_markers()}\n+    \n+    # Both markers should be present for proper inheritance\n+    if len(markers) != 2 or \"foo\" not in markers or \"bar\" not in markers:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}