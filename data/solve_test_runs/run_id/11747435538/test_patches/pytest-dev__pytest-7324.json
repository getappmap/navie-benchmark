{
  "edit_test_file": "testing/code/test_source.py",
  "test_patch": "diff --git a/testing/code/test_expression_compile_literals.py b/testing/code/test_expression_compile_literals.py\nnew file mode 100644\nindex 0000000..2f2066f\n--- /dev/null\n+++ b/testing/code/test_expression_compile_literals.py\n@@ -0,0 +1,18 @@\n+import sys\n+import pytest\n+from _pytest.mark.expression import Expression\n+\n+def test_compile_boolean_literal_crashes_interpreter():\n+    \"\"\"Test that compiling a boolean literal crashes the interpreter on debug builds.\n+    \n+    This test verifies that Expression.compile() crashes when given a boolean literal \n+    like \"False\" on Python debug builds 3.8+, due to an assertion failure in \n+    compiler_nameop.\n+    \"\"\"\n+    # Only run this test on Python 3.8+ debug builds\n+    if sys.version_info < (3, 8) or not hasattr(sys, 'gettotalrefcount'):\n+        pytest.skip(\"This test only applies to Python 3.8+ debug builds\")\n+        \n+    # This should trigger an assertion error and crash the interpreter\n+    # on debug builds of Python 3.8+\n+    Expression.compile(\"False\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/code/test_expression_compile_literals_inverted.py b/testing/code/test_expression_compile_literals_inverted.py\nnew file mode 100644\nindex 0000000..8caaf49\n--- /dev/null\n+++ b/testing/code/test_expression_compile_literals_inverted.py\n@@ -0,0 +1,23 @@\n+import pytest\n+from _pytest.mark.expression import Expression\n+\n+def test_compile_boolean_literal_crashes_interpreter():\n+    \"\"\"Test that compiling a boolean literal should not crash the interpreter.\n+    \n+    This test verifies that Expression.compile() should handle boolean literals\n+    like \"False\" without crashing, even on Python debug builds 3.8+. If it crashes,\n+    this indicates a bug in the compiler_nameop assertion.\n+    \"\"\"\n+    try:\n+        Expression.compile(\"False\")\n+    except Exception as e:\n+        # If any exception occurs, we want to know about it but not fail here\n+        pass\n+    else:\n+        # If we get here without a crash, that's actually good!\n+        return\n+        \n+    # If we reached this point, it means the interpreter didn't crash\n+    # But since we know this is a bug that SHOULD make the test fail,\n+    # we explicitly raise an error\n+    raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}