{
  "edit_test_file": "sympy/printing/tests/test_mathematica.py",
  "test_patch": "diff --git a/sympy/printing/tests/test_mathematicacode.py b/sympy/printing/tests/test_mathematicacode.py\nnew file mode 100644\nindex 0000000..f7399d7\n--- /dev/null\n+++ b/sympy/printing/tests/test_mathematicacode.py\n@@ -0,0 +1,7 @@\n+from sympy import symbols, Max\n+from sympy import mathematica_code as mcode\n+\n+def test_Max_issue():\n+    x = symbols('x')\n+    # The expected output is 'Max[x,2]', but the issue is that it returns 'Max(2, x)'\n+    assert mcode(Max(x, 2)) == 'Max(2, x)'\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/printing/tests/test_mathematicacode_inverted.py b/sympy/printing/tests/test_mathematicacode_inverted.py\nnew file mode 100644\nindex 0000000..b72e592\n--- /dev/null\n+++ b/sympy/printing/tests/test_mathematicacode_inverted.py\n@@ -0,0 +1,8 @@\n+from sympy import symbols, Max\n+from sympy import mathematica_code as mcode\n+\n+def test_Max_issue():\n+    x = symbols('x')\n+    # The expected output is 'Max[x,2]', but the issue is that it returns 'Max(2, x)'\n+    # Alter the assertion to fail when the bug is observed\n+    assert mcode(Max(x, 2)) == 'Max[x,2]', \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}