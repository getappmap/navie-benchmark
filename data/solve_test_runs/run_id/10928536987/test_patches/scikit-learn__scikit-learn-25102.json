{
  "edit_test_file": "sklearn/utils/tests/test_set_output.py",
  "test_patch": "diff --git a/sklearn/utils/tests/test_preserve_dtypes.py b/sklearn/utils/tests/test_preserve_dtypes.py\nnew file mode 100644\nindex 0000000..ca7b0d1\n--- /dev/null\n+++ b/sklearn/utils/tests/test_preserve_dtypes.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+import pandas as pd\n+from sklearn.datasets import load_iris\n+from sklearn.feature_selection import SelectKBest\n+from sklearn.feature_selection import chi2\n+\n+def test_preserve_dtypes():\n+    \"\"\"Test to reproduce the issue of dtype preservation in DataFrame output.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2)\n+    selector.set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Assert that the dtypes are not preserved, reproducing the issue\n+    assert X_out.dtypes.equals(pd.Series({\"petal length (cm)\": np.float64, \"cat\": np.float64}))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/utils/tests/test_preserve_dtypes_inverted.py b/sklearn/utils/tests/test_preserve_dtypes_inverted.py\nnew file mode 100644\nindex 0000000..82d1e3d\n--- /dev/null\n+++ b/sklearn/utils/tests/test_preserve_dtypes_inverted.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+import pandas as pd\n+from sklearn.datasets import load_iris\n+from sklearn.feature_selection import SelectKBest\n+from sklearn.feature_selection import chi2\n+\n+def test_preserve_dtypes():\n+    \"\"\"Test to ensure dtype preservation in DataFrame output.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2)\n+    selector.set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Assert that the dtypes are preserved, failing if they are not\n+    assert X_out.dtypes.equals(X.dtypes), \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}