{
  "edit_test_file": "sympy/core/tests/test_evalf.py",
  "test_patch": "diff --git a/sympy/core/tests/test_unboundlocalerror.py b/sympy/core/tests/test_unboundlocalerror.py\nnew file mode 100644\nindex 0000000..cbd3267\n--- /dev/null\n+++ b/sympy/core/tests/test_unboundlocalerror.py\n@@ -0,0 +1,11 @@\n+# sympy/core/tests/test_unboundlocalerror.py\n+\n+from sympy import Mul, Max, Symbol\n+\n+def test_unboundlocalerror_in_evalf():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    try:\n+        result = Mul(Max(0, y), x, evaluate=False).evalf()\n+    except UnboundLocalError as e:\n+        assert str(e) == \"local variable 'reprec' referenced before assignment\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/core/tests/test_unboundlocalerror_inverted.py b/sympy/core/tests/test_unboundlocalerror_inverted.py\nnew file mode 100644\nindex 0000000..dc02883\n--- /dev/null\n+++ b/sympy/core/tests/test_unboundlocalerror_inverted.py\n@@ -0,0 +1,11 @@\n+# sympy/core/tests/test_unboundlocalerror.py\n+\n+from sympy import Mul, Max, Symbol\n+\n+def test_unboundlocalerror_in_evalf():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    try:\n+        result = Mul(Max(0, y), x, evaluate=False).evalf()\n+    except UnboundLocalError as e:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}