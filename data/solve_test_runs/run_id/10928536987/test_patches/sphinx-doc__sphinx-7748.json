{
  "edit_test_file": "tests/test_domain_py.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature.py b/tests/test_ext_autodoc_docstring_signature.py\nnew file mode 100644\nindex 0000000..c6c5a22\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from unittest.mock import Mock\n+\n+def autodoc_docstring_signature(obj):\n+    \"\"\"Mock function to simulate autodoc_docstring_signature behavior.\"\"\"\n+    return obj\n+\n+class TestAutodocDocstringSignature(unittest.TestCase):\n+    def test_overloaded_methods_docstring_signature(self):\n+        class MockMethod:\n+            \"\"\"Signature: (int) -> None\n+            Signature: (str) -> None\n+            \"\"\"\n+            def __call__(self, *args, **kwargs):\n+                pass\n+\n+        method_with_overloads = MockMethod()\n+\n+        # Simulate the behavior of autodoc_docstring_signature\n+        autodoc_docstring_signature = Mock(return_value=method_with_overloads)\n+\n+        # Check if the docstring starts with the first signature\n+        self.assertTrue(\n+            autodoc_docstring_signature(method_with_overloads).__doc__.startswith(\"Signature: (int) -> None\"),\n+            \"The docstring does not start with the expected signature.\"\n+        )\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_docstring_signature_inverted.py b/tests/test_ext_autodoc_docstring_signature_inverted.py\nnew file mode 100644\nindex 0000000..17b8f50\n--- /dev/null\n+++ b/tests/test_ext_autodoc_docstring_signature_inverted.py\n@@ -0,0 +1,37 @@\n+import unittest\n+from unittest.mock import Mock\n+\n+def autodoc_docstring_signature(obj):\n+    \"\"\"Mock function to simulate autodoc_docstring_signature behavior.\"\"\"\n+    return obj\n+\n+class TestAutodocDocstringSignature(unittest.TestCase):\n+    def test_overloaded_methods_docstring_signature(self):\n+        class MockMethod:\n+            \"\"\"Signature: (int) -> None\n+            Signature: (str) -> None\n+            \"\"\"\n+            def __call__(self, *args, **kwargs):\n+                pass\n+\n+        method_with_overloads = MockMethod()\n+\n+        # Simulate the behavior of autodoc_docstring_signature\n+        autodoc_docstring_signature = Mock(return_value=method_with_overloads)\n+\n+        # Check if the autodoc_docstring_signature returns all expected signatures\n+        expected_signatures = [\n+            \"method_with_overloads(int a, int b)\",\n+            \"method_with_overloads(double a, double b)\",\n+            \"method_with_overloads(std::string a, std::string b)\"\n+        ]\n+        \n+        # This assertion should fail if the bug is present\n+        self.assertEqual(\n+            autodoc_docstring_signature(method_with_overloads),\n+            expected_signatures,\n+            \"__BUG__HERE__\"\n+        )\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}