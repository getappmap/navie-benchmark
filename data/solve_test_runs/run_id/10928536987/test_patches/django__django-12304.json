{
  "edit_test_file": "tests/template_tests/test_callables.py",
  "test_patch": "diff --git a/tests/template_tests/test_enumeration_templates.py b/tests/template_tests/test_enumeration_templates.py\nnew file mode 100644\nindex 0000000..acf2802\n--- /dev/null\n+++ b/tests/template_tests/test_enumeration_templates.py\n@@ -0,0 +1,33 @@\n+from unittest import TestCase\n+from django.template import Context, Engine\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class EnumerationTemplateTests(TestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.engine = Engine()\n+        super().setUpClass()\n+\n+    def test_enumeration_in_template(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+            GRADUATE = 'GR', _('Graduate')\n+\n+        class Student:\n+            def __init__(self, year_in_school):\n+                self.year_in_school = year_in_school\n+\n+        student = Student(YearInSchool.FRESHMAN)\n+        c = Context({\"student\": student, \"YearInSchool\": YearInSchool})\n+\n+        # Attempt to use enumeration in template\n+        t = self.engine.from_string('{% if student.year_in_school == YearInSchool.FRESHMAN %}Match{% else %}No Match{% endif %}')\n+        rendered = t.render(c)\n+\n+        # Assert that the template does not render as expected due to the issue\n+        self.assertEqual(rendered, 'No Match')\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/template_tests/test_enumeration_templates_inverted.py b/tests/template_tests/test_enumeration_templates_inverted.py\nnew file mode 100644\nindex 0000000..02ca3fd\n--- /dev/null\n+++ b/tests/template_tests/test_enumeration_templates_inverted.py\n@@ -0,0 +1,34 @@\n+from unittest import TestCase\n+from django.template import Context, Engine\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class EnumerationTemplateTests(TestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.engine = Engine()\n+        super().setUpClass()\n+\n+    def test_enumeration_in_template(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+            GRADUATE = 'GR', _('Graduate')\n+\n+        class Student:\n+            def __init__(self, year_in_school):\n+                self.year_in_school = year_in_school\n+\n+        student = Student(YearInSchool.FRESHMAN)\n+        c = Context({\"student\": student, \"YearInSchool\": YearInSchool})\n+\n+        # Attempt to use enumeration in template\n+        t = self.engine.from_string('{% if student.year_in_school == YearInSchool.FRESHMAN %}Match{% else %}No Match{% endif %}')\n+        rendered = t.render(c)\n+\n+        # Assert that the template renders as expected, which should fail due to the issue\n+        if rendered != 'Match':\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}