{
  "edit_test_file": "tests/check_framework/test_model_checks.py",
  "test_patch": "diff --git a/tests/check_framework/test_primary_key_inheritance.py b/tests/check_framework/test_primary_key_inheritance.py\nnew file mode 100644\nindex 0000000..0684fb0\n--- /dev/null\n+++ b/tests/check_framework/test_primary_key_inheritance.py\n@@ -0,0 +1,31 @@\n+from django.core import checks\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from unittest import mock\n+\n+def mocked_is_overridden(self, setting):\n+    # Force treating DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' as a not\n+    # overridden setting.\n+    return (\n+        setting != 'DEFAULT_AUTO_FIELD' or\n+        self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n+    )\n+\n+@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+@override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n+class PrimaryKeyInheritanceTests(SimpleTestCase):\n+    def test_inherited_primary_key_warning(self):\n+        class BaseModel(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritedModel(BaseModel):\n+            pass\n+\n+        warnings = checks.run_checks()\n+        self.assertTrue(\n+            any(\"models.W042\" in str(warning) for warning in warnings),\n+            \"Expected models.W042 warning not raised for auto-created primary key.\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/check_framework/test_primary_key_inheritance_inverted.py b/tests/check_framework/test_primary_key_inheritance_inverted.py\nnew file mode 100644\nindex 0000000..1215aa6\n--- /dev/null\n+++ b/tests/check_framework/test_primary_key_inheritance_inverted.py\n@@ -0,0 +1,30 @@\n+from django.core import checks\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from unittest import mock\n+\n+def mocked_is_overridden(self, setting):\n+    # Force treating DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' as a not\n+    # overridden setting.\n+    return (\n+        setting != 'DEFAULT_AUTO_FIELD' or\n+        self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n+    )\n+\n+@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+@override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n+class PrimaryKeyInheritanceTests(SimpleTestCase):\n+    def test_inherited_primary_key_warning(self):\n+        class BaseModel(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritedModel(BaseModel):\n+            pass\n+\n+        warnings = checks.run_checks()\n+        # Altered assertion to fail when the issue is observed\n+        if any(warning.id == 'models.W042' for warning in warnings):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}