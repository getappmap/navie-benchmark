{
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_typehints_description.py b/tests/test_ext_autodoc_typehints_description.py\nnew file mode 100644\nindex 0000000..6e54170\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description.py\n@@ -0,0 +1,95 @@\n+\"\"\"Test the autodoc extension with typehints description.\"\"\"\n+\n+import os\n+import sys\n+import tempfile\n+import shutil\n+from sphinx.application import Sphinx\n+from unittest import TestCase\n+\n+class TestAutodocTypehintsDescription(TestCase):\n+    def setUp(self):\n+        # Create a temporary directory for the Sphinx project\n+        self.test_dir = tempfile.mkdtemp()\n+        self.docs_dir = os.path.join(self.test_dir, 'docs')\n+        os.makedirs(self.docs_dir)\n+\n+        # Create sample_package/__init__.py\n+        os.makedirs(os.path.join(self.test_dir, 'sample_package'))\n+        with open(os.path.join(self.test_dir, 'sample_package', '__init__.py'), 'w') as f:\n+            f.write('''\\\n+class Square:\n+    \"\"\"A class representing a square figure.\"\"\"\n+\n+    def __init__(self, width: int, height: int) -> None:\n+        self.width = width\n+        self.height = height\n+''')\n+\n+        # Create docs/index.rst\n+        with open(os.path.join(self.docs_dir, 'index.rst'), 'w') as f:\n+            f.write('''\\\n+Welcome to sphinx-issue-9575's documentation!\n+=============================================\n+\n+.. autoclass:: sample_package.Square\n+   :members:\n+\n+.. toctree::\n+   :maxdepth: 2\n+   :caption: Contents:\n+\n+\n+\n+Indices and tables\n+==================\n+\n+* :ref:`genindex`\n+* :ref:`modindex`\n+* :ref:`search`\n+''')\n+\n+        # Create docs/conf.py\n+        with open(os.path.join(self.docs_dir, 'conf.py'), 'w') as f:\n+            f.write('''\\\n+import os\n+import sys\n+sys.path.insert(0, os.path.abspath('..'))\n+\n+project = 'sphinx-issue-9575'\n+copyright = '2021, Jakub Kuczys'\n+author = 'Jakub Kuczys'\n+\n+extensions = [\n+    'sphinx.ext.autodoc',\n+]\n+\n+templates_path = ['_templates']\n+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n+html_theme = 'alabaster'\n+html_static_path = ['_static']\n+\n+autodoc_typehints = \"description\"\n+''')\n+\n+    def tearDown(self):\n+        # Remove the temporary directory after the test\n+        shutil.rmtree(self.test_dir)\n+\n+    def test_autodoc_typehints_description(self):\n+        # Build the Sphinx documentation\n+        app = Sphinx(\n+            srcdir=self.docs_dir,\n+            confdir=self.docs_dir,\n+            outdir=os.path.join(self.docs_dir, '_build'),\n+            doctreedir=os.path.join(self.docs_dir, '_doctree'),\n+            buildername='html'\n+        )\n+        app.build()\n+\n+        # Read the generated HTML content\n+        with open(os.path.join(self.docs_dir, '_build', 'index.html'), 'r') as f:\n+            generated_html_content = f.read()\n+\n+        # Assert that the \"Return type\" is incorrectly included\n+        assert \"Return type\" in generated_html_content\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_typehints_description_inverted.py b/tests/test_ext_autodoc_typehints_description_inverted.py\nnew file mode 100644\nindex 0000000..b211f0c\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description_inverted.py\n@@ -0,0 +1,93 @@\n+import os\n+import sys\n+import tempfile\n+import shutil\n+from sphinx.application import Sphinx\n+from unittest import TestCase\n+\n+class TestAutodocTypehintsDescription(TestCase):\n+    def setUp(self):\n+        # Create a temporary directory for the Sphinx project\n+        self.test_dir = tempfile.mkdtemp()\n+        self.docs_dir = os.path.join(self.test_dir, 'docs')\n+        os.makedirs(self.docs_dir)\n+\n+        # Create sample_package/__init__.py\n+        os.makedirs(os.path.join(self.test_dir, 'sample_package'))\n+        with open(os.path.join(self.test_dir, 'sample_package', '__init__.py'), 'w') as f:\n+            f.write('''\\\n+class Square:\n+    \"\"\"A class representing a square figure.\"\"\"\n+\n+    def __init__(self, width: int, height: int) -> None:\n+        self.width = width\n+        self.height = height\n+''')\n+\n+        # Create docs/index.rst\n+        with open(os.path.join(self.docs_dir, 'index.rst'), 'w') as f:\n+            f.write('''\\\n+Welcome to sphinx-issue-9575's documentation!\n+=============================================\n+\n+.. autoclass:: sample_package.Square\n+   :members:\n+\n+.. toctree::\n+   :maxdepth: 2\n+   :caption: Contents:\n+\n+\n+\n+Indices and tables\n+==================\n+\n+* :ref:`genindex`\n+* :ref:`modindex`\n+* :ref:`search`\n+''')\n+\n+        # Create docs/conf.py\n+        with open(os.path.join(self.docs_dir, 'conf.py'), 'w') as f:\n+            f.write('''\\\n+import os\n+import sys\n+sys.path.insert(0, os.path.abspath('..'))\n+\n+project = 'sphinx-issue-9575'\n+copyright = '2021, Jakub Kuczys'\n+author = 'Jakub Kuczys'\n+\n+extensions = [\n+    'sphinx.ext.autodoc',\n+]\n+\n+templates_path = ['_templates']\n+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n+html_theme = 'alabaster'\n+html_static_path = ['_static']\n+\n+autodoc_typehints = \"description\"\n+''')\n+\n+    def tearDown(self):\n+        # Remove the temporary directory after the test\n+        shutil.rmtree(self.test_dir)\n+\n+    def test_autodoc_typehints_description(self):\n+        # Build the Sphinx documentation\n+        app = Sphinx(\n+            srcdir=self.docs_dir,\n+            confdir=self.docs_dir,\n+            outdir=os.path.join(self.docs_dir, '_build'),\n+            doctreedir=os.path.join(self.docs_dir, '_doctree'),\n+            buildername='html'\n+        )\n+        app.build()\n+\n+        # Read the generated HTML content\n+        with open(os.path.join(self.docs_dir, '_build', 'index.html'), 'r') as f:\n+            generated_html_content = f.read()\n+\n+        # Assert that the \"Return type\" is incorrectly included\n+        assert \"Return type\" not in generated_html_content, \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}