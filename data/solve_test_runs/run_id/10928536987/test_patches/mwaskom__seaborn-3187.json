{
  "edit_test_file": "tests/test_utils.py",
  "test_patch": "diff --git a/tests/test_legend_values.py b/tests/test_legend_values.py\nnew file mode 100644\nindex 0000000..52af407\n--- /dev/null\n+++ b/tests/test_legend_values.py\n@@ -0,0 +1,28 @@\n+import matplotlib.pyplot as plt\n+import seaborn as sns\n+import seaborn.objects as so\n+import pytest\n+\n+def test_legend_values_large_numbers():\n+    \"\"\"Test legend values for large numbers with ScalarFormatter offset.\"\"\"\n+    penguins = sns.load_dataset(\"penguins\")\n+    penguins[\"body_mass_mg\"] = penguins[\"body_mass_g\"] * 1000\n+\n+    plot = (\n+        so.Plot(\n+            penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n+            color=\"species\", pointsize=\"body_mass_mg\",\n+        )\n+        .add(so.Dot())\n+    )\n+\n+    # Draw the plot to generate the legend\n+    plot.show()\n+\n+    # Retrieve the legend labels\n+    fig = plt.gcf()\n+    legend = fig.legends[0]\n+    legend_labels = [text.get_text() for text in legend.get_texts()]\n+\n+    # Assert that the legend labels are missing the multiplicative offset value\n+    assert \"1E6\" not in legend_labels, \"Legend labels are missing the multiplicative offset value for large numbers.\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_legend_values_inverted.py b/tests/test_legend_values_inverted.py\nnew file mode 100644\nindex 0000000..8825397\n--- /dev/null\n+++ b/tests/test_legend_values_inverted.py\n@@ -0,0 +1,28 @@\n+import matplotlib.pyplot as plt\n+import seaborn as sns\n+import seaborn.objects as so\n+import pytest\n+\n+def test_legend_values_large_numbers():\n+    \"\"\"Test legend values for large numbers with ScalarFormatter offset.\"\"\"\n+    penguins = sns.load_dataset(\"penguins\")\n+    penguins[\"body_mass_mg\"] = penguins[\"body_mass_g\"] * 1000\n+\n+    plot = (\n+        so.Plot(\n+            penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n+            color=\"species\", pointsize=\"body_mass_mg\",\n+        )\n+        .add(so.Dot())\n+    )\n+\n+    # Draw the plot to generate the legend\n+    plot.show()\n+\n+    # Retrieve the legend labels\n+    fig = plt.gcf()\n+    legend = fig.legends[0]\n+    legend_labels = [text.get_text() for text in legend.get_texts()]\n+\n+    # Assert that the legend labels include the multiplicative offset value\n+    assert \"1E6\" in legend.get_title().get_text() or any(\"1E6\" in label for label in legend_labels), \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}