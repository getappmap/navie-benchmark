{
  "edit_test_file": "sklearn/metrics/tests/test_ranking.py",
  "test_patch": "diff --git a/sklearn/metrics/tests/test_roc_curve_thresholds.py b/sklearn/metrics/tests/test_roc_curve_thresholds.py\nnew file mode 100644\nindex 0000000..fb46f04\n--- /dev/null\n+++ b/sklearn/metrics/tests/test_roc_curve_thresholds.py\n@@ -0,0 +1,9 @@\n+import numpy as np\n+from sklearn.metrics import roc_curve\n+\n+def test_roc_curve_with_probability_estimates():\n+    rng = np.random.RandomState(42)\n+    y_true = rng.randint(0, 2, size=10)\n+    y_score = rng.rand(10)\n+    _, _, thresholds = roc_curve(y_true, y_score)\n+    assert thresholds[0] > 1\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/metrics/tests/test_roc_curve_thresholds_inverted.py b/sklearn/metrics/tests/test_roc_curve_thresholds_inverted.py\nnew file mode 100644\nindex 0000000..8d98366\n--- /dev/null\n+++ b/sklearn/metrics/tests/test_roc_curve_thresholds_inverted.py\n@@ -0,0 +1,9 @@\n+import numpy as np\n+from sklearn.metrics import roc_curve\n+\n+def test_roc_curve_with_probability_estimates():\n+    rng = np.random.RandomState(42)\n+    y_true = rng.randint(0, 2, size=10)\n+    y_score = rng.rand(10)\n+    _, _, thresholds = roc_curve(y_true, y_score)\n+    assert thresholds.max() <= 1, \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}