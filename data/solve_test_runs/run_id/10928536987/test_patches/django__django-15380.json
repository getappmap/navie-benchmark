{
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_rename_model_and_field.py b/tests/migrations/test_migrations_rename_model_and_field.py\nnew file mode 100644\nindex 0000000..99c66a0\n--- /dev/null\n+++ b/tests/migrations/test_migrations_rename_model_and_field.py\n@@ -0,0 +1,58 @@\n+import functools\n+import re\n+from unittest import mock\n+\n+from django.apps import apps\n+from django.conf import settings\n+from django.contrib.auth.models import AbstractBaseUser\n+from django.core.validators import RegexValidator, validate_slug\n+from django.db import connection, migrations, models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.graph import MigrationGraph\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.migrations.questioner import MigrationQuestioner\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import SimpleTestCase, TestCase, override_settings\n+from django.test.utils import isolate_lru_cache\n+\n+from .models import FoodManager, FoodQuerySet\n+\n+\n+class TestMigrationsRenameModelAndField(TestCase):\n+    def test_rename_model_and_field_crash(self):\n+        \"\"\"\n+        Test that renaming a model and a field in a single step causes a KeyError.\n+        \"\"\"\n+        # Initial state with the original model and field\n+        before = [\n+            ModelState('test_one', 'MyModel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('old_field', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        # State after renaming the model and the field\n+        after = [\n+            ModelState('test_one', 'MyModel2', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('new_field', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+\n+        # Create a MigrationAutodetector instance\n+        autodetector = MigrationAutodetector(\n+            self.make_project_state(before),\n+            self.make_project_state(after),\n+            MigrationQuestioner({'ask_rename': True, 'ask_rename_model': True}),\n+        )\n+\n+        # Assert that a KeyError is raised with the expected message\n+        with self.assertRaises(KeyError) as context:\n+            autodetector.changes([], MigrationGraph())\n+        self.assertEqual(context.exception.args[0], ('test_one', 'mymodel'))\n+\n+    def make_project_state(self, model_states):\n+        \"Shortcut to make ProjectStates from lists of predefined models\"\n+        project_state = ProjectState()\n+        for model_state in model_states:\n+            project_state.add_model(model_state.clone())\n+        return project_state\n\\ No newline at end of file\n",
  "inverted_patch": null
}