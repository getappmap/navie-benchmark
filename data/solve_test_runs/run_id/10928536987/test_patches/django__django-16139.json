{
  "edit_test_file": "tests/auth_tests/test_forms.py",
  "test_patch": "diff --git a/tests/auth_tests/test_user_admin_to_field.py b/tests/auth_tests/test_user_admin_to_field.py\nnew file mode 100644\nindex 0000000..0d2ac0c\n--- /dev/null\n+++ b/tests/auth_tests/test_user_admin_to_field.py\n@@ -0,0 +1,24 @@\n+import re\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+from django.contrib.auth.forms import UserChangeForm\n+from django.utils.translation import gettext as _\n+\n+class UserAdminLinkTest(TestCase):\n+    def test_password_reset_link_broken(self):\n+        # Create a user with a UUID as a primary key\n+        user = User.objects.create_user(username=\"testuser\", password=\"password\")\n+        \n+        # Simulate accessing the UserChangeForm with a to_field parameter\n+        form = UserChangeForm(instance=user)\n+        \n+        # Extract the password field's help text\n+        password = form.fields.get(\"password\")\n+        \n+        # Assert that the help text contains the incorrect link\n+        expected_help_text = (\n+            \"Raw passwords are not stored, so there is no way to see this \"\n+            \"user\u2019s password, but you can change the password using \"\n+            '<a href=\"../password/\">this form</a>.'\n+        )\n+        self.assertEqual(password.help_text, expected_help_text)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/auth_tests/test_user_admin_to_field_inverted.py b/tests/auth_tests/test_user_admin_to_field_inverted.py\nnew file mode 100644\nindex 0000000..84c47c1\n--- /dev/null\n+++ b/tests/auth_tests/test_user_admin_to_field_inverted.py\n@@ -0,0 +1,27 @@\n+import re\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+from django.contrib.auth.forms import UserChangeForm\n+from django.utils.translation import gettext as _\n+\n+class UserAdminLinkTest(TestCase):\n+    def test_password_reset_link_broken(self):\n+        # Create a user with a UUID as a primary key\n+        user = User.objects.create_user(username=\"testuser\", password=\"password\")\n+        \n+        # Simulate accessing the UserChangeForm with a to_field parameter\n+        form = UserChangeForm(instance=user)\n+        \n+        # Extract the password field's help text\n+        password = form.fields.get(\"password\")\n+        \n+        # Assert that the help text contains the incorrect link\n+        expected_help_text = (\n+            \"Raw passwords are not stored, so there is no way to see this \"\n+            \"user\u2019s password, but you can change the password using \"\n+            f'<a href=\"../../{user.pk}/password/\">this form</a>.'\n+        )\n+        \n+        # This assertion should fail if the bug is present\n+        if password.help_text != expected_help_text:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}