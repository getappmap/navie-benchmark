{
  "edit_test_file": "tests/model_forms/tests.py",
  "test_patch": "diff --git a/tests/model_forms/test_filterable_issue.py b/tests/model_forms/test_filterable_issue.py\nnew file mode 100644\nindex 0000000..8e98263\n--- /dev/null\n+++ b/tests/model_forms/test_filterable_issue.py\n@@ -0,0 +1,38 @@\n+# File: tests/model_forms/test_filterable_issue.py\n+\n+from django.test import TestCase\n+from django.db import models, NotSupportedError\n+from django.utils.translation import gettext_lazy as _\n+\n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+\n+    class Meta:\n+        app_label = \"model_forms\"\n+        verbose_name = _(\"product meta data type\")\n+        verbose_name_plural = _(\"product meta data types\")\n+\n+    def __str__(self):\n+        return self.label\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField(null=False, blank=False)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"model_forms\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n+\n+class TestFilterableIssue(TestCase):\n+    def setUp(self):\n+        self.brand_metadata = ProductMetaDataType.objects.create(label=\"Brand\", filterable=False)\n+\n+    def test_filterable_issue(self):\n+        ProductMetaData.objects.create(value=\"Dark Vador\", metadata_type=self.brand_metadata)\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\n\\ No newline at end of file\n",
  "inverted_patch": null
}