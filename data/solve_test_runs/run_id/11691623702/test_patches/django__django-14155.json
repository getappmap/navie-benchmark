{
  "edit_test_file": "tests/constraints/tests.py",
  "test_patch": "diff --git a/tests/constraints/test_resolvermatch_partial_repr.py b/tests/constraints/test_resolvermatch_partial_repr.py\nnew file mode 100644\nindex 0000000..9e3f08c\n--- /dev/null\n+++ b/tests/constraints/test_resolvermatch_partial_repr.py\n@@ -0,0 +1,20 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprPartialTest(SimpleTestCase):\n+    def test_resolvermatch_repr_with_partial(self):\n+        # Create a partial function\n+        def sample_view():\n+            pass\n+\n+        partial_func = functools.partial(sample_view)\n+\n+        # Create a ResolverMatch object with the partial function\n+        resolver_match = ResolverMatch(func=partial_func, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)\n+\n+        # Expected incorrect repr output\n+        expected_repr = 'ResolverMatch(func=functools.partial, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+\n+        # Assert that the incorrect repr is produced\n+        self.assertEqual(repr(resolver_match), expected_repr)\n",
  "inverted_patch": "diff --git a/tests/constraints/test_resolvermatch_partial_repr_inverted.py b/tests/constraints/test_resolvermatch_partial_repr_inverted.py\nnew file mode 100644\nindex 0000000..b809886\n--- /dev/null\n+++ b/tests/constraints/test_resolvermatch_partial_repr_inverted.py\n@@ -0,0 +1,21 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprPartialTest(SimpleTestCase):\n+    def test_resolvermatch_repr_with_partial(self):\n+        # Create a partial function\n+        def sample_view():\n+            pass\n+\n+        partial_func = functools.partial(sample_view)\n+\n+        # Create a ResolverMatch object with the partial function\n+        resolver_match = ResolverMatch(func=partial_func, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)\n+\n+        # Expected correct repr output\n+        expected_repr = 'ResolverMatch(func=sample_view, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+\n+        # Assert that the correct repr is produced\n+        if repr(resolver_match) != expected_repr:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}