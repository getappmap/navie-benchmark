{
  "edit_test_file": "tests/postgres_tests/test_operations.py",
  "test_patch": "diff --git a/tests/postgres_tests/test_index_rename_operations.py b/tests/postgres_tests/test_index_rename_operations.py\nnew file mode 100644\nindex 0000000..fe12ebd\n--- /dev/null\n+++ b/tests/postgres_tests/test_index_rename_operations.py\n@@ -0,0 +1,53 @@\n+import unittest\n+\n+from django.db import connection, migrations\n+from django.db.models import Index\n+from django.db.utils import ProgrammingError\n+from django.test import modify_settings\n+\n+from . import PostgreSQLTestCase\n+\n+\n+@unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific tests.\")\n+@modify_settings(INSTALLED_APPS={\"append\": \"migrations\"})\n+class RenameIndexTests(PostgreSQLTestCase):\n+    \"\"\"\n+    Test RenameIndex operation with unnamed indexes.\n+    \"\"\"\n+    app_label = 'test_rename_index'\n+\n+    def test_rename_unnamed_index_crash(self):\n+        \"\"\"\n+        RenameIndex crashes when an unnamed index is moved backward and forward.\n+        \"\"\"\n+        # Set up test model with index_together\n+        project_state = self.set_up_test_model(\n+            self.app_label,\n+            index_together=True,\n+        )\n+        table_name = f\"{self.app_label}_pony\"\n+\n+        # Create the operation\n+        operation = migrations.RenameIndex(\n+            \"Pony\",\n+            new_name=\"new_pony_test_idx\",\n+            old_fields=(\"weight\", \"pink\"),\n+        )\n+\n+        # Get states\n+        new_state = project_state.clone()\n+        operation.state_forwards(self.app_label, new_state)\n+\n+        # Apply forward\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(self.app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Apply backward\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(self.app_label, editor, new_state, project_state)\n+\n+        # Re-apply forward - this should crash\n+        with connection.schema_editor() as editor:\n+            with self.assertRaisesMessage(ProgrammingError, 'relation \"new_pony_test_idx\" already exists'):\n+                operation.database_forwards(self.app_label, editor, project_state, new_state)\n\\ No newline at end of file\n",
  "inverted_patch": null
}