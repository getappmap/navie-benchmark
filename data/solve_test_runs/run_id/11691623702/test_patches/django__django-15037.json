{
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "test_patch": "diff --git a/tests/migrations/test_foreign_key_reference_field.py b/tests/migrations/test_foreign_key_reference_field.py\nnew file mode 100644\nindex 0000000..294906a\n--- /dev/null\n+++ b/tests/migrations/test_foreign_key_reference_field.py\n@@ -0,0 +1,51 @@\n+from io import StringIO\n+from unittest import skipUnless\n+\n+from django.core.management import call_command\n+from django.db import connection\n+from django.test import TransactionTestCase\n+\n+\n+@skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific SQL')\n+class ForeignKeyReferenceFieldTests(TransactionTestCase):\n+    \"\"\"Test inspectdb handling of foreign keys that reference specific fields.\"\"\"\n+    \n+    available_apps = ['migrations']\n+\n+    def setUp(self):\n+        # Create test tables with a foreign key referencing a non-PK unique field\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                CREATE TABLE foo (\n+                    id serial primary key,\n+                    other_id int UNIQUE\n+                );\n+                CREATE TABLE bar (\n+                    id serial primary key,\n+                    other_id int,\n+                    constraint myconst \n+                    FOREIGN KEY(other_id) references foo(other_id)\n+                );\n+            \"\"\")\n+\n+    def tearDown(self):\n+        # Clean up test tables\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                DROP TABLE IF EXISTS bar;\n+                DROP TABLE IF EXISTS foo;\n+            \"\"\")\n+\n+    def test_foreign_key_reference_field(self):\n+        \"\"\"inspectdb should detect foreign key references to specific fields\"\"\"\n+        # Capture inspectdb output\n+        out = StringIO()\n+        call_command('inspectdb', stdout=out)\n+        output = out.getvalue()\n+\n+        # The foreign key in bar.other_id should reference foo.other_id specifically\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('Foo', models.DO_NOTHING, to_field='other_id'\",\n+            output,\n+            \"inspectdb did not detect the foreign key reference to a specific field\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": null
}