{
  "edit_test_file": "tests/delete/tests.py",
  "test_patch": "diff --git a/tests/delete/performance_regression_delete_test.py b/tests/delete/performance_regression_delete_test.py\nnew file mode 100644\nindex 0000000..cc123a8\n--- /dev/null\n+++ b/tests/delete/performance_regression_delete_test.py\n@@ -0,0 +1,19 @@\n+from django.db import connection, models\n+from django.test import TestCase\n+\n+class Alphabet(models.Model):\n+    letter = models.CharField(max_length=1)\n+\n+class PerformanceRegressionDeleteTest(TestCase):\n+    def setUp(self):\n+        # Create a large number of Alphabet instances to simulate the performance issue.\n+        Alphabet.objects.bulk_create([Alphabet(letter=chr(65 + i % 26)) for i in range(100000)])\n+\n+    def test_delete_performance_regression(self):\n+        with connection.cursor() as cursor:\n+            # Capture the SQL queries executed during the delete operation.\n+            with self.assertNumQueries(1):\n+                Alphabet.objects.all().delete()\n+                # Check the last executed query to see if it contains a subquery.\n+                last_query = str(cursor.db.queries[-1]['sql'])\n+                self.assertIn(\"SELECT\", last_query, \"The delete query should contain a subquery indicating the performance regression.\")\n",
  "inverted_patch": "diff --git a/tests/delete/performance_regression_delete_test_inverted.py b/tests/delete/performance_regression_delete_test_inverted.py\nnew file mode 100644\nindex 0000000..1df90f2\n--- /dev/null\n+++ b/tests/delete/performance_regression_delete_test_inverted.py\n@@ -0,0 +1,21 @@\n+from django.db import connection, models\n+from django.test import TestCase\n+\n+class Alphabet(models.Model):\n+    letter = models.CharField(max_length=1)\n+\n+class PerformanceRegressionDeleteTest(TestCase):\n+    def setUp(self):\n+        # Create a large number of Alphabet instances to simulate the performance issue.\n+        Alphabet.objects.bulk_create([Alphabet(letter=chr(65 + i % 26)) for i in range(100000)])\n+\n+    def test_delete_performance_regression(self):\n+        with connection.cursor() as cursor:\n+            # Capture the SQL queries executed during the delete operation.\n+            with self.assertNumQueries(1):\n+                Alphabet.objects.all().delete()\n+                # Check the last executed query to see if it contains a subquery.\n+                last_query = str(cursor.db.queries[-1]['sql'])\n+                # Alter the assertion to fail when the subquery is present, indicating the bug.\n+                if \"SELECT\" in last_query:\n+                    raise AssertionError(\"__BUG__HERE__\")\n"
}