{
  "edit_test_file": "tests/raw_query/tests.py",
  "test_patch": "diff --git a/tests/raw_query/test_lag_decimalfield_sqlite_issue.py b/tests/raw_query/test_lag_decimalfield_sqlite_issue.py\nnew file mode 100644\nindex 0000000..b2e5f67\n--- /dev/null\n+++ b/tests/raw_query/test_lag_decimalfield_sqlite_issue.py\n@@ -0,0 +1,24 @@\n+from django.db import models, connection\n+from django.db.models import F\n+from django.db.models.functions import Lag\n+from django.db.models import Window\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagDecimalFieldSQLiteTest(TestCase):\n+    databases = {'default'}\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=1.2345)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=2.3456)\n+\n+    def test_lag_with_decimalfield(self):\n+        if connection.vendor == 'sqlite':\n+            w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+            with self.assertRaisesMessage(Exception, 'near \"OVER\": syntax error'):\n+                list(LagTest.objects.all().annotate(w=w))\n",
  "inverted_patch": "diff --git a/tests/raw_query/test_lag_decimalfield_sqlite_issue_inverted.py b/tests/raw_query/test_lag_decimalfield_sqlite_issue_inverted.py\nnew file mode 100644\nindex 0000000..bebbc49\n--- /dev/null\n+++ b/tests/raw_query/test_lag_decimalfield_sqlite_issue_inverted.py\n@@ -0,0 +1,24 @@\n+from django.db import models, connection\n+from django.db.models import F\n+from django.db.models.functions import Lag\n+from django.db.models import Window\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagDecimalFieldSQLiteTest(TestCase):\n+    databases = {'default'}\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=1.2345)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=2.3456)\n+\n+    def test_lag_with_decimalfield(self):\n+        if connection.vendor == 'sqlite':\n+            w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+            with self.assertRaisesMessage(Exception, '__BUG__HERE__'):\n+                list(LagTest.objects.all().annotate(w=w))\n"
}