{
  "edit_test_file": "lib/matplotlib/tests/test_cbook.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_numpy_deprecation_warnings.py b/lib/matplotlib/tests/test_numpy_deprecation_warnings.py\nnew file mode 100644\nindex 0000000..58bba7d\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_numpy_deprecation_warnings.py\n@@ -0,0 +1,14 @@\n+import unittest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import warnings\n+\n+class TestNumpyDeprecationWarnings(unittest.TestCase):\n+    def test_numpy_deprecation_warning(self):\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            plt.get_cmap()(np.empty((0, ), dtype=np.uint8))\n+            self.assertTrue(any(issubclass(warning.category, DeprecationWarning) for warning in w))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_numpy_deprecation_warnings_inverted.py b/lib/matplotlib/tests/test_numpy_deprecation_warnings_inverted.py\nnew file mode 100644\nindex 0000000..1b866a2\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_numpy_deprecation_warnings_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import warnings\n+\n+class TestNumpyDeprecationWarnings(unittest.TestCase):\n+    def test_numpy_deprecation_warning(self):\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            plt.get_cmap()(np.empty((0, ), dtype=np.uint8))\n+            # Change the assertion to fail when the bug is observed\n+            if any(issubclass(warning.category, DeprecationWarning) for warning in w):\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n"
}