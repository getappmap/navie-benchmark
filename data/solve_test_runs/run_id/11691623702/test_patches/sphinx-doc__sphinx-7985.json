{
  "edit_test_file": "tests/test_setup_command.py",
  "test_patch": "diff --git a/tests/test_linkcheck_internal_links.py b/tests/test_linkcheck_internal_links.py\nnew file mode 100644\nindex 0000000..e75dfa7\n--- /dev/null\n+++ b/tests/test_linkcheck_internal_links.py\n@@ -0,0 +1,47 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckInternalLinks(TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-internal')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_internal_link_check(self):\n+        with cd(self.test_dir):\n+            # Run the linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check for the expected output indicating the issue\n+            output = out.decode() + err.decode()\n+            self.assertIn('-local-   doesntexist', output)\n+            self.assertIn('broken    https://lkfqhlkghflkhs', output)\n+            self.assertNotIn('broken    doesntexist', output)\n",
  "inverted_patch": "diff --git a/tests/test_linkcheck_internal_links_inverted.py b/tests/test_linkcheck_internal_links_inverted.py\nnew file mode 100644\nindex 0000000..7270eb4\n--- /dev/null\n+++ b/tests/test_linkcheck_internal_links_inverted.py\n@@ -0,0 +1,50 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckInternalLinks(TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-internal')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_internal_link_check(self):\n+        with cd(self.test_dir):\n+            # Run the linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check for the expected output indicating the issue\n+            output = out.decode() + err.decode()\n+            self.assertIn('-local-   doesntexist', output)\n+            self.assertIn('broken    https://lkfqhlkghflkhs', output)\n+            \n+            # Alter the test to fail when the bug is observed\n+            if 'broken    doesntexist' not in output:\n+                raise AssertionError(\"__BUG__HERE__\")\n"
}