{
  "edit_test_file": "sympy/utilities/tests/test_codegen.py",
  "test_patch": "diff --git a/sympy/utilities/tests/test_autowrap_array_args.py b/sympy/utilities/tests/test_autowrap_array_args.py\nnew file mode 100644\nindex 0000000..41ea8de\n--- /dev/null\n+++ b/sympy/utilities/tests/test_autowrap_array_args.py\n@@ -0,0 +1,30 @@\n+from sympy.core import symbols\n+from sympy.matrices import MatrixSymbol\n+from sympy.utilities.codegen import codegen\n+from sympy.utilities.pytest import raises\n+\n+def test_codegen_matrix_unused_arg():\n+    \"\"\"Test that codegen handles matrix arguments correctly even when unused in expression\"\"\"\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    \n+    # Generate code for the expression with unused matrix argument\n+    name_expr = (\"test\", expr)\n+    result = codegen(name_expr, \"C\", \"file\", header=False, empty=False, argument_sequence=(x,))\n+    \n+    source = result[0][1]\n+    \n+    # The generated code should treat x as a pointer/array argument\n+    # But instead it incorrectly generates it as a scalar\n+    expected_incorrect = (\n+        '#include \"file.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    \n+    # Verify that the incorrect code is generated, demonstrating the issue\n+    assert source == expected_incorrect\n",
  "inverted_patch": "diff --git a/sympy/utilities/tests/test_autowrap_array_args_inverted.py b/sympy/utilities/tests/test_autowrap_array_args_inverted.py\nnew file mode 100644\nindex 0000000..dbf9d96\n--- /dev/null\n+++ b/sympy/utilities/tests/test_autowrap_array_args_inverted.py\n@@ -0,0 +1,28 @@\n+from sympy.core import symbols\n+from sympy.matrices import MatrixSymbol\n+from sympy.utilities.codegen import codegen\n+\n+def test_codegen_matrix_unused_arg():\n+    \"\"\"Test that codegen handles matrix arguments correctly when unused in expression\"\"\"\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    \n+    # Generate code for the expression with unused matrix argument\n+    name_expr = (\"test\", expr)\n+    result = codegen(name_expr, \"C\", \"file\", header=False, empty=False, argument_sequence=(x,))\n+    \n+    source = result[0][1]\n+    \n+    # The generated code should treat x as a pointer/array argument\n+    expected_correct = (\n+        '#include \"file.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    \n+    if source != expected_correct:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}