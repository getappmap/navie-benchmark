{
  "edit_test_file": "tests/queries/tests.py",
  "test_patch": "diff --git a/tests/queries/test_q_object_or_subquery.py b/tests/queries/test_q_object_or_subquery.py\nnew file mode 100644\nindex 0000000..ab4f04b\n--- /dev/null\n+++ b/tests/queries/test_q_object_or_subquery.py\n@@ -0,0 +1,54 @@\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Count, Q\n+\n+\n+class Agent(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+\n+class PropertyGroup(models.Model):\n+    name = models.CharField(max_length=100)\n+    agents = models.ManyToManyField(Agent, through='AgentPropertyGroup')\n+\n+\n+class AgentPropertyGroup(models.Model):\n+    agent = models.ForeignKey(Agent, on_delete=models.CASCADE)\n+    property_group = models.ForeignKey(PropertyGroup, on_delete=models.CASCADE)\n+\n+\n+class Rating(models.Model):\n+    agent = models.ForeignKey(Agent, on_delete=models.CASCADE)\n+    score = models.IntegerField()\n+\n+\n+class QObjectOrSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.agent1 = Agent.objects.create(name='Agent 1')\n+        cls.agent2 = Agent.objects.create(name='Agent 2')\n+        \n+        cls.group1 = PropertyGroup.objects.create(name='Group 1')\n+        cls.group2 = PropertyGroup.objects.create(name='Group 2')\n+        \n+        AgentPropertyGroup.objects.create(agent=cls.agent1, property_group=cls.group1)\n+        AgentPropertyGroup.objects.create(agent=cls.agent2, property_group=cls.group2)\n+        \n+        Rating.objects.create(agent=cls.agent1, score=5)\n+        Rating.objects.create(agent=cls.agent2, score=3)\n+\n+    def test_q_object_or_subquery_error(self):\n+        \"\"\"\n+        Test that using __in with a queryset in a Q object OR condition \n+        raises a ProgrammingError when the subquery returns multiple columns.\n+        \"\"\"\n+        property_groups = PropertyGroup.objects.all()\n+        \n+        with self.assertRaises(FieldError):\n+            list(Rating.objects.annotate(\n+                agent_group_count=Count('agent__property_groups')\n+            ).filter(\n+                Q(agent__property_groups__in=property_groups) |\n+                Q(agent__property_groups__count=0)\n+            ).distinct())\n\\ No newline at end of file\n",
  "inverted_patch": null
}