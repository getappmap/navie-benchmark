{
  "edit_test_file": "tests/utils_tests/test_functional.py",
  "test_patch": "diff --git a/tests/utils_tests/test_string_concat_filter.py b/tests/utils_tests/test_string_concat_filter.py\nnew file mode 100644\nindex 0000000..ce67400\n--- /dev/null\n+++ b/tests/utils_tests/test_string_concat_filter.py\n@@ -0,0 +1,20 @@\n+from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+\n+\n+class StringConcatFilterTests(SimpleTestCase):\n+    \"\"\"Tests for string concatenation with lazy strings.\"\"\"\n+\n+    def test_string_concat_with_lazy_string(self):\n+        \"\"\"\n+        Test that attempting to concatenate a regular string with a lazy string\n+        raises TypeError with the expected message.\n+        \"\"\"\n+        def make_lazy_string():\n+            return \"lazy\"\n+        \n+        lazy_string = lazy(make_lazy_string, str)()\n+        regular_string = \"regular\"\n+\n+        with self.assertRaisesMessage(TypeError, 'must be str, not __proxy__'):\n+            regular_string + lazy_string\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_string_concat_filter_inverted.py b/tests/utils_tests/test_string_concat_filter_inverted.py\nnew file mode 100644\nindex 0000000..56477c6\n--- /dev/null\n+++ b/tests/utils_tests/test_string_concat_filter_inverted.py\n@@ -0,0 +1,26 @@\n+from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+\n+\n+class StringConcatFilterTests(SimpleTestCase):\n+    \"\"\"Tests for string concatenation with lazy strings.\"\"\"\n+\n+    def test_string_concat_with_lazy_string(self):\n+        \"\"\"\n+        Test that attempting to concatenate a regular string with a lazy string\n+        should fail with a specific error message when the bug is present.\n+        \"\"\"\n+        def make_lazy_string():\n+            return \"lazy\"\n+        \n+        lazy_string = lazy(make_lazy_string, str)()\n+        regular_string = \"regular\"\n+\n+        try:\n+            result = regular_string + lazy_string\n+            # If we get here, the concatenation worked, which means the bug is fixed\n+        except TypeError as e:\n+            if 'must be str, not __proxy__' in str(e):\n+                raise AssertionError('__BUG__HERE__')\n+            # If it's some other TypeError, let it propagate\n+            raise\n\\ No newline at end of file\n"
}