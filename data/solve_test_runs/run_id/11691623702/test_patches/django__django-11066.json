{
  "edit_test_file": "tests/multiple_database/tests.py",
  "test_patch": "diff --git a/tests/multiple_database/test_rename_content_type_db.py b/tests/multiple_database/test_rename_content_type_db.py\nnew file mode 100644\nindex 0000000..05455f3\n--- /dev/null\n+++ b/tests/multiple_database/test_rename_content_type_db.py\n@@ -0,0 +1,51 @@\n+from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n+from django.core.management import call_command\n+from django.db import connections, migrations, router\n+from django.test import TestCase, override_settings\n+\n+class TestRouter:\n+    \"\"\"\n+    Router that sends all operations to 'other' database except for ContentType\n+    which it allows on both databases.\n+    \"\"\"\n+    def allow_migrate(self, db, app_label, model_name=None, **hints):\n+        if app_label == 'contenttypes':\n+            return True\n+        return db == 'other'\n+\n+@override_settings(DATABASE_ROUTERS=['multiple_database.test_rename_content_type_db.TestRouter'])\n+class RenameContentTypeRouterTests(TestCase):\n+    databases = {'default', 'other'}\n+\n+    def setUp(self):\n+        # Create a content type on the 'other' database\n+        ContentType.objects.using('other').create(\n+            app_label='multiple_database',\n+            model='old_model'\n+        )\n+\n+    def test_rename_model_content_type_save_database(self):\n+        \"\"\"\n+        Test that RenameContentType operation tries to save content type\n+        on the wrong database.\n+        \"\"\"\n+        # Create a RenameModel operation\n+        operation = migrations.RenameModel('old_model', 'new_model')\n+        \n+        # Create a RenameContentType operation\n+        rename_op = migrations.RunPython.noop\n+        project_state = None\n+        schema_editor = connections['other'].schema_editor()\n+\n+        # This should raise an OperationalError because it tries to save\n+        # to 'default' database which doesn't have the table\n+        with self.assertRaises(Exception):\n+            with schema_editor as editor:\n+                # Simulate the migration operation that would trigger content type rename\n+                operation.database_forwards(\n+                    'multiple_database',\n+                    editor,\n+                    project_state,\n+                    project_state\n+                )\n\\ No newline at end of file\n",
  "inverted_patch": null
}