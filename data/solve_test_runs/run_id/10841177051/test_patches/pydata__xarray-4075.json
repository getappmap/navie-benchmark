{
  "edit_test_file": "xarray/tests/test_weighted.py",
  "test_patch": "diff --git a/xarray/tests/test_weighted_mean_bug.py b/xarray/tests/test_weighted_mean_bug.py\nnew file mode 100644\nindex 0000000..18fd327\n--- /dev/null\n+++ b/xarray/tests/test_weighted_mean_bug.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWeightedMeanBug(unittest.TestCase):\n+    def test_weighted_mean_with_boolean_weights(self):\n+        # Setup the data and weights\n+        dta = xr.DataArray([1.0, 1.0, 1.0])\n+        wgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool))\n+\n+        # Perform the weighted mean operation\n+        result = dta.weighted(wgt).mean()\n+\n+        # Assert that the incorrect output is produced\n+        expected_result = xr.DataArray(2.0)\n+        self.assertEqual(result.values, expected_result.values)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_weighted_mean_bug_inverted.py b/xarray/tests/test_weighted_mean_bug_inverted.py\nnew file mode 100644\nindex 0000000..24e282d\n--- /dev/null\n+++ b/xarray/tests/test_weighted_mean_bug_inverted.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWeightedMeanBug(unittest.TestCase):\n+    def test_weighted_mean_with_boolean_weights(self):\n+        # Setup the data and weights\n+        dta = xr.DataArray([1.0, 1.0, 1.0])\n+        wgt = xr.DataArray(np.array([1, 1, 0], dtype=bool))\n+\n+        # Perform the weighted mean operation\n+        result = dta.weighted(wgt).mean()\n+\n+        # Assert that the correct output is produced\n+        expected_result = xr.DataArray(1.0)\n+        if not np.array_equal(result.values, expected_result.values):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}