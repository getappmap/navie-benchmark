{
  "edit_test_file": "tests/test_util_typing.py",
  "test_patch": "diff --git a/tests/test_ext_union_types.py b/tests/test_ext_union_types.py\nnew file mode 100644\nindex 0000000..991096d\n--- /dev/null\n+++ b/tests/test_ext_union_types.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from sphinx.util.typing import restify\n+\n+class TestUnionTypeSpecification(unittest.TestCase):\n+    def test_union_type_specification_with_pipe(self):\n+        # This test is designed to reproduce the issue with union type specification using '|'\n+        # The expected behavior is that the restify function should not correctly handle the '|'\n+        # syntax for union types, which is the issue we want to reproduce.\n+\n+        # Define a type hint using the '|' syntax\n+        try:\n+            type_hint = bytes | str  # type: ignore\n+            # Attempt to restify the type hint\n+            result = restify(type_hint)\n+            # Check if the result is incorrect as expected\n+            self.assertNotEqual(result, \":class:`bytes` | :class:`str`\")\n+        except TypeError as e:\n+            # Assert that a TypeError is raised, which is the expected issue\n+            self.assertEqual(str(e), \"unsupported operand type(s) for |: 'type' and 'type'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_union_types_inverted.py b/tests/test_ext_union_types_inverted.py\nnew file mode 100644\nindex 0000000..f6d034f\n--- /dev/null\n+++ b/tests/test_ext_union_types_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from sphinx.util.typing import restify\n+\n+class TestUnionTypeSpecification(unittest.TestCase):\n+    def test_union_type_specification_with_pipe(self):\n+        # This test is designed to reproduce the issue with union type specification using '|'\n+        # The expected behavior is that the restify function should correctly handle the '|'\n+        # syntax for union types, which is the issue we want to reproduce.\n+\n+        # Define a type hint using the '|' syntax\n+        try:\n+            type_hint = bytes | str  # type: ignore\n+            # Attempt to restify the type hint\n+            result = restify(type_hint)\n+            # Check if the result is correct as expected\n+            self.assertEqual(result, \":class:`bytes` | :class:`str`\")\n+        except TypeError as e:\n+            # Raise an error if a TypeError is raised, which indicates the bug\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}