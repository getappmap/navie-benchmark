{
  "edit_test_file": "tests/test_catalogs.py",
  "test_patch": "diff --git a/tests/test_remove_duplicate_locations.py b/tests/test_remove_duplicate_locations.py\nnew file mode 100644\nindex 0000000..493aa3a\n--- /dev/null\n+++ b/tests/test_remove_duplicate_locations.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from sphinx.builders.gettext import Message\n+\n+class TestDuplicateLocations(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        # Simulate the issue by creating a Message with duplicate locations\n+        text = \"Type\"\n+        locations = [\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+        ]\n+        uuids = [\"uuid1\", \"uuid2\", \"uuid3\"]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Check if the locations contain duplicates\n+        self.assertNotEqual(len(message.locations), len(set(message.locations)),\n+                            \"Locations should contain duplicates to reproduce the issue.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_remove_duplicate_locations_inverted.py b/tests/test_remove_duplicate_locations_inverted.py\nnew file mode 100644\nindex 0000000..eb5c3a4\n--- /dev/null\n+++ b/tests/test_remove_duplicate_locations_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from sphinx.builders.gettext import Message\n+\n+class TestDuplicateLocations(unittest.TestCase):\n+    def test_duplicate_locations(self):\n+        # Simulate the issue by creating a Message with duplicate locations\n+        text = \"Type\"\n+        locations = [\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/modeling/hair.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+            (\"../../manual/physics/dynamic_paint/brush.rst\", 0),\n+        ]\n+        uuids = [\"uuid1\", \"uuid2\", \"uuid3\"]\n+\n+        message = Message(text, locations, uuids)\n+\n+        # Check if the locations contain duplicates\n+        if len(message.locations) != len(set(message.locations)):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}