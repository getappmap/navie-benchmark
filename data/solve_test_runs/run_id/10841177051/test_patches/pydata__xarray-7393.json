{
  "edit_test_file": "xarray/tests/test_indexes.py",
  "test_patch": "diff --git a/xarray/tests/test_stack_dtype.py b/xarray/tests/test_stack_dtype.py\nnew file mode 100644\nindex 0000000..915f952\n--- /dev/null\n+++ b/xarray/tests/test_stack_dtype.py\n@@ -0,0 +1,12 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestStackDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        # The test should pass if the dtype changes from int32 to int64, which is the issue described\n+        self.assertFalse(ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_stack_dtype_inverted.py b/xarray/tests/test_stack_dtype_inverted.py\nnew file mode 100644\nindex 0000000..0ef9c25\n--- /dev/null\n+++ b/xarray/tests/test_stack_dtype_inverted.py\n@@ -0,0 +1,13 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestStackDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        # The test should fail if the dtype changes from int32 to int64, which is the issue described\n+        if ds['a'].values.dtype != ds.stack(b=('a',))['a'].values.dtype:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}