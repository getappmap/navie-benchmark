{
  "edit_test_file": "tests/test_pycode.py",
  "test_patch": "diff --git a/tests/test_decorated_init_doc.py b/tests/test_decorated_init_doc.py\nnew file mode 100644\nindex 0000000..ed3db90\n--- /dev/null\n+++ b/tests/test_decorated_init_doc.py\n@@ -0,0 +1,35 @@\n+import unittest\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon import _process_docstring\n+from sphinx.application import Sphinx\n+from unittest.mock import Mock\n+import functools\n+\n+class TestDecoratedInitDoc(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        # Mock Sphinx application and config\n+        app = Mock(spec=Sphinx)\n+        app.config = Config(napoleon_include_init_with_doc=True)\n+\n+        # Define a class with a decorated __init__ method\n+        class SampleClass:\n+            @functools.wraps\n+            def __init__(self):\n+                \"\"\"This is the init docstring.\"\"\"\n+                pass\n+\n+        # Mock the parameters for _process_docstring\n+        what = 'class'\n+        name = 'SampleClass.__init__'\n+        obj = SampleClass.__init__\n+        options = Mock()\n+        lines = []\n+\n+        # Process the docstring\n+        _process_docstring(app, what, name, obj, options, lines)\n+\n+        # Assert that the docstring is not included in the lines\n+        self.assertNotIn(\"This is the init docstring.\", lines)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_decorated_init_doc_inverted.py b/tests/test_decorated_init_doc_inverted.py\nnew file mode 100644\nindex 0000000..6ba519e\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_inverted.py\n@@ -0,0 +1,37 @@\n+import unittest\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon import _process_docstring\n+from sphinx.application import Sphinx\n+from unittest.mock import Mock\n+import functools\n+\n+class TestDecoratedInitDoc(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        # Mock Sphinx application and config\n+        app = Mock(spec=Sphinx)\n+        app.config = Config(napoleon_include_init_with_doc=True)\n+\n+        # Define a class with a decorated __init__ method\n+        class SampleClass:\n+            @functools.wraps\n+            def __init__(self):\n+                \"\"\"This is the init docstring.\"\"\"\n+                pass\n+\n+        # Mock the parameters for _process_docstring\n+        what = 'class'\n+        name = 'SampleClass.__init__'\n+        obj = SampleClass.__init__\n+        options = Mock()\n+        lines = []\n+\n+        # Process the docstring\n+        _process_docstring(app, what, name, obj, options, lines)\n+\n+        # Assert that the docstring is included in the lines\n+        # This assertion should fail if the bug is present\n+        if \"This is the init docstring.\" not in lines:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}