{
  "edit_test_file": "tests/generic_inline_admin/tests.py",
  "test_patch": "diff --git a/tests/generic_inline_admin/test_uuidfield_default_issue.py b/tests/generic_inline_admin/test_uuidfield_default_issue.py\nnew file mode 100644\nindex 0000000..ec1c8f5\n--- /dev/null\n+++ b/tests/generic_inline_admin/test_uuidfield_default_issue.py\n@@ -0,0 +1,59 @@\n+import uuid\n+from django.contrib import admin\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import TestCase\n+from django.forms.models import inlineformset_factory\n+\n+# Define the models as described in the issue\n+class UUIDModel(models.Model):\n+    pkid = models.BigAutoField(primary_key=True, editable=False)\n+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n+\n+    class Meta:\n+        abstract = True\n+\n+class Thing(UUIDModel):\n+    name = models.CharField(max_length=191)\n+\n+class SubThing(models.Model):\n+    name = models.CharField(max_length=191)\n+    thing = models.ForeignKey(\n+        Thing,\n+        to_field='id',\n+        on_delete=models.CASCADE,\n+        related_name='subthings',\n+    )\n+\n+# Define the admin classes as described in the issue\n+class SubThingInline(admin.StackedInline):\n+    model = SubThing\n+\n+@admin.register(Thing)\n+class ThingAdmin(admin.ModelAdmin):\n+    list_display = ('name',)\n+    ordering = ('pkid',)\n+    inlines = (SubThingInline,)\n+\n+# Test case to reproduce the issue\n+class UUIDFieldAdminTest(TestCase):\n+    def test_uuidfield_default_value_issue(self):\n+        # Create a Thing instance\n+        thing = Thing.objects.create(name=\"Test Thing\")\n+\n+        # Create an inline formset for SubThing\n+        SubThingFormSet = inlineformset_factory(Thing, SubThing, fields=('name',))\n+\n+        # Create a formset instance with data to add a SubThing\n+        formset_data = {\n+            'subthing_set-TOTAL_FORMS': '1',\n+            'subthing_set-INITIAL_FORMS': '0',\n+            'subthing_set-MIN_NUM_FORMS': '0',\n+            'subthing_set-MAX_NUM_FORMS': '1000',\n+            'subthing_set-0-name': 'Test SubThing',\n+        }\n+        formset = SubThingFormSet(data=formset_data, instance=thing)\n+\n+        # Assert that the formset is not valid, reproducing the issue\n+        if formset.is_valid():\n+            raise ValidationError(\"Formset is not valid\")\n\\ No newline at end of file\n",
  "inverted_patch": null
}