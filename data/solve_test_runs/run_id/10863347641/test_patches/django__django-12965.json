{
  "edit_test_file": "tests/backends/mysql/test_features.py",
  "test_patch": "diff --git a/tests/backends/mysql/test_lock_performance.py b/tests/backends/mysql/test_lock_performance.py\nnew file mode 100644\nindex 0000000..fd8141d\n--- /dev/null\n+++ b/tests/backends/mysql/test_lock_performance.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from django.db import connection, models, transaction\n+from django.test import TestCase\n+\n+class Alphabet(models.Model):\n+    letter = models.CharField(max_length=1)\n+\n+class LockPerformanceTest(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'mysql', 'MySQL tests.')\n+    def test_delete_performance_regression(self):\n+        # Create a table with 100,000 rows\n+        Alphabet.objects.bulk_create([Alphabet(letter=str(i)) for i in range(100000)])\n+        \n+        # Start a transaction and lock the table\n+        with transaction.atomic():\n+            with connection.cursor() as cursor:\n+                cursor.execute(\"LOCK TABLES testapp_alphabet WRITE\")\n+                \n+                # Attempt to delete all rows\n+                with self.assertRaises(Exception) as context:\n+                    Alphabet.objects.all().delete()\n+                \n+                # Check if the exception is due to the subquery issue\n+                self.assertIn(\"Table 'testapp_alphabet' was not locked with LOCK TABLES\", str(context.exception))\n+                \n+                # Unlock the table\n+                cursor.execute(\"UNLOCK TABLES\")\n\\ No newline at end of file\n",
  "inverted_patch": null
}