{
  "edit_test_file": "tests/file_storage/test_generate_filename.py",
  "test_patch": "diff --git a/tests/file_storage/test_file_upload_permission.py b/tests/file_storage/test_file_upload_permission.py\nnew file mode 100644\nindex 0000000..1cf068f\n--- /dev/null\n+++ b/tests/file_storage/test_file_upload_permission.py\n@@ -0,0 +1,38 @@\n+import os\n+import tempfile\n+import unittest\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile\n+from django.conf import settings\n+\n+class TestFileUploadPermission(unittest.TestCase):\n+    def setUp(self):\n+        self.storage_dir = tempfile.mkdtemp()\n+        self.storage = FileSystemStorage(location=self.storage_dir)\n+\n+    def tearDown(self):\n+        for root, dirs, files in os.walk(self.storage_dir, topdown=False):\n+            for name in files:\n+                os.remove(os.path.join(root, name))\n+            for name in dirs:\n+                os.rmdir(os.path.join(root, name))\n+        os.rmdir(self.storage_dir)\n+\n+    def test_file_upload_permission(self):\n+        # Create a TemporaryUploadedFile\n+        uploaded_file = TemporaryUploadedFile('test.txt', 'text/plain', 0, 'utf-8')\n+        uploaded_file.write(b'Test content')\n+        uploaded_file.seek(0)\n+\n+        # Save the file using FileSystemStorage\n+        self.storage.save('test.txt', uploaded_file)\n+\n+        # Get the file path and check its permissions\n+        file_path = os.path.join(self.storage_dir, 'test.txt')\n+        file_permissions = oct(os.stat(file_path).st_mode & 0o777)\n+\n+        # Expected permissions are 0o600 due to tempfile.NamedTemporaryFile behavior\n+        expected_permissions = '0o600'\n+\n+        self.assertEqual(file_permissions, expected_permissions,\n+                         f\"Expected permissions {expected_permissions}, but got {file_permissions}\")\n\\ No newline at end of file\n",
  "inverted_patch": null
}