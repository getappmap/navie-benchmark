{
  "edit_test_file": "tests/get_or_create/tests.py",
  "test_patch": "diff --git a/tests/get_or_create/test_async_related_managers.py b/tests/get_or_create/test_async_related_managers.py\nnew file mode 100644\nindex 0000000..6a82734\n--- /dev/null\n+++ b/tests/get_or_create/test_async_related_managers.py\n@@ -0,0 +1,21 @@\n+import asyncio\n+from django.test import TestCase\n+from django.db.utils import IntegrityError\n+from asgiref.sync import sync_to_async\n+from .models import Publisher, Book\n+\n+class AsyncRelatedManagerTests(TestCase):\n+    async def test_acreate_on_related_manager(self):\n+        publisher = await sync_to_async(Publisher.objects.create)(name=\"Acme Publishing\")\n+        with self.assertRaises(IntegrityError):\n+            await publisher.books.acreate(name=\"The Book of Ed & Fred\")\n+\n+    async def test_aget_or_create_on_related_manager(self):\n+        publisher = await sync_to_async(Publisher.objects.create)(name=\"Acme Publishing\")\n+        with self.assertRaises(IntegrityError):\n+            await publisher.books.aget_or_create(name=\"The Book of Ed & Fred\")\n+\n+    async def test_aupdate_or_create_on_related_manager(self):\n+        publisher = await sync_to_async(Publisher.objects.create)(name=\"Acme Publishing\")\n+        with self.assertRaises(IntegrityError):\n+            await publisher.books.aupdate_or_create(name=\"The Book of Ed & Fred\")\n\\ No newline at end of file\n",
  "inverted_patch": null
}