{
  "edit_test_file": "lib/matplotlib/tests/test_text.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_annotation.py b/lib/matplotlib/tests/test_annotation.py\nnew file mode 100644\nindex 0000000..1f85e29\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotation.py\n@@ -0,0 +1,21 @@\n+import unittest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+class TestAnnotationArrayUpdate(unittest.TestCase):\n+    def test_annotation_array_update(self):\n+        fig, ax = plt.subplots()\n+        ax.set_xlim(-5, 5)\n+        ax.set_ylim(-3, 3)\n+\n+        xy_0 = np.array((-4, 1))\n+        xy_f = np.array((-1, 1))\n+        # this annotation is messed by later changing the array passed as xy kwarg\n+        ann = ax.annotate('', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+        xy_0[1] = 3  # <--this updates the arrow position\n+\n+        # Check if the arrow position is updated incorrectly\n+        self.assertNotEqual(ann.xy[1], 1, \"The arrow position should have been updated to 3\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_annotation_inverted.py b/lib/matplotlib/tests/test_annotation_inverted.py\nnew file mode 100644\nindex 0000000..d3cadb7\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotation_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+class TestAnnotationArrayUpdate(unittest.TestCase):\n+    def test_annotation_array_update(self):\n+        fig, ax = plt.subplots()\n+        ax.set_xlim(-5, 5)\n+        ax.set_ylim(-3, 3)\n+\n+        xy_0 = np.array((-4, 1))\n+        xy_f = np.array((-1, 1))\n+        # this annotation is messed by later changing the array passed as xy kwarg\n+        ann = ax.annotate('', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+        xy_0[1] = 3  # <--this updates the arrow position\n+\n+        # Check if the arrow position is updated incorrectly\n+        # Altered the test to fail when the bug is observed\n+        self.assertEqual(ann.xy[1], 1, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}