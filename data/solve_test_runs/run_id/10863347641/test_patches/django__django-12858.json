{
  "edit_test_file": "tests/model_regress/tests.py",
  "test_patch": "diff --git a/tests/model_regress/test_ordering_issue_E015.py b/tests/model_regress/test_ordering_issue_E015.py\nnew file mode 100644\nindex 0000000..b90d41a\n--- /dev/null\n+++ b/tests/model_regress/test_ordering_issue_E015.py\n@@ -0,0 +1,31 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class Product(models.Model):\n+    parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+class Supply(models.Model):\n+    product = models.ForeignKey(Product, models.CASCADE)\n+\n+class Stock(models.Model):\n+    supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+class OrderingIssueE015Tests(SimpleTestCase):\n+    def test_ordering_with_nonexistent_lookup(self):\n+        class StockWithInvalidOrdering(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        errors = StockWithInvalidOrdering.check()\n+        self.assertIn(\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'supply__product__parent__isnull'.\",\n+                obj=StockWithInvalidOrdering,\n+                id='models.E015',\n+            ),\n+            errors\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_regress/test_ordering_issue_E015_inverted.py b/tests/model_regress/test_ordering_issue_E015_inverted.py\nnew file mode 100644\nindex 0000000..c886763\n--- /dev/null\n+++ b/tests/model_regress/test_ordering_issue_E015_inverted.py\n@@ -0,0 +1,25 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class Product(models.Model):\n+    parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+class Supply(models.Model):\n+    product = models.ForeignKey(Product, models.CASCADE)\n+\n+class Stock(models.Model):\n+    supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+class OrderingIssueE015Tests(SimpleTestCase):\n+    def test_ordering_with_nonexistent_lookup(self):\n+        class StockWithInvalidOrdering(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        errors = StockWithInvalidOrdering.check()\n+        # Alter the test to fail when the issue is observed\n+        if any(error.id == 'models.E015' for error in errors):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}