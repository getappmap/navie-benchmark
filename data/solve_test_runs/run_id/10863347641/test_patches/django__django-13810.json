{
  "edit_test_file": "tests/middleware_exceptions/tests.py",
  "test_patch": "diff --git a/tests/middleware_exceptions/middleware_test.py b/tests/middleware_exceptions/middleware_test.py\nnew file mode 100644\nindex 0000000..192c4fa\n--- /dev/null\n+++ b/tests/middleware_exceptions/middleware_test.py\n@@ -0,0 +1,23 @@\n+from django.core.exceptions import MiddlewareNotUsed\n+from django.http import HttpResponse\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.decorators import async_only_middleware\n+\n+class DummyMiddleware:\n+    def __init__(self, get_response):\n+        self.get_response = get_response\n+        raise MiddlewareNotUsed\n+\n+    def __call__(self, request):\n+        return self.get_response(request)\n+\n+@async_only_middleware\n+def async_view(request):\n+    return HttpResponse(\"Async response\")\n+\n+class MiddlewareNotUsedASGITests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=['tests.middleware_exceptions.middleware_test.DummyMiddleware'])\n+    async def test_middleware_not_used_in_asgi_context(self):\n+        with self.assertRaises(TypeError) as cm:\n+            await async_view(self.client.get('/middleware_exceptions/view/'))\n+        self.assertEqual(str(cm.exception), \"object HttpResponse can't be used in 'await' expression\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/middleware_exceptions/middleware_test_inverted.py b/tests/middleware_exceptions/middleware_test_inverted.py\nnew file mode 100644\nindex 0000000..81dd52d\n--- /dev/null\n+++ b/tests/middleware_exceptions/middleware_test_inverted.py\n@@ -0,0 +1,23 @@\n+from django.core.exceptions import MiddlewareNotUsed\n+from django.http import HttpResponse\n+from django.test import SimpleTestCase, override_settings\n+from django.utils.decorators import async_only_middleware\n+\n+class DummyMiddleware:\n+    def __init__(self, get_response):\n+        self.get_response = get_response\n+        raise MiddlewareNotUsed\n+\n+    def __call__(self, request):\n+        return self.get_response(request)\n+\n+@async_only_middleware\n+def async_view(request):\n+    return HttpResponse(\"Async response\")\n+\n+class MiddlewareNotUsedASGITests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=['tests.middleware_exceptions.middleware_test.DummyMiddleware'])\n+    async def test_middleware_not_used_in_asgi_context(self):\n+        with self.assertRaises(Exception) as cm:\n+            await async_view(self.client.get('/middleware_exceptions/view/'))\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}