{
  "edit_test_file": "tests/test_config.py",
  "test_patch": "diff --git a/tests/test_empty_tuple_annotation.py b/tests/test_empty_tuple_annotation.py\nnew file mode 100644\nindex 0000000..f1eb40b\n--- /dev/null\n+++ b/tests/test_empty_tuple_annotation.py\n@@ -0,0 +1,22 @@\n+\"\"\"\n+    test_empty_tuple_annotation\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test handling of empty tuple type annotations.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+from sphinx.domains.python import _parse_annotation\n+\n+\n+def test_empty_tuple_annotation():\n+    \"\"\"Test that parsing an empty tuple annotation raises IndexError.\"\"\"\n+    annotation = \"Tuple[()]\"\n+    \n+    with pytest.raises(IndexError) as excinfo:\n+        _parse_annotation(annotation)\n+    \n+    assert str(excinfo.value) == \"pop from empty list\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_empty_tuple_annotation_inverted.py b/tests/test_empty_tuple_annotation_inverted.py\nnew file mode 100644\nindex 0000000..29bac66\n--- /dev/null\n+++ b/tests/test_empty_tuple_annotation_inverted.py\n@@ -0,0 +1,27 @@\n+\"\"\"\n+    test_empty_tuple_annotation\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test handling of empty tuple type annotations.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+from docutils import nodes\n+from sphinx.domains.python import _parse_annotation\n+\n+\n+def test_empty_tuple_annotation():\n+    \"\"\"Test that empty tuple annotations are handled correctly.\"\"\"\n+    annotation = \"Tuple[()]\"\n+    \n+    try:\n+        result = _parse_annotation(annotation)\n+    except IndexError:\n+        raise AssertionError(\"__BUG__HERE__: Empty tuple annotation Tuple[()] should be handled without raising IndexError\")\n+    \n+    # Verify the result is a valid node structure for an empty tuple annotation\n+    assert isinstance(result, list), \"Result should be a list of nodes\"\n+    assert len(result) > 0, \"Result should contain at least one node\"\n+    assert any(isinstance(node, nodes.Text) for node in result), \"Result should contain text nodes\"\n\\ No newline at end of file\n"
}