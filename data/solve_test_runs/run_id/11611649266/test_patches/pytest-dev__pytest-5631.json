{
  "edit_test_file": "testing/python/integration.py",
  "test_patch": "diff --git a/testing/python/test_numpy_patch_array.py b/testing/python/test_numpy_patch_array.py\nnew file mode 100644\nindex 0000000..b25b02e\n--- /dev/null\n+++ b/testing/python/test_numpy_patch_array.py\n@@ -0,0 +1,28 @@\n+import pytest\n+import unittest.mock\n+import sys\n+\n+# Skip test if numpy is not installed\n+numpy = pytest.importorskip(\"numpy\")\n+\n+class TestNumpyPatchArray:\n+    def test_patch_with_numpy_array(self, testdir):\n+        \"\"\"Test that using @patch with numpy array raises ValueError during collection\"\"\"\n+        testdir.makepyfile(\"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+            \n+            @patch('os.path.exists', new=np.array([-5.5, 3.0]))\n+            def test_numpy_patch():\n+                pass\n+        \"\"\")\n+        \n+        result = testdir.runpytest()\n+        \n+        # Verify the ValueError is raised during collection\n+        result.stderr.fnmatch_lines([\n+            \"*ValueError: The truth value of an array with more than one element is ambiguous*\"\n+        ])\n+        \n+        # Ensure test collection failed\n+        assert result.ret != 0\n\\ No newline at end of file\n",
  "inverted_patch": null
}