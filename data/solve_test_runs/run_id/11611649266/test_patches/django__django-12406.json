{
  "edit_test_file": "tests/forms_tests/widget_tests/test_radioselect.py",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_radioselect_blank_option.py b/tests/forms_tests/widget_tests/test_radioselect_blank_option.py\nnew file mode 100644\nindex 0000000..351865e\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_radioselect_blank_option.py\n@@ -0,0 +1,47 @@\n+from django import forms\n+from django.db import models\n+from django.forms import ModelForm, RadioSelect\n+from django.test import TestCase\n+\n+\n+class BatchData(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class TestRun(models.Model):\n+    data_file = models.ForeignKey(\n+        BatchData,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=False\n+    )\n+\n+\n+class TestRunForm(ModelForm):\n+    class Meta:\n+        model = TestRun\n+        fields = ['data_file']\n+        widgets = {'data_file': RadioSelect()}\n+\n+\n+class RadioSelectBlankOptionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.data_file = BatchData.objects.create(name='First Data File')\n+\n+    def test_blank_option_with_blank_false(self):\n+        \"\"\"\n+        RadioSelect widget should not show a blank option when the model field\n+        has blank=False, but currently does show it.\n+        \"\"\"\n+        form = TestRunForm()\n+        html = str(form['data_file'])\n+\n+        # These assertions verify the current incorrect behavior where a blank\n+        # option is shown and checked by default, even though blank=False\n+        self.assertIn('value=\"\"', html)  # Blank option exists\n+        self.assertIn('---------', html)  # Shows dashes for blank option\n+        self.assertIn('checked', html)  # Blank option is checked by default\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_radioselect_blank_option_inverted.py b/tests/forms_tests/widget_tests/test_radioselect_blank_option_inverted.py\nnew file mode 100644\nindex 0000000..d80f8f4\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_radioselect_blank_option_inverted.py\n@@ -0,0 +1,57 @@\n+from django import forms\n+from django.db import models\n+from django.forms import ModelForm, RadioSelect\n+from django.test import TestCase\n+\n+\n+class BatchData(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.name\n+\n+\n+class TestRun(models.Model):\n+    data_file = models.ForeignKey(\n+        BatchData,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=False\n+    )\n+\n+\n+class TestRunForm(ModelForm):\n+    class Meta:\n+        model = TestRun\n+        fields = ['data_file']\n+        widgets = {'data_file': RadioSelect()}\n+\n+\n+class RadioSelectBlankOptionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.data_file = BatchData.objects.create(name='First Data File')\n+\n+    def test_blank_option_with_blank_false(self):\n+        \"\"\"\n+        RadioSelect widget should not show a blank option when the model field\n+        has blank=False. Test should fail if blank option is present.\n+        \"\"\"\n+        form = TestRunForm()\n+        html = str(form['data_file'])\n+\n+        # Test for presence of blank option - should raise error if found\n+        if 'value=\"\"' in html:\n+            raise AssertionError(\"__BUG__HERE__: Blank option exists when blank=False\")\n+\n+        # Test for presence of dashes - should raise error if found\n+        if '---------' in html:\n+            raise AssertionError(\"__BUG__HERE__: Blank option with dashes exists when blank=False\")\n+\n+        # Test for checked attribute - should raise error if found\n+        if 'checked' in html:\n+            raise AssertionError(\"__BUG__HERE__: Default checked option exists when blank=False\")\n+\n+        # Verify that only valid options are present\n+        self.assertIn('First Data File', html)\n+        self.assertIn('value=\"1\"', html)\n\\ No newline at end of file\n"
}