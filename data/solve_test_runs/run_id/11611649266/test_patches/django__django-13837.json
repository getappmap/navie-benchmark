{
  "edit_test_file": "tests/utils_tests/test_autoreload.py",
  "test_patch": "diff --git a/tests/utils_tests/test_autoreload_custom.py b/tests/utils_tests/test_autoreload_custom.py\nnew file mode 100644\nindex 0000000..0fea7b5\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_custom.py\n@@ -0,0 +1,23 @@\n+import sys\n+import types\n+from unittest import mock\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+\n+class TestChildArgumentsWithNonDjangoModule(SimpleTestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        \"\"\"\n+        Test that autoreload.get_child_arguments() raises a RuntimeError\n+        when Python is launched with -m pkg_other_than_django runserver.\n+        \"\"\"\n+        # Simulate the condition where __main__.__spec__.parent is 'pkg_other_than_django'\n+        fake_main = types.ModuleType('__main__')\n+        fake_main.__spec__ = mock.Mock()\n+        fake_main.__spec__.parent = 'pkg_other_than_django'\n+        \n+        with mock.patch.dict('sys.modules', {'__main__': fake_main}):\n+            with self.assertRaises(RuntimeError) as cm:\n+                autoreload.get_child_arguments()\n+            self.assertEqual(str(cm.exception), 'Script -m does not exist.')\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_autoreload_custom_inverted.py b/tests/utils_tests/test_autoreload_custom_inverted.py\nnew file mode 100644\nindex 0000000..8aaf950\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_custom_inverted.py\n@@ -0,0 +1,23 @@\n+import sys\n+import types\n+from unittest import mock\n+from django.test import SimpleTestCase\n+from django.utils import autoreload\n+\n+class TestChildArgumentsWithNonDjangoModule(SimpleTestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        \"\"\"\n+        Test that autoreload.get_child_arguments() raises a RuntimeError\n+        when Python is launched with -m pkg_other_than_django runserver.\n+        \"\"\"\n+        # Simulate the condition where __main__.__spec__.parent is 'pkg_other_than_django'\n+        fake_main = types.ModuleType('__main__')\n+        fake_main.__spec__ = mock.Mock()\n+        fake_main.__spec__.parent = 'pkg_other_than_django'\n+        \n+        with mock.patch.dict('sys.modules', {'__main__': fake_main}):\n+            with self.assertRaises(RuntimeError) as cm:\n+                autoreload.get_child_arguments()\n+            self.assertEqual(str(cm.exception), '__BUG__HERE__')\n"
}