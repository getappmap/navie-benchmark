{
  "edit_test_file": "tests/migrations/test_autodetector.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_optimize_create_model.py b/tests/migrations/test_migrations_optimize_create_model.py\nnew file mode 100644\nindex 0000000..49922fa\n--- /dev/null\n+++ b/tests/migrations/test_migrations_optimize_create_model.py\n@@ -0,0 +1,41 @@\n+from django.db import migrations, models\n+from django.test import TestCase\n+from django.db.migrations.operations.models import CreateModel, AlterModelManagers\n+from django.db.models import Manager\n+\n+class OptimizeCreateModelTests(TestCase):\n+    \"\"\"\n+    Tests that CreateModel + AlterModelManagers is not incorrectly optimized into\n+    a single CreateModel operation.\n+    \"\"\"\n+    def test_create_model_with_managers_not_optimized(self):\n+        \"\"\"\n+        CreateModel + AlterModelManagers is not optimized into a single CreateModel\n+        operation.\n+        \"\"\"\n+        # Custom manager\n+        class CustomManager(Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().filter(active=True)\n+\n+        # Create the operations\n+        operations = [\n+            CreateModel(\n+                name=\"MyModel\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"active\", models.BooleanField(default=True)),\n+                ],\n+            ),\n+            AlterModelManagers(\n+                name=\"MyModel\",\n+                managers=[\n+                    (\"objects\", CustomManager()),\n+                ],\n+            ),\n+        ]\n+\n+        # The operations should not be optimized - both operations should remain\n+        self.assertEqual(len(operations), 2)\n+        self.assertIsInstance(operations[0], CreateModel)\n+        self.assertIsInstance(operations[1], AlterModelManagers)\n",
  "inverted_patch": null
}