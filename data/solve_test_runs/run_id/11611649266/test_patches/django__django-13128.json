{
  "edit_test_file": "tests/expressions/tests.py",
  "test_patch": "diff --git a/tests/expressions/test_temporal_subtraction.py b/tests/expressions/test_temporal_subtraction.py\nnew file mode 100644\nindex 0000000..0b594b8\n--- /dev/null\n+++ b/tests/expressions/test_temporal_subtraction.py\n@@ -0,0 +1,32 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import DateTimeField, DurationField, F, Value\n+from django.test import TestCase\n+import datetime\n+\n+from .models import Experiment\n+\n+\n+class TemporalSubtractionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.start = datetime.datetime(2010, 6, 25, 12, 15, 30)\n+        cls.end = cls.start + datetime.timedelta(days=1)\n+        Experiment.objects.create(\n+            name='Experiment 1',\n+            start=cls.start,\n+            end=cls.end,\n+            assigned=cls.start.date(),\n+            completed=cls.end.date(),\n+            estimated_time=datetime.timedelta(days=1)\n+        )\n+\n+    def test_temporal_subtraction_without_wrapper(self):\n+        \"\"\"\n+        Test that temporal subtraction without ExpressionWrapper raises FieldError\n+        when mixing DateTimeField and DurationField.\n+        \"\"\"\n+        msg = \"Expression contains mixed types: DateTimeField, DurationField. You must set output_field.\"\n+        with self.assertRaisesMessage(FieldError, msg):\n+            list(Experiment.objects.annotate(\n+                delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())\n+            ))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/expressions/test_temporal_subtraction_inverted.py b/tests/expressions/test_temporal_subtraction_inverted.py\nnew file mode 100644\nindex 0000000..e940599\n--- /dev/null\n+++ b/tests/expressions/test_temporal_subtraction_inverted.py\n@@ -0,0 +1,39 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import DateTimeField, DurationField, F, Value\n+from django.test import TestCase\n+import datetime\n+\n+from .models import Experiment\n+\n+\n+class TemporalSubtractionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.start = datetime.datetime(2010, 6, 25, 12, 15, 30)\n+        cls.end = cls.start + datetime.timedelta(days=1)\n+        Experiment.objects.create(\n+            name='Experiment 1',\n+            start=cls.start,\n+            end=cls.end,\n+            assigned=cls.start.date(),\n+            completed=cls.end.date(),\n+            estimated_time=datetime.timedelta(days=1)\n+        )\n+\n+    def test_temporal_subtraction_without_wrapper(self):\n+        \"\"\"\n+        Test that temporal subtraction without ExpressionWrapper should work\n+        when mixing DateTimeField and DurationField.\n+        \"\"\"\n+        try:\n+            result = list(Experiment.objects.annotate(\n+                delta=F('end') - F('start') + Value(datetime.timedelta(), output_field=DurationField())\n+            ))\n+        except FieldError as e:\n+            if \"Expression contains mixed types: DateTimeField, DurationField. You must set output_field.\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+            raise\n+\n+        # If we get here without an exception, the test should verify the result\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0].delta, datetime.timedelta(days=1))\n\\ No newline at end of file\n"
}