{
  "edit_test_file": "tests/forms_tests/field_tests/test_booleanfield.py",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_boundfield_access.py b/tests/forms_tests/field_tests/test_boundfield_access.py\nnew file mode 100644\nindex 0000000..283c4e7\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_boundfield_access.py\n@@ -0,0 +1,20 @@\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class BoundFieldAccessTest(SimpleTestCase):\n+    def test_clean_fields_vs_boundfield_initial(self):\n+        class TestForm(Form):\n+            name = CharField(initial='initial_value')\n+\n+        form = TestForm(data={'name': 'new_value'})\n+        form.full_clean()\n+\n+        # Directly access the initial value from the form's cleaned_data\n+        direct_initial_value = form.cleaned_data['name']\n+\n+        # Access the initial value via the BoundField\n+        boundfield_initial_value = form['name'].initial\n+\n+        # Assert that the direct initial value and the BoundField initial value are different\n+        # This reproduces the issue where they should be the same but are not\n+        self.assertNotEqual(direct_initial_value, boundfield_initial_value)\n",
  "inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_boundfield_access_inverted.py b/tests/forms_tests/field_tests/test_boundfield_access_inverted.py\nnew file mode 100644\nindex 0000000..41f3c58\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_boundfield_access_inverted.py\n@@ -0,0 +1,21 @@\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class BoundFieldAccessTest(SimpleTestCase):\n+    def test_clean_fields_vs_boundfield_initial(self):\n+        class TestForm(Form):\n+            name = CharField(initial='initial_value')\n+\n+        form = TestForm(data={'name': 'new_value'})\n+        form.full_clean()\n+\n+        # Directly access the initial value from the form's cleaned_data\n+        direct_initial_value = form.cleaned_data['name']\n+\n+        # Access the initial value via the BoundField\n+        boundfield_initial_value = form['name'].initial\n+\n+        # Assert that the direct initial value and the BoundField initial value are the same\n+        # This should fail if the bug is present, raising the specified error message\n+        if direct_initial_value != boundfield_initial_value:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}