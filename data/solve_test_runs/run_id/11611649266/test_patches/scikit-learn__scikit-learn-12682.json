{
  "edit_test_file": "sklearn/decomposition/tests/test_dict_learning.py",
  "test_patch": "diff --git a/sklearn/decomposition/tests/test_sparse_coder.py b/sklearn/decomposition/tests/test_sparse_coder.py\nnew file mode 100644\nindex 0000000..d4864ae\n--- /dev/null\n+++ b/sklearn/decomposition/tests/test_sparse_coder.py\n@@ -0,0 +1,36 @@\n+import numpy as np\n+import pytest\n+from sklearn.exceptions import ConvergenceWarning\n+from sklearn.decomposition import SparseCoder\n+from sklearn.utils.testing import assert_warns\n+\n+def test_sparse_coder_lasso_cd_convergence_warning():\n+    \"\"\"Test that SparseCoder with lasso_cd algorithm raises ConvergenceWarning\n+    when using default max_iter with difficult convergence conditions.\n+    \"\"\"\n+    # Generate random data that will cause convergence issues\n+    rng = np.random.RandomState(0)\n+    n_samples, n_features = 10, 8\n+    n_components = 5\n+    \n+    # Create data with large values to make convergence harder\n+    X = rng.randn(n_samples, n_features)\n+    dictionary = rng.randn(n_components, n_features)\n+    \n+    # Normalize dictionary\n+    dictionary /= np.sqrt(np.sum(dictionary ** 2, axis=1))[:, np.newaxis]\n+    \n+    # Scale X to make convergence harder\n+    X *= 1e6\n+    \n+    # Initialize SparseCoder with lasso_cd algorithm\n+    coder = SparseCoder(\n+        dictionary=dictionary,\n+        transform_algorithm='lasso_cd',\n+        transform_alpha=1e-10  # Small alpha to make convergence harder\n+    )\n+    \n+    # Assert that ConvergenceWarning is raised during transform\n+    # since we can't set max_iter to handle the difficult convergence case\n+    with pytest.warns(ConvergenceWarning):\n+        coder.transform(X)\n\\ No newline at end of file\n",
  "inverted_patch": null
}