{
  "edit_test_file": "tests/model_forms/tests.py",
  "test_patch": "diff --git a/tests/model_forms/test_product_metadata_filterable.py b/tests/model_forms/test_product_metadata_filterable.py\nnew file mode 100644\nindex 0000000..5024675\n--- /dev/null\n+++ b/tests/model_forms/test_product_metadata_filterable.py\n@@ -0,0 +1,46 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.utils import NotSupportedError\n+from django.utils import timezone\n+\n+\n+class MetadataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True)\n+    filterable = models.BooleanField(default=False)\n+\n+    class Meta:\n+        app_label = 'model_forms'\n+\n+\n+class Metadata(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField()\n+    date_created = models.DateTimeField(default=timezone.now)\n+    metadata_type = models.ForeignKey(MetadataType, on_delete=models.CASCADE)\n+\n+    class Meta:\n+        app_label = 'model_forms'\n+\n+\n+class ProductMetadataFilterableTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.metadata_type = MetadataType.objects.create(\n+            label='Brand',\n+            filterable=False\n+        )\n+        cls.metadata = Metadata.objects.create(\n+            value='Test Brand',\n+            metadata_type=cls.metadata_type\n+        )\n+\n+    def test_filter_raises_not_supported_error(self):\n+        \"\"\"\n+        Test that filtering Metadata with a metadata_type raises NotSupportedError\n+        when the metadata_type model has a field named 'filterable'.\n+        \"\"\"\n+        with self.assertRaisesMessage(NotSupportedError, 'MetadataType is disallowed in the filter clause.'):\n+            list(Metadata.objects.filter(\n+                value='Test Brand',\n+                metadata_type=self.metadata_type\n+            ))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_forms/test_product_metadata_filterable_inverted.py b/tests/model_forms/test_product_metadata_filterable_inverted.py\nnew file mode 100644\nindex 0000000..0023ade\n--- /dev/null\n+++ b/tests/model_forms/test_product_metadata_filterable_inverted.py\n@@ -0,0 +1,50 @@\n+from django.db import models\n+from django.test import TestCase\n+from django.db.utils import NotSupportedError\n+from django.utils import timezone\n+\n+\n+class MetadataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True)\n+    filterable = models.BooleanField(default=False)\n+\n+    class Meta:\n+        app_label = 'model_forms'\n+\n+\n+class Metadata(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField()\n+    date_created = models.DateTimeField(default=timezone.now)\n+    metadata_type = models.ForeignKey(MetadataType, on_delete=models.CASCADE)\n+\n+    class Meta:\n+        app_label = 'model_forms'\n+\n+\n+class ProductMetadataFilterableTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.metadata_type = MetadataType.objects.create(\n+            label='Brand',\n+            filterable=False\n+        )\n+        cls.metadata = Metadata.objects.create(\n+            value='Test Brand',\n+            metadata_type=cls.metadata_type\n+        )\n+\n+    def test_filter_should_not_raise_error(self):\n+        \"\"\"\n+        Test that filtering Metadata with a metadata_type should not raise NotSupportedError\n+        when the metadata_type model has a field named 'filterable'.\n+        \"\"\"\n+        try:\n+            list(Metadata.objects.filter(\n+                value='Test Brand',\n+                metadata_type=self.metadata_type\n+            ))\n+        except NotSupportedError as e:\n+            if 'MetadataType is disallowed in the filter clause.' in str(e):\n+                raise AssertionError('__BUG__HERE__')\n+            raise e\n\\ No newline at end of file\n"
}