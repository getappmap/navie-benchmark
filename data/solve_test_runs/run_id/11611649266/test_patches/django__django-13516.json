{
  "edit_test_file": "tests/migrations/test_commands.py",
  "test_patch": "diff --git a/tests/migrations/test_migration_flush_output.py b/tests/migrations/test_migration_flush_output.py\nnew file mode 100644\nindex 0000000..b3cdd0d\n--- /dev/null\n+++ b/tests/migrations/test_migration_flush_output.py\n@@ -0,0 +1,36 @@\n+from io import StringIO\n+from django.test import TransactionTestCase\n+from django.core.management import call_command\n+from django.test.utils import override_settings\n+\n+\n+class MigrationFlushOutputTests(TransactionTestCase):\n+    \"\"\"Test migration command output flushing behavior.\"\"\"\n+    \n+    available_apps = ['migrations']\n+    databases = {'default'}\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_migration_flush_output_buffered(self):\n+        \"\"\"\n+        Test that migration command output is buffered and not flushed immediately.\n+        This reproduces the issue where migration progress isn't shown in real-time.\n+        \"\"\"\n+        out = StringIO()\n+        # Run migrations\n+        call_command('migrate', 'migrations', '0002', stdout=out, verbosity=1, no_color=True)\n+        output = out.getvalue()\n+        \n+        # The full output should appear, but it was buffered rather than streaming\n+        expected_output = (\n+            \"Operations to perform:\\n\"\n+            \"  Target specific migration: 0002_second, from migrations\\n\"\n+            \"Running migrations:\\n\"\n+            \"  Applying migrations.0001_initial... OK\\n\"\n+            \"  Applying migrations.0002_second... OK\\n\"\n+        )\n+        \n+        self.assertEqual(output, expected_output)\n+        \n+        # Reset migrations\n+        call_command('migrate', 'migrations', 'zero', verbosity=0)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migration_flush_output_inverted.py b/tests/migrations/test_migration_flush_output_inverted.py\nnew file mode 100644\nindex 0000000..5bd7566\n--- /dev/null\n+++ b/tests/migrations/test_migration_flush_output_inverted.py\n@@ -0,0 +1,47 @@\n+from io import StringIO\n+from django.test import TransactionTestCase\n+from django.core.management import call_command\n+from django.test.utils import override_settings\n+import time\n+\n+\n+class MigrationFlushOutputTests(TransactionTestCase):\n+    \"\"\"Test migration command output flushing behavior.\"\"\"\n+    \n+    available_apps = ['migrations']\n+    databases = {'default'}\n+\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_migration_flush_output_not_buffered(self):\n+        \"\"\"\n+        Test that migration command output is not buffered and is flushed immediately.\n+        The test should fail if output is buffered instead of being shown in real-time.\n+        \"\"\"\n+        out = StringIO()\n+        \n+        # Run migrations and capture timestamps of output\n+        start_time = time.time()\n+        call_command('migrate', 'migrations', '0002', stdout=out, verbosity=1, no_color=True)\n+        end_time = time.time()\n+        output = out.getvalue()\n+        \n+        # Expected output chunks\n+        expected_chunks = [\n+            \"Operations to perform:\\n\",\n+            \"  Target specific migration: 0002_second, from migrations\\n\",\n+            \"Running migrations:\\n\",\n+            \"  Applying migrations.0001_initial... OK\\n\",\n+            \"  Applying migrations.0002_second... OK\\n\"\n+        ]\n+        \n+        # Verify all expected content is present\n+        for chunk in expected_chunks:\n+            self.assertIn(chunk, output)\n+        \n+        # If the execution time is very short (less than 0.1 seconds),\n+        # it means the output was buffered and not flushed in real-time\n+        if end_time - start_time < 0.1:\n+            raise AssertionError(\"__BUG__HERE__: Output was buffered instead of being flushed in real-time\")\n+            \n+        # Reset migrations\n+        call_command('migrate', 'migrations', 'zero', verbosity=0)\n\\ No newline at end of file\n"
}