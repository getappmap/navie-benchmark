{
  "edit_test_file": "tests/basic/tests.py",
  "test_patch": "diff --git a/tests/basic/test_fk_non_numeric_pk_assignment.py b/tests/basic/test_fk_non_numeric_pk_assignment.py\nnew file mode 100644\nindex 0000000..b58f065\n--- /dev/null\n+++ b/tests/basic/test_fk_non_numeric_pk_assignment.py\n@@ -0,0 +1,40 @@\n+from django.db import models, transaction\n+from django.test import TestCase\n+\n+\n+class Product(models.Model):\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+\n+\n+class NonNumericPKAssignmentTest(TestCase):\n+    def test_fk_assignment_with_delayed_pk_setting(self):\n+        \"\"\"\n+        Test that assigning an unsaved instance with unset PK to a foreign key,\n+        then setting the PK afterwards leads to incorrect FK value.\n+        \"\"\"\n+        with self.assertRaises(Exception):  # Transaction will fail on commit\n+            with transaction.atomic():\n+                order = Order()\n+                order.product = Product()  # Assign unsaved product without PK\n+                order.product.sku = \"foo\"  # Set PK after assignment\n+                order.product.save()\n+                order.save()\n+\n+                # The order's product_id should be \"foo\", but it's actually empty\n+                self.assertTrue(\n+                    Order.objects.filter(product_id=\"\").exists(),\n+                    \"Order's product_id should be empty string due to the bug\"\n+                )\n+                \n+                # This fails because the order's product_id is \"\" instead of \"foo\"\n+                self.assertFalse(\n+                    Order.objects.filter(product=order.product).exists(),\n+                    \"Order should not be found when querying by the actual product\"\n+                )\n+\n+                # The transaction will fail on commit due to FK constraint violation\n+                # since there is no Product with sku=\"\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/basic/test_fk_non_numeric_pk_assignment_inverted.py b/tests/basic/test_fk_non_numeric_pk_assignment_inverted.py\nnew file mode 100644\nindex 0000000..4b8707c\n--- /dev/null\n+++ b/tests/basic/test_fk_non_numeric_pk_assignment_inverted.py\n@@ -0,0 +1,42 @@\n+from django.db import models, transaction\n+from django.test import TestCase\n+\n+\n+class Product(models.Model):\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+\n+\n+class NonNumericPKAssignmentTest(TestCase):\n+    def test_fk_assignment_with_delayed_pk_setting(self):\n+        \"\"\"\n+        Test that assigning an unsaved instance with unset PK to a foreign key,\n+        then setting the PK afterwards should properly set the FK value.\n+        The test will fail if the bug is present.\n+        \"\"\"\n+        with transaction.atomic():\n+            order = Order()\n+            order.product = Product()  # Assign unsaved product without PK\n+            order.product.sku = \"foo\"  # Set PK after assignment\n+            order.product.save()\n+            order.save()\n+\n+            # This should raise an AssertionError with \"__BUG__HERE__\" message\n+            # when the bug is present (i.e., when product_id is \"\" instead of \"foo\")\n+            if Order.objects.filter(product_id=\"\").exists():\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+            # Verify that the order is properly linked to the product\n+            saved_order = Order.objects.get(id=order.id)\n+            self.assertEqual(\n+                saved_order.product_id,\n+                \"foo\",\n+                \"Order's product_id should be 'foo'\"\n+            )\n+            self.assertTrue(\n+                Order.objects.filter(product=order.product).exists(),\n+                \"Order should be found when querying by the actual product\"\n+            )\n\\ No newline at end of file\n"
}