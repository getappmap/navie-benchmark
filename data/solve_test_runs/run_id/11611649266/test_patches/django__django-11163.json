{
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_model_utils.py b/tests/forms_tests/tests/test_model_utils.py\nnew file mode 100644\nindex 0000000..2658c07\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_model_utils.py\n@@ -0,0 +1,16 @@\n+# File: tests/forms_tests/tests/test_model_utils.py\n+\n+from django.forms import model_to_dict\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class SampleModel(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.IntegerField()\n+\n+class ModelUtilsTestCase(SimpleTestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        instance = SampleModel(field1='test', field2=123)\n+        result = model_to_dict(instance, fields=[])\n+        # The test should pass when the issue is observed, i.e., it should return all fields instead of an empty dict.\n+        self.assertEqual(result, {'id': None, 'field1': 'test', 'field2': 123})\n",
  "inverted_patch": "diff --git a/tests/forms_tests/tests/test_model_utils_inverted.py b/tests/forms_tests/tests/test_model_utils_inverted.py\nnew file mode 100644\nindex 0000000..37b5914\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_model_utils_inverted.py\n@@ -0,0 +1,16 @@\n+# File: tests/forms_tests/tests/test_model_utils.py\n+\n+from django.forms import model_to_dict\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class SampleModel(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.IntegerField()\n+\n+class ModelUtilsTestCase(SimpleTestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        instance = SampleModel(field1='test', field2=123)\n+        result = model_to_dict(instance, fields=[])\n+        # The test should fail when the issue is observed, i.e., it should return an empty dict.\n+        self.assertEqual(result, {}, \"__BUG__HERE__\")\n"
}