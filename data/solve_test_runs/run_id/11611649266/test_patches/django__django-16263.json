{
  "edit_test_file": "tests/aggregation/tests.py",
  "test_patch": "diff --git a/tests/aggregation/test_strip_unused_annotations_from_count_queries.py b/tests/aggregation/test_strip_unused_annotations_from_count_queries.py\nnew file mode 100644\nindex 0000000..fef4790\n--- /dev/null\n+++ b/tests/aggregation/test_strip_unused_annotations_from_count_queries.py\n@@ -0,0 +1,32 @@\n+import datetime\n+from decimal import Decimal\n+from django.db.models import Count\n+from django.test import TestCase\n+from .models import Author, Book, Publisher, Store\n+\n+class StripUnusedAnnotationsTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+        )\n+        cls.b1.authors.add(cls.a1)\n+\n+    def test_strip_unused_annotations_from_count_queries(self):\n+        # This test reproduces the issue where unused annotations are not stripped\n+        # from count queries, resulting in unnecessary SQL complexity.\n+        with self.assertNumQueries(1) as ctx:\n+            Book.objects.annotate(Count('authors')).count()\n+        sql = ctx.captured_queries[0][\"sql\"]\n+        # Assert that the SQL query includes the Count('authors') annotation\n+        # even though it is not used in any filter operations.\n+        self.assertIn(\"COUNT(\", sql)\n",
  "inverted_patch": "diff --git a/tests/aggregation/test_strip_unused_annotations_from_count_queries_inverted.py b/tests/aggregation/test_strip_unused_annotations_from_count_queries_inverted.py\nnew file mode 100644\nindex 0000000..6024df1\n--- /dev/null\n+++ b/tests/aggregation/test_strip_unused_annotations_from_count_queries_inverted.py\n@@ -0,0 +1,33 @@\n+import datetime\n+from decimal import Decimal\n+from django.db.models import Count\n+from django.test import TestCase\n+from .models import Author, Book, Publisher, Store\n+\n+class StripUnusedAnnotationsTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.a1 = Author.objects.create(name=\"Adrian Holovaty\", age=34)\n+        cls.p1 = Publisher.objects.create(name=\"Apress\", num_awards=3)\n+        cls.b1 = Book.objects.create(\n+            isbn=\"159059725\",\n+            name=\"The Definitive Guide to Django: Web Development Done Right\",\n+            pages=447,\n+            rating=4.5,\n+            price=Decimal(\"30.00\"),\n+            contact=cls.a1,\n+            publisher=cls.p1,\n+            pubdate=datetime.date(2007, 12, 6),\n+        )\n+        cls.b1.authors.add(cls.a1)\n+\n+    def test_strip_unused_annotations_from_count_queries(self):\n+        # This test should fail if the issue is observed, i.e., if unused annotations are not stripped\n+        # from count queries, resulting in unnecessary SQL complexity.\n+        with self.assertNumQueries(1) as ctx:\n+            Book.objects.annotate(Count('authors')).count()\n+        sql = ctx.captured_queries[0][\"sql\"]\n+        # The test should fail if the SQL query includes the Count('authors') annotation\n+        # even though it is not used in any filter operations.\n+        if \"COUNT(\" in sql:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}