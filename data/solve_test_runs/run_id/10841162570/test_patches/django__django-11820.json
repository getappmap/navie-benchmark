{
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_meta_ordering_pk_issue.py b/tests/invalid_models_tests/test_meta_ordering_pk_issue.py\nnew file mode 100644\nindex 0000000..5eb5ff3\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_meta_ordering_pk_issue.py\n@@ -0,0 +1,23 @@\n+from django.db import models\n+from django.core.checks import Error\n+from django.test import TestCase\n+\n+class TestMetaOrderingPKIssue(TestCase):\n+    def test_ordering_with_related_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('option__pk',)\n+\n+        self.assertEqual(SomeModel.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'option__pk'.\",\n+                obj=SomeModel,\n+                id='models.E015',\n+            )\n+        ])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/invalid_models_tests/test_meta_ordering_pk_issue_inverted.py b/tests/invalid_models_tests/test_meta_ordering_pk_issue_inverted.py\nnew file mode 100644\nindex 0000000..fea71ed\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_meta_ordering_pk_issue_inverted.py\n@@ -0,0 +1,19 @@\n+from django.db import models\n+from django.core.checks import Error\n+from django.test import TestCase\n+\n+class TestMetaOrderingPKIssue(TestCase):\n+    def test_ordering_with_related_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('option__pk',)\n+\n+        # Alter the test to fail when the issue is observed\n+        errors = SomeModel.check()\n+        if any(error.id == 'models.E015' for error in errors):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}