{
  "edit_test_file": "tests/model_indexes/tests.py",
  "test_patch": "diff --git a/tests/model_indexes/test_named_tuple_range.py b/tests/model_indexes/test_named_tuple_range.py\nnew file mode 100644\nindex 0000000..07c98eb\n--- /dev/null\n+++ b/tests/model_indexes/test_named_tuple_range.py\n@@ -0,0 +1,21 @@\n+from unittest import TestCase\n+from collections import namedtuple\n+from django.db import models\n+from django.core.exceptions import FieldError\n+\n+# Assuming a model named 'SampleModel' with a field 'value' exists\n+class SampleModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeTest(TestCase):\n+    def test_named_tuple_range_error(self):\n+        # Define a named tuple with two elements\n+        RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+        range_value = RangeTuple(1, 10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaises(TypeError) as context:\n+            SampleModel.objects.filter(value__range=range_value)\n+\n+        # Check if the error message matches the expected issue\n+        self.assertIn(\"__new__() missing 1 required positional argument: 'far'\", str(context.exception))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_indexes/test_named_tuple_range_inverted.py b/tests/model_indexes/test_named_tuple_range_inverted.py\nnew file mode 100644\nindex 0000000..05979d2\n--- /dev/null\n+++ b/tests/model_indexes/test_named_tuple_range_inverted.py\n@@ -0,0 +1,20 @@\n+from unittest import TestCase\n+from collections import namedtuple\n+from django.db import models\n+\n+# Assuming a model named 'SampleModel' with a field 'value' exists\n+class SampleModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeTest(TestCase):\n+    def test_named_tuple_range_error(self):\n+        # Define a named tuple with two elements\n+        RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+        range_value = RangeTuple(1, 10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaises(TypeError) as context:\n+            SampleModel.objects.filter(value__range=range_value)\n+\n+        # Check if the error message matches the expected issue\n+        self.assertIn(\"__BUG__HERE__\", str(context.exception))\n\\ No newline at end of file\n"
}