{
  "edit_test_file": "sklearn/linear_model/tests/test_coordinate_descent.py",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_isolation_forest.py b/sklearn/linear_model/tests/test_isolation_forest.py\nnew file mode 100644\nindex 0000000..b40cb0c\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_isolation_forest.py\n@@ -0,0 +1,25 @@\n+import unittest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+\n+class TestIsolationForestWarmStart(unittest.TestCase):\n+    def test_warm_start_incremental_trees(self):\n+        # Generate synthetic data\n+        rng = np.random.RandomState(42)\n+        X_train = 0.3 * rng.randn(100, 2)\n+        X_train = np.r_[X_train + 2, X_train - 2]\n+\n+        # Initialize IsolationForest without warm_start exposed\n+        clf = IsolationForest(n_estimators=5, random_state=rng)\n+\n+        # Fit the model\n+        clf.fit(X_train)\n+\n+        # Set warm_start to True and increment n_estimators\n+        with self.assertRaises(ValueError) as context:\n+            clf.set_params(warm_start=True, n_estimators=10)\n+\n+        self.assertIn(\"Invalid parameter warm_start\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": null
}