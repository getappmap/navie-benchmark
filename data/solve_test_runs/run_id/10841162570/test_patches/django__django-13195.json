{
  "edit_test_file": "tests/responses/test_cookie.py",
  "test_patch": "diff --git a/tests/responses/test_httpresponse_delete_cookie.py b/tests/responses/test_httpresponse_delete_cookie.py\nnew file mode 100644\nindex 0000000..a3079a6\n--- /dev/null\n+++ b/tests/responses/test_httpresponse_delete_cookie.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from django.http import HttpResponse\n+\n+class HttpResponseDeleteCookieTests(unittest.TestCase):\n+\n+    def test_delete_cookie_preserves_samesite(self):\n+        response = HttpResponse()\n+        # Set a cookie with SameSite attribute\n+        response.set_cookie('messages', 'value', samesite='Lax')\n+        # Delete the cookie\n+        response.delete_cookie('messages')\n+        # Check if the SameSite attribute is still present after deletion\n+        self.assertIn('samesite', response.cookies['messages'])\n+        self.assertEqual(response.cookies['messages']['samesite'], 'Lax')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/responses/test_httpresponse_delete_cookie_inverted.py b/tests/responses/test_httpresponse_delete_cookie_inverted.py\nnew file mode 100644\nindex 0000000..fbc2404\n--- /dev/null\n+++ b/tests/responses/test_httpresponse_delete_cookie_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.http import HttpResponse\n+\n+class HttpResponseDeleteCookieTests(unittest.TestCase):\n+\n+    def test_delete_cookie_preserves_samesite(self):\n+        response = HttpResponse()\n+        # Set a cookie with SameSite attribute\n+        response.set_cookie('messages', 'value', samesite='Lax')\n+        # Delete the cookie\n+        response.delete_cookie('messages')\n+        # Check if the SameSite attribute is still present after deletion\n+        # This assertion should fail if the bug is present\n+        if 'samesite' in response.cookies['messages']:\n+            self.fail(\"__BUG__HERE__\")\n+        self.assertNotIn('samesite', response.cookies['messages'])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}