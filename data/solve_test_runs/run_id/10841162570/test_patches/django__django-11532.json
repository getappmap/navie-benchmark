{
  "edit_test_file": "tests/httpwrappers/tests.py",
  "test_patch": "diff --git a/tests/httpwrappers/test_unicode_email_punycode.py b/tests/httpwrappers/test_unicode_email_punycode.py\nnew file mode 100644\nindex 0000000..85f0da6\n--- /dev/null\n+++ b/tests/httpwrappers/test_unicode_email_punycode.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from unittest.mock import patch\n+from django.core.mail import EmailMessage\n+\n+class TestUnicodeEmailPunycode(unittest.TestCase):\n+    def test_email_message_id_with_non_ascii_domain(self):\n+        with patch(\"django.core.mail.message.DNS_NAME\", \"\u6f22\u5b57\"):\n+            email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+            email.encoding = 'iso-8859-1'\n+            with self.assertRaises(UnicodeEncodeError):\n+                email.message()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/httpwrappers/test_unicode_email_punycode_inverted.py b/tests/httpwrappers/test_unicode_email_punycode_inverted.py\nnew file mode 100644\nindex 0000000..4dd52f4\n--- /dev/null\n+++ b/tests/httpwrappers/test_unicode_email_punycode_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from unittest.mock import patch\n+from django.core.mail import EmailMessage\n+\n+class TestUnicodeEmailPunycode(unittest.TestCase):\n+    def test_email_message_id_with_non_ascii_domain(self):\n+        with patch(\"django.core.mail.message.DNS_NAME\", \"\u6f22\u5b57\"):\n+            email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+            email.encoding = 'iso-8859-1'\n+            try:\n+                email.message()\n+            except UnicodeEncodeError:\n+                self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}