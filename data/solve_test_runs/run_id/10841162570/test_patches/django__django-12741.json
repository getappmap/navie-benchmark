{
  "edit_test_file": "tests/backends/base/test_operations.py",
  "test_patch": "diff --git a/tests/backends/base/test_flushing.py b/tests/backends/base/test_flushing.py\nnew file mode 100644\nindex 0000000..b9afc6c\n--- /dev/null\n+++ b/tests/backends/base/test_flushing.py\n@@ -0,0 +1,29 @@\n+import unittest\n+\n+from django.core.management.color import no_style\n+from django.db import connection, transaction\n+from django.test import TestCase\n+\n+from ..models import Author, Book\n+\n+\n+class ExecuteSqlFlushTests(TestCase):\n+    def test_execute_sql_flush_signature(self):\n+        with transaction.atomic():\n+            author = Author.objects.create(name='George Orwell')\n+            Book.objects.create(author=author)\n+            author = Author.objects.create(name='Harper Lee')\n+            Book.objects.create(author=author)\n+            Book.objects.create(author=author)\n+            self.assertIs(Author.objects.exists(), True)\n+            self.assertIs(Book.objects.exists(), True)\n+\n+        # Attempt to call execute_sql_flush without the 'using' argument\n+        sql_list = connection.ops.sql_flush(\n+            no_style(),\n+            [Author._meta.db_table, Book._meta.db_table],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+        with self.assertRaises(TypeError):\n+            connection.ops.execute_sql_flush(sql_list)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/backends/base/test_flushing_inverted.py b/tests/backends/base/test_flushing_inverted.py\nnew file mode 100644\nindex 0000000..4b6e005\n--- /dev/null\n+++ b/tests/backends/base/test_flushing_inverted.py\n@@ -0,0 +1,32 @@\n+import unittest\n+\n+from django.core.management.color import no_style\n+from django.db import connection, transaction\n+from django.test import TestCase\n+\n+from ..models import Author, Book\n+\n+\n+class ExecuteSqlFlushTests(TestCase):\n+    def test_execute_sql_flush_signature(self):\n+        with transaction.atomic():\n+            author = Author.objects.create(name='George Orwell')\n+            Book.objects.create(author=author)\n+            author = Author.objects.create(name='Harper Lee')\n+            Book.objects.create(author=author)\n+            Book.objects.create(author=author)\n+            self.assertIs(Author.objects.exists(), True)\n+            self.assertIs(Book.objects.exists(), True)\n+\n+        # Attempt to call execute_sql_flush without the 'using' argument\n+        sql_list = connection.ops.sql_flush(\n+            no_style(),\n+            [Author._meta.db_table, Book._meta.db_table],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+        # The test should now fail if the bug is present\n+        try:\n+            connection.ops.execute_sql_flush(sql_list)\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}