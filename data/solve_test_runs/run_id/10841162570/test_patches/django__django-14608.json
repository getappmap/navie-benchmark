{
  "edit_test_file": "tests/forms_tests/tests/test_error_messages.py",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formset_errorlist.py b/tests/forms_tests/tests/test_formset_errorlist.py\nnew file mode 100644\nindex 0000000..29bafae\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formset_errorlist.py\n@@ -0,0 +1,24 @@\n+from django.forms import formset_factory, Form, CharField\n+from django.forms.utils import ErrorList\n+from django.test import SimpleTestCase\n+\n+class CustomErrorList(ErrorList):\n+    def __str__(self):\n+        return self.as_ul()\n+\n+    def as_ul(self):\n+        if not self:\n+            return ''\n+        return '<ul class=\"errorlist nonform\">%s</ul>' % ''.join('<li>%s</li>' % e for e in self)\n+\n+class TestForm(Form):\n+    name = CharField()\n+\n+class FormSetErrorListTest(SimpleTestCase):\n+    def test_non_form_errors_have_nonform_class(self):\n+        TestFormSet = formset_factory(TestForm, extra=0)\n+        formset = TestFormSet(data={}, error_class=CustomErrorList)\n+        formset.is_valid()  # Trigger validation to populate errors\n+\n+        # Check if non-form errors have the 'nonform' CSS class\n+        self.assertIn('class=\"errorlist nonform\"', str(formset.non_form_errors()))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/forms_tests/tests/test_formset_errorlist_inverted.py b/tests/forms_tests/tests/test_formset_errorlist_inverted.py\nnew file mode 100644\nindex 0000000..030232f\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formset_errorlist_inverted.py\n@@ -0,0 +1,26 @@\n+from django.forms import formset_factory, Form, CharField\n+from django.forms.utils import ErrorList\n+from django.test import SimpleTestCase\n+\n+class CustomErrorList(ErrorList):\n+    def __str__(self):\n+        return self.as_ul()\n+\n+    def as_ul(self):\n+        if not self:\n+            return ''\n+        return '<ul class=\"errorlist nonform\">%s</ul>' % ''.join('<li>%s</li>' % e for e in self)\n+\n+class TestForm(Form):\n+    name = CharField()\n+\n+class FormSetErrorListTest(SimpleTestCase):\n+    def test_non_form_errors_have_nonform_class(self):\n+        TestFormSet = formset_factory(TestForm, extra=0)\n+        formset = TestFormSet(data={}, error_class=CustomErrorList)\n+        formset.is_valid()  # Trigger validation to populate errors\n+\n+        # Check if non-form errors have the 'nonform' CSS class\n+        # This assertion should now fail if the bug is present\n+        if 'class=\"errorlist nonform\"' in str(formset.non_form_errors()):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}