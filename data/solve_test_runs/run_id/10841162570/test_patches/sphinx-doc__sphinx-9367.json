{
  "edit_test_file": "tests/test_util_template.py",
  "test_patch": "diff --git a/tests/test_tuple_rendering.py b/tests/test_tuple_rendering.py\nnew file mode 100644\nindex 0000000..19c319a\n--- /dev/null\n+++ b/tests/test_tuple_rendering.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from sphinx.pycode import ast\n+\n+class TestTupleRendering(unittest.TestCase):\n+    def test_single_element_tuple_rendering(self):\n+        # This is the test case to reproduce the issue\n+        source = \"(1,)\"\n+        expected = \"(1,)\"  # The expected incorrect output is \"(1)\" instead of \"(1,)\"\n+        \n+        module = ast.parse(source)\n+        result = ast.unparse(module.body[0].value, source)\n+        \n+        # Assert that the incorrect output is produced\n+        self.assertEqual(result, \"(1)\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_tuple_rendering_inverted.py b/tests/test_tuple_rendering_inverted.py\nnew file mode 100644\nindex 0000000..845b477\n--- /dev/null\n+++ b/tests/test_tuple_rendering_inverted.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from sphinx.pycode import ast\n+\n+class TestTupleRendering(unittest.TestCase):\n+    def test_single_element_tuple_rendering(self):\n+        # This is the test case to reproduce the issue\n+        source = \"(1,)\"\n+        expected = \"(1,)\"  # The expected correct output is \"(1,)\" with the trailing comma\n+        \n+        module = ast.parse(source)\n+        result = ast.unparse(module.body[0].value, source)\n+        \n+        # Assert that the correct output is produced\n+        # This should fail if the bug is present\n+        self.assertEqual(result, expected, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}