{
  "edit_test_file": "tests/forms_tests/tests/tests.py",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_model_to_dict.py b/tests/forms_tests/tests/test_model_to_dict.py\nnew file mode 100644\nindex 0000000..7af3997\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_model_to_dict.py\n@@ -0,0 +1,16 @@\n+from django.forms.models import model_to_dict\n+from django.test import TestCase\n+from ..models import ChoiceModel\n+\n+class ModelToDictTestCase(TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"\n+        Test that model_to_dict returns all fields when an empty list is provided for fields.\n+        This reproduces the issue where model_to_dict should return an empty dict.\n+        \"\"\"\n+        instance = ChoiceModel.objects.create(name='Test Choice', choice='A')\n+        result = model_to_dict(instance, fields=[])\n+        # The issue is that result should be {}, but it returns all fields instead.\n+        self.assertNotEqual(result, {})\n+        self.assertIn('name', result)\n+        self.assertIn('choice', result)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/forms_tests/tests/test_model_to_dict_inverted.py b/tests/forms_tests/tests/test_model_to_dict_inverted.py\nnew file mode 100644\nindex 0000000..91ee7ac\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_model_to_dict_inverted.py\n@@ -0,0 +1,16 @@\n+from django.forms.models import model_to_dict\n+from django.test import TestCase\n+from ..models import ChoiceModel\n+\n+class ModelToDictTestCase(TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"\n+        Test that model_to_dict returns an empty dict when an empty list is provided for fields.\n+        This reproduces the issue where model_to_dict should return an empty dict.\n+        \"\"\"\n+        instance = ChoiceModel.objects.create(name='Test Choice', choice='A')\n+        result = model_to_dict(instance, fields=[])\n+        # The issue is that result should be {}, but it returns all fields instead.\n+        if result != {}:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(result, {})\n\\ No newline at end of file\n"
}