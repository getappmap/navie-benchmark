{
  "edit_test_file": "tests/generic_views/test_dates.py",
  "test_patch": "diff --git a/tests/generic_views/test_lazy_object_resolution.py b/tests/generic_views/test_lazy_object_resolution.py\nnew file mode 100644\nindex 0000000..51af402\n--- /dev/null\n+++ b/tests/generic_views/test_lazy_object_resolution.py\n@@ -0,0 +1,27 @@\n+from django.test import TestCase\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n+from .models import Book\n+\n+class LazyObjectResolutionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.book = Book.objects.create(\n+            name='Test Book',\n+            slug='test-book',\n+            pages=100,\n+            pubdate='2008-10-01'\n+        )\n+\n+    def test_lazy_object_filter_crash(self):\n+        \"\"\"\n+        Test that using a SimpleLazyObject in get_object_or_404 without str() conversion\n+        raises an InterfaceError with SQLite.\n+        \"\"\"\n+        def get_slug():\n+            return 'test-book'\n+            \n+        lazy_slug = SimpleLazyObject(get_slug)\n+        \n+        with self.assertRaisesMessage(Exception, 'Error binding parameter 0 - probably unsupported type'):\n+            get_object_or_404(Book, slug=lazy_slug)\n",
  "inverted_patch": "diff --git a/tests/generic_views/test_lazy_object_resolution_inverted.py b/tests/generic_views/test_lazy_object_resolution_inverted.py\nnew file mode 100644\nindex 0000000..470dab1\n--- /dev/null\n+++ b/tests/generic_views/test_lazy_object_resolution_inverted.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n+from .models import Book\n+\n+class LazyObjectResolutionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.book = Book.objects.create(\n+            name='Test Book',\n+            slug='test-book',\n+            pages=100,\n+            pubdate='2008-10-01'\n+        )\n+\n+    def test_lazy_object_filter_crash(self):\n+        \"\"\"\n+        Test that using a SimpleLazyObject in get_object_or_404 without str() conversion\n+        should work correctly. If it raises an InterfaceError with SQLite, that's a bug.\n+        \"\"\"\n+        def get_slug():\n+            return 'test-book'\n+            \n+        lazy_slug = SimpleLazyObject(get_slug)\n+        \n+        try:\n+            # This should work without needing str() conversion\n+            book = get_object_or_404(Book, slug=lazy_slug)\n+        except Exception as e:\n+            if 'Error binding parameter 0 - probably unsupported type' in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different exception\n+            \n+        # If we get here, verify we got the correct book\n+        self.assertEqual(book.slug, 'test-book')\n\\ No newline at end of file\n"
}