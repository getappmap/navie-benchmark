{
  "edit_test_file": "lib/matplotlib/tests/test_colorbar.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colormap_registration.py b/lib/matplotlib/tests/test_colormap_registration.py\nnew file mode 100644\nindex 0000000..bb35acc\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_colormap_registration.py\n@@ -0,0 +1,33 @@\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LinearSegmentedColormap\n+import matplotlib as mpl\n+\n+def test_colormap_name_mismatch():\n+    \"\"\"\n+    Test that verifies the issue where a mismatch between a colormap's internal\n+    name and its registered name causes an error in plt.imshow().\n+    \"\"\"\n+    # Create colormap data\n+    cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],\n+                 [2.3e-03, 1.3e-03, 1.8e-02],\n+                 [3.3e-03, 2.3e-03, 2.4e-02]]\n+\n+    # Create colormap with internal name 'some_cmap_name'\n+    my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', cmap_data)\n+\n+    # Register colormap with different name 'my_cmap_name'\n+    plt.colormaps.register(cmap=my_cmap, name='my_cmap_name')\n+\n+    # Set the colormap\n+    plt.set_cmap('my_cmap_name')\n+\n+    # Attempt to use the colormap should raise ValueError due to name mismatch\n+    with pytest.raises(ValueError) as exc_info:\n+        plt.imshow([[1, 1], [2, 2]])\n+\n+    # Verify the error message contains the expected text\n+    assert \"'some_cmap_name' is not a valid value for cmap\" in str(exc_info.value)\n+\n+    # Clean up\n+    plt.close()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_colormap_registration_inverted.py b/lib/matplotlib/tests/test_colormap_registration_inverted.py\nnew file mode 100644\nindex 0000000..e9fd470\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_colormap_registration_inverted.py\n@@ -0,0 +1,38 @@\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LinearSegmentedColormap\n+import matplotlib as mpl\n+\n+def test_colormap_name_mismatch():\n+    \"\"\"\n+    Test that verifies the issue where a mismatch between a colormap's internal\n+    name and its registered name causes an error in plt.imshow().\n+    \"\"\"\n+    # Create colormap data\n+    cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],\n+                 [2.3e-03, 1.3e-03, 1.8e-02],\n+                 [3.3e-03, 2.3e-03, 2.4e-02]]\n+\n+    # Create colormap with internal name 'some_cmap_name'\n+    my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', cmap_data)\n+\n+    # Register colormap with different name 'my_cmap_name'\n+    plt.colormaps.register(cmap=my_cmap, name='my_cmap_name')\n+\n+    # Set the colormap\n+    plt.set_cmap('my_cmap_name')\n+\n+    # The test should fail here because the colormap name mismatch is a bug\n+    try:\n+        plt.imshow([[1, 1], [2, 2]])\n+        # If we reach this point, the bug is not present (which is unexpected)\n+        plt.close()\n+        raise AssertionError(\"Expected ValueError due to colormap name mismatch\")\n+    except ValueError as e:\n+        if \"'some_cmap_name' is not a valid value for cmap\" in str(e):\n+            plt.close()\n+            raise AssertionError(\"__BUG__HERE__\")\n+        else:\n+            # If we get a different ValueError, re-raise it\n+            plt.close()\n+            raise\n\\ No newline at end of file\n"
}