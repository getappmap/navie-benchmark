{
  "edit_test_file": "tests/urlpatterns/tests.py",
  "test_patch": "diff --git a/tests/urlpatterns/test_debug_error_view.py b/tests/urlpatterns/test_debug_error_view.py\nnew file mode 100644\nindex 0000000..c1d488f\n--- /dev/null\n+++ b/tests/urlpatterns/test_debug_error_view.py\n@@ -0,0 +1,25 @@\n+# File: tests/urlpatterns/test_debug_error_view.py\n+\n+from django.test import SimpleTestCase, RequestFactory\n+from django.views import View\n+from django.views.debug import ExceptionReporter\n+\n+class TestView(View):\n+    def get(self, request, *args, **kwargs):\n+        try:\n+            raise RuntimeError('my error')\n+        except Exception as exc:\n+            raise ValueError('my new error') from None\n+\n+class TestDebugErrorViewSuppressContext(SimpleTestCase):\n+    def test_suppress_context(self):\n+        request = RequestFactory().get('/')\n+        view = TestView.as_view()\n+        \n+        try:\n+            view(request)\n+        except ValueError as exc:\n+            reporter = ExceptionReporter(request, exc.__class__, exc, exc.__traceback__)\n+            traceback_data = reporter.get_traceback_data()\n+            # Assert that the traceback data contains the suppressed context\n+            self.assertIn('RuntimeError', str(traceback_data))\n",
  "inverted_patch": "diff --git a/tests/urlpatterns/test_debug_error_view_inverted.py b/tests/urlpatterns/test_debug_error_view_inverted.py\nnew file mode 100644\nindex 0000000..7b264a6\n--- /dev/null\n+++ b/tests/urlpatterns/test_debug_error_view_inverted.py\n@@ -0,0 +1,26 @@\n+# File: tests/urlpatterns/test_debug_error_view.py\n+\n+from django.test import SimpleTestCase, RequestFactory\n+from django.views import View\n+from django.views.debug import ExceptionReporter\n+\n+class TestView(View):\n+    def get(self, request, *args, **kwargs):\n+        try:\n+            raise RuntimeError('my error')\n+        except Exception as exc:\n+            raise ValueError('my new error') from None\n+\n+class TestDebugErrorViewSuppressContext(SimpleTestCase):\n+    def test_suppress_context(self):\n+        request = RequestFactory().get('/')\n+        view = TestView.as_view()\n+        \n+        try:\n+            view(request)\n+        except ValueError as exc:\n+            reporter = ExceptionReporter(request, exc.__class__, exc, exc.__traceback__)\n+            traceback_data = reporter.get_traceback_data()\n+            # Assert that the traceback data does not contain the suppressed context\n+            if 'RuntimeError' in str(traceback_data):\n+                raise AssertionError(\"__BUG__HERE__\")\n"
}