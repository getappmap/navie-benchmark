{
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "test_patch": "diff --git a/tests/migrations/test_optimize_alter_foo_together.py b/tests/migrations/test_optimize_alter_foo_together.py\nnew file mode 100644\nindex 0000000..3ac6b8f\n--- /dev/null\n+++ b/tests/migrations/test_optimize_alter_foo_together.py\n@@ -0,0 +1,35 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class OptimizeAlterFooTogetherTests(SimpleTestCase):\n+    def optimize(self, operations, app_label='migrations'):\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def test_optimize_multiple_alter_foo_together(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are not optimized into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+        optimized_operations = self.optimize(operations)\n+        # The issue is that these operations should not be optimized into one.\n+        # We expect the same number of operations as input.\n+        self.assertEqual(len(optimized_operations), len(operations))\n",
  "inverted_patch": "diff --git a/tests/migrations/test_optimize_alter_foo_together_inverted.py b/tests/migrations/test_optimize_alter_foo_together_inverted.py\nnew file mode 100644\nindex 0000000..5137c0b\n--- /dev/null\n+++ b/tests/migrations/test_optimize_alter_foo_together_inverted.py\n@@ -0,0 +1,36 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class OptimizeAlterFooTogetherTests(SimpleTestCase):\n+    def optimize(self, operations, app_label='migrations'):\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def test_optimize_multiple_alter_foo_together(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+        optimized_operations = self.optimize(operations)\n+        # The issue is that these operations should be optimized into one.\n+        # We expect fewer operations than input.\n+        if len(optimized_operations) == len(operations):\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}