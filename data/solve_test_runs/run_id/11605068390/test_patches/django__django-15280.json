{
  "edit_test_file": "tests/select_related_onetoone/tests.py",
  "test_patch": "diff --git a/tests/select_related_onetoone/test_deferred_fields_prefetch.py b/tests/select_related_onetoone/test_deferred_fields_prefetch.py\nnew file mode 100644\nindex 0000000..4a7a94b\n--- /dev/null\n+++ b/tests/select_related_onetoone/test_deferred_fields_prefetch.py\n@@ -0,0 +1,46 @@\n+from django.test import TestCase\n+from django.db.models import Prefetch\n+\n+from .models import User, UserProfile, UserStat, UserStatResult\n+\n+\n+class DeferredFieldsPrefetchTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test user\n+        cls.user = User.objects.create(username=\"test\")\n+        # Create profile for user\n+        cls.profile = UserProfile.objects.create(user=cls.user, state=\"CA\", city=\"San Francisco\")\n+        # Create results\n+        cls.results = UserStatResult.objects.create(results=\"test results\")\n+        # Create user stats\n+        cls.userstat = UserStat.objects.create(user=cls.user, posts=100, results=cls.results)\n+\n+    def test_deferred_fields_with_prefetch(self):\n+        \"\"\"\n+        Test that deferred fields work correctly when following prefetches back to the parent object.\n+        This reproduces the issue where accessing a deferred field on a prefetched parent object\n+        causes an unexpected database query.\n+        \"\"\"\n+        # Create a queryset that defers the 'posts' field on the outer UserStat query\n+        # and the 'results' field on the inner UserStat query through the prefetch\n+        queryset = UserStat.objects.only('user').prefetch_related(\n+            Prefetch(\n+                'user',\n+                queryset=User.objects.prefetch_related(\n+                    Prefetch(\n+                        'userstat',\n+                        queryset=UserStat.objects.only('results')\n+                    )\n+                )\n+            )\n+        )\n+\n+        # First query should execute the main queries\n+        with self.assertNumQueries(3):\n+            userstat = queryset.first()\n+\n+        # This should not cause any additional queries since 'results' was included\n+        # in the prefetch, but due to the bug it will cause an extra query\n+        with self.assertNumQueries(1):  # This assertion passes due to the bug\n+            self.assertEqual(userstat.user.userstat.posts, 100)\n",
  "inverted_patch": "diff --git a/tests/select_related_onetoone/test_deferred_fields_prefetch_inverted.py b/tests/select_related_onetoone/test_deferred_fields_prefetch_inverted.py\nnew file mode 100644\nindex 0000000..72a159c\n--- /dev/null\n+++ b/tests/select_related_onetoone/test_deferred_fields_prefetch_inverted.py\n@@ -0,0 +1,48 @@\n+from django.test import TestCase\n+from django.db.models import Prefetch\n+\n+from .models import User, UserProfile, UserStat, UserStatResult\n+\n+\n+class DeferredFieldsPrefetchTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test user\n+        cls.user = User.objects.create(username=\"test\")\n+        # Create profile for user\n+        cls.profile = UserProfile.objects.create(user=cls.user, state=\"CA\", city=\"San Francisco\")\n+        # Create results\n+        cls.results = UserStatResult.objects.create(results=\"test results\")\n+        # Create user stats\n+        cls.userstat = UserStat.objects.create(user=cls.user, posts=100, results=cls.results)\n+\n+    def test_deferred_fields_with_prefetch(self):\n+        \"\"\"\n+        Test that deferred fields work correctly when following prefetches back to the parent object.\n+        This test should FAIL when the bug is present (when an unexpected database query occurs).\n+        \"\"\"\n+        # Create a queryset that defers the 'posts' field on the outer UserStat query\n+        # and the 'results' field on the inner UserStat query through the prefetch\n+        queryset = UserStat.objects.only('user').prefetch_related(\n+            Prefetch(\n+                'user',\n+                queryset=User.objects.prefetch_related(\n+                    Prefetch(\n+                        'userstat',\n+                        queryset=UserStat.objects.only('results')\n+                    )\n+                )\n+            )\n+        )\n+\n+        # First query should execute the main queries\n+        with self.assertNumQueries(3):\n+            userstat = queryset.first()\n+\n+        # This should not cause any additional queries since 'posts' was included\n+        # in the prefetch. If an extra query occurs, the test should fail.\n+        try:\n+            with self.assertNumQueries(0):\n+                _ = userstat.user.userstat.posts\n+        except AssertionError:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}