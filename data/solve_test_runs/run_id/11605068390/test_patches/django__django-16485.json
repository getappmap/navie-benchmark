{
  "edit_test_file": "tests/template_tests/filter_tests/test_floatformat.py",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_decimal.py b/tests/template_tests/filter_tests/test_floatformat_decimal.py\nnew file mode 100644\nindex 0000000..9238981\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_decimal.py\n@@ -0,0 +1,14 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+\n+class FloatformatDecimalTests(SimpleTestCase):\n+    def test_floatformat_with_zero_decimal(self):\n+        with self.assertRaises(ValueError) as cm:\n+            floatformat('0.00', 0)\n+        self.assertEqual(str(cm.exception), \"valid range for prec is [1, MAX_PREC]\")\n+\n+        with self.assertRaises(ValueError) as cm:\n+            floatformat(Decimal('0.00'), 0)\n+        self.assertEqual(str(cm.exception), \"valid range for prec is [1, MAX_PREC]\")\n",
  "inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_decimal_inverted.py b/tests/template_tests/filter_tests/test_floatformat_decimal_inverted.py\nnew file mode 100644\nindex 0000000..fc4207e\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_decimal_inverted.py\n@@ -0,0 +1,13 @@\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.test import SimpleTestCase\n+\n+class FloatformatDecimalTests(SimpleTestCase):\n+    def test_floatformat_with_zero_decimal(self):\n+        # The test should now fail when the issue is observed.\n+        # We expect the function to work without raising an exception.\n+        try:\n+            floatformat('0.00', 0)\n+            floatformat(Decimal('0.00'), 0)\n+        except ValueError as e:\n+            self.fail(f\"__BUG__HERE__: {str(e)}\")\n"
}