{
  "edit_test_file": "tests/admin_views/tests.py",
  "test_patch": "diff --git a/tests/admin_views/test_changelist_transactions.py b/tests/admin_views/test_changelist_transactions.py\nnew file mode 100644\nindex 0000000..b08349c\n--- /dev/null\n+++ b/tests/admin_views/test_changelist_transactions.py\n@@ -0,0 +1,75 @@\n+from django.contrib.auth.models import User\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+\n+from .models import Person\n+\n+\n+@override_settings(ROOT_URLCONF=\"admin_views.urls\")\n+class ChangeListTransactionTest(TestCase):\n+    \"\"\"Tests for transaction handling during changelist editing.\"\"\"\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username=\"super\", password=\"secret\", email=\"super@example.com\"\n+        )\n+        # Create some initial people\n+        Person.objects.create(name=\"p1\", gender=1, alive=True)\n+        Person.objects.create(name=\"p2\", gender=1, alive=True)\n+        Person.objects.create(name=\"p3\", gender=1, alive=True)\n+\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_transaction_rollback_on_error(self):\n+        \"\"\"\n+        When an error occurs during list_editable save, all changes should be rolled back.\n+        \"\"\"\n+        # Initial state\n+        self.assertEqual(Person.objects.filter(alive=True).count(), 3)\n+        self.assertEqual(Person.objects.filter(alive=False).count(), 0)\n+\n+        # Try to update multiple records where one will fail validation\n+        # The formset validation will fail because of the custom clean() method\n+        # in BasePersonModelFormSet that raises ValidationError if a person named\n+        # \"Grace Hopper\" is marked as alive\n+        data = {\n+            \"form-TOTAL_FORMS\": \"3\",\n+            \"form-INITIAL_FORMS\": \"3\",\n+            \"form-MAX_NUM_FORMS\": \"0\",\n+            \n+            \"form-0-id\": \"1\",\n+            \"form-0-name\": \"Grace Hopper\",  # This name will trigger validation error\n+            \"form-0-gender\": \"1\",\n+            \"form-0-alive\": \"1\",  # Try to mark as alive which will fail validation\n+            \n+            \"form-1-id\": \"2\", \n+            \"form-1-name\": \"p2\",\n+            \"form-1-gender\": \"1\",\n+            \"form-1-alive\": \"0\",  # Try to mark as not alive\n+            \n+            \"form-2-id\": \"3\",\n+            \"form-2-name\": \"p3\", \n+            \"form-2-gender\": \"1\",\n+            \"form-2-alive\": \"0\",  # Try to mark as not alive\n+        }\n+\n+        # Post the changes\n+        response = self.client.post(\n+            reverse(\"admin:admin_views_person_changelist\"), \n+            data\n+        )\n+\n+        # Due to lack of transaction handling, some changes may persist\n+        # despite the validation error\n+        self.assertEqual(\n+            Person.objects.filter(alive=True).count(), \n+            3,\n+            \"All records should still be alive since the transaction should have been rolled back\"\n+        )\n+        self.assertEqual(\n+            Person.objects.filter(alive=False).count(),\n+            0,\n+            \"No records should be changed to not alive due to transaction rollback\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": null
}