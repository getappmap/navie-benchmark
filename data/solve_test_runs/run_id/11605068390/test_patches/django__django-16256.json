{
  "edit_test_file": "tests/get_or_create/tests.py",
  "test_patch": "diff --git a/tests/get_or_create/test_related_manager_async_methods.py b/tests/get_or_create/test_related_manager_async_methods.py\nnew file mode 100644\nindex 0000000..e7119aa\n--- /dev/null\n+++ b/tests/get_or_create/test_related_manager_async_methods.py\n@@ -0,0 +1,40 @@\n+import asyncio\n+\n+from django.test import TestCase\n+\n+from .models import Book, Publisher\n+\n+\n+class RelatedManagerAsyncMethodsTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.publisher = Publisher.objects.create(name=\"Test Publisher\")\n+\n+    async def test_acreate_uses_wrong_implementation(self):\n+        \"\"\"\n+        Test that acreate() on a related manager incorrectly uses the QuerySet\n+        implementation instead of the related manager implementation, causing\n+        an IntegrityError due to missing foreign key.\n+        \"\"\"\n+        # This should work like books.create() which sets the publisher_id automatically,\n+        # but instead it uses QuerySet.acreate() which doesn't set the foreign key,\n+        # resulting in an IntegrityError\n+        with self.assertRaises(IntegrityError):\n+            await self.publisher.books.acreate(name=\"Test Book\")\n+\n+    async def test_aget_or_create_uses_wrong_implementation(self):\n+        \"\"\"\n+        Test that aget_or_create() on a related manager incorrectly uses the QuerySet\n+        implementation instead of the related manager implementation.\n+        \"\"\"\n+        with self.assertRaises(IntegrityError):\n+            await self.publisher.books.aget_or_create(name=\"Test Book\")\n+\n+    async def test_aupdate_or_create_uses_wrong_implementation(self):\n+        \"\"\"\n+        Test that aupdate_or_create() on a related manager incorrectly uses the QuerySet\n+        implementation instead of the related manager implementation.\n+        \"\"\"\n+        with self.assertRaises(IntegrityError):\n+            await self.publisher.books.aupdate_or_create(name=\"Test Book\")\n+from django.db import IntegrityError\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/get_or_create/test_related_manager_async_methods_inverted.py b/tests/get_or_create/test_related_manager_async_methods_inverted.py\nnew file mode 100644\nindex 0000000..64a129f\n--- /dev/null\n+++ b/tests/get_or_create/test_related_manager_async_methods_inverted.py\n@@ -0,0 +1,51 @@\n+import asyncio\n+from django.test import TestCase\n+from django.db import IntegrityError\n+from .models import Book, Publisher\n+\n+class RelatedManagerAsyncMethodsTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.publisher = Publisher.objects.create(name=\"Test Publisher\")\n+\n+    async def test_acreate_uses_wrong_implementation(self):\n+        \"\"\"\n+        Test that acreate() on a related manager should set the publisher_id automatically.\n+        The test should fail if it uses the wrong implementation (QuerySet.acreate).\n+        \"\"\"\n+        try:\n+            book = await self.publisher.books.acreate(name=\"Test Book\")\n+            # If we get here, check if the publisher was actually set correctly\n+            if book.publisher_id != self.publisher.id:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        except IntegrityError:\n+            # If we get an IntegrityError, it means the wrong implementation was used\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+    async def test_aget_or_create_uses_wrong_implementation(self):\n+        \"\"\"\n+        Test that aget_or_create() on a related manager should set the publisher_id \n+        automatically. The test should fail if it uses the wrong implementation.\n+        \"\"\"\n+        try:\n+            book, created = await self.publisher.books.aget_or_create(name=\"Test Book\")\n+            # If we get here, check if the publisher was actually set correctly\n+            if book.publisher_id != self.publisher.id:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        except IntegrityError:\n+            # If we get an IntegrityError, it means the wrong implementation was used\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+    async def test_aupdate_or_create_uses_wrong_implementation(self):\n+        \"\"\"\n+        Test that aupdate_or_create() on a related manager should set the publisher_id \n+        automatically. The test should fail if it uses the wrong implementation.\n+        \"\"\"\n+        try:\n+            book, created = await self.publisher.books.aupdate_or_create(name=\"Test Book\")\n+            # If we get here, check if the publisher was actually set correctly\n+            if book.publisher_id != self.publisher.id:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        except IntegrityError:\n+            # If we get an IntegrityError, it means the wrong implementation was used\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}