{
  "edit_test_file": "lib/mpl_toolkits/tests/test_mplot3d.py",
  "test_patch": "diff --git a/lib/mpl_toolkits/tests/test_3d_subplot_visibility.py b/lib/mpl_toolkits/tests/test_3d_subplot_visibility.py\nnew file mode 100644\nindex 0000000..2039147\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_3d_subplot_visibility.py\n@@ -0,0 +1,25 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_3d_subplot_visibility():\n+    \"\"\"\n+    Test that reproduces the issue where set_visible(False) doesn't work\n+    for 3D subplots.\n+    \"\"\"\n+    # Create figure with two 3D subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n+    \n+    # Add some data to both subplots\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    \n+    # Try to hide the first subplot\n+    ax1.set_visible(False)\n+    \n+    # Force a draw to ensure visibility changes are applied\n+    fig.canvas.draw()\n+    \n+    # Assert that the subplot is still visible (reproducing the bug)\n+    # If the visibility was working correctly, this would fail\n+    assert ax1.get_visible() is False and ax1.patch.get_visible() is True\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/mpl_toolkits/tests/test_3d_subplot_visibility_inverted.py b/lib/mpl_toolkits/tests/test_3d_subplot_visibility_inverted.py\nnew file mode 100644\nindex 0000000..a65a2ab\n--- /dev/null\n+++ b/lib/mpl_toolkits/tests/test_3d_subplot_visibility_inverted.py\n@@ -0,0 +1,29 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_3d_subplot_visibility():\n+    \"\"\"\n+    Test that verifies set_visible(False) functionality for 3D subplots.\n+    The test should fail when the bug is present (subplot remains visible).\n+    \"\"\"\n+    # Create figure with two 3D subplots\n+    fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\n+    \n+    # Add some data to both subplots\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    \n+    # Try to hide the first subplot\n+    ax1.set_visible(False)\n+    \n+    # Force a draw to ensure visibility changes are applied\n+    fig.canvas.draw()\n+    \n+    # Check if the subplot and its patch are both invisible\n+    # This should raise an error when the bug is present\n+    if ax1.get_visible() is False and ax1.patch.get_visible() is True:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification that both the axis and patch are invisible\n+    assert ax1.get_visible() is False and ax1.patch.get_visible() is False\n\\ No newline at end of file\n"
}