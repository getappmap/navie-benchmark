{
  "edit_test_file": "tests/fixtures/tests.py",
  "test_patch": "diff --git a/tests/fixtures/test_model_save_explicit_pk.py b/tests/fixtures/test_model_save_explicit_pk.py\nnew file mode 100644\nindex 0000000..b809270\n--- /dev/null\n+++ b/tests/fixtures/test_model_save_explicit_pk.py\n@@ -0,0 +1,28 @@\n+import uuid\n+from django.db import models\n+from django.test import TestCase\n+\n+class UUIDModel(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(max_length=100, blank=True)\n+\n+    class Meta:\n+        app_label = 'fixtures'\n+\n+class ModelSaveExplicitPKTest(TestCase):\n+    \"\"\"\n+    Test case demonstrating change in behavior when saving model instance \n+    with explicit pk value when pk field has a default.\n+    \"\"\"\n+    \n+    def test_save_with_explicit_pk(self):\n+        # First create an instance normally\n+        obj1 = UUIDModel.objects.create()\n+        \n+        # Create new instance with same pk\n+        obj2 = UUIDModel(pk=obj1.pk, name='Test 1')\n+        \n+        # In Django 2.2 and earlier, this would do INSERT + UPDATE\n+        # In Django 3.0+, this does two INSERTs (second one fails)\n+        with self.assertRaises(Exception):\n+            obj2.save()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/fixtures/test_model_save_explicit_pk_inverted.py b/tests/fixtures/test_model_save_explicit_pk_inverted.py\nnew file mode 100644\nindex 0000000..4584f2b\n--- /dev/null\n+++ b/tests/fixtures/test_model_save_explicit_pk_inverted.py\n@@ -0,0 +1,38 @@\n+import uuid\n+from django.db import models\n+from django.test import TestCase\n+\n+class UUIDModel(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(max_length=100, blank=True)\n+\n+    class Meta:\n+        app_label = 'fixtures'\n+\n+class ModelSaveExplicitPKTest(TestCase):\n+    \"\"\"\n+    Test case demonstrating change in behavior when saving model instance \n+    with explicit pk value when pk field has a default.\n+    \"\"\"\n+    \n+    def test_save_with_explicit_pk(self):\n+        # First create an instance normally\n+        obj1 = UUIDModel.objects.create()\n+        \n+        # Create new instance with same pk\n+        obj2 = UUIDModel(pk=obj1.pk, name='Test 1')\n+        \n+        try:\n+            obj2.save()\n+            # If we get here, it means the save operation succeeded\n+            # (old behavior - INSERT + UPDATE)\n+            \n+            # Verify the object exists and has the correct name\n+            updated_obj = UUIDModel.objects.get(pk=obj1.pk)\n+            if updated_obj.name != 'Test 1':\n+                raise AssertionError(\"__BUG__HERE__\")\n+                \n+        except Exception as e:\n+            # If we get an exception (new behavior - two INSERTs),\n+            # this indicates the bug is present\n+            raise AssertionError(\"__BUG__HERE__\") from e\n\\ No newline at end of file\n"
}