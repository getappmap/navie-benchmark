{
  "edit_test_file": "tests/queries/test_qs_combinators.py",
  "test_patch": "diff --git a/tests/queries/test_composed_query_columns.py b/tests/queries/test_composed_query_columns.py\nnew file mode 100644\nindex 0000000..ec20264\n--- /dev/null\n+++ b/tests/queries/test_composed_query_columns.py\n@@ -0,0 +1,16 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class ComposedQueryColumnsTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        ReservedName.objects.create(name='a', order=2)\n+\n+    def test_composed_query_values_list_columns(self):\n+        qs1 = ReservedName.objects.all()\n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        # Second evaluation with only 'order', expecting the same result due to the issue\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, ('a', 2))\n",
  "inverted_patch": "diff --git a/tests/queries/test_composed_query_columns_inverted.py b/tests/queries/test_composed_query_columns_inverted.py\nnew file mode 100644\nindex 0000000..48fa203\n--- /dev/null\n+++ b/tests/queries/test_composed_query_columns_inverted.py\n@@ -0,0 +1,17 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class ComposedQueryColumnsTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        ReservedName.objects.create(name='a', order=2)\n+\n+    def test_composed_query_values_list_columns(self):\n+        qs1 = ReservedName.objects.all()\n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        # Second evaluation with only 'order', expecting a different result\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        # The test should fail here if the bug is present\n+        self.assertEqual(result2, (2,), \"__BUG__HERE__\")\n"
}