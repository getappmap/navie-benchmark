{
  "edit_test_file": "xarray/tests/test_groupby.py",
  "test_patch": "diff --git a/xarray/tests/test_swap_dims.py b/xarray/tests/test_swap_dims.py\nnew file mode 100644\nindex 0000000..91213b3\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims.py\n@@ -0,0 +1,32 @@\n+# xarray/tests/test_swap_dims.py\n+\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestSwapDims(unittest.TestCase):\n+    def test_swap_dims_modifies_original(self):\n+        nz = 11\n+        ds = xr.Dataset(\n+            data_vars={\n+                \"y\": (\"z\", np.random.rand(nz)),\n+                \"lev\": (\"z\", np.arange(nz) * 10),\n+            },\n+        )\n+\n+        # Perform swap_dims and other operations\n+        ds2 = (\n+            ds.swap_dims(z=\"lev\")\n+            .rename_dims(lev=\"z\")\n+            .reset_index(\"lev\")\n+            .reset_coords()\n+        )\n+\n+        # Swap dims again and check if it modifies the original\n+        ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+        # Check if the original ds2 is modified\n+        self.assertEqual(ds2[\"lev\"].dims, (\"lev\",), \"Original object was modified\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/xarray/tests/test_swap_dims_inverted.py b/xarray/tests/test_swap_dims_inverted.py\nnew file mode 100644\nindex 0000000..5c49f78\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims_inverted.py\n@@ -0,0 +1,34 @@\n+# xarray/tests/test_swap_dims.py\n+\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestSwapDims(unittest.TestCase):\n+    def test_swap_dims_modifies_original(self):\n+        nz = 11\n+        ds = xr.Dataset(\n+            data_vars={\n+                \"y\": (\"z\", np.random.rand(nz)),\n+                \"lev\": (\"z\", np.arange(nz) * 10),\n+            },\n+        )\n+\n+        # Perform swap_dims and other operations\n+        ds2 = (\n+            ds.swap_dims(z=\"lev\")\n+            .rename_dims(lev=\"z\")\n+            .reset_index(\"lev\")\n+            .reset_coords()\n+        )\n+\n+        # Swap dims again and check if it modifies the original\n+        ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+        # Check if the original ds2 is modified\n+        # This should now fail if the original object is modified\n+        if ds2[\"lev\"].dims == (\"lev\",):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}