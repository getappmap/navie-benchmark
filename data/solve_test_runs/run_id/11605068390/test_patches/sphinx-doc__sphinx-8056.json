{
  "edit_test_file": "tests/test_ext_math.py",
  "test_patch": "diff --git a/tests/test_ext_napoleon_multiline_params.py b/tests/test_ext_napoleon_multiline_params.py\nnew file mode 100644\nindex 0000000..3acdba0\n--- /dev/null\n+++ b/tests/test_ext_napoleon_multiline_params.py\n@@ -0,0 +1,64 @@\n+\"\"\"\n+    test_ext_napoleon_multiline_params\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test napoleon extension with multiple parameters on same line.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import unittest\n+from sphinx.ext.napoleon import Config, NumpyDocstring\n+\n+\n+class TestNumpyMultilineParams(unittest.TestCase):\n+    def test_multiple_params_same_line(self):\n+        \"\"\"Test that multiple parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        # The current problematic behavior shows parameters separately\n+        expected = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+    def test_multiple_params_same_line_optional(self):\n+        \"\"\"Test that multiple optional parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        # The current problematic behavior doesn't show 'optional' modifier correctly\n+        expected = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_napoleon_multiline_params_inverted.py b/tests/test_ext_napoleon_multiline_params_inverted.py\nnew file mode 100644\nindex 0000000..82877b2\n--- /dev/null\n+++ b/tests/test_ext_napoleon_multiline_params_inverted.py\n@@ -0,0 +1,61 @@\n+\"\"\"\n+    test_ext_napoleon_multiline_params\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test napoleon extension with multiple parameters on same line.\n+\n+    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import unittest\n+from sphinx.ext.napoleon import Config, NumpyDocstring\n+\n+\n+class TestNumpyMultilineParams(unittest.TestCase):\n+    def test_multiple_params_same_line(self):\n+        \"\"\"Test that multiple parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\n+        Test function with multiple parameters on same line.\n+\n+        :param array_like x1: Input arrays, description of `x1`, `x2`.\n+        :param array_like x2: Input arrays, description of `x1`, `x2`.\"\"\"\n+        \n+        if actual.strip() != expected.strip():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+    def test_multiple_params_same_line_optional(self):\n+        \"\"\"Test that multiple optional parameters on same line are rendered correctly.\"\"\"\n+        docstring = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\n+        Test function with multiple optional parameters on same line.\n+\n+        :param array_like x1: Input arrays, description of `x1`, `x2`.\n+        :param array_like x2: Input arrays, description of `x1`, `x2`.\n+        :param optional: x1, x2\"\"\"\n+        \n+        if actual.strip() != expected.strip():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}