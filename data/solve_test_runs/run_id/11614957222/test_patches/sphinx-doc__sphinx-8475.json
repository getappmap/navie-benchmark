{
  "edit_test_file": "tests/test_build_linkcheck.py",
  "test_patch": "diff --git a/tests/test_linkchecker_redirects.py b/tests/test_linkchecker_redirects.py\nnew file mode 100644\nindex 0000000..4b82e53\n--- /dev/null\n+++ b/tests/test_linkchecker_redirects.py\n@@ -0,0 +1,51 @@\n+\"\"\"\n+    test_linkchecker_redirects\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the linkchecker behavior with redirects.\n+\"\"\"\n+\n+import http.server\n+import json\n+import pytest\n+\n+from .utils import http_server\n+\n+\n+def make_redirect_loop_handler():\n+    \"\"\"Create a handler that creates an infinite redirect loop for HEAD requests.\"\"\"\n+    class RedirectLoopHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            # Always redirect between / and /?redirect=1\n+            if '?redirect=1' in self.path:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/')\n+            else:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/?redirect=1')\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            # GET requests would work, but we never get here because HEAD fails first\n+            self.send_response(200)\n+            self.end_headers()\n+            self.wfile.write(b'ok')\n+\n+    return RedirectLoopHandler\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_too_many_redirects_on_head(app):\n+    with http_server(make_redirect_loop_handler()):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+\n+    # The issue causes the link to be marked as broken due to too many redirects\n+    # when using HEAD requests, even though GET would work\n+    assert content[\"status\"] == \"broken\"\n+    assert content[\"filename\"] == \"index.rst\"\n+    assert content[\"lineno\"] == 1\n+    assert content[\"uri\"] == \"http://localhost:7777/\"\n+    assert \"Exceeded 30 redirects\" in content[\"info\"]\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_linkchecker_redirects_inverted.py b/tests/test_linkchecker_redirects_inverted.py\nnew file mode 100644\nindex 0000000..ed1be29\n--- /dev/null\n+++ b/tests/test_linkchecker_redirects_inverted.py\n@@ -0,0 +1,54 @@\n+\"\"\"\n+    test_linkchecker_redirects\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the linkchecker behavior with redirects.\n+\"\"\"\n+\n+import http.server\n+import json\n+import pytest\n+\n+from .utils import http_server\n+\n+\n+def make_redirect_loop_handler():\n+    \"\"\"Create a handler that creates an infinite redirect loop for HEAD requests.\"\"\"\n+    class RedirectLoopHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            # Always redirect between / and /?redirect=1\n+            if '?redirect=1' in self.path:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/')\n+            else:\n+                self.send_response(302)\n+                self.send_header('Location', 'http://localhost:7777/?redirect=1')\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            # GET requests should work\n+            self.send_response(200)\n+            self.end_headers()\n+            self.wfile.write(b'ok')\n+\n+    return RedirectLoopHandler\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_too_many_redirects_on_head(app):\n+    with http_server(make_redirect_loop_handler()):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+\n+    # The link should NOT be marked as broken since GET requests work\n+    # If it is marked as broken, that means the GET fallback isn't working\n+    if content[\"status\"] == \"broken\":\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    # Verify the link is working\n+    assert content[\"status\"] == \"working\"\n+    assert content[\"filename\"] == \"index.rst\"\n+    assert content[\"lineno\"] == 1\n+    assert content[\"uri\"] == \"http://localhost:7777/\"\n\\ No newline at end of file\n"
}