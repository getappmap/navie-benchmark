{
  "edit_test_file": "xarray/tests/test_computation.py",
  "test_patch": "diff --git a/xarray/tests/test_where.py b/xarray/tests/test_where.py\nnew file mode 100644\nindex 0000000..7d28a80\n--- /dev/null\n+++ b/xarray/tests/test_where.py\n@@ -0,0 +1,14 @@\n+# File: xarray/tests/test_where.py\n+\n+import unittest\n+import xarray as xr\n+\n+class TestWhereWithScalar(unittest.TestCase):\n+    def test_where_with_scalar_and_keep_attrs_true(self):\n+        with self.assertRaises(IndexError) as context:\n+            xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n+        \n+        self.assertIn(\"list index out of range\", str(context.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n",
  "inverted_patch": "diff --git a/xarray/tests/test_where_inverted.py b/xarray/tests/test_where_inverted.py\nnew file mode 100644\nindex 0000000..777433e\n--- /dev/null\n+++ b/xarray/tests/test_where_inverted.py\n@@ -0,0 +1,16 @@\n+# File: xarray/tests/test_where.py\n+\n+import unittest\n+import xarray as xr\n+\n+class TestWhereWithScalar(unittest.TestCase):\n+    def test_where_with_scalar_and_keep_attrs_true(self):\n+        # The test should now fail when the bug is observed\n+        try:\n+            xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n+        except IndexError as e:\n+            # Raise the specific error message when the bug is observed\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n"
}