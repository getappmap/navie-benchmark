{
  "edit_test_file": "tests/check_framework/test_model_checks.py",
  "test_patch": "diff --git a/tests/check_framework/test_inherited_primary_key.py b/tests/check_framework/test_inherited_primary_key.py\nnew file mode 100644\nindex 0000000..56ab0a6\n--- /dev/null\n+++ b/tests/check_framework/test_inherited_primary_key.py\n@@ -0,0 +1,51 @@\n+from unittest import mock\n+\n+from django.core import checks\n+from django.core.checks import Warning\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps, override_settings, override_system_checks\n+\n+\n+def mocked_is_overridden(self, setting):\n+    # Force treating DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' as a not\n+    # overridden setting.\n+    return (\n+        setting != 'DEFAULT_AUTO_FIELD' or\n+        self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n+    )\n+\n+\n+@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+@override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n+@isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n+@override_system_checks([checks.model_checks.check_all_models])\n+class InheritedPrimaryKeyTests(SimpleTestCase):\n+    def test_warning_on_inherited_primary_key(self):\n+        \"\"\"\n+        Test that models.W042 is incorrectly raised on a model that inherits\n+        its primary key from a parent model.\n+        \"\"\"\n+        class ParentModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class ChildModel(ParentModel):\n+            pass\n+\n+        # The test passes when the warning is incorrectly raised, since we're\n+        # reproducing the issue where Django raises W042 even though the model\n+        # inherits its primary key\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=ChildModel,\n+                id='models.W042',\n+            ),\n+        ])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/check_framework/test_inherited_primary_key_inverted.py b/tests/check_framework/test_inherited_primary_key_inverted.py\nnew file mode 100644\nindex 0000000..1d81d4c\n--- /dev/null\n+++ b/tests/check_framework/test_inherited_primary_key_inverted.py\n@@ -0,0 +1,39 @@\n+from unittest import mock\n+\n+from django.core import checks\n+from django.core.checks import Warning\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps, override_settings, override_system_checks\n+\n+\n+def mocked_is_overridden(self, setting):\n+    # Force treating DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' as a not\n+    # overridden setting.\n+    return (\n+        setting != 'DEFAULT_AUTO_FIELD' or\n+        self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n+    )\n+\n+\n+@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+@override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n+@isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n+@override_system_checks([checks.model_checks.check_all_models])\n+class InheritedPrimaryKeyTests(SimpleTestCase):\n+    def test_warning_on_inherited_primary_key(self):\n+        \"\"\"\n+        Test that models.W042 should not be raised on a model that inherits\n+        its primary key from a parent model.\n+        \"\"\"\n+        class ParentModel(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class ChildModel(ParentModel):\n+            pass\n+\n+        warnings = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        \n+        # The test should fail if W042 is incorrectly raised for the inherited PK\n+        if any(warning.id == 'models.W042' and warning.obj == ChildModel for warning in warnings):\n+            raise AssertionError(\"__BUG__HERE__: Warning W042 should not be raised for models with inherited primary keys\")\n\\ No newline at end of file\n"
}