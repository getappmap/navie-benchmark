{
  "edit_test_file": "tests/test_build_html.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_typehints_description.py b/tests/test_ext_autodoc_typehints_description.py\nnew file mode 100644\nindex 0000000..09655d8\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description.py\n@@ -0,0 +1,35 @@\n+\"\"\"Test autodoc_typehints=description incorrectly adding return type to class docs.\"\"\"\n+\n+import pytest\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_return_type(app):\n+    \"\"\"Test that autodoc_typehints=description incorrectly adds return type for class.\"\"\"\n+    # Create test content\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+\n+    # Add test class to the target module\n+    (app.srcdir / 'target' / 'typehints.py').write_text(\n+        'class Square:\\n'\n+        '    \"\"\"A class representing a square figure.\"\"\"\\n'\n+        '\\n'\n+        '    def __init__(self, width: int, height: int) -> None:\\n'\n+        '        self.width = width\\n'\n+        '        self.height = height\\n',\n+        encoding='utf8'\n+    )\n+\n+    app.build()\n+    \n+    # Get the built text content\n+    content = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+\n+    # Assert that the class documentation incorrectly includes a return type\n+    assert 'Return type:' in content\n+    assert 'None' in content\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_typehints_description_inverted.py b/tests/test_ext_autodoc_typehints_description_inverted.py\nnew file mode 100644\nindex 0000000..df1a183\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description_inverted.py\n@@ -0,0 +1,35 @@\n+\"\"\"Test autodoc_typehints=description incorrectly adding return type to class docs.\"\"\"\n+\n+import pytest\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                   confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_class_return_type(app):\n+    \"\"\"Test that autodoc_typehints=description incorrectly adds return type for class.\"\"\"\n+    # Create test content\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+\n+    # Add test class to the target module\n+    (app.srcdir / 'target' / 'typehints.py').write_text(\n+        'class Square:\\n'\n+        '    \"\"\"A class representing a square figure.\"\"\"\\n'\n+        '\\n'\n+        '    def __init__(self, width: int, height: int) -> None:\\n'\n+        '        self.width = width\\n'\n+        '        self.height = height\\n',\n+        encoding='utf8'\n+    )\n+\n+    app.build()\n+    \n+    # Get the built text content\n+    content = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+\n+    # Assert that the class documentation should NOT include a return type\n+    if 'Return type:' in content and 'None' in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}