{
  "edit_test_file": "sympy/sets/tests/test_conditionset.py",
  "test_patch": "diff --git a/sympy/sets/tests/test_imageset_substitution.py b/sympy/sets/tests/test_imageset_substitution.py\nnew file mode 100644\nindex 0000000..ddf7987\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_substitution.py\n@@ -0,0 +1,34 @@\n+from sympy import (Symbol, S, ConditionSet, pi, asin, Lambda, \n+                  Interval, Contains, Rational, imageset)\n+from sympy.testing.pytest import raises\n+\n+\n+def test_conditionset_imageset_substitution():\n+    y = Symbol('y')\n+    x = Symbol('x')\n+    n = Symbol('n')\n+    \n+    # Create the ImageSet\n+    img = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create ConditionSet with ImageSet\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img)\n+    \n+    # Test substitution behavior\n+    # This produces unexpected output where x is mistaken for y\n+    result = cond_set.subs(y, Rational(1, 3))\n+    \n+    # The actual unexpected output that we want to verify\n+    expected = ConditionSet(\n+        Rational(1, 3),\n+        Contains(Rational(1, 3), imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)),\n+        imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    )\n+    \n+    # Assert that we get the unexpected behavior\n+    assert result == expected\n+    \n+    # Verify that xreplace and simultaneous substitution work correctly\n+    correct_result = imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    assert cond_set.xreplace({y: Rational(1, 3)}) == correct_result\n+    assert cond_set.subs({y: Rational(1, 3)}, simultaneous=True) == correct_result\n",
  "inverted_patch": "diff --git a/sympy/sets/tests/test_imageset_substitution_inverted.py b/sympy/sets/tests/test_imageset_substitution_inverted.py\nnew file mode 100644\nindex 0000000..8233341\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_substitution_inverted.py\n@@ -0,0 +1,36 @@\n+from sympy import (Symbol, S, ConditionSet, pi, asin, Lambda, \n+                  Interval, Contains, Rational, imageset)\n+from sympy.testing.pytest import raises\n+\n+\n+def test_conditionset_imageset_substitution():\n+    y = Symbol('y')\n+    x = Symbol('x')\n+    n = Symbol('n')\n+    \n+    # Create the ImageSet\n+    img = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create ConditionSet with ImageSet\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img)\n+    \n+    # Test substitution behavior\n+    result = cond_set.subs(y, Rational(1, 3))\n+    \n+    # The incorrect output that indicates the bug\n+    buggy_output = ConditionSet(\n+        Rational(1, 3),\n+        Contains(Rational(1, 3), imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)),\n+        imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    )\n+    \n+    # The correct output that we should get\n+    correct_output = imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    \n+    # If we get the buggy output, the test should fail\n+    if result == buggy_output:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # These assertions should pass as they show the correct behavior\n+    assert cond_set.xreplace({y: Rational(1, 3)}) == correct_output\n+    assert cond_set.subs({y: Rational(1, 3)}, simultaneous=True) == correct_output\n\\ No newline at end of file\n"
}