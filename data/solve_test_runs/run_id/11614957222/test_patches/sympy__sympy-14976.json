{
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify_mpmath_rationals.py b/sympy/utilities/tests/test_lambdify_mpmath_rationals.py\nnew file mode 100644\nindex 0000000..3d19845\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_mpmath_rationals.py\n@@ -0,0 +1,20 @@\n+import inspect\n+from sympy import Eq, S, rf, nsolve, Float, symbols\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source code of the generated function to ensure it contains the issue\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial(18, x) - 232/3\" in source_code, \"The function does not contain the expected issue.\"\n+\n+    # Check the precision issue with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = Float('77.33333333333332859638176159933209419250488281250000000000000000', 64)\n+    \n+    # Assert that the result is not as expected due to the precision issue\n+    assert result != expected_result, \"The result is unexpectedly correct, indicating the issue is not reproduced.\"\n",
  "inverted_patch": "diff --git a/sympy/utilities/tests/test_lambdify_mpmath_rationals_inverted.py b/sympy/utilities/tests/test_lambdify_mpmath_rationals_inverted.py\nnew file mode 100644\nindex 0000000..086011b\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_mpmath_rationals_inverted.py\n@@ -0,0 +1,20 @@\n+import inspect\n+from sympy import Eq, S, rf, nsolve, Float, symbols\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source code of the generated function to ensure it contains the issue\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial(18, x) - 232/3\" in source_code, \"__BUG__HERE__\"\n+\n+    # Check the precision issue with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = Float('77.33333333333332859638176159933209419250488281250000000000000000', 64)\n+    \n+    # Assert that the result is as expected, indicating the issue is reproduced\n+    assert result == expected_result, \"__BUG__HERE__\"\n"
}