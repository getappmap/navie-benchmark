{
  "edit_test_file": "sympy/physics/units/tests/test_quantities.py",
  "test_patch": "diff --git a/sympy/physics/units/tests/test_dimension_expression_evaluation.py b/sympy/physics/units/tests/test_dimension_expression_evaluation.py\nnew file mode 100644\nindex 0000000..8104550\n--- /dev/null\n+++ b/sympy/physics/units/tests/test_dimension_expression_evaluation.py\n@@ -0,0 +1,22 @@\n+from sympy import exp\n+from sympy.core.singleton import S\n+from sympy.physics.units import second, ohm, farad\n+from sympy.physics.units.systems.si import SI\n+from sympy.testing.pytest import raises\n+\n+\n+def test_dimensionless_exponent_evaluation():\n+    # Create an expression that should be dimensionless\n+    expr = second / (ohm * farad)\n+    \n+    # Verify that the expression's dimension is indeed dimensionless\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    \n+    # Create an expression that should be valid (constant + exp of dimensionless)\n+    buggy_expr = S(100) + exp(expr)\n+    \n+    # The current behavior raises a ValueError with the message:\n+    # \"Dimension of \"exp(second/(farad*ohm))\" is Dimension(time/(capacitance*impedance)), \n+    # but it should be Dimension(1)\"\n+    raises(ValueError, lambda: SI._collect_factor_and_dimension(buggy_expr))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/physics/units/tests/test_dimension_expression_evaluation_inverted.py b/sympy/physics/units/tests/test_dimension_expression_evaluation_inverted.py\nnew file mode 100644\nindex 0000000..b41c765\n--- /dev/null\n+++ b/sympy/physics/units/tests/test_dimension_expression_evaluation_inverted.py\n@@ -0,0 +1,28 @@\n+from sympy import exp\n+from sympy.core.singleton import S\n+from sympy.physics.units import second, ohm, farad\n+from sympy.physics.units.systems.si import SI\n+\n+\n+def test_dimensionless_exponent_evaluation():\n+    # Create an expression that should be dimensionless\n+    expr = second / (ohm * farad)\n+    \n+    # Verify that the expression's dimension is indeed dimensionless\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    \n+    # Create an expression that should be valid (constant + exp of dimensionless)\n+    buggy_expr = S(100) + exp(expr)\n+    \n+    try:\n+        result = SI._collect_factor_and_dimension(buggy_expr)\n+        # If we get here, the bug is not present (the function handled the dimensionless exp correctly)\n+        # We should check that the dimension is actually 1 (dimensionless)\n+        dimension = result[1]\n+        if not SI.get_dimension_system().is_dimensionless(dimension):\n+            raise AssertionError(\"__BUG__HERE__\")\n+    except ValueError as e:\n+        # The bug is present - the function incorrectly raises ValueError\n+        # Instead of letting this pass, we should fail the test\n+        raise AssertionError(\"__BUG__HERE__\") from e\n\\ No newline at end of file\n"
}