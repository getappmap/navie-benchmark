{
  "edit_test_file": "tests/one_to_one/tests.py",
  "test_patch": "diff --git a/tests/one_to_one/test_nullable_onetoone_migration.py b/tests/one_to_one/test_nullable_onetoone_migration.py\nnew file mode 100644\nindex 0000000..98fc1f1\n--- /dev/null\n+++ b/tests/one_to_one/test_nullable_onetoone_migration.py\n@@ -0,0 +1,29 @@\n+from django.db import connection, models, OperationalError\n+from django.test import TestCase\n+from django.test.utils import CaptureQueriesContext\n+\n+\n+class NullableOneToOneMigrationTests(TestCase):\n+    \"\"\"Test adding nullable OneToOneField via migration on SQLite.\"\"\"\n+\n+    def test_add_nullable_onetoone_field(self):\n+        \"\"\"\n+        Adding a nullable OneToOneField to an existing model via ALTER TABLE\n+        should raise OperationalError on SQLite due to UNIQUE constraint.\n+        \"\"\"\n+        # Only run on SQLite\n+        if connection.vendor != 'sqlite':\n+            self.skipTest('This test only applies to SQLite.')\n+\n+        # Create the ALTER TABLE query that would be generated in a migration\n+        alter_table_query = (\n+            'ALTER TABLE \"one_to_one_place\" '\n+            'ADD COLUMN \"restaurant_id\" integer NULL UNIQUE '\n+            'REFERENCES \"one_to_one_restaurant\" (\"id\") '\n+            'DEFERRABLE INITIALLY DEFERRED'\n+        )\n+\n+        # Execute the query and verify it raises the expected error\n+        with connection.cursor() as cursor:\n+            with self.assertRaisesMessage(OperationalError, 'Cannot add a UNIQUE column'):\n+                cursor.execute(alter_table_query)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/one_to_one/test_nullable_onetoone_migration_inverted.py b/tests/one_to_one/test_nullable_onetoone_migration_inverted.py\nnew file mode 100644\nindex 0000000..18195c7\n--- /dev/null\n+++ b/tests/one_to_one/test_nullable_onetoone_migration_inverted.py\n@@ -0,0 +1,32 @@\n+from django.db import connection, models, OperationalError\n+from django.test import TestCase\n+from django.test.utils import CaptureQueriesContext\n+\n+\n+class NullableOneToOneMigrationTests(TestCase):\n+    \"\"\"Test adding nullable OneToOneField via migration on SQLite.\"\"\"\n+\n+    def test_add_nullable_onetoone_field(self):\n+        \"\"\"\n+        Adding a nullable OneToOneField to an existing model via ALTER TABLE\n+        should not raise OperationalError on SQLite due to UNIQUE constraint.\n+        If it does raise the error, this indicates a bug.\n+        \"\"\"\n+        # Create the ALTER TABLE query that would be generated in a migration\n+        alter_table_query = (\n+            'ALTER TABLE \"one_to_one_place\" '\n+            'ADD COLUMN \"restaurant_id\" integer NULL UNIQUE '\n+            'REFERENCES \"one_to_one_restaurant\" (\"id\") '\n+            'DEFERRABLE INITIALLY DEFERRED'\n+        )\n+\n+        # Execute the query - it should succeed\n+        # If OperationalError is raised with \"Cannot add a UNIQUE column\",\n+        # this indicates the presence of the bug\n+        try:\n+            with connection.cursor() as cursor:\n+                cursor.execute(alter_table_query)\n+        except OperationalError as e:\n+            if \"Cannot add a UNIQUE column\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different error\n\\ No newline at end of file\n"
}