{
  "edit_test_file": "tests/decorators/tests.py",
  "test_patch": "diff --git a/tests/decorators/namedtuple_range_error_test.py b/tests/decorators/namedtuple_range_error_test.py\nnew file mode 100644\nindex 0000000..8f82561\n--- /dev/null\n+++ b/tests/decorators/namedtuple_range_error_test.py\n@@ -0,0 +1,22 @@\n+from collections import namedtuple\n+from django.test import TestCase\n+from django.db import models\n+\n+# Define a named tuple with two fields\n+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+\n+class DummyModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeErrorTest(TestCase):\n+    def test_namedtuple_as_range_argument(self):\n+        \"\"\"\n+        Test that using a named tuple as an argument to a range filter\n+        raises a TypeError due to missing arguments.\n+        \"\"\"\n+        # Create a named tuple instance\n+        range_tuple = RangeTuple(near=1, far=10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaisesMessage(TypeError, \"__new__() missing 1 required positional argument: 'far'\"):\n+            DummyModel.objects.filter(value__range=range_tuple)\n",
  "inverted_patch": "diff --git a/tests/decorators/namedtuple_range_error_test_inverted.py b/tests/decorators/namedtuple_range_error_test_inverted.py\nnew file mode 100644\nindex 0000000..6643ef8\n--- /dev/null\n+++ b/tests/decorators/namedtuple_range_error_test_inverted.py\n@@ -0,0 +1,22 @@\n+from collections import namedtuple\n+from django.test import TestCase\n+from django.db import models\n+\n+# Define a named tuple with two fields\n+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+\n+class DummyModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeErrorTest(TestCase):\n+    def test_namedtuple_as_range_argument(self):\n+        \"\"\"\n+        Test that using a named tuple as an argument to a range filter\n+        raises a TypeError due to missing arguments.\n+        \"\"\"\n+        # Create a named tuple instance\n+        range_tuple = RangeTuple(near=1, far=10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaisesMessage(TypeError, \"__BUG__HERE__\"):\n+            DummyModel.objects.filter(value__range=range_tuple)\n"
}