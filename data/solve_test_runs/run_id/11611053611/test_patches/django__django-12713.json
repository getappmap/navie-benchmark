{
  "edit_test_file": "tests/model_forms/tests.py",
  "test_patch": "diff --git a/tests/model_forms/test_formfield_manytomany_widget.py b/tests/model_forms/test_formfield_manytomany_widget.py\nnew file mode 100644\nindex 0000000..e249c30\n--- /dev/null\n+++ b/tests/model_forms/test_formfield_manytomany_widget.py\n@@ -0,0 +1,26 @@\n+from django import forms\n+from django.test import TestCase\n+from django.forms.widgets import Select, SelectMultiple\n+\n+from .models import Article, Category\n+\n+class CustomModelForm(forms.ModelForm):\n+    def formfield_for_manytomany(self, db_field, **kwargs):\n+        # Try to override the widget\n+        kwargs['widget'] = Select()\n+        return super().formfield_for_manytomany(db_field, **kwargs)\n+\n+    class Meta:\n+        model = Article\n+        fields = ['categories']\n+\n+class FormFieldManyToManyWidgetTests(TestCase):\n+    def test_widget_override_in_formfield_for_manytomany(self):\n+        \"\"\"\n+        The widget parameter in formfield_for_manytomany() should be respected,\n+        similar to how formfield_for_foreignkey() works.\n+        \"\"\"\n+        form = CustomModelForm()\n+        # The test passes if the widget is still SelectMultiple, showing the issue\n+        # where the widget override in formfield_for_manytomany() is not working\n+        self.assertIsInstance(form.fields['categories'].widget, SelectMultiple)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_forms/test_formfield_manytomany_widget_inverted.py b/tests/model_forms/test_formfield_manytomany_widget_inverted.py\nnew file mode 100644\nindex 0000000..e66dd03\n--- /dev/null\n+++ b/tests/model_forms/test_formfield_manytomany_widget_inverted.py\n@@ -0,0 +1,28 @@\n+from django import forms\n+from django.test import TestCase\n+from django.forms.widgets import Select, SelectMultiple\n+\n+from .models import Article, Category\n+\n+class CustomModelForm(forms.ModelForm):\n+    def formfield_for_manytomany(self, db_field, **kwargs):\n+        # Try to override the widget\n+        kwargs['widget'] = Select()\n+        return super().formfield_for_manytomany(db_field, **kwargs)\n+\n+    class Meta:\n+        model = Article\n+        fields = ['categories']\n+\n+class FormFieldManyToManyWidgetTests(TestCase):\n+    def test_widget_override_in_formfield_for_manytomany(self):\n+        \"\"\"\n+        The widget parameter in formfield_for_manytomany() should be respected,\n+        similar to how formfield_for_foreignkey() works.\n+        \"\"\"\n+        form = CustomModelForm()\n+        # The test should fail if the widget is still SelectMultiple, indicating\n+        # that the widget override in formfield_for_manytomany() is not working\n+        if isinstance(form.fields['categories'].widget, SelectMultiple):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertIsInstance(form.fields['categories'].widget, Select)\n\\ No newline at end of file\n"
}