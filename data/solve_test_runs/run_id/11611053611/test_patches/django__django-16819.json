{
  "edit_test_file": "tests/migrations/test_operations.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_reduce_index_operations.py b/tests/migrations/test_migrations_reduce_index_operations.py\nnew file mode 100644\nindex 0000000..9e3ac76\n--- /dev/null\n+++ b/tests/migrations/test_migrations_reduce_index_operations.py\n@@ -0,0 +1,46 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+\n+class TestReduceIndexOperations(SimpleTestCase):\n+    def test_reduce_add_remove_index_operations(self):\n+        \"\"\"\n+        Test that AddIndex and RemoveIndex operations are not reduced.\n+        \"\"\"\n+        # Initial state with a model\n+        initial_state = migrations.state.ProjectState()\n+        initial_state.add_model(\n+            migrations.state.ModelState(\n+                app_label=\"test_app\",\n+                name=\"TestModel\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"field\", models.CharField(max_length=100)),\n+                ],\n+            )\n+        )\n+\n+        # AddIndex operation\n+        add_index_operation = migrations.AddIndex(\n+            model_name=\"TestModel\",\n+            index=models.Index(fields=[\"field\"], name=\"test_index\"),\n+        )\n+\n+        # RemoveIndex operation\n+        remove_index_operation = migrations.RemoveIndex(\n+            model_name=\"TestModel\",\n+            name=\"test_index\",\n+        )\n+\n+        # Apply AddIndex operation\n+        new_state = initial_state.clone()\n+        add_index_operation.state_forwards(\"test_app\", new_state)\n+\n+        # Apply RemoveIndex operation\n+        final_state = new_state.clone()\n+        remove_index_operation.state_forwards(\"test_app\", final_state)\n+\n+        # Check that the index is not present in the final state\n+        self.assertNotIn(\n+            models.Index(fields=[\"field\"], name=\"test_index\"),\n+            final_state.models[\"test_app\", \"testmodel\"].options[\"indexes\"],\n+        )\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_reduce_index_operations_inverted.py b/tests/migrations/test_migrations_reduce_index_operations_inverted.py\nnew file mode 100644\nindex 0000000..a040b9b\n--- /dev/null\n+++ b/tests/migrations/test_migrations_reduce_index_operations_inverted.py\n@@ -0,0 +1,45 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+\n+class TestReduceIndexOperations(SimpleTestCase):\n+    def test_reduce_add_remove_index_operations(self):\n+        \"\"\"\n+        Test that AddIndex and RemoveIndex operations are not reduced.\n+        \"\"\"\n+        # Initial state with a model\n+        initial_state = migrations.state.ProjectState()\n+        initial_state.add_model(\n+            migrations.state.ModelState(\n+                app_label=\"test_app\",\n+                name=\"TestModel\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"field\", models.CharField(max_length=100)),\n+                ],\n+            )\n+        )\n+\n+        # AddIndex operation\n+        add_index_operation = migrations.AddIndex(\n+            model_name=\"TestModel\",\n+            index=models.Index(fields=[\"field\"], name=\"test_index\"),\n+        )\n+\n+        # RemoveIndex operation\n+        remove_index_operation = migrations.RemoveIndex(\n+            model_name=\"TestModel\",\n+            name=\"test_index\",\n+        )\n+\n+        # Apply AddIndex operation\n+        new_state = initial_state.clone()\n+        add_index_operation.state_forwards(\"test_app\", new_state)\n+\n+        # Apply RemoveIndex operation\n+        final_state = new_state.clone()\n+        remove_index_operation.state_forwards(\"test_app\", final_state)\n+\n+        # Check that the index is not present in the final state\n+        # This assertion should fail if the bug is present\n+        if models.Index(fields=[\"field\"], name=\"test_index\") not in final_state.models[\"test_app\", \"testmodel\"].options[\"indexes\"]:\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}