{
  "edit_test_file": "tests/forms_tests/tests/test_formsets.py",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_add_fields_index_none.py b/tests/forms_tests/tests/test_add_fields_index_none.py\nnew file mode 100644\nindex 0000000..75813c6\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_add_fields_index_none.py\n@@ -0,0 +1,26 @@\n+from django.forms import CharField, Form, formset_factory\n+from django.test import SimpleTestCase\n+\n+\n+class MyForm(Form):\n+    my_field = CharField()\n+\n+\n+class TestAddFieldsIndexNone(SimpleTestCase):\n+    def test_add_fields_index_none(self):\n+        \"\"\"\n+        Test that FormSet's add_fields() method raises a TypeError when\n+        index is None and can_delete is True and can_delete_extra is False.\n+        \"\"\"\n+        MyFormSet = formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        with self.assertRaises(TypeError) as context:\n+            _ = my_formset.empty_form\n+        self.assertIn(\n+            \"'<' not supported between instances of 'NoneType' and 'int'\",\n+            str(context.exception),\n+        )\n",
  "inverted_patch": "diff --git a/tests/forms_tests/tests/test_add_fields_index_none_inverted.py b/tests/forms_tests/tests/test_add_fields_index_none_inverted.py\nnew file mode 100644\nindex 0000000..dbe0cfb\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_add_fields_index_none_inverted.py\n@@ -0,0 +1,28 @@\n+from django.forms import CharField, Form, formset_factory\n+from django.test import SimpleTestCase\n+\n+\n+class MyForm(Form):\n+    my_field = CharField()\n+\n+\n+class TestAddFieldsIndexNone(SimpleTestCase):\n+    def test_add_fields_index_none(self):\n+        \"\"\"\n+        Test that FormSet's add_fields() method raises a TypeError when\n+        index is None and can_delete is True and can_delete_extra is False.\n+        \"\"\"\n+        MyFormSet = formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        try:\n+            _ = my_formset.empty_form\n+        except TypeError as e:\n+            self.assertIn(\n+                \"'<' not supported between instances of 'NoneType' and 'int'\",\n+                str(e),\n+            )\n+            raise AssertionError(\"__BUG__HERE__\")\n"
}