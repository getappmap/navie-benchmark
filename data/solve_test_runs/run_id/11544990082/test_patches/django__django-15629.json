{
  "edit_test_file": "tests/schema/tests.py",
  "test_patch": "diff --git a/tests/schema/test_db_collation_foreign_keys.py b/tests/schema/test_db_collation_foreign_keys.py\nnew file mode 100644\nindex 0000000..d8e4b46\n--- /dev/null\n+++ b/tests/schema/test_db_collation_foreign_keys.py\n@@ -0,0 +1,59 @@\n+from django.db import connection\n+from django.db.models import CharField, ForeignKey, CASCADE\n+from django.test import TestCase, skipUnlessDBFeature\n+from django.db import models\n+\n+class DBCollationForeignKeyTests(TestCase):\n+    @skipUnlessDBFeature(\"supports_collation_on_charfield\")\n+    def test_db_collation_not_propagated_to_foreign_keys(self):\n+        \"\"\"\n+        Test that db_collation specified on a primary key field is not propagated\n+        to foreign key fields that reference it, causing constraint errors.\n+        \"\"\"\n+        # Only run on MySQL where this is known to be an issue\n+        if connection.vendor != 'mysql':\n+            return\n+\n+        class Account(models.Model):\n+            id = CharField(\n+                primary_key=True,\n+                max_length=22,\n+                db_collation='utf8_bin',\n+                db_index=True\n+            )\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        class Profile(models.Model):\n+            id = CharField(\n+                primary_key=True,\n+                max_length=22,\n+                db_collation='utf8_bin',\n+                db_index=True\n+            )\n+            account = ForeignKey(Account, on_delete=CASCADE)\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        # Create the tables - this should raise an error due to mismatched collations\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Account)\n+            editor.create_model(Profile)\n+\n+            # Get the actual SQL that would be executed\n+            sql_statements = []\n+            for statement in editor.collected_sql:\n+                sql_statements.append(statement)\n+\n+            # Check that foreign key column is missing the collation specification\n+            fk_alter_statement = next(\n+                stmt for stmt in sql_statements \n+                if 'account_id' in stmt and 'MODIFY' in stmt\n+            )\n+            self.assertNotIn(\n+                'COLLATE utf8_bin',\n+                fk_alter_statement,\n+                \"Foreign key column should be missing collation specification\"\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": null
}