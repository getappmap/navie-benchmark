{
  "edit_test_file": "tests/model_inheritance/tests.py",
  "test_patch": "diff --git a/tests/model_inheritance/test_multi_onetoone_inheritance.py b/tests/model_inheritance/test_multi_onetoone_inheritance.py\nnew file mode 100644\nindex 0000000..6cfcaf6\n--- /dev/null\n+++ b/tests/model_inheritance/test_multi_onetoone_inheritance.py\n@@ -0,0 +1,47 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+class MultiOneToOneInheritanceTests(SimpleTestCase):\n+    @isolate_apps('model_inheritance')\n+    def test_multiple_onetoone_inheritance_field_order(self):\n+        \"\"\"\n+        When a model inherits from another model and has multiple OneToOneFields,\n+        the order of field declarations should not affect whether Django raises\n+        ImproperlyConfigured, but it currently does.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        # This should raise ImproperlyConfigured because Django gets confused\n+        # about which OneToOneField is the parent link\n+        with self.assertRaises(ImproperlyConfigured):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(\n+                    Document,\n+                    on_delete=models.CASCADE,\n+                    parent_link=True,\n+                    related_name='+'\n+                )\n+                origin = models.OneToOneField(\n+                    Document,\n+                    related_name='picking',\n+                    on_delete=models.PROTECT\n+                )\n+\n+        # This works fine because the OneToOneField without parent_link=True\n+        # is declared first\n+        class WorkingPicking(Document):\n+            origin = models.OneToOneField(\n+                Document,\n+                related_name='picking',\n+                on_delete=models.PROTECT\n+            )\n+            document_ptr = models.OneToOneField(\n+                Document,\n+                on_delete=models.CASCADE,\n+                parent_link=True,\n+                related_name='+'\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_inheritance/test_multi_onetoone_inheritance_inverted.py b/tests/model_inheritance/test_multi_onetoone_inheritance_inverted.py\nnew file mode 100644\nindex 0000000..56e9559\n--- /dev/null\n+++ b/tests/model_inheritance/test_multi_onetoone_inheritance_inverted.py\n@@ -0,0 +1,48 @@\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+class MultiOneToOneInheritanceTests(SimpleTestCase):\n+    @isolate_apps('model_inheritance')\n+    def test_multiple_onetoone_inheritance_field_order(self):\n+        \"\"\"\n+        When a model inherits from another model and has multiple OneToOneFields,\n+        the order of field declarations should not affect model creation regardless\n+        of which OneToOneField is the parent link.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        # This should NOT raise ImproperlyConfigured because the parent_link=True\n+        # is explicitly set, making the field order irrelevant\n+        try:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(\n+                    Document,\n+                    on_delete=models.CASCADE,\n+                    parent_link=True,\n+                    related_name='+'\n+                )\n+                origin = models.OneToOneField(\n+                    Document,\n+                    related_name='picking',\n+                    on_delete=models.PROTECT\n+                )\n+        except ImproperlyConfigured:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # This should also work, demonstrating field order shouldn't matter\n+        class WorkingPicking(Document):\n+            origin = models.OneToOneField(\n+                Document,\n+                related_name='picking',\n+                on_delete=models.PROTECT\n+            )\n+            document_ptr = models.OneToOneField(\n+                Document,\n+                on_delete=models.CASCADE,\n+                parent_link=True,\n+                related_name='+'\n+            )\n\\ No newline at end of file\n"
}