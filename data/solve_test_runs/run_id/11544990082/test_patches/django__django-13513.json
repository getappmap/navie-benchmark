{
  "edit_test_file": "tests/view_tests/tests/test_debug.py",
  "test_patch": "diff --git a/tests/view_tests/tests/test_exception_context.py b/tests/view_tests/tests/test_exception_context.py\nnew file mode 100644\nindex 0000000..24f000a\n--- /dev/null\n+++ b/tests/view_tests/tests/test_exception_context.py\n@@ -0,0 +1,36 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.test.client import RequestFactory\n+from django.views.debug import ExceptionReporter\n+\n+\n+@override_settings(DEBUG=True)\n+class ExceptionReporterContextTests(SimpleTestCase):\n+    \"\"\"Tests for the debug view's handling of exception context suppression.\"\"\"\n+    rf = RequestFactory()\n+\n+    def test_suppress_context_not_respected(self):\n+        \"\"\"\n+        Test that the debug view shows the original exception context even when\n+        using `raise ... from None` which should suppress it.\n+        \"\"\"\n+        try:\n+            try:\n+                raise RuntimeError(\"Original error\")\n+            except Exception as exc:\n+                raise ValueError(\"New error\") from None\n+        except Exception:\n+            import sys\n+            exc_type, exc_value, tb = sys.exc_info()\n+\n+        request = self.rf.get('/test_view/')\n+        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n+        html = reporter.get_traceback_html()\n+\n+        # The new error should be shown\n+        self.assertIn(\"ValueError\", html)\n+        self.assertIn(\"New error\", html)\n+\n+        # The original error should not be shown since we used `from None`,\n+        # but due to the bug it is shown\n+        self.assertIn(\"RuntimeError\", html)\n+        self.assertIn(\"Original error\", html)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/view_tests/tests/test_exception_context_inverted.py b/tests/view_tests/tests/test_exception_context_inverted.py\nnew file mode 100644\nindex 0000000..0e3d73e\n--- /dev/null\n+++ b/tests/view_tests/tests/test_exception_context_inverted.py\n@@ -0,0 +1,35 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.test.client import RequestFactory\n+from django.views.debug import ExceptionReporter\n+\n+\n+@override_settings(DEBUG=True)\n+class ExceptionReporterContextTests(SimpleTestCase):\n+    \"\"\"Tests for the debug view's handling of exception context suppression.\"\"\"\n+    rf = RequestFactory()\n+\n+    def test_suppress_context_respected(self):\n+        \"\"\"\n+        Test that the debug view respects context suppression when using\n+        `raise ... from None`.\n+        \"\"\"\n+        try:\n+            try:\n+                raise RuntimeError(\"Original error\")\n+            except Exception as exc:\n+                raise ValueError(\"New error\") from None\n+        except Exception:\n+            import sys\n+            exc_type, exc_value, tb = sys.exc_info()\n+\n+        request = self.rf.get('/test_view/')\n+        reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n+        html = reporter.get_traceback_html()\n+\n+        # The new error should be shown\n+        self.assertIn(\"ValueError\", html)\n+        self.assertIn(\"New error\", html)\n+\n+        # The original error should not be shown since we used `from None`\n+        if \"RuntimeError\" in html and \"Original error\" in html:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}