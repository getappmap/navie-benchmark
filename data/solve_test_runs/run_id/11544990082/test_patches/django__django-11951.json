{
  "edit_test_file": "tests/bulk_create/tests.py",
  "test_patch": "diff --git a/tests/bulk_create/test_bulk_create_batch_size.py b/tests/bulk_create/test_bulk_create_batch_size.py\nnew file mode 100644\nindex 0000000..7dfdd7c\n--- /dev/null\n+++ b/tests/bulk_create/test_bulk_create_batch_size.py\n@@ -0,0 +1,24 @@\n+from django.db import OperationalError\n+from django.test import TestCase\n+from .models import TwoFields\n+\n+class BulkCreateBatchSizeTests(TestCase):\n+    def test_batch_size_overrides_max_allowed(self):\n+        \"\"\"\n+        Test that bulk_create allows a batch_size parameter that exceeds \n+        the database's maximum allowed batch size, which can cause errors.\n+        \"\"\"\n+        # Create a large number of objects\n+        num_objects = 1000\n+        objects = [\n+            TwoFields(f1=i, f2=i + 1) \n+            for i in range(num_objects)\n+        ]\n+        \n+        # Use a batch size that is deliberately too large for SQLite\n+        # SQLite has a SQLITE_MAX_COMPOUND_SELECT limit of 500 by default\n+        oversized_batch = 600\n+        \n+        # This should raise an OperationalError due to too many terms in compound SELECT\n+        with self.assertRaises(OperationalError):\n+            TwoFields.objects.bulk_create(objects, batch_size=oversized_batch)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/bulk_create/test_bulk_create_batch_size_inverted.py b/tests/bulk_create/test_bulk_create_batch_size_inverted.py\nnew file mode 100644\nindex 0000000..4021146\n--- /dev/null\n+++ b/tests/bulk_create/test_bulk_create_batch_size_inverted.py\n@@ -0,0 +1,31 @@\n+from django.db import OperationalError\n+from django.test import TestCase\n+from .models import TwoFields\n+\n+class BulkCreateBatchSizeTests(TestCase):\n+    def test_batch_size_should_not_override_max_allowed(self):\n+        \"\"\"\n+        Test that bulk_create should use the minimum of the specified batch_size \n+        and the database's maximum allowed batch size to prevent errors.\n+        \"\"\"\n+        # Create a large number of objects\n+        num_objects = 1000\n+        objects = [\n+            TwoFields(f1=i, f2=i + 1) \n+            for i in range(num_objects)\n+        ]\n+        \n+        # Use a batch size that is deliberately too large for SQLite\n+        # SQLite has a SQLITE_MAX_COMPOUND_SELECT limit of 500 by default\n+        oversized_batch = 600\n+        \n+        try:\n+            # This should succeed by automatically using a smaller batch size\n+            # instead of the oversized one\n+            TwoFields.objects.bulk_create(objects, batch_size=oversized_batch)\n+        except OperationalError:\n+            # If we get here, it means the batch size wasn't properly limited\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        # Verify all objects were created\n+        self.assertEqual(TwoFields.objects.count(), num_objects)\n\\ No newline at end of file\n"
}