{
  "edit_test_file": "tests/backends/sqlite/test_features.py",
  "test_patch": "diff --git a/tests/backends/sqlite/test_sqlite_version_compatibility.py b/tests/backends/sqlite/test_sqlite_version_compatibility.py\nnew file mode 100644\nindex 0000000..d633885\n--- /dev/null\n+++ b/tests/backends/sqlite/test_sqlite_version_compatibility.py\n@@ -0,0 +1,24 @@\n+from unittest import skipUnless\n+\n+from django.db import connection\n+from django.test import TestCase\n+\n+\n+@skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n+class SQLiteVersionCompatibilityTests(TestCase):\n+    def test_sqlite_version_compatibility(self):\n+        \"\"\"\n+        Test that SQLite version compatibility is properly checked.\n+        SQLite < 3.9.0 should not support JSON1 extension and indexes on expressions.\n+        \"\"\"\n+        sqlite_version = connection.Database.sqlite_version_info\n+        min_version = (3, 9, 0)\n+        \n+        if sqlite_version < min_version:\n+            # For SQLite < 3.9.0, JSON field and indexes on expressions should not be supported\n+            self.assertFalse(connection.features.supports_json_field)\n+            self.assertFalse(connection.features.supports_functions_in_partial_indexes)\n+        else:\n+            # For SQLite >= 3.9.0, these features should be supported\n+            self.assertTrue(connection.features.supports_json_field)\n+            self.assertTrue(connection.features.supports_functions_in_partial_indexes)\n\\ No newline at end of file\n",
  "inverted_patch": null
}