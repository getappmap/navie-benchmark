{
  "edit_test_file": "sympy/simplify/tests/test_trigsimp.py",
  "test_patch": "diff --git a/sympy/simplify/tests/test_complex_exponent_simplify.py b/sympy/simplify/tests/test_complex_exponent_simplify.py\nnew file mode 100644\nindex 0000000..b4f23eb\n--- /dev/null\n+++ b/sympy/simplify/tests/test_complex_exponent_simplify.py\n@@ -0,0 +1,8 @@\n+from sympy import Symbol, cos, simplify, I\n+from sympy.utilities.pytest import raises\n+\n+def test_complex_exponent_error():\n+    \"\"\"Test that simplify(cos(x)**I) raises TypeError for complex exponent\"\"\"\n+    x = Symbol('x')\n+    expr = cos(x)**I\n+    raises(TypeError, lambda: simplify(expr))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/simplify/tests/test_complex_exponent_simplify_inverted.py b/sympy/simplify/tests/test_complex_exponent_simplify_inverted.py\nnew file mode 100644\nindex 0000000..ba8ddc9\n--- /dev/null\n+++ b/sympy/simplify/tests/test_complex_exponent_simplify_inverted.py\n@@ -0,0 +1,16 @@\n+from sympy import Symbol, cos, simplify, I\n+\n+def test_complex_exponent_error():\n+    \"\"\"Test that simplify(cos(x)**I) handles complex exponents correctly\"\"\"\n+    x = Symbol('x')\n+    expr = cos(x)**I\n+    \n+    try:\n+        result = simplify(expr)\n+    except TypeError as e:\n+        if \"Invalid comparison of complex\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        raise e\n+    \n+    # If we get here without an error, the bug is fixed\n+    assert result == expr  # The expression should at least return itself if it can't be simplified\n\\ No newline at end of file\n"
}