{
  "edit_test_file": "sympy/core/tests/test_numbers.py",
  "test_patch": "diff --git a/sympy/core/tests/test_rational_string_conversion.py b/sympy/core/tests/test_rational_string_conversion.py\nnew file mode 100644\nindex 0000000..bb9074a\n--- /dev/null\n+++ b/sympy/core/tests/test_rational_string_conversion.py\n@@ -0,0 +1,21 @@\n+from sympy.core.numbers import Rational\n+from sympy.testing.pytest import raises\n+\n+def test_rational_string_conversion():\n+    # This test demonstrates the issue where Rational('0.5', '100') produces incorrect value\n+    # while Rational(0.5, 100) produces correct value\n+    \n+    # The correct value (1/200)\n+    correct = Rational(0.5, 100)\n+    assert correct == Rational(1, 200)\n+    \n+    # The incorrect value (1/100100) from string inputs\n+    incorrect = Rational('0.5', '100')\n+    assert incorrect == Rational(1, 100100)\n+    \n+    # Verify that the values are different\n+    assert incorrect != correct\n+    \n+    # Verify the specific incorrect value being produced\n+    assert incorrect.p == 1\n+    assert incorrect.q == 100100\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/core/tests/test_rational_string_conversion_inverted.py b/sympy/core/tests/test_rational_string_conversion_inverted.py\nnew file mode 100644\nindex 0000000..03fe45c\n--- /dev/null\n+++ b/sympy/core/tests/test_rational_string_conversion_inverted.py\n@@ -0,0 +1,21 @@\n+from sympy.core.numbers import Rational\n+from sympy.testing.pytest import raises\n+\n+def test_rational_string_conversion():\n+    # This test demonstrates the issue where Rational('0.5', '100') produces incorrect value\n+    # while Rational(0.5, 100) produces correct value\n+    \n+    # The correct value (1/200)\n+    correct = Rational(0.5, 100)\n+    assert correct == Rational(1, 200)\n+    \n+    # The incorrect value (1/100100) from string inputs\n+    incorrect = Rational('0.5', '100')\n+    \n+    # This should fail when the bug is present\n+    if incorrect != Rational(1, 200):\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # These assertions should not be reached if the bug is present\n+    assert incorrect.p == 1\n+    assert incorrect.q == 200\n\\ No newline at end of file\n"
}