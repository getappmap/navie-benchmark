{
  "edit_test_file": "tests/queries/tests.py",
  "test_patch": "diff --git a/tests/queries/test_ordered_property_group_by.py b/tests/queries/test_ordered_property_group_by.py\nnew file mode 100644\nindex 0000000..fdb8bc5\n--- /dev/null\n+++ b/tests/queries/test_ordered_property_group_by.py\n@@ -0,0 +1,33 @@\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+from .models import Tag\n+\n+\n+class OrderedPropertyGroupByTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create some test data\n+        Tag.objects.create(name='tag1')\n+        Tag.objects.create(name='tag2')\n+        Tag.objects.create(name='tag3')\n+\n+    def test_ordered_property_with_group_by(self):\n+        \"\"\"\n+        The ordered property should reflect that GROUP BY queries lose the default ordering\n+        from Meta.ordering when no explicit ordering is applied.\n+        \"\"\"\n+        # Tag model has ordering = ['name'] in its Meta\n+        qs = Tag.objects.all()\n+        # Should be True since model has default ordering\n+        self.assertTrue(qs.ordered)\n+        \n+        # Adding an annotation with Count creates a GROUP BY query\n+        qs_annotated = Tag.objects.annotate(count=Count('id'))\n+        \n+        # Should be False since GROUP BY loses the default ordering,\n+        # but currently incorrectly returns True\n+        self.assertTrue(qs_annotated.ordered)\n+        \n+        # Verify the SQL has no ORDER BY clause\n+        self.assertNotIn('ORDER BY', str(qs_annotated.query))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/queries/test_ordered_property_group_by_inverted.py b/tests/queries/test_ordered_property_group_by_inverted.py\nnew file mode 100644\nindex 0000000..7cc27d2\n--- /dev/null\n+++ b/tests/queries/test_ordered_property_group_by_inverted.py\n@@ -0,0 +1,33 @@\n+from django.test import TestCase\n+from django.db.models import Count\n+\n+from .models import Tag\n+\n+\n+class OrderedPropertyGroupByTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create some test data\n+        Tag.objects.create(name='tag1')\n+        Tag.objects.create(name='tag2')\n+        Tag.objects.create(name='tag3')\n+\n+    def test_ordered_property_with_group_by(self):\n+        \"\"\"\n+        The ordered property should reflect that GROUP BY queries lose the default ordering\n+        from Meta.ordering when no explicit ordering is applied.\n+        \"\"\"\n+        # Tag model has ordering = ['name'] in its Meta\n+        qs = Tag.objects.all()\n+        # Should be True since model has default ordering\n+        self.assertTrue(qs.ordered)\n+        \n+        # Adding an annotation with Count creates a GROUP BY query\n+        qs_annotated = Tag.objects.annotate(count=Count('id'))\n+        \n+        # Verify the SQL has no ORDER BY clause\n+        self.assertNotIn('ORDER BY', str(qs_annotated.query))\n+        \n+        # The ordered property should be False since GROUP BY loses the default ordering\n+        if qs_annotated.ordered:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}