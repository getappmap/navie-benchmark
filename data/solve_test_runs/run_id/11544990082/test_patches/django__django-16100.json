{
  "edit_test_file": "django/contrib/admin/tests.py",
  "test_patch": "diff --git a/django/contrib/admin/test_changelist_transactions.py b/django/contrib/admin/test_changelist_transactions.py\nnew file mode 100644\nindex 0000000..c3ac143\n--- /dev/null\n+++ b/django/contrib/admin/test_changelist_transactions.py\n@@ -0,0 +1,65 @@\n+from django.contrib.auth.models import User\n+from django.test import TestCase\n+from django.urls import reverse\n+from django.db import transaction\n+\n+from django.contrib.admin.tests import AdminSeleniumTestCase\n+\n+class ChangeListTransactionTests(AdminSeleniumTestCase):\n+    \"\"\"Tests for transaction handling in admin changelist view with list_editable.\"\"\"\n+\n+    def setUp(self):\n+        # Create a superuser\n+        self.superuser = User.objects.create_superuser(\n+            username='super',\n+            password='secret',\n+            email='super@example.com'\n+        )\n+        self.client.force_login(self.superuser)\n+\n+        # Create some test users that we'll try to edit\n+        self.user1 = User.objects.create_user(\n+            username='user1',\n+            email='user1@example.com'\n+        )\n+        self.user2 = User.objects.create_user(\n+            username='user2',\n+            email='user2@example.com'\n+        )\n+\n+    def test_list_editable_partial_update(self):\n+        \"\"\"\n+        Test that demonstrates lack of transaction handling in changelist_view\n+        when processing list_editable fields.\n+        \n+        When an error occurs during the processing of the second object,\n+        the first object's changes remain in the database instead of being rolled back.\n+        \"\"\"\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '2',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            'form-0-id': str(self.user1.pk),\n+            'form-0-email': 'new1@example.com',  # This change should succeed\n+            'form-1-id': str(self.user2.pk),\n+            'form-1-email': 'invalid-email',  # This will cause validation error\n+            '_save': 'Save'\n+        }\n+\n+        # Make the POST request to the changelist view\n+        changelist_url = reverse('admin:auth_user_changelist')\n+        with transaction.atomic():\n+            response = self.client.post(changelist_url, data)\n+\n+        # Verify that the response indicates an error\n+        self.assertEqual(response.status_code, 200)  # Form redisplayed with errors\n+\n+        # The key demonstration: user1's email was updated despite user2's validation error\n+        self.user1.refresh_from_db()\n+        self.user2.refresh_from_db()\n+        \n+        # First user's change persisted despite second user's error\n+        self.assertEqual(self.user1.email, 'new1@example.com')\n+        # Second user's email remained unchanged due to the error\n+        self.assertEqual(self.user2.email, 'user2@example.com')\n\\ No newline at end of file\n",
  "inverted_patch": null
}