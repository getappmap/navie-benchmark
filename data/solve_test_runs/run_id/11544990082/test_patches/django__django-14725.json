{
  "edit_test_file": "tests/model_formsets/tests.py",
  "test_patch": "diff --git a/tests/model_formsets/test_model_formset_creation.py b/tests/model_formsets/test_model_formset_creation.py\nnew file mode 100644\nindex 0000000..72d81fb\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_creation.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase\n+from django.forms.models import modelformset_factory\n+from .models import Author\n+\n+class ModelFormsetCreationTest(TestCase):\n+    def test_cannot_prevent_object_creation(self):\n+        \"\"\"\n+        Test demonstrating that setting extra=0 does not prevent new object creation\n+        in model formsets.\n+        \"\"\"\n+        # Create initial author\n+        Author.objects.create(name='Charles Baudelaire')\n+        \n+        # Create formset with extra=0, attempting to make it \"edit only\"\n+        AuthorFormSet = modelformset_factory(Author, fields=\"__all__\", extra=0)\n+        \n+        # Data includes the existing author plus a new one, despite extra=0\n+        data = {\n+            'form-TOTAL_FORMS': '2',  # Sending more forms than expected\n+            'form-INITIAL_FORMS': '1',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': '1',\n+            'form-0-name': 'Charles Baudelaire',\n+            'form-1-id': '',  # New author\n+            'form-1-name': 'Arthur Rimbaud',\n+        }\n+        \n+        formset = AuthorFormSet(data)\n+        self.assertTrue(formset.is_valid())\n+        \n+        # The formset allows saving the new author even though extra=0\n+        formset.save()\n+        \n+        # Verify that both authors were saved\n+        self.assertEqual(Author.objects.count(), 2)\n+        self.assertQuerysetEqual(\n+            Author.objects.order_by('name'),\n+            ['Arthur Rimbaud', 'Charles Baudelaire'],\n+            transform=lambda x: x.name\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_formsets/test_model_formset_creation_inverted.py b/tests/model_formsets/test_model_formset_creation_inverted.py\nnew file mode 100644\nindex 0000000..fdce7a8\n--- /dev/null\n+++ b/tests/model_formsets/test_model_formset_creation_inverted.py\n@@ -0,0 +1,47 @@\n+from django.test import TestCase\n+from django.forms.models import modelformset_factory\n+from .models import Author\n+\n+class ModelFormsetCreationTest(TestCase):\n+    def test_cannot_prevent_object_creation(self):\n+        \"\"\"\n+        Test demonstrating that setting extra=0 does not prevent new object creation\n+        in model formsets, which is a bug. The test should fail when this behavior\n+        is observed.\n+        \"\"\"\n+        # Create initial author\n+        Author.objects.create(name='Charles Baudelaire')\n+        \n+        # Create formset with extra=0, attempting to make it \"edit only\"\n+        AuthorFormSet = modelformset_factory(Author, fields=\"__all__\", extra=0)\n+        \n+        # Data includes the existing author plus a new one, despite extra=0\n+        data = {\n+            'form-TOTAL_FORMS': '2',  # Sending more forms than expected\n+            'form-INITIAL_FORMS': '1',\n+            'form-MAX_NUM_FORMS': '',\n+            'form-0-id': '1',\n+            'form-0-name': 'Charles Baudelaire',\n+            'form-1-id': '',  # New author\n+            'form-1-name': 'Arthur Rimbaud',\n+        }\n+        \n+        formset = AuthorFormSet(data)\n+        \n+        # The formset should not be valid when trying to add new objects with extra=0\n+        if formset.is_valid():\n+            # Save should not be allowed to proceed\n+            formset.save()\n+            \n+            # Check if a new object was created\n+            author_count = Author.objects.count()\n+            if author_count > 1:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # Verify that only the original author exists\n+        self.assertEqual(Author.objects.count(), 1)\n+        self.assertQuerysetEqual(\n+            Author.objects.all(),\n+            ['Charles Baudelaire'],\n+            transform=lambda x: x.name\n+        )\n\\ No newline at end of file\n"
}