{
  "edit_test_file": "tests/utils_tests/test_functional.py",
  "test_patch": "diff --git a/tests/utils_tests/test_lazy_slug_resolution.py b/tests/utils_tests/test_lazy_slug_resolution.py\nnew file mode 100644\nindex 0000000..ca9d9df\n--- /dev/null\n+++ b/tests/utils_tests/test_lazy_slug_resolution.py\n@@ -0,0 +1,39 @@\n+from django.db import models\n+from django.http import Http404\n+from django.shortcuts import get_object_or_404\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject, lazy\n+\n+class DummyModel(models.Model):\n+    slug = models.SlugField(unique=True)\n+\n+class LazySlugResolutionTest(TestCase):\n+    \"\"\"Test that using a SimpleLazyObject slug causes database errors.\"\"\"\n+    \n+    databases = {'default'}  # Required for database access\n+    \n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create a test model instance\n+        DummyModel.objects.create(slug='test-slug')\n+\n+    def test_lazy_slug_causes_database_error(self):\n+        \"\"\"\n+        Test that using a SimpleLazyObject as a slug value without str() conversion\n+        raises a database error.\n+        \"\"\"\n+        # Create a lazy object that returns a slug\n+        def get_slug():\n+            return 'test-slug'\n+        lazy_slug = SimpleLazyObject(get_slug)\n+\n+        # Verify we have a lazy object, not a string\n+        self.assertIsInstance(lazy_slug, SimpleLazyObject)\n+        \n+        # Attempt to query using the lazy slug should raise a database error\n+        with self.assertRaisesMessage(Exception, 'Error binding parameter 0 - probably unsupported type'):\n+            get_object_or_404(DummyModel, slug=lazy_slug)\n+\n+        # Verify that using str() conversion works\n+        obj = get_object_or_404(DummyModel, slug=str(lazy_slug))\n+        self.assertEqual(obj.slug, 'test-slug')\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_lazy_slug_resolution_inverted.py b/tests/utils_tests/test_lazy_slug_resolution_inverted.py\nnew file mode 100644\nindex 0000000..5fce5e9\n--- /dev/null\n+++ b/tests/utils_tests/test_lazy_slug_resolution_inverted.py\n@@ -0,0 +1,57 @@\n+from django.db import models\n+from django.http import Http404\n+from django.shortcuts import get_object_or_404\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject, lazy\n+from django.views.generic import TemplateView\n+from django.urls import path\n+from django.test import RequestFactory\n+\n+class DummyModel(models.Model):\n+    slug = models.SlugField(unique=True)\n+\n+class TestView(TemplateView):\n+    template_name = \"dummy.html\"\n+    \n+    def get_context_data(self, **kwargs):\n+        slug = kwargs.get(\"slug\", \"\")\n+        # This should raise an error with SimpleLazyObject\n+        obj = get_object_or_404(DummyModel, slug=slug)\n+        return {\"object\": obj, \"slug\": slug}\n+\n+class LazySlugResolutionTest(TestCase):\n+    \"\"\"Test that using a SimpleLazyObject slug from TemplateView kwargs causes database errors.\"\"\"\n+    \n+    databases = {'default'}\n+    \n+    @classmethod\n+    def setUpTestData(cls):\n+        DummyModel.objects.create(slug='test-slug')\n+\n+    def test_lazy_slug_from_templateview_kwargs(self):\n+        \"\"\"\n+        Test that using a SimpleLazyObject from TemplateView kwargs without str() conversion\n+        should fail with a specific error message.\n+        \"\"\"\n+        factory = RequestFactory()\n+        \n+        # Create a request with a lazy slug\n+        def get_slug():\n+            return 'test-slug'\n+        lazy_slug = SimpleLazyObject(get_slug)\n+        \n+        view = TestView()\n+        view.kwargs = {'slug': lazy_slug}\n+        \n+        # This should fail with our specific error message\n+        try:\n+            view.get_context_data(**view.kwargs)\n+            raise AssertionError(\"Expected test to fail with __BUG__HERE__ but it succeeded\")\n+        except Exception as e:\n+            if str(e) != \"__BUG__HERE__\":\n+                raise AssertionError(f\"Expected error message '__BUG__HERE__' but got: {str(e)}\")\n+\n+        # Verify that using str() conversion works\n+        view.kwargs = {'slug': str(lazy_slug)}\n+        context = view.get_context_data(**view.kwargs)\n+        self.assertEqual(context['object'].slug, 'test-slug')\n\\ No newline at end of file\n"
}