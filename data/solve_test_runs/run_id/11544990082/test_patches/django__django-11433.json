{
  "edit_test_file": "tests/auth_tests/test_forms.py",
  "test_patch": "diff --git a/tests/auth_tests/test_cleaned_data_defaults.py b/tests/auth_tests/test_cleaned_data_defaults.py\nnew file mode 100644\nindex 0000000..73a2783\n--- /dev/null\n+++ b/tests/auth_tests/test_cleaned_data_defaults.py\n@@ -0,0 +1,37 @@\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import User\n+from django.test import TestCase\n+\n+\n+class CleanedDataDefaultsTest(TestCase):\n+    \"\"\"Test that cleaned_data cannot override model field defaults.\"\"\"\n+\n+    class UserCreationFormWithOverride(UserCreationForm):\n+        def clean(self):\n+            cleaned_data = super().clean()\n+            # Try to override the default is_active=True in cleaned_data\n+            cleaned_data['is_active'] = False\n+            return cleaned_data\n+\n+        class Meta(UserCreationForm.Meta):\n+            model = User\n+            fields = ('username', 'password1', 'password2')\n+\n+    def test_cleaned_data_cannot_override_default(self):\n+        \"\"\"\n+        Test that modifying a field with a default value in cleaned_data\n+        does not override the default when the field is not in the form data.\n+        \"\"\"\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpass123',\n+            'password2': 'testpass123',\n+        }\n+        \n+        form = self.UserCreationFormWithOverride(form_data)\n+        self.assertTrue(form.is_valid())\n+        \n+        user = form.save()\n+        # The test passes when the issue exists - is_active remains True\n+        # despite attempt to set it to False in cleaned_data\n+        self.assertTrue(user.is_active)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/auth_tests/test_cleaned_data_defaults_inverted.py b/tests/auth_tests/test_cleaned_data_defaults_inverted.py\nnew file mode 100644\nindex 0000000..c20be19\n--- /dev/null\n+++ b/tests/auth_tests/test_cleaned_data_defaults_inverted.py\n@@ -0,0 +1,42 @@\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import User\n+from django.test import TestCase\n+\n+\n+class CleanedDataDefaultsTest(TestCase):\n+    \"\"\"Test that cleaned_data should be able to override model field defaults.\"\"\"\n+\n+    class UserCreationFormWithOverride(UserCreationForm):\n+        def clean(self):\n+            cleaned_data = super().clean()\n+            # Try to override the default is_active=True in cleaned_data\n+            cleaned_data['is_active'] = False\n+            return cleaned_data\n+\n+        class Meta(UserCreationForm.Meta):\n+            model = User\n+            fields = ('username', 'password1', 'password2')\n+\n+    def test_cleaned_data_should_override_default(self):\n+        \"\"\"\n+        Test that modifying a field with a default value in cleaned_data\n+        should override the default when the field is not in the form data.\n+        \"\"\"\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpass123',\n+            'password2': 'testpass123',\n+        }\n+        \n+        form = self.UserCreationFormWithOverride(form_data)\n+        self.assertTrue(form.is_valid())\n+        \n+        user = form.save()\n+        \n+        # The test should fail when the issue exists (is_active remains True\n+        # despite attempt to set it to False in cleaned_data)\n+        if user.is_active:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # This assertion should only be reached if the bug is fixed\n+        self.assertFalse(user.is_active)\n\\ No newline at end of file\n"
}