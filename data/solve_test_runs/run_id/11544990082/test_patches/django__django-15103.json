{
  "edit_test_file": "tests/utils_tests/test_html.py",
  "test_patch": "diff --git a/tests/utils_tests/test_json_script.py b/tests/utils_tests/test_json_script.py\nnew file mode 100644\nindex 0000000..56c349e\n--- /dev/null\n+++ b/tests/utils_tests/test_json_script.py\n@@ -0,0 +1,17 @@\n+from django.test import SimpleTestCase\n+from django.utils.html import json_script\n+from django.utils.functional import lazystr\n+\n+\n+class JsonScriptTests(SimpleTestCase):\n+    def test_json_script_requires_element_id(self):\n+        \"\"\"\n+        json_script() currently requires element_id parameter even in cases where\n+        it's not needed (e.g., when the script is inside a template tag).\n+        \"\"\"\n+        test_data = {'hello': 'world'}\n+        expected_output = '<script type=\"application/json\">{\"hello\": \"world\"}</script>'\n+        \n+        with self.assertRaises(TypeError):\n+            # This should ideally work without element_id, but currently raises TypeError\n+            json_script(test_data)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_json_script_inverted.py b/tests/utils_tests/test_json_script_inverted.py\nnew file mode 100644\nindex 0000000..3a6345f\n--- /dev/null\n+++ b/tests/utils_tests/test_json_script_inverted.py\n@@ -0,0 +1,20 @@\n+from django.test import SimpleTestCase\n+from django.utils.html import json_script\n+from django.utils.functional import lazystr\n+\n+\n+class JsonScriptTests(SimpleTestCase):\n+    def test_json_script_should_work_without_element_id(self):\n+        \"\"\"\n+        json_script() should work without element_id parameter when it's not needed\n+        (e.g., when the script is inside a template tag).\n+        \"\"\"\n+        test_data = {'hello': 'world'}\n+        expected_output = '<script type=\"application/json\">{\"hello\": \"world\"}</script>'\n+        \n+        try:\n+            result = json_script(test_data)\n+        except TypeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        self.assertEqual(result, expected_output)\n\\ No newline at end of file\n"
}