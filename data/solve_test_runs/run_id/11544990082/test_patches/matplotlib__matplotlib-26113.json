{
  "edit_test_file": "lib/matplotlib/tests/test_collections.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hexbin_mincnt.py b/lib/matplotlib/tests/test_hexbin_mincnt.py\nnew file mode 100644\nindex 0000000..84d3660\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hexbin_mincnt.py\n@@ -0,0 +1,76 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import image_comparison\n+\n+def test_hexbin_mincnt_inconsistency():\n+    \"\"\"\n+    Test that hexbin's mincnt parameter behaves differently when C is specified vs not specified.\n+    The test verifies that with mincnt=1:\n+    - Without C parameter: Shows bins with at least 1 point\n+    - With C parameter: Shows bins with at least 2 points\n+    \"\"\"\n+    # Set random seed for reproducibility\n+    np.random.seed(42)\n+    \n+    # Generate test data\n+    X, Y = np.random.multivariate_normal(\n+        [0.0, 0.0], \n+        [[1.0, 0.1], [0.1, 1.0]], \n+        size=250\n+    ).T\n+    Z = np.ones_like(X)\n+    \n+    # Common parameters\n+    extent = [-3., 3., -3., 3.]\n+    gridsize = (7, 7)\n+    \n+    # Create two plots to compare\n+    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n+    \n+    # Plot 1: Without C parameter\n+    hb1 = ax1.hexbin(\n+        X, Y,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Plot 2: With C parameter\n+    hb2 = ax2.hexbin(\n+        X, Y,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Get the counts for each hexbin\n+    counts1 = hb1.get_array()\n+    counts2 = hb2.get_array()\n+    \n+    # The test passes if we can verify that:\n+    # 1. Plot 1 shows bins with count >= 1\n+    # 2. Plot 2 shows bins with count >= 2\n+    # 3. Plot 2 has fewer visible hexbins than Plot 1\n+    \n+    # Get number of visible hexbins (non-zero values)\n+    visible_bins1 = np.count_nonzero(counts1)\n+    visible_bins2 = np.count_nonzero(counts2)\n+    \n+    # Verify that Plot 2 has fewer visible hexbins\n+    assert visible_bins2 < visible_bins1, \\\n+        f\"Expected fewer visible bins with C parameter ({visible_bins2}) \" \\\n+        f\"than without C parameter ({visible_bins1})\"\n+    \n+    # Verify minimum counts\n+    assert np.all(counts1[counts1 > 0] >= 1), \\\n+        \"Without C: Expected all visible bins to have count >= 1\"\n+    assert np.all(counts2[counts2 > 0] >= 2), \\\n+        \"With C: Expected all visible bins to have count >= 2\"\n+    \n+    plt.close()\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_hexbin_mincnt_inverted.py b/lib/matplotlib/tests/test_hexbin_mincnt_inverted.py\nnew file mode 100644\nindex 0000000..5e1e377\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hexbin_mincnt_inverted.py\n@@ -0,0 +1,72 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+def test_hexbin_mincnt_inconsistency():\n+    \"\"\"\n+    Test that hexbin's mincnt parameter behaves consistently regardless of whether \n+    C parameter is specified. When mincnt=1, both cases should show bins with at \n+    least 1 point.\n+    \"\"\"\n+    # Set random seed for reproducibility\n+    np.random.seed(42)\n+    \n+    # Generate test data\n+    X, Y = np.random.multivariate_normal(\n+        [0.0, 0.0], \n+        [[1.0, 0.1], [0.1, 1.0]], \n+        size=250\n+    ).T\n+    Z = np.ones_like(X)\n+    \n+    # Common parameters\n+    extent = [-3., 3., -3., 3.]\n+    gridsize = (7, 7)\n+    \n+    # Create two plots to compare\n+    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n+    \n+    # Plot 1: Without C parameter\n+    hb1 = ax1.hexbin(\n+        X, Y,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Plot 2: With C parameter\n+    hb2 = ax2.hexbin(\n+        X, Y,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+        linewidth=0.0,\n+        cmap='Blues'\n+    )\n+    \n+    # Get the counts for each hexbin\n+    counts1 = hb1.get_array()\n+    counts2 = hb2.get_array()\n+    \n+    # Get number of visible hexbins (non-zero values)\n+    visible_bins1 = np.count_nonzero(counts1)\n+    visible_bins2 = np.count_nonzero(counts2)\n+    \n+    # The test should now FAIL when the bug is present\n+    if visible_bins1 != visible_bins2:\n+        raise AssertionError(\"__BUG__HERE__: Inconsistent behavior detected - \"\n+                           f\"Without C parameter: {visible_bins1} visible bins, \"\n+                           f\"With C parameter: {visible_bins2} visible bins. \"\n+                           \"Expected equal number of visible bins for mincnt=1 \"\n+                           \"regardless of C parameter.\")\n+    \n+    # Additional verification that both plots show bins with count >= 1\n+    assert np.all(counts1[counts1 > 0] >= 1), \\\n+        \"Without C: Expected all visible bins to have count >= 1\"\n+    assert np.all(counts2[counts2 > 0] >= 1), \\\n+        \"With C: Expected all visible bins to have count >= 1\"\n+    \n+    plt.close()\n\\ No newline at end of file\n"
}