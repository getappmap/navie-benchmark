{
  "edit_test_file": "tests/modeladmin/tests.py",
  "test_patch": "diff --git a/tests/modeladmin/test_model_admin_inlines.py b/tests/modeladmin/test_model_admin_inlines.py\nnew file mode 100644\nindex 0000000..8a94162\n--- /dev/null\n+++ b/tests/modeladmin/test_model_admin_inlines.py\n@@ -0,0 +1,87 @@\n+from datetime import date\n+\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from django.contrib.admin.sites import AdminSite\n+from django.test import TestCase\n+\n+from .models import Band, Concert\n+\n+\n+class MockRequest:\n+    pass\n+\n+\n+class MockSuperUser:\n+    def has_perm(self, perm):\n+        return True\n+\n+\n+request = MockRequest()\n+request.user = MockSuperUser()\n+\n+\n+class ConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'main_band'\n+\n+\n+class AlternateConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'opening_band'\n+\n+\n+class TestModelAdminInlines(TestCase):\n+    \"\"\"Tests demonstrating the need for a get_inlines() hook.\"\"\"\n+\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.band = Band.objects.create(\n+            name='The Doors',\n+            bio='',\n+            sign_date=date(1965, 1, 1),\n+        )\n+\n+    def test_dynamic_inlines_requires_get_inline_instances_override(self):\n+        \"\"\"\n+        Test showing that to achieve dynamic inlines based on the object being edited,\n+        we currently need to override get_inline_instances() and copy its implementation.\n+        \"\"\"\n+        class DynamicInlinesBandAdmin(ModelAdmin):\n+            inlines = [ConcertInline, AlternateConcertInline]\n+\n+            def get_inline_instances(self, request, obj=None):\n+                # Need to copy the base implementation just to filter inlines\n+                inline_instances = []\n+                for inline_class in self.inlines:\n+                    inline = inline_class(self.model, self.admin_site)\n+                    if request:\n+                        # Only show opening_band inline if the band is The Doors\n+                        if isinstance(inline, AlternateConcertInline):\n+                            if not obj or obj.name != 'The Doors':\n+                                continue\n+                        if not (inline.has_view_or_change_permission(request, obj) or\n+                                inline.has_add_permission(request, obj) or\n+                                inline.has_delete_permission(request, obj)):\n+                            continue\n+                        if not inline.has_add_permission(request, obj):\n+                            inline.max_num = 0\n+                    inline_instances.append(inline)\n+                return inline_instances\n+\n+        ma = DynamicInlinesBandAdmin(Band, self.site)\n+\n+        # For The Doors, both inlines should be present\n+        inline_instances = ma.get_inline_instances(request, self.band)\n+        self.assertEqual(len(inline_instances), 2)\n+        self.assertIsInstance(inline_instances[0], ConcertInline)\n+        self.assertIsInstance(inline_instances[1], AlternateConcertInline)\n+\n+        # For other bands, only the main_band inline should be present\n+        other_band = Band.objects.create(\n+            name='The Beatles',\n+            bio='',\n+            sign_date=date(1962, 1, 1),\n+        )\n+        inline_instances = ma.get_inline_instances(request, other_band)\n+        self.assertEqual(len(inline_instances), 1)\n+        self.assertIsInstance(inline_instances[0], ConcertInline)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/modeladmin/test_model_admin_inlines_inverted.py b/tests/modeladmin/test_model_admin_inlines_inverted.py\nnew file mode 100644\nindex 0000000..0583579\n--- /dev/null\n+++ b/tests/modeladmin/test_model_admin_inlines_inverted.py\n@@ -0,0 +1,78 @@\n+from datetime import date\n+\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from django.contrib.admin.sites import AdminSite\n+from django.test import TestCase\n+\n+from .models import Band, Concert\n+\n+\n+class MockRequest:\n+    pass\n+\n+\n+class MockSuperUser:\n+    def has_perm(self, perm):\n+        return True\n+\n+\n+request = MockRequest()\n+request.user = MockSuperUser()\n+\n+\n+class ConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'main_band'\n+\n+\n+class AlternateConcertInline(TabularInline):\n+    model = Concert\n+    fk_name = 'opening_band'\n+\n+\n+class TestModelAdminInlines(TestCase):\n+    \"\"\"Tests for the ModelAdmin get_inlines() hook functionality.\"\"\"\n+\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.band = Band.objects.create(\n+            name='The Doors',\n+            bio='',\n+            sign_date=date(1965, 1, 1)\n+        )\n+        self.other_band = Band.objects.create(\n+            name='The Beatles',\n+            bio='',\n+            sign_date=date(1962, 1, 1)\n+        )\n+\n+    def test_get_inlines_hook_existence(self):\n+        \"\"\"\n+        Test that verifies the existence of get_inlines() hook in ModelAdmin.\n+        This test should fail if the hook is not implemented.\n+        \"\"\"\n+        class DynamicInlinesBandAdmin(ModelAdmin):\n+            def get_inlines(self, request, obj=None):\n+                if obj and obj.name == 'The Doors':\n+                    return [ConcertInline, AlternateConcertInline]\n+                return [ConcertInline]\n+\n+        ma = DynamicInlinesBandAdmin(Band, self.site)\n+\n+        # Check if get_inlines() is actually used by get_inline_instances()\n+        doors_inlines = ma.get_inline_instances(request, self.band)\n+        beatles_inlines = ma.get_inline_instances(request, self.other_band)\n+\n+        # If get_inlines() hook is not implemented and being used,\n+        # both bands would have the same number of inlines\n+        if len(doors_inlines) == len(beatles_inlines):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Verify the correct number of inlines\n+        self.assertEqual(len(doors_inlines), 2)\n+        self.assertEqual(len(beatles_inlines), 1)\n+\n+        # Verify the correct inline types\n+        self.assertIsInstance(doors_inlines[0], ConcertInline)\n+        self.assertIsInstance(doors_inlines[1], AlternateConcertInline)\n+        self.assertIsInstance(beatles_inlines[0], ConcertInline)\n\\ No newline at end of file\n"
}