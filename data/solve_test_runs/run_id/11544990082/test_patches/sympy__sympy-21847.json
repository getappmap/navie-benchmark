{
  "edit_test_file": "sympy/polys/tests/test_orderings.py",
  "test_patch": "diff --git a/sympy/polys/tests/test_itermonomial_degrees.py b/sympy/polys/tests/test_itermonomial_degrees.py\nnew file mode 100644\nindex 0000000..9e8725a\n--- /dev/null\n+++ b/sympy/polys/tests/test_itermonomial_degrees.py\n@@ -0,0 +1,30 @@\n+\"\"\"Tests for itermonomials with min_degrees argument.\"\"\"\n+\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n+from sympy import symbols\n+from sympy.testing.pytest import raises\n+\n+def test_itermonomials_min_degrees():\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    \n+    # Get monomials and sort them for consistent testing\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                      key=monomial_key('grlex', states))\n+    \n+    # Currently returns only [x3**3, x2**3, x1**3]\n+    # This test passes when the bug is present\n+    assert monomials == [x3**3, x2**3, x1**3]\n+    \n+    # The following mixed terms of total degree 3 should be present but are not:\n+    # x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x2**2*x3, x2*x3**2, x1*x2*x3\n+    assert x1**2*x2 not in monomials\n+    assert x1**2*x3 not in monomials\n+    assert x1*x2**2 not in monomials\n+    assert x1*x3**2 not in monomials\n+    assert x2**2*x3 not in monomials\n+    assert x2*x3**2 not in monomials\n+    assert x1*x2*x3 not in monomials\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/polys/tests/test_itermonomial_degrees_inverted.py b/sympy/polys/tests/test_itermonomial_degrees_inverted.py\nnew file mode 100644\nindex 0000000..7e88316\n--- /dev/null\n+++ b/sympy/polys/tests/test_itermonomial_degrees_inverted.py\n@@ -0,0 +1,31 @@\n+\"\"\"Tests for itermonomials with min_degrees argument.\"\"\"\n+\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n+from sympy import symbols\n+from sympy.testing.pytest import raises\n+\n+def test_itermonomials_min_degrees():\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    \n+    # Get monomials and sort them for consistent testing\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                      key=monomial_key('grlex', states))\n+    \n+    # Define the expected monomials of total degree 3\n+    expected_monomials = [\n+        x1**3, x2**3, x3**3,           # Pure cubic terms\n+        x1**2*x2, x1**2*x3,            # Terms with x1^2\n+        x2**2*x1, x2**2*x3,            # Terms with x2^2\n+        x3**2*x1, x3**2*x2,            # Terms with x3^2\n+        x1*x2*x3                        # Mixed term\n+    ]\n+    expected_monomials = sorted(expected_monomials, key=monomial_key('grlex', states))\n+    \n+    # This will fail when the bug is present, showing which monomials are missing\n+    if monomials != expected_monomials:\n+        missing = set(expected_monomials) - set(monomials)\n+        raise AssertionError(f\"__BUG__HERE__ Missing expected monomials of total degree 3: {missing}\")\n\\ No newline at end of file\n"
}