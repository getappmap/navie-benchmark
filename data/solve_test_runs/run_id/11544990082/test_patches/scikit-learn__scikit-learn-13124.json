{
  "edit_test_file": "sklearn/utils/tests/test_pprint.py",
  "test_patch": "diff --git a/sklearn/utils/tests/test_stratified_kfold_shuffle.py b/sklearn/utils/tests/test_stratified_kfold_shuffle.py\nnew file mode 100644\nindex 0000000..f3a9323\n--- /dev/null\n+++ b/sklearn/utils/tests/test_stratified_kfold_shuffle.py\n@@ -0,0 +1,46 @@\n+import numpy as np\n+from sklearn.model_selection import StratifiedKFold\n+from numpy.testing import assert_array_equal\n+\n+def test_stratified_kfold_shuffle_behavior():\n+    \"\"\"Test that StratifiedKFold's shuffle only changes batch order but not within-strata pairing.\"\"\"\n+    # Create a simple dataset with 20 samples, 10 per class\n+    samples_per_class = 10\n+    X = np.linspace(0, samples_per_class * 2 - 1, samples_per_class * 2)\n+    y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)\n+    \n+    # Create two StratifiedKFold instances with different random states but shuffle=True\n+    skf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n+    skf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=2)\n+    \n+    # Get all test indices for both splits\n+    test_pairs1 = []\n+    test_pairs2 = []\n+    \n+    for _, test_idx in skf1.split(X, y):\n+        # Sort the test indices to compare the pairs regardless of order\n+        test_pairs1.append(tuple(sorted(test_idx)))\n+        \n+    for _, test_idx in skf2.split(X, y):\n+        test_pairs2.append(tuple(sorted(test_idx)))\n+    \n+    # Sort the pairs to compare the sets regardless of fold order\n+    test_pairs1 = sorted(test_pairs1)\n+    test_pairs2 = sorted(test_pairs2)\n+    \n+    # Assert that both splits produce exactly the same pairs\n+    # This demonstrates that shuffle only affects the order of the folds\n+    # but not the actual pairing of samples within strata\n+    assert_array_equal(\n+        test_pairs1,\n+        test_pairs2,\n+        err_msg=\"Different random states should produce the same pairs in different orders\"\n+    )\n+    \n+    # Verify that samples from each class are always paired together\n+    # Each pair should contain one sample from first half (class 1) \n+    # and one from second half (class 0)\n+    for pair in test_pairs1:\n+        assert (pair[0] < samples_per_class and pair[1] >= samples_per_class) or \\\n+               (pair[0] >= samples_per_class and pair[1] < samples_per_class), \\\n+               \"Samples from same class were paired together\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/utils/tests/test_stratified_kfold_shuffle_inverted.py b/sklearn/utils/tests/test_stratified_kfold_shuffle_inverted.py\nnew file mode 100644\nindex 0000000..5dce84b\n--- /dev/null\n+++ b/sklearn/utils/tests/test_stratified_kfold_shuffle_inverted.py\n@@ -0,0 +1,42 @@\n+import numpy as np\n+from sklearn.model_selection import StratifiedKFold\n+from numpy.testing import assert_raises\n+\n+def test_stratified_kfold_shuffle_behavior():\n+    \"\"\"Test that StratifiedKFold's shuffle actually shuffles within strata.\"\"\"\n+    # Create a simple dataset with 20 samples, 10 per class\n+    samples_per_class = 10\n+    X = np.linspace(0, samples_per_class * 2 - 1, samples_per_class * 2)\n+    y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)\n+    \n+    # Create two StratifiedKFold instances with different random states but shuffle=True\n+    skf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n+    skf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=2)\n+    \n+    # Get all test indices for both splits\n+    test_pairs1 = []\n+    test_pairs2 = []\n+    \n+    for _, test_idx in skf1.split(X, y):\n+        # Sort the test indices to compare the pairs regardless of order\n+        test_pairs1.append(tuple(sorted(test_idx)))\n+        \n+    for _, test_idx in skf2.split(X, y):\n+        test_pairs2.append(tuple(sorted(test_idx)))\n+    \n+    # Sort the pairs to compare the sets regardless of fold order\n+    test_pairs1 = sorted(test_pairs1)\n+    test_pairs2 = sorted(test_pairs2)\n+    \n+    # Check if the pairs are different (they should be with different random states)\n+    if test_pairs1 == test_pairs2:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification that stratification is maintained\n+    for pairs in [test_pairs1, test_pairs2]:\n+        for pair in pairs:\n+            # Each pair should contain one sample from each class\n+            first_half = sum(1 for x in pair if x < samples_per_class)\n+            second_half = sum(1 for x in pair if x >= samples_per_class)\n+            assert first_half == 1 and second_half == 1, \\\n+                \"Stratification is broken - pairs don't contain one sample from each class\"\n\\ No newline at end of file\n"
}