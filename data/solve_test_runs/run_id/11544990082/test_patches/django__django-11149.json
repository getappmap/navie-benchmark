{
  "edit_test_file": "tests/admin_inlines/tests.py",
  "test_patch": "diff --git a/tests/admin_inlines/test_admin_inline_permissions.py b/tests/admin_inlines/test_admin_inline_permissions.py\nnew file mode 100644\nindex 0000000..43cda71\n--- /dev/null\n+++ b/tests/admin_inlines/test_admin_inline_permissions.py\n@@ -0,0 +1,61 @@\n+from django.contrib.auth.models import Permission, User\n+from django.contrib.contenttypes.models import ContentType\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+\n+from .models import Author, Book\n+\n+\n+@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+class TestInlinePermissions(TestCase):\n+    \"\"\"Test inline permissions for auto-created M2M fields.\"\"\"\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.user = User.objects.create_user(username='viewonly', password='secret', is_staff=True)\n+        # Give view permissions only\n+        author_ct = ContentType.objects.get_for_model(Author)\n+        book_ct = ContentType.objects.get_for_model(Book)\n+        view_author = Permission.objects.get(codename='view_author', content_type=author_ct)\n+        view_book = Permission.objects.get(codename='view_book', content_type=book_ct)\n+        cls.user.user_permissions.add(view_author, view_book)\n+        # Create test data\n+        cls.author = Author.objects.create(name='Test Author')\n+        cls.book = Book.objects.create(name='Test Book')\n+        cls.author.books.add(cls.book)\n+\n+    def setUp(self):\n+        self.client.force_login(self.user)\n+\n+    def test_m2m_inline_view_only_permission(self):\n+        \"\"\"\n+        Users with only view permissions should not be able to edit M2M inlines.\n+        However, the issue allows them to modify the M2M relationships.\n+        \"\"\"\n+        # Get the change form\n+        response = self.client.get(\n+            reverse('admin:admin_inlines_author_change', args=[self.author.pk])\n+        )\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Try to modify the M2M relationship by removing the book\n+        post_data = {\n+            'name': self.author.name,\n+            'Author_books-TOTAL_FORMS': '1',\n+            'Author_books-INITIAL_FORMS': '1',\n+            'Author_books-MIN_NUM_FORMS': '0',\n+            'Author_books-MAX_NUM_FORMS': '1000',\n+            'Author_books-0-id': str(self.author.books.through.objects.first().pk),\n+            'Author_books-0-author': str(self.author.pk),\n+            'Author_books-0-DELETE': 'on',  # Try to delete the relationship\n+        }\n+        response = self.client.post(\n+            reverse('admin:admin_inlines_author_change', args=[self.author.pk]),\n+            post_data\n+        )\n+        \n+        # The form submission succeeds (demonstrating the issue)\n+        self.assertEqual(response.status_code, 302)\n+        \n+        # The M2M relationship was actually modified despite only having view permission\n+        self.assertEqual(self.author.books.count(), 0)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/admin_inlines/test_admin_inline_permissions_inverted.py b/tests/admin_inlines/test_admin_inline_permissions_inverted.py\nnew file mode 100644\nindex 0000000..6f16eae\n--- /dev/null\n+++ b/tests/admin_inlines/test_admin_inline_permissions_inverted.py\n@@ -0,0 +1,64 @@\n+from django.contrib.auth.models import Permission, User\n+from django.contrib.contenttypes.models import ContentType\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+\n+from .models import Author, Book\n+\n+\n+@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+class TestInlinePermissions(TestCase):\n+    \"\"\"Test inline permissions for auto-created M2M fields.\"\"\"\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.user = User.objects.create_user(username='viewonly', password='secret', is_staff=True)\n+        # Give view permissions only\n+        author_ct = ContentType.objects.get_for_model(Author)\n+        book_ct = ContentType.objects.get_for_model(Book)\n+        view_author = Permission.objects.get(codename='view_author', content_type=author_ct)\n+        view_book = Permission.objects.get(codename='view_book', content_type=book_ct)\n+        cls.user.user_permissions.add(view_author, view_book)\n+        # Create test data\n+        cls.author = Author.objects.create(name='Test Author')\n+        cls.book = Book.objects.create(name='Test Book')\n+        cls.author.books.add(cls.book)\n+\n+    def setUp(self):\n+        self.client.force_login(self.user)\n+\n+    def test_m2m_inline_view_only_permission(self):\n+        \"\"\"\n+        Users with only view permissions should not be able to edit M2M inlines.\n+        The test should fail if they can modify the M2M relationships.\n+        \"\"\"\n+        # Get the change form\n+        response = self.client.get(\n+            reverse('admin:admin_inlines_author_change', args=[self.author.pk])\n+        )\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Try to modify the M2M relationship by removing the book\n+        post_data = {\n+            'name': self.author.name,\n+            'Author_books-TOTAL_FORMS': '1',\n+            'Author_books-INITIAL_FORMS': '1',\n+            'Author_books-MIN_NUM_FORMS': '0',\n+            'Author_books-MAX_NUM_FORMS': '1000',\n+            'Author_books-0-id': str(self.author.books.through.objects.first().pk),\n+            'Author_books-0-author': str(self.author.pk),\n+            'Author_books-0-DELETE': 'on',  # Try to delete the relationship\n+        }\n+        response = self.client.post(\n+            reverse('admin:admin_inlines_author_change', args=[self.author.pk]),\n+            post_data\n+        )\n+\n+        # The form submission should be rejected for view-only users\n+        if response.status_code == 302:\n+            raise AssertionError(\"__BUG__HERE__: Users with view-only permission should not be able to modify M2M relationships\")\n+\n+        # Verify the M2M relationship was not modified\n+        self.author.refresh_from_db()\n+        self.assertEqual(self.author.books.count(), 1, \n+            \"M2M relationship should not be modifiable with view-only permissions\")\n\\ No newline at end of file\n"
}