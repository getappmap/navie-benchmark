{
  "edit_test_file": "tests/aggregation/tests.py",
  "test_patch": "diff --git a/tests/aggregation/test_aggregate_default_after_annotate.py b/tests/aggregation/test_aggregate_default_after_annotate.py\nnew file mode 100644\nindex 0000000..d060790\n--- /dev/null\n+++ b/tests/aggregation/test_aggregate_default_after_annotate.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.db.models import F, Sum\n+from django.test import TestCase\n+from django.db.utils import OperationalError\n+\n+from .models import Book, Author, Publisher\n+\n+\n+class AggregateDefaultAfterAnnotateTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.author = Author.objects.create(name='Author 1', age=40)\n+        cls.publisher = Publisher.objects.create(name='Publisher 1', num_awards=3)\n+        cls.b1 = Book.objects.create(\n+            isbn='12345',\n+            name='Book 1',\n+            pages=100,\n+            rating=4.0,\n+            price=10.0,\n+            contact=cls.author,\n+            publisher=cls.publisher,\n+            pubdate='2023-01-01'\n+        )\n+\n+    def test_aggregate_default_after_annotate(self):\n+        \"\"\"\n+        Test that using aggregate() with default after annotate() raises\n+        OperationalError due to invalid SQL generation.\n+        \"\"\"\n+        with self.assertRaises(OperationalError):\n+            Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n\\ No newline at end of file\n",
  "inverted_patch": null
}