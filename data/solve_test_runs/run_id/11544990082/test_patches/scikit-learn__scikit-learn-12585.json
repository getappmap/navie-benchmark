{
  "edit_test_file": "sklearn/tests/test_pipeline.py",
  "test_patch": "diff --git a/sklearn/tests/test_clone_estimator_types.py b/sklearn/tests/test_clone_estimator_types.py\nnew file mode 100644\nindex 0000000..aa4af41\n--- /dev/null\n+++ b/sklearn/tests/test_clone_estimator_types.py\n@@ -0,0 +1,15 @@\n+\"\"\"\n+Test cloning of estimators with estimator types as parameters.\n+\"\"\"\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.utils.testing import assert_raises\n+from sklearn.base import clone\n+\n+\n+def test_clone_estimator_type_param():\n+    \"\"\"Test that clone fails when parameter is an estimator type.\"\"\"\n+    # Create a StandardScaler with another StandardScaler class as a parameter\n+    scaler = StandardScaler(with_mean=StandardScaler)\n+\n+    # Attempting to clone should raise TypeError due to get_params() missing self\n+    assert_raises(TypeError, clone, scaler)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/tests/test_clone_estimator_types_inverted.py b/sklearn/tests/test_clone_estimator_types_inverted.py\nnew file mode 100644\nindex 0000000..d4011b6\n--- /dev/null\n+++ b/sklearn/tests/test_clone_estimator_types_inverted.py\n@@ -0,0 +1,20 @@\n+\"\"\"\n+Test cloning of estimators with estimator types as parameters.\n+\"\"\"\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+\n+\n+def test_clone_estimator_type_param():\n+    \"\"\"Test that clone should work with estimator type parameters.\"\"\"\n+    # Create a StandardScaler with another StandardScaler class as a parameter\n+    scaler = StandardScaler(with_mean=StandardScaler)\n+\n+    # Clone should work with estimator types as parameters\n+    # If it fails, this indicates the presence of the bug\n+    try:\n+        clone(scaler)\n+    except TypeError as e:\n+        if \"get_params() missing 1 required positional argument: 'self'\" in str(e):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        raise  # Re-raise if it's a different TypeError\n"
}