{
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_formset_error_classes.py b/tests/forms_tests/tests/test_formset_error_classes.py\nnew file mode 100644\nindex 0000000..ecb1a18\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formset_error_classes.py\n@@ -0,0 +1,34 @@\n+from django.forms import Form, CharField, formset_factory\n+from django.test import SimpleTestCase\n+from django.core.exceptions import ValidationError\n+\n+\n+class FormsetErrorClassesTest(SimpleTestCase):\n+    \"\"\"Test CSS classes on FormSet errors.\"\"\"\n+\n+    def test_formset_non_form_errors_class(self):\n+        \"\"\"\n+        Test that non-form errors in formsets don't have the 'nonform' CSS class,\n+        which would be consistent with forms having 'nonfield' CSS class.\n+        \"\"\"\n+        class SimpleForm(Form):\n+            field = CharField()\n+\n+        class CustomFormSet(formset_factory(SimpleForm)):\n+            def clean(self):\n+                raise ValidationError('Non-form error')\n+\n+        formset = CustomFormSet({\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1',\n+            'form-0-field': 'value'\n+        })\n+\n+        self.assertFalse(formset.is_valid())\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist\"><li>Non-form error</li></ul>'\n+        )\n+        # The test passes because the 'nonform' class is missing from the error list,\n+        # showing the inconsistency with form errors that have 'nonfield' class\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/forms_tests/tests/test_formset_error_classes_inverted.py b/tests/forms_tests/tests/test_formset_error_classes_inverted.py\nnew file mode 100644\nindex 0000000..e6e3de3\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formset_error_classes_inverted.py\n@@ -0,0 +1,37 @@\n+from django.forms import Form, CharField, formset_factory\n+from django.test import SimpleTestCase\n+from django.core.exceptions import ValidationError\n+\n+\n+class FormsetErrorClassesTest(SimpleTestCase):\n+    \"\"\"Test CSS classes on FormSet errors.\"\"\"\n+\n+    def test_formset_non_form_errors_class(self):\n+        \"\"\"\n+        Test that non-form errors in formsets have the 'nonform' CSS class,\n+        which is consistent with forms having 'nonfield' CSS class.\n+        \"\"\"\n+        class SimpleForm(Form):\n+            field = CharField()\n+\n+        class CustomFormSet(formset_factory(SimpleForm)):\n+            def clean(self):\n+                raise ValidationError('Non-form error')\n+\n+        formset = CustomFormSet({\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1',\n+            'form-0-field': 'value'\n+        })\n+\n+        self.assertFalse(formset.is_valid())\n+        \n+        error_html = str(formset.non_form_errors())\n+        if 'class=\"errorlist nonform\"' not in error_html:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        self.assertHTMLEqual(\n+            error_html,\n+            '<ul class=\"errorlist nonform\"><li>Non-form error</li></ul>'\n+        )\n\\ No newline at end of file\n"
}