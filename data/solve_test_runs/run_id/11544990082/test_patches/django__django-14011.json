{
  "edit_test_file": "tests/servers/test_liveserverthread.py",
  "test_patch": "diff --git a/tests/servers/test_threaded_wsgi_server_db_connections.py b/tests/servers/test_threaded_wsgi_server_db_connections.py\nnew file mode 100644\nindex 0000000..79d22b7\n--- /dev/null\n+++ b/tests/servers/test_threaded_wsgi_server_db_connections.py\n@@ -0,0 +1,41 @@\n+from django.db import DEFAULT_DB_ALIAS, connections\n+from django.test import LiveServerTestCase, TransactionTestCase\n+from django.test.testcases import LiveServerThread\n+from django.core.servers.basehttp import ThreadedWSGIServer\n+\n+\n+class ThreadedWSGIServerConnectionTest(TransactionTestCase):\n+    \"\"\"\n+    Test that ThreadedWSGIServer properly closes database connections.\n+    \"\"\"\n+    available_apps = []\n+\n+    def run_live_server_thread(self, connections_override=None):\n+        thread = LiveServerTestCase._create_server_thread(connections_override)\n+        thread.daemon = True\n+        thread.start()\n+        thread.is_ready.wait()\n+        # Make a request to ensure the server thread uses the database connection\n+        self.client.get('/')\n+        thread.terminate()\n+\n+    def test_threaded_connections_not_closed(self):\n+        \"\"\"\n+        Test that database connections remain open when using ThreadedWSGIServer,\n+        reproducing the issue where connections aren't properly closed.\n+        \"\"\"\n+        conn = connections[DEFAULT_DB_ALIAS]\n+        # Pass a connection to the thread to check if they remain open\n+        connections_override = {DEFAULT_DB_ALIAS: conn}\n+        \n+        # Open a connection to the database\n+        conn.connect()\n+        conn.inc_thread_sharing()\n+        \n+        try:\n+            self.assertIsNotNone(conn.connection)\n+            self.run_live_server_thread(connections_override)\n+            # The connection should be closed but isn't due to the bug\n+            self.assertIsNotNone(conn.connection)\n+        finally:\n+            conn.dec_thread_sharing()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/servers/test_threaded_wsgi_server_db_connections_inverted.py b/tests/servers/test_threaded_wsgi_server_db_connections_inverted.py\nnew file mode 100644\nindex 0000000..030506b\n--- /dev/null\n+++ b/tests/servers/test_threaded_wsgi_server_db_connections_inverted.py\n@@ -0,0 +1,45 @@\n+from django.db import DEFAULT_DB_ALIAS, connections\n+from django.test import LiveServerTestCase, TransactionTestCase\n+from django.test.testcases import LiveServerThread\n+from django.core.servers.basehttp import ThreadedWSGIServer\n+\n+\n+class ThreadedWSGIServerConnectionTest(TransactionTestCase):\n+    \"\"\"\n+    Test that ThreadedWSGIServer properly closes database connections.\n+    \"\"\"\n+    available_apps = []\n+\n+    def run_live_server_thread(self, connections_override=None):\n+        thread = LiveServerTestCase._create_server_thread(connections_override)\n+        thread.daemon = True\n+        thread.start()\n+        thread.is_ready.wait()\n+        # Make a request to ensure the server thread uses the database connection\n+        self.client.get('/')\n+        thread.terminate()\n+\n+    def test_threaded_connections_should_close(self):\n+        \"\"\"\n+        Test that database connections are properly closed when using ThreadedWSGIServer.\n+        The test will fail if connections remain open, indicating the presence of the bug.\n+        \"\"\"\n+        conn = connections[DEFAULT_DB_ALIAS]\n+        # Pass a connection to the thread to check if they remain open\n+        connections_override = {DEFAULT_DB_ALIAS: conn}\n+        \n+        # Open a connection to the database\n+        conn.connect()\n+        conn.inc_thread_sharing()\n+        \n+        try:\n+            self.assertIsNotNone(conn.connection)\n+            self.run_live_server_thread(connections_override)\n+            \n+            # The connection should be closed after thread termination\n+            # If it's not closed (connection is not None), the bug is present\n+            if conn.connection is not None:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            \n+        finally:\n+            conn.dec_thread_sharing()\n\\ No newline at end of file\n"
}