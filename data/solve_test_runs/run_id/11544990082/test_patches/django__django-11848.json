{
  "edit_test_file": "tests/utils_tests/test_http.py",
  "test_patch": "diff --git a/tests/utils_tests/test_http_date_parsing.py b/tests/utils_tests/test_http_date_parsing.py\nnew file mode 100644\nindex 0000000..0752963\n--- /dev/null\n+++ b/tests/utils_tests/test_http_date_parsing.py\n@@ -0,0 +1,37 @@\n+import unittest\n+from datetime import datetime\n+\n+from django.utils.http import parse_http_date\n+\n+\n+class HttpDateParsingTests(unittest.TestCase):\n+    def test_rfc850_two_digit_year_parsing(self):\n+        \"\"\"\n+        RFC 7231 states that two-digit years more than 50 years in the future\n+        should be interpreted as being in the past. The current implementation\n+        instead uses a hard-coded rule where 0-69 maps to 2000-2069.\n+        \"\"\"\n+        # Get current year's last two digits for comparison\n+        current_year = datetime.now().year\n+        current_year_2_digits = current_year % 100\n+        \n+        # Test a two-digit year that should be interpreted as future according to\n+        # current implementation, but should actually be in the past according to RFC 7231\n+        future_year_2_digits = (current_year_2_digits + 5) % 100  # 5 years ahead\n+        date_str = f'Sunday, 06-Nov-{future_year_2_digits:02d} 08:49:37 GMT'\n+        parsed = parse_http_date(date_str)\n+        parsed_date = datetime.utcfromtimestamp(parsed)\n+        \n+        # The implementation will interpret this as being in 2000-2069 if the\n+        # two-digit year is < 70, which is incorrect according to RFC 7231\n+        if future_year_2_digits < 70:\n+            expected_year = 2000 + future_year_2_digits\n+        else:\n+            expected_year = 1900 + future_year_2_digits\n+            \n+        self.assertEqual(\n+            parsed_date.year,\n+            expected_year,\n+            msg=\"Two-digit year parsing does not follow RFC 7231 rules for handling \"\n+                \"dates more than 50 years in the future\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_http_date_parsing_inverted.py b/tests/utils_tests/test_http_date_parsing_inverted.py\nnew file mode 100644\nindex 0000000..8d4679b\n--- /dev/null\n+++ b/tests/utils_tests/test_http_date_parsing_inverted.py\n@@ -0,0 +1,42 @@\n+import unittest\n+from datetime import datetime\n+\n+from django.utils.http import parse_http_date\n+\n+\n+class HttpDateParsingTests(unittest.TestCase):\n+    def test_rfc850_two_digit_year_parsing(self):\n+        \"\"\"\n+        RFC 7231 states that two-digit years more than 50 years in the future\n+        should be interpreted as being in the past. The current implementation\n+        instead uses a hard-coded rule where 0-69 maps to 2000-2069.\n+        \"\"\"\n+        # Get current year's last two digits for comparison\n+        current_year = datetime.now().year\n+        current_year_2_digits = current_year % 100\n+        \n+        # Test a two-digit year that should be interpreted as past according to RFC 7231\n+        future_year_2_digits = (current_year_2_digits + 5) % 100  # 5 years ahead\n+        date_str = f'Sunday, 06-Nov-{future_year_2_digits:02d} 08:49:37 GMT'\n+        parsed = parse_http_date(date_str)\n+        parsed_date = datetime.utcfromtimestamp(parsed)\n+        \n+        # Calculate the correct year according to RFC 7231\n+        # If the two-digit year is more than 50 years in the future,\n+        # it should be interpreted as the most recent past year with same digits\n+        if future_year_2_digits < current_year_2_digits:\n+            rfc_compliant_year = 2000 + future_year_2_digits\n+        else:\n+            rfc_compliant_year = 1900 + future_year_2_digits\n+\n+        # The implementation incorrectly uses a hard-coded rule where 0-69 maps to 2000-2069\n+        actual_implementation_year = parsed_date.year\n+        \n+        if actual_implementation_year != rfc_compliant_year:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        self.assertEqual(\n+            actual_implementation_year,\n+            rfc_compliant_year,\n+            msg=\"Two-digit year parsing does not follow RFC 7231 rules\"\n+        )\n\\ No newline at end of file\n"
}