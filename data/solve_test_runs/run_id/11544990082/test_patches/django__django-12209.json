{
  "edit_test_file": "tests/model_fields/test_uuid.py",
  "test_patch": "diff --git a/tests/model_fields/test_pk_save_behavior.py b/tests/model_fields/test_pk_save_behavior.py\nnew file mode 100644\nindex 0000000..3f3cc02\n--- /dev/null\n+++ b/tests/model_fields/test_pk_save_behavior.py\n@@ -0,0 +1,24 @@\n+import uuid\n+from django.db import IntegrityError\n+from django.test import TestCase\n+from .models import PrimaryKeyUUIDModel\n+\n+\n+class UUIDPKSaveBehaviorTests(TestCase):\n+    def test_save_with_existing_pk_causes_integrity_error(self):\n+        \"\"\"\n+        When saving a model instance with an explicit pk value that matches\n+        an existing record, an IntegrityError should be raised in Django 3.0+\n+        due to an INSERT being attempted instead of an UPDATE.\n+        \"\"\"\n+        # Create initial instance\n+        instance1 = PrimaryKeyUUIDModel.objects.create()\n+        pk = instance1.pk\n+\n+        # Create new instance with same pk\n+        instance2 = PrimaryKeyUUIDModel(pk=pk)\n+\n+        # In Django 3.0+, this should raise an IntegrityError because it tries\n+        # to INSERT instead of UPDATE\n+        with self.assertRaises(IntegrityError):\n+            instance2.save()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_pk_save_behavior_inverted.py b/tests/model_fields/test_pk_save_behavior_inverted.py\nnew file mode 100644\nindex 0000000..215f707\n--- /dev/null\n+++ b/tests/model_fields/test_pk_save_behavior_inverted.py\n@@ -0,0 +1,35 @@\n+import uuid\n+from django.db import IntegrityError, transaction\n+from django.test import TestCase\n+from .models import PrimaryKeyUUIDModel\n+\n+\n+class UUIDPKSaveBehaviorTests(TestCase):\n+    def test_save_with_existing_pk_should_update(self):\n+        \"\"\"\n+        When saving a model instance with an explicit pk value that matches\n+        an existing record, it should perform an UPDATE operation instead\n+        of attempting an INSERT.\n+        \"\"\"\n+        # Create initial instance\n+        instance1 = PrimaryKeyUUIDModel.objects.create()\n+        pk = instance1.pk\n+        \n+        # Create new instance with same pk\n+        instance2 = PrimaryKeyUUIDModel(pk=pk)\n+        \n+        try:\n+            with transaction.atomic():\n+                instance2.save()\n+        except IntegrityError:\n+            # If we get here, it means Django attempted an INSERT\n+            # instead of an UPDATE, which is the bug we're testing for\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # If we get here, the save operation succeeded (correct behavior)\n+        # Verify that we only have one record in the database\n+        self.assertEqual(\n+            PrimaryKeyUUIDModel.objects.filter(pk=pk).count(),\n+            1,\n+            \"Expected only one record with this pk\"\n+        )\n\\ No newline at end of file\n"
}