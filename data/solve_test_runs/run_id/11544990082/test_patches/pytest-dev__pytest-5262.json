{
  "edit_test_file": "testing/test_assertrewrite.py",
  "test_patch": "diff --git a/testing/test_encoded_file_binary_mode.py b/testing/test_encoded_file_binary_mode.py\nnew file mode 100644\nindex 0000000..785bea2\n--- /dev/null\n+++ b/testing/test_encoded_file_binary_mode.py\n@@ -0,0 +1,29 @@\n+import io\n+import pytest\n+from _pytest.capture import EncodedFile\n+\n+def test_encoded_file_binary_mode():\n+    \"\"\"\n+    Test that EncodedFile incorrectly exposes binary mode from the underlying buffer\n+    while not actually supporting binary writes.\n+    \"\"\"\n+    # Create a file-like object with a binary mode\n+    buffer = io.StringIO()\n+    buffer.mode = \"rb+\"  # Simulate binary mode\n+    \n+    # Create EncodedFile wrapping the buffer\n+    encoded_file = EncodedFile(buffer, encoding=\"utf-8\")\n+    \n+    # Try to write bytes to the file\n+    test_bytes = b\"[generic] example: Requesting header\\n\"\n+    \n+    # This should raise TypeError because EncodedFile.write() requires str\n+    # even though the mode suggests it accepts bytes\n+    with pytest.raises(TypeError) as excinfo:\n+        encoded_file.write(test_bytes)\n+    \n+    # Verify the specific error message that indicates bytes are not accepted\n+    assert str(excinfo.value) == \"write() argument must be str, not bytes\"\n+    \n+    # Verify that the mode contains 'b' which incorrectly suggests binary support\n+    assert \"b\" in encoded_file.mode\n",
  "inverted_patch": "diff --git a/testing/test_encoded_file_binary_mode_inverted.py b/testing/test_encoded_file_binary_mode_inverted.py\nnew file mode 100644\nindex 0000000..eec01e4\n--- /dev/null\n+++ b/testing/test_encoded_file_binary_mode_inverted.py\n@@ -0,0 +1,29 @@\n+import io\n+import pytest\n+from _pytest.capture import EncodedFile\n+\n+def test_encoded_file_binary_mode():\n+    \"\"\"\n+    Test that EncodedFile should not expose binary mode from the underlying buffer\n+    as it doesn't support binary writes.\n+    \"\"\"\n+    # Create a file-like object with a binary mode\n+    buffer = io.StringIO()\n+    buffer.mode = \"rb+\"  # Simulate binary mode\n+    \n+    # Create EncodedFile wrapping the buffer\n+    encoded_file = EncodedFile(buffer, encoding=\"utf-8\")\n+    \n+    # Test if 'b' is in the mode - this should fail when the bug is present\n+    if \"b\" in encoded_file.mode:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Additional verification that the file doesn't actually support binary writes\n+    test_bytes = b\"[generic] example: Requesting header\\n\"\n+    \n+    # Verify that attempting to write bytes raises TypeError\n+    with pytest.raises(TypeError) as excinfo:\n+        encoded_file.write(test_bytes)\n+    \n+    # Verify the specific error message\n+    assert str(excinfo.value) == \"write() argument must be str, not bytes\"\n\\ No newline at end of file\n"
}