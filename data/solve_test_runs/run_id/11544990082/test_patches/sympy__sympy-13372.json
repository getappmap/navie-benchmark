{
  "edit_test_file": "sympy/core/tests/test_numbers.py",
  "test_patch": "diff --git a/sympy/core/tests/test_mul_evalf_order.py b/sympy/core/tests/test_mul_evalf_order.py\nnew file mode 100644\nindex 0000000..cf5c340\n--- /dev/null\n+++ b/sympy/core/tests/test_mul_evalf_order.py\n@@ -0,0 +1,14 @@\n+from sympy import Mul, Symbol, Max\n+from sympy.utilities.pytest import raises\n+\n+def test_mul_evalf_order():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # First order works fine\n+    expr1 = Mul(x, Max(0, y), evaluate=False)\n+    assert expr1.evalf() == expr1  # No error\n+    \n+    # Second order raises UnboundLocalError\n+    expr2 = Mul(Max(0, y), x, evaluate=False)\n+    raises(UnboundLocalError, lambda: expr2.evalf())\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/core/tests/test_mul_evalf_order_inverted.py b/sympy/core/tests/test_mul_evalf_order_inverted.py\nnew file mode 100644\nindex 0000000..e83ae7d\n--- /dev/null\n+++ b/sympy/core/tests/test_mul_evalf_order_inverted.py\n@@ -0,0 +1,19 @@\n+from sympy import Mul, Symbol, Max\n+\n+def test_mul_evalf_order():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # First order\n+    expr1 = Mul(x, Max(0, y), evaluate=False)\n+    result1 = expr1.evalf()\n+    \n+    # Second order should give same result\n+    expr2 = Mul(Max(0, y), x, evaluate=False)\n+    try:\n+        result2 = expr2.evalf()\n+    except UnboundLocalError:\n+        raise AssertionError(\"__BUG__HERE__: UnboundLocalError when Max is first argument\")\n+        \n+    # Both orders should give same result\n+    assert result1 == result2, \"__BUG__HERE__: Different results for different argument orders\"\n\\ No newline at end of file\n"
}