{
  "edit_test_file": "tests/test_ext_autodoc.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_literal_annotations.py b/tests/test_ext_autodoc_literal_annotations.py\nnew file mode 100644\nindex 0000000..b3d6701\n--- /dev/null\n+++ b/tests/test_ext_autodoc_literal_annotations.py\n@@ -0,0 +1,45 @@\n+\"\"\"\n+    test_ext_autodoc_literal_annotations\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test sphinx.ext.autodoc with Literal type annotations.\n+\"\"\"\n+\n+import pytest\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                   confoverrides={'nitpicky': True})\n+def test_literal_annotations_nitpick(app, warning):\n+    # Create index.rst with autodoc directive\n+    index_rst = '''\n+.. automodule:: target.literal_annotations\n+   :members:\n+'''\n+    (app.srcdir / 'index.rst').write_text(index_rst, encoding='utf-8')\n+\n+    # Create test module with Literal annotations\n+    text = '''\n+from typing import Literal, overload\n+\n+@overload\n+def foo(x: Literal[True]) -> int:\n+    ...\n+\n+@overload\n+def foo(x: Literal[False]) -> str:\n+    ...\n+\n+def foo(x: bool):\n+    \"\"\"a func\"\"\"\n+    return 1 if x else \"foo\"\n+'''\n+    (app.srcdir / 'target' / 'literal_annotations.py').write_text(text, encoding='utf-8')\n+\n+    # Build the docs with nitpick enabled\n+    app.build()\n+\n+    # Check that nitpick warning about missing True/False classes was generated\n+    warnings = warning.getvalue()\n+    assert \"WARNING: py:class reference target not found: True\" in warnings\n+    assert \"WARNING: py:class reference target not found: False\" in warnings\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_literal_annotations_inverted.py b/tests/test_ext_autodoc_literal_annotations_inverted.py\nnew file mode 100644\nindex 0000000..9bac6c7\n--- /dev/null\n+++ b/tests/test_ext_autodoc_literal_annotations_inverted.py\n@@ -0,0 +1,48 @@\n+\"\"\"\n+    test_ext_autodoc_literal_annotations\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test sphinx.ext.autodoc with Literal type annotations.\n+\"\"\"\n+\n+import pytest\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc',\n+                   confoverrides={'nitpicky': True})\n+def test_literal_annotations_nitpick(app, warning):\n+    # Create index.rst with autodoc directive\n+    index_rst = '''\n+.. automodule:: target.literal_annotations\n+   :members:\n+'''\n+    (app.srcdir / 'index.rst').write_text(index_rst, encoding='utf-8')\n+\n+    # Create test module with Literal annotations\n+    text = '''\n+from typing import Literal, overload\n+\n+@overload\n+def foo(x: Literal[True]) -> int:\n+    ...\n+\n+@overload\n+def foo(x: Literal[False]) -> str:\n+    ...\n+\n+def foo(x: bool):\n+    \"\"\"a func\"\"\"\n+    return 1 if x else \"foo\"\n+'''\n+    (app.srcdir / 'target' / 'literal_annotations.py').write_text(text, encoding='utf-8')\n+\n+    # Build the docs with nitpick enabled\n+    app.build()\n+\n+    # Check that nitpick warning about missing True/False classes was generated\n+    warnings = warning.getvalue()\n+    \n+    # The test should now fail when these warnings are present\n+    if \"WARNING: py:class reference target not found: True\" in warnings or \\\n+       \"WARNING: py:class reference target not found: False\" in warnings:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}