{
  "edit_test_file": "tests/utils_tests/test_numberformat.py",
  "test_patch": "diff --git a/tests/utils_tests/test_decimal_format.py b/tests/utils_tests/test_decimal_format.py\nnew file mode 100644\nindex 0000000..d53fe24\n--- /dev/null\n+++ b/tests/utils_tests/test_decimal_format.py\n@@ -0,0 +1,22 @@\n+from decimal import Decimal\n+\n+from django.test import SimpleTestCase\n+from django.utils.numberformat import format as nformat\n+\n+\n+class TestDecimalFormat(SimpleTestCase):\n+    \"\"\"Test decimal formatting behavior with very small numbers.\"\"\"\n+\n+    def test_small_decimal_exponential_notation(self):\n+        \"\"\"\n+        Test that very small decimal numbers are rendered in exponential notation\n+        instead of decimal format when using decimal_pos parameter.\n+        \"\"\"\n+        # This number is small enough to be displayed with regular decimal places\n+        self.assertEqual(nformat(Decimal('1e-199'), '.', decimal_pos=2), '0.00')\n+        \n+        # This number gets displayed in exponential notation due to internal cutoff\n+        self.assertEqual(nformat(Decimal('1e-200'), '.', decimal_pos=2), '1.00e-200')\n+        \n+        # Both numbers should ideally be displayed the same way with trailing zeros\n+        # based on decimal_pos, but the second one uses exponential notation instead\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_decimal_format_inverted.py b/tests/utils_tests/test_decimal_format_inverted.py\nnew file mode 100644\nindex 0000000..564089f\n--- /dev/null\n+++ b/tests/utils_tests/test_decimal_format_inverted.py\n@@ -0,0 +1,26 @@\n+from decimal import Decimal\n+\n+from django.test import SimpleTestCase\n+from django.utils.numberformat import format as nformat\n+\n+\n+class TestDecimalFormat(SimpleTestCase):\n+    \"\"\"Test decimal formatting behavior with very small numbers.\"\"\"\n+\n+    def test_small_decimal_exponential_notation(self):\n+        \"\"\"\n+        Test that very small decimal numbers are consistently formatted with\n+        decimal places rather than switching to exponential notation when using\n+        decimal_pos parameter.\n+        \"\"\"\n+        # This number is formatted with regular decimal places as expected\n+        self.assertEqual(nformat(Decimal('1e-199'), '.', decimal_pos=2), '0.00')\n+        \n+        # This number should also be formatted with decimal places, not exponential\n+        formatted_value = nformat(Decimal('1e-200'), '.', decimal_pos=2)\n+        if formatted_value == '1.00e-200':\n+            raise AssertionError('__BUG__HERE__')\n+        \n+        # The expected behavior is that both numbers should be formatted with\n+        # decimal places when decimal_pos is specified\n+        self.assertEqual(formatted_value, '0.00')\n\\ No newline at end of file\n"
}