{
  "edit_test_file": "lib/matplotlib/tests/test_offsetbox.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hpacker_alignment.py b/lib/matplotlib/tests/test_hpacker_alignment.py\nnew file mode 100644\nindex 0000000..c60052b\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker_alignment.py\n@@ -0,0 +1,43 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+from numpy.testing import assert_allclose\n+\n+def test_hpacker_alignment_bottom():\n+    \"\"\"\n+    Test that HPacker's 'bottom' alignment appears reversed.\n+    The test verifies that when align='bottom' is used, the shorter rectangle\n+    is actually aligned to the top of the taller rectangle, indicating the bug.\n+    \"\"\"\n+    # Create two drawing areas of different heights\n+    da1 = DrawingArea(10, 20)\n+    rect1 = Rectangle((0, 0), 10, 20)\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = Rectangle((0, 0), 10, 30)\n+    da2.add_artist(rect2)\n+\n+    # Pack with bottom alignment\n+    pack = HPacker(children=[da1, da2], pad=10, sep=10, align=\"bottom\")\n+    \n+    # Create figure and add the packed boxes\n+    fig, ax = plt.subplots()\n+    box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+    ax.add_artist(box)\n+    \n+    # Draw to get the renderer\n+    fig.canvas.draw()\n+    \n+    # Get the positions of both rectangles in display coordinates\n+    renderer = fig.canvas.get_renderer()\n+    bbox1 = da1.get_window_extent(renderer)\n+    bbox2 = da2.get_window_extent(renderer)\n+    \n+    # The bug causes the shorter rectangle (da1) to be aligned with the top\n+    # of the taller rectangle (da2) when using bottom alignment\n+    # Assert that the tops are aligned (within a small tolerance)\n+    assert_allclose(bbox1.y1, bbox2.y1, atol=1.0)\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_hpacker_alignment_inverted.py b/lib/matplotlib/tests/test_hpacker_alignment_inverted.py\nnew file mode 100644\nindex 0000000..e06fe2c\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hpacker_alignment_inverted.py\n@@ -0,0 +1,43 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\n+from matplotlib.patches import Rectangle\n+import numpy as np\n+from numpy.testing import assert_allclose\n+\n+def test_hpacker_alignment_bottom():\n+    \"\"\"\n+    Test that HPacker's 'bottom' alignment works correctly.\n+    The test should fail when the shorter rectangle is aligned to the top\n+    of the taller rectangle instead of the bottom.\n+    \"\"\"\n+    # Create two drawing areas of different heights\n+    da1 = DrawingArea(10, 20)\n+    rect1 = Rectangle((0, 0), 10, 20)\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = Rectangle((0, 0), 10, 30)\n+    da2.add_artist(rect2)\n+\n+    # Pack with bottom alignment\n+    pack = HPacker(children=[da1, da2], pad=10, sep=10, align=\"bottom\")\n+    \n+    # Create figure and add the packed boxes\n+    fig, ax = plt.subplots()\n+    box = AnchoredOffsetbox(child=pack, loc=\"center\")\n+    ax.add_artist(box)\n+    \n+    # Draw to get the renderer\n+    fig.canvas.draw()\n+    \n+    # Get the positions of both rectangles in display coordinates\n+    renderer = fig.canvas.get_renderer()\n+    bbox1 = da1.get_window_extent(renderer)\n+    bbox2 = da2.get_window_extent(renderer)\n+    \n+    # When align=\"bottom\" is used, the bottoms of the rectangles should be aligned\n+    # If they're not (i.e., if the bug is present), the test should fail\n+    if abs(bbox1.y0 - bbox2.y0) > 1.0:  # Using 1.0 as tolerance\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    plt.close(fig)\n\\ No newline at end of file\n"
}