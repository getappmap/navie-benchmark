{
  "edit_test_file": "tests/expressions_window/tests.py",
  "test_patch": "diff --git a/tests/expressions_window/test_window_function_aggregation.py b/tests/expressions_window/test_window_function_aggregation.py\nnew file mode 100644\nindex 0000000..4d72d07\n--- /dev/null\n+++ b/tests/expressions_window/test_window_function_aggregation.py\n@@ -0,0 +1,52 @@\n+from django.db.models import Sum, Window, F\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from django.db.utils import DatabaseError\n+import datetime\n+from decimal import Decimal\n+\n+from .models import Employee, Classification\n+\n+\n+class WindowFunctionAggregationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        classification = Classification.objects.create()\n+        Employee.objects.bulk_create(\n+            [\n+                Employee(\n+                    name=e[0],\n+                    salary=e[1],\n+                    department=e[2],\n+                    hire_date=e[3],\n+                    age=e[4],\n+                    bonus=Decimal(e[1]) / 400,\n+                    classification=classification,\n+                )\n+                for e in [\n+                    (\"Jones\", 45000, \"Accounting\", datetime.datetime(2005, 11, 1), 20),\n+                    (\"Williams\", 37000, \"Accounting\", datetime.datetime(2009, 6, 1), 20),\n+                    (\"Jenson\", 45000, \"Accounting\", datetime.datetime(2008, 4, 1), 20),\n+                    (\"Adams\", 50000, \"Accounting\", datetime.datetime(2013, 7, 1), 50),\n+                ]\n+            ]\n+        )\n+\n+    def test_aggregate_over_window_function(self):\n+        \"\"\"\n+        Test that attempting to use an aggregate function over a window function\n+        raises a DatabaseError.\n+        \"\"\"\n+        with self.assertRaises(DatabaseError):\n+            # First annotate with a window function\n+            queryset = Employee.objects.annotate(\n+                cumulative_salary=Window(\n+                    expression=Sum(\"salary\"),\n+                    order_by=F(\"hire_date\").asc(),\n+                )\n+            )\n+            # Then try to aggregate over the window function result\n+            result = queryset.aggregate(\n+                total_salary=Sum(\"salary\"),\n+                total_cumulative=Sum(\"cumulative_salary\")\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/expressions_window/test_window_function_aggregation_inverted.py b/tests/expressions_window/test_window_function_aggregation_inverted.py\nnew file mode 100644\nindex 0000000..50584f8\n--- /dev/null\n+++ b/tests/expressions_window/test_window_function_aggregation_inverted.py\n@@ -0,0 +1,58 @@\n+from django.db.models import Sum, Window, F\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from django.db.utils import DatabaseError\n+import datetime\n+from decimal import Decimal\n+\n+from .models import Employee, Classification\n+\n+\n+class WindowFunctionAggregationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        classification = Classification.objects.create()\n+        Employee.objects.bulk_create(\n+            [\n+                Employee(\n+                    name=e[0],\n+                    salary=e[1],\n+                    department=e[2],\n+                    hire_date=e[3],\n+                    age=e[4],\n+                    bonus=Decimal(e[1]) / 400,\n+                    classification=classification,\n+                )\n+                for e in [\n+                    (\"Jones\", 45000, \"Accounting\", datetime.datetime(2005, 11, 1), 20),\n+                    (\"Williams\", 37000, \"Accounting\", datetime.datetime(2009, 6, 1), 20),\n+                    (\"Jenson\", 45000, \"Accounting\", datetime.datetime(2008, 4, 1), 20),\n+                    (\"Adams\", 50000, \"Accounting\", datetime.datetime(2013, 7, 1), 50),\n+                ]\n+            ]\n+        )\n+\n+    def test_aggregate_over_window_function(self):\n+        \"\"\"\n+        Test that aggregating over a window function should not be allowed.\n+        The test should fail with \"__BUG__HERE__\" when the issue is observed.\n+        \"\"\"\n+        # First annotate with a window function\n+        queryset = Employee.objects.annotate(\n+            cumulative_salary=Window(\n+                expression=Sum(\"salary\"),\n+                order_by=F(\"hire_date\").asc(),\n+            )\n+        )\n+        \n+        # Then try to aggregate over the window function result\n+        try:\n+            result = queryset.aggregate(\n+                total_salary=Sum(\"salary\"),\n+                total_cumulative=Sum(\"cumulative_salary\")\n+            )\n+        except DatabaseError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        # If we get here without an exception, something is wrong\n+        self.fail(\"Expected DatabaseError was not raised\")\n\\ No newline at end of file\n"
}