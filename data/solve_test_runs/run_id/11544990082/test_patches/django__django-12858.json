{
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_lookup_ordering.py b/tests/invalid_models_tests/test_lookup_ordering.py\nnew file mode 100644\nindex 0000000..d4c1a3d\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_lookup_ordering.py\n@@ -0,0 +1,34 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class LookupOrderingTests(SimpleTestCase):\n+    def test_ordering_with_isnull_lookup(self):\n+        \"\"\"\n+        Test that models.E015 is raised when using __isnull lookup in ordering,\n+        even though the ordering works at runtime.\n+        \"\"\"\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['supply__product__parent__isnull']\n+\n+        # The check should raise models.E015 even though the ordering works at runtime\n+        self.assertEqual(Stock.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'supply__product__parent__isnull'.\",\n+                obj=Stock,\n+                id='models.E015',\n+            )\n+        ])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/invalid_models_tests/test_lookup_ordering_inverted.py b/tests/invalid_models_tests/test_lookup_ordering_inverted.py\nnew file mode 100644\nindex 0000000..128d5ad\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_lookup_ordering_inverted.py\n@@ -0,0 +1,34 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class LookupOrderingTests(SimpleTestCase):\n+    def test_ordering_with_isnull_lookup(self):\n+        \"\"\"\n+        Test that models.E015 should not be raised when using __isnull lookup in ordering,\n+        as the ordering works correctly at runtime.\n+        \"\"\"\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['supply__product__parent__isnull']\n+\n+        # Since the ordering works at runtime, the check should not raise models.E015\n+        check_errors = Stock.check()\n+        \n+        if check_errors and any(\n+            error.id == 'models.E015' and \n+            'supply__product__parent__isnull' in error.msg\n+            for error in check_errors\n+        ):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}