{
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "test_patch": "diff --git a/sympy/utilities/tests/test_tuple_codegen.py b/sympy/utilities/tests/test_tuple_codegen.py\nnew file mode 100644\nindex 0000000..d54d24d\n--- /dev/null\n+++ b/sympy/utilities/tests/test_tuple_codegen.py\n@@ -0,0 +1,24 @@\n+from sympy.utilities.lambdify import lambdify\n+import inspect\n+\n+def test_single_element_tuple_codegen():\n+    # Test that single element tuple is generated correctly\n+    f = lambdify([], tuple([1]))\n+    source = inspect.getsource(f)\n+    \n+    # The issue shows that the comma is missing in the generated code\n+    # This test verifies the incorrect behavior where (1) is generated instead of (1,)\n+    assert 'return (1)' in source\n+    \n+    # Verify that this actually causes the function to return an int instead of a tuple\n+    result = f()\n+    assert isinstance(result, int)\n+    assert result == 1\n+    \n+    # Verify that multi-element tuples still work correctly\n+    g = lambdify([], tuple([1, 2]))\n+    source = inspect.getsource(g)\n+    assert 'return (1, 2)' in source\n+    result = g()\n+    assert isinstance(result, tuple)\n+    assert result == (1, 2)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/utilities/tests/test_tuple_codegen_inverted.py b/sympy/utilities/tests/test_tuple_codegen_inverted.py\nnew file mode 100644\nindex 0000000..c9c777b\n--- /dev/null\n+++ b/sympy/utilities/tests/test_tuple_codegen_inverted.py\n@@ -0,0 +1,25 @@\n+from sympy.utilities.lambdify import lambdify\n+import inspect\n+\n+def test_single_element_tuple_codegen():\n+    # Test that single element tuple is generated correctly\n+    f = lambdify([], tuple([1]))\n+    source = inspect.getsource(f)\n+    \n+    # The generated code should include a comma for single-element tuples\n+    # If '(1)' is found instead of '(1,)', it indicates the bug is present\n+    if 'return (1)' in source:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    \n+    # Verify that the function returns a proper tuple\n+    result = f()\n+    assert isinstance(result, tuple), \"Function should return a tuple\"\n+    assert result == (1,), \"Function should return a single-element tuple (1,)\"\n+    \n+    # Verify that multi-element tuples work correctly\n+    g = lambdify([], tuple([1, 2]))\n+    source = inspect.getsource(g)\n+    assert 'return (1, 2)' in source\n+    result = g()\n+    assert isinstance(result, tuple)\n+    assert result == (1, 2)\n\\ No newline at end of file\n"
}