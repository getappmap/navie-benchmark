{
  "edit_test_file": "lib/matplotlib/tests/test_figure.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_3d_visibility.py b/lib/matplotlib/tests/test_3d_visibility.py\nnew file mode 100644\nindex 0000000..d1bccd8\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_3d_visibility.py\n@@ -0,0 +1,31 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_3d_visibility():\n+    \"\"\"\n+    Test that verifies the issue where set_visible(False) does not work\n+    properly for 3D projections.\n+    \"\"\"\n+    # Create figure with two 3D subplots\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(121, projection='3d')\n+    ax2 = fig.add_subplot(122, projection='3d')\n+\n+    # Add some data to both axes\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+\n+    # Attempt to hide the first subplot\n+    ax1.set_visible(False)\n+\n+    # Draw the figure to ensure all artists are updated\n+    fig.canvas.draw()\n+\n+    # The bug is that the axis should still be visible in the rendered output\n+    # even though we set visible to False\n+    assert ax1.get_visible() is False  # Verify the property was set\n+    assert len(ax1.get_children()) > 0  # Verify axis still has visible children\n+    assert any(artist.get_visible() for artist in ax1.get_children())  # Some artists remain visible\n+\n+    plt.close()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_3d_visibility_inverted.py b/lib/matplotlib/tests/test_3d_visibility_inverted.py\nnew file mode 100644\nindex 0000000..9070b47\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_3d_visibility_inverted.py\n@@ -0,0 +1,33 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_3d_visibility():\n+    \"\"\"\n+    Test that verifies the issue where set_visible(False) does not work\n+    properly for 3D projections. The test should FAIL when the bug is present.\n+    \"\"\"\n+    # Create figure with two 3D subplots\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(121, projection='3d')\n+    ax2 = fig.add_subplot(122, projection='3d')\n+\n+    # Add some data to both axes\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+\n+    # Attempt to hide the first subplot\n+    ax1.set_visible(False)\n+\n+    # Draw the figure to ensure all artists are updated\n+    fig.canvas.draw()\n+\n+    # Verify the property was set\n+    assert ax1.get_visible() is False\n+\n+    # Check if any artists are visible - this should raise an error if the bug is present\n+    visible_artists = [artist for artist in ax1.get_children() if artist.get_visible()]\n+    if visible_artists:\n+        raise AssertionError(\"__BUG__HERE__\")\n+\n+    plt.close()\n\\ No newline at end of file\n"
}