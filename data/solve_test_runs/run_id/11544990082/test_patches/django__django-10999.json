{
  "edit_test_file": "tests/utils_tests/test_dateparse.py",
  "test_patch": "diff --git a/tests/utils_tests/test_negative_duration_parsing.py b/tests/utils_tests/test_negative_duration_parsing.py\nnew file mode 100644\nindex 0000000..d6cdfbb\n--- /dev/null\n+++ b/tests/utils_tests/test_negative_duration_parsing.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from datetime import timedelta\n+\n+from django.utils.dateparse import parse_duration\n+\n+\n+class NegativeDurationParseTests(unittest.TestCase):\n+    def test_negative_hours_minutes_seconds(self):\n+        \"\"\"\n+        Test that parse_duration() fails to parse durations with negative hours\n+        when followed by negative minutes and seconds.\n+        \"\"\"\n+        # This should parse to a timedelta of -1 hour, -15 minutes, -30 seconds\n+        # but currently fails due to the regex pattern issue\n+        duration_string = '-1:-15:-30'\n+        expected = timedelta(hours=-1, minutes=-15, seconds=-30)\n+        \n+        # The current implementation will return None because the regex doesn't match\n+        self.assertIsNone(parse_duration(duration_string))\n+        \n+        # When the issue is fixed, this would be the expected behavior:\n+        # self.assertEqual(parse_duration(duration_string), expected)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_negative_duration_parsing_inverted.py b/tests/utils_tests/test_negative_duration_parsing_inverted.py\nnew file mode 100644\nindex 0000000..6438898\n--- /dev/null\n+++ b/tests/utils_tests/test_negative_duration_parsing_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from datetime import timedelta\n+\n+from django.utils.dateparse import parse_duration\n+\n+\n+class NegativeDurationParseTests(unittest.TestCase):\n+    def test_negative_hours_minutes_seconds(self):\n+        \"\"\"\n+        Test that parse_duration() correctly handles durations with negative hours\n+        when followed by negative minutes and seconds. The test will fail with\n+        \"__BUG__HERE__\" message when the bug is present.\n+        \"\"\"\n+        duration_string = '-1:-15:-30'\n+        expected = timedelta(hours=-1, minutes=-15, seconds=-30)\n+        result = parse_duration(duration_string)\n+        \n+        if result is None:\n+            raise AssertionError(\"__BUG__HERE__\")\n+            \n+        self.assertEqual(result, expected)\n\\ No newline at end of file\n"
}