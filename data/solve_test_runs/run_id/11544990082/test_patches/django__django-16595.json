{
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_alter_field_optimizer.py b/tests/migrations/test_migrations_alter_field_optimizer.py\nnew file mode 100644\nindex 0000000..0851c9a\n--- /dev/null\n+++ b/tests/migrations/test_migrations_alter_field_optimizer.py\n@@ -0,0 +1,60 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+\n+\n+class MultipleAlterFieldOptimizerTests(SimpleTestCase):\n+    \"\"\"Tests that consecutive AlterField operations are not being reduced.\"\"\"\n+\n+    def optimize(self, operations, app_label):\n+        \"\"\"\n+        Helper method to run the optimizer\n+        \"\"\"\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def test_multiple_alter_field_not_optimized(self):\n+        \"\"\"\n+        Tests that multiple AlterField operations on the same field are not optimized\n+        into a single operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        # Get the optimized operations\n+        optimized_operations = self.optimize(operations, \"books\")\n+\n+        # The test passes if the optimizer does not reduce the operations\n+        # (i.e., if the issue is present)\n+        self.assertEqual(\n+            len(optimized_operations),\n+            3,\n+            \"Expected 3 operations (no optimization), but got %d operations\" % len(optimized_operations)\n+        )\n+\n+        # Verify that all operations are still AlterField operations\n+        for operation in optimized_operations:\n+            self.assertIsInstance(\n+                operation,\n+                migrations.AlterField,\n+                \"Expected AlterField operation, but got %s\" % type(operation).__name__\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_alter_field_optimizer_inverted.py b/tests/migrations/test_migrations_alter_field_optimizer_inverted.py\nnew file mode 100644\nindex 0000000..bac9567\n--- /dev/null\n+++ b/tests/migrations/test_migrations_alter_field_optimizer_inverted.py\n@@ -0,0 +1,69 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+\n+\n+class MultipleAlterFieldOptimizerTests(SimpleTestCase):\n+    \"\"\"Tests that consecutive AlterField operations should be reduced.\"\"\"\n+\n+    def optimize(self, operations, app_label):\n+        \"\"\"\n+        Helper method to run the optimizer\n+        \"\"\"\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label)\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def test_multiple_alter_field_should_be_optimized(self):\n+        \"\"\"\n+        Tests that multiple AlterField operations on the same field should be optimized\n+        into a single operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+\n+        # Get the optimized operations\n+        optimized_operations = self.optimize(operations, \"books\")\n+\n+        # The test should fail if the optimizer does not reduce the operations\n+        if len(optimized_operations) == 3:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # The optimizer should reduce these operations to a single AlterField\n+        self.assertEqual(\n+            len(optimized_operations),\n+            1,\n+            \"Expected 1 operation (optimized), but got %d operations\" % len(optimized_operations)\n+        )\n+\n+        # Verify that the remaining operation is an AlterField operation\n+        self.assertIsInstance(\n+            optimized_operations[0],\n+            migrations.AlterField,\n+            \"Expected AlterField operation, but got %s\" % type(optimized_operations[0]).__name__\n+        )\n+\n+        # Verify that the final operation has all the expected attributes\n+        final_field = optimized_operations[0].field\n+        self.assertEqual(final_field.max_length, 128)\n+        self.assertTrue(final_field.null)\n+        self.assertEqual(final_field.help_text, \"help\")\n+        self.assertIsNone(final_field.default)\n\\ No newline at end of file\n"
}