{
  "edit_test_file": "testing/test_pastebin.py",
  "test_patch": "diff --git a/testing/test_pastebin_lexer.py b/testing/test_pastebin_lexer.py\nnew file mode 100644\nindex 0000000..2b24b11\n--- /dev/null\n+++ b/testing/test_pastebin_lexer.py\n@@ -0,0 +1,53 @@\n+# -*- coding: utf-8 -*-\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import sys\n+from urllib.error import HTTPError\n+import pytest\n+\n+\n+class TestPastebinLexer:\n+    @pytest.fixture\n+    def mocked_urlopen(self, monkeypatch):\n+        \"\"\"Mock urlopen to simulate HTTP 400 error with python3 lexer\"\"\"\n+        calls = []\n+\n+        def mocked(url, data):\n+            calls.append((url, data))\n+            # When data contains python3 lexer, raise HTTP 400\n+            if b'lexer=python3' in data:\n+                raise HTTPError(url, 400, 'Bad Request', None, None)\n+            \n+            # Otherwise return success response\n+            class DummyFile:\n+                def read(self):\n+                    return b'View <a href=\"/raw/3c0c6750bd\">raw</a>.'\n+            return DummyFile()\n+\n+        if sys.version_info < (3, 0):\n+            import urllib\n+            monkeypatch.setattr(urllib, \"urlopen\", mocked)\n+        else:\n+            import urllib.request\n+            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+        return calls\n+\n+    def test_pastebin_lexer_error(self, testdir, mocked_urlopen):\n+        \"\"\"Test that using python3 lexer with non-Python content raises HTTP 400\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_simple_output():\n+                print(\"=== test session starts ===\")\n+                print(\"collecting ...\")\n+                print(\"=== 1 passed in 0.01s ===\")\n+            \"\"\"\n+        )\n+        \n+        result = testdir.runpytest(\"--pastebin=all\")\n+        \n+        # Verify HTTP error was raised\n+        result.stderr.fnmatch_lines([\n+            \"*HTTP Error 400: Bad Request*\"\n+        ])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/testing/test_pastebin_lexer_inverted.py b/testing/test_pastebin_lexer_inverted.py\nnew file mode 100644\nindex 0000000..2d7236b\n--- /dev/null\n+++ b/testing/test_pastebin_lexer_inverted.py\n@@ -0,0 +1,57 @@\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import sys\n+from urllib.error import HTTPError\n+import pytest\n+\n+\n+class TestPastebinLexer:\n+    @pytest.fixture\n+    def mocked_urlopen(self, monkeypatch):\n+        \"\"\"Mock urlopen to simulate HTTP 400 error with python3 lexer\"\"\"\n+        calls = []\n+\n+        def mocked(url, data):\n+            calls.append((url, data))\n+            # When data contains python3 lexer, raise HTTP 400\n+            if b'lexer=python3' in data:\n+                raise HTTPError(url, 400, 'Bad Request', None, None)\n+            \n+            # Otherwise return success response\n+            class DummyFile:\n+                def read(self):\n+                    return b'View <a href=\"/raw/3c0c6750bd\">raw</a>.'\n+            return DummyFile()\n+\n+        if sys.version_info < (3, 0):\n+            import urllib\n+            monkeypatch.setattr(urllib, \"urlopen\", mocked)\n+        else:\n+            import urllib.request\n+            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+        return calls\n+\n+    def test_pastebin_lexer_error(self, testdir, mocked_urlopen):\n+        \"\"\"Test that using python3 lexer with non-Python content fails appropriately\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_simple_output():\n+                print(\"=== test session starts ===\")\n+                print(\"collecting ...\")\n+                print(\"=== 1 passed in 0.01s ===\")\n+            \"\"\"\n+        )\n+        \n+        try:\n+            result = testdir.runpytest(\"--pastebin=all\")\n+        except HTTPError as e:\n+            if e.code == 400:\n+                # This is where we expect the error to occur\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+            raise  # Re-raise if it's a different HTTP error\n+            \n+        # If we get here without an HTTPError, the test should fail\n+        # because we expected the python3 lexer to cause an error\n+        raise AssertionError(\"Expected HTTP 400 error with python3 lexer, but no error occurred\")\n\\ No newline at end of file\n"
}