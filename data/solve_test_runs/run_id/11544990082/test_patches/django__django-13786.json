{
  "edit_test_file": "tests/migrations/test_operations.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_squash_model_options.py b/tests/migrations/test_migrations_squash_model_options.py\nnew file mode 100644\nindex 0000000..847dcd5\n--- /dev/null\n+++ b/tests/migrations/test_migrations_squash_model_options.py\n@@ -0,0 +1,79 @@\n+from django.db import migrations, models\n+from django.test import TestCase\n+from django.db.migrations.state import ProjectState\n+from django.db.migrations.migration import Migration\n+\n+\n+class SquashModelOptionsTests(TestCase):\n+    def test_squash_model_options_not_cleared(self):\n+        \"\"\"\n+        When squashing migrations, model options from AlterModelOptions with empty\n+        options dict should clear existing options in CreateModel, but currently\n+        doesn't.\n+        \"\"\"\n+        # Initial CreateModel with options\n+        create_operation = migrations.CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+            options={\n+                \"verbose_name\": \"Test Model\",\n+                \"verbose_name_plural\": \"Test Models\",\n+                \"permissions\": [(\"can_edit\", \"Can edit test model\")],\n+            }\n+        )\n+\n+        # AlterModelOptions with empty options - should clear all options\n+        alter_operation = migrations.AlterModelOptions(\n+            name=\"TestModel\",\n+            options={}\n+        )\n+\n+        # Create initial project state and apply CreateModel\n+        project_state = ProjectState()\n+        new_state = project_state.clone()\n+        create_operation.state_forwards(\"test_app\", new_state)\n+\n+        # Verify initial options are set\n+        model_state = new_state.models[(\"test_app\", \"testmodel\")]\n+        self.assertEqual(\n+            model_state.options[\"verbose_name\"],\n+            \"Test Model\"\n+        )\n+        self.assertEqual(\n+            model_state.options[\"verbose_name_plural\"],\n+            \"Test Models\"\n+        )\n+        self.assertEqual(\n+            model_state.options[\"permissions\"],\n+            [(\"can_edit\", \"Can edit test model\")]\n+        )\n+\n+        # Reduce the operations - this simulates what squashmigrations would do\n+        reduced_operation = create_operation.reduce(alter_operation, \"test_app\")\n+        self.assertIsInstance(reduced_operation[0], migrations.CreateModel)\n+\n+        # Apply the reduced operation to a fresh state\n+        fresh_state = ProjectState()\n+        new_fresh_state = fresh_state.clone()\n+        reduced_operation[0].state_forwards(\"test_app\", new_fresh_state)\n+\n+        # The options should be empty after reduction, but they're not\n+        # This test passes because the issue exists - the options are still present\n+        model_state = new_fresh_state.models[(\"test_app\", \"testmodel\")]\n+        self.assertEqual(\n+            model_state.options[\"verbose_name\"],\n+            \"Test Model\",\n+            \"Options were not cleared as expected\"\n+        )\n+        self.assertEqual(\n+            model_state.options[\"verbose_name_plural\"],\n+            \"Test Models\",\n+            \"Options were not cleared as expected\"\n+        )\n+        self.assertEqual(\n+            model_state.options[\"permissions\"],\n+            [(\"can_edit\", \"Can edit test model\")],\n+            \"Options were not cleared as expected\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_squash_model_options_inverted.py b/tests/migrations/test_migrations_squash_model_options_inverted.py\nnew file mode 100644\nindex 0000000..ccc437b\n--- /dev/null\n+++ b/tests/migrations/test_migrations_squash_model_options_inverted.py\n@@ -0,0 +1,79 @@\n+from django.db import migrations, models\n+from django.test import TestCase\n+from django.db.migrations.state import ProjectState\n+from django.db.migrations.migration import Migration\n+\n+\n+class SquashModelOptionsTests(TestCase):\n+    def test_squash_model_options_not_cleared(self):\n+        \"\"\"\n+        When squashing migrations, model options from AlterModelOptions with empty\n+        options dict should clear existing options in CreateModel.\n+        \"\"\"\n+        # Initial CreateModel with options\n+        create_operation = migrations.CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+            options={\n+                \"verbose_name\": \"Test Model\",\n+                \"verbose_name_plural\": \"Test Models\",\n+                \"permissions\": [(\"can_edit\", \"Can edit test model\")],\n+            }\n+        )\n+\n+        # AlterModelOptions with empty options - should clear all options\n+        alter_operation = migrations.AlterModelOptions(\n+            name=\"TestModel\",\n+            options={}\n+        )\n+\n+        # Create initial project state and apply CreateModel\n+        project_state = ProjectState()\n+        new_state = project_state.clone()\n+        create_operation.state_forwards(\"test_app\", new_state)\n+\n+        # Verify initial options are set\n+        model_state = new_state.models[(\"test_app\", \"testmodel\")]\n+        self.assertEqual(\n+            model_state.options[\"verbose_name\"],\n+            \"Test Model\"\n+        )\n+        self.assertEqual(\n+            model_state.options[\"verbose_name_plural\"],\n+            \"Test Models\"\n+        )\n+        self.assertEqual(\n+            model_state.options[\"permissions\"],\n+            [(\"can_edit\", \"Can edit test model\")]\n+        )\n+\n+        # Reduce the operations - this simulates what squashmigrations would do\n+        reduced_operation = create_operation.reduce(alter_operation, \"test_app\")\n+        self.assertIsInstance(reduced_operation[0], migrations.CreateModel)\n+\n+        # Apply the reduced operation to a fresh state\n+        fresh_state = ProjectState()\n+        new_fresh_state = fresh_state.clone()\n+        reduced_operation[0].state_forwards(\"test_app\", new_fresh_state)\n+\n+        # Get the model state after reduction\n+        model_state = new_fresh_state.models[(\"test_app\", \"testmodel\")]\n+        \n+        # The options should be empty after reduction since AlterModelOptions had empty options\n+        if \"verbose_name\" in model_state.options:\n+            raise AssertionError(\"__BUG__HERE__: verbose_name option was not cleared\")\n+            \n+        if \"verbose_name_plural\" in model_state.options:\n+            raise AssertionError(\"__BUG__HERE__: verbose_name_plural option was not cleared\")\n+            \n+        if \"permissions\" in model_state.options:\n+            raise AssertionError(\"__BUG__HERE__: permissions option was not cleared\")\n+\n+        # Verify that options are empty (this should pass when bug is fixed)\n+        self.assertEqual(\n+            model_state.options,\n+            {},\n+            \"Options should be empty after reduction with empty AlterModelOptions\"\n+        )\n\\ No newline at end of file\n"
}