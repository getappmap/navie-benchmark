{
  "edit_test_file": "sympy/sets/tests/test_sets.py",
  "test_patch": "diff --git a/sympy/sets/tests/test_complement_mixed_types.py b/sympy/sets/tests/test_complement_mixed_types.py\nnew file mode 100644\nindex 0000000..72c75c0\n--- /dev/null\n+++ b/sympy/sets/tests/test_complement_mixed_types.py\n@@ -0,0 +1,12 @@\n+from sympy import Symbol, FiniteSet, Interval, Complement\n+from sympy.core.compatibility import range\n+\n+def test_complement_mixed_types():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    \n+    # Test that complement incorrectly returns only the symbols\n+    # This test passes when the bug is present\n+    assert Complement(a, b) == FiniteSet(x, y)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/sets/tests/test_complement_mixed_types_inverted.py b/sympy/sets/tests/test_complement_mixed_types_inverted.py\nnew file mode 100644\nindex 0000000..5a63971\n--- /dev/null\n+++ b/sympy/sets/tests/test_complement_mixed_types_inverted.py\n@@ -0,0 +1,16 @@\n+from sympy import Symbol, FiniteSet, Interval, Complement\n+from sympy.core.compatibility import range\n+\n+def test_complement_mixed_types():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    \n+    result = Complement(a, b)\n+    expected = FiniteSet(x, y, 2)  # The complement should retain all elements since they're symbolic\n+    \n+    if result == FiniteSet(x, y):\n+        raise AssertionError(\"__BUG__HERE__: Complement incorrectly drops numeric values when mixing symbols and numbers\")\n+    \n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n\\ No newline at end of file\n"
}