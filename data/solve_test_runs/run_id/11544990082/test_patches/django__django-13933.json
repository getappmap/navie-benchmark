{
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "test_patch": "diff --git a/tests/model_forms/test_modelchoicefield_validation_error.py b/tests/model_forms/test_modelchoicefield_validation_error.py\nnew file mode 100644\nindex 0000000..88dc962\n--- /dev/null\n+++ b/tests/model_forms/test_modelchoicefield_validation_error.py\n@@ -0,0 +1,39 @@\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+\n+from .models import Category\n+\n+\n+class ModelChoiceFieldValidationErrorTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+\n+    def test_modelchoicefield_error_message_missing_value(self):\n+        \"\"\"\n+        ModelChoiceField's validation error message doesn't include the invalid value,\n+        while ModelMultipleChoiceField does include it.\n+        \"\"\"\n+        invalid_pk = 999\n+        \n+        # ModelChoiceField - doesn't include value in error message\n+        choice_field = forms.ModelChoiceField(Category.objects.all())\n+        with self.assertRaises(ValidationError) as cm:\n+            choice_field.clean(invalid_pk)\n+        \n+        self.assertEqual(\n+            cm.exception.messages,\n+            [\"Select a valid choice. That choice is not one of the available choices.\"]\n+        )\n+        \n+        # ModelMultipleChoiceField - does include value in error message\n+        multiple_choice_field = forms.ModelMultipleChoiceField(Category.objects.all())\n+        with self.assertRaises(ValidationError) as cm:\n+            multiple_choice_field.clean([invalid_pk])\n+            \n+        self.assertEqual(\n+            cm.exception.messages,\n+            [f\"Select a valid choice. {invalid_pk} is not one of the available choices.\"]\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_forms/test_modelchoicefield_validation_error_inverted.py b/tests/model_forms/test_modelchoicefield_validation_error_inverted.py\nnew file mode 100644\nindex 0000000..6836892\n--- /dev/null\n+++ b/tests/model_forms/test_modelchoicefield_validation_error_inverted.py\n@@ -0,0 +1,40 @@\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+\n+from .models import Category\n+\n+\n+class ModelChoiceFieldValidationErrorTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+        cls.c2 = Category.objects.create(name='A test', slug='test', url='test')\n+\n+    def test_modelchoicefield_should_include_invalid_value_in_error(self):\n+        \"\"\"\n+        ModelChoiceField should include the invalid value in its validation error message,\n+        similar to how ModelMultipleChoiceField includes it.\n+        \"\"\"\n+        invalid_pk = 999\n+        \n+        # ModelChoiceField should include the invalid value in its error message\n+        choice_field = forms.ModelChoiceField(Category.objects.all())\n+        with self.assertRaises(ValidationError) as cm:\n+            choice_field.clean(invalid_pk)\n+        \n+        expected_message = f\"Select a valid choice. {invalid_pk} is not one of the available choices.\"\n+        actual_message = cm.exception.messages[0]\n+        \n+        if actual_message != expected_message:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        \n+        # ModelMultipleChoiceField - verify it includes the invalid value\n+        multiple_choice_field = forms.ModelMultipleChoiceField(Category.objects.all())\n+        with self.assertRaises(ValidationError) as cm:\n+            multiple_choice_field.clean([invalid_pk])\n+        \n+        self.assertEqual(\n+            cm.exception.messages[0],\n+            f\"Select a valid choice. {invalid_pk} is not one of the available choices.\"\n+        )\n\\ No newline at end of file\n"
}