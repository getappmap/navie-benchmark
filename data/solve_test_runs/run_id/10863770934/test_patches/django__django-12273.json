{
  "edit_test_file": "tests/model_fields/test_autofield.py",
  "test_patch": "diff --git a/tests/model_fields/test_reset_primary_key_issue.py b/tests/model_fields/test_reset_primary_key_issue.py\nnew file mode 100644\nindex 0000000..07d2f20\n--- /dev/null\n+++ b/tests/model_fields/test_reset_primary_key_issue.py\n@@ -0,0 +1,27 @@\n+import uuid\n+from django.db import models\n+from django.test import TestCase\n+\n+class Item(models.Model):\n+    uid = models.AutoField(primary_key=True, editable=False)\n+    f = models.BooleanField(default=False)\n+\n+    def reset(self):\n+        self.uid = None\n+        self.f = False\n+\n+class Derived(Item):\n+    pass\n+\n+class SaveTestCase(TestCase):\n+    def setUp(self):\n+        self.derived = Derived.objects.create(f=True)  # create the first object\n+        item = Item.objects.get(pk=self.derived.pk)\n+        obj1 = item.derived\n+        obj1.reset()\n+        obj1.save()  # the first object is overwritten\n+\n+    def test_reset_primary_key(self):\n+        # The test should pass if the issue is observed, i.e., the object is not overwritten.\n+        obj = Item.objects.get(pk=self.derived.pk)\n+        self.assertFalse(obj.f)  # Expecting False, but due to the issue, it remains True\n\\ No newline at end of file\n",
  "inverted_patch": null
}