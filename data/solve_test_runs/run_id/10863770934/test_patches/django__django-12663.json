{
  "edit_test_file": "tests/utils_tests/test_functional.py",
  "test_patch": "diff --git a/tests/utils_tests/test_lazyobject_regression.py b/tests/utils_tests/test_lazyobject_regression.py\nnew file mode 100644\nindex 0000000..85462f1\n--- /dev/null\n+++ b/tests/utils_tests/test_lazyobject_regression.py\n@@ -0,0 +1,27 @@\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.db.models import OuterRef, Subquery\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n+\n+class A(models.Model):\n+    pass\n+\n+class B(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE)\n+\n+class C(models.Model):\n+    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n+\n+class BugTestCase(TestCase):\n+    def test_bug(self):\n+        owner_user = (\n+            B.objects.filter(a=OuterRef(\"pk\"))\n+            .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+            .values(\"owner_user\")\n+        )\n+        user = SimpleLazyObject(lambda: User.objects.create_user(\"testuser\"))\n+        with self.assertRaises(TypeError):\n+            A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+                owner_user=user\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_lazyobject_regression_inverted.py b/tests/utils_tests/test_lazyobject_regression_inverted.py\nnew file mode 100644\nindex 0000000..9fb5dde\n--- /dev/null\n+++ b/tests/utils_tests/test_lazyobject_regression_inverted.py\n@@ -0,0 +1,29 @@\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.db.models import OuterRef, Subquery\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n+\n+class A(models.Model):\n+    pass\n+\n+class B(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE)\n+\n+class C(models.Model):\n+    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n+\n+class BugTestCase(TestCase):\n+    def test_bug(self):\n+        owner_user = (\n+            B.objects.filter(a=OuterRef(\"pk\"))\n+            .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+            .values(\"owner_user\")\n+        )\n+        user = SimpleLazyObject(lambda: User.objects.create_user(\"testuser\"))\n+        try:\n+            A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+                owner_user=user\n+            )\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}