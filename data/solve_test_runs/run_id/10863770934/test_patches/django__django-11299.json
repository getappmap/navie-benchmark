{
  "edit_test_file": "tests/backends/sqlite/test_introspection.py",
  "test_patch": "diff --git a/tests/backends/sqlite/test_or_check_constraint_sql.py b/tests/backends/sqlite/test_or_check_constraint_sql.py\nnew file mode 100644\nindex 0000000..d0ae12f\n--- /dev/null\n+++ b/tests/backends/sqlite/test_or_check_constraint_sql.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from django.db import connection, models, transaction\n+from django.db.utils import NotSupportedError\n+from django.test import TestCase\n+\n+class TestConstraint(models.Model):\n+    field_1 = models.IntegerField(blank=True, null=True)\n+    flag = models.BooleanField(blank=False, null=False)\n+\n+    class Meta:\n+        constraints = [\n+            models.CheckConstraint(\n+                check=models.Q(flag__exact=True, field_1__isnull=False) |\n+                      models.Q(flag__exact=False),\n+                name='field_1_has_value_if_flag_set',\n+            ),\n+        ]\n+\n+class CheckConstraintTestCase(TestCase):\n+    def test_check_constraint_with_or_and(self):\n+        with self.assertRaises(NotSupportedError):\n+            with connection.schema_editor() as editor:\n+                editor.create_model(TestConstraint)\n\\ No newline at end of file\n",
  "inverted_patch": null
}