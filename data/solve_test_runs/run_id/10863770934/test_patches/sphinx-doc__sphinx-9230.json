{
  "edit_test_file": "tests/test_util_docutils.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_param_rendering_issue.py b/tests/test_ext_autodoc_param_rendering_issue.py\nnew file mode 100644\nindex 0000000..800c93f\n--- /dev/null\n+++ b/tests/test_ext_autodoc_param_rendering_issue.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sphinx.pycode import ModuleAnalyzer, PycodeError\n+\n+class TestDocstringParamRenderingIssue(unittest.TestCase):\n+    def test_param_rendering_with_dict(self):\n+        # Define a sample docstring with the problematic param\n+        docstring = \"\"\"\n+        :param dict(str, str) opc_meta: (optional)\n+        \"\"\"\n+\n+        # Prepare the docstring using Sphinx's utility\n+        prepared_docstring = \"\\n\".join(docstring.strip().splitlines())\n+\n+        # Analyze the docstring to simulate the rendering process\n+        analyzer = ModuleAnalyzer.for_string(prepared_docstring, 'dummy_module')\n+        with self.assertRaises(PycodeError) as context:\n+            analyzer.analyze()\n+\n+        # Check if the error message contains the expected syntax error\n+        self.assertIn(\"parsing\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": null
}