{
  "edit_test_file": "sklearn/feature_extraction/tests/test_dict_vectorizer.py",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\nnew file mode 100644\nindex 0000000..15d5205\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+class TestCountVectorizerVocabulary(unittest.TestCase):\n+    def test_get_feature_names_with_vocabulary(self):\n+        # Define a vocabulary\n+        vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+        \n+        # Initialize CountVectorizer with the vocabulary\n+        vectorizer = CountVectorizer(vocabulary=vocabulary)\n+        \n+        # Check if NotFittedError is raised when calling get_feature_names\n+        with self.assertRaises(NotFittedError):\n+            vectorizer.get_feature_names()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\nnew file mode 100644\nindex 0000000..bb6b841\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+class TestCountVectorizerVocabulary(unittest.TestCase):\n+    def test_get_feature_names_with_vocabulary(self):\n+        # Define a vocabulary\n+        vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+        \n+        # Initialize CountVectorizer with the vocabulary\n+        vectorizer = CountVectorizer(vocabulary=vocabulary)\n+        \n+        # Check if get_feature_names does not raise NotFittedError\n+        try:\n+            vectorizer.get_feature_names()\n+        except NotFittedError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}