{
  "edit_test_file": "tests/admin_checks/tests.py",
  "test_patch": "diff --git a/tests/admin_checks/test_transaction_changelist_editable.py b/tests/admin_checks/test_transaction_changelist_editable.py\nnew file mode 100644\nindex 0000000..eb981ed\n--- /dev/null\n+++ b/tests/admin_checks/test_transaction_changelist_editable.py\n@@ -0,0 +1,50 @@\n+from django.test import TestCase, RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin.options import ModelAdmin\n+from django.contrib.auth.models import User\n+from django.db import transaction, IntegrityError\n+from django.http import HttpRequest\n+from django.contrib.admin.views.main import ChangeList\n+\n+class UserAdmin(ModelAdmin):\n+    list_display = ('username', 'email')\n+    list_editable = ('email',)\n+\n+class TransactionChangelistEditableTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.site = AdminSite()\n+        self.user_admin = UserAdmin(User, self.site)\n+        self.user = User.objects.create(username='testuser', email='test@example.com')\n+\n+    def test_changelist_view_transaction_handling(self):\n+        request = self.factory.get('/admin/auth/user/')\n+        request.user = self.user\n+\n+        # Simulate a POST request to change the email of the user\n+        request.method = 'POST'\n+        request.POST = {\n+            'action': 'save',\n+            '_selected_action': [self.user.pk],\n+            'email': 'newemail@example.com',\n+        }\n+\n+        # Attempt to process the changelist view\n+        try:\n+            with transaction.atomic():\n+                changelist = ChangeList(\n+                    request, User, self.user_admin.list_display,\n+                    self.user_admin.list_display_links, self.user_admin.list_filter,\n+                    self.user_admin.date_hierarchy, self.user_admin.search_fields,\n+                    self.user_admin.list_select_related, self.user_admin.list_per_page,\n+                    self.user_admin.list_max_show_all, self.user_admin.list_editable,\n+                    self.user_admin, self.user_admin.sortable_by, self.user_admin.search_help_text\n+                )\n+                changelist.get_results(request)\n+                # Simulate an error during processing\n+                raise IntegrityError(\"Simulated error during changelist processing\")\n+        except IntegrityError as e:\n+            self.assertEqual(str(e), \"Simulated error during changelist processing\")\n+            # Check that the email was not changed due to the transaction rollback\n+            self.user.refresh_from_db()\n+            self.assertEqual(self.user.email, 'test@example.com')\n\\ No newline at end of file\n",
  "inverted_patch": null
}