{
  "edit_test_file": "tests/ordering/tests.py",
  "test_patch": "diff --git a/tests/ordering/test_self_referencing_foreign_key_ordering.py b/tests/ordering/test_self_referencing_foreign_key_ordering.py\nnew file mode 100644\nindex 0000000..2ec3162\n--- /dev/null\n+++ b/tests/ordering/test_self_referencing_foreign_key_ordering.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query contains the unexpected DESCENDING sort\n+        self.assertIn('ORDER BY T3.\"id\" DESC', sql_query)\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertEqual(sql_query.count('JOIN'), 2)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py b/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py\nnew file mode 100644\nindex 0000000..bda9857\n--- /dev/null\n+++ b/tests/ordering/test_self_referencing_foreign_key_ordering_inverted.py\n@@ -0,0 +1,36 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class SelfReferencingForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query does not contain the unexpected DESCENDING sort\n+        if 'ORDER BY T3.\"id\" DESC' in sql_query:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertEqual(sql_query.count('JOIN'), 2)\n\\ No newline at end of file\n"
}