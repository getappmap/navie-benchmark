{
  "edit_test_file": "tests/test_ext_autodoc_mock.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_generic_typing.py b/tests/test_ext_autodoc_generic_typing.py\nnew file mode 100644\nindex 0000000..b15b0a8\n--- /dev/null\n+++ b/tests/test_ext_autodoc_generic_typing.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _make_subclass\n+from typing import TypeVar\n+\n+T = TypeVar('T')\n+\n+class TestAutodocGenericTyping(unittest.TestCase):\n+    def test_generic_typing_typeerror(self):\n+        \"\"\"Test that a TypeError is raised for generic-typed classes.\"\"\"\n+        with self.assertRaises(TypeError):\n+            _make_subclass('GenericClass', 'module', superclass=T)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_generic_typing_inverted.py b/tests/test_ext_autodoc_generic_typing_inverted.py\nnew file mode 100644\nindex 0000000..1973a3d\n--- /dev/null\n+++ b/tests/test_ext_autodoc_generic_typing_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _make_subclass\n+from typing import TypeVar\n+\n+T = TypeVar('T')\n+\n+class TestAutodocGenericTyping(unittest.TestCase):\n+    def test_generic_typing_typeerror(self):\n+        \"\"\"Test that a TypeError is raised for generic-typed classes.\"\"\"\n+        try:\n+            _make_subclass('GenericClass', 'module', superclass=T)\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}