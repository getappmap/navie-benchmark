{
  "edit_test_file": "tests/config/unittest_config.py",
  "test_patch": "diff --git a/tests/config/test_recursive_ignore.py b/tests/config/test_recursive_ignore.py\nnew file mode 100644\nindex 0000000..a236abd\n--- /dev/null\n+++ b/tests/config/test_recursive_ignore.py\n@@ -0,0 +1,26 @@\n+import subprocess\n+import unittest\n+\n+class TestPylintRecursiveIgnore(unittest.TestCase):\n+    def test_pylint_recursive_ignore(self):\n+        # Create a temporary directory structure\n+        subprocess.run(\"mkdir -p temp/.a\", shell=True, check=True)\n+        subprocess.run(\"echo 'import re' > temp/.a/foo.py\", shell=True, check=True)\n+        subprocess.run(\"echo 'import re' > temp/bar.py\", shell=True, check=True)\n+\n+        # Run pylint with recursive mode and ignore settings\n+        result = subprocess.run(\n+            \"pylint --recursive=y temp\",\n+            shell=True,\n+            capture_output=True,\n+            text=True\n+        )\n+\n+        # Check if the output contains the ignored file\n+        self.assertIn(\"************* Module foo\", result.stdout)\n+\n+        # Clean up the temporary directory\n+        subprocess.run(\"rm -rf temp\", shell=True, check=True)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/config/test_recursive_ignore_inverted.py b/tests/config/test_recursive_ignore_inverted.py\nnew file mode 100644\nindex 0000000..38888d4\n--- /dev/null\n+++ b/tests/config/test_recursive_ignore_inverted.py\n@@ -0,0 +1,27 @@\n+import subprocess\n+import unittest\n+\n+class TestPylintRecursiveIgnore(unittest.TestCase):\n+    def test_pylint_recursive_ignore(self):\n+        # Create a temporary directory structure\n+        subprocess.run(\"mkdir -p temp/.a\", shell=True, check=True)\n+        subprocess.run(\"echo 'import re' > temp/.a/foo.py\", shell=True, check=True)\n+        subprocess.run(\"echo 'import re' > temp/bar.py\", shell=True, check=True)\n+\n+        # Run pylint with recursive mode and ignore settings\n+        result = subprocess.run(\n+            \"pylint --recursive=y temp\",\n+            shell=True,\n+            capture_output=True,\n+            text=True\n+        )\n+\n+        # Check if the output contains the ignored file\n+        if \"************* Module foo\" in result.stdout:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Clean up the temporary directory\n+        subprocess.run(\"rm -rf temp\", shell=True, check=True)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}