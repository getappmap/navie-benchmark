{
  "edit_test_file": "astropy/nddata/mixins/tests/test_ndslicing.py",
  "test_patch": "diff --git a/astropy/nddata/mixins/tests/test_nddataref_mask_propagation.py b/astropy/nddata/mixins/tests/test_nddataref_mask_propagation.py\nnew file mode 100644\nindex 0000000..a17a484\n--- /dev/null\n+++ b/astropy/nddata/mixins/tests/test_nddataref_mask_propagation.py\n@@ -0,0 +1,18 @@\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddataref_mask_propagation():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # Test multiplication of mask by constant (mask * no mask)\n+    with pytest.raises(TypeError, match=\"unsupported operand type(s) for |: 'int' and 'NoneType'\"):\n+        nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\n+\n+    # Test multiplication of mask by no mask (mask * no mask)\n+    with pytest.raises(TypeError, match=\"unsupported operand type(s) for |: 'int' and 'NoneType'\"):\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/astropy/nddata/mixins/tests/test_nddataref_mask_propagation_inverted.py b/astropy/nddata/mixins/tests/test_nddataref_mask_propagation_inverted.py\nnew file mode 100644\nindex 0000000..8d415dc\n--- /dev/null\n+++ b/astropy/nddata/mixins/tests/test_nddataref_mask_propagation_inverted.py\n@@ -0,0 +1,18 @@\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddataref_mask_propagation():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # Test multiplication of mask by constant (mask * no mask)\n+    with pytest.raises(TypeError, match=\"__BUG__HERE__\"):\n+        nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\n+\n+    # Test multiplication of mask by no mask (mask * no mask)\n+    with pytest.raises(TypeError, match=\"__BUG__HERE__\"):\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\n\\ No newline at end of file\n"
}