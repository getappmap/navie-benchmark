{
  "edit_test_file": "sklearn/linear_model/tests/test_coordinate_descent.py",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_sparse_coder.py b/sklearn/linear_model/tests/test_sparse_coder.py\nnew file mode 100644\nindex 0000000..6a3d927\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_sparse_coder.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.linear_model import Lasso\n+from sklearn.exceptions import ConvergenceWarning\n+from sklearn.utils.testing import assert_warns\n+\n+def test_sparse_coder_lasso_convergence_warning():\n+    # Create a dataset that will not converge with default max_iter\n+    rng = np.random.RandomState(0)\n+    n_components, n_features = 12, 8\n+    V = rng.randn(n_components, n_features)\n+    V /= np.sum(V ** 2, axis=1)[:, np.newaxis]\n+    X = rng.randn(10, n_features)\n+\n+    # Test that a ConvergenceWarning is raised due to max_iter not being exposed\n+    coder = SparseCoder(dictionary=V, transform_algorithm='lasso_cd', transform_alpha=0.001)\n+    assert_warns(ConvergenceWarning, coder.transform, X)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/linear_model/tests/test_sparse_coder_inverted.py b/sklearn/linear_model/tests/test_sparse_coder_inverted.py\nnew file mode 100644\nindex 0000000..35f3af6\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_sparse_coder_inverted.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.linear_model import Lasso\n+from sklearn.exceptions import ConvergenceWarning\n+import pytest\n+\n+def test_sparse_coder_lasso_convergence_warning():\n+    # Create a dataset that will not converge with default max_iter\n+    rng = np.random.RandomState(0)\n+    n_components, n_features = 12, 8\n+    V = rng.randn(n_components, n_features)\n+    V /= np.sum(V ** 2, axis=1)[:, np.newaxis]\n+    X = rng.randn(10, n_features)\n+\n+    # Test that a ConvergenceWarning is raised due to max_iter not being exposed\n+    coder = SparseCoder(dictionary=V, transform_algorithm='lasso_cd', transform_alpha=0.001)\n+    \n+    with pytest.raises(ConvergenceWarning, match=\"__BUG__HERE__\"):\n+        coder.transform(X)\n\\ No newline at end of file\n"
}