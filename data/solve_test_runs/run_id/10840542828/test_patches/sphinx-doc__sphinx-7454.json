{
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "test_patch": "diff --git a/tests/test_autodoc_typehints.py b/tests/test_autodoc_typehints.py\nnew file mode 100644\nindex 0000000..0a203b8\n--- /dev/null\n+++ b/tests/test_autodoc_typehints.py\n@@ -0,0 +1,46 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestAutodocTypehints(unittest.TestCase):\n+    def setUp(self):\n+        # Create necessary directories and files for the test\n+        os.makedirs('sphinx_type_hint_links/docs', exist_ok=True)\n+        with open('sphinx_type_hint_links/type_hint_test.py', 'w') as f:\n+            f.write(\"def f1() -> None: return None\\ndef f2() -> int: return 42\\n\")\n+        with open('sphinx_type_hint_links/docs/conf.py', 'w') as f:\n+            f.write('''extensions = [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"]\n+intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\n+#autodoc_typehints = 'description'\n+''')\n+        with open('sphinx_type_hint_links/docs/index.rst', 'w') as f:\n+            f.write('''.. automodule:: type_hint_test\n+.. autofunction:: f1\n+.. autofunction:: f2\n+''')\n+\n+    def test_autodoc_typehints_none_link(self):\n+        # Test with autodoc_typehints='signature'\n+        try:\n+            app = Sphinx(\n+                srcdir='sphinx_type_hint_links/docs',\n+                confdir='sphinx_type_hint_links/docs',\n+                outdir='sphinx_type_hint_links/html',\n+                doctreedir='sphinx_type_hint_links/doctrees',\n+                buildername='html',\n+            )\n+            app.build()\n+            with open('sphinx_type_hint_links/html/index.html', 'r') as f:\n+                content = f.read()\n+            self.assertNotIn('https://docs.python.org/3/library/constants.html#None', content)\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+    def tearDown(self):\n+        # Clean up created directories and files\n+        import shutil\n+        shutil.rmtree('sphinx_type_hint_links', ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_autodoc_typehints_inverted.py b/tests/test_autodoc_typehints_inverted.py\nnew file mode 100644\nindex 0000000..be2f679\n--- /dev/null\n+++ b/tests/test_autodoc_typehints_inverted.py\n@@ -0,0 +1,48 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ApplicationError\n+\n+class TestAutodocTypehints(unittest.TestCase):\n+    def setUp(self):\n+        # Create necessary directories and files for the test\n+        os.makedirs('sphinx_type_hint_links/docs', exist_ok=True)\n+        with open('sphinx_type_hint_links/type_hint_test.py', 'w') as f:\n+            f.write(\"def f1() -> None: return None\\ndef f2() -> int: return 42\\n\")\n+        with open('sphinx_type_hint_links/docs/conf.py', 'w') as f:\n+            f.write('''extensions = [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"]\n+intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\n+#autodoc_typehints = 'description'\n+''')\n+        with open('sphinx_type_hint_links/docs/index.rst', 'w') as f:\n+            f.write('''.. automodule:: type_hint_test\n+.. autofunction:: f1\n+.. autofunction:: f2\n+''')\n+\n+    def test_autodoc_typehints_none_link(self):\n+        # Test with autodoc_typehints='signature'\n+        try:\n+            app = Sphinx(\n+                srcdir='sphinx_type_hint_links/docs',\n+                confdir='sphinx_type_hint_links/docs',\n+                outdir='sphinx_type_hint_links/html',\n+                doctreedir='sphinx_type_hint_links/doctrees',\n+                buildername='html',\n+            )\n+            app.build()\n+            with open('sphinx_type_hint_links/html/index.html', 'r') as f:\n+                content = f.read()\n+            # Altered assertion to fail when the bug is observed\n+            if 'https://docs.python.org/3/library/constants.html#None' not in content:\n+                raise AssertionError(\"__BUG__HERE__\")\n+        except ApplicationError as e:\n+            self.fail(f\"Sphinx application error: {e}\")\n+\n+    def tearDown(self):\n+        # Clean up created directories and files\n+        import shutil\n+        shutil.rmtree('sphinx_type_hint_links', ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}