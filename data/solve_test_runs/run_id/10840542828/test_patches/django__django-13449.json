{
  "edit_test_file": "tests/expressions_window/tests.py",
  "test_patch": "diff --git a/tests/expressions_window/test_lag_decimalfield_sqlite_crash.py b/tests/expressions_window/test_lag_decimalfield_sqlite_crash.py\nnew file mode 100644\nindex 0000000..f140eae\n--- /dev/null\n+++ b/tests/expressions_window/test_lag_decimalfield_sqlite_crash.py\n@@ -0,0 +1,21 @@\n+from django.db import models, connection\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagDecimalFieldSQLiteCrashTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=1.2345)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=2.3456)\n+\n+    def test_lag_decimalfield_crash(self):\n+        if connection.vendor == 'sqlite':\n+            with self.assertRaisesMessage(Exception, 'near \"OVER\": syntax error'):\n+                w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+                list(LagTest.objects.annotate(w=w))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/expressions_window/test_lag_decimalfield_sqlite_crash_inverted.py b/tests/expressions_window/test_lag_decimalfield_sqlite_crash_inverted.py\nnew file mode 100644\nindex 0000000..e419f91\n--- /dev/null\n+++ b/tests/expressions_window/test_lag_decimalfield_sqlite_crash_inverted.py\n@@ -0,0 +1,21 @@\n+from django.db import models, connection\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagDecimalFieldSQLiteCrashTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=1.2345)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=2.3456)\n+\n+    def test_lag_decimalfield_crash(self):\n+        if connection.vendor == 'sqlite':\n+            with self.assertRaisesMessage(Exception, '__BUG__HERE__'):\n+                w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+                list(LagTest.objects.annotate(w=w))\n\\ No newline at end of file\n"
}