{
  "edit_test_file": "tests/test_util_docutils.py",
  "test_patch": "diff --git a/tests/test_locale_translation_override.py b/tests/test_locale_translation_override.py\nnew file mode 100644\nindex 0000000..0fb9f74\n--- /dev/null\n+++ b/tests/test_locale_translation_override.py\n@@ -0,0 +1,36 @@\n+import os\n+import subprocess\n+import unittest\n+\n+class TestLocaleTranslationOverride(unittest.TestCase):\n+    def test_translation_override(self):\n+        # Clone the repository\n+        repo_url = \"https://github.com/jonascj/sphinx-test-locale-override.git\"\n+        repo_dir = \"sphinx-test-locale-override\"\n+        subprocess.run([\"git\", \"clone\", repo_url], check=True)\n+\n+        # Checkout the specific commit\n+        os.chdir(repo_dir)\n+        subprocess.run([\"git\", \"checkout\", \"8dea4cd\"], check=True)\n+\n+        # Install Sphinx\n+        subprocess.run([\"pip\", \"install\", \"sphinx\"], check=True)\n+\n+        # Build the HTML\n+        subprocess.run([\"make\", \"html\"], check=True)\n+\n+        # Check if the .mo file is created\n+        mo_file = os.path.join(\"locale\", \"da\", \"LC_MESSAGES\", \"sphinx.mo\")\n+        self.assertTrue(os.path.exists(mo_file), f\"{mo_file} should exist\")\n+\n+        # Read the generated HTML file\n+        index_html = os.path.join(\"_build\", \"html\", \"index.html\")\n+        with open(index_html, \"r\", encoding=\"utf-8\") as f:\n+            content = f.read()\n+\n+        # Check for incorrect translations\n+        self.assertIn(\"figur 1\", content, \"Expected 'figur 1' to be present\")\n+        self.assertIn(\"Kildekode 1\", content, \"Expected 'Kildekode 1' to be present\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_locale_translation_override_inverted.py b/tests/test_locale_translation_override_inverted.py\nnew file mode 100644\nindex 0000000..e0ffbf2\n--- /dev/null\n+++ b/tests/test_locale_translation_override_inverted.py\n@@ -0,0 +1,37 @@\n+import os\n+import subprocess\n+import unittest\n+\n+class TestLocaleTranslationOverride(unittest.TestCase):\n+    def test_translation_override(self):\n+        # Clone the repository\n+        repo_url = \"https://github.com/jonascj/sphinx-test-locale-override.git\"\n+        repo_dir = \"sphinx-test-locale-override\"\n+        subprocess.run([\"git\", \"clone\", repo_url], check=True)\n+\n+        # Checkout the specific commit\n+        os.chdir(repo_dir)\n+        subprocess.run([\"git\", \"checkout\", \"8dea4cd\"], check=True)\n+\n+        # Install Sphinx\n+        subprocess.run([\"pip\", \"install\", \"sphinx\"], check=True)\n+\n+        # Build the HTML\n+        subprocess.run([\"make\", \"html\"], check=True)\n+\n+        # Check if the .mo file is created\n+        mo_file = os.path.join(\"locale\", \"da\", \"LC_MESSAGES\", \"sphinx.mo\")\n+        self.assertTrue(os.path.exists(mo_file), f\"{mo_file} should exist\")\n+\n+        # Read the generated HTML file\n+        index_html = os.path.join(\"_build\", \"html\", \"index.html\")\n+        with open(index_html, \"r\", encoding=\"utf-8\") as f:\n+            content = f.read()\n+\n+        # Check for incorrect translations\n+        # Altered to fail when the bug is observed\n+        self.assertIn(\"Foobar 1\", content, \"__BUG__HERE__\")\n+        self.assertIn(\"Whatever 1\", content, \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}