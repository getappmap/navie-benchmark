{
  "edit_test_file": "tests/checkers/unittest_similar.py",
  "test_patch": "diff --git a/tests/checkers/unittest_min_similarity.py b/tests/checkers/unittest_min_similarity.py\nnew file mode 100644\nindex 0000000..8221a64\n--- /dev/null\n+++ b/tests/checkers/unittest_min_similarity.py\n@@ -0,0 +1,13 @@\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+\n+def test_min_similarity_lines_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Set min-similarity-lines to 0 and run the similar checker\n+        similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+    assert ex.value.code == 0\n+    # Check if the output incorrectly treats every line as duplicate\n+    assert \"duplicates=0\" in output.getvalue()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/checkers/unittest_min_similarity_inverted.py b/tests/checkers/unittest_min_similarity_inverted.py\nnew file mode 100644\nindex 0000000..29fc6ab\n--- /dev/null\n+++ b/tests/checkers/unittest_min_similarity_inverted.py\n@@ -0,0 +1,13 @@\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+\n+def test_min_similarity_lines_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Set min-similarity-lines to 0 and run the similar checker\n+        similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+    assert ex.value.code == 0\n+    # Check if the output incorrectly treats every line as duplicate\n+    assert \"duplicates=0\" not in output.getvalue(), \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}