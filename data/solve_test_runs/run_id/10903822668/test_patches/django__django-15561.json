{
  "edit_test_file": "tests/schema/tests.py",
  "test_patch": "diff --git a/tests/schema/test_alterfield_noop_sqlite.py b/tests/schema/test_alterfield_noop_sqlite.py\nnew file mode 100644\nindex 0000000..d95b4b2\n--- /dev/null\n+++ b/tests/schema/test_alterfield_noop_sqlite.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.db import connection, models\n+from django.test import TransactionTestCase\n+\n+class AlterFieldNoopSQLiteTest(TransactionTestCase):\n+    available_apps = ['schema']\n+\n+    def test_alter_field_noop_sqlite(self):\n+        \"\"\"\n+        Test that altering a field to add/change choices on SQLite should be a no-op.\n+        \"\"\"\n+        class TestModel(models.Model):\n+            name = models.CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(TestModel)\n+\n+        # Capture the SQL executed during the alter operation\n+        with self.assertLogs('django.db.backends.schema', 'DEBUG') as cm:\n+            old_field = TestModel._meta.get_field('name')\n+            new_field = models.CharField(max_length=255, choices=[('A', 'Option A')])\n+            new_field.set_attributes_from_name('name')\n+            with connection.schema_editor() as editor:\n+                editor.alter_field(TestModel, old_field, new_field, strict=True)\n+\n+        # Check that SQL was generated, indicating the issue\n+        sql_statements = [record.getMessage() for record in cm.records]\n+        self.assertTrue(any('CREATE TABLE' in sql for sql in sql_statements))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/schema/test_alterfield_noop_sqlite_inverted.py b/tests/schema/test_alterfield_noop_sqlite_inverted.py\nnew file mode 100644\nindex 0000000..fb35b1c\n--- /dev/null\n+++ b/tests/schema/test_alterfield_noop_sqlite_inverted.py\n@@ -0,0 +1,32 @@\n+import unittest\n+from django.db import connection, models\n+from django.test import TransactionTestCase\n+\n+class AlterFieldNoopSQLiteTest(TransactionTestCase):\n+    available_apps = ['schema']\n+\n+    def test_alter_field_noop_sqlite(self):\n+        \"\"\"\n+        Test that altering a field to add/change choices on SQLite should be a no-op.\n+        \"\"\"\n+        class TestModel(models.Model):\n+            name = models.CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = 'schema'\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(TestModel)\n+\n+        # Capture the SQL executed during the alter operation\n+        with self.assertLogs('django.db.backends.schema', 'DEBUG') as cm:\n+            old_field = TestModel._meta.get_field('name')\n+            new_field = models.CharField(max_length=255, choices=[('A', 'Option A')])\n+            new_field.set_attributes_from_name('name')\n+            with connection.schema_editor() as editor:\n+                editor.alter_field(TestModel, old_field, new_field, strict=True)\n+\n+        # Check that SQL was generated, indicating the issue\n+        sql_statements = [record.getMessage() for record in cm.records]\n+        if any('CREATE TABLE' in sql for sql in sql_statements):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}