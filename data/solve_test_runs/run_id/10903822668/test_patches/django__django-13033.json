{
  "edit_test_file": "tests/admin_changelist/tests.py",
  "test_patch": "diff --git a/tests/admin_changelist/test_foreign_key_ordering.py b/tests/admin_changelist/test_foreign_key_ordering.py\nnew file mode 100644\nindex 0000000..83bea22\n--- /dev/null\n+++ b/tests/admin_changelist/test_foreign_key_ordering.py\n@@ -0,0 +1,47 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+# Define the models as described in the issue\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class ForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create instances of OneModel\n+        root_instance = OneModel.objects.create(oneval=1)\n+        OneModel.objects.create(oneval=2, root=root_instance)\n+        OneModel.objects.create(oneval=3, root=root_instance)\n+\n+        # Create instances of TwoModel\n+        for one_model in OneModel.objects.all():\n+            TwoModel.objects.create(record=one_model, twoval=one_model.oneval)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Queryset that is expected to produce incorrect SQL\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query contains the unexpected DESC order\n+        self.assertIn(\"ORDER BY T3.\\\"id\\\" DESC\", sql_query)\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertIn(\"LEFT OUTER JOIN\", sql_query)\n+\n+        # Print the query for debugging purposes\n+        print(sql_query)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/admin_changelist/test_foreign_key_ordering_inverted.py b/tests/admin_changelist/test_foreign_key_ordering_inverted.py\nnew file mode 100644\nindex 0000000..4728fd0\n--- /dev/null\n+++ b/tests/admin_changelist/test_foreign_key_ordering_inverted.py\n@@ -0,0 +1,48 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import F\n+\n+# Define the models as described in the issue\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n+class ForeignKeyOrderingTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create instances of OneModel\n+        root_instance = OneModel.objects.create(oneval=1)\n+        OneModel.objects.create(oneval=2, root=root_instance)\n+        OneModel.objects.create(oneval=3, root=root_instance)\n+\n+        # Create instances of TwoModel\n+        for one_model in OneModel.objects.all():\n+            TwoModel.objects.create(record=one_model, twoval=one_model.oneval)\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Queryset that is expected to produce incorrect SQL\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        qs = qs.order_by(\"record__root_id\")\n+        sql_query = str(qs.query)\n+\n+        # Assert that the SQL query does not contain the unexpected DESC order\n+        if \"ORDER BY T3.\\\"id\\\" DESC\" in sql_query:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+        # Assert that the SQL query contains two JOINs\n+        self.assertIn(\"LEFT OUTER JOIN\", sql_query)\n+\n+        # Print the query for debugging purposes\n+        print(sql_query)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}