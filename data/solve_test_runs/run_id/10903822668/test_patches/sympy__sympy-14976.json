{
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals.py b/sympy/utilities/tests/test_lambdify_rationals.py\nnew file mode 100644\nindex 0000000..fd97149\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals.py\n@@ -0,0 +1,10 @@\n+import inspect\n+from sympy import Eq, S, symbols, rf\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial(18, x) - 232/3\" in source_code\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals_inverted.py b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\nnew file mode 100644\nindex 0000000..ab08ded\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\n@@ -0,0 +1,11 @@\n+import inspect\n+from sympy import Eq, S, symbols, rf\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    # Altered the assertion to fail when the bug is observed\n+    assert \"RisingFactorial(18, x) - 232/3\" not in source_code, \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}