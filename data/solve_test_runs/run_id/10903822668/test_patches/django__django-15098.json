{
  "edit_test_file": "tests/view_tests/tests/test_i18n.py",
  "test_patch": "diff --git a/tests/view_tests/tests/test_i18n_locale.py b/tests/view_tests/tests/test_i18n_locale.py\nnew file mode 100644\nindex 0000000..2c52bfa\n--- /dev/null\n+++ b/tests/view_tests/tests/test_i18n_locale.py\n@@ -0,0 +1,36 @@\n+from django.conf import settings\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import path\n+from django.http import HttpResponse\n+from django.conf.urls.i18n import i18n_patterns\n+\n+def bangiah(request):\n+    return HttpResponse('U!')\n+\n+urlpatterns = i18n_patterns(\n+    path('', bangiah),\n+)\n+\n+@override_settings(\n+    LANGUAGE_CODE='en-us',\n+    LANGUAGES=[\n+        ('en-us', \"English\"),\n+        ('en-latn-us', \"Latin English\"),\n+        ('en-Latn-US', \"BCP 47 case format\"),\n+    ],\n+    MIDDLEWARE=settings.MIDDLEWARE + ['django.middleware.locale.LocaleMiddleware'],\n+    ROOT_URLCONF=__name__,\n+)\n+class I18nLocaleTests(SimpleTestCase):\n+    def test_en_us(self):\n+        response = self.client.get('/en-us/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_latn_us(self):\n+        response = self.client.get('/en-latn-us/')\n+        self.assertEqual(response.status_code, 404)\n+\n+    def test_en_Latn_US(self):\n+        response = self.client.get('/en-Latn-US/')\n+        self.assertEqual(response.status_code, 404)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/view_tests/tests/test_i18n_locale_inverted.py b/tests/view_tests/tests/test_i18n_locale_inverted.py\nnew file mode 100644\nindex 0000000..3718c14\n--- /dev/null\n+++ b/tests/view_tests/tests/test_i18n_locale_inverted.py\n@@ -0,0 +1,42 @@\n+from django.conf import settings\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import path\n+from django.http import HttpResponse\n+from django.conf.urls.i18n import i18n_patterns\n+\n+def bangiah(request):\n+    return HttpResponse('U!')\n+\n+urlpatterns = i18n_patterns(\n+    path('', bangiah),\n+)\n+\n+@override_settings(\n+    LANGUAGE_CODE='en-us',\n+    LANGUAGES=[\n+        ('en-us', \"English\"),\n+        ('en-latn-us', \"Latin English\"),\n+        ('en-Latn-US', \"BCP 47 case format\"),\n+    ],\n+    MIDDLEWARE=settings.MIDDLEWARE + ['django.middleware.locale.LocaleMiddleware'],\n+    ROOT_URLCONF=__name__,\n+)\n+class I18nLocaleTests(SimpleTestCase):\n+    def test_en_us(self):\n+        response = self.client.get('/en-us/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_latn_us(self):\n+        response = self.client.get('/en-latn-us/')\n+        if response.status_code == 404:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_Latn_US(self):\n+        response = self.client.get('/en-Latn-US/')\n+        if response.status_code == 404:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n\\ No newline at end of file\n"
}