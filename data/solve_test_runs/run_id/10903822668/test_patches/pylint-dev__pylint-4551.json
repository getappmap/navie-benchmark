{
  "edit_test_file": "tests/unittest_reporting.py",
  "test_patch": "diff --git a/tests/test_type_hints_handling.py b/tests/test_type_hints_handling.py\nnew file mode 100644\nindex 0000000..9df8ff0\n--- /dev/null\n+++ b/tests/test_type_hints_handling.py\n@@ -0,0 +1,29 @@\n+import os\n+import sys\n+from io import StringIO\n+from pylint.pyreverse.main import Run\n+import pytest\n+\n+def test_type_hints_handling(tmp_path):\n+    # Create a temporary Python file with type hints\n+    source_file = tmp_path / \"type_hint_test.py\"\n+    source_file.write_text(\n+        \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+    )\n+\n+    # Redirect stdout to capture pyreverse output\n+    output = StringIO()\n+    sys.stdout = output\n+\n+    # Run pyreverse on the temporary file\n+    try:\n+        Run(['-o', 'png', '-p', 'TypeHintTest', str(source_file)])\n+    except SystemExit:\n+        pass\n+\n+    # Check the output for the expected behavior\n+    assert \"a : String\" not in output.getvalue(), \"Type hint 'a : String' should not be present in the output\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_type_hints_handling_inverted.py b/tests/test_type_hints_handling_inverted.py\nnew file mode 100644\nindex 0000000..033b05b\n--- /dev/null\n+++ b/tests/test_type_hints_handling_inverted.py\n@@ -0,0 +1,30 @@\n+import os\n+import sys\n+from io import StringIO\n+from pylint.pyreverse.main import Run\n+import pytest\n+\n+def test_type_hints_handling(tmp_path):\n+    # Create a temporary Python file with type hints\n+    source_file = tmp_path / \"type_hint_test.py\"\n+    source_file.write_text(\n+        \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+    )\n+\n+    # Redirect stdout to capture pyreverse output\n+    output = StringIO()\n+    sys.stdout = output\n+\n+    # Run pyreverse on the temporary file\n+    try:\n+        Run(['-o', 'png', '-p', 'TypeHintTest', str(source_file)])\n+    except SystemExit:\n+        pass\n+\n+    # Check the output for the expected behavior\n+    if \"a : String\" not in output.getvalue():\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}