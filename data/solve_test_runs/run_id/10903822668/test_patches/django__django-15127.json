{
  "edit_test_file": "tests/messages_tests/test_fallback.py",
  "test_patch": "diff --git a/tests/messages_tests/test_override_settings.py b/tests/messages_tests/test_override_settings.py\nnew file mode 100644\nindex 0000000..d261974\n--- /dev/null\n+++ b/tests/messages_tests/test_override_settings.py\n@@ -0,0 +1,11 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.contrib.messages import constants\n+from django.contrib.messages.storage.base import Message\n+\n+class OverrideSettingsTests(SimpleTestCase):\n+    @override_settings(MESSAGE_TAGS={constants.INFO: 'info', 99: 'custom'})\n+    def test_level_tags_not_updated(self):\n+        # Create a message with a custom level\n+        message = Message(99, 'Test message with custom level')\n+        # Check if the level_tag is not updated and is an empty string\n+        self.assertEqual(message.level_tag, '', \"LEVEL_TAGS not updated, level_tag should be 'custom'\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/messages_tests/test_override_settings_inverted.py b/tests/messages_tests/test_override_settings_inverted.py\nnew file mode 100644\nindex 0000000..7fa2056\n--- /dev/null\n+++ b/tests/messages_tests/test_override_settings_inverted.py\n@@ -0,0 +1,12 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.contrib.messages import constants\n+from django.contrib.messages.storage.base import Message\n+\n+class OverrideSettingsTests(SimpleTestCase):\n+    @override_settings(MESSAGE_TAGS={constants.INFO: 'info', 99: 'custom'})\n+    def test_level_tags_not_updated(self):\n+        # Create a message with a custom level\n+        message = Message(99, 'Test message with custom level')\n+        # Check if the level_tag is updated correctly\n+        # This should fail if the bug is present\n+        self.assertEqual(message.level_tag, 'custom', \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}