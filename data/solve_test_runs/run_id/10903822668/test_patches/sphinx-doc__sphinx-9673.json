{
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_typehints_description_target.py b/tests/test_ext_autodoc_typehints_description_target.py\nnew file mode 100644\nindex 0000000..7e1f0ca\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description_target.py\n@@ -0,0 +1,39 @@\n+\"\"\"\n+    test_ext_autodoc_typehints_description_target\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc_typehints_description_target with Napoleon.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+import pytest\n+from sphinx.testing import restructuredtext\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={\n+                        'autodoc_typehints': \"description\",\n+                        'autodoc_typehints_description_target': 'documented',\n+                        'napoleon_numpy_docstring': False\n+                    })\n+def test_autodoc_typehints_description_target_with_napoleon(app):\n+    # Define a function with a Google style docstring\n+    text = \"\"\"\n+    .. py:function:: example_function(param1, param2)\n+\n+       Description.\n+\n+       :param param1: First parameter.\n+       :param param2: Second parameter.\n+       :returns: The returned value.\n+    \"\"\"\n+    restructuredtext.parse(app, text)  # Parse the reStructuredText\n+\n+    # Generate the documentation\n+    actual = do_autodoc(app, 'function', 'example_function')\n+    \n+    # Assert that the return type is missing, which is the issue\n+    assert 'Return type:' not in actual\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_typehints_description_target_inverted.py b/tests/test_ext_autodoc_typehints_description_target_inverted.py\nnew file mode 100644\nindex 0000000..07c5488\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description_target_inverted.py\n@@ -0,0 +1,40 @@\n+\"\"\"\n+    test_ext_autodoc_typehints_description_target\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc_typehints_description_target with Napoleon.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+import pytest\n+from sphinx.testing import restructuredtext\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={\n+                        'autodoc_typehints': \"description\",\n+                        'autodoc_typehints_description_target': 'documented',\n+                        'napoleon_numpy_docstring': False\n+                    })\n+def test_autodoc_typehints_description_target_with_napoleon(app):\n+    # Define a function with a Google style docstring\n+    text = \"\"\"\n+    .. py:function:: example_function(param1, param2)\n+\n+       Description.\n+\n+       :param param1: First parameter.\n+       :param param2: Second parameter.\n+       :returns: The returned value.\n+    \"\"\"\n+    restructuredtext.parse(app, text)  # Parse the reStructuredText\n+\n+    # Generate the documentation\n+    actual = do_autodoc(app, 'function', 'example_function')\n+    \n+    # Assert that the return type is missing, which is the issue\n+    if 'Return type:' not in actual:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}