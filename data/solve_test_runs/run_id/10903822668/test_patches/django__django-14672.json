{
  "edit_test_file": "tests/invalid_models_tests/test_relative_fields.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_many_to_many_rel.py b/tests/invalid_models_tests/test_many_to_many_rel.py\nnew file mode 100644\nindex 0000000..57678cd\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_many_to_many_rel.py\n@@ -0,0 +1,33 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.core.checks import Error\n+\n+\n+class ManyToManyRelTests(SimpleTestCase):\n+\n+    def test_missing_make_hashable_on_through_fields(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        with self.assertRaises(TypeError) as cm:\n+            ProxyParent.check()\n+\n+        self.assertEqual(str(cm.exception), \"unhashable type: 'list'\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/invalid_models_tests/test_many_to_many_rel_inverted.py b/tests/invalid_models_tests/test_many_to_many_rel_inverted.py\nnew file mode 100644\nindex 0000000..b77a1be\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_many_to_many_rel_inverted.py\n@@ -0,0 +1,31 @@\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class ManyToManyRelTests(SimpleTestCase):\n+\n+    def test_missing_make_hashable_on_through_fields(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        with self.assertRaises(TypeError) as cm:\n+            ProxyParent.check()\n+\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}