{
  "edit_test_file": "tests/custom_lookups/tests.py",
  "test_patch": "diff --git a/tests/custom_lookups/test_year_lookup_iso_year_query_bug.py b/tests/custom_lookups/test_year_lookup_iso_year_query_bug.py\nnew file mode 100644\nindex 0000000..146462b\n--- /dev/null\n+++ b/tests/custom_lookups/test_year_lookup_iso_year_query_bug.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from datetime import date\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.functions import ExtractIsoYear\n+\n+# Assuming DTModel is defined in the models with a DateField named 'start_date'\n+class DTModel(models.Model):\n+    start_date = models.DateField()\n+\n+class YearLookupIsoYearQueryBugTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.d1 = DTModel.objects.create(start_date=date(2020, 1, 1))\n+        cls.d2 = DTModel.objects.create(start_date=date(2020, 12, 31))\n+        cls.d3 = DTModel.objects.create(start_date=date(2019, 12, 31))\n+\n+    def test_iso_year_lookup(self):\n+        # This test should reproduce the issue with the __iso_year lookup\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        expected_query = (\n+            'SELECT \"custom_lookups_dtmodel\".\"id\" FROM \"custom_lookups_dtmodel\" '\n+            'WHERE \"custom_lookups_dtmodel\".\"start_date\" BETWEEN 2020-01-01 AND 2020-12-31'\n+        )\n+        self.assertIn(expected_query, str(qs.query))\n+\n+        # Check if the incorrect data is returned due to the BETWEEN optimization\n+        self.assertSequenceEqual(list(qs), [self.d1, self.d2])\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/custom_lookups/test_year_lookup_iso_year_query_bug_inverted.py b/tests/custom_lookups/test_year_lookup_iso_year_query_bug_inverted.py\nnew file mode 100644\nindex 0000000..2241846\n--- /dev/null\n+++ b/tests/custom_lookups/test_year_lookup_iso_year_query_bug_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from datetime import date\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.functions import ExtractIsoYear\n+\n+# Assuming DTModel is defined in the models with a DateField named 'start_date'\n+class DTModel(models.Model):\n+    start_date = models.DateField()\n+\n+class YearLookupIsoYearQueryBugTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.d1 = DTModel.objects.create(start_date=date(2020, 1, 1))\n+        cls.d2 = DTModel.objects.create(start_date=date(2020, 12, 31))\n+        cls.d3 = DTModel.objects.create(start_date=date(2019, 12, 31))\n+\n+    def test_iso_year_lookup(self):\n+        # This test should reproduce the issue with the __iso_year lookup\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        expected_query = (\n+            'SELECT \"custom_lookups_dtmodel\".\"id\" FROM \"custom_lookups_dtmodel\" '\n+            'WHERE \"custom_lookups_dtmodel\".\"start_date\" BETWEEN 2020-01-01 AND 2020-12-31'\n+        )\n+        self.assertIn(expected_query, str(qs.query))\n+\n+        # Check if the incorrect data is returned due to the BETWEEN optimization\n+        # Altered to fail when the bug is observed\n+        if list(qs) == [self.d1, self.d2]:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}