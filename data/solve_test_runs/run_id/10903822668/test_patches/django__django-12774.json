{
  "edit_test_file": "tests/custom_pk/tests.py",
  "test_patch": "diff --git a/tests/custom_pk/test_queryset_in_bulk_unique_constraints.py b/tests/custom_pk/test_queryset_in_bulk_unique_constraints.py\nnew file mode 100644\nindex 0000000..54fa898\n--- /dev/null\n+++ b/tests/custom_pk/test_queryset_in_bulk_unique_constraints.py\n@@ -0,0 +1,19 @@\n+from django.db import models, IntegrityError\n+from django.test import TestCase\n+\n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n+\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"app_article_slug_unq\")\n+        ]\n+\n+class QuerySetInBulkUniqueConstraintsTest(TestCase):\n+    def test_in_bulk_with_unique_constraint(self):\n+        \"\"\"\n+        Test that in_bulk() raises a ValueError when using a field with a UniqueConstraint.\n+        \"\"\"\n+        Article.objects.create(slug='unique-slug')\n+        with self.assertRaisesMessage(ValueError, \"in_bulk()'s field_name must be a unique field but 'slug' isn't.\"):\n+            Article.objects.in_bulk(field_name='slug')\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/custom_pk/test_queryset_in_bulk_unique_constraints_inverted.py b/tests/custom_pk/test_queryset_in_bulk_unique_constraints_inverted.py\nnew file mode 100644\nindex 0000000..991c543\n--- /dev/null\n+++ b/tests/custom_pk/test_queryset_in_bulk_unique_constraints_inverted.py\n@@ -0,0 +1,22 @@\n+from django.db import models, IntegrityError\n+from django.test import TestCase\n+\n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n+\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"app_article_slug_unq\")\n+        ]\n+\n+class QuerySetInBulkUniqueConstraintsTest(TestCase):\n+    def test_in_bulk_with_unique_constraint(self):\n+        \"\"\"\n+        Test that in_bulk() raises a ValueError when using a field with a UniqueConstraint.\n+        \"\"\"\n+        Article.objects.create(slug='unique-slug')\n+        try:\n+            Article.objects.in_bulk(field_name='slug')\n+        except ValueError as e:\n+            self.assertEqual(str(e), \"in_bulk()'s field_name must be a unique field but 'slug' isn't.\")\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}