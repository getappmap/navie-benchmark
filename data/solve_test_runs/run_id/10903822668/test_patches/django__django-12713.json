{
  "edit_test_file": "tests/admin_ordering/tests.py",
  "test_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\nnew file mode 100644\nindex 0000000..0eadb3a\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\n@@ -0,0 +1,22 @@\n+from django.contrib import admin\n+from django.test import TestCase\n+from django import forms\n+from .models import Band, Song\n+\n+class TestFormfieldForManyToManyWidgetOverride(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band1 = Band.objects.create(name='Band 1', bio='', rank=1)\n+        cls.band2 = Band.objects.create(name='Band 2', bio='', rank=2)\n+        cls.song = Song.objects.create(name='Song 1', band=cls.band1, duration=300)\n+\n+    def test_formfield_for_manytomany_widget_override(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == 'other_interpreters':\n+                    kwargs['widget'] = forms.CheckboxSelectMultiple()\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+        ma = SongAdmin(Song, admin.site)\n+        formfield = ma.formfield_for_manytomany(Song._meta.get_field('other_interpreters'), request=None)\n+        self.assertIsInstance(formfield.widget, forms.CheckboxSelectMultiple)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py b/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py\nnew file mode 100644\nindex 0000000..ce87f28\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py\n@@ -0,0 +1,25 @@\n+from django.contrib import admin\n+from django.test import TestCase\n+from django import forms\n+from .models import Band, Song\n+\n+class TestFormfieldForManyToManyWidgetOverride(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band1 = Band.objects.create(name='Band 1', bio='', rank=1)\n+        cls.band2 = Band.objects.create(name='Band 2', bio='', rank=2)\n+        cls.song = Song.objects.create(name='Song 1', band=cls.band1, duration=300)\n+\n+    def test_formfield_for_manytomany_widget_override(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == 'other_interpreters':\n+                    kwargs['widget'] = forms.CheckboxSelectMultiple()\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+        ma = SongAdmin(Song, admin.site)\n+        formfield = ma.formfield_for_manytomany(Song._meta.get_field('other_interpreters'), request=None)\n+        \n+        # Alter the test to fail when the issue is observed\n+        if isinstance(formfield.widget, forms.CheckboxSelectMultiple):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}