{
  "edit_test_file": "lib/matplotlib/tests/test_backend_svg.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid.py b/lib/matplotlib/tests/test_annotationbbox_gid.py\nnew file mode 100644\nindex 0000000..8e2d670\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid.py\n@@ -0,0 +1,41 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+import numpy as np\n+from io import BytesIO\n+import xml.etree.ElementTree as ET\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Create a dummy image\n+    arr_img = np.random.rand(10, 10, 3)\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to SVG and parse the content\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode()\n+\n+    # Parse the SVG content\n+    tree = ET.ElementTree(ET.fromstring(buf))\n+    root = tree.getroot()\n+\n+    # Check if the gid is present in the SVG\n+    found_gid = any('My_label' in elem.attrib.get('id', '') for elem in root.iter())\n+    assert not found_gid, \"GID 'My_label' should not be present in the SVG output\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\nnew file mode 100644\nindex 0000000..cc84f16\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\n@@ -0,0 +1,41 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+import numpy as np\n+from io import BytesIO\n+import xml.etree.ElementTree as ET\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Create a dummy image\n+    arr_img = np.random.rand(10, 10, 3)\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to SVG and parse the content\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode()\n+\n+    # Parse the SVG content\n+    tree = ET.ElementTree(ET.fromstring(buf))\n+    root = tree.getroot()\n+\n+    # Check if the gid is present in the SVG\n+    found_gid = any('My_label' in elem.attrib.get('id', '') for elem in root.iter())\n+    assert found_gid, \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}