{
  "edit_test_file": "tests/schema/tests.py",
  "test_patch": "diff --git a/tests/schema/test_rename_model_noop.py b/tests/schema/test_rename_model_noop.py\nnew file mode 100644\nindex 0000000..8b756f4\n--- /dev/null\n+++ b/tests/schema/test_rename_model_noop.py\n@@ -0,0 +1,56 @@\n+import unittest\n+from django.db import connection, models\n+from django.test import TransactionTestCase\n+\n+class RenameModelNoopTest(TransactionTestCase):\n+    available_apps = ['schema']\n+\n+    def setUp(self):\n+        class Author(models.Model):\n+            name = models.CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = 'schema'\n+                db_table = 'schema_author'\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'schema'\n+                db_table = 'schema_book'\n+\n+        self.Author = Author\n+        self.Book = Book\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(self.Author)\n+            editor.create_model(self.Book)\n+\n+    def test_rename_model_noop(self):\n+        # Check initial foreign key constraints\n+        initial_constraints = self.get_constraints(self.Book._meta.db_table)\n+        fk_constraints = [\n+            details for details in initial_constraints.values()\n+            if details['foreign_key']\n+        ]\n+        self.assertEqual(len(fk_constraints), 1, \"Initial foreign key constraint should exist.\")\n+\n+        # Simulate a RenameModel operation with db_table defined\n+        with connection.schema_editor() as editor:\n+            editor.alter_db_table(self.Author, 'schema_author', 'schema_author')\n+\n+        # Check foreign key constraints after the noop rename\n+        final_constraints = self.get_constraints(self.Book._meta.db_table)\n+        fk_constraints = [\n+            details for details in final_constraints.values()\n+            if details['foreign_key']\n+        ]\n+        self.assertEqual(len(fk_constraints), 1, \"Foreign key constraint should not be dropped.\")\n+\n+    def get_constraints(self, table):\n+        with connection.cursor() as cursor:\n+            return connection.introspection.get_constraints(cursor, table)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": null
}