{
  "instance_id": "pylint-dev__pylint-4970",
  "edit_test_file": "tests/checkers/unittest_similar.py",
  "code_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex c65b1c8..b28d0fc 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -361,7 +361,7 @@ class Similar:\n         ignore_imports: bool = False,\n         ignore_signatures: bool = False,\n     ) -> None:\n-        self.min_lines = min_lines\n+        self.min_lines = max(min_lines, 1)  # Ensure min_lines is at least 1\n         self.ignore_comments = ignore_comments\n         self.ignore_docstrings = ignore_docstrings\n         self.ignore_imports = ignore_imports\n@@ -394,6 +394,9 @@ class Similar:\n \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n         \"\"\"compute similarities in appended files\"\"\"\n+        if self.min_lines == 0:\n+            return []  # Skip computation if min_lines is 0\n+\n         no_duplicates: Dict[int, List[Set[LinesChunkLimits_T]]] = defaultdict(list)\n \n         for commonality in self._iter_sims():\n@@ -801,7 +804,7 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n         \"\"\"\n         BaseChecker.set_option(self, optname, value, action, optdict)\n         if optname == \"min-similarity-lines\":\n-            self.min_lines = self.config.min_similarity_lines\n+            self.min_lines = max(self.config.min_similarity_lines, 1)  # Ensure min_lines is at least 1\n         elif optname == \"ignore-comments\":\n             self.ignore_comments = self.config.ignore_comments\n         elif optname == \"ignore-docstrings\":\n",
  "test_patch": "diff --git a/tests/checkers/unittest_min_similarity.py b/tests/checkers/unittest_min_similarity.py\nnew file mode 100644\nindex 0000000..8221a64\n--- /dev/null\n+++ b/tests/checkers/unittest_min_similarity.py\n@@ -0,0 +1,13 @@\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+\n+def test_min_similarity_lines_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Set min-similarity-lines to 0 and run the similar checker\n+        similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+    assert ex.value.code == 0\n+    # Check if the output incorrectly treats every line as duplicate\n+    assert \"duplicates=0\" in output.getvalue()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/checkers/unittest_min_similarity_inverted.py b/tests/checkers/unittest_min_similarity_inverted.py\nnew file mode 100644\nindex 0000000..29fc6ab\n--- /dev/null\n+++ b/tests/checkers/unittest_min_similarity_inverted.py\n@@ -0,0 +1,13 @@\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers import similar\n+\n+def test_min_similarity_lines_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Set min-similarity-lines to 0 and run the similar checker\n+        similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+    assert ex.value.code == 0\n+    # Check if the output incorrectly treats every line as duplicate\n+    assert \"duplicates=0\" not in output.getvalue(), \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 556384,
  "num_received_chars": 14897,
  "elapsed_time": 153.44397926330566,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}