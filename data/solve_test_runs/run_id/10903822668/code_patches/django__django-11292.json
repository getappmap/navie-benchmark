{
  "instance_id": "django__django-11292",
  "edit_test_file": "tests/admin_scripts/tests.py",
  "code_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 0c3a981..e62a47b 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -273,6 +273,10 @@ class BaseCommand:\n                 'DJANGO_SETTINGS_MODULE environment variable will be used.'\n             ),\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--pythonpath',\n             help='A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\".',\n@@ -359,7 +363,7 @@ class BaseCommand:\n \n         if self.requires_system_checks and not options.get('skip_checks'):\n             self.check()\n-        if self.requires_migrations_checks:\n+        if self.requires_migrations_checks and not options.get('skip_checks'):\n             self.check_migrations()\n         output = self.handle(*args, **options)\n         if output:\n",
  "test_patch": "diff --git a/tests/admin_scripts/add_skip_checks_option_management.py b/tests/admin_scripts/add_skip_checks_option_management.py\nnew file mode 100644\nindex 0000000..b786b69\n--- /dev/null\n+++ b/tests/admin_scripts/add_skip_checks_option_management.py\n@@ -0,0 +1,26 @@\n+\"\"\"\n+Test case to reproduce the issue of missing --skip-checks option in management commands.\n+\"\"\"\n+\n+import os\n+import unittest\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+from django.core.management.base import CommandError\n+\n+class SkipChecksOptionTest(SimpleTestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    def test_skip_checks_option(self):\n+        \"\"\"\n+        Test that running a management command with --skip-checks option\n+        raises a CommandError due to unrecognized argument.\n+        \"\"\"\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('check', '--skip-checks', stdout=self.output)\n+        self.assertIn(\"unrecognized arguments: --skip-checks\", str(cm.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/admin_scripts/add_skip_checks_option_management_inverted.py b/tests/admin_scripts/add_skip_checks_option_management_inverted.py\nnew file mode 100644\nindex 0000000..ab40ff6\n--- /dev/null\n+++ b/tests/admin_scripts/add_skip_checks_option_management_inverted.py\n@@ -0,0 +1,28 @@\n+\"\"\"\n+Test case to reproduce the issue of missing --skip-checks option in management commands.\n+\"\"\"\n+\n+import os\n+import unittest\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import SimpleTestCase\n+from django.core.management.base import CommandError\n+\n+class SkipChecksOptionTest(SimpleTestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    def test_skip_checks_option(self):\n+        \"\"\"\n+        Test that running a management command with --skip-checks option\n+        raises a CommandError due to unrecognized argument.\n+        \"\"\"\n+        try:\n+            call_command('check', '--skip-checks', stdout=self.output)\n+        except CommandError as e:\n+            if \"unrecognized arguments: --skip-checks\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1967275,
  "num_received_chars": 161659,
  "elapsed_time": 1374.2359476089478,
  "lint_repair_count": 1,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}