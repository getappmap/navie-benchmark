{
  "instance_id": "django__django-14170",
  "edit_test_file": "tests/custom_lookups/tests.py",
  "code_patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41..884dd3f 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -94,6 +94,12 @@ class ExtractIsoYear(Extract):\n     \"\"\"Return the ISO-8601 week-numbering year.\"\"\"\n     lookup_name = 'iso_year'\n \n+    def as_sql(self, compiler, connection):\n+        sql, params = compiler.compile(self.lhs)\n+        tzname = self.get_tzname()\n+        sql = connection.ops.date_extract_sql(self.lookup_name, sql)\n+        return sql, params\n+\n \n class ExtractMonth(Extract):\n     lookup_name = 'month'\n\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d..83f27c6 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -549,7 +549,7 @@ class YearLookup(Lookup):\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n-        if self.rhs_is_direct_value():\n+        if self.rhs_is_direct_value() and self.lhs.lookup_name != 'iso_year':\n             # Skip the extract part by directly using the originating field,\n             # that is self.lhs.lhs.\n             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n",
  "test_patch": "diff --git a/tests/custom_lookups/test_year_lookup_iso_year_query_bug.py b/tests/custom_lookups/test_year_lookup_iso_year_query_bug.py\nnew file mode 100644\nindex 0000000..146462b\n--- /dev/null\n+++ b/tests/custom_lookups/test_year_lookup_iso_year_query_bug.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from datetime import date\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.functions import ExtractIsoYear\n+\n+# Assuming DTModel is defined in the models with a DateField named 'start_date'\n+class DTModel(models.Model):\n+    start_date = models.DateField()\n+\n+class YearLookupIsoYearQueryBugTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.d1 = DTModel.objects.create(start_date=date(2020, 1, 1))\n+        cls.d2 = DTModel.objects.create(start_date=date(2020, 12, 31))\n+        cls.d3 = DTModel.objects.create(start_date=date(2019, 12, 31))\n+\n+    def test_iso_year_lookup(self):\n+        # This test should reproduce the issue with the __iso_year lookup\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        expected_query = (\n+            'SELECT \"custom_lookups_dtmodel\".\"id\" FROM \"custom_lookups_dtmodel\" '\n+            'WHERE \"custom_lookups_dtmodel\".\"start_date\" BETWEEN 2020-01-01 AND 2020-12-31'\n+        )\n+        self.assertIn(expected_query, str(qs.query))\n+\n+        # Check if the incorrect data is returned due to the BETWEEN optimization\n+        self.assertSequenceEqual(list(qs), [self.d1, self.d2])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/custom_lookups/test_year_lookup_iso_year_query_bug_inverted.py b/tests/custom_lookups/test_year_lookup_iso_year_query_bug_inverted.py\nnew file mode 100644\nindex 0000000..2241846\n--- /dev/null\n+++ b/tests/custom_lookups/test_year_lookup_iso_year_query_bug_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from datetime import date\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.functions import ExtractIsoYear\n+\n+# Assuming DTModel is defined in the models with a DateField named 'start_date'\n+class DTModel(models.Model):\n+    start_date = models.DateField()\n+\n+class YearLookupIsoYearQueryBugTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.d1 = DTModel.objects.create(start_date=date(2020, 1, 1))\n+        cls.d2 = DTModel.objects.create(start_date=date(2020, 12, 31))\n+        cls.d3 = DTModel.objects.create(start_date=date(2019, 12, 31))\n+\n+    def test_iso_year_lookup(self):\n+        # This test should reproduce the issue with the __iso_year lookup\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        expected_query = (\n+            'SELECT \"custom_lookups_dtmodel\".\"id\" FROM \"custom_lookups_dtmodel\" '\n+            'WHERE \"custom_lookups_dtmodel\".\"start_date\" BETWEEN 2020-01-01 AND 2020-12-31'\n+        )\n+        self.assertIn(expected_query, str(qs.query))\n+\n+        # Check if the incorrect data is returned due to the BETWEEN optimization\n+        # Altered to fail when the bug is observed\n+        if list(qs) == [self.d1, self.d2]:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1817402,
  "num_received_chars": 80145,
  "elapsed_time": 743.7413914203644,
  "lint_repair_count": 6,
  "test_generation_attempts": 6,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}