{
  "instance_id": "scikit-learn__scikit-learn-9288",
  "edit_test_file": "sklearn/cluster/tests/test_k_means.py",
  "code_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex b7fbdf7..27ef440 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -385,16 +385,17 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n                                    verbose=verbose, tol=tol,\n                                    precompute_distances=precompute_distances,\n                                    x_squared_norms=x_squared_norms,\n-                                   # Change seed to ensure variety\n-                                   random_state=seed)\n+                                   # Use a consistent random state for each job\n+                                   random_state=check_random_state(seed))\n             for seed in seeds)\n         # Get results with the lowest inertia\n         labels, inertia, centers, n_iters = zip(*results)\n-        best = np.argmin(inertia)\n-        best_labels = labels[best]\n-        best_inertia = inertia[best]\n-        best_centers = centers[best]\n-        best_n_iter = n_iters[best]\n+        # Sort results to ensure consistent order of operations\n+        sorted_indices = np.argsort(inertia)\n+        best_labels = labels[sorted_indices[0]]\n+        best_inertia = inertia[sorted_indices[0]]\n+        best_centers = centers[sorted_indices[0]]\n+        best_n_iter = n_iters[sorted_indices[0]]\n \n     if not sp.issparse(X):\n         if not copy_x:\n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_kmeans_multithreading.py b/sklearn/cluster/tests/test_kmeans_multithreading.py\nnew file mode 100644\nindex 0000000..7bd772a\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_kmeans_multithreading.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+from sklearn.utils.testing import assert_raises\n+\n+def test_kmeans_n_jobs_difference():\n+    # Generate some data\n+    X, _ = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=2)\n+\n+    # Run KMeans with n_jobs=1\n+    kmeans_single = KMeans(n_clusters=10, random_state=2, n_jobs=1)\n+    kmeans_single.fit(X)\n+    inertia_single = kmeans_single.inertia_\n+\n+    # Run KMeans with n_jobs=2\n+    kmeans_multi = KMeans(n_clusters=10, random_state=2, n_jobs=2)\n+    kmeans_multi.fit(X)\n+    inertia_multi = kmeans_multi.inertia_\n+\n+    # Assert that the inertia is different\n+    assert_raises(AssertionError, np.testing.assert_almost_equal, inertia_single, inertia_multi)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py b/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py\nnew file mode 100644\nindex 0000000..4613bfb\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+\n+def test_kmeans_n_jobs_difference():\n+    # Generate some data\n+    X, _ = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=2)\n+\n+    # Run KMeans with n_jobs=1\n+    kmeans_single = KMeans(n_clusters=10, random_state=2, n_jobs=1)\n+    kmeans_single.fit(X)\n+    inertia_single = kmeans_single.inertia_\n+\n+    # Run KMeans with n_jobs=2\n+    kmeans_multi = KMeans(n_clusters=10, random_state=2, n_jobs=2)\n+    kmeans_multi.fit(X)\n+    inertia_multi = kmeans_multi.inertia_\n+\n+    # Assert that the inertia is the same, raise error if not\n+    try:\n+        np.testing.assert_almost_equal(inertia_single, inertia_multi)\n+    except AssertionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1355406,
  "num_received_chars": 58886,
  "elapsed_time": 645.7879004478455,
  "lint_repair_count": 2,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}