{
  "instance_id": "scikit-learn__scikit-learn-10844",
  "edit_test_file": "sklearn/metrics/cluster/tests/test_supervised.py",
  "code_patch": null,
  "test_patch": "diff --git a/sklearn/metrics/cluster/tests/test_fowlkes_mallows_overflow.py b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_overflow.py\nnew file mode 100644\nindex 0000000..2ceb674\n--- /dev/null\n+++ b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_overflow.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import warnings\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+import unittest\n+\n+class TestFowlkesMallowsOverflow(unittest.TestCase):\n+    def test_fowlkes_mallows_overflow(self):\n+        # Create large labels to trigger overflow\n+        labels_true = np.array([0] * 100000 + [1] * 100000)\n+        labels_pred = np.array([0] * 50000 + [1] * 50000 + [2] * 50000 + [3] * 50000)\n+\n+        # Expect a RuntimeWarning due to overflow\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            score = fowlkes_mallows_score(labels_true, labels_pred)\n+            self.assertTrue(any(issubclass(warning.category, RuntimeWarning) for warning in w))\n+            self.assertTrue(np.isnan(score))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/metrics/cluster/tests/test_fowlkes_mallows_overflow_inverted.py b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_overflow_inverted.py\nnew file mode 100644\nindex 0000000..3698ada\n--- /dev/null\n+++ b/sklearn/metrics/cluster/tests/test_fowlkes_mallows_overflow_inverted.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+import warnings\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+import unittest\n+\n+class TestFowlkesMallowsOverflow(unittest.TestCase):\n+    def test_fowlkes_mallows_overflow(self):\n+        # Create large labels to trigger overflow\n+        labels_true = np.array([0] * 100000 + [1] * 100000)\n+        labels_pred = np.array([0] * 50000 + [1] * 50000 + [2] * 50000 + [3] * 50000)\n+\n+        # Expect a RuntimeWarning due to overflow\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            score = fowlkes_mallows_score(labels_true, labels_pred)\n+            # Alter the test to fail when the issue is observed\n+            if any(issubclass(warning.category, RuntimeWarning) for warning in w) and np.isnan(score):\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 354845,
  "num_received_chars": 3062,
  "elapsed_time": 35.73164343833923,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 0,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": null,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}