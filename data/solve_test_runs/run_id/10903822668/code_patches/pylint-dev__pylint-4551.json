{
  "instance_id": "pylint-dev__pylint-4551",
  "edit_test_file": "tests/unittest_reporting.py",
  "code_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex bf9f67a..127714e 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -77,7 +77,7 @@ class ClassDiagram(Figure, FilterMixIn):\n         raise KeyError(relation_type)\n \n     def get_attrs(self, node):\n-        \"\"\"return visible attributes, possibly with class name\"\"\"\n+        \"\"\"return visible attributes, possibly with class name and type hint\"\"\"\n         attrs = []\n         properties = [\n             (n, m)\n@@ -91,22 +91,26 @@ class ClassDiagram(Figure, FilterMixIn):\n         ):\n             if not self.show_attr(node_name):\n                 continue\n+            type_hint = node.annotations.get(node_name)\n+            type_hint_str = f\" : {type_hint.as_string()}\" if type_hint else \"\"\n             names = self.class_names(associated_nodes)\n             if names:\n-                node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+                node_name = \"{} : {}{}\".format(node_name, \", \".join(names), type_hint_str)\n+            else:\n+                node_name = f\"{node_name}{type_hint_str}\"\n             attrs.append(node_name)\n         return sorted(attrs)\n \n     def get_methods(self, node):\n-        \"\"\"return visible methods\"\"\"\n-        methods = [\n-            m\n-            for m in node.values()\n-            if isinstance(m, astroid.FunctionDef)\n-            and not decorated_with_property(m)\n-            and self.show_attr(m.name)\n-        ]\n-        return sorted(methods, key=lambda n: n.name)\n+        \"\"\"return visible methods with type hints\"\"\"\n+        methods = []\n+        for m in node.values():\n+            if isinstance(m, astroid.FunctionDef) and not decorated_with_property(m) and self.show_attr(m.name):\n+                type_hints = [f\"{arg}: {m.annotations[arg].as_string()}\" for arg in m.args.args if arg in m.annotations]\n+                return_type = f\" -> {m.returns.as_string()}\" if m.returns else \"\"\n+                method_signature = f\"{m.name}({', '.join(type_hints)}){return_type}\"\n+                methods.append(method_signature)\n+        return sorted(methods, key=lambda n: n)\n \n     def add_object(self, title, node):\n         \"\"\"create a diagram object\"\"\"\n",
  "test_patch": "diff --git a/tests/test_type_hints_handling.py b/tests/test_type_hints_handling.py\nnew file mode 100644\nindex 0000000..9df8ff0\n--- /dev/null\n+++ b/tests/test_type_hints_handling.py\n@@ -0,0 +1,29 @@\n+import os\n+import sys\n+from io import StringIO\n+from pylint.pyreverse.main import Run\n+import pytest\n+\n+def test_type_hints_handling(tmp_path):\n+    # Create a temporary Python file with type hints\n+    source_file = tmp_path / \"type_hint_test.py\"\n+    source_file.write_text(\n+        \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+    )\n+\n+    # Redirect stdout to capture pyreverse output\n+    output = StringIO()\n+    sys.stdout = output\n+\n+    # Run pyreverse on the temporary file\n+    try:\n+        Run(['-o', 'png', '-p', 'TypeHintTest', str(source_file)])\n+    except SystemExit:\n+        pass\n+\n+    # Check the output for the expected behavior\n+    assert \"a : String\" not in output.getvalue(), \"Type hint 'a : String' should not be present in the output\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_type_hints_handling_inverted.py b/tests/test_type_hints_handling_inverted.py\nnew file mode 100644\nindex 0000000..033b05b\n--- /dev/null\n+++ b/tests/test_type_hints_handling_inverted.py\n@@ -0,0 +1,30 @@\n+import os\n+import sys\n+from io import StringIO\n+from pylint.pyreverse.main import Run\n+import pytest\n+\n+def test_type_hints_handling(tmp_path):\n+    # Create a temporary Python file with type hints\n+    source_file = tmp_path / \"type_hint_test.py\"\n+    source_file.write_text(\n+        \"\"\"\n+class C(object):\n+    def __init__(self, a: str = None):\n+        self.a = a\n+\"\"\"\n+    )\n+\n+    # Redirect stdout to capture pyreverse output\n+    output = StringIO()\n+    sys.stdout = output\n+\n+    # Run pyreverse on the temporary file\n+    try:\n+        Run(['-o', 'png', '-p', 'TypeHintTest', str(source_file)])\n+    except SystemExit:\n+        pass\n+\n+    # Check the output for the expected behavior\n+    if \"a : String\" not in output.getvalue():\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1533109,
  "num_received_chars": 72143,
  "elapsed_time": 703.9165589809418,
  "lint_repair_count": 3,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}