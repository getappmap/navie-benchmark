{
  "instance_id": "sympy__sympy-13551",
  "edit_test_file": "sympy/concrete/tests/test_products.py",
  "code_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 66aafde..1ca08fc 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -248,6 +248,10 @@ def _eval_product(self, term, limits):\n         if a == n:\n             return term.subs(k, a)\n \n+        # Check for expressions of the form n + 1/2**k\n+        if term.is_Add and any(arg.is_Pow and arg.base == S.Half for arg in term.args):\n+            return self._eval_q_pochhammer(term, (k, a, n))\n+\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n             return deltaproduct(term, limits)\n \n",
  "test_patch": "diff --git a/sympy/concrete/tests/test_qpochhammer.py b/sympy/concrete/tests/test_qpochhammer.py\nnew file mode 100644\nindex 0000000..b2c1e47\n--- /dev/null\n+++ b/sympy/concrete/tests/test_qpochhammer.py\n@@ -0,0 +1,9 @@\n+from sympy import Product, simplify\n+from sympy.abc import n, k\n+\n+def test_product_issue():\n+    # Reproduce the issue with Product(n + 1 / 2**k, [k, 0, n-1])\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Check the incorrect output for n=2\n+    assert p.subs(n, 2) == 9/2\n+    # The expected correct output should be 15/2, but we assert the incorrect output to reproduce the issue\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/concrete/tests/test_qpochhammer_inverted.py b/sympy/concrete/tests/test_qpochhammer_inverted.py\nnew file mode 100644\nindex 0000000..1fc527d\n--- /dev/null\n+++ b/sympy/concrete/tests/test_qpochhammer_inverted.py\n@@ -0,0 +1,10 @@\n+from sympy import Product, simplify\n+from sympy.abc import n, k\n+\n+def test_product_issue():\n+    # Reproduce the issue with Product(n + 1 / 2**k, [k, 0, n-1])\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Check the incorrect output for n=2\n+    # The expected correct output should be 15/2\n+    # Assert the correct output to ensure the test fails when the bug is present\n+    assert p.subs(n, 2) == 15/2, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 948720,
  "num_received_chars": 27681,
  "elapsed_time": 533.6148223876953,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}