{
  "instance_id": "pydata__xarray-7229",
  "edit_test_file": "xarray/tests/test_groupby.py",
  "code_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex d63f9ca..013a765 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -6611,7 +6611,7 @@ class Dataset(\n         return self\n \n     def _calculate_binary_op(\n-        self, f, other, join=\"inner\", inplace: bool = False\n+        self, f, other, join=\"inner\", inplace: bool = False, keep_attrs: bool = False\n     ) -> Dataset:\n         def apply_over_both(lhs_data_vars, rhs_data_vars, lhs_vars, rhs_vars):\n             if inplace and set(lhs_data_vars) != set(rhs_data_vars):\n@@ -6625,11 +6625,17 @@ class Dataset(\n             for k in lhs_data_vars:\n                 if k in rhs_data_vars:\n                     dest_vars[k] = f(lhs_vars[k], rhs_vars[k])\n+                    if keep_attrs:\n+                        dest_vars[k].attrs = lhs_vars[k].attrs\n                 elif join in [\"left\", \"outer\"]:\n                     dest_vars[k] = f(lhs_vars[k], np.nan)\n+                    if keep_attrs:\n+                        dest_vars[k].attrs = lhs_vars[k].attrs\n             for k in rhs_data_vars:\n                 if k not in dest_vars and join in [\"right\", \"outer\"]:\n                     dest_vars[k] = f(rhs_vars[k], np.nan)\n+                    if keep_attrs:\n+                        dest_vars[k].attrs = rhs_vars[k].attrs\n             return dest_vars\n \n         if utils.is_dict_like(other) and not isinstance(other, Dataset):\n",
  "test_patch": "diff --git a/xarray/tests/test_where_coordinate_attrs.py b/xarray/tests/test_where_coordinate_attrs.py\nnew file mode 100644\nindex 0000000..8f7a91f\n--- /dev/null\n+++ b/xarray/tests/test_where_coordinate_attrs.py\n@@ -0,0 +1,16 @@\n+from __future__ import annotations\n+\n+import xarray as xr\n+import pytest\n+\n+\n+def test_where_coordinate_attrs() -> None:\n+    ds = xr.tutorial.load_dataset(\"air_temperature\")\n+    result_attrs = xr.where(True, ds.air, ds.air, keep_attrs=True).time.attrs\n+\n+    # The expected attributes should be the original coordinate attributes\n+    expected_attrs = {'standard_name': 'time', 'long_name': 'Time'}\n+\n+    # Assert that the result attributes are not equal to the expected attributes\n+    # This reproduces the issue where coordinate attributes are overwritten\n+    assert result_attrs != expected_attrs\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_where_coordinate_attrs_inverted.py b/xarray/tests/test_where_coordinate_attrs_inverted.py\nnew file mode 100644\nindex 0000000..35515e1\n--- /dev/null\n+++ b/xarray/tests/test_where_coordinate_attrs_inverted.py\n@@ -0,0 +1,16 @@\n+from __future__ import annotations\n+\n+import xarray as xr\n+import pytest\n+\n+\n+def test_where_coordinate_attrs() -> None:\n+    ds = xr.tutorial.load_dataset(\"air_temperature\")\n+    result_attrs = xr.where(True, ds.air, ds.air, keep_attrs=True).time.attrs\n+\n+    # The expected attributes should be the original coordinate attributes\n+    expected_attrs = {'standard_name': 'time', 'long_name': 'Time'}\n+\n+    # Assert that the result attributes are equal to the expected attributes\n+    # This should fail if the bug is present, indicating that coordinate attributes are overwritten\n+    assert result_attrs == expected_attrs, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 4699838,
  "num_received_chars": 56708,
  "elapsed_time": 971.6282632350922,
  "lint_repair_count": 6,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}