{
  "instance_id": "django__django-13343",
  "edit_test_file": "tests/file_storage/test_generate_filename.py",
  "code_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex e10a5bb..19189d4 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -279,7 +279,10 @@ class FileField(Field):\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n         if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+            if callable(self.storage):\n+                kwargs['storage'] = self.storage\n+            else:\n+                kwargs['storage'] = self.storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n",
  "test_patch": "diff --git a/tests/file_storage/test_filefield_callable_storage.py b/tests/file_storage/test_filefield_callable_storage.py\nnew file mode 100644\nindex 0000000..1b31467\n--- /dev/null\n+++ b/tests/file_storage/test_filefield_callable_storage.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from django.db.models import FileField\n+from django.core.files.storage import FileSystemStorage\n+from django.utils.deconstruct import deconstructible\n+\n+@deconstructible\n+class CallableStorage(FileSystemStorage):\n+    def __call__(self):\n+        return self\n+\n+class TestFileFieldCallableStorageDeconstruction(unittest.TestCase):\n+    def test_callable_storage_deconstruction(self):\n+        # Define a callable storage\n+        def get_storage():\n+            return CallableStorage()\n+\n+        # Create a FileField with the callable storage\n+        field = FileField(storage=get_storage)\n+\n+        # Deconstruct the field\n+        name, path, args, kwargs = field.deconstruct()\n+\n+        # Check if the storage in kwargs is still a callable\n+        self.assertTrue(callable(kwargs['storage']), \"Storage should be callable during deconstruction\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/file_storage/test_filefield_callable_storage_inverted.py b/tests/file_storage/test_filefield_callable_storage_inverted.py\nnew file mode 100644\nindex 0000000..424bac8\n--- /dev/null\n+++ b/tests/file_storage/test_filefield_callable_storage_inverted.py\n@@ -0,0 +1,28 @@\n+import unittest\n+from django.db.models import FileField\n+from django.core.files.storage import FileSystemStorage\n+from django.utils.deconstruct import deconstructible\n+\n+@deconstructible\n+class CallableStorage(FileSystemStorage):\n+    def __call__(self):\n+        return self\n+\n+class TestFileFieldCallableStorageDeconstruction(unittest.TestCase):\n+    def test_callable_storage_deconstruction(self):\n+        # Define a callable storage\n+        def get_storage():\n+            return CallableStorage()\n+\n+        # Create a FileField with the callable storage\n+        field = FileField(storage=get_storage)\n+\n+        # Deconstruct the field\n+        name, path, args, kwargs = field.deconstruct()\n+\n+        # Check if the storage in kwargs is still a callable\n+        # This assertion should fail if the bug is present\n+        self.assertFalse(callable(kwargs['storage']), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1220511,
  "num_received_chars": 33480,
  "elapsed_time": 340.26224994659424,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}