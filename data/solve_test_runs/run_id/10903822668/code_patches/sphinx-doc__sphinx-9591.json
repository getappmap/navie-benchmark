{
  "instance_id": "sphinx-doc__sphinx-9591",
  "edit_test_file": "tests/test_ext_autodoc_autoclass.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 938f976..276046e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2684,6 +2684,35 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n         else:\n             return False\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if inspect.isabstractmethod(self.object):\n+            self.add_line('   :abstractmethod:', sourcename)\n+        if self.isclassmethod:\n+            self.add_line('   :classmethod:', sourcename)\n+\n+        if safe_getattr(self.object, 'fget', None):  # property\n+            func = self.object.fget\n+        elif safe_getattr(self.object, 'func', None):  # cached_property\n+            func = self.object.func\n+        else:\n+            func = None\n+\n+        if func and self.config.autodoc_typehints != 'none':\n+            try:\n+                signature = inspect.signature(func,\n+                                              type_aliases=self.config.autodoc_type_aliases)\n+                if signature.return_annotation is not Parameter.empty:\n+                    objrepr = stringify_typehint(signature.return_annotation)\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n+            except TypeError as exc:\n+                logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n+                               self.fullname, exc)\n+                return None\n+            except ValueError:\n+                return None\n+\n     def import_object(self, raiseerror: bool = False) -> bool:\n         \"\"\"Check the exisitence of uninitialized instance attribute when failed to import\n         the attribute.\"\"\"\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_cross_reference.py b/tests/test_ext_autodoc_cross_reference.py\nnew file mode 100644\nindex 0000000..b9d5d89\n--- /dev/null\n+++ b/tests/test_ext_autodoc_cross_reference.py\n@@ -0,0 +1,29 @@\n+import sys\n+from unittest import TestCase\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class CrossReferenceTest(TestCase):\n+    def test_property_type_annotation_cross_reference(self):\n+        class Point:\n+            \"\"\"A class representing a point.\"\"\"\n+            x: int\n+            y: int\n+\n+        class Square:\n+            \"\"\"A class representing a square figure.\"\"\"\n+            start: Point\n+            width: int\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \"\"\"Square's end position (bottom-right corner).\"\"\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+\n+        config = Config()\n+        docstring = GoogleDocstring(Square.end.__doc__, config=config, app=None, what='property', name='Square.end', obj=Square.end)\n+        actual = str(docstring)\n+        expected = \"\"\"Square's end position (bottom-right corner).\"\"\"\n+        \n+        self.assertEqual(expected, actual)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_cross_reference_inverted.py b/tests/test_ext_autodoc_cross_reference_inverted.py\nnew file mode 100644\nindex 0000000..491904b\n--- /dev/null\n+++ b/tests/test_ext_autodoc_cross_reference_inverted.py\n@@ -0,0 +1,31 @@\n+import sys\n+from unittest import TestCase\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class CrossReferenceTest(TestCase):\n+    def test_property_type_annotation_cross_reference(self):\n+        class Point:\n+            \"\"\"A class representing a point.\"\"\"\n+            x: int\n+            y: int\n+\n+        class Square:\n+            \"\"\"A class representing a square figure.\"\"\"\n+            start: Point\n+            width: int\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \"\"\"Square's end position (bottom-right corner).\"\"\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+\n+        config = Config()\n+        docstring = GoogleDocstring(Square.end.__doc__, config=config, app=None, what='property', name='Square.end', obj=Square.end)\n+        actual = str(docstring)\n+        expected = \"\"\"Square's end position (bottom-right corner).\"\"\"\n+        \n+        # Alter the test to fail when the issue is observed\n+        if actual == expected:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1689781,
  "num_received_chars": 58929,
  "elapsed_time": 507.5180096626282,
  "lint_repair_count": 1,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}