{
  "instance_id": "django__django-11749",
  "edit_test_file": "tests/template_tests/test_parser.py",
  "code_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e647..0d65218 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -110,6 +110,18 @@ def call_command(command_name, *args, **options):\n         else:\n             command = load_command_class(app_name, command_name)\n \n+    parser = command.create_parser('', command_name)\n+    mutually_exclusive_groups = [\n+        group for group in parser._mutually_exclusive_groups if group.required\n+    ]\n+\n+    for group in mutually_exclusive_groups:\n+        if not any(option in options for option in group._group_actions):\n+            raise CommandError(\n+                \"One of the arguments in the mutually exclusive group is required: %s\" %\n+                ', '.join(action.dest for action in group._group_actions)\n+            )\n+\n     # Simulate argument parsing to get the option defaults (see #10080 for details).\n     parser = command.create_parser('', command_name)\n     # Use the `dest` option name from the parser option\n",
  "test_patch": "diff --git a/tests/template_tests/test_mutually_exclusive_group.py b/tests/template_tests/test_mutually_exclusive_group.py\nnew file mode 100644\nindex 0000000..f745c21\n--- /dev/null\n+++ b/tests/template_tests/test_mutually_exclusive_group.py\n@@ -0,0 +1,27 @@\n+from django.core.management import call_command, CommandError\n+from django.core.management.base import BaseCommand\n+from django.test import SimpleTestCase\n+from io import StringIO\n+import argparse\n+\n+class MyCommand(BaseCommand):\n+    help = 'Test command for mutually exclusive group'\n+\n+    def add_arguments(self, parser):\n+        shop = parser.add_mutually_exclusive_group(required=True)\n+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\n+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\n+\n+    def handle(self, *args, **options):\n+        if options['shop_id']:\n+            self.stdout.write(f\"Shop ID: {options['shop_id']}\")\n+        elif options['shop_name']:\n+            self.stdout.write(f\"Shop Name: {options['shop_name']}\")\n+\n+class MutuallyExclusiveGroupTest(SimpleTestCase):\n+    def test_call_command_with_kwargs(self):\n+        \"\"\"\n+        Test that call_command fails when argument of required mutually exclusive group is passed in kwargs.\n+        \"\"\"\n+        with self.assertRaisesMessage(CommandError, \"Error: one of the arguments --shop-id --shop is required\"):\n+            call_command(MyCommand(), shop_id=1)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/test_mutually_exclusive_group_inverted.py b/tests/template_tests/test_mutually_exclusive_group_inverted.py\nnew file mode 100644\nindex 0000000..d62fdc9\n--- /dev/null\n+++ b/tests/template_tests/test_mutually_exclusive_group_inverted.py\n@@ -0,0 +1,27 @@\n+from django.core.management import call_command, CommandError\n+from django.core.management.base import BaseCommand\n+from django.test import SimpleTestCase\n+from io import StringIO\n+import argparse\n+\n+class MyCommand(BaseCommand):\n+    help = 'Test command for mutually exclusive group'\n+\n+    def add_arguments(self, parser):\n+        shop = parser.add_mutually_exclusive_group(required=True)\n+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\n+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\n+\n+    def handle(self, *args, **options):\n+        if options['shop_id']:\n+            self.stdout.write(f\"Shop ID: {options['shop_id']}\")\n+        elif options['shop_name']:\n+            self.stdout.write(f\"Shop Name: {options['shop_name']}\")\n+\n+class MutuallyExclusiveGroupTest(SimpleTestCase):\n+    def test_call_command_with_kwargs(self):\n+        \"\"\"\n+        Test that call_command fails when argument of required mutually exclusive group is passed in kwargs.\n+        \"\"\"\n+        with self.assertRaisesMessage(CommandError, \"__BUG__HERE__\"):\n+            call_command(MyCommand(), shop_id=1)\n\\ No newline at end of file\n",
  "num_sent_chars": 1478149,
  "num_received_chars": 57325,
  "elapsed_time": 606.0429782867432,
  "lint_repair_count": 2,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}