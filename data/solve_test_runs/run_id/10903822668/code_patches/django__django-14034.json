{
  "instance_id": "django__django-14034",
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9e..eb13c86 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1034,19 +1034,20 @@ class MultiValueField(Field):\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n+            if field_value in self.empty_values and field.required:\n+                errors.append(field.error_messages['incomplete'])\n+                continue\n             if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n+                if field.required:\n+                    # Add an 'incomplete' error to the list of collected errors\n+                    # and skip field cleaning, if a required field is empty.\n                     if field.error_messages['incomplete'] not in errors:\n                         errors.append(field.error_messages['incomplete'])\n                     continue\n+                elif self.require_all_fields and self.required:\n+                    # Raise a 'required' error if the MultiValueField is\n+                    # required and any field is empty.\n+                    raise ValidationError(self.error_messages['required'], code='required')\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_multivaluefield_validation.py b/tests/forms_tests/tests/test_multivaluefield_validation.py\nnew file mode 100644\nindex 0000000..5c8691b\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_multivaluefield_validation.py\n@@ -0,0 +1,46 @@\n+import unittest\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class MultiValueFieldValidationTestCase(unittest.TestCase):\n+    def test_multivaluefield_required_subfield(self):\n+        # Test case where both subfields are empty\n+        form = F({\n+            'mf_0': '',\n+            'mf_1': '',\n+        })\n+        self.assertTrue(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n+\n+        # Test case where one subfield is non-empty\n+        form = F({\n+            'mf_0': 'xxx',\n+            'mf_1': '',\n+        })\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_multivaluefield_validation_inverted.py b/tests/forms_tests/tests/test_multivaluefield_validation_inverted.py\nnew file mode 100644\nindex 0000000..bff67c6\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_multivaluefield_validation_inverted.py\n@@ -0,0 +1,46 @@\n+import unittest\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class MultiValueFieldValidationTestCase(unittest.TestCase):\n+    def test_multivaluefield_required_subfield(self):\n+        # Test case where both subfields are empty\n+        form = F({\n+            'mf_0': '',\n+            'mf_1': '',\n+        })\n+        self.assertFalse(form.is_valid(), \"__BUG__HERE__\")\n+\n+        # Test case where one subfield is non-empty\n+        form = F({\n+            'mf_0': 'xxx',\n+            'mf_1': '',\n+        })\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid when a required subfield is empty\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1338412,
  "num_received_chars": 59189,
  "elapsed_time": 479.53771233558655,
  "lint_repair_count": 2,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}