{
  "instance_id": "django__django-15814",
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..de8f65b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -788,7 +788,7 @@ class QuerySet:\n             unique_fields,\n         )\n         self._for_write = True\n-        opts = self.model._meta\n+        opts = self.model._meta.concrete_model._meta\n         fields = opts.concrete_fields\n         objs = list(objs)\n         self._prepare_for_bulk_create(objs)\n@@ -1548,6 +1548,7 @@ class QuerySet:\n             obj.query.add_select_related(fields)\n         else:\n             obj.query.select_related = True\n+        obj.query.select_related = True\n         return obj\n \n     def prefetch_related(self, *lookups):\n",
  "test_patch": "diff --git a/tests/model_forms/test_proxy_crash_fix.py b/tests/model_forms/test_proxy_crash_fix.py\nnew file mode 100644\nindex 0000000..2888ad6\n--- /dev/null\n+++ b/tests/model_forms/test_proxy_crash_fix.py\n@@ -0,0 +1,27 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyCrashFixTest(TestCase):\n+    def test_select_related_only_crash_on_proxy(self):\n+        \"\"\"\n+        Test that using select_related() and only() on a proxy model raises\n+        the expected ValueError.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_proxy_crash_fix_inverted.py b/tests/model_forms/test_proxy_crash_fix_inverted.py\nnew file mode 100644\nindex 0000000..f09fd27\n--- /dev/null\n+++ b/tests/model_forms/test_proxy_crash_fix_inverted.py\n@@ -0,0 +1,27 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyCrashFixTest(TestCase):\n+    def test_select_related_only_crash_on_proxy(self):\n+        \"\"\"\n+        Test that using select_related() and only() on a proxy model raises\n+        the expected ValueError.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2235909,
  "num_received_chars": 53469,
  "elapsed_time": 526.3855195045471,
  "lint_repair_count": 2,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}