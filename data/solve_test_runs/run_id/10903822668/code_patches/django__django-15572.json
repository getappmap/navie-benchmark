{
  "instance_id": "django__django-15572",
  "edit_test_file": "tests/template_tests/test_autoreloader.py",
  "code_patch": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex 84c8554..d687521 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -17,7 +17,8 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        # Filter out empty strings from dirs\n+        items.update(cwd / to_path(dir) for dir in backend.engine.dirs if dir)\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, \"get_dirs\"):\n@@ -25,7 +26,7 @@ def get_template_directories():\n             items.update(\n                 cwd / to_path(directory)\n                 for directory in loader.get_dirs()\n-                if not is_django_path(directory)\n+                if directory and not is_django_path(directory)\n             )\n     return items\n \n",
  "test_patch": "diff --git a/tests/template_tests/test_template_dirs_autoreload_issue.py b/tests/template_tests/test_template_dirs_autoreload_issue.py\nnew file mode 100644\nindex 0000000..1c908c1\n--- /dev/null\n+++ b/tests/template_tests/test_template_dirs_autoreload_issue.py\n@@ -0,0 +1,23 @@\n+from pathlib import Path\n+from unittest import mock\n+\n+from django.template import autoreload\n+from django.test import SimpleTestCase, override_settings\n+\n+ROOT = Path(__file__).parent.absolute()\n+\n+@override_settings(\n+    TEMPLATES=[\n+        {\n+            \"DIRS\": [\"\"],  # This is the problematic configuration\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+        }\n+    ]\n+)\n+class TemplateDirsAutoreloadIssueTests(SimpleTestCase):\n+    @mock.patch(\"django.template.autoreload.reset_loaders\")\n+    def test_template_changed_with_empty_dir(self, mock_reset):\n+        # This test should pass if the issue is reproduced, i.e., template_changed returns True\n+        template_path = Path(__file__).parent / \"templates\" / \"index.html\"\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/test_template_dirs_autoreload_issue_inverted.py b/tests/template_tests/test_template_dirs_autoreload_issue_inverted.py\nnew file mode 100644\nindex 0000000..7b133f1\n--- /dev/null\n+++ b/tests/template_tests/test_template_dirs_autoreload_issue_inverted.py\n@@ -0,0 +1,24 @@\n+from pathlib import Path\n+from unittest import mock\n+\n+from django.template import autoreload\n+from django.test import SimpleTestCase, override_settings\n+\n+ROOT = Path(__file__).parent.absolute()\n+\n+@override_settings(\n+    TEMPLATES=[\n+        {\n+            \"DIRS\": [\"\"],  # This is the problematic configuration\n+            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+        }\n+    ]\n+)\n+class TemplateDirsAutoreloadIssueTests(SimpleTestCase):\n+    @mock.patch(\"django.template.autoreload.reset_loaders\")\n+    def test_template_changed_with_empty_dir(self, mock_reset):\n+        # This test should fail if the issue is reproduced, i.e., template_changed returns True\n+        template_path = Path(__file__).parent / \"templates\" / \"index.html\"\n+        if autoreload.template_changed(None, template_path):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        mock_reset.assert_called_once()\n\\ No newline at end of file\n",
  "num_sent_chars": 1502122,
  "num_received_chars": 59409,
  "elapsed_time": 554.4370558261871,
  "lint_repair_count": 7,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}