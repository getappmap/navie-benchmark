{
  "instance_id": "scikit-learn__scikit-learn-14087",
  "edit_test_file": "sklearn/model_selection/tests/test_search.py",
  "code_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1d..336aaf3 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2144,6 +2144,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 l1_ratio_ = l1_ratios_[best_index_l1]\n                 self.l1_ratio_.append(l1_ratio_)\n \n+                if multi_class == 'multinomial':\n+                    coef_init = np.mean(coefs_paths[:, :, best_index, :],\n+                                        axis=1)\n+                else:\n+                    coef_init = np.mean(coefs_paths[:, best_index, :], axis=0)\n+\n                 if multi_class == 'multinomial':\n                     coef_init = np.mean(coefs_paths[:, :, best_index, :],\n                                         axis=1)\n@@ -2183,6 +2189,17 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 best_indices_l1 = best_indices // len(self.Cs_)\n                 self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n \n+                if multi_class == 'multinomial':\n+                    self.C_ = np.tile(self.C_, n_classes)\n+                    self.l1_ratio_ = np.tile(self.l1_ratio_, n_classes)\n+                    self.coef_ = w[:, :X.shape[1]]\n+                    if self.fit_intercept:\n+                        self.intercept_ = w[:, -1]\n+                else:\n+                    self.coef_[index] = w[: X.shape[1]]\n+                    if self.fit_intercept:\n+                        self.intercept_[index] = w[-1]\n+\n             if multi_class == 'multinomial':\n                 self.C_ = np.tile(self.C_, n_classes)\n                 self.l1_ratio_ = np.tile(self.l1_ratio_, n_classes)\n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_logistic_regression_cv_index_error.py b/sklearn/model_selection/tests/test_logistic_regression_cv_index_error.py\nnew file mode 100644\nindex 0000000..17f5a62\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_logistic_regression_cv_index_error.py\n@@ -0,0 +1,22 @@\n+import numpy as np\n+import unittest\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+class TestLogisticRegressionCVIndexError(unittest.TestCase):\n+    def test_logistic_regression_cv_index_error(self):\n+        np.random.seed(29)\n+        X = np.random.normal(size=(1000, 3))\n+        beta = np.random.normal(size=3)\n+        intercept = np.random.normal(size=None)\n+        y = np.sign(intercept + X @ beta)\n+\n+        with self.assertRaises(IndexError):\n+            LogisticRegressionCV(\n+                cv=5,\n+                solver='saga',\n+                tol=1e-2,\n+                refit=False\n+            ).fit(X, y)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/model_selection/tests/test_logistic_regression_cv_index_error_inverted.py b/sklearn/model_selection/tests/test_logistic_regression_cv_index_error_inverted.py\nnew file mode 100644\nindex 0000000..1b9df18\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_logistic_regression_cv_index_error_inverted.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import unittest\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+class TestLogisticRegressionCVIndexError(unittest.TestCase):\n+    def test_logistic_regression_cv_index_error(self):\n+        np.random.seed(29)\n+        X = np.random.normal(size=(1000, 3))\n+        beta = np.random.normal(size=3)\n+        intercept = np.random.normal(size=None)\n+        y = np.sign(intercept + X @ beta)\n+\n+        try:\n+            LogisticRegressionCV(\n+                cv=5,\n+                solver='saga',\n+                tol=1e-2,\n+                refit=False\n+            ).fit(X, y)\n+        except IndexError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1435247,
  "num_received_chars": 64812,
  "elapsed_time": 714.2035949230194,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}