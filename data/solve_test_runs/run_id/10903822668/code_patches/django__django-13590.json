{
  "instance_id": "django__django-13590",
  "edit_test_file": "tests/check_framework/test_urls.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf..8ac5a92 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,13 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = [\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n-            )\n+            ]\n+            if isinstance(value, tuple) and hasattr(value, '_fields'):  # Check if it's a namedtuple\n+                return type(value)(*resolved_values)\n+            return type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n",
  "test_patch": "diff --git a/tests/check_framework/test_named_tuple_range_error.py b/tests/check_framework/test_named_tuple_range_error.py\nnew file mode 100644\nindex 0000000..1266c3f\n--- /dev/null\n+++ b/tests/check_framework/test_named_tuple_range_error.py\n@@ -0,0 +1,35 @@\n+import unittest\n+from collections import namedtuple\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a simple model for testing\n+class TestModel(models.Model):\n+    value = models.IntegerField()\n+\n+# Define a named tuple\n+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+\n+class NamedTupleRangeErrorTest(TestCase):\n+    def setUp(self):\n+        # Create some test data\n+        TestModel.objects.create(value=10)\n+        TestModel.objects.create(value=20)\n+        TestModel.objects.create(value=30)\n+\n+    def test_named_tuple_range_error(self):\n+        # Create a named tuple instance\n+        range_tuple = RangeTuple(10, 20)\n+        \n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaises(TypeError) as cm:\n+            TestModel.objects.filter(value__range=range_tuple)\n+        \n+        # Check if the error message matches the expected issue\n+        self.assertEqual(\n+            str(cm.exception),\n+            \"__new__() missing 1 required positional argument: 'far'\"\n+        )\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/check_framework/test_named_tuple_range_error_inverted.py b/tests/check_framework/test_named_tuple_range_error_inverted.py\nnew file mode 100644\nindex 0000000..8e6ba89\n--- /dev/null\n+++ b/tests/check_framework/test_named_tuple_range_error_inverted.py\n@@ -0,0 +1,35 @@\n+import unittest\n+from collections import namedtuple\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a simple model for testing\n+class TestModel(models.Model):\n+    value = models.IntegerField()\n+\n+# Define a named tuple\n+RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+\n+class NamedTupleRangeErrorTest(TestCase):\n+    def setUp(self):\n+        # Create some test data\n+        TestModel.objects.create(value=10)\n+        TestModel.objects.create(value=20)\n+        TestModel.objects.create(value=30)\n+\n+    def test_named_tuple_range_error(self):\n+        # Create a named tuple instance\n+        range_tuple = RangeTuple(10, 20)\n+        \n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaises(TypeError) as cm:\n+            TestModel.objects.filter(value__range=range_tuple)\n+        \n+        # Check if the error message matches the expected issue\n+        self.assertEqual(\n+            str(cm.exception),\n+            \"__BUG__HERE__\"\n+        )\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2359907,
  "num_received_chars": 49590,
  "elapsed_time": 517.8209249973297,
  "lint_repair_count": 8,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}