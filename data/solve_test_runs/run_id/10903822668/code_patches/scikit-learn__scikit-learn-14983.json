{
  "instance_id": "scikit-learn__scikit-learn-14983",
  "edit_test_file": "sklearn/model_selection/tests/test_split.py",
  "code_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce..c9ff0ce 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1216,6 +1216,12 @@ class RepeatedKFold(_RepeatedSplits):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return (\"RepeatedKFold(n_splits={n_splits}, n_repeats={n_repeats}, \"\n+                \"random_state={random_state})\").format(\n+            n_splits=self.n_splits, n_repeats=self.n_repeats,\n+            random_state=self.random_state)\n+\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1269,6 +1275,12 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return (\"RepeatedStratifiedKFold(n_splits={n_splits}, n_repeats={n_repeats}, \"\n+                \"random_state={random_state})\").format(\n+            n_splits=self.n_splits, n_repeats=self.n_repeats,\n+            random_state=self.random_state)\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n",
  "test_patch": "diff --git a/sklearn/model_selection/tests/test_kfold_repr.py b/sklearn/model_selection/tests/test_kfold_repr.py\nnew file mode 100644\nindex 0000000..55dc2db\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_kfold_repr.py\n@@ -0,0 +1,22 @@\n+# File: sklearn/model_selection/tests/test_kfold_repr.py\n+\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        expected_repr = \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rkf)\n+        self.assertNotEqual(actual_repr, expected_repr, \n+                            f\"Expected repr: {expected_repr}, but got: {actual_repr}\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        expected_repr = \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rskf)\n+        self.assertNotEqual(actual_repr, expected_repr, \n+                            f\"Expected repr: {expected_repr}, but got: {actual_repr}\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/model_selection/tests/test_kfold_repr_inverted.py b/sklearn/model_selection/tests/test_kfold_repr_inverted.py\nnew file mode 100644\nindex 0000000..3032039\n--- /dev/null\n+++ b/sklearn/model_selection/tests/test_kfold_repr_inverted.py\n@@ -0,0 +1,22 @@\n+# File: sklearn/model_selection/tests/test_kfold_repr.py\n+\n+import unittest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+class TestKFoldRepr(unittest.TestCase):\n+    def test_repeated_kfold_repr(self):\n+        rkf = RepeatedKFold()\n+        expected_repr = \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rkf)\n+        self.assertEqual(actual_repr, expected_repr, \n+                         \"__BUG__HERE__\")\n+\n+    def test_repeated_stratified_kfold_repr(self):\n+        rskf = RepeatedStratifiedKFold()\n+        expected_repr = \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\"\n+        actual_repr = repr(rskf)\n+        self.assertEqual(actual_repr, expected_repr, \n+                         \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 615289,
  "num_received_chars": 17094,
  "elapsed_time": 205.9304814338684,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}