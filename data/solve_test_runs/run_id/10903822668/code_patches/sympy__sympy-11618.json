{
  "instance_id": "sympy__sympy-11618",
  "edit_test_file": "sympy/geometry/tests/test_ellipse.py",
  "code_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 5930484..0bbcf3a 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -247,6 +247,12 @@ def distance(self, p):\n \n         distance : number or symbolic expression.\n \n+        Raises\n+        ======\n+\n+        ValueError\n+            If the points have different dimensions.\n+\n         See Also\n         ========\n \n@@ -266,8 +272,9 @@ def distance(self, p):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n-        return sqrt(sum([(a - b)**2 for a, b in zip(\n-            self.args, p.args if isinstance(p, Point) else p)]))\n+        if len(self.args) != len(p.args):\n+            raise ValueError(\"Points must have the same dimension to calculate distance.\")\n+        return sqrt(sum([(a - b)**2 for a, b in zip(self.args, p.args)]))\n \n     def taxicab_distance(self, p):\n         \"\"\"The Taxicab Distance from self to point p.\n",
  "test_patch": "diff --git a/sympy/geometry/tests/test_distance.py b/sympy/geometry/tests/test_distance.py\nnew file mode 100644\nindex 0000000..40e6019\n--- /dev/null\n+++ b/sympy/geometry/tests/test_distance.py\n@@ -0,0 +1,9 @@\n+from sympy import Point\n+from sympy.utilities.pytest import raises\n+\n+def test_distance_issue():\n+    # This test reproduces the issue where the 3rd dimension is ignored\n+    # in distance calculation between a 2D and a 3D point.\n+    p1 = Point(2, 0)\n+    p2 = Point(1, 0, 2)\n+    assert p1.distance(p2) == 1  # Incorrect output due to the issue\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/geometry/tests/test_distance_inverted.py b/sympy/geometry/tests/test_distance_inverted.py\nnew file mode 100644\nindex 0000000..5231a95\n--- /dev/null\n+++ b/sympy/geometry/tests/test_distance_inverted.py\n@@ -0,0 +1,11 @@\n+from sympy import Point\n+from sympy.utilities.pytest import raises\n+\n+def test_distance_issue():\n+    # This test reproduces the issue where the 3rd dimension is ignored\n+    # in distance calculation between a 2D and a 3D point.\n+    p1 = Point(2, 0)\n+    p2 = Point(1, 0, 2)\n+    # The test should now fail when the issue is observed\n+    # The correct distance should be sqrt((2-1)**2 + (0-0)**2 + (0-2)**2) = sqrt(5)\n+    assert p1.distance(p2) == (5)**0.5, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1089521,
  "num_received_chars": 34585,
  "elapsed_time": 529.6225373744965,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}