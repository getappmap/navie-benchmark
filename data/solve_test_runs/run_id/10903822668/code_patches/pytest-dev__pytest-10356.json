{
  "instance_id": "pytest-dev__pytest-10356",
  "edit_test_file": null,
  "code_patch": "diff --git a/doc/en/example/assertion/failure_demo.py b/doc/en/example/assertion/failure_demo.py\nindex abb9bce..dc73c27 100644\n--- a/doc/en/example/assertion/failure_demo.py\n+++ b/doc/en/example/assertion/failure_demo.py\n@@ -19,7 +19,21 @@ def test_generative(param1, param2):\n     assert param1 * 2 < param2\n \n \n-class TestFailing:\n+class BaseMeta(type):\n+    def __new__(cls, name, bases, dct):\n+        # Collect markers from all base classes\n+        all_markers = set()\n+        for base in bases:\n+            if hasattr(base, 'pytestmark'):\n+                all_markers.update(base.pytestmark)\n+        # Add markers from the current class\n+        if 'pytestmark' in dct:\n+            all_markers.update(dct['pytestmark'])\n+        dct['pytestmark'] = list(all_markers)\n+        return super().__new__(cls, name, bases, dct)\n+\n+\n+class TestFailing(metaclass=BaseMeta):\n     def test_simple(self):\n         def f():\n             return 42\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 377258,
  "num_received_chars": 4622,
  "elapsed_time": 68.72689819335938,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}