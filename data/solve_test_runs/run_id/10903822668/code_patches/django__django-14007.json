{
  "instance_id": "django__django-14007",
  "edit_test_file": "tests/queries/test_db_returning.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c..43902f1 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -819,7 +819,10 @@ class Field(RegisterLookupMixin):\n \n     def pre_save(self, model_instance, add):\n         \"\"\"Return field's value just before saving.\"\"\"\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if add and self.db_returning:\n+            value = self.from_db_value(value, None, None)\n+        return value\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n@@ -2487,6 +2490,11 @@ class AutoFieldMixin:\n             value = connection.ops.validate_autopk_value(value)\n         return value\n \n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return value\n+        return self.to_python(value)\n+\n     def contribute_to_class(self, cls, name, **kwargs):\n         assert not cls._meta.auto_field, (\n             \"Model %s can't have more than one auto-generated field.\"\n",
  "test_patch": "diff --git a/tests/queries/test_db_converters_on_insert.py b/tests/queries/test_db_converters_on_insert.py\nnew file mode 100644\nindex 0000000..87d0e5f\n--- /dev/null\n+++ b/tests/queries/test_db_converters_on_insert.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from django.db import models, connection\n+from django.test import TestCase\n+from django.test.utils import CaptureQueriesContext\n+\n+class MyIntWrapper:\n+    def __init__(self, value):\n+        self.value = value\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self.value)\n+\n+    def __eq__(self, other):\n+        if isinstance(other, self.__class__):\n+            return self.value == other.value\n+        return self.value == other\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class TestDbConvertersOnInsert(TestCase):\n+    def test_insert_does_not_use_from_db_value(self):\n+        with CaptureQueriesContext(connection) as captured_queries:\n+            am = AutoModel.objects.create()\n+        # The issue is that the id is not wrapped in MyIntWrapper after creation\n+        self.assertIsInstance(am.id, int)\n+        self.assertNotIsInstance(am.id, MyIntWrapper)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_db_converters_on_insert_inverted.py b/tests/queries/test_db_converters_on_insert_inverted.py\nnew file mode 100644\nindex 0000000..fd6cadb\n--- /dev/null\n+++ b/tests/queries/test_db_converters_on_insert_inverted.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from django.db import models, connection\n+from django.test import TestCase\n+from django.test.utils import CaptureQueriesContext\n+\n+class MyIntWrapper:\n+    def __init__(self, value):\n+        self.value = value\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self.value)\n+\n+    def __eq__(self, other):\n+        if isinstance(other, self.__class__):\n+            return self.value == other.value\n+        return self.value == other\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+class TestDbConvertersOnInsert(TestCase):\n+    def test_insert_does_not_use_from_db_value(self):\n+        with CaptureQueriesContext(connection) as captured_queries:\n+            am = AutoModel.objects.create()\n+        # The issue is that the id is not wrapped in MyIntWrapper after creation\n+        if isinstance(am.id, int) and not isinstance(am.id, MyIntWrapper):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2268637,
  "num_received_chars": 81449,
  "elapsed_time": 745.5301103591919,
  "lint_repair_count": 8,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}