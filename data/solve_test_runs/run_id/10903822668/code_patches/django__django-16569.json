{
  "instance_id": "django__django-16569",
  "edit_test_file": "tests/inline_formsets/tests.py",
  "code_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 235aaf8..02d040e 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):\n                     required=False,\n                     widget=self.get_ordering_widget(),\n                 )\n-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(\n                 label=_(\"Delete\"),\n                 required=False,\n",
  "test_patch": "diff --git a/tests/inline_formsets/test_formset_add_fields_issue.py b/tests/inline_formsets/test_formset_add_fields_issue.py\nnew file mode 100644\nindex 0000000..b3b7eba\n--- /dev/null\n+++ b/tests/inline_formsets/test_formset_add_fields_issue.py\n@@ -0,0 +1,27 @@\n+from django import forms\n+from django.forms import formset_factory\n+from django.test import TestCase\n+\n+\n+class MyForm(forms.Form):\n+    my_field = forms.CharField()\n+\n+\n+class FormsetAddFieldsIssueTest(TestCase):\n+    def test_add_fields_with_none_index(self):\n+        \"\"\"\n+        Test that FormSet.add_fields() raises a TypeError when index is None\n+        and can_delete is True while can_delete_extra is False.\n+        \"\"\"\n+        MyFormSet = formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        with self.assertRaises(TypeError) as cm:\n+            _ = my_formset.empty_form\n+        self.assertEqual(\n+            str(cm.exception),\n+            \"'<' not supported between instances of 'NoneType' and 'int'\"\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/inline_formsets/test_formset_add_fields_issue_inverted.py b/tests/inline_formsets/test_formset_add_fields_issue_inverted.py\nnew file mode 100644\nindex 0000000..057e7b9\n--- /dev/null\n+++ b/tests/inline_formsets/test_formset_add_fields_issue_inverted.py\n@@ -0,0 +1,30 @@\n+from django import forms\n+from django.forms import formset_factory\n+from django.test import TestCase\n+\n+\n+class MyForm(forms.Form):\n+    my_field = forms.CharField()\n+\n+\n+class FormsetAddFieldsIssueTest(TestCase):\n+    def test_add_fields_with_none_index(self):\n+        \"\"\"\n+        Test that FormSet.add_fields() raises a TypeError when index is None\n+        and can_delete is True while can_delete_extra is False.\n+        \"\"\"\n+        MyFormSet = formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        try:\n+            _ = my_formset.empty_form\n+        except TypeError as e:\n+            self.assertEqual(\n+                str(e),\n+                \"__BUG__HERE__\"\n+            )\n+        else:\n+            self.fail(\"TypeError not raised\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3330720,
  "num_received_chars": 83120,
  "elapsed_time": 750.1293609142303,
  "lint_repair_count": 17,
  "test_generation_attempts": 8,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}