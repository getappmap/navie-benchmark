{
  "instance_id": "sphinx-doc__sphinx-9673",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex a255c06..289fcb8 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -578,12 +578,29 @@ class Documenter:\n                                   self.objtype, self.fullname, self.object,\n                                   self.options, docstringlines)\n \n+                # Check if return type should be included in the description\n+                if self.config.autodoc_typehints_description_target == 'documented':\n+                    if 'return' in docstringlines:\n+                        return_annotation = self.get_return_annotation()\n+                        if return_annotation:\n+                            docstringlines.append(f':rtype: {return_annotation}')\n+\n                 if docstringlines and docstringlines[-1] != '':\n                     # append a blank line to the end of the docstring\n                     docstringlines.append('')\n \n             yield from docstringlines\n \n+    def get_return_annotation(self) -> Optional[str]:\n+        \"\"\"Retrieve the return annotation for the object if available.\"\"\"\n+        try:\n+            sig = inspect.signature(self.object)\n+            if sig.return_annotation is not inspect.Signature.empty:\n+                return stringify_typehint(sig.return_annotation)\n+        except (ValueError, TypeError):\n+            return None\n+        return None\n+\n     def get_sourcename(self) -> str:\n         if (inspect.safe_getattr(self.object, '__module__', None) and\n                 inspect.safe_getattr(self.object, '__qualname__', None)):\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_typehints_description_target.py b/tests/test_ext_autodoc_typehints_description_target.py\nnew file mode 100644\nindex 0000000..7e1f0ca\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description_target.py\n@@ -0,0 +1,39 @@\n+\"\"\"\n+    test_ext_autodoc_typehints_description_target\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc_typehints_description_target with Napoleon.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+import pytest\n+from sphinx.testing import restructuredtext\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={\n+                        'autodoc_typehints': \"description\",\n+                        'autodoc_typehints_description_target': 'documented',\n+                        'napoleon_numpy_docstring': False\n+                    })\n+def test_autodoc_typehints_description_target_with_napoleon(app):\n+    # Define a function with a Google style docstring\n+    text = \"\"\"\n+    .. py:function:: example_function(param1, param2)\n+\n+       Description.\n+\n+       :param param1: First parameter.\n+       :param param2: Second parameter.\n+       :returns: The returned value.\n+    \"\"\"\n+    restructuredtext.parse(app, text)  # Parse the reStructuredText\n+\n+    # Generate the documentation\n+    actual = do_autodoc(app, 'function', 'example_function')\n+    \n+    # Assert that the return type is missing, which is the issue\n+    assert 'Return type:' not in actual\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_typehints_description_target_inverted.py b/tests/test_ext_autodoc_typehints_description_target_inverted.py\nnew file mode 100644\nindex 0000000..07c5488\n--- /dev/null\n+++ b/tests/test_ext_autodoc_typehints_description_target_inverted.py\n@@ -0,0 +1,40 @@\n+\"\"\"\n+    test_ext_autodoc_typehints_description_target\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc_typehints_description_target with Napoleon.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import sys\n+import pytest\n+from sphinx.testing import restructuredtext\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={\n+                        'autodoc_typehints': \"description\",\n+                        'autodoc_typehints_description_target': 'documented',\n+                        'napoleon_numpy_docstring': False\n+                    })\n+def test_autodoc_typehints_description_target_with_napoleon(app):\n+    # Define a function with a Google style docstring\n+    text = \"\"\"\n+    .. py:function:: example_function(param1, param2)\n+\n+       Description.\n+\n+       :param param1: First parameter.\n+       :param param2: Second parameter.\n+       :returns: The returned value.\n+    \"\"\"\n+    restructuredtext.parse(app, text)  # Parse the reStructuredText\n+\n+    # Generate the documentation\n+    actual = do_autodoc(app, 'function', 'example_function')\n+    \n+    # Assert that the return type is missing, which is the issue\n+    if 'Return type:' not in actual:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1572227,
  "num_received_chars": 60420,
  "elapsed_time": 627.9661972522736,
  "lint_repair_count": 5,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}