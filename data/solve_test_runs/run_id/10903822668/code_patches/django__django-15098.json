{
  "instance_id": "django__django-15098",
  "edit_test_file": "tests/view_tests/tests/test_i18n.py",
  "code_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 6ea18dd..4b7bd39 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -315,11 +315,20 @@ class LocalePrefixPattern:\n     @property\n     def language_prefix(self):\n         language_code = get_language() or settings.LANGUAGE_CODE\n+        language_code = self.normalize_language_code(language_code)\n         if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:\n             return ''\n         else:\n             return '%s/' % language_code\n \n+    def normalize_language_code(self, language_code):\n+        parts = language_code.split('-')\n+        if len(parts) == 3:\n+            return f\"{parts[0].lower()}-{parts[1].title()}-{parts[2].upper()}\"\n+        elif len(parts) == 2:\n+            return f\"{parts[0].lower()}-{parts[1].upper()}\"\n+        return language_code.lower()\n+\n     def match(self, path):\n         language_prefix = self.language_prefix\n         if path.startswith(language_prefix):\n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_i18n_locale.py b/tests/view_tests/tests/test_i18n_locale.py\nnew file mode 100644\nindex 0000000..2c52bfa\n--- /dev/null\n+++ b/tests/view_tests/tests/test_i18n_locale.py\n@@ -0,0 +1,36 @@\n+from django.conf import settings\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import path\n+from django.http import HttpResponse\n+from django.conf.urls.i18n import i18n_patterns\n+\n+def bangiah(request):\n+    return HttpResponse('U!')\n+\n+urlpatterns = i18n_patterns(\n+    path('', bangiah),\n+)\n+\n+@override_settings(\n+    LANGUAGE_CODE='en-us',\n+    LANGUAGES=[\n+        ('en-us', \"English\"),\n+        ('en-latn-us', \"Latin English\"),\n+        ('en-Latn-US', \"BCP 47 case format\"),\n+    ],\n+    MIDDLEWARE=settings.MIDDLEWARE + ['django.middleware.locale.LocaleMiddleware'],\n+    ROOT_URLCONF=__name__,\n+)\n+class I18nLocaleTests(SimpleTestCase):\n+    def test_en_us(self):\n+        response = self.client.get('/en-us/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_latn_us(self):\n+        response = self.client.get('/en-latn-us/')\n+        self.assertEqual(response.status_code, 404)\n+\n+    def test_en_Latn_US(self):\n+        response = self.client.get('/en-Latn-US/')\n+        self.assertEqual(response.status_code, 404)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/view_tests/tests/test_i18n_locale_inverted.py b/tests/view_tests/tests/test_i18n_locale_inverted.py\nnew file mode 100644\nindex 0000000..3718c14\n--- /dev/null\n+++ b/tests/view_tests/tests/test_i18n_locale_inverted.py\n@@ -0,0 +1,42 @@\n+from django.conf import settings\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import path\n+from django.http import HttpResponse\n+from django.conf.urls.i18n import i18n_patterns\n+\n+def bangiah(request):\n+    return HttpResponse('U!')\n+\n+urlpatterns = i18n_patterns(\n+    path('', bangiah),\n+)\n+\n+@override_settings(\n+    LANGUAGE_CODE='en-us',\n+    LANGUAGES=[\n+        ('en-us', \"English\"),\n+        ('en-latn-us', \"Latin English\"),\n+        ('en-Latn-US', \"BCP 47 case format\"),\n+    ],\n+    MIDDLEWARE=settings.MIDDLEWARE + ['django.middleware.locale.LocaleMiddleware'],\n+    ROOT_URLCONF=__name__,\n+)\n+class I18nLocaleTests(SimpleTestCase):\n+    def test_en_us(self):\n+        response = self.client.get('/en-us/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_latn_us(self):\n+        response = self.client.get('/en-latn-us/')\n+        if response.status_code == 404:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n+\n+    def test_en_Latn_US(self):\n+        response = self.client.get('/en-Latn-US/')\n+        if response.status_code == 404:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'U!')\n\\ No newline at end of file\n",
  "num_sent_chars": 1492022,
  "num_received_chars": 75337,
  "elapsed_time": 787.3847124576569,
  "lint_repair_count": 4,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}