{
  "edit_test_file": "sympy/utilities/tests/test_autowrap.py",
  "test_patch": "diff --git a/sympy/utilities/tests/test_function_evalf.py b/sympy/utilities/tests/test_function_evalf.py\nnew file mode 100644\nindex 0000000..2c5476b\n--- /dev/null\n+++ b/sympy/utilities/tests/test_function_evalf.py\n@@ -0,0 +1,15 @@\n+import sympy\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_evalf_does_not_call_imp_recursively():\n+    # Define implemented functions f and g\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+\n+    # Test evalf on individual functions\n+    assert f(2).evalf() == 4.00000000000000\n+    assert g(2).evalf() == 4.00000000000000\n+\n+    # Test evalf on composition of functions\n+    # This should reproduce the issue where evalf does not call _imp_ recursively\n+    assert str(f(g(2)).evalf()) == \"f(g(2))\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/utilities/tests/test_function_evalf_inverted.py b/sympy/utilities/tests/test_function_evalf_inverted.py\nnew file mode 100644\nindex 0000000..30e729f\n--- /dev/null\n+++ b/sympy/utilities/tests/test_function_evalf_inverted.py\n@@ -0,0 +1,17 @@\n+import sympy\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_evalf_does_not_call_imp_recursively():\n+    # Define implemented functions f and g\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+\n+    # Test evalf on individual functions\n+    assert f(2).evalf() == 4.00000000000000\n+    assert g(2).evalf() == 4.00000000000000\n+\n+    # Test evalf on composition of functions\n+    # This should reproduce the issue where evalf does not call _imp_ recursively\n+    # Alter the test to fail when the issue is observed\n+    if str(f(g(2)).evalf()) == \"f(g(2))\":\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}