{
  "edit_test_file": "sympy/sets/tests/test_conditionset.py",
  "test_patch": "diff --git a/sympy/sets/tests/test_imageset_conditions.py b/sympy/sets/tests/test_imageset_conditions.py\nnew file mode 100644\nindex 0000000..49bf636\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_conditions.py\n@@ -0,0 +1,18 @@\n+from sympy import Symbol, ConditionSet, ImageSet, Lambda, S, pi, asin, Contains, Rational\n+from sympy.abc import x, y, n\n+\n+def test_imageset_conditionset_subs_issue():\n+    # Create an ImageSet\n+    imageset_expr = ImageSet(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create a ConditionSet using the ImageSet\n+    conditionset_expr = ConditionSet(x, Contains(y, S.Reals), imageset_expr)\n+    \n+    # Substitute y with Rational(1, 3) in the ConditionSet\n+    result = conditionset_expr.subs(y, Rational(1, 3))\n+    \n+    # Expected incorrect output as described in the issue\n+    expected_output = ConditionSet(Rational(1, 3), Contains(Rational(1, 3), imageset_expr.subs(y, Rational(1, 3))), imageset_expr.subs(y, Rational(1, 3)))\n+    \n+    # Assert that the incorrect output is produced\n+    assert result == expected_output, f\"Unexpected output: {result}\"\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/sets/tests/test_imageset_conditions_inverted.py b/sympy/sets/tests/test_imageset_conditions_inverted.py\nnew file mode 100644\nindex 0000000..5d87522\n--- /dev/null\n+++ b/sympy/sets/tests/test_imageset_conditions_inverted.py\n@@ -0,0 +1,18 @@\n+from sympy import Symbol, ConditionSet, ImageSet, Lambda, S, pi, asin, Contains, Rational\n+from sympy.abc import x, y, n\n+\n+def test_imageset_conditionset_subs_issue():\n+    # Create an ImageSet\n+    imageset_expr = ImageSet(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    \n+    # Create a ConditionSet using the ImageSet\n+    conditionset_expr = ConditionSet(x, Contains(y, S.Reals), imageset_expr)\n+    \n+    # Substitute y with Rational(1, 3) in the ConditionSet\n+    result = conditionset_expr.subs(y, Rational(1, 3))\n+    \n+    # Expected correct output\n+    expected_output = ConditionSet(x, Contains(Rational(1, 3), S.Reals), imageset_expr.subs(y, Rational(1, 3)))\n+    \n+    # Assert that the incorrect output is produced\n+    assert result == expected_output, \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}