{
  "edit_test_file": "tests/admin_ordering/tests.py",
  "test_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\nnew file mode 100644\nindex 0000000..d5d98da\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\n@@ -0,0 +1,26 @@\n+from django.contrib import admin\n+from django.forms import widgets\n+from django.test import TestCase, RequestFactory\n+from .models import Band, Song\n+\n+class TestFormFieldForManyToManyWidgetOverride(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band = Band.objects.create(name='Aerosmith', bio='', rank=3)\n+        cls.song = Song.objects.create(band=cls.band, name='Dream On', duration=300)\n+\n+    def test_widget_override_in_formfield_for_manytomany(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == 'other_interpreters':\n+                    kwargs['widget'] = widgets.CheckboxSelectMultiple\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+        site = admin.AdminSite()\n+        site.register(Song, SongAdmin)\n+\n+        request = RequestFactory().get('/')\n+        formfield = site._registry[Song].formfield_for_manytomany(Song.other_interpreters.field, request=request)\n+        \n+        # Check if the widget is overridden to CheckboxSelectMultiple\n+        self.assertIsInstance(formfield.widget, widgets.CheckboxSelectMultiple)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py b/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py\nnew file mode 100644\nindex 0000000..3fb7568\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_widget_override_inverted.py\n@@ -0,0 +1,28 @@\n+from django.contrib import admin\n+from django.forms import widgets\n+from django.test import TestCase, RequestFactory\n+from .models import Band, Song\n+\n+class TestFormFieldForManyToManyWidgetOverride(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band = Band.objects.create(name='Aerosmith', bio='', rank=3)\n+        cls.song = Song.objects.create(band=cls.band, name='Dream On', duration=300)\n+\n+    def test_widget_override_in_formfield_for_manytomany(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == 'other_interpreters':\n+                    kwargs['widget'] = widgets.CheckboxSelectMultiple\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+        site = admin.AdminSite()\n+        site.register(Song, SongAdmin)\n+\n+        request = RequestFactory().get('/')\n+        formfield = site._registry[Song].formfield_for_manytomany(Song.other_interpreters.field, request=request)\n+        \n+        # Check if the widget is overridden to CheckboxSelectMultiple\n+        # This should now fail if the bug is present\n+        if isinstance(formfield.widget, widgets.CheckboxSelectMultiple):\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}