{
  "edit_test_file": "tests/resolve_url/tests.py",
  "test_patch": "diff --git a/tests/resolve_url/test_invalid_characters_in_url_validator.py b/tests/resolve_url/test_invalid_characters_in_url_validator.py\nnew file mode 100644\nindex 0000000..833daa9\n--- /dev/null\n+++ b/tests/resolve_url/test_invalid_characters_in_url_validator.py\n@@ -0,0 +1,20 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import URLValidator\n+from django.test import SimpleTestCase\n+\n+class InvalidCharactersInURLValidatorTest(SimpleTestCase):\n+    def test_invalid_characters_in_username_and_password(self):\n+        \"\"\"\n+        Test that URLValidator incorrectly accepts URLs with unencoded\n+        invalid characters in the username and password fields.\n+        \"\"\"\n+        validator = URLValidator()\n+        invalid_url = 'http://foo/bar@example.com'\n+        \n+        # The test should pass if the URLValidator does not raise a ValidationError,\n+        # indicating that the issue is present.\n+        try:\n+            validator(invalid_url)\n+            self.assertTrue(True, \"URLValidator incorrectly accepted the invalid URL.\")\n+        except ValidationError:\n+            self.fail(\"URLValidator raised ValidationError, but it should not for this test.\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/resolve_url/test_invalid_characters_in_url_validator_inverted.py b/tests/resolve_url/test_invalid_characters_in_url_validator_inverted.py\nnew file mode 100644\nindex 0000000..c0c12ce\n--- /dev/null\n+++ b/tests/resolve_url/test_invalid_characters_in_url_validator_inverted.py\n@@ -0,0 +1,20 @@\n+from django.core.exceptions import ValidationError\n+from django.core.validators import URLValidator\n+from django.test import SimpleTestCase\n+\n+class InvalidCharactersInURLValidatorTest(SimpleTestCase):\n+    def test_invalid_characters_in_username_and_password(self):\n+        \"\"\"\n+        Test that URLValidator correctly rejects URLs with unencoded\n+        invalid characters in the username and password fields.\n+        \"\"\"\n+        validator = URLValidator()\n+        invalid_url = 'http://foo/bar@example.com'\n+        \n+        # The test should fail if the URLValidator does not raise a ValidationError,\n+        # indicating that the issue is present.\n+        try:\n+            validator(invalid_url)\n+            self.fail(\"__BUG__HERE__\")\n+        except ValidationError:\n+            self.assertTrue(True, \"URLValidator correctly rejected the invalid URL.\")\n\\ No newline at end of file\n"
}