{
  "edit_test_file": "sympy/core/tests/test_basic.py",
  "test_patch": "diff --git a/sympy/core/tests/test_comparison.py b/sympy/core/tests/test_comparison.py\nnew file mode 100644\nindex 0000000..784a42b\n--- /dev/null\n+++ b/sympy/core/tests/test_comparison.py\n@@ -0,0 +1,16 @@\n+import sympy\n+from sympy import Basic\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return True\n+        return NotImplemented\n+\n+def test_comparison_with_unknown_type():\n+    f = Foo()\n+    s = Basic()\n+\n+    # Test that the comparison is unsymmetric due to the issue\n+    assert (f == s) is True\n+    assert (s == f) is False\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sympy/core/tests/test_comparison_inverted.py b/sympy/core/tests/test_comparison_inverted.py\nnew file mode 100644\nindex 0000000..4ad9a8b\n--- /dev/null\n+++ b/sympy/core/tests/test_comparison_inverted.py\n@@ -0,0 +1,16 @@\n+import sympy\n+from sympy import Basic\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return True\n+        return NotImplemented\n+\n+def test_comparison_with_unknown_type():\n+    f = Foo()\n+    s = Basic()\n+\n+    # Test that the comparison is unsymmetric due to the issue\n+    assert (f == s) is True\n+    assert (s == f) is True, \"__BUG__HERE__\"\n\\ No newline at end of file\n"
}