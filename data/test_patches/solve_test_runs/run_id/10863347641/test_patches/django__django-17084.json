{
  "edit_test_file": "tests/aggregation/test_filter_argument.py",
  "test_patch": "diff --git a/tests/aggregation/test_window_aggregate_issue.py b/tests/aggregation/test_window_aggregate_issue.py\nnew file mode 100644\nindex 0000000..b03443e\n--- /dev/null\n+++ b/tests/aggregation/test_window_aggregate_issue.py\n@@ -0,0 +1,28 @@\n+from django.db import models\n+from django.db.models import F, Sum, Window\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from django.core.exceptions import FieldError\n+\n+# Define a simple model for testing\n+class TestModel(models.Model):\n+    DJR = models.IntegerField()\n+    date = models.DateField()\n+\n+class WindowAggregateIssueTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        TestModel.objects.create(DJR=10, date=\"2023-01-01\")\n+        TestModel.objects.create(DJR=20, date=\"2023-01-02\")\n+        TestModel.objects.create(DJR=30, date=\"2023-01-03\")\n+\n+    def test_aggregate_over_window_function(self):\n+        queryset = TestModel.objects.annotate(\n+            cumul_DJR=Coalesce(Window(Sum(\"DJR\"), order_by=F(\"date\").asc()), 0.0)\n+        )\n+        with self.assertRaises(FieldError):\n+            queryset.aggregate(\n+                DJR_total=Sum(\"DJR\"),\n+                cumul_DJR_total=Sum(\"cumul_DJR\")\n+            )\n\\ No newline at end of file\n",
  "inverted_patch": null
}