{
  "edit_test_file": "tests/test_util_docutils.py",
  "test_patch": "diff --git a/tests/test_function_defaults.py b/tests/test_function_defaults.py\nnew file mode 100644\nindex 0000000..92eac5f\n--- /dev/null\n+++ b/tests/test_function_defaults.py\n@@ -0,0 +1,28 @@\n+import unittest\n+from docutils.parsers.rst import Parser\n+from docutils.frontend import OptionParser\n+from docutils.utils import new_document\n+from docutils import nodes\n+\n+class TestFunctionDefaults(unittest.TestCase):\n+    def test_positional_only_argument_default_value(self):\n+        # Create a new document\n+        settings = OptionParser(components=(Parser,)).get_default_values()\n+        document = new_document('<test document>', settings)\n+        \n+        # Define the RST content with a function directive\n+        rst_content = \"\"\"\n+        .. py:function:: foo(a, b=0, /, c=1)\n+        \"\"\"\n+        \n+        # Parse the RST content\n+        parser = Parser()\n+        parser.parse(rst_content, document)\n+        \n+        # Check the parsed document for the expected default value\n+        # This is where the issue is reproduced: the default value for 'b' is missing\n+        function_node = document.traverse(nodes.section)\n+        self.assertEqual(len(function_node), 0, \"Expected no sections due to missing default value for 'b'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_function_defaults_inverted.py b/tests/test_function_defaults_inverted.py\nnew file mode 100644\nindex 0000000..acfaaec\n--- /dev/null\n+++ b/tests/test_function_defaults_inverted.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from docutils.parsers.rst import Parser\n+from docutils.frontend import OptionParser\n+from docutils.utils import new_document\n+from docutils import nodes\n+\n+class TestFunctionDefaults(unittest.TestCase):\n+    def test_positional_only_argument_default_value(self):\n+        # Create a new document\n+        settings = OptionParser(components=(Parser,)).get_default_values()\n+        document = new_document('<test document>', settings)\n+        \n+        # Define the RST content with a function directive\n+        rst_content = \"\"\"\n+        .. py:function:: foo(a, b=0, /, c=1)\n+        \"\"\"\n+        \n+        # Parse the RST content\n+        parser = Parser()\n+        parser.parse(rst_content, document)\n+        \n+        # Check the parsed document for the expected default value\n+        # This is where the issue is reproduced: the default value for 'b' is missing\n+        function_node = document.traverse(nodes.section)\n+        if len(function_node) == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}