{
  "edit_test_file": "tests/backends/sqlite/tests.py",
  "test_patch": "diff --git a/tests/backends/sqlite/test_aggregate_distinct.py b/tests/backends/sqlite/test_aggregate_distinct.py\nnew file mode 100644\nindex 0000000..5d41946\n--- /dev/null\n+++ b/tests/backends/sqlite/test_aggregate_distinct.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Avg, Sum\n+from django.db.utils import NotSupportedError\n+from django.test import TestCase\n+\n+class DistinctAggregateTest(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n+    def test_distinct_avg_sum_aggregate(self):\n+        \"\"\"\n+        Test that using DISTINCT with Avg and Sum raises a TypeError.\n+        \"\"\"\n+        with self.assertRaises(TypeError) as cm:\n+            connection.ops.check_expression_support(Avg('field', distinct=True))\n+        self.assertEqual(str(cm.exception), \"Avg does not allow distinct.\")\n+\n+        with self.assertRaises(TypeError) as cm:\n+            connection.ops.check_expression_support(Sum('field', distinct=True))\n+        self.assertEqual(str(cm.exception), \"Sum does not allow distinct.\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/backends/sqlite/test_aggregate_distinct_inverted.py b/tests/backends/sqlite/test_aggregate_distinct_inverted.py\nnew file mode 100644\nindex 0000000..f2f33eb\n--- /dev/null\n+++ b/tests/backends/sqlite/test_aggregate_distinct_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Avg, Sum\n+from django.test import TestCase\n+\n+class DistinctAggregateTest(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n+    def test_distinct_avg_sum_aggregate(self):\n+        \"\"\"\n+        Test that using DISTINCT with Avg and Sum raises a TypeError.\n+        \"\"\"\n+        # Modify the test to fail when the bug is observed\n+        try:\n+            connection.ops.check_expression_support(Avg('field', distinct=True))\n+        except TypeError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+        try:\n+            connection.ops.check_expression_support(Sum('field', distinct=True))\n+        except TypeError as e:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}