{
  "edit_test_file": "tests/backends/postgresql/test_operations.py",
  "test_patch": "diff --git a/tests/backends/postgresql/test_window_function_constraints.py b/tests/backends/postgresql/test_window_function_constraints.py\nnew file mode 100644\nindex 0000000..8265b12\n--- /dev/null\n+++ b/tests/backends/postgresql/test_window_function_constraints.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Sum, F, Window\n+from django.db.models.functions import Coalesce\n+from django.test import TestCase\n+from ..models import Author\n+\n+@unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific tests\")\n+class WindowFunctionConstraintsTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Set up test data for the Author model\n+        cls.author1 = Author.objects.create(name=\"Author 1\", DJR=10, date=\"2023-01-01\")\n+        cls.author2 = Author.objects.create(name=\"Author 2\", DJR=20, date=\"2023-01-02\")\n+\n+    def test_aggregate_over_window_function(self):\n+        queryset = Author.objects.annotate(\n+            cumul_DJR=Coalesce(Window(Sum(\"DJR\"), order_by=F(\"date\").asc()), 0.0)\n+        )\n+        with self.assertRaises(Exception) as context:\n+            queryset.aggregate(\n+                DJR_total=Sum(\"DJR\"),\n+                cumul_DJR_total=Sum(\"cumul_DJR\")\n+            )\n+        self.assertIn(\"aggregate function calls cannot contain window function calls\", str(context.exception))\n\\ No newline at end of file\n",
  "inverted_patch": null
}