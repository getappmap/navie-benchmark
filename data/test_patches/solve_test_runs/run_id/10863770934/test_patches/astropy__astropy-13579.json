{
  "edit_test_file": "astropy/visualization/wcsaxes/tests/test_wcsapi.py",
  "test_patch": "diff --git a/astropy/visualization/wcsaxes/tests/test_sliced_low_level_wcs.py b/astropy/visualization/wcsaxes/tests/test_sliced_low_level_wcs.py\nnew file mode 100644\nindex 0000000..2fd50c3\n--- /dev/null\n+++ b/astropy/visualization/wcsaxes/tests/test_sliced_low_level_wcs.py\n@@ -0,0 +1,53 @@\n+import numpy as np\n+from astropy.wcs import WCS\n+from astropy.wcs.wcsapi import SlicedLowLevelWCS, HighLevelWCSWrapper\n+from astropy.coordinates import SkyCoord\n+import astropy.units as u\n+import pytest\n+\n+def test_world_to_pixel_inconsistent_behavior():\n+    # Define WCS header for a 3D WCS\n+    nx, ny, nz = 100, 25, 2\n+    wcs_header = {\n+        'WCSAXES': 3,\n+        'CRPIX1': (nx + 1) / 2,\n+        'CRPIX2': (ny + 1) / 2,\n+        'CRPIX3': 1.0,\n+        'PC1_1': 0.0,\n+        'PC1_2': -1.0,\n+        'PC1_3': 0.0,\n+        'PC2_1': 1.0,\n+        'PC2_2': 0.0,\n+        'PC2_3': -1.0,\n+        'CDELT1': 5,\n+        'CDELT2': 5,\n+        'CDELT3': 0.055,\n+        'CUNIT1': 'arcsec',\n+        'CUNIT2': 'arcsec',\n+        'CUNIT3': 'Angstrom',\n+        'CTYPE1': 'HPLN-TAN',\n+        'CTYPE2': 'HPLT-TAN',\n+        'CTYPE3': 'WAVE',\n+        'CRVAL1': 0.0,\n+        'CRVAL2': 0.0,\n+        'CRVAL3': 1.05,\n+    }\n+    fits_wcs = WCS(header=wcs_header)\n+\n+    # Perform world_to_pixel on the full WCS\n+    pt = SkyCoord(Tx=0 * u.arcsec, Ty=0 * u.arcsec, frame=fits_wcs.celestial.frame)\n+    px, py, pz = fits_wcs.world_to_pixel(pt, 1.05 * u.angstrom)\n+\n+    # Check the expected result for the full WCS\n+    assert np.isclose(px, 49.5)\n+    assert np.isclose(py, 12.0)\n+    assert np.isclose(pz, 2.44249065e-15)\n+\n+    # Perform world_to_pixel on the sliced WCS\n+    ll_sliced_wcs = SlicedLowLevelWCS(fits_wcs, 0)\n+    hl_sliced_wcs = HighLevelWCSWrapper(ll_sliced_wcs)\n+    px_sliced, py_sliced = hl_sliced_wcs.world_to_pixel(pt)\n+\n+    # Check the erroneous result for the sliced WCS\n+    assert np.isclose(py_sliced, 12.0)\n+    assert not np.isfinite(px_sliced)  # Expecting an erroneous infinite value\n\\ No newline at end of file\n",
  "inverted_patch": null
}