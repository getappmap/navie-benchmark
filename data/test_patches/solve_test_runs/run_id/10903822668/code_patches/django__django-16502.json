{
  "instance_id": "django__django-16502",
  "edit_test_file": "tests/middleware/tests.py",
  "code_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532..ab156f8 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -127,6 +127,7 @@ class ServerHandler(simple_server.ServerHandler):\n         super().__init__(\n             LimitedStream(stdin, content_length), stdout, stderr, environ, **kwargs\n         )\n+        self.method = environ.get(\"REQUEST_METHOD\", \"\").upper()\n \n     def cleanup_headers(self):\n         super().cleanup_headers()\n@@ -143,6 +144,11 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get(\"Connection\") == \"close\":\n             self.request_handler.close_connection = True\n \n+    def finish_response(self):\n+        if self.method == \"HEAD\":\n+            self.result = []\n+        super().finish_response()\n+\n     def close(self):\n         self.get_stdin().read()\n         super().close()\n",
  "test_patch": "diff --git a/tests/middleware/test_head_request_response.py b/tests/middleware/test_head_request_response.py\nnew file mode 100644\nindex 0000000..461adf4\n--- /dev/null\n+++ b/tests/middleware/test_head_request_response.py\n@@ -0,0 +1,49 @@\n+import gzip\n+import random\n+import re\n+import struct\n+from io import BytesIO\n+from unittest import mock\n+from urllib.parse import quote\n+\n+from django.conf import settings\n+from django.core import mail\n+from django.core.exceptions import PermissionDenied\n+from django.http import (\n+    FileResponse,\n+    HttpRequest,\n+    HttpResponse,\n+    HttpResponseNotFound,\n+    HttpResponsePermanentRedirect,\n+    HttpResponseRedirect,\n+    StreamingHttpResponse,\n+)\n+from django.middleware.clickjacking import XFrameOptionsMiddleware\n+from django.middleware.common import BrokenLinkEmailsMiddleware, CommonMiddleware\n+from django.middleware.gzip import GZipMiddleware\n+from django.middleware.http import ConditionalGetMiddleware\n+from django.test import RequestFactory, SimpleTestCase, override_settings\n+\n+int2byte = struct.Struct(\">B\").pack\n+\n+\n+def get_response_empty(request):\n+    return HttpResponse()\n+\n+\n+class HeadRequestResponseTest(SimpleTestCase):\n+    \"\"\"\n+    Test to reproduce the issue where runserver returns response body for HTTP HEAD requests.\n+    \"\"\"\n+\n+    def test_head_request_includes_body(self):\n+        \"\"\"\n+        Test that a HEAD request incorrectly includes a response body.\n+        \"\"\"\n+        request = HttpRequest()\n+        request.method = \"HEAD\"\n+        response = get_response_empty(request)\n+        response.content = b\"<html><body>Content</body></html>\"\n+\n+        # Simulate the behavior of runserver not stripping the body for HEAD requests\n+        self.assertEqual(response.content, b\"<html><body>Content</body></html>\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/middleware/test_head_request_response_inverted.py b/tests/middleware/test_head_request_response_inverted.py\nnew file mode 100644\nindex 0000000..ef85cc3\n--- /dev/null\n+++ b/tests/middleware/test_head_request_response_inverted.py\n@@ -0,0 +1,51 @@\n+import gzip\n+import random\n+import re\n+import struct\n+from io import BytesIO\n+from unittest import mock\n+from urllib.parse import quote\n+\n+from django.conf import settings\n+from django.core import mail\n+from django.core.exceptions import PermissionDenied\n+from django.http import (\n+    FileResponse,\n+    HttpRequest,\n+    HttpResponse,\n+    HttpResponseNotFound,\n+    HttpResponsePermanentRedirect,\n+    HttpResponseRedirect,\n+    StreamingHttpResponse,\n+)\n+from django.middleware.clickjacking import XFrameOptionsMiddleware\n+from django.middleware.common import BrokenLinkEmailsMiddleware, CommonMiddleware\n+from django.middleware.gzip import GZipMiddleware\n+from django.middleware.http import ConditionalGetMiddleware\n+from django.test import RequestFactory, SimpleTestCase, override_settings\n+\n+int2byte = struct.Struct(\">B\").pack\n+\n+\n+def get_response_empty(request):\n+    return HttpResponse()\n+\n+\n+class HeadRequestResponseTest(SimpleTestCase):\n+    \"\"\"\n+    Test to reproduce the issue where runserver returns response body for HTTP HEAD requests.\n+    \"\"\"\n+\n+    def test_head_request_includes_body(self):\n+        \"\"\"\n+        Test that a HEAD request incorrectly includes a response body.\n+        \"\"\"\n+        request = HttpRequest()\n+        request.method = \"HEAD\"\n+        response = get_response_empty(request)\n+        response.content = b\"<html><body>Content</body></html>\"\n+\n+        # Simulate the behavior of runserver not stripping the body for HEAD requests\n+        # The test should now fail if the response content is not empty\n+        if response.content == b\"<html><body>Content</body></html>\":\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1539158,
  "num_received_chars": 49049,
  "elapsed_time": 452.74193239212036,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}