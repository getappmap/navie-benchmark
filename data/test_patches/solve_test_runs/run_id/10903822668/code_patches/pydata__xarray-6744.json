{
  "instance_id": "pydata__xarray-6744",
  "edit_test_file": "xarray/tests/test_variable.py",
  "code_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex aef290f..84ff794 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,8 +270,13 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n+        half_window = int(self.window[0] // 2)\n         stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n+        if self.center[0]:\n+            starts = stops - half_window - 1\n+            stops = stops + half_window\n+        else:\n+            starts = stops - int(self.window[0])\n         starts[: int(self.window[0])] = 0\n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n",
  "test_patch": "diff --git a/xarray/tests/test_dataarray_rolling.py b/xarray/tests/test_dataarray_rolling.py\nnew file mode 100644\nindex 0000000..17b30b2\n--- /dev/null\n+++ b/xarray/tests/test_dataarray_rolling.py\n@@ -0,0 +1,20 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestDataArrayRolling(unittest.TestCase):\n+    def test_center_kwarg_ignored_in_manual_iteration(self):\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+\n+        # Option 1: take a center-justified rolling average\n+        result1 = my_data.rolling(x=3, center=True).mean().values\n+\n+        # Option 2: try to manually iterate, but the result is not centered\n+        my_data_rolling = my_data.rolling(x=3, center=True)\n+        result2 = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # Assert that the manually iterated result is not the same as the center-justified result\n+        self.assertNotEqual(list(result1), result2)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_dataarray_rolling_inverted.py b/xarray/tests/test_dataarray_rolling_inverted.py\nnew file mode 100644\nindex 0000000..20a09e8\n--- /dev/null\n+++ b/xarray/tests/test_dataarray_rolling_inverted.py\n@@ -0,0 +1,22 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestDataArrayRolling(unittest.TestCase):\n+    def test_center_kwarg_ignored_in_manual_iteration(self):\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+\n+        # Option 1: take a center-justified rolling average\n+        result1 = my_data.rolling(x=3, center=True).mean().values\n+\n+        # Option 2: try to manually iterate, but the result is not centered\n+        my_data_rolling = my_data.rolling(x=3, center=True)\n+        result2 = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # Assert that the manually iterated result is the same as the center-justified result\n+        # This should fail if the bug is present\n+        if list(result1) != result2:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 4090992,
  "num_received_chars": 47876,
  "elapsed_time": 777.77219581604,
  "lint_repair_count": 12,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}