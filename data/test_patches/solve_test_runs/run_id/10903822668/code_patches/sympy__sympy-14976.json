{
  "instance_id": "sympy__sympy-14976",
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "code_patch": "diff --git a/sympy/plotting/experimental_lambdify.py b/sympy/plotting/experimental_lambdify.py\nindex 6ba55cd..5fa848b 100644\n--- a/sympy/plotting/experimental_lambdify.py\n+++ b/sympy/plotting/experimental_lambdify.py\n@@ -239,8 +239,8 @@ def __call__(self, args):\n \n \n def experimental_lambdify(*args, **kwargs):\n-    l = Lambdifier(*args, **kwargs)\n-    return l\n+    lambdifier_instance = Lambdifier(*args, **kwargs)\n+    return lambdifier_instance\n \n \n class Lambdifier(object):\n@@ -303,6 +303,8 @@ def __init__(self, args, expr, print_lambda=False, use_evalf=False,\n             namespace.update({'imath': __import__(\n                 'sympy.plotting.intervalmath', fromlist=['intervalmath'])})\n             namespace.update({'math': __import__('math')})\n+        if self.use_mpmath:\n+            namespace.update({'mpmath': __import__('mpmath')})\n \n         # Construct the lambda\n         if self.print_lambda:\n@@ -592,11 +594,10 @@ def translate_func(self, func_name, argtree):\n             argstr = self.tree2str_translate(argtree)\n             return new_name + '(' + argstr\n         else:\n-            template = '(%s(%s)).evalf(' if self.use_evalf else '%s(%s'\n-            if self.float_wrap_evalf:\n-                template = 'float(%s)' % template\n-            elif self.complex_wrap_evalf:\n-                template = 'complex(%s)' % template\n+            if self.use_mpmath:\n+                template = 'mpmath.mpf(%s(%s))' % (func_name, self.tree2str_translate(argtree))\n+            else:\n+                template = '(%s(%s)).evalf(' if self.use_evalf else '%s(%s'\n \n             # Wrapping should only happen on the outermost expression, which\n             # is the only thing we know will be a number.\n@@ -604,7 +605,7 @@ def translate_func(self, func_name, argtree):\n             complex_wrap_evalf = self.complex_wrap_evalf\n             self.float_wrap_evalf = False\n             self.complex_wrap_evalf = False\n-            ret =  template % (func_name, self.tree2str_translate(argtree))\n+            ret = template % (func_name, self.tree2str_translate(argtree))\n             self.float_wrap_evalf = float_wrap_evalf\n             self.complex_wrap_evalf = complex_wrap_evalf\n             return ret\n",
  "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals.py b/sympy/utilities/tests/test_lambdify_rationals.py\nnew file mode 100644\nindex 0000000..fd97149\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals.py\n@@ -0,0 +1,10 @@\n+import inspect\n+from sympy import Eq, S, symbols, rf\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial(18, x) - 232/3\" in source_code\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals_inverted.py b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\nnew file mode 100644\nindex 0000000..ab08ded\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\n@@ -0,0 +1,11 @@\n+import inspect\n+from sympy import Eq, S, symbols, rf\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    # Altered the assertion to fail when the bug is observed\n+    assert \"RisingFactorial(18, x) - 232/3\" not in source_code, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1319476,
  "num_received_chars": 70189,
  "elapsed_time": 740.673107624054,
  "lint_repair_count": 4,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}