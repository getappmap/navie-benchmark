{
  "instance_id": "django__django-11999",
  "edit_test_file": "tests/model_fields/test_foreignkey.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff..6218358 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -939,6 +939,13 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n \n     def _get_FIELD_display(self, field):\n+        # Check if a custom method is defined in the model class\n+        custom_method_name = f'get_{field.name}_display'\n+        if hasattr(self, custom_method_name):\n+            custom_method = getattr(self, custom_method_name)\n+            if callable(custom_method):\n+                return custom_method()\n+        \n         value = getattr(self, field.attname)\n         # force_str() to coerce lazy strings.\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n",
  "test_patch": "diff --git a/tests/model_fields/test_overriding_field_display.py b/tests/model_fields/test_overriding_field_display.py\nnew file mode 100644\nindex 0000000..85a3fda\n--- /dev/null\n+++ b/tests/model_fields/test_overriding_field_display.py\n@@ -0,0 +1,16 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')], max_length=10)\n+\n+    def __str__(self):\n+        return self.get_foo_bar_display()\n+\n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n+class OverridingFieldDisplayTest(TestCase):\n+    def test_get_foo_bar_display_override(self):\n+        instance = FooBar(foo_bar=1)\n+        self.assertEqual(str(instance), \"foo\", \"Expected 'foo' due to issue in Django 2.2+\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_overriding_field_display_inverted.py b/tests/model_fields/test_overriding_field_display_inverted.py\nnew file mode 100644\nindex 0000000..9019594\n--- /dev/null\n+++ b/tests/model_fields/test_overriding_field_display_inverted.py\n@@ -0,0 +1,17 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')], max_length=10)\n+\n+    def __str__(self):\n+        return self.get_foo_bar_display()\n+\n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n+class OverridingFieldDisplayTest(TestCase):\n+    def test_get_foo_bar_display_override(self):\n+        instance = FooBar(foo_bar=1)\n+        # Alter the test to fail when the issue is observed\n+        self.assertEqual(str(instance), \"something\", \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1282093,
  "num_received_chars": 55834,
  "elapsed_time": 487.7621579170227,
  "lint_repair_count": 1,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}