{
  "instance_id": "astropy__astropy-14182",
  "edit_test_file": "astropy/io/ascii/tests/test_fixedwidth.py",
  "code_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8..ea9451d 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,21 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n \n     def write(self, lines):\n         lines = super().write(lines)\n+        if self.header_rows:\n+            header_lines = self._generate_header_lines(lines)\n+            lines = header_lines + lines\n         lines = [lines[1]] + lines + [lines[1]]\n         return lines\n+\n+    def _generate_header_lines(self, lines):\n+        header_lines = []\n+        for header in self.header_rows:\n+            header_line = \" \".join(header)\n+            header_lines.append(header_line)\n+        return header_lines\n\ndiff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py\nindex 993dacf..c9e5967 100644\n--- a/astropy/io/ascii/ui.py\n+++ b/astropy/io/ascii/ui.py\n@@ -878,6 +878,8 @@ def get_writer(Writer=None, fast_writer=True, **kwargs):\n         One-character string to quote fields containing special characters\n     formats : dict\n         Dictionary of format specifiers or formatting functions\n+    header_rows : list\n+        List of column attributes to include as header rows.\n     strip_whitespace : bool\n         Strip surrounding whitespace from column values.\n     names : list\n@@ -906,9 +908,7 @@ def get_writer(Writer=None, fast_writer=True, **kwargs):\n     # set the input `comment` to None.  Without adding a new keyword or assuming\n     # a default comment character, there is no other option but to tell user to\n     # simply remove the meta['comments'].\n-    if isinstance(\n-        writer, (basic.CommentedHeader, fastbasic.FastCommentedHeader)\n-    ) and not isinstance(kwargs.get(\"comment\", \"\"), str):\n+    if isinstance(writer, (basic.CommentedHeader, fastbasic.FastCommentedHeader)) and not isinstance(kwargs.get(\"comment\", \"\"), str):\n         raise ValueError(\n             \"for the commented_header writer you must supply a string\\n\"\n             \"value for the `comment` keyword.  In order to disable writing\\n\"\n",
  "test_patch": "diff --git a/astropy/io/ascii/tests/test_rst_header.py b/astropy/io/ascii/tests/test_rst_header.py\nnew file mode 100644\nindex 0000000..e65200c\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_rst_header.py\n@@ -0,0 +1,12 @@\n+import pytest\n+from astropy.table import QTable\n+import astropy.units as u\n+from io import StringIO\n+from astropy.io.ascii import RST\n+\n+def test_rst_header_rows_exception():\n+    \"\"\"Test that writing a QTable with header_rows to RST format raises TypeError.\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    with pytest.raises(TypeError, match=\"unexpected keyword argument 'header_rows'\"):\n+        tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/io/ascii/tests/test_rst_header_inverted.py b/astropy/io/ascii/tests/test_rst_header_inverted.py\nnew file mode 100644\nindex 0000000..b86ea3c\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_rst_header_inverted.py\n@@ -0,0 +1,16 @@\n+import pytest\n+from astropy.table import QTable\n+import astropy.units as u\n+from io import StringIO\n+from astropy.io.ascii import RST\n+\n+def test_rst_header_rows_exception():\n+    \"\"\"Test that writing a QTable with header_rows to RST format raises an error.\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    try:\n+        tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    except TypeError as e:\n+        assert str(e) == \"RST.__init__() got an unexpected keyword argument 'header_rows'\", \"__BUG__HERE__\"\n+    else:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1230035,
  "num_received_chars": 42223,
  "elapsed_time": 525.1782376766205,
  "lint_repair_count": 1,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}