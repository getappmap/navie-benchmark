{
  "instance_id": "sympy__sympy-23534",
  "edit_test_file": "sympy/core/tests/test_symbol.py",
  "code_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 710c5cf..caab34c 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -902,6 +902,9 @@ def __new__(mcl, name, bases=(AppliedUndef,), __dict__=None, **kwargs):\n         if isinstance(name, Symbol):\n             assumptions = name._merge(assumptions)\n             name = name.name\n+        elif isinstance(name, tuple) and all(isinstance(n, str) for n in name):\n+            # Handle tuple parsing with parentheses\n+            name = ','.join(name)\n         elif not isinstance(name, str):\n             raise TypeError('expecting string or Symbol for name')\n         else:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_symbol_function_parens.py b/sympy/core/tests/test_symbol_function_parens.py\nnew file mode 100644\nindex 0000000..d4c2098\n--- /dev/null\n+++ b/sympy/core/tests/test_symbol_function_parens.py\n@@ -0,0 +1,6 @@\n+from sympy import symbols, Function\n+import sympy as smp\n+\n+def test_symbols_with_extra_parentheses():\n+    q, u = smp.symbols(('q:2', 'u:2'), cls=smp.Function)\n+    assert isinstance(q[0], smp.Symbol), \"Expected type: Symbol, but got: {}\".format(type(q[0]))\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 1896610,
  "num_received_chars": 55740,
  "elapsed_time": 704.9617457389832,
  "lint_repair_count": 4,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}