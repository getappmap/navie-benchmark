{
  "instance_id": "django__django-17029",
  "edit_test_file": "tests/model_meta/tests.py",
  "code_patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 0683f3a..481dd1f 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -376,6 +376,7 @@ class Apps:\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n+        self.get_swappable_settings_name.cache_clear()\n         if self.ready:\n             # Circumvent self.get_models() to prevent that the cache is refilled.\n             # This particularly prevents that an empty value is cached while cloning.\n",
  "test_patch": "diff --git a/tests/model_meta/test_clear_cache_swappable_settings.py b/tests/model_meta/test_clear_cache_swappable_settings.py\nnew file mode 100644\nindex 0000000..74716ce\n--- /dev/null\n+++ b/tests/model_meta/test_clear_cache_swappable_settings.py\n@@ -0,0 +1,14 @@\n+from django.test import SimpleTestCase\n+from django.apps import apps\n+\n+class ClearCacheSwappableSettingsTests(SimpleTestCase):\n+    def test_clear_cache_does_not_clear_swappable_settings_name_cache(self):\n+        # Access the cache to populate it\n+        apps.get_swappable_settings_name(\"auth.User\")\n+        \n+        # Clear the cache\n+        apps.clear_cache()\n+        \n+        # Check if the cache is still populated\n+        cached_value = apps.get_swappable_settings_name.cache_info().currsize\n+        self.assertNotEqual(cached_value, 0, \"Cache should not be cleared by clear_cache()\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_meta/test_clear_cache_swappable_settings_inverted.py b/tests/model_meta/test_clear_cache_swappable_settings_inverted.py\nnew file mode 100644\nindex 0000000..e7e6700\n--- /dev/null\n+++ b/tests/model_meta/test_clear_cache_swappable_settings_inverted.py\n@@ -0,0 +1,15 @@\n+from django.test import SimpleTestCase\n+from django.apps import apps\n+\n+class ClearCacheSwappableSettingsTests(SimpleTestCase):\n+    def test_clear_cache_does_not_clear_swappable_settings_name_cache(self):\n+        # Access the cache to populate it\n+        apps.get_swappable_settings_name(\"auth.User\")\n+        \n+        # Clear the cache\n+        apps.clear_cache()\n+        \n+        # Check if the cache is still populated\n+        cached_value = apps.get_swappable_settings_name.cache_info().currsize\n+        # The test should now fail if the cache is not cleared, indicating the bug\n+        self.assertEqual(cached_value, 0, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 321730,
  "num_received_chars": 6983,
  "elapsed_time": 71.84589099884033,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}