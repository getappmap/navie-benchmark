{
  "instance_id": "pylint-dev__pylint-8898",
  "edit_test_file": "tests/lint/test_run_pylint.py",
  "code_patch": "diff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py\nindex b99c947..c642bbd 100644\n--- a/pylint/config/arguments_manager.py\n+++ b/pylint/config/arguments_manager.py\n@@ -227,8 +227,19 @@ class _ArgumentsManager:\n         \"\"\"Parse the arguments found on the command line into the namespace.\"\"\"\n         arguments = sys.argv[1:] if arguments is None else arguments\n \n+        # Enhanced parsing logic to handle regular expressions with commas\n+        parsed_arguments = []\n+        for arg in arguments:\n+            if arg.startswith(\"--bad-name-rgxs=\"):\n+                # Handle the bad-name-rgxs option specifically\n+                regex_list = arg.split(\"=\", 1)[1]\n+                # Use a custom parsing function to handle commas within regex\n+                parsed_arguments.append(self._parse_regex_list(regex_list))\n+            else:\n+                parsed_arguments.append(arg)\n+\n         self.config, parsed_args = self._arg_parser.parse_known_args(\n-            arguments, self.config\n+            parsed_arguments, self.config\n         )\n \n         return parsed_args\n",
  "test_patch": "diff --git a/tests/lint/test_bad_names_rgxs.py b/tests/lint/test_bad_names_rgxs.py\nnew file mode 100644\nindex 0000000..724b3b4\n--- /dev/null\n+++ b/tests/lint/test_bad_names_rgxs.py\n@@ -0,0 +1,20 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n+\n+from pathlib import Path\n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pylint import run_pylint\n+\n+def test_bad_names_rgxs_mangles_regex_with_commas(capsys: CaptureFixture[str], tmp_path: Path) -> None:\n+    \"\"\"Reproduce issue where bad-names-rgxs with commas causes pylint to crash.\"\"\"\n+    test_file = tmp_path / \"testpylintrc\"\n+    with open(test_file, \"w\", encoding=\"utf-8\") as f:\n+        f.write(\"[BASIC]\\nbad-names-rgxs=(foo{1,3})\")\n+\n+    with pytest.raises(SystemExit) as ex:\n+        run_pylint([\"--rcfile\", f\"{test_file}\", \"foo.py\"])\n+    captured = capsys.readouterr()\n+    assert \"missing ), unterminated subpattern\" in captured.err\n+    assert ex.value.code != 0\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/lint/test_bad_names_rgxs_inverted.py b/tests/lint/test_bad_names_rgxs_inverted.py\nnew file mode 100644\nindex 0000000..cd32810\n--- /dev/null\n+++ b/tests/lint/test_bad_names_rgxs_inverted.py\n@@ -0,0 +1,20 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n+\n+from pathlib import Path\n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pylint import run_pylint\n+\n+def test_bad_names_rgxs_mangles_regex_with_commas(capsys: CaptureFixture[str], tmp_path: Path) -> None:\n+    \"\"\"Reproduce issue where bad-names-rgxs with commas causes pylint to crash.\"\"\"\n+    test_file = tmp_path / \"testpylintrc\"\n+    with open(test_file, \"w\", encoding=\"utf-8\") as f:\n+        f.write(\"[BASIC]\\nbad-names-rgxs=(foo{1,3})\")\n+\n+    with pytest.raises(SystemExit) as ex:\n+        run_pylint([\"--rcfile\", f\"{test_file}\", \"foo.py\"])\n+    captured = capsys.readouterr()\n+    assert \"missing ), unterminated subpattern\" not in captured.err, \"__BUG__HERE__\"\n+    assert ex.value.code != 0\n\\ No newline at end of file\n",
  "num_sent_chars": 1925963,
  "num_received_chars": 71282,
  "elapsed_time": 612.4352176189423,
  "lint_repair_count": 4,
  "test_generation_attempts": 4,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}