{
  "instance_id": "django__django-11820",
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f..69c2b3c 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1713,6 +1713,9 @@ class Model(metaclass=ModelBase):\n                         _cls = fld.get_path_info()[-1].to_opts.model\n                 except (FieldDoesNotExist, AttributeError):\n                     if fld is None or fld.get_transform(part) is None:\n+                        # Allow 'pk' as a valid field reference for related fields\n+                        if part == 'pk':\n+                            continue\n                         errors.append(\n                             checks.Error(\n                                 \"'ordering' refers to the nonexistent field, \"\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_ordering_related_fields.py b/tests/invalid_models_tests/test_ordering_related_fields.py\nnew file mode 100644\nindex 0000000..da1b784\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_ordering_related_fields.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.core.checks import Error\n+\n+class OrderingRelatedFieldsTests(SimpleTestCase):\n+\n+    def test_ordering_with_related_field_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class TestModel(models.Model):\n+            related = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['related__pk']\n+\n+        self.assertEqual(TestModel.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, or lookup 'related__pk'.\",\n+                obj=TestModel,\n+                id='models.E015',\n+            )\n+        ])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_ordering_related_fields_inverted.py b/tests/invalid_models_tests/test_ordering_related_fields_inverted.py\nnew file mode 100644\nindex 0000000..42ac839\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_ordering_related_fields_inverted.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.core.checks import Error\n+\n+class OrderingRelatedFieldsTests(SimpleTestCase):\n+\n+    def test_ordering_with_related_field_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class TestModel(models.Model):\n+            related = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['related__pk']\n+\n+        # Alter the test to fail when the issue is observed\n+        errors = TestModel.check()\n+        if errors == [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, or lookup 'related__pk'.\",\n+                obj=TestModel,\n+                id='models.E015',\n+            )\n+        ]:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 399784,
  "num_received_chars": 12604,
  "elapsed_time": 136.7772192955017,
  "lint_repair_count": 0,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}