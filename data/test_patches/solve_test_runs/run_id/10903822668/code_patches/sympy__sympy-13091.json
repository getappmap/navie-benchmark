{
  "instance_id": "sympy__sympy-13091",
  "edit_test_file": "sympy/combinatorics/tests/test_permutations.py",
  "code_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex db4e971..227cfcd 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -313,10 +313,10 @@ def __eq__(self, other):\n             try:\n                 other = _sympify(other)\n             except SympifyError:\n-                return False    # sympy != other\n+                return NotImplemented    # sympy != other\n \n             if type(self) != type(other):\n-                return False\n+                return NotImplemented\n \n         return self._hashable_content() == other._hashable_content()\n \n@@ -329,7 +329,10 @@ def __ne__(self, other):\n \n            but faster\n         \"\"\"\n-        return not self.__eq__(other)\n+        result = self.__eq__(other)\n+        if result is NotImplemented:\n+            return NotImplemented\n+        return not result\n \n     def dummy_eq(self, other, symbol=None):\n         \"\"\"\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_rich_comparison.py b/sympy/combinatorics/tests/test_rich_comparison.py\nnew file mode 100644\nindex 0000000..36a9d77\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_rich_comparison.py\n@@ -0,0 +1,16 @@\n+from sympy import Basic\n+from sympy.combinatorics.permutations import Permutation\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return True\n+        return NotImplemented\n+\n+def test_rich_comparison():\n+    f = Foo()\n+    s = Permutation([0, 1, 2])\n+\n+    # Test the unsymmetric equivalence relation\n+    assert f == s  # This should be True\n+    assert not (s == f)  # This should be False due to the issue\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_rich_comparison_inverted.py b/sympy/combinatorics/tests/test_rich_comparison_inverted.py\nnew file mode 100644\nindex 0000000..2655a7e\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_rich_comparison_inverted.py\n@@ -0,0 +1,16 @@\n+from sympy import Basic\n+from sympy.combinatorics.permutations import Permutation\n+\n+class Foo:\n+    def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            return True\n+        return NotImplemented\n+\n+def test_rich_comparison():\n+    f = Foo()\n+    s = Permutation([0, 1, 2])\n+\n+    # Test the unsymmetric equivalence relation\n+    assert f == s  # This should be True\n+    assert s == f, \"__BUG__HERE__\"  # This should raise an error due to the issue\n\\ No newline at end of file\n",
  "num_sent_chars": 1209367,
  "num_received_chars": 18124,
  "elapsed_time": 184.09922218322754,
  "lint_repair_count": 0,
  "test_generation_attempts": 7,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}