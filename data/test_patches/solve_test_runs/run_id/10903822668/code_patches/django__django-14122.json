{
  "instance_id": "django__django-14122",
  "edit_test_file": "tests/queries/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 8507347..f228fce 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -78,6 +78,9 @@ class SQLCompiler:\n         #    SomeModel.objects.annotate(Count('somecol')).values('name')\n         #    GROUP BY: all cols of the model\n         #\n+        # Exclude Meta.ordering fields from GROUP BY\n+        meta_ordering_fields = set(self._meta_ordering or [])\n+        #\n         #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')\n         #    GROUP BY: name, pk\n         #\n@@ -124,7 +127,8 @@ class SQLCompiler:\n                 continue\n             cols = expr.get_group_by_cols()\n             for col in cols:\n-                expressions.append(col)\n+                if col not in meta_ordering_fields:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n",
  "test_patch": "diff --git a/tests/queries/test_meta_ordering_group_by.py b/tests/queries/test_meta_ordering_group_by.py\nnew file mode 100644\nindex 0000000..426fdad\n--- /dev/null\n+++ b/tests/queries/test_meta_ordering_group_by.py\n@@ -0,0 +1,26 @@\n+import datetime\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a model with Meta.ordering\n+class GroupByTestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField()\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class MetaOrderingGroupByTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        GroupByTestModel.objects.create(name='A', value=10)\n+        GroupByTestModel.objects.create(name='B', value=20)\n+        GroupByTestModel.objects.create(name='A', value=30)\n+\n+    def test_meta_ordering_in_group_by(self):\n+        # This query should not include 'name' in the GROUP BY clause\n+        queryset = GroupByTestModel.objects.values('name').annotate(total=models.Sum('value'))\n+        sql = str(queryset.query)\n+        # Check if 'name' is incorrectly included in the GROUP BY clause\n+        self.assertIn('GROUP BY', sql)\n+        self.assertIn('name', sql)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_meta_ordering_group_by_inverted.py b/tests/queries/test_meta_ordering_group_by_inverted.py\nnew file mode 100644\nindex 0000000..6af919b\n--- /dev/null\n+++ b/tests/queries/test_meta_ordering_group_by_inverted.py\n@@ -0,0 +1,26 @@\n+import datetime\n+from django.db import models\n+from django.test import TestCase\n+\n+# Define a model with Meta.ordering\n+class GroupByTestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField()\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class MetaOrderingGroupByTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        GroupByTestModel.objects.create(name='A', value=10)\n+        GroupByTestModel.objects.create(name='B', value=20)\n+        GroupByTestModel.objects.create(name='A', value=30)\n+\n+    def test_meta_ordering_in_group_by(self):\n+        # This query should not include 'name' in the GROUP BY clause\n+        queryset = GroupByTestModel.objects.values('name').annotate(total=models.Sum('value'))\n+        sql = str(queryset.query)\n+        # Check if 'name' is incorrectly included in the GROUP BY clause\n+        if 'GROUP BY' in sql and 'name' in sql:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1767478,
  "num_received_chars": 74737,
  "elapsed_time": 711.1432523727417,
  "lint_repair_count": 1,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}