{
  "instance_id": "django__django-15731",
  "edit_test_file": "tests/utils_tests/test_inspect.py",
  "code_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex e37e56c..8b1593e 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -1,5 +1,6 @@\n import copy\n import inspect\n+import functools\n from importlib import import_module\n \n from django.db import router\n@@ -81,11 +82,10 @@ class BaseManager:\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n \n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n \n         new_methods = {}\n",
  "test_patch": "diff --git a/tests/utils_tests/test_signature_manager_methods.py b/tests/utils_tests/test_signature_manager_methods.py\nnew file mode 100644\nindex 0000000..5686207\n--- /dev/null\n+++ b/tests/utils_tests/test_signature_manager_methods.py\n@@ -0,0 +1,15 @@\n+import unittest\n+import inspect\n+from django.db import models\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class TestSignatureManagerMethods(unittest.TestCase):\n+    def test_bulk_create_signature(self):\n+        # Reproduce the issue where inspect.signature returns incorrect signature\n+        signature = inspect.signature(Person.objects.bulk_create)\n+        self.assertEqual(str(signature), '(*args, **kwargs)')\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_signature_manager_methods_inverted.py b/tests/utils_tests/test_signature_manager_methods_inverted.py\nnew file mode 100644\nindex 0000000..95a3fcb\n--- /dev/null\n+++ b/tests/utils_tests/test_signature_manager_methods_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+import inspect\n+from django.db import models\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class TestSignatureManagerMethods(unittest.TestCase):\n+    def test_bulk_create_signature(self):\n+        # Reproduce the issue where inspect.signature returns incorrect signature\n+        signature = inspect.signature(Person.objects.bulk_create)\n+        # The test should now fail if the bug is present, raising the specified error message\n+        self.assertEqual(str(signature), '(objs, batch_size=None, ignore_conflicts=False)', \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1978803,
  "num_received_chars": 50017,
  "elapsed_time": 542.3013832569122,
  "lint_repair_count": 8,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}