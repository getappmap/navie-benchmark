{
  "instance_id": "django__django-11179",
  "edit_test_file": "tests/signals/tests.py",
  "code_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4af..6586e63 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,8 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                # Set the primary key to None after deletion\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n",
  "test_patch": "diff --git a/tests/signals/test_delete_clear_pk.py b/tests/signals/test_delete_clear_pk.py\nnew file mode 100644\nindex 0000000..dd7fab1\n--- /dev/null\n+++ b/tests/signals/test_delete_clear_pk.py\n@@ -0,0 +1,13 @@\n+from django.test import TestCase\n+from .models import Person\n+\n+class DeleteClearPKTest(TestCase):\n+    def test_delete_clears_pk(self):\n+        # Create a Person instance\n+        person = Person.objects.create(first_name=\"Jane\", last_name=\"Doe\")\n+        \n+        # Delete the Person instance\n+        person.delete()\n+        \n+        # Check if the primary key is not cleared (issue reproduction)\n+        self.assertIsNotNone(person.pk, \"The primary key should not be cleared after delete.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/signals/test_delete_clear_pk_inverted.py b/tests/signals/test_delete_clear_pk_inverted.py\nnew file mode 100644\nindex 0000000..d548fb0\n--- /dev/null\n+++ b/tests/signals/test_delete_clear_pk_inverted.py\n@@ -0,0 +1,14 @@\n+from django.test import TestCase\n+from .models import Person\n+\n+class DeleteClearPKTest(TestCase):\n+    def test_delete_clears_pk(self):\n+        # Create a Person instance\n+        person = Person.objects.create(first_name=\"Jane\", last_name=\"Doe\")\n+        \n+        # Delete the Person instance\n+        person.delete()\n+        \n+        # Check if the primary key is cleared (issue reproduction)\n+        if person.pk is not None:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 787598,
  "num_received_chars": 14651,
  "elapsed_time": 156.95105075836182,
  "lint_repair_count": 1,
  "test_generation_attempts": 7,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}