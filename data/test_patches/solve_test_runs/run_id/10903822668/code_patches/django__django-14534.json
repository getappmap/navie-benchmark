{
  "instance_id": "django__django-14534",
  "edit_test_file": "tests/forms_tests/widget_tests/test_checkboxselectmultiple.py",
  "code_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0e..59987ee 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs'].get('id', 'id_%s_%s' % (self.data['name'], self.data['index']))\n \n     @property\n     def choice_label(self):\n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_boundwidget.py b/tests/forms_tests/widget_tests/test_boundwidget.py\nnew file mode 100644\nindex 0000000..7df94af\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_boundwidget.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from django import forms\n+from django.forms import CheckboxSelectMultiple\n+from django.forms.boundfield import BoundWidget\n+\n+class TestBoundWidgetIdForLabel(unittest.TestCase):\n+    def test_id_for_label_ignores_custom_id(self):\n+        class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                option = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                option['attrs']['id'] = f'custom_id_{index}'\n+                return option\n+\n+        class TestForm(forms.Form):\n+            choices = forms.MultipleChoiceField(\n+                choices=[('1', 'One'), ('2', 'Two')],\n+                widget=CustomCheckboxSelectMultiple\n+            )\n+\n+        form = TestForm()\n+        bound_field = form['choices']\n+        subwidgets = list(bound_field.subwidgets)\n+        \n+        # Check if the BoundWidget's id_for_label ignores the custom id\n+        self.assertEqual(subwidgets[0].id_for_label, 'id_choices_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'id_choices_1')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_boundwidget_inverted.py b/tests/forms_tests/widget_tests/test_boundwidget_inverted.py\nnew file mode 100644\nindex 0000000..b09247b\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_boundwidget_inverted.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from django import forms\n+from django.forms import CheckboxSelectMultiple\n+from django.forms.boundfield import BoundWidget\n+\n+class TestBoundWidgetIdForLabel(unittest.TestCase):\n+    def test_id_for_label_ignores_custom_id(self):\n+        class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                option = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                option['attrs']['id'] = f'custom_id_{index}'\n+                return option\n+\n+        class TestForm(forms.Form):\n+            choices = forms.MultipleChoiceField(\n+                choices=[('1', 'One'), ('2', 'Two')],\n+                widget=CustomCheckboxSelectMultiple\n+            )\n+\n+        form = TestForm()\n+        bound_field = form['choices']\n+        subwidgets = list(bound_field.subwidgets)\n+        \n+        # Check if the BoundWidget's id_for_label uses the custom id\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0', \"__BUG__HERE__\")\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1', \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 926848,
  "num_received_chars": 12260,
  "elapsed_time": 100.66064691543579,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}