{
  "instance_id": "django__django-14315",
  "edit_test_file": "tests/backends/base/test_client.py",
  "code_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab6..a643f73 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,4 +1,5 @@\n import signal\n+import os\n \n from django.db.backends.base.client import BaseDatabaseClient\n \n@@ -36,21 +37,24 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [dbname]\n         args.extend(parameters)\n \n-        env = {}\n+        env = None\n+        additional_env = {}\n         if passwd:\n-            env['PGPASSWORD'] = str(passwd)\n+            additional_env['PGPASSWORD'] = str(passwd)\n         if service:\n-            env['PGSERVICE'] = str(service)\n+            additional_env['PGSERVICE'] = str(service)\n         if sslmode:\n-            env['PGSSLMODE'] = str(sslmode)\n+            additional_env['PGSSLMODE'] = str(sslmode)\n         if sslrootcert:\n-            env['PGSSLROOTCERT'] = str(sslrootcert)\n+            additional_env['PGSSLROOTCERT'] = str(sslrootcert)\n         if sslcert:\n-            env['PGSSLCERT'] = str(sslcert)\n+            additional_env['PGSSLCERT'] = str(sslcert)\n         if sslkey:\n-            env['PGSSLKEY'] = str(sslkey)\n+            additional_env['PGSSLKEY'] = str(sslkey)\n         if passfile:\n-            env['PGPASSFILE'] = str(passfile)\n+            additional_env['PGPASSFILE'] = str(passfile)\n+        if additional_env:\n+            env = {**os.environ, **additional_env}\n         return args, env\n \n     def runshell(self, parameters):\n",
  "test_patch": "diff --git a/tests/backends/base/test_runshell_env.py b/tests/backends/base/test_runshell_env.py\nnew file mode 100644\nindex 0000000..cdb7801\n--- /dev/null\n+++ b/tests/backends/base/test_runshell_env.py\n@@ -0,0 +1,23 @@\n+import os\n+import subprocess\n+from unittest import mock\n+from django.db import connection\n+from django.test import SimpleTestCase\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class RunShellEnvTestCase(SimpleTestCase):\n+    def setUp(self):\n+        self.client = DatabaseClient(connection=connection)\n+\n+    def test_runshell_env_ignores_os_environ(self):\n+        # Set a custom environment variable\n+        os.environ['CUSTOM_ENV_VAR'] = 'custom_value'\n+\n+        # Mock subprocess.run to capture the environment passed to it\n+        with mock.patch('subprocess.run') as mock_run:\n+            self.client.runshell([])\n+\n+            # Check if the environment passed to subprocess.run is empty\n+            # This reproduces the issue where os.environ is not respected\n+            _, kwargs = mock_run.call_args\n+            self.assertEqual(kwargs['env'], {}, \"Expected empty env dict, indicating os.environ was ignored\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/backends/base/test_runshell_env_inverted.py b/tests/backends/base/test_runshell_env_inverted.py\nnew file mode 100644\nindex 0000000..ebb5441\n--- /dev/null\n+++ b/tests/backends/base/test_runshell_env_inverted.py\n@@ -0,0 +1,25 @@\n+import os\n+import subprocess\n+from unittest import mock\n+from django.db import connection\n+from django.test import SimpleTestCase\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class RunShellEnvTestCase(SimpleTestCase):\n+    def setUp(self):\n+        self.client = DatabaseClient(connection=connection)\n+\n+    def test_runshell_env_ignores_os_environ(self):\n+        # Set a custom environment variable\n+        os.environ['CUSTOM_ENV_VAR'] = 'custom_value'\n+\n+        # Mock subprocess.run to capture the environment passed to it\n+        with mock.patch('subprocess.run') as mock_run:\n+            self.client.runshell([])\n+\n+            # Check if the environment passed to subprocess.run is empty\n+            # This reproduces the issue where os.environ is not respected\n+            _, kwargs = mock_run.call_args\n+            if kwargs['env'] == {}:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertNotEqual(kwargs['env'], {}, \"Expected non-empty env dict, indicating os.environ was used\")\n\\ No newline at end of file\n",
  "num_sent_chars": 725781,
  "num_received_chars": 20499,
  "elapsed_time": 250.33177590370178,
  "lint_repair_count": 3,
  "test_generation_attempts": 4,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}