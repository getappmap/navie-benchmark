{
  "instance_id": "matplotlib__matplotlib-25122",
  "edit_test_file": "lib/matplotlib/tests/test_mlab.py",
  "code_patch": "diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex 3552904..7ba42f7 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -395,12 +395,12 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n     elif mode == 'psd':\n         result = np.conj(result) * result\n     elif mode == 'magnitude':\n-        result = np.abs(result) / np.abs(window).sum()\n+        result = np.abs(result) / window.sum()\n     elif mode == 'angle' or mode == 'phase':\n         # we unwrap the phase later to handle the onesided vs. twosided case\n         result = np.angle(result)\n     elif mode == 'complex':\n-        result /= np.abs(window).sum()\n+        result /= window.sum()\n \n     if mode == 'psd':\n \n@@ -427,7 +427,7 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n             result /= (np.abs(window)**2).sum()\n         else:\n             # In this case, preserve power in the segment, not amplitude\n-            result /= np.abs(window).sum()**2\n+            result /= window.sum()**2\n \n     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_spectral_helper_correction.py b/lib/matplotlib/tests/test_spectral_helper_correction.py\nnew file mode 100644\nindex 0000000..b28aab4\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spectral_helper_correction.py\n@@ -0,0 +1,16 @@\n+import numpy as np\n+from numpy.testing import assert_almost_equal\n+from matplotlib import mlab\n+\n+def test_spectral_helper_window_correction():\n+    # Generate a flattop window using numpy\n+    window = np.ones(512) * 0.21557895 - np.cos(2 * np.pi * np.arange(512) / 511) * 0.41663158 + \\\n+             np.cos(4 * np.pi * np.arange(512) / 511) * 0.277263158 - \\\n+             np.cos(6 * np.pi * np.arange(512) / 511) * 0.083578947 + \\\n+             np.cos(8 * np.pi * np.arange(512) / 511) * 0.006947368\n+\n+    # Calculate the difference between the squared sums\n+    difference = np.abs(window).sum()**2 - window.sum()**2\n+\n+    # Assert that the difference is the incorrect value, reproducing the issue\n+    assert_almost_equal(difference, 4372.942556173262, decimal=6)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_spectral_helper_correction_inverted.py b/lib/matplotlib/tests/test_spectral_helper_correction_inverted.py\nnew file mode 100644\nindex 0000000..dd4c305\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_spectral_helper_correction_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+from numpy.testing import assert_almost_equal\n+from matplotlib import mlab\n+\n+def test_spectral_helper_window_correction():\n+    # Generate a flattop window using numpy\n+    window = np.ones(512) * 0.21557895 - np.cos(2 * np.pi * np.arange(512) / 511) * 0.41663158 + \\\n+             np.cos(4 * np.pi * np.arange(512) / 511) * 0.277263158 - \\\n+             np.cos(6 * np.pi * np.arange(512) / 511) * 0.083578947 + \\\n+             np.cos(8 * np.pi * np.arange(512) / 511) * 0.006947368\n+\n+    # Calculate the difference between the squared sums\n+    difference = np.abs(window).sum()**2 - window.sum()**2\n+\n+    # Assert that the difference is zero, which is the expected correct behavior\n+    # If the bug is present, this will fail with the message \"__BUG__HERE__\"\n+    assert_almost_equal(difference, 0, decimal=6, err_msg=\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1235594,
  "num_received_chars": 62588,
  "elapsed_time": 541.9923532009125,
  "lint_repair_count": 1,
  "test_generation_attempts": 8,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}