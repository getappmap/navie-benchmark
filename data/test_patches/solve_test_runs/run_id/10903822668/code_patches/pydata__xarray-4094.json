{
  "instance_id": "pydata__xarray-4094",
  "edit_test_file": "xarray/tests/test_variable.py",
  "code_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 35b77d7..4532ace 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -179,6 +179,10 @@ def merge_collected(\n     and Variable values corresponding to those that should be found on the\n     merged result.\n     \"\"\"\n+    # Handle single-dimension variables by ensuring they are aligned correctly\n+    for name, elements_list in grouped.items():\n+        if all(len(variable.dims) == 1 for variable, _ in elements_list):\n+            compat = \"override\"\n     if prioritized is None:\n         prioritized = {}\n \n",
  "test_patch": "diff --git a/xarray/tests/test_unstacked_dataset.py b/xarray/tests/test_unstacked_dataset.py\nnew file mode 100644\nindex 0000000..cd8661f\n--- /dev/null\n+++ b/xarray/tests/test_unstacked_dataset.py\n@@ -0,0 +1,14 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_to_unstacked_dataset_single_dim_variable():\n+    arr = xr.DataArray(\n+        np.arange(3),\n+        coords=[(\"x\", [0, 1, 2])],\n+    )\n+    data = xr.Dataset({\"a\": arr, \"b\": arr})\n+    stacked = data.to_stacked_array('y', sample_dims=['x'])\n+    \n+    with pytest.raises(xr.MergeError, match=\"conflicting values for variable 'y' on objects to be combined\"):\n+        stacked.to_unstacked_dataset('y')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_unstacked_dataset_inverted.py b/xarray/tests/test_unstacked_dataset_inverted.py\nnew file mode 100644\nindex 0000000..e6491ee\n--- /dev/null\n+++ b/xarray/tests/test_unstacked_dataset_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_to_unstacked_dataset_single_dim_variable():\n+    arr = xr.DataArray(\n+        np.arange(3),\n+        coords=[(\"x\", [0, 1, 2])],\n+    )\n+    data = xr.Dataset({\"a\": arr, \"b\": arr})\n+    stacked = data.to_stacked_array('y', sample_dims=['x'])\n+    \n+    # Alter the test to fail when the issue is observed\n+    with pytest.raises(Exception, match=\"__BUG__HERE__\"):\n+        unstacked = stacked.to_unstacked_dataset('y')\n+        # Check for the bug by asserting a condition that should not be true\n+        assert unstacked is not None, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1711176,
  "num_received_chars": 44206,
  "elapsed_time": 917.6238584518433,
  "lint_repair_count": 0,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}