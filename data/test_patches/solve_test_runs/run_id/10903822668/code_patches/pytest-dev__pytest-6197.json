{
  "instance_id": "pytest-dev__pytest-6197",
  "edit_test_file": "testing/test_collection.py",
  "code_patch": "diff --git a/doc/en/example/pythoncollection.rst b/doc/en/example/pythoncollection.rst\nindex d8261a9..1feee28 100644\n--- a/doc/en/example/pythoncollection.rst\n+++ b/doc/en/example/pythoncollection.rst\n@@ -238,6 +238,16 @@ You can easily instruct ``pytest`` to discover tests from every Python file:\n     [pytest]\n     python_files = *.py\n \n+To prevent `__init__.py` files from being collected and imported, you can\n+explicitly exclude them using the `collect_ignore` option in a `conftest.py`\n+file. This is particularly useful in environments where `__init__.py` files\n+may contain code that is not meant to be executed during test collection.\n+\n+.. code-block:: python\n+\n+    # content of conftest.py\n+    collect_ignore = [\"__init__.py\"]\n+\n However, many projects will have a ``setup.py`` which they don't want to be\n imported. Moreover, there may files only importable by a specific python\n version. For such cases you can dynamically define files to be ignored by\n",
  "test_patch": "diff --git a/testing/test_init_file_collection.py b/testing/test_init_file_collection.py\nnew file mode 100644\nindex 0000000..bf0433f\n--- /dev/null\n+++ b/testing/test_init_file_collection.py\n@@ -0,0 +1,21 @@\n+import pytest\n+import os\n+\n+def test_init_file_collection_error(testdir):\n+    # Create a directory with an __init__.py file that raises an AssertionError\n+    foobar_dir = testdir.mkdir(\"foobar\")\n+    init_file = foobar_dir.join(\"__init__.py\")\n+    init_file.write(\"assert False\")\n+\n+    # Run pytest and expect an error during collection\n+    result = testdir.runpytest()\n+    \n+    # Check that the error is due to the AssertionError in __init__.py\n+    result.stdout.fnmatch_lines([\n+        \"*ERROR collecting foobar/__init__.py*\",\n+        \"foobar/__init__.py:1: in <module>\",\n+        \"    assert False\",\n+        \"E   AssertionError\",\n+        \"!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\",\n+    ])\n+    assert result.ret == 2\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/test_init_file_collection_inverted.py b/testing/test_init_file_collection_inverted.py\nnew file mode 100644\nindex 0000000..b23771b\n--- /dev/null\n+++ b/testing/test_init_file_collection_inverted.py\n@@ -0,0 +1,23 @@\n+import pytest\n+\n+def test_init_file_collection_error(testdir):\n+    # Create a directory with an __init__.py file that raises an AssertionError\n+    foobar_dir = testdir.mkdir(\"foobar\")\n+    init_file = foobar_dir.join(\"__init__.py\")\n+    init_file.write(\"assert False\")\n+\n+    # Run pytest and expect an error during collection\n+    result = testdir.runpytest()\n+\n+    # Check that the error is due to the AssertionError in __init__.py\n+    result.stdout.fnmatch_lines([\n+        \"*ERROR collecting foobar/__init__.py*\",\n+        \"foobar/__init__.py:1: in <module>\",\n+        \"    assert False\",\n+        \"E   AssertionError\",\n+        \"!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\",\n+    ])\n+    \n+    # Alter the assertion to fail when the bug is observed\n+    if result.ret == 2:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1311163,
  "num_received_chars": 30811,
  "elapsed_time": 359.19927644729614,
  "lint_repair_count": 2,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}