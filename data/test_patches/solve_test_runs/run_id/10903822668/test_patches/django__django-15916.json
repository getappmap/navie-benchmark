{
  "edit_test_file": "tests/model_forms/tests.py",
  "test_patch": "diff --git a/tests/model_forms/test_modelform_meta_formfield_callback.py b/tests/model_forms/test_modelform_meta_formfield_callback.py\nnew file mode 100644\nindex 0000000..6e0c731\n--- /dev/null\n+++ b/tests/model_forms/test_modelform_meta_formfield_callback.py\n@@ -0,0 +1,32 @@\n+import unittest\n+from django import forms\n+from django.db import models\n+from django.forms import modelform_factory\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class TestModelFormCallback(unittest.TestCase):\n+    def test_modelform_factory_callback(self):\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form = FactoryForm()\n+        # The test should pass when the issue is observed, i.e., the fields are not required.\n+        self.assertFalse(form.fields['active'].required, \"Field 'active' should not be required\")\n+        self.assertFalse(form.fields['name'].required, \"Field 'name' should not be required\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_forms/test_modelform_meta_formfield_callback_inverted.py b/tests/model_forms/test_modelform_meta_formfield_callback_inverted.py\nnew file mode 100644\nindex 0000000..fe3449a\n--- /dev/null\n+++ b/tests/model_forms/test_modelform_meta_formfield_callback_inverted.py\n@@ -0,0 +1,32 @@\n+import unittest\n+from django import forms\n+from django.db import models\n+from django.forms import modelform_factory\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class TestModelFormCallback(unittest.TestCase):\n+    def test_modelform_factory_callback(self):\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form = FactoryForm()\n+        # The test should fail when the issue is observed, i.e., the fields are not required.\n+        if not form.fields['active'].required or not form.fields['name'].required:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}