{
  "edit_test_file": "tests/migrations/test_operations.py",
  "test_patch": "diff --git a/tests/migrations/test_migrations_reduce_index_operations.py b/tests/migrations/test_migrations_reduce_index_operations.py\nnew file mode 100644\nindex 0000000..c01cbb8\n--- /dev/null\n+++ b/tests/migrations/test_migrations_reduce_index_operations.py\n@@ -0,0 +1,50 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.state import ProjectState\n+\n+class TestReduceIndexOperations(SimpleTestCase):\n+    def test_reduce_add_remove_index_operations(self):\n+        \"\"\"\n+        Test that AddIndex and RemoveIndex operations are not reduced\n+        when optimizing migration operations.\n+        \"\"\"\n+        # Initial state with no indexes\n+        project_state = ProjectState()\n+        project_state.add_model(\n+            migrations.state.ModelState(\n+                app_label=\"test_app\",\n+                name=\"TestModel\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"field\", models.CharField(max_length=100)),\n+                ],\n+            )\n+        )\n+\n+        # Add an index\n+        add_index_operation = migrations.AddIndex(\n+            model_name=\"TestModel\",\n+            index=models.Index(fields=[\"field\"], name=\"test_index\"),\n+        )\n+\n+        # Remove the index\n+        remove_index_operation = migrations.RemoveIndex(\n+            model_name=\"TestModel\",\n+            name=\"test_index\",\n+        )\n+\n+        # Apply AddIndex operation\n+        new_state = project_state.clone()\n+        add_index_operation.state_forwards(\"test_app\", new_state)\n+\n+        # Apply RemoveIndex operation\n+        final_state = new_state.clone()\n+        remove_index_operation.state_forwards(\"test_app\", final_state)\n+\n+        # Check that the index is not present in the final state\n+        self.assertEqual(\n+            len(final_state.models[\"test_app\", \"testmodel\"].options[\"indexes\"]), 0\n+        )\n+\n+        # Check that the operations are not reduced\n+        self.assertNotEqual(add_index_operation, remove_index_operation)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_migrations_reduce_index_operations_inverted.py b/tests/migrations/test_migrations_reduce_index_operations_inverted.py\nnew file mode 100644\nindex 0000000..730d0cd\n--- /dev/null\n+++ b/tests/migrations/test_migrations_reduce_index_operations_inverted.py\n@@ -0,0 +1,51 @@\n+from django.db import migrations, models\n+from django.test import SimpleTestCase\n+from django.db.migrations.state import ProjectState\n+\n+class TestReduceIndexOperations(SimpleTestCase):\n+    def test_reduce_add_remove_index_operations(self):\n+        \"\"\"\n+        Test that AddIndex and RemoveIndex operations are reduced\n+        when optimizing migration operations.\n+        \"\"\"\n+        # Initial state with no indexes\n+        project_state = ProjectState()\n+        project_state.add_model(\n+            migrations.state.ModelState(\n+                app_label=\"test_app\",\n+                name=\"TestModel\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"field\", models.CharField(max_length=100)),\n+                ],\n+            )\n+        )\n+\n+        # Add an index\n+        add_index_operation = migrations.AddIndex(\n+            model_name=\"TestModel\",\n+            index=models.Index(fields=[\"field\"], name=\"test_index\"),\n+        )\n+\n+        # Remove the index\n+        remove_index_operation = migrations.RemoveIndex(\n+            model_name=\"TestModel\",\n+            name=\"test_index\",\n+        )\n+\n+        # Apply AddIndex operation\n+        new_state = project_state.clone()\n+        add_index_operation.state_forwards(\"test_app\", new_state)\n+\n+        # Apply RemoveIndex operation\n+        final_state = new_state.clone()\n+        remove_index_operation.state_forwards(\"test_app\", final_state)\n+\n+        # Check that the index is not present in the final state\n+        self.assertEqual(\n+            len(final_state.models[\"test_app\", \"testmodel\"].options[\"indexes\"]), 0\n+        )\n+\n+        # Check that the operations are reduced\n+        if add_index_operation != remove_index_operation:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}