{
  "edit_test_file": "sklearn/ensemble/tests/test_forest.py",
  "test_patch": "diff --git a/sklearn/ensemble/tests/test_isolation_forest_warm_start.py b/sklearn/ensemble/tests/test_isolation_forest_warm_start.py\nnew file mode 100644\nindex 0000000..99667c1\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_isolation_forest_warm_start.py\n@@ -0,0 +1,25 @@\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils.testing import assert_raises\n+\n+def test_isolation_forest_warm_start():\n+    # Generate random data\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 2)\n+\n+    # Initialize IsolationForest without warm_start\n+    iso_forest = IsolationForest(n_estimators=10, random_state=0)\n+    iso_forest.fit(X)\n+    initial_decision_function = iso_forest.decision_function(X)\n+\n+    # Attempt to enable warm_start and increment n_estimators\n+    # This should raise a ValueError because warm_start is not exposed\n+    assert_raises(ValueError, iso_forest.set_params, warm_start=True, n_estimators=20)\n+\n+    # Fit again to check if the decision function changes\n+    iso_forest.fit(X)\n+    new_decision_function = iso_forest.decision_function(X)\n+\n+    # Check if the decision function remains the same\n+    assert np.array_equal(initial_decision_function, new_decision_function), \\\n+        \"Decision function should not change when refitting without warm_start\"\n",
  "inverted_patch": "diff --git a/sklearn/ensemble/tests/test_isolation_forest_warm_start_inverted.py b/sklearn/ensemble/tests/test_isolation_forest_warm_start_inverted.py\nnew file mode 100644\nindex 0000000..119137d\n--- /dev/null\n+++ b/sklearn/ensemble/tests/test_isolation_forest_warm_start_inverted.py\n@@ -0,0 +1,26 @@\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+import pytest\n+\n+def test_isolation_forest_warm_start():\n+    # Generate random data\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 2)\n+\n+    # Initialize IsolationForest without warm_start\n+    iso_forest = IsolationForest(n_estimators=10, random_state=0)\n+    iso_forest.fit(X)\n+    initial_decision_function = iso_forest.decision_function(X)\n+\n+    # Attempt to enable warm_start and increment n_estimators\n+    # This should raise a ValueError because warm_start is not exposed\n+    with pytest.raises(ValueError):\n+        iso_forest.set_params(warm_start=True, n_estimators=20)\n+\n+    # Fit again to check if the decision function changes\n+    iso_forest.fit(X)\n+    new_decision_function = iso_forest.decision_function(X)\n+\n+    # Check if the decision function remains the same\n+    if np.array_equal(initial_decision_function, new_decision_function):\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}