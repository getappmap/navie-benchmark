{
  "edit_test_file": "tests/forms_tests/field_tests/test_jsonfield.py",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_displayforfield_jsonfield.py b/tests/forms_tests/field_tests/test_displayforfield_jsonfield.py\nnew file mode 100644\nindex 0000000..12e86b8\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_displayforfield_jsonfield.py\n@@ -0,0 +1,19 @@\n+import json\n+from django.forms import JSONField, Form\n+from django.test import SimpleTestCase\n+from django.contrib.admin.utils import display_for_field\n+\n+class DisplayForFieldJSONFieldTest(SimpleTestCase):\n+    def test_jsonfield_readonly_display(self):\n+        class JSONForm(Form):\n+            json_field = JSONField()\n+\n+        form = JSONForm(initial={'json_field': {'foo': 'bar'}})\n+        field = form.fields['json_field']\n+        value = form.initial['json_field']\n+\n+        # Simulate the readonly display in admin\n+        displayed_value = display_for_field(value, field, 'json_field')\n+\n+        # Assert that the incorrect output is produced\n+        self.assertEqual(displayed_value, \"{'foo': 'bar'}\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_displayforfield_jsonfield_inverted.py b/tests/forms_tests/field_tests/test_displayforfield_jsonfield_inverted.py\nnew file mode 100644\nindex 0000000..42bc981\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_displayforfield_jsonfield_inverted.py\n@@ -0,0 +1,21 @@\n+import json\n+from django.forms import JSONField, Form\n+from django.test import SimpleTestCase\n+from django.contrib.admin.utils import display_for_field\n+\n+class DisplayForFieldJSONFieldTest(SimpleTestCase):\n+    def test_jsonfield_readonly_display(self):\n+        class JSONForm(Form):\n+            json_field = JSONField()\n+\n+        form = JSONForm(initial={'json_field': {'foo': 'bar'}})\n+        field = form.fields['json_field']\n+        value = form.initial['json_field']\n+\n+        # Simulate the readonly display in admin\n+        displayed_value = display_for_field(value, field, 'json_field')\n+\n+        # Assert that the incorrect output is produced\n+        # This should now fail when the bug is observed\n+        if displayed_value == \"{'foo': 'bar'}\":\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}