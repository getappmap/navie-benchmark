{
  "edit_test_file": "tests/test_ext_autodoc_autoclass.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_cross_reference.py b/tests/test_ext_autodoc_cross_reference.py\nnew file mode 100644\nindex 0000000..b9d5d89\n--- /dev/null\n+++ b/tests/test_ext_autodoc_cross_reference.py\n@@ -0,0 +1,29 @@\n+import sys\n+from unittest import TestCase\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class CrossReferenceTest(TestCase):\n+    def test_property_type_annotation_cross_reference(self):\n+        class Point:\n+            \"\"\"A class representing a point.\"\"\"\n+            x: int\n+            y: int\n+\n+        class Square:\n+            \"\"\"A class representing a square figure.\"\"\"\n+            start: Point\n+            width: int\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \"\"\"Square's end position (bottom-right corner).\"\"\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+\n+        config = Config()\n+        docstring = GoogleDocstring(Square.end.__doc__, config=config, app=None, what='property', name='Square.end', obj=Square.end)\n+        actual = str(docstring)\n+        expected = \"\"\"Square's end position (bottom-right corner).\"\"\"\n+        \n+        self.assertEqual(expected, actual)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_cross_reference_inverted.py b/tests/test_ext_autodoc_cross_reference_inverted.py\nnew file mode 100644\nindex 0000000..491904b\n--- /dev/null\n+++ b/tests/test_ext_autodoc_cross_reference_inverted.py\n@@ -0,0 +1,31 @@\n+import sys\n+from unittest import TestCase\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon.docstring import GoogleDocstring\n+\n+class CrossReferenceTest(TestCase):\n+    def test_property_type_annotation_cross_reference(self):\n+        class Point:\n+            \"\"\"A class representing a point.\"\"\"\n+            x: int\n+            y: int\n+\n+        class Square:\n+            \"\"\"A class representing a square figure.\"\"\"\n+            start: Point\n+            width: int\n+            height: int\n+\n+            @property\n+            def end(self) -> Point:\n+                \"\"\"Square's end position (bottom-right corner).\"\"\"\n+                return Point(self.start.x + self.width, self.start.y + self.height)\n+\n+        config = Config()\n+        docstring = GoogleDocstring(Square.end.__doc__, config=config, app=None, what='property', name='Square.end', obj=Square.end)\n+        actual = str(docstring)\n+        expected = \"\"\"Square's end position (bottom-right corner).\"\"\"\n+        \n+        # Alter the test to fail when the issue is observed\n+        if actual == expected:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}