{
  "edit_test_file": "tests/signals/tests.py",
  "test_patch": "diff --git a/tests/signals/test_delete_clear_pk.py b/tests/signals/test_delete_clear_pk.py\nnew file mode 100644\nindex 0000000..dd7fab1\n--- /dev/null\n+++ b/tests/signals/test_delete_clear_pk.py\n@@ -0,0 +1,13 @@\n+from django.test import TestCase\n+from .models import Person\n+\n+class DeleteClearPKTest(TestCase):\n+    def test_delete_clears_pk(self):\n+        # Create a Person instance\n+        person = Person.objects.create(first_name=\"Jane\", last_name=\"Doe\")\n+        \n+        # Delete the Person instance\n+        person.delete()\n+        \n+        # Check if the primary key is not cleared (issue reproduction)\n+        self.assertIsNotNone(person.pk, \"The primary key should not be cleared after delete.\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/signals/test_delete_clear_pk_inverted.py b/tests/signals/test_delete_clear_pk_inverted.py\nnew file mode 100644\nindex 0000000..d548fb0\n--- /dev/null\n+++ b/tests/signals/test_delete_clear_pk_inverted.py\n@@ -0,0 +1,14 @@\n+from django.test import TestCase\n+from .models import Person\n+\n+class DeleteClearPKTest(TestCase):\n+    def test_delete_clears_pk(self):\n+        # Create a Person instance\n+        person = Person.objects.create(first_name=\"Jane\", last_name=\"Doe\")\n+        \n+        # Delete the Person instance\n+        person.delete()\n+        \n+        # Check if the primary key is cleared (issue reproduction)\n+        if person.pk is not None:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}