{
  "edit_test_file": "astropy/visualization/wcsaxes/tests/test_misc.py",
  "test_patch": "diff --git a/astropy/visualization/wcsaxes/tests/test_sliced_low_level_wcs_behavior.py b/astropy/visualization/wcsaxes/tests/test_sliced_low_level_wcs_behavior.py\nnew file mode 100644\nindex 0000000..7a39550\n--- /dev/null\n+++ b/astropy/visualization/wcsaxes/tests/test_sliced_low_level_wcs_behavior.py\n@@ -0,0 +1,55 @@\n+import numpy as np\n+import astropy.wcs\n+from astropy.coordinates import SkyCoord\n+import astropy.units as u\n+from astropy.wcs.wcsapi import SlicedLowLevelWCS, HighLevelWCSWrapper\n+from numpy.testing import assert_allclose\n+\n+def test_inconsistent_world_to_pixel_behavior():\n+    # Define WCS header\n+    nx = 100\n+    ny = 25\n+    wcs_header = {\n+        'WCSAXES': 3,\n+        'CRPIX1': (nx + 1)/2,\n+        'CRPIX2': (ny + 1)/2,\n+        'CRPIX3': 1.0,\n+        'PC1_1': 0.0,\n+        'PC1_2': -1.0,\n+        'PC1_3': 0.0,\n+        'PC2_1': 1.0,\n+        'PC2_2': 0.0,\n+        'PC2_3': -1.0,\n+        'CDELT1': 5,\n+        'CDELT2': 5,\n+        'CDELT3': 0.055,\n+        'CUNIT1': 'arcsec',\n+        'CUNIT2': 'arcsec',\n+        'CUNIT3': 'Angstrom',\n+        'CTYPE1': 'HPLN-TAN',\n+        'CTYPE2': 'HPLT-TAN',\n+        'CTYPE3': 'WAVE',\n+        'CRVAL1': 0.0,\n+        'CRVAL2': 0.0,\n+        'CRVAL3': 1.05,\n+    }\n+    \n+    # Create WCS object\n+    fits_wcs = astropy.wcs.WCS(header=wcs_header)\n+    \n+    # Define the SkyCoord point\n+    pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec, frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))\n+    \n+    # Perform world_to_pixel on the unsliced WCS\n+    px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)\n+    \n+    # Slice the WCS and wrap it\n+    ll_sliced_wcs = SlicedLowLevelWCS(fits_wcs, 0)\n+    hl_sliced_wcs = HighLevelWCSWrapper(ll_sliced_wcs)\n+    \n+    # Perform world_to_pixel on the sliced WCS\n+    sliced_px, sliced_py = hl_sliced_wcs.world_to_pixel(pt)\n+    \n+    # Assert that the sliced WCS returns an incorrect result\n+    assert sliced_px > 1e10, \"The first pixel entry should be essentially infinite\"\n+    assert_allclose(sliced_py, py, atol=1e-5)\n\\ No newline at end of file\n",
  "inverted_patch": null
}