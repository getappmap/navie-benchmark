{
  "edit_test_file": "xarray/tests/test_variable.py",
  "test_patch": "diff --git a/xarray/tests/test_dataarray_rolling.py b/xarray/tests/test_dataarray_rolling.py\nnew file mode 100644\nindex 0000000..17b30b2\n--- /dev/null\n+++ b/xarray/tests/test_dataarray_rolling.py\n@@ -0,0 +1,20 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestDataArrayRolling(unittest.TestCase):\n+    def test_center_kwarg_ignored_in_manual_iteration(self):\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+\n+        # Option 1: take a center-justified rolling average\n+        result1 = my_data.rolling(x=3, center=True).mean().values\n+\n+        # Option 2: try to manually iterate, but the result is not centered\n+        my_data_rolling = my_data.rolling(x=3, center=True)\n+        result2 = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # Assert that the manually iterated result is not the same as the center-justified result\n+        self.assertNotEqual(list(result1), result2)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_dataarray_rolling_inverted.py b/xarray/tests/test_dataarray_rolling_inverted.py\nnew file mode 100644\nindex 0000000..20a09e8\n--- /dev/null\n+++ b/xarray/tests/test_dataarray_rolling_inverted.py\n@@ -0,0 +1,22 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestDataArrayRolling(unittest.TestCase):\n+    def test_center_kwarg_ignored_in_manual_iteration(self):\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+\n+        # Option 1: take a center-justified rolling average\n+        result1 = my_data.rolling(x=3, center=True).mean().values\n+\n+        # Option 2: try to manually iterate, but the result is not centered\n+        my_data_rolling = my_data.rolling(x=3, center=True)\n+        result2 = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # Assert that the manually iterated result is the same as the center-justified result\n+        # This should fail if the bug is present\n+        if list(result1) != result2:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}