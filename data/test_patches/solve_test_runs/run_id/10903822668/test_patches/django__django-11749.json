{
  "edit_test_file": "tests/template_tests/test_parser.py",
  "test_patch": "diff --git a/tests/template_tests/test_mutually_exclusive_group.py b/tests/template_tests/test_mutually_exclusive_group.py\nnew file mode 100644\nindex 0000000..f745c21\n--- /dev/null\n+++ b/tests/template_tests/test_mutually_exclusive_group.py\n@@ -0,0 +1,27 @@\n+from django.core.management import call_command, CommandError\n+from django.core.management.base import BaseCommand\n+from django.test import SimpleTestCase\n+from io import StringIO\n+import argparse\n+\n+class MyCommand(BaseCommand):\n+    help = 'Test command for mutually exclusive group'\n+\n+    def add_arguments(self, parser):\n+        shop = parser.add_mutually_exclusive_group(required=True)\n+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\n+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\n+\n+    def handle(self, *args, **options):\n+        if options['shop_id']:\n+            self.stdout.write(f\"Shop ID: {options['shop_id']}\")\n+        elif options['shop_name']:\n+            self.stdout.write(f\"Shop Name: {options['shop_name']}\")\n+\n+class MutuallyExclusiveGroupTest(SimpleTestCase):\n+    def test_call_command_with_kwargs(self):\n+        \"\"\"\n+        Test that call_command fails when argument of required mutually exclusive group is passed in kwargs.\n+        \"\"\"\n+        with self.assertRaisesMessage(CommandError, \"Error: one of the arguments --shop-id --shop is required\"):\n+            call_command(MyCommand(), shop_id=1)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/template_tests/test_mutually_exclusive_group_inverted.py b/tests/template_tests/test_mutually_exclusive_group_inverted.py\nnew file mode 100644\nindex 0000000..d62fdc9\n--- /dev/null\n+++ b/tests/template_tests/test_mutually_exclusive_group_inverted.py\n@@ -0,0 +1,27 @@\n+from django.core.management import call_command, CommandError\n+from django.core.management.base import BaseCommand\n+from django.test import SimpleTestCase\n+from io import StringIO\n+import argparse\n+\n+class MyCommand(BaseCommand):\n+    help = 'Test command for mutually exclusive group'\n+\n+    def add_arguments(self, parser):\n+        shop = parser.add_mutually_exclusive_group(required=True)\n+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\n+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\n+\n+    def handle(self, *args, **options):\n+        if options['shop_id']:\n+            self.stdout.write(f\"Shop ID: {options['shop_id']}\")\n+        elif options['shop_name']:\n+            self.stdout.write(f\"Shop Name: {options['shop_name']}\")\n+\n+class MutuallyExclusiveGroupTest(SimpleTestCase):\n+    def test_call_command_with_kwargs(self):\n+        \"\"\"\n+        Test that call_command fails when argument of required mutually exclusive group is passed in kwargs.\n+        \"\"\"\n+        with self.assertRaisesMessage(CommandError, \"__BUG__HERE__\"):\n+            call_command(MyCommand(), shop_id=1)\n\\ No newline at end of file\n"
}