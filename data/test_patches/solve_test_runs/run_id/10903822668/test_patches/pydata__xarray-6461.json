{
  "edit_test_file": "xarray/tests/test_computation.py",
  "test_patch": "diff --git a/xarray/tests/test_where_keep_attrs.py b/xarray/tests/test_where_keep_attrs.py\nnew file mode 100644\nindex 0000000..86f9e9f\n--- /dev/null\n+++ b/xarray/tests/test_where_keep_attrs.py\n@@ -0,0 +1,12 @@\n+import unittest\n+import xarray as xr\n+\n+class TestWhereKeepAttrs(unittest.TestCase):\n+    def test_where_with_scalar_and_keep_attrs(self):\n+        with self.assertRaises(IndexError) as context:\n+            xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n+        \n+        self.assertIn(\"list index out of range\", str(context.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/xarray/tests/test_where_keep_attrs_inverted.py b/xarray/tests/test_where_keep_attrs_inverted.py\nnew file mode 100644\nindex 0000000..5349351\n--- /dev/null\n+++ b/xarray/tests/test_where_keep_attrs_inverted.py\n@@ -0,0 +1,18 @@\n+import unittest\n+import xarray as xr\n+\n+class TestWhereKeepAttrs(unittest.TestCase):\n+    def test_where_with_scalar_and_keep_attrs(self):\n+        # The test should now fail when the bug is observed\n+        try:\n+            xr.where(xr.DataArray([1, 2, 3]) > 0, 1, 0, keep_attrs=True)\n+        except IndexError as e:\n+            # Check if the exception message matches the expected bug message\n+            if \"list index out of range\" in str(e):\n+                raise AssertionError(\"__BUG__HERE__\") from e\n+        else:\n+            # If no exception is raised, the test should fail\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}