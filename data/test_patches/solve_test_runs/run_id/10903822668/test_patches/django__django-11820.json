{
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_ordering_related_fields.py b/tests/invalid_models_tests/test_ordering_related_fields.py\nnew file mode 100644\nindex 0000000..da1b784\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_ordering_related_fields.py\n@@ -0,0 +1,27 @@\n+import unittest\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.core.checks import Error\n+\n+class OrderingRelatedFieldsTests(SimpleTestCase):\n+\n+    def test_ordering_with_related_field_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class TestModel(models.Model):\n+            related = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['related__pk']\n+\n+        self.assertEqual(TestModel.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, or lookup 'related__pk'.\",\n+                obj=TestModel,\n+                id='models.E015',\n+            )\n+        ])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/invalid_models_tests/test_ordering_related_fields_inverted.py b/tests/invalid_models_tests/test_ordering_related_fields_inverted.py\nnew file mode 100644\nindex 0000000..42ac839\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_ordering_related_fields_inverted.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.core.checks import Error\n+\n+class OrderingRelatedFieldsTests(SimpleTestCase):\n+\n+    def test_ordering_with_related_field_pk(self):\n+        class RelatedModel(models.Model):\n+            pass\n+\n+        class TestModel(models.Model):\n+            related = models.ForeignKey(RelatedModel, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['related__pk']\n+\n+        # Alter the test to fail when the issue is observed\n+        errors = TestModel.check()\n+        if errors == [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, or lookup 'related__pk'.\",\n+                obj=TestModel,\n+                id='models.E015',\n+            )\n+        ]:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}