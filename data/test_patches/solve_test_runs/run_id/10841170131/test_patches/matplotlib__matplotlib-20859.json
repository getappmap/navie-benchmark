{
  "edit_test_file": "lib/matplotlib/tests/test_figure.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_subfigure_legend.py b/lib/matplotlib/tests/test_subfigure_legend.py\nnew file mode 100644\nindex 0000000..85dadf0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigure_legend.py\n@@ -0,0 +1,16 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+\n+class TestSubfigureLegend(unittest.TestCase):\n+    def test_subfigure_legend_raises_type_error(self):\n+        subfig = plt.figure().subfigures()\n+        ax = subfig.subplots()\n+        ax.plot([0, 1, 2], [0, 1, 2], label=\"test\")\n+        \n+        with self.assertRaises(TypeError) as context:\n+            subfig.legend()\n+        \n+        self.assertIn(\"Legend needs either Axes or Figure as parent\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_subfigure_legend_inverted.py b/lib/matplotlib/tests/test_subfigure_legend_inverted.py\nnew file mode 100644\nindex 0000000..28bd3fb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_subfigure_legend_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+\n+class TestSubfigureLegend(unittest.TestCase):\n+    def test_subfigure_legend_raises_type_error(self):\n+        subfig = plt.figure().subfigures()\n+        ax = subfig.subplots()\n+        ax.plot([0, 1, 2], [0, 1, 2], label=\"test\")\n+        \n+        try:\n+            subfig.legend()\n+        except TypeError as e:\n+            self.assertIn(\"Legend needs either Axes or Figure as parent\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\") from e\n+        else:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}