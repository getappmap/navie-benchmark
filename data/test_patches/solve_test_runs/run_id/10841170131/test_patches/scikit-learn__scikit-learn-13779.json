{
  "edit_test_file": "sklearn/utils/tests/test_estimator_checks.py",
  "test_patch": "diff --git a/sklearn/utils/tests/test_voting_estimator_failure.py b/sklearn/utils/tests/test_voting_estimator_failure.py\nnew file mode 100644\nindex 0000000..2b208ad\n--- /dev/null\n+++ b/sklearn/utils/tests/test_voting_estimator_failure.py\n@@ -0,0 +1,23 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+\n+class TestVotingEstimatorFailure(unittest.TestCase):\n+    def test_voting_estimator_with_none_estimator(self):\n+        X, y = load_iris(return_X_y=True)\n+        voter = VotingClassifier(\n+            estimators=[('lr', LogisticRegression()),\n+                        ('rf', RandomForestClassifier())]\n+        )\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        voter.set_params(lr=None)\n+        \n+        with self.assertRaises(AttributeError) as context:\n+            voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        \n+        self.assertIn(\"'NoneType' object has no attribute 'fit'\", str(context.exception))\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/utils/tests/test_voting_estimator_failure_inverted.py b/sklearn/utils/tests/test_voting_estimator_failure_inverted.py\nnew file mode 100644\nindex 0000000..34c07f4\n--- /dev/null\n+++ b/sklearn/utils/tests/test_voting_estimator_failure_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.datasets import load_iris\n+\n+class TestVotingEstimatorFailure(unittest.TestCase):\n+    def test_voting_estimator_with_none_estimator(self):\n+        X, y = load_iris(return_X_y=True)\n+        voter = VotingClassifier(\n+            estimators=[('lr', LogisticRegression()),\n+                        ('rf', RandomForestClassifier())]\n+        )\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        voter.set_params(lr=None)\n+        \n+        try:\n+            voter.fit(X, y, sample_weight=np.ones(y.shape))\n+        except AttributeError as e:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}