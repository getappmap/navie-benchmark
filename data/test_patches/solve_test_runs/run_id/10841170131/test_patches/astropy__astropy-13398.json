{
  "edit_test_file": "astropy/coordinates/tests/test_iau_fullstack.py",
  "test_patch": "diff --git a/astropy/coordinates/tests/test_itrs_observed_transformations.py b/astropy/coordinates/tests/test_itrs_observed_transformations.py\nnew file mode 100644\nindex 0000000..f07b4df\n--- /dev/null\n+++ b/astropy/coordinates/tests/test_itrs_observed_transformations.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from astropy.coordinates import ITRS, AltAz, EarthLocation\n+from astropy.time import Time\n+import astropy.units as u\n+\n+class TestITRSObservedTransforms(unittest.TestCase):\n+    def test_itrs_to_observed_inaccuracy(self):\n+        # Setup ITRS coordinates\n+        itrs_coo = ITRS(x=1*u.km, y=1*u.km, z=1*u.km, obstime=Time('J2020'))\n+\n+        # Setup observer location and AltAz frame\n+        observer = EarthLocation(lat=45*u.deg, lon=45*u.deg, height=0*u.m)\n+        altaz_frame = AltAz(obstime=Time('J2020'), location=observer)\n+\n+        # Perform transformation and expect a TypeError due to obstime handling\n+        with self.assertRaises(TypeError):\n+            itrs_coo.transform_to(altaz_frame)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/astropy/coordinates/tests/test_itrs_observed_transformations_inverted.py b/astropy/coordinates/tests/test_itrs_observed_transformations_inverted.py\nnew file mode 100644\nindex 0000000..a6c1cef\n--- /dev/null\n+++ b/astropy/coordinates/tests/test_itrs_observed_transformations_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from astropy.coordinates import ITRS, AltAz, EarthLocation\n+from astropy.time import Time\n+import astropy.units as u\n+\n+class TestITRSObservedTransforms(unittest.TestCase):\n+    def test_itrs_to_observed_inaccuracy(self):\n+        # Setup ITRS coordinates\n+        itrs_coo = ITRS(x=1*u.km, y=1*u.km, z=1*u.km, obstime=Time('J2020'))\n+\n+        # Setup observer location and AltAz frame\n+        observer = EarthLocation(lat=45*u.deg, lon=45*u.deg, height=0*u.m)\n+        altaz_frame = AltAz(obstime=Time('J2020'), location=observer)\n+\n+        # Perform transformation and expect a ValueError due to obstime handling\n+        # Change the expected exception to ValueError to make the test fail when the bug is observed\n+        with self.assertRaises(ValueError, msg=\"__BUG__HERE__\"):\n+            itrs_coo.transform_to(altaz_frame)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}