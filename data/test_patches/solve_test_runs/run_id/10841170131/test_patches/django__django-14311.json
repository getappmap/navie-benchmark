{
  "edit_test_file": "tests/utils_tests/test_module_loading.py",
  "test_patch": "diff --git a/tests/utils_tests/test_module_autoreload_issue.py b/tests/utils_tests/test_module_autoreload_issue.py\nnew file mode 100644\nindex 0000000..7bdaabd\n--- /dev/null\n+++ b/tests/utils_tests/test_module_autoreload_issue.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from unittest.mock import patch\n+from django.utils import autoreload\n+\n+class TestAutoreloadWithCustomModule(unittest.TestCase):\n+    def test_autoreload_with_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue with autoreloading when using `python -m custom_module runserver`.\n+        The test should pass when the issue is observed, i.e., when the incorrect arguments are produced.\n+        \"\"\"\n+        original_args = ['-m', 'custom_module.runserver']\n+        expected_args = ['-m', 'custom_module.runserver']\n+\n+        with patch('django.utils.autoreload.get_child_arguments', return_value=original_args):\n+            actual_args = autoreload.get_child_arguments()\n+            self.assertEqual(actual_args, expected_args, \"Autoreload arguments are incorrect for custom module.\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/utils_tests/test_module_autoreload_issue_inverted.py b/tests/utils_tests/test_module_autoreload_issue_inverted.py\nnew file mode 100644\nindex 0000000..a9a036a\n--- /dev/null\n+++ b/tests/utils_tests/test_module_autoreload_issue_inverted.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from unittest.mock import patch\n+from django.utils import autoreload\n+\n+class TestAutoreloadWithCustomModule(unittest.TestCase):\n+    def test_autoreload_with_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue with autoreloading when using `python -m custom_module runserver`.\n+        The test should fail when the issue is observed, i.e., when the incorrect arguments are produced.\n+        \"\"\"\n+        original_args = ['-m', 'custom_module.runserver']\n+        expected_args = ['-m', 'custom_module.runserver']\n+\n+        with patch('django.utils.autoreload.get_child_arguments', return_value=original_args):\n+            actual_args = autoreload.get_child_arguments()\n+            if actual_args == expected_args:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertNotEqual(actual_args, expected_args, \"Autoreload arguments are incorrect for custom module.\")\n\\ No newline at end of file\n"
}