{
  "edit_test_file": "tests/template_tests/filter_tests/test_escape.py",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_html_escape.py b/tests/template_tests/filter_tests/test_html_escape.py\nnew file mode 100644\nindex 0000000..ef09193\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_html_escape.py\n@@ -0,0 +1,17 @@\n+from django.test import SimpleTestCase\n+from django.utils.html import escape as django_escape\n+import html\n+\n+class HtmlEscapeTests(SimpleTestCase):\n+    def test_html_escape_difference(self):\n+        # Test to reproduce the issue where django.utils.html.escape()\n+        # produces different output compared to html.escape() for single quotes.\n+        input_string = \"It's a test\"\n+        django_escaped = django_escape(input_string)\n+        stdlib_escaped = html.escape(input_string)\n+\n+        # Assert that the outputs are different, which reproduces the issue.\n+        self.assertNotEqual(django_escaped, stdlib_escaped)\n+        # Specifically, check the difference in escaping single quotes.\n+        self.assertEqual(django_escaped, \"It&#39;s a test\")\n+        self.assertEqual(stdlib_escaped, \"It&#x27;s a test\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_html_escape_inverted.py b/tests/template_tests/filter_tests/test_html_escape_inverted.py\nnew file mode 100644\nindex 0000000..1ca9918\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_html_escape_inverted.py\n@@ -0,0 +1,15 @@\n+from django.test import SimpleTestCase\n+from django.utils.html import escape as django_escape\n+import html\n+\n+class HtmlEscapeTests(SimpleTestCase):\n+    def test_html_escape_difference(self):\n+        # Test to reproduce the issue where django.utils.html.escape()\n+        # produces different output compared to html.escape() for single quotes.\n+        input_string = \"It's a test\"\n+        django_escaped = django_escape(input_string)\n+        stdlib_escaped = html.escape(input_string)\n+\n+        # Assert that the outputs are the same, which should not happen if the bug is present.\n+        # This test should fail if the bug is observed.\n+        self.assertEqual(django_escaped, stdlib_escaped, \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}