{
  "edit_test_file": "tests/forms_tests/widget_tests/test_clearablefileinput.py",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py\nnew file mode 100644\nindex 0000000..59222d6\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.forms import Form, CharField\n+from django.core.exceptions import ValidationError\n+\n+class TestCleanedDataOverwrite(unittest.TestCase):\n+    def test_cleaned_data_overwrites_default(self):\n+        class SomeForm(Form):\n+            some_field = CharField(required=False)\n+\n+            def clean(self):\n+                cleaned_data = super().clean()\n+                # Simulate overwriting a default value with cleaned_data\n+                cleaned_data['some_field'] = 'new_value'\n+                return cleaned_data\n+\n+        form = SomeForm(data={})\n+        form.full_clean()\n+        # Check if the cleaned_data overwrites the default value\n+        self.assertEqual(form.cleaned_data['some_field'], 'new_value')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py\nnew file mode 100644\nindex 0000000..60355db\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from django.forms import Form, CharField\n+from django.core.exceptions import ValidationError\n+\n+class TestCleanedDataOverwrite(unittest.TestCase):\n+    def test_cleaned_data_overwrites_default(self):\n+        class SomeForm(Form):\n+            some_field = CharField(required=False)\n+\n+            def clean(self):\n+                cleaned_data = super().clean()\n+                # Simulate overwriting a default value with cleaned_data\n+                cleaned_data['some_field'] = 'new_value'\n+                return cleaned_data\n+\n+        form = SomeForm(data={})\n+        form.full_clean()\n+        # Check if the cleaned_data overwrites the default value\n+        # This should now fail if the bug is present\n+        if form.cleaned_data['some_field'] == 'new_value':\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}