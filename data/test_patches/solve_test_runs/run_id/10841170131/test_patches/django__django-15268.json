{
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "test_patch": "diff --git a/tests/migrations/test_optimize_alter_operations.py b/tests/migrations/test_optimize_alter_operations.py\nnew file mode 100644\nindex 0000000..633682c\n--- /dev/null\n+++ b/tests/migrations/test_optimize_alter_operations.py\n@@ -0,0 +1,43 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class TestOptimizeAlterOperations(SimpleTestCase):\n+    def test_multiple_alter_operations_not_optimized(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are not optimized into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        expected_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, app_label='test_app')\n+\n+        self.assertEqual(optimized_operations, operations)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_optimize_alter_operations_inverted.py b/tests/migrations/test_optimize_alter_operations_inverted.py\nnew file mode 100644\nindex 0000000..5bee75b\n--- /dev/null\n+++ b/tests/migrations/test_optimize_alter_operations_inverted.py\n@@ -0,0 +1,45 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class TestOptimizeAlterOperations(SimpleTestCase):\n+    def test_multiple_alter_operations_not_optimized(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are not optimized into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        expected_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, app_label='test_app')\n+\n+        # Alter the assertion to fail when the bug is observed\n+        if optimized_operations == operations:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}