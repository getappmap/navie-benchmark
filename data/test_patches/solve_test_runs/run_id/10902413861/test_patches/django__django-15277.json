{
  "edit_test_file": "tests/model_fields/test_charfield.py",
  "test_patch": "diff --git a/tests/model_fields/test_value_output_field.py b/tests/model_fields/test_value_output_field.py\nnew file mode 100644\nindex 0000000..f42bd6d\n--- /dev/null\n+++ b/tests/model_fields/test_value_output_field.py\n@@ -0,0 +1,19 @@\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db.models import Value\n+\n+class TestValueOutputField(SimpleTestCase):\n+    def test_value_resolve_output_field_with_string(self):\n+        \"\"\"\n+        Test that Value._resolve_output_field() for a string value\n+        results in a CharField with a MaxLengthValidator that raises\n+        a TypeError when used.\n+        \"\"\"\n+        x = Value('test')\n+        output_field = x._resolve_output_field()\n+        self.assertIsInstance(output_field, models.CharField)\n+        self.assertEqual(len(output_field.validators), 1)\n+        validator = output_field.validators[0]\n+        with self.assertRaises(TypeError):\n+            validator.compare(1, None)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_value_output_field_inverted.py b/tests/model_fields/test_value_output_field_inverted.py\nnew file mode 100644\nindex 0000000..04fd692\n--- /dev/null\n+++ b/tests/model_fields/test_value_output_field_inverted.py\n@@ -0,0 +1,21 @@\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db.models import Value\n+\n+class TestValueOutputField(SimpleTestCase):\n+    def test_value_resolve_output_field_with_string(self):\n+        \"\"\"\n+        Test that Value._resolve_output_field() for a string value\n+        results in a CharField with a MaxLengthValidator that raises\n+        a TypeError when used.\n+        \"\"\"\n+        x = Value('test')\n+        output_field = x._resolve_output_field()\n+        self.assertIsInstance(output_field, models.CharField)\n+        self.assertEqual(len(output_field.validators), 1)\n+        validator = output_field.validators[0]\n+        try:\n+            validator.compare(1, None)\n+        except TypeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}