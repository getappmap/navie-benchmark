{
  "edit_test_file": "tests/test_locale.py",
  "test_patch": "diff --git a/tests/test_translation_ignore.py b/tests/test_translation_ignore.py\nnew file mode 100644\nindex 0000000..9c47d4f\n--- /dev/null\n+++ b/tests/test_translation_ignore.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from sphinx import locale\n+\n+class TestTranslationIgnore(unittest.TestCase):\n+    def setUp(self):\n+        # Clear any existing translators to ensure a clean state\n+        locale.translators.clear()\n+\n+    def test_translation_ignore(self):\n+        # Initialize with the directory containing the custom translation\n+        locale.init(['locale/da/LC_MESSAGES'], 'da', 'sphinx')\n+\n+        # Get the translation function for the 'sphinx' domain\n+        _ = locale.get_translation('sphinx')\n+\n+        # Check if the custom translations are ignored\n+        # The expected behavior is that the custom translations are not used\n+        # and the default translations are still in effect.\n+        self.assertEqual(_('Fig. %s') % 1, 'Fig. 1')  # Should be 'Foobar 1' if custom translation was used\n+        self.assertEqual(_('Listing %s') % 1, 'Listing 1')  # Should be 'Whatever 1' if custom translation was used\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_translation_ignore_inverted.py b/tests/test_translation_ignore_inverted.py\nnew file mode 100644\nindex 0000000..deafea1\n--- /dev/null\n+++ b/tests/test_translation_ignore_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sphinx import locale\n+\n+class TestTranslationIgnore(unittest.TestCase):\n+    def setUp(self):\n+        # Clear any existing translators to ensure a clean state\n+        locale.translators.clear()\n+\n+    def test_translation_ignore(self):\n+        # Initialize with the directory containing the custom translation\n+        locale.init(['locale/da/LC_MESSAGES'], 'da', 'sphinx')\n+\n+        # Get the translation function for the 'sphinx' domain\n+        _ = locale.get_translation('sphinx')\n+\n+        # Check if the custom translations are ignored\n+        # The expected behavior is that the custom translations are not used\n+        # and the default translations are still in effect.\n+        # Alter the assertions to fail when the bug is observed\n+        self.assertEqual(_('Fig. %s') % 1, 'Foobar 1', \"__BUG__HERE__\")  # Should be 'Foobar 1' if custom translation was used\n+        self.assertEqual(_('Listing %s') % 1, 'Whatever 1', \"__BUG__HERE__\")  # Should be 'Whatever 1' if custom translation was used\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}