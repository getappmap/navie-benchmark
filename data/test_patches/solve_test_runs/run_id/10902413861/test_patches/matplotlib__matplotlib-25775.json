{
  "edit_test_file": "lib/matplotlib/tests/test_legend.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiasing.py b/lib/matplotlib/tests/test_text_antialiasing.py\nnew file mode 100644\nindex 0000000..d03b3f9\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiasing.py\n@@ -0,0 +1,28 @@\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_text_antialiasing():\n+    \"\"\"\n+    Test to reproduce the issue where Text objects do not have\n+    get/set_antialiased methods and rely on global rcParams for antialiasing.\n+    \"\"\"\n+\n+    fig, ax = plt.subplots()\n+    text = ax.text(0.5, 0.5, 'Test', fontsize=20)\n+\n+    # Attempt to set antialiasing on the text object\n+    try:\n+        text.set_antialiased(True)\n+    except AttributeError as e:\n+        assert str(e) == \"'Text' object has no attribute 'set_antialiased'\"\n+\n+    # Attempt to get antialiasing state from the text object\n+    try:\n+        antialiased = text.get_antialiased()\n+    except AttributeError as e:\n+        assert str(e) == \"'Text' object has no attribute 'get_antialiased'\"\n+\n+    # Check if the global rcParams is being used instead\n+    assert plt.rcParams[\"text.antialiased\"] is True\n+\n+    plt.close(fig)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiasing_inverted.py b/lib/matplotlib/tests/test_text_antialiasing_inverted.py\nnew file mode 100644\nindex 0000000..da796be\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiasing_inverted.py\n@@ -0,0 +1,25 @@\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_text_antialiasing():\n+    \"\"\"\n+    Test to reproduce the issue where Text objects do not have\n+    get/set_antialiased methods and rely on global rcParams for antialiasing.\n+    This test should FAIL when the issue is observed.\n+    \"\"\"\n+\n+    fig, ax = plt.subplots()\n+    text = ax.text(0.5, 0.5, 'Test', fontsize=20)\n+\n+    # Attempt to set antialiasing on the text object\n+    with pytest.raises(AttributeError, match=\"__BUG__HERE__\"):\n+        text.set_antialiased(True)\n+\n+    # Attempt to get antialiasing state from the text object\n+    with pytest.raises(AttributeError, match=\"__BUG__HERE__\"):\n+        antialiased = text.get_antialiased()\n+\n+    # Check if the global rcParams is being used instead\n+    assert plt.rcParams[\"text.antialiased\"] is True\n+\n+    plt.close(fig)\n\\ No newline at end of file\n"
}