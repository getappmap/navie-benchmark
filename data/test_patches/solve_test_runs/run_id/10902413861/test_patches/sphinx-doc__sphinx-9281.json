{
  "edit_test_file": "tests/test_util_inspect.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_enum_rendering.py b/tests/test_ext_autodoc_enum_rendering.py\nnew file mode 100644\nindex 0000000..fe1036a\n--- /dev/null\n+++ b/tests/test_ext_autodoc_enum_rendering.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from sphinx.util import inspect\n+from enum import Enum\n+\n+class MyEnum(Enum):\n+    ValueA = 10\n+    ValueB = 20\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    pass\n+\n+class TestEnumRendering(unittest.TestCase):\n+    def test_ugly_enum_rendering(self):\n+        # Get the signature of the function\n+        sig = inspect.signature(ugly_enum_func)\n+        # Convert the signature to a string\n+        rendered_signature = inspect.stringify_signature(sig)\n+        # Check if the signature is rendered with the Enum value in an \"ugly\" way\n+        self.assertIn(\"<MyEnum.ValueA: 10>\", rendered_signature)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_enum_rendering_inverted.py b/tests/test_ext_autodoc_enum_rendering_inverted.py\nnew file mode 100644\nindex 0000000..03fc292\n--- /dev/null\n+++ b/tests/test_ext_autodoc_enum_rendering_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from sphinx.util import inspect\n+from enum import Enum\n+\n+class MyEnum(Enum):\n+    ValueA = 10\n+    ValueB = 20\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    pass\n+\n+class TestEnumRendering(unittest.TestCase):\n+    def test_ugly_enum_rendering(self):\n+        # Get the signature of the function\n+        sig = inspect.signature(ugly_enum_func)\n+        # Convert the signature to a string\n+        rendered_signature = inspect.stringify_signature(sig)\n+        # Check if the signature is rendered with the Enum value in an \"ugly\" way\n+        # The test should now fail if the bug is observed\n+        if \"<MyEnum.ValueA: 10>\" in rendered_signature:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}