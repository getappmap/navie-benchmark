{
  "edit_test_file": "sklearn/linear_model/tests/test_coordinate_descent.py",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_sparse_coder_lasso.py b/sklearn/linear_model/tests/test_sparse_coder_lasso.py\nnew file mode 100644\nindex 0000000..f03a687\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_sparse_coder_lasso.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+from sklearn.utils.testing import assert_warns\n+\n+def test_sparse_coder_lasso_max_iter_warning():\n+    # Test to reproduce the issue where SparseCoder does not expose max_iter for Lasso\n+    rng = np.random.RandomState(0)\n+    n_components, n_features = 12, 8\n+    V = rng.randn(n_components, n_features)\n+    V /= np.sum(V ** 2, axis=1)[:, np.newaxis]\n+    X = rng.randn(10, n_features)\n+\n+    # SparseCoder with lasso_cd algorithm, which uses Lasso internally\n+    coder = SparseCoder(dictionary=V, transform_algorithm='lasso_cd', transform_alpha=0.001)\n+\n+    # Expect a ConvergenceWarning due to max_iter not being exposed and set to a low value\n+    assert_warns(ConvergenceWarning, coder.transform, X)\n\\ No newline at end of file\n",
  "inverted_patch": null
}