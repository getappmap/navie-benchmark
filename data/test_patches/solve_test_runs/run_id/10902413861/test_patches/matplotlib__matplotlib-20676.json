{
  "edit_test_file": "lib/matplotlib/tests/test_backends_interactive.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_span_selector_axes_limits.py b/lib/matplotlib/tests/test_span_selector_axes_limits.py\nnew file mode 100644\nindex 0000000..69dd371\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_span_selector_axes_limits.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_expands_axes_limits(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        initial_xlim = ax.get_xlim()\n+\n+        # Create a SpanSelector with interactive=True\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)  # Non-blocking show for testing\n+\n+        # Check if the xlim has been expanded to include 0\n+        expanded_xlim = ax.get_xlim()\n+        self.assertTrue(expanded_xlim[0] <= 0, \"The xlim should include 0 due to the bug.\")\n+\n+        # Clean up\n+        plt.close(fig)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_span_selector_axes_limits_inverted.py b/lib/matplotlib/tests/test_span_selector_axes_limits_inverted.py\nnew file mode 100644\nindex 0000000..e913d77\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_span_selector_axes_limits_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n+class TestSpanSelectorAxesLimits(unittest.TestCase):\n+    def test_span_selector_expands_axes_limits(self):\n+        fig, ax = plt.subplots()\n+        ax.plot([10, 20], [10, 20])\n+        initial_xlim = ax.get_xlim()\n+\n+        # Create a SpanSelector with interactive=True\n+        ss = SpanSelector(ax, print, \"horizontal\", interactive=True)\n+        plt.show(block=False)  # Non-blocking show for testing\n+\n+        # Check if the xlim has been expanded to include 0\n+        expanded_xlim = ax.get_xlim()\n+        # Alter the assertion to fail when the bug is observed\n+        self.assertFalse(expanded_xlim[0] <= 0, \"__BUG__HERE__\")\n+\n+        # Clean up\n+        plt.close(fig)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}