{
  "edit_test_file": "tests/test_application.py",
  "test_patch": "diff --git a/tests/test_ext_source_read_include_files.py b/tests/test_ext_source_read_include_files.py\nnew file mode 100644\nindex 0000000..0e1bf1a\n--- /dev/null\n+++ b/tests/test_ext_source_read_include_files.py\n@@ -0,0 +1,78 @@\n+import os\n+import shutil\n+from sphinx.testing.util import SphinxTestApp\n+from io import StringIO\n+from pathlib import Path\n+import unittest\n+\n+class TestSourceReadIncludeFiles(unittest.TestCase):\n+    def setUp(self):\n+        # Setup directories and files\n+        self.srcdir = Path('test_source_read_include')\n+        self.srcdir.mkdir(exist_ok=True)\n+        (self.srcdir / 'conf.py').write_text(\"\"\"\n+import sys\n+import os\n+\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = [\n+    'my_extension'\n+]\n+\"\"\", encoding='utf8')\n+\n+        (self.srcdir / 'index.rst').write_text(\"\"\"\n+This is a test\n+==============\n+\n+.. include:: something-to-include.rst\n+\n+&REPLACE_ME;\n+\"\"\", encoding='utf8')\n+\n+        (self.srcdir / 'something-to-include.rst').write_text(\"\"\"\n+Testing\n+=======\n+\n+&REPLACE_ME;\n+\"\"\", encoding='utf8')\n+\n+        (self.srcdir / 'my_extension.py').write_text(\"\"\"\n+from sphinx.application import Sphinx\n+\n+__version__ = '1.0'\n+\n+def subst_vars_replace(app: Sphinx, docname, source):\n+    result = source[0]\n+    result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+    source[0] = result\n+\n+def setup(app: Sphinx):\n+    app.connect('source-read', subst_vars_replace)\n+    return dict(\n+        version=__version__,\n+        parallel_read_safe=True,\n+        parallel_write_safe=True\n+    )\n+\"\"\", encoding='utf8')\n+\n+    def tearDown(self):\n+        # Clean up the directory after test\n+        shutil.rmtree(self.srcdir)\n+\n+    def test_source_read_include_files(self):\n+        # Create a Sphinx test app\n+        app = SphinxTestApp(srcdir=self.srcdir, status=StringIO(), warning=StringIO())\n+        app.build()\n+\n+        # Read the output HTML\n+        output_html = (app.outdir / 'index.html').read_text(encoding='utf8')\n+\n+        # Check for the incorrect output\n+        self.assertIn('&amp;REPLACE_ME;', output_html)\n+        self.assertIn('REPLACED', output_html)\n+\n+        app.cleanup()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_source_read_include_files_inverted.py b/tests/test_ext_source_read_include_files_inverted.py\nnew file mode 100644\nindex 0000000..0539cd2\n--- /dev/null\n+++ b/tests/test_ext_source_read_include_files_inverted.py\n@@ -0,0 +1,79 @@\n+import os\n+import shutil\n+from sphinx.testing.util import SphinxTestApp\n+from io import StringIO\n+from pathlib import Path\n+import unittest\n+\n+class TestSourceReadIncludeFiles(unittest.TestCase):\n+    def setUp(self):\n+        # Setup directories and files\n+        self.srcdir = Path('test_source_read_include')\n+        self.srcdir.mkdir(exist_ok=True)\n+        (self.srcdir / 'conf.py').write_text(\"\"\"\n+import sys\n+import os\n+\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = [\n+    'my_extension'\n+]\n+\"\"\", encoding='utf8')\n+\n+        (self.srcdir / 'index.rst').write_text(\"\"\"\n+This is a test\n+==============\n+\n+.. include:: something-to-include.rst\n+\n+&REPLACE_ME;\n+\"\"\", encoding='utf8')\n+\n+        (self.srcdir / 'something-to-include.rst').write_text(\"\"\"\n+Testing\n+=======\n+\n+&REPLACE_ME;\n+\"\"\", encoding='utf8')\n+\n+        (self.srcdir / 'my_extension.py').write_text(\"\"\"\n+from sphinx.application import Sphinx\n+\n+__version__ = '1.0'\n+\n+def subst_vars_replace(app: Sphinx, docname, source):\n+    result = source[0]\n+    result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+    source[0] = result\n+\n+def setup(app: Sphinx):\n+    app.connect('source-read', subst_vars_replace)\n+    return dict(\n+        version=__version__,\n+        parallel_read_safe=True,\n+        parallel_write_safe=True\n+    )\n+\"\"\", encoding='utf8')\n+\n+    def tearDown(self):\n+        # Clean up the directory after test\n+        shutil.rmtree(self.srcdir)\n+\n+    def test_source_read_include_files(self):\n+        # Create a Sphinx test app\n+        app = SphinxTestApp(srcdir=self.srcdir, status=StringIO(), warning=StringIO())\n+        app.build()\n+\n+        # Read the output HTML\n+        output_html = (app.outdir / 'index.html').read_text(encoding='utf8')\n+\n+        # Check for the incorrect output\n+        if '&amp;REPLACE_ME;' in output_html:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertIn('REPLACED', output_html)\n+\n+        app.cleanup()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}