{
  "edit_test_file": "tests/admin_scripts/tests.py",
  "test_patch": "diff --git a/tests/admin_scripts/test_keyerror_migration_autodetector.py b/tests/admin_scripts/test_keyerror_migration_autodetector.py\nnew file mode 100644\nindex 0000000..86400bc\n--- /dev/null\n+++ b/tests/admin_scripts/test_keyerror_migration_autodetector.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import TestCase\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class KeyErrorMigrationAutodetectorTestCase(TestCase):\n+    def test_keyerror_with_custom_fk_field(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        with self.assertRaises(KeyError) as context:\n+            MigrationAutodetector(before, after)._detect_changes()\n+        \n+        self.assertEqual(str(context.exception), \"'to'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/admin_scripts/test_keyerror_migration_autodetector_inverted.py b/tests/admin_scripts/test_keyerror_migration_autodetector_inverted.py\nnew file mode 100644\nindex 0000000..ffc947b\n--- /dev/null\n+++ b/tests/admin_scripts/test_keyerror_migration_autodetector_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import TestCase\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class KeyErrorMigrationAutodetectorTestCase(TestCase):\n+    def test_keyerror_with_custom_fk_field(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        \n+        with self.assertRaises(KeyError) as context:\n+            MigrationAutodetector(before, after)._detect_changes()\n+        \n+        self.assertEqual(str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}