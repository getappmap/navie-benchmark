{
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "test_patch": "diff --git a/tests/model_fields/test_in_operator_jsonfield_issue.py b/tests/model_fields/test_in_operator_jsonfield_issue.py\nnew file mode 100644\nindex 0000000..2b2da6a\n--- /dev/null\n+++ b/tests/model_fields/test_in_operator_jsonfield_issue.py\n@@ -0,0 +1,28 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from .models import JSONModel\n+\n+class TestInOperatorJSONFieldIssue(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.objects = [\n+            JSONModel.objects.create(value={'key': 0}),\n+            JSONModel.objects.create(value={'key': 1}),\n+            JSONModel.objects.create(value={'key': 0}),\n+        ]\n+\n+    def test_in_operator_on_key_transform(self):\n+        # Using __in lookup on key transform\n+        first_filter = {'value__key__in': [0]}\n+        first_items = JSONModel.objects.filter(**first_filter)\n+        self.assertEqual(len(first_items), 0, \"Expected 0 items, but got {}\".format(len(first_items)))\n+\n+        # Using direct equality on key transform\n+        second_filter = {'value__key': 0}\n+        second_items = JSONModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 2, \"Expected 2 items, but got {}\".format(len(second_items)))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_fields/test_in_operator_jsonfield_issue_inverted.py b/tests/model_fields/test_in_operator_jsonfield_issue_inverted.py\nnew file mode 100644\nindex 0000000..3f07e24\n--- /dev/null\n+++ b/tests/model_fields/test_in_operator_jsonfield_issue_inverted.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from .models import JSONModel\n+\n+class TestInOperatorJSONFieldIssue(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.objects = [\n+            JSONModel.objects.create(value={'key': 0}),\n+            JSONModel.objects.create(value={'key': 1}),\n+            JSONModel.objects.create(value={'key': 0}),\n+        ]\n+\n+    def test_in_operator_on_key_transform(self):\n+        # Using __in lookup on key transform\n+        first_filter = {'value__key__in': [0]}\n+        first_items = JSONModel.objects.filter(**first_filter)\n+        # Altered to fail when the issue is observed\n+        self.assertEqual(len(first_items), 2, \"__BUG__HERE__\")\n+\n+        # Using direct equality on key transform\n+        second_filter = {'value__key': 0}\n+        second_items = JSONModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 2, \"Expected 2 items, but got {}\".format(len(second_items)))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}