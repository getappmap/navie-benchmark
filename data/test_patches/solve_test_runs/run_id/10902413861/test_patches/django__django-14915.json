{
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "test_patch": "diff --git a/tests/model_forms/test_modelchoiceiteratorvalue.py b/tests/model_forms/test_modelchoiceiteratorvalue.py\nnew file mode 100644\nindex 0000000..4502f2e\n--- /dev/null\n+++ b/tests/model_forms/test_modelchoiceiteratorvalue.py\n@@ -0,0 +1,26 @@\n+import json\n+from django import forms\n+from django.forms.widgets import Select\n+from django.test import TestCase\n+from .models import Category\n+\n+class CustomCheckboxSelectMultiple(Select):\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+        show_fields = {1: ['first_name', 'last_name']}\n+        if value in show_fields:\n+            context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+        return context\n+\n+class ModelChoiceIteratorValueHashableTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+\n+    def test_modelchoiceiteratorvalue_unhashable(self):\n+        field = forms.ModelChoiceField(Category.objects.all(), widget=CustomCheckboxSelectMultiple)\n+        with self.assertRaises(TypeError) as cm:\n+            field.widget.render('name', [])\n+        self.assertEqual(str(cm.exception), \"unhashable type: 'ModelChoiceIteratorValue'\")\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/model_forms/test_modelchoiceiteratorvalue_inverted.py b/tests/model_forms/test_modelchoiceiteratorvalue_inverted.py\nnew file mode 100644\nindex 0000000..a5c1959\n--- /dev/null\n+++ b/tests/model_forms/test_modelchoiceiteratorvalue_inverted.py\n@@ -0,0 +1,26 @@\n+import json\n+from django import forms\n+from django.forms.widgets import Select\n+from django.test import TestCase\n+from .models import Category\n+\n+class CustomCheckboxSelectMultiple(Select):\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+        if not value:\n+            return context\n+        show_fields = {1: ['first_name', 'last_name']}\n+        if value in show_fields:\n+            context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+        return context\n+\n+class ModelChoiceIteratorValueHashableTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n+\n+    def test_modelchoiceiteratorvalue_unhashable(self):\n+        field = forms.ModelChoiceField(Category.objects.all(), widget=CustomCheckboxSelectMultiple)\n+        with self.assertRaises(TypeError) as cm:\n+            field.widget.render('name', [])\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}