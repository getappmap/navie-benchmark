{
  "edit_test_file": "tests/backends/base/test_operations.py",
  "test_patch": "diff --git a/tests/backends/base/test_window_functions.py b/tests/backends/base/test_window_functions.py\nnew file mode 100644\nindex 0000000..597e028\n--- /dev/null\n+++ b/tests/backends/base/test_window_functions.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.db import models, connection\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagFunctionTest(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests.')\n+    def test_lag_with_decimalfield_crashes(self):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=10.1234)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=20.5678)\n+        \n+        w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+        queryset = LagTest.objects.all().annotate(w=w)\n+        \n+        with self.assertRaisesMessage(Exception, 'near \"OVER\": syntax error'):\n+            list(queryset)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/backends/base/test_window_functions_inverted.py b/tests/backends/base/test_window_functions_inverted.py\nnew file mode 100644\nindex 0000000..977b5eb\n--- /dev/null\n+++ b/tests/backends/base/test_window_functions_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.db import models, connection\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+from django.test import TestCase\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+class LagFunctionTest(TestCase):\n+    @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests.')\n+    def test_lag_with_decimalfield_crashes(self):\n+        LagTest.objects.create(modified='2023-01-01', data=1.0, amount=10.1234)\n+        LagTest.objects.create(modified='2023-01-02', data=2.0, amount=20.5678)\n+        \n+        w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+        queryset = LagTest.objects.all().annotate(w=w)\n+        \n+        with self.assertRaisesMessage(Exception, '__BUG__HERE__'):\n+            list(queryset)\n\\ No newline at end of file\n"
}