{
  "edit_test_file": "tests/test_ext_napoleon.py",
  "test_patch": "diff --git a/tests/test_ext_autodoc_classproperty.py b/tests/test_ext_autodoc_classproperty.py\nnew file mode 100644\nindex 0000000..6b450d3\n--- /dev/null\n+++ b/tests/test_ext_autodoc_classproperty.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from sphinx.ext.autodoc import Options\n+from sphinx.ext.napoleon import Config\n+from sphinx.application import Sphinx\n+from unittest import mock\n+\n+class BaseClass:\n+    @classmethod\n+    @property\n+    def baseclass_class_property(cls):\n+        \"\"\"Base class property.\"\"\"\n+        return \"property\"\n+\n+class TestClassPropertyDocumentation(unittest.TestCase):\n+    def test_class_property_documentation(self):\n+        app = mock.Mock(Sphinx)\n+        app.config = Config()\n+        options = Options()\n+        \n+        # Mock the method calls to simulate the Sphinx environment\n+        app.method_calls = [\n+            ('add_config_value', ('napoleon_google_docstring', True, 'env'), {}),\n+            ('add_config_value', ('napoleon_numpy_docstring', True, 'env'), {}),\n+            ('connect', ('autodoc-process-docstring', mock.ANY), {}),\n+            ('connect', ('autodoc-skip-member', mock.ANY), {})\n+        ]\n+        \n+        # Simulate the autodoc process\n+        lines = []\n+        from sphinx.ext.napoleon import _process_docstring\n+        _process_docstring(app, 'class', 'BaseClass.baseclass_class_property', \n+                           BaseClass.baseclass_class_property, options, lines)\n+        \n+        # Check if the docstring was processed (it should not be, due to the issue)\n+        self.assertEqual(lines, [], \"Docstring for class property should not be processed due to the issue.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_ext_autodoc_classproperty_inverted.py b/tests/test_ext_autodoc_classproperty_inverted.py\nnew file mode 100644\nindex 0000000..7291642\n--- /dev/null\n+++ b/tests/test_ext_autodoc_classproperty_inverted.py\n@@ -0,0 +1,39 @@\n+import unittest\n+from sphinx.ext.autodoc import Options\n+from sphinx.ext.napoleon import Config\n+from sphinx.application import Sphinx\n+from unittest import mock\n+\n+class BaseClass:\n+    @classmethod\n+    @property\n+    def baseclass_class_property(cls):\n+        \"\"\"Base class property.\"\"\"\n+        return \"property\"\n+\n+class TestClassPropertyDocumentation(unittest.TestCase):\n+    def test_class_property_documentation(self):\n+        app = mock.Mock(Sphinx)\n+        app.config = Config()\n+        options = Options()\n+        \n+        # Mock the method calls to simulate the Sphinx environment\n+        app.method_calls = [\n+            ('add_config_value', ('napoleon_google_docstring', True, 'env'), {}),\n+            ('add_config_value', ('napoleon_numpy_docstring', True, 'env'), {}),\n+            ('connect', ('autodoc-process-docstring', mock.ANY), {}),\n+            ('connect', ('autodoc-skip-member', mock.ANY), {})\n+        ]\n+        \n+        # Simulate the autodoc process\n+        lines = []\n+        from sphinx.ext.napoleon import _process_docstring\n+        _process_docstring(app, 'class', 'BaseClass.baseclass_class_property', \n+                           BaseClass.baseclass_class_property, options, lines)\n+        \n+        # Check if the docstring was processed (it should be, but due to the issue, it is not)\n+        if lines == []:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}