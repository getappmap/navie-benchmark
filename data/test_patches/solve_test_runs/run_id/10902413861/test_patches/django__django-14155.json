{
  "edit_test_file": "tests/view_tests/tests/test_debug.py",
  "test_patch": "diff --git a/tests/view_tests/tests/test_resolvermatch_partial.py b/tests/view_tests/tests/test_resolvermatch_partial.py\nnew file mode 100644\nindex 0000000..d1c84fa\n--- /dev/null\n+++ b/tests/view_tests/tests/test_resolvermatch_partial.py\n@@ -0,0 +1,13 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprTests(SimpleTestCase):\n+    def test_partial_function_repr(self):\n+        def sample_view():\n+            pass\n+\n+        partial_view = functools.partial(sample_view)\n+        resolver_match = ResolverMatch(partial_view, (), {})\n+        expected_repr = 'ResolverMatch(func=functools.partial, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+        self.assertEqual(repr(resolver_match), expected_repr)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/view_tests/tests/test_resolvermatch_partial_inverted.py b/tests/view_tests/tests/test_resolvermatch_partial_inverted.py\nnew file mode 100644\nindex 0000000..0005297\n--- /dev/null\n+++ b/tests/view_tests/tests/test_resolvermatch_partial_inverted.py\n@@ -0,0 +1,15 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprTests(SimpleTestCase):\n+    def test_partial_function_repr(self):\n+        def sample_view():\n+            pass\n+\n+        partial_view = functools.partial(sample_view)\n+        resolver_match = ResolverMatch(partial_view, (), {})\n+        # Altered expected_repr to trigger failure when the bug is observed\n+        expected_repr = 'ResolverMatch(func=sample_view, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+        if repr(resolver_match) != expected_repr:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}