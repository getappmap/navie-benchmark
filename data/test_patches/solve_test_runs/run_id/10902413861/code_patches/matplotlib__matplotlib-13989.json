{
  "instance_id": "matplotlib__matplotlib-13989",
  "edit_test_file": "lib/matplotlib/tests/test_rcparams.py",
  "code_patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 67b021f..2d9ab26 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -2614,6 +2614,8 @@ def hist(\n         orientation='vertical', rwidth=None, log=False, color=None,\n         label=None, stacked=False, normed=None, *, data=None,\n         **kwargs):\n+    if density and range is not None:\n+        kwargs['range'] = range\n     return gca().hist(\n         x, bins=bins, range=range, density=density, weights=weights,\n         cumulative=cumulative, bottom=bottom, histtype=histtype,\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_hist_density.py b/lib/matplotlib/tests/test_hist_density.py\nnew file mode 100644\nindex 0000000..d032183\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hist_density.py\n@@ -0,0 +1,18 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestHistDensityRange(unittest.TestCase):\n+    def test_hist_density_range(self):\n+        # Generate random data\n+        data = np.random.rand(10)\n+        \n+        # Create a histogram with density=True and a specified range\n+        _, bins, _ = plt.hist(data, bins=\"auto\", range=(0, 1), density=True)\n+        \n+        # Assert that the first bin edge is 0 and the last bin edge is 1\n+        self.assertNotEqual(bins[0], 0, \"The first bin edge should not be 0\")\n+        self.assertNotEqual(bins[-1], 1, \"The last bin edge should not be 1\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_hist_density_inverted.py b/lib/matplotlib/tests/test_hist_density_inverted.py\nnew file mode 100644\nindex 0000000..461c151\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_hist_density_inverted.py\n@@ -0,0 +1,19 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestHistDensityRange(unittest.TestCase):\n+    def test_hist_density_range(self):\n+        # Generate random data\n+        data = np.random.rand(10)\n+        \n+        # Create a histogram with density=True and a specified range\n+        _, bins, _ = plt.hist(data, bins=\"auto\", range=(0, 1), density=True)\n+        \n+        # Assert that the first bin edge is 0 and the last bin edge is 1\n+        # This assertion should fail if the bug is present\n+        self.assertEqual(bins[0], 0, \"__BUG__HERE__\")\n+        self.assertEqual(bins[-1], 1, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2208963,
  "num_received_chars": 59272,
  "elapsed_time": 820.0514080524445,
  "lint_repair_count": 12,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}