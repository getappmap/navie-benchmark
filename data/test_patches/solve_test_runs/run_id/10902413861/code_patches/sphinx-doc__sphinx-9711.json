{
  "instance_id": "sphinx-doc__sphinx-9711",
  "edit_test_file": "tests/test_config.py",
  "code_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 7ec6c85..48a513b 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -8,12 +8,13 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n-from typing import TYPE_CHECKING, Any, Dict\n+from typing import TYPE_CHECKING, Any, Dict, Tuple\n \n from sphinx.config import Config\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n from sphinx.util import logging\n+import re\n \n if TYPE_CHECKING:\n     from sphinx.application import Sphinx\n@@ -51,13 +52,30 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or not is_version_compatible(extension.version, reqversion):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n                                           (extname, reqversion, extension.version))\n \n \n+def is_version_compatible(current_version: str, required_version: str) -> bool:\n+    \"\"\"Compare two version strings using semantic versioning.\"\"\"\n+    def parse_version(version: str) -> Tuple[int, int, int, str]:\n+        match = re.match(r'(\\d+)\\.(\\d+)\\.(\\d+)(.*)', version)\n+        if not match:\n+            return (0, 0, 0, '')\n+        major, minor, patch, suffix = match.groups()\n+        return (int(major), int(minor), int(patch), suffix)\n+\n+    current = parse_version(current_version)\n+    required = parse_version(required_version)\n+\n+    if current[:3] != required[:3]:\n+        return current[:3] > required[:3]\n+    return current[3] >= required[3]\n+\n+\n def setup(app: \"Sphinx\") -> Dict[str, Any]:\n     app.connect('config-inited', verify_needs_extensions, priority=800)\n \n",
  "test_patch": "diff --git a/tests/test_needs_extensions_version_check.py b/tests/test_needs_extensions_version_check.py\nnew file mode 100644\nindex 0000000..d7ef6d3\n--- /dev/null\n+++ b/tests/test_needs_extensions_version_check.py\n@@ -0,0 +1,26 @@\n+import unittest\n+from unittest import mock\n+from sphinx.config import Config\n+from sphinx.errors import VersionRequirementError\n+from sphinx.extension import verify_needs_extensions\n+\n+class TestNeedsExtensionsVersionCheck(unittest.TestCase):\n+    @mock.patch(\"sphinx.application.Sphinx\")\n+    def test_needs_extensions_version_check(self, mock_sphinx):\n+        # Mock the Sphinx application and its extensions\n+        mock_app = mock_sphinx.return_value\n+        mock_app.extensions = {\n+            'sphinx_gallery.gen_gallery': mock.Mock(version='0.10.0')\n+        }\n+\n+        # Create a config with needs_extensions specifying a lower version\n+        config = Config({'needs_extensions': {'sphinx_gallery.gen_gallery': '0.6.0'}})\n+\n+        # Verify that no VersionRequirementError is raised\n+        try:\n+            verify_needs_extensions(mock_app, config)\n+        except VersionRequirementError as e:\n+            self.fail(f\"VersionRequirementError was raised: {e}\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_needs_extensions_version_check_inverted.py b/tests/test_needs_extensions_version_check_inverted.py\nnew file mode 100644\nindex 0000000..ea16589\n--- /dev/null\n+++ b/tests/test_needs_extensions_version_check_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from unittest import mock\n+from sphinx.config import Config\n+from sphinx.errors import VersionRequirementError\n+from sphinx.extension import verify_needs_extensions\n+\n+class TestNeedsExtensionsVersionCheck(unittest.TestCase):\n+    @mock.patch(\"sphinx.application.Sphinx\")\n+    def test_needs_extensions_version_check(self, mock_sphinx):\n+        # Mock the Sphinx application and its extensions\n+        mock_app = mock_sphinx.return_value\n+        mock_app.extensions = {\n+            'sphinx_gallery.gen_gallery': mock.Mock(version='0.10.0')\n+        }\n+\n+        # Create a config with needs_extensions specifying a lower version\n+        config = Config({'needs_extensions': {'sphinx_gallery.gen_gallery': '0.6.0'}})\n+\n+        # Verify that a VersionRequirementError is raised due to string comparison\n+        with self.assertRaises(VersionRequirementError, msg=\"__BUG__HERE__\"):\n+            verify_needs_extensions(mock_app, config)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1586061,
  "num_received_chars": 71556,
  "elapsed_time": 727.513968706131,
  "lint_repair_count": 7,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}