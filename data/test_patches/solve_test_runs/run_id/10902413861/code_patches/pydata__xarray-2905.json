{
  "instance_id": "pydata__xarray-2905",
  "edit_test_file": "xarray/tests/test_variable.py",
  "code_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 45553eb..7d2d69f 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -855,7 +855,10 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n+            if hasattr(value, 'values') and self.dtype != object:\n+                value = as_compatible_data(value.values)\n+            else:\n+                value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError(\n                     \"shape mismatch: value array of shape %s could not be \"\n",
  "test_patch": "diff --git a/xarray/tests/test_variable_coercion.py b/xarray/tests/test_variable_coercion.py\nnew file mode 100644\nindex 0000000..80351cc\n--- /dev/null\n+++ b/xarray/tests/test_variable_coercion.py\n@@ -0,0 +1,18 @@\n+import xarray as xr\n+import pytest\n+\n+class HasValues:\n+    values = 5\n+\n+def test_variable_setitem_coercion():\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    # Assign a set to the first element\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    # Assign an instance of HasValues to the first element\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Check the expected behavior\n+    assert isinstance(good_indexed.values[0], set), \"Expected a set in good_indexed\"\n+    assert not isinstance(bad_indexed.values[0], HasValues), \"Expected coercion in bad_indexed\"\n+    assert isinstance(bad_indexed.values[0], int), \"Expected an integer in bad_indexed\"\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_variable_coercion_inverted.py b/xarray/tests/test_variable_coercion_inverted.py\nnew file mode 100644\nindex 0000000..486ecc7\n--- /dev/null\n+++ b/xarray/tests/test_variable_coercion_inverted.py\n@@ -0,0 +1,17 @@\n+import xarray as xr\n+import pytest\n+\n+class HasValues:\n+    values = 5\n+\n+def test_variable_setitem_coercion():\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    # Assign a set to the first element\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    # Assign an instance of HasValues to the first element\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Check the expected behavior\n+    assert isinstance(good_indexed.values[0], set), \"Expected a set in good_indexed\"\n+    assert isinstance(bad_indexed.values[0], HasValues), \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 3143990,
  "num_received_chars": 47370,
  "elapsed_time": 791.3887214660645,
  "lint_repair_count": 6,
  "test_generation_attempts": 2,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}