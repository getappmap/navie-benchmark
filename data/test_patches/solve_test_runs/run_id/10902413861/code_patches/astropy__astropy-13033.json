{
  "instance_id": "astropy__astropy-13033",
  "edit_test_file": null,
  "code_patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35..f471655 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -69,16 +69,20 @@ class BaseTimeSeries(QTable):\n             plural = 's' if len(required_columns) > 1 else ''\n \n             if not self._required_columns_relax and len(self.colnames) == 0:\n-\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n+                missing_columns = required_columns\n+                raise ValueError(\"{} object is invalid - expected columns '{}' \"\n+                                 \"but time series has no columns\"\n+                                 .format(self.__class__.__name__, \"', '\".join(missing_columns)))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n-\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                incorrect_order = [col for col in self.colnames[:len(required_columns)] if col not in required_columns]\n+                error_message = \"{} object is invalid - expected columns '{}'\".format(self.__class__.__name__, \"', '\".join(required_columns))\n+                if missing_columns:\n+                    error_message += \", missing columns '{}'\".format(\"', '\".join(missing_columns))\n+                if incorrect_order:\n+                    error_message += \", columns out of order '{}'\".format(\"', '\".join(incorrect_order))\n+                raise ValueError(error_message)\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 388376,
  "num_received_chars": 6160,
  "elapsed_time": 71.09530639648438,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}