{
  "instance_id": "django__django-14017",
  "edit_test_file": "tests/queries/test_q.py",
  "code_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa..3249b48 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,7 +40,8 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        from django.db.models import Exists\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n \n         # If the other Q() is empty, ignore it and just use `self`.\n@@ -64,6 +65,9 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n",
  "test_patch": "diff --git a/tests/queries/test_q_exists_commutativity.py b/tests/queries/test_q_exists_commutativity.py\nnew file mode 100644\nindex 0000000..f605fbb\n--- /dev/null\n+++ b/tests/queries/test_q_exists_commutativity.py\n@@ -0,0 +1,12 @@\n+from django.db.models import Exists, Q\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+# Mock Product model for testing purposes\n+class Product(models.Model):\n+    name = models.CharField(max_length=255)\n+\n+class QExistsCommutativityTests(SimpleTestCase):\n+    def test_q_and_exists_raises_type_error(self):\n+        with self.assertRaises(TypeError):\n+            Q() & Exists(Product.objects.all())\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_q_exists_commutativity_inverted.py b/tests/queries/test_q_exists_commutativity_inverted.py\nnew file mode 100644\nindex 0000000..f59c857\n--- /dev/null\n+++ b/tests/queries/test_q_exists_commutativity_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db.models import Exists, Q\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+# Mock Product model for testing purposes\n+class Product(models.Model):\n+    name = models.CharField(max_length=255)\n+\n+class QExistsCommutativityTests(SimpleTestCase):\n+    def test_q_and_exists_raises_type_error(self):\n+        try:\n+            Q() & Exists(Product.objects.all())\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 482110,
  "num_received_chars": 13072,
  "elapsed_time": 115.84707427024841,
  "lint_repair_count": 1,
  "test_generation_attempts": 2,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}