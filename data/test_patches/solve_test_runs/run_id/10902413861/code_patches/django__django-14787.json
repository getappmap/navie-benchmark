{
  "instance_id": "django__django-14787",
  "edit_test_file": "tests/decorators/tests.py",
  "code_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d0..09046f6 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -16,7 +16,7 @@ def _update_method_wrapper(_wrapper, decorator):\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    update_wrapper(_wrapper, dummy, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'))\n \n \n def _multi_decorate(decorators, method):\n",
  "test_patch": "diff --git a/tests/decorators/test_method_decorator_preserve_wrapper.py b/tests/decorators/test_method_decorator_preserve_wrapper.py\nnew file mode 100644\nindex 0000000..e5204c2\n--- /dev/null\n+++ b/tests/decorators/test_method_decorator_preserve_wrapper.py\n@@ -0,0 +1,31 @@\n+from unittest import TestCase\n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+import logging\n+\n+# Setup a basic logger\n+logger = logging.getLogger(__name__)\n+\n+def logger_decorator(func):\n+    @wraps(func)\n+    def inner(*args, **kwargs):\n+        try:\n+            result = func(*args, **kwargs)\n+        except Exception as e:\n+            result = str(e)\n+        finally:\n+            logger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+        return result\n+    return inner\n+\n+class TestMethodDecoratorPreserveWrapper(TestCase):\n+    def test_method_decorator_preserve_wrapper(self):\n+        class Test:\n+            @method_decorator(logger_decorator)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        with self.assertRaises(AttributeError) as context:\n+            Test().hello_world()\n+\n+        self.assertIn(\"'functools.partial' object has no attribute '__name__'\", str(context.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py b/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py\nnew file mode 100644\nindex 0000000..dc33598\n--- /dev/null\n+++ b/tests/decorators/test_method_decorator_preserve_wrapper_inverted.py\n@@ -0,0 +1,32 @@\n+from unittest import TestCase\n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+import logging\n+\n+# Setup a basic logger\n+logger = logging.getLogger(__name__)\n+\n+def logger_decorator(func):\n+    @wraps(func)\n+    def inner(*args, **kwargs):\n+        try:\n+            result = func(*args, **kwargs)\n+        except Exception as e:\n+            result = str(e)\n+        finally:\n+            logger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+        return result\n+    return inner\n+\n+class TestMethodDecoratorPreserveWrapper(TestCase):\n+    def test_method_decorator_preserve_wrapper(self):\n+        class Test:\n+            @method_decorator(logger_decorator)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        with self.assertRaises(AttributeError) as context:\n+            Test().hello_world()\n+\n+        # Altered the assertion to fail when the bug is observed\n+        self.assertIn(\"__BUG__HERE__\", str(context.exception))\n\\ No newline at end of file\n",
  "num_sent_chars": 1491626,
  "num_received_chars": 69356,
  "elapsed_time": 660.9360229969025,
  "lint_repair_count": 2,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}