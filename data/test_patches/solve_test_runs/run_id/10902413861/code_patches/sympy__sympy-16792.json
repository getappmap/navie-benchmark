{
  "instance_id": "sympy__sympy-16792",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb1..47c7b0d 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -441,9 +441,9 @@ def _prototype_arg(self, arg):\n         np_types = {'double': 'np.double_t',\n                     'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, OutputArgument):\n             self._need_numpy = True\n-            ndim = len(arg.dimensions)\n+            ndim = len(arg.dimensions) if arg.dimensions else 1\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n@@ -451,8 +451,8 @@ def _prototype_arg(self, arg):\n \n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n-        if arg.dimensions:\n-            shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n+        if arg.dimensions or isinstance(arg, OutputArgument):\n+            shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')' if arg.dimensions else '(1)'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n         else:\n             return proto + \" = 0\"\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1036382,
  "num_received_chars": 22600,
  "elapsed_time": 197.4902629852295,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}