{
  "instance_id": "matplotlib__matplotlib-25311",
  "edit_test_file": null,
  "code_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex ff6abdb..c74cb2a 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -1202,8 +1202,23 @@ class Legend(Artist):\n             if self._draggable is not None:\n                 self._draggable.disconnect()\n             self._draggable = None\n+\n+        # Ensure that the draggable state does not include non-pickleable elements\n+        self._draggable_state = state\n         return self._draggable\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove the non-pickleable _draggable attribute\n+        state['_draggable'] = None\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        # Restore the draggable state without non-pickleable elements\n+        if self._draggable_state:\n+            self.set_draggable(True)\n+\n     def get_draggable(self):\n         \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n         return self._draggable is not None\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1721339,
  "num_received_chars": 60010,
  "elapsed_time": 722.7589023113251,
  "lint_repair_count": 2,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}