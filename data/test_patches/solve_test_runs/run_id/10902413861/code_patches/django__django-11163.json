{
  "instance_id": "django__django-11163",
  "edit_test_file": "tests/forms_tests/tests/test_forms.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex d157c29..5edbbd3 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\n",
  "test_patch": "diff --git a/tests/forms_tests/tests/test_model_to_dict.py b/tests/forms_tests/tests/test_model_to_dict.py\nnew file mode 100644\nindex 0000000..b7c9475\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_model_to_dict.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.forms.models import model_to_dict\n+from django.db import models\n+\n+# Define a simple model for testing\n+class SimpleModel(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.IntegerField()\n+\n+class ModelToDictTestCase(unittest.TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        # Create an instance of the model\n+        instance = SimpleModel(field1='test', field2=123)\n+\n+        # Call model_to_dict with an empty list of fields\n+        result = model_to_dict(instance, fields=[])\n+\n+        # Assert that the result is not an empty dictionary, which is the incorrect behavior\n+        self.assertNotEqual(result, {}, \"model_to_dict should return all fields when fields=[]\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/tests/test_model_to_dict_inverted.py b/tests/forms_tests/tests/test_model_to_dict_inverted.py\nnew file mode 100644\nindex 0000000..743b150\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_model_to_dict_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from django.forms.models import model_to_dict\n+from django.db import models\n+\n+# Define a simple model for testing\n+class SimpleModel(models.Model):\n+    field1 = models.CharField(max_length=100)\n+    field2 = models.IntegerField()\n+\n+class ModelToDictTestCase(unittest.TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        # Create an instance of the model\n+        instance = SimpleModel(field1='test', field2=123)\n+\n+        # Call model_to_dict with an empty list of fields\n+        result = model_to_dict(instance, fields=[])\n+\n+        # Assert that the result is an empty dictionary, which is the correct behavior\n+        # This assertion should fail if the bug is present\n+        self.assertEqual(result, {}, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 867109,
  "num_received_chars": 11411,
  "elapsed_time": 104.20410966873169,
  "lint_repair_count": 0,
  "test_generation_attempts": 4,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}