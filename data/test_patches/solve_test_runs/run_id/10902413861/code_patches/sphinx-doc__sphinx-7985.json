{
  "instance_id": "sphinx-doc__sphinx-7985",
  "edit_test_file": "tests/test_setup_command.py",
  "code_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd53170..a1477e4 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -131,6 +131,13 @@ class CheckExternalLinksBuilder(Builder):\n \n             return {}\n \n+        def check_local_uri() -> Tuple[str, str, int]:\n+            # Check if the URI is a local document reference\n+            if uri in self.env.all_docs:\n+                return 'working', '', 0\n+            else:\n+                return 'broken', 'Local document not found', 0\n+\n         def check_uri() -> Tuple[str, str, int]:\n             # split off anchor\n             if '#' in uri:\n@@ -213,7 +220,12 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check local links\n+                status, info, code = check_local_uri()\n+                if status == 'working':\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', info, 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n",
  "test_patch": "diff --git a/tests/test_linkcheck_local_links.py b/tests/test_linkcheck_local_links.py\nnew file mode 100644\nindex 0000000..2566bb5\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links.py\n@@ -0,0 +1,46 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckLocalLinks(TestCase):\n+    def setUp(self):\n+        # Create a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-local')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_linkcheck_local_links(self):\n+        with cd(self.test_dir):\n+            # Run the Sphinx linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check that the local link is reported as '-local-'\n+            self.assertIn(b'-local-   doesntexist', out)\n+            # Check that the external link is reported as 'broken'\n+            self.assertIn(b'broken    https://lkfqhlkghflkhs', out)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_linkcheck_local_links_inverted.py b/tests/test_linkcheck_local_links_inverted.py\nnew file mode 100644\nindex 0000000..57a50a9\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links_inverted.py\n@@ -0,0 +1,47 @@\n+import os\n+import subprocess\n+import sys\n+from unittest import TestCase\n+from sphinx.util.osutil import cd\n+\n+class TestLinkcheckLocalLinks(TestCase):\n+    def setUp(self):\n+        # Create a temporary directory for the test\n+        self.test_dir = os.path.join(os.path.dirname(__file__), 'test-linkcheck-local')\n+        os.makedirs(self.test_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project\n+        with open(os.path.join(self.test_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.test_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.test_dir):\n+            for root, dirs, files in os.walk(self.test_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.test_dir)\n+\n+    def test_linkcheck_local_links(self):\n+        with cd(self.test_dir):\n+            # Run the Sphinx linkcheck builder\n+            command = [sys.executable, '-m', 'sphinx', '-b', 'linkcheck', '.', '_build']\n+            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            out, err = proc.communicate()\n+\n+            # Check that the local link is reported as '-local-'\n+            if b'-local-   doesntexist' in out:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            # Check that the external link is reported as 'broken'\n+            self.assertIn(b'broken    https://lkfqhlkghflkhs', out)\n\\ No newline at end of file\n",
  "num_sent_chars": 1033687,
  "num_received_chars": 24033,
  "elapsed_time": 209.75689578056335,
  "lint_repair_count": 0,
  "test_generation_attempts": 7,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}