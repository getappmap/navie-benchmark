{
  "instance_id": "django__django-11333",
  "edit_test_file": "tests/urlpatterns_reverse/tests.py",
  "code_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 247e368..b591d66 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -67,6 +67,11 @@ class ResolverMatch:\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n+    return _get_cached_resolver(urlconf)\n+\n+\n+@functools.lru_cache(maxsize=None)\n+def _get_cached_resolver(urlconf):\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n \n",
  "test_patch": "diff --git a/tests/urlpatterns_reverse/test_urlresolver_optimization.py b/tests/urlpatterns_reverse/test_urlresolver_optimization.py\nnew file mode 100644\nindex 0000000..6d928ff\n--- /dev/null\n+++ b/tests/urlpatterns_reverse/test_urlresolver_optimization.py\n@@ -0,0 +1,38 @@\n+\"\"\"\n+Test case to reproduce the issue of multiple URLResolvers being constructed.\n+\"\"\"\n+import threading\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import get_resolver, reverse\n+from django.core.exceptions import ImproperlyConfigured\n+\n+class URLResolverOptimizationTest(SimpleTestCase):\n+    def test_multiple_urlresolvers_construction(self):\n+        \"\"\"\n+        Test to reproduce the issue where multiple URLResolvers are constructed\n+        due to calls to get_resolver before and after set_urlconf is called.\n+        \"\"\"\n+        # Call reverse before any request is handled, which will call get_resolver\n+        # with None, leading to the construction of a URLResolver.\n+        try:\n+            reverse('nonexistent-view')\n+        except Exception:\n+            pass\n+\n+        # Simulate handling a request by setting the URLconf.\n+        with override_settings(ROOT_URLCONF='urlpatterns_reverse.urls'):\n+            # Call reverse again, which will call get_resolver with the actual\n+            # ROOT_URLCONF, potentially constructing another URLResolver.\n+            try:\n+                reverse('nonexistent-view')\n+            except Exception:\n+                pass\n+\n+        # Check if multiple URLResolvers were constructed by comparing the\n+        # resolver instances before and after setting the URLconf.\n+        resolver_before = get_resolver(None)\n+        resolver_after = get_resolver('urlpatterns_reverse.urls')\n+\n+        # Assert that the resolver instances are different, indicating multiple\n+        # constructions.\n+        self.assertNotEqual(resolver_before, resolver_after, \"Multiple URLResolvers were constructed.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/urlpatterns_reverse/test_urlresolver_optimization_inverted.py b/tests/urlpatterns_reverse/test_urlresolver_optimization_inverted.py\nnew file mode 100644\nindex 0000000..6a39732\n--- /dev/null\n+++ b/tests/urlpatterns_reverse/test_urlresolver_optimization_inverted.py\n@@ -0,0 +1,39 @@\n+\"\"\"\n+Test case to reproduce the issue of multiple URLResolvers being constructed.\n+\"\"\"\n+import threading\n+from django.test import SimpleTestCase, override_settings\n+from django.urls import get_resolver, reverse\n+from django.core.exceptions import ImproperlyConfigured\n+\n+class URLResolverOptimizationTest(SimpleTestCase):\n+    def test_multiple_urlresolvers_construction(self):\n+        \"\"\"\n+        Test to reproduce the issue where multiple URLResolvers are constructed\n+        due to calls to get_resolver before and after set_urlconf is called.\n+        \"\"\"\n+        # Call reverse before any request is handled, which will call get_resolver\n+        # with None, leading to the construction of a URLResolver.\n+        try:\n+            reverse('nonexistent-view')\n+        except Exception:\n+            pass\n+\n+        # Simulate handling a request by setting the URLconf.\n+        with override_settings(ROOT_URLCONF='urlpatterns_reverse.urls'):\n+            # Call reverse again, which will call get_resolver with the actual\n+            # ROOT_URLCONF, potentially constructing another URLResolver.\n+            try:\n+                reverse('nonexistent-view')\n+            except Exception:\n+                pass\n+\n+        # Check if multiple URLResolvers were constructed by comparing the\n+        # resolver instances before and after setting the URLconf.\n+        resolver_before = get_resolver(None)\n+        resolver_after = get_resolver('urlpatterns_reverse.urls')\n+\n+        # Assert that the resolver instances are the same, indicating no multiple\n+        # constructions. If they are different, raise an error.\n+        if resolver_before != resolver_after:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1777978,
  "num_received_chars": 48992,
  "elapsed_time": 412.03947710990906,
  "lint_repair_count": 5,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}