{
  "instance_id": "sphinx-doc__sphinx-9461",
  "edit_test_file": "tests/test_ext_napoleon.py",
  "code_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex d79de15..24d35ae 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -718,10 +718,11 @@ class PyMethod(PyObject):\n         'final': directives.flag,\n         'property': directives.flag,\n         'staticmethod': directives.flag,\n+        'classmethodproperty': directives.flag,  # New option for combined decorator\n     })\n \n     def needs_arglist(self) -> bool:\n-        if 'property' in self.options:\n+        if 'property' in self.options or 'classmethodproperty' in self.options:\n             return False\n         else:\n             return True\n@@ -734,9 +735,11 @@ class PyMethod(PyObject):\n             prefix.append('abstract')\n         if 'async' in self.options:\n             prefix.append('async')\n-        if 'classmethod' in self.options:\n+        if 'classmethodproperty' in self.options:\n+            prefix.append('classmethod property')\n+        elif 'classmethod' in self.options:\n             prefix.append('classmethod')\n-        if 'property' in self.options:\n+        elif 'property' in self.options:\n             prefix.append('property')\n         if 'staticmethod' in self.options:\n             prefix.append('static')\n@@ -758,7 +761,9 @@ class PyMethod(PyObject):\n             else:\n                 return '%s()' % name\n \n-        if 'classmethod' in self.options:\n+        if 'classmethodproperty' in self.options:\n+            return _('%s() (%s class property)') % (methname, clsname)\n+        elif 'classmethod' in self.options:\n             return _('%s() (%s class method)') % (methname, clsname)\n         elif 'property' in self.options:\n             return _('%s() (%s property)') % (methname, clsname)\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_classproperty.py b/tests/test_ext_autodoc_classproperty.py\nnew file mode 100644\nindex 0000000..6b450d3\n--- /dev/null\n+++ b/tests/test_ext_autodoc_classproperty.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from sphinx.ext.autodoc import Options\n+from sphinx.ext.napoleon import Config\n+from sphinx.application import Sphinx\n+from unittest import mock\n+\n+class BaseClass:\n+    @classmethod\n+    @property\n+    def baseclass_class_property(cls):\n+        \"\"\"Base class property.\"\"\"\n+        return \"property\"\n+\n+class TestClassPropertyDocumentation(unittest.TestCase):\n+    def test_class_property_documentation(self):\n+        app = mock.Mock(Sphinx)\n+        app.config = Config()\n+        options = Options()\n+        \n+        # Mock the method calls to simulate the Sphinx environment\n+        app.method_calls = [\n+            ('add_config_value', ('napoleon_google_docstring', True, 'env'), {}),\n+            ('add_config_value', ('napoleon_numpy_docstring', True, 'env'), {}),\n+            ('connect', ('autodoc-process-docstring', mock.ANY), {}),\n+            ('connect', ('autodoc-skip-member', mock.ANY), {})\n+        ]\n+        \n+        # Simulate the autodoc process\n+        lines = []\n+        from sphinx.ext.napoleon import _process_docstring\n+        _process_docstring(app, 'class', 'BaseClass.baseclass_class_property', \n+                           BaseClass.baseclass_class_property, options, lines)\n+        \n+        # Check if the docstring was processed (it should not be, due to the issue)\n+        self.assertEqual(lines, [], \"Docstring for class property should not be processed due to the issue.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_classproperty_inverted.py b/tests/test_ext_autodoc_classproperty_inverted.py\nnew file mode 100644\nindex 0000000..7291642\n--- /dev/null\n+++ b/tests/test_ext_autodoc_classproperty_inverted.py\n@@ -0,0 +1,39 @@\n+import unittest\n+from sphinx.ext.autodoc import Options\n+from sphinx.ext.napoleon import Config\n+from sphinx.application import Sphinx\n+from unittest import mock\n+\n+class BaseClass:\n+    @classmethod\n+    @property\n+    def baseclass_class_property(cls):\n+        \"\"\"Base class property.\"\"\"\n+        return \"property\"\n+\n+class TestClassPropertyDocumentation(unittest.TestCase):\n+    def test_class_property_documentation(self):\n+        app = mock.Mock(Sphinx)\n+        app.config = Config()\n+        options = Options()\n+        \n+        # Mock the method calls to simulate the Sphinx environment\n+        app.method_calls = [\n+            ('add_config_value', ('napoleon_google_docstring', True, 'env'), {}),\n+            ('add_config_value', ('napoleon_numpy_docstring', True, 'env'), {}),\n+            ('connect', ('autodoc-process-docstring', mock.ANY), {}),\n+            ('connect', ('autodoc-skip-member', mock.ANY), {})\n+        ]\n+        \n+        # Simulate the autodoc process\n+        lines = []\n+        from sphinx.ext.napoleon import _process_docstring\n+        _process_docstring(app, 'class', 'BaseClass.baseclass_class_property', \n+                           BaseClass.baseclass_class_property, options, lines)\n+        \n+        # Check if the docstring was processed (it should be, but due to the issue, it is not)\n+        if lines == []:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2274640,
  "num_received_chars": 92357,
  "elapsed_time": 942.8777778148651,
  "lint_repair_count": 5,
  "test_generation_attempts": 7,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}