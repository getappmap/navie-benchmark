{
  "instance_id": "django__django-13346",
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "code_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1be..f2e6bc1 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -388,6 +388,28 @@ class KeyTransformExact(JSONExact):\n                 lhs = 'JSON_TYPE(%s, %%s)' % lhs\n         return lhs, lhs_params\n \n+\n+class KeyTransformIn(lookups.In):\n+    def process_lhs(self, compiler, connection):\n+        lhs, lhs_params = super().process_lhs(compiler, connection)\n+        if connection.vendor == 'mysql':\n+            lhs = 'JSON_UNQUOTE(%s)' % lhs\n+        elif connection.vendor == 'oracle':\n+            lhs = 'JSON_VALUE(%s, \\'$\\')' % lhs\n+        elif connection.vendor == 'sqlite':\n+            lhs = 'JSON_EXTRACT(%s, \\'$\\')' % lhs\n+        return lhs, lhs_params\n+\n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor == 'mysql':\n+            rhs = ', '.join(['JSON_UNQUOTE(%s)'] * len(rhs_params))\n+        elif connection.vendor == 'oracle':\n+            rhs = ', '.join(['JSON_VALUE(%s, \\'$\\')'] * len(rhs_params))\n+        elif connection.vendor == 'sqlite':\n+            rhs = ', '.join(['JSON_EXTRACT(%s, \\'$\\')'] * len(rhs_params))\n+        return rhs, rhs_params\n+\n     def process_rhs(self, compiler, connection):\n         if isinstance(self.rhs, KeyTransform):\n             return super(lookups.Exact, self).process_rhs(compiler, connection)\n@@ -485,6 +507,7 @@ KeyTransform.register_lookup(KeyTransformIsNull)\n KeyTransform.register_lookup(KeyTransformIContains)\n KeyTransform.register_lookup(KeyTransformStartsWith)\n KeyTransform.register_lookup(KeyTransformIStartsWith)\n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformEndsWith)\n KeyTransform.register_lookup(KeyTransformIEndsWith)\n KeyTransform.register_lookup(KeyTransformRegex)\n",
  "test_patch": "diff --git a/tests/model_fields/test_in_operator_jsonfield_issue.py b/tests/model_fields/test_in_operator_jsonfield_issue.py\nnew file mode 100644\nindex 0000000..2b2da6a\n--- /dev/null\n+++ b/tests/model_fields/test_in_operator_jsonfield_issue.py\n@@ -0,0 +1,28 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from .models import JSONModel\n+\n+class TestInOperatorJSONFieldIssue(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.objects = [\n+            JSONModel.objects.create(value={'key': 0}),\n+            JSONModel.objects.create(value={'key': 1}),\n+            JSONModel.objects.create(value={'key': 0}),\n+        ]\n+\n+    def test_in_operator_on_key_transform(self):\n+        # Using __in lookup on key transform\n+        first_filter = {'value__key__in': [0]}\n+        first_items = JSONModel.objects.filter(**first_filter)\n+        self.assertEqual(len(first_items), 0, \"Expected 0 items, but got {}\".format(len(first_items)))\n+\n+        # Using direct equality on key transform\n+        second_filter = {'value__key': 0}\n+        second_items = JSONModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 2, \"Expected 2 items, but got {}\".format(len(second_items)))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_in_operator_jsonfield_issue_inverted.py b/tests/model_fields/test_in_operator_jsonfield_issue_inverted.py\nnew file mode 100644\nindex 0000000..3f07e24\n--- /dev/null\n+++ b/tests/model_fields/test_in_operator_jsonfield_issue_inverted.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from .models import JSONModel\n+\n+class TestInOperatorJSONFieldIssue(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        cls.objects = [\n+            JSONModel.objects.create(value={'key': 0}),\n+            JSONModel.objects.create(value={'key': 1}),\n+            JSONModel.objects.create(value={'key': 0}),\n+        ]\n+\n+    def test_in_operator_on_key_transform(self):\n+        # Using __in lookup on key transform\n+        first_filter = {'value__key__in': [0]}\n+        first_items = JSONModel.objects.filter(**first_filter)\n+        # Altered to fail when the issue is observed\n+        self.assertEqual(len(first_items), 2, \"__BUG__HERE__\")\n+\n+        # Using direct equality on key transform\n+        second_filter = {'value__key': 0}\n+        second_items = JSONModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 2, \"Expected 2 items, but got {}\".format(len(second_items)))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2608923,
  "num_received_chars": 115759,
  "elapsed_time": 989.6084418296814,
  "lint_repair_count": 14,
  "test_generation_attempts": 1,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}