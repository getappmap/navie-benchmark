{
  "instance_id": "django__django-16612",
  "edit_test_file": "tests/test_client/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 61be31d..4251223 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -453,7 +453,11 @@ class AdminSite:\n                 pass\n             else:\n                 if getattr(match.func, \"should_append_slash\", True):\n-                    return HttpResponsePermanentRedirect(\"%s/\" % request.path)\n+                    query_string = request.META.get(\"QUERY_STRING\", \"\")\n+                    new_url = f\"{request.path}/\"\n+                    if query_string:\n+                        new_url = f\"{new_url}?{query_string}\"\n+                    return HttpResponsePermanentRedirect(new_url)\n         raise Http404\n \n     def _build_app_dict(self, request, label=None):\n",
  "test_patch": "diff --git a/tests/test_client/test_adminsite_query_string_redirect.py b/tests/test_client/test_adminsite_query_string_redirect.py\nnew file mode 100644\nindex 0000000..ecb6e1a\n--- /dev/null\n+++ b/tests/test_client/test_adminsite_query_string_redirect.py\n@@ -0,0 +1,29 @@\n+# File: tests/test_client/test_adminsite_query_string_redirect.py\n+\n+from django.test import TestCase, override_settings\n+from django.urls import path, re_path\n+from django.http import HttpRequest\n+from django.contrib.admin.sites import AdminSite\n+from django.conf import settings\n+\n+# Create a minimal AdminSite instance for testing\n+admin_site = AdminSite()\n+\n+# Define a simple view to simulate the catch_all_view behavior\n+def catch_all_view(request, url):\n+    return admin_site.catch_all_view(request, url)\n+\n+# Define the URL patterns for the test\n+urlpatterns = [\n+    re_path(r'^admin/(?P<url>.*)$', catch_all_view, name='admin_catch_all'),\n+]\n+\n+@override_settings(ROOT_URLCONF=__name__, APPEND_SLASH=True)\n+class AdminSiteQueryStringRedirectTest(TestCase):\n+    def test_catch_all_view_drops_query_string(self):\n+        # Simulate a request to the admin site with a query string\n+        response = self.client.get('/admin/auth/foo?id=123', follow=False)\n+        \n+        # Check that the redirect does not include the query string\n+        self.assertEqual(response.status_code, 301)\n+        self.assertEqual(response.url, '/admin/auth/foo/')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_client/test_adminsite_query_string_redirect_inverted.py b/tests/test_client/test_adminsite_query_string_redirect_inverted.py\nnew file mode 100644\nindex 0000000..13eba8e\n--- /dev/null\n+++ b/tests/test_client/test_adminsite_query_string_redirect_inverted.py\n@@ -0,0 +1,30 @@\n+# File: tests/test_client/test_adminsite_query_string_redirect.py\n+\n+from django.test import TestCase, override_settings\n+from django.urls import path, re_path\n+from django.http import HttpRequest\n+from django.contrib.admin.sites import AdminSite\n+from django.conf import settings\n+\n+# Create a minimal AdminSite instance for testing\n+admin_site = AdminSite()\n+\n+# Define a simple view to simulate the catch_all_view behavior\n+def catch_all_view(request, url):\n+    return admin_site.catch_all_view(request, url)\n+\n+# Define the URL patterns for the test\n+urlpatterns = [\n+    re_path(r'^admin/(?P<url>.*)$', catch_all_view, name='admin_catch_all'),\n+]\n+\n+@override_settings(ROOT_URLCONF=__name__, APPEND_SLASH=True)\n+class AdminSiteQueryStringRedirectTest(TestCase):\n+    def test_catch_all_view_drops_query_string(self):\n+        # Simulate a request to the admin site with a query string\n+        response = self.client.get('/admin/auth/foo?id=123', follow=False)\n+        \n+        # Check that the redirect includes the query string\n+        self.assertEqual(response.status_code, 301)\n+        if response.url != '/admin/auth/foo/?id=123':\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1999569,
  "num_received_chars": 20182,
  "elapsed_time": 187.26086449623108,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}