{
  "instance_id": "django__django-15277",
  "edit_test_file": "tests/model_fields/test_charfield.py",
  "code_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523..88c9ca9 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n",
  "test_patch": "diff --git a/tests/model_fields/test_value_output_field.py b/tests/model_fields/test_value_output_field.py\nnew file mode 100644\nindex 0000000..f42bd6d\n--- /dev/null\n+++ b/tests/model_fields/test_value_output_field.py\n@@ -0,0 +1,19 @@\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db.models import Value\n+\n+class TestValueOutputField(SimpleTestCase):\n+    def test_value_resolve_output_field_with_string(self):\n+        \"\"\"\n+        Test that Value._resolve_output_field() for a string value\n+        results in a CharField with a MaxLengthValidator that raises\n+        a TypeError when used.\n+        \"\"\"\n+        x = Value('test')\n+        output_field = x._resolve_output_field()\n+        self.assertIsInstance(output_field, models.CharField)\n+        self.assertEqual(len(output_field.validators), 1)\n+        validator = output_field.validators[0]\n+        with self.assertRaises(TypeError):\n+            validator.compare(1, None)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_value_output_field_inverted.py b/tests/model_fields/test_value_output_field_inverted.py\nnew file mode 100644\nindex 0000000..04fd692\n--- /dev/null\n+++ b/tests/model_fields/test_value_output_field_inverted.py\n@@ -0,0 +1,21 @@\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db.models import Value\n+\n+class TestValueOutputField(SimpleTestCase):\n+    def test_value_resolve_output_field_with_string(self):\n+        \"\"\"\n+        Test that Value._resolve_output_field() for a string value\n+        results in a CharField with a MaxLengthValidator that raises\n+        a TypeError when used.\n+        \"\"\"\n+        x = Value('test')\n+        output_field = x._resolve_output_field()\n+        self.assertIsInstance(output_field, models.CharField)\n+        self.assertEqual(len(output_field.validators), 1)\n+        validator = output_field.validators[0]\n+        try:\n+            validator.compare(1, None)\n+        except TypeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1324299,
  "num_received_chars": 30474,
  "elapsed_time": 264.68817687034607,
  "lint_repair_count": 4,
  "test_generation_attempts": 1,
  "code_generation_attempts": 7,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}