{
  "instance_id": "django__django-14155",
  "edit_test_file": "tests/view_tests/tests/test_debug.py",
  "code_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24..e93a0f5 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,21 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        if isinstance(func, functools.partial):\n+            self._original_func = func.func\n+            self._partial_args = func.args\n+            self._partial_kwargs = func.keywords\n+        else:\n+            self._original_func = func\n+            self._partial_args = ()\n+            self._partial_kwargs = {}\n+\n+        if not hasattr(self._original_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = self._original_func.__class__.__module__ + '.' + self._original_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = self._original_func.__module__ + '.' + self._original_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +68,14 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if isinstance(self.func, functools.partial):\n+            func_repr = \"functools.partial(func=%s, args=%s, kwargs=%s)\" % (\n+                self._func_path, self._partial_args, self._partial_kwargs\n+            )\n+        else:\n+            func_repr = self._func_path\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n",
  "test_patch": "diff --git a/tests/view_tests/tests/test_resolvermatch_partial.py b/tests/view_tests/tests/test_resolvermatch_partial.py\nnew file mode 100644\nindex 0000000..d1c84fa\n--- /dev/null\n+++ b/tests/view_tests/tests/test_resolvermatch_partial.py\n@@ -0,0 +1,13 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprTests(SimpleTestCase):\n+    def test_partial_function_repr(self):\n+        def sample_view():\n+            pass\n+\n+        partial_view = functools.partial(sample_view)\n+        resolver_match = ResolverMatch(partial_view, (), {})\n+        expected_repr = 'ResolverMatch(func=functools.partial, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+        self.assertEqual(repr(resolver_match), expected_repr)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/view_tests/tests/test_resolvermatch_partial_inverted.py b/tests/view_tests/tests/test_resolvermatch_partial_inverted.py\nnew file mode 100644\nindex 0000000..0005297\n--- /dev/null\n+++ b/tests/view_tests/tests/test_resolvermatch_partial_inverted.py\n@@ -0,0 +1,15 @@\n+import functools\n+from django.urls import ResolverMatch\n+from django.test import SimpleTestCase\n+\n+class ResolverMatchReprTests(SimpleTestCase):\n+    def test_partial_function_repr(self):\n+        def sample_view():\n+            pass\n+\n+        partial_view = functools.partial(sample_view)\n+        resolver_match = ResolverMatch(partial_view, (), {})\n+        # Altered expected_repr to trigger failure when the bug is observed\n+        expected_repr = 'ResolverMatch(func=sample_view, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[], route=None)'\n+        if repr(resolver_match) != expected_repr:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1177617,
  "num_received_chars": 51753,
  "elapsed_time": 550.4921238422394,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}