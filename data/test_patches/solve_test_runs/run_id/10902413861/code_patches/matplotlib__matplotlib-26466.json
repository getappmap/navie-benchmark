{
  "instance_id": "matplotlib__matplotlib-26466",
  "edit_test_file": "lib/matplotlib/tests/test_quiver.py",
  "code_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc..9543a93 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1456,7 +1456,7 @@ class _AnnotationBase:\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        self.xy = np.copy(xy) if isinstance(xy, np.ndarray) else xy\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_annotation_xy.py b/lib/matplotlib/tests/test_annotation_xy.py\nnew file mode 100644\nindex 0000000..3d742f0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotation_xy.py\n@@ -0,0 +1,31 @@\n+import unittest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+class TestAnnotationIssue(unittest.TestCase):\n+    def test_annotation_array_update(self):\n+        fig = plt.figure(\"test\")\n+        ax = fig.add_axes([0.13, 0.15, .8, .8])\n+        ax.set_xlim(-5, 5)\n+        ax.set_ylim(-3, 3)\n+\n+        xy_0 = np.array((-4, 1))\n+        xy_f = np.array((-1, 1))\n+        # this annotation is messed by later changing the array passed as xy kwarg\n+        annotation = ax.annotate('', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+        xy_0[1] = 3  # <--this updates the arrow position\n+\n+        # Check if the annotation position has changed\n+        self.assertNotEqual(annotation.xy[1], 1, \"Annotation position should have changed due to array modification\")\n+\n+        xy_0 = np.array((1, 1))\n+        xy_f = np.array((4, 1))\n+        # using a copy of the array helps spotting where the problem is\n+        annotation_copy = ax.annotate('', xy=xy_0.copy(), xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+        xy_0[1] = 3\n+\n+        # Check if the annotation position has not changed\n+        self.assertEqual(annotation_copy.xy[1], 1, \"Annotation position should not change when using a copy\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_annotation_xy_inverted.py b/lib/matplotlib/tests/test_annotation_xy_inverted.py\nnew file mode 100644\nindex 0000000..30fc8f0\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotation_xy_inverted.py\n@@ -0,0 +1,31 @@\n+import unittest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+class TestAnnotationIssue(unittest.TestCase):\n+    def test_annotation_array_update(self):\n+        fig = plt.figure(\"test\")\n+        ax = fig.add_axes([0.13, 0.15, .8, .8])\n+        ax.set_xlim(-5, 5)\n+        ax.set_ylim(-3, 3)\n+\n+        xy_0 = np.array((-4, 1))\n+        xy_f = np.array((-1, 1))\n+        # this annotation is messed by later changing the array passed as xy kwarg\n+        annotation = ax.annotate('', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+        xy_0[1] = 3  # <--this updates the arrow position\n+\n+        # Check if the annotation position has changed\n+        self.assertEqual(annotation.xy[1], 1, \"__BUG__HERE__\")\n+\n+        xy_0 = np.array((1, 1))\n+        xy_f = np.array((4, 1))\n+        # using a copy of the array helps spotting where the problem is\n+        annotation_copy = ax.annotate('', xy=xy_0.copy(), xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+        xy_0[1] = 3\n+\n+        # Check if the annotation position has not changed\n+        self.assertEqual(annotation_copy.xy[1], 1, \"Annotation position should not change when using a copy\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 848771,
  "num_received_chars": 15587,
  "elapsed_time": 192.00286436080933,
  "lint_repair_count": 0,
  "test_generation_attempts": 6,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}