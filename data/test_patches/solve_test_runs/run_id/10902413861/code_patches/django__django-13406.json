{
  "instance_id": "django__django-13406",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b48d0df..614216d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -238,7 +238,10 @@ class QuerySet:\n     def __getstate__(self):\n         # Force the cache to be fully populated.\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        state = {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        # Preserve the _iterable_class to ensure correct behavior post-unpickling\n+        state['_iterable_class'] = self._iterable_class\n+        return state\n \n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n@@ -258,6 +261,8 @@ class QuerySet:\n                 stacklevel=2,\n             )\n         self.__dict__.update(state)\n+        # Restore the _iterable_class to ensure correct behavior post-unpickling\n+        self._iterable_class = state.get('_iterable_class', ModelIterable)\n \n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1130153,
  "num_received_chars": 23093,
  "elapsed_time": 169.79330492019653,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}