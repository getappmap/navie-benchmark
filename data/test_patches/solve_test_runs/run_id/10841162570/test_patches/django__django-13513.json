{
  "edit_test_file": "tests/test_utils/test_simpletestcase.py",
  "test_patch": "diff --git a/tests/test_utils/test_debug_error_view_exceptions.py b/tests/test_utils/test_debug_error_view_exceptions.py\nnew file mode 100644\nindex 0000000..b30cc96\n--- /dev/null\n+++ b/tests/test_utils/test_debug_error_view_exceptions.py\n@@ -0,0 +1,24 @@\n+from django.test import TestCase, RequestFactory\n+from django.views.debug import technical_500_response\n+import sys\n+\n+class DebugErrorViewExceptionsTest(TestCase):\n+    def test_suppress_context_not_respected(self):\n+        \"\"\"\n+        Test that the debug error view does not respect exc.__suppress_context__.\n+        \"\"\"\n+        request = RequestFactory().get('/')\n+        \n+        class TestView:\n+            def get(self, request, *args, **kwargs):\n+                try:\n+                    raise RuntimeError('my error')\n+                except Exception as exc:\n+                    raise ValueError('my new error') from None\n+\n+        try:\n+            TestView().get(request)\n+        except ValueError:\n+            exc_info = sys.exc_info()\n+            response = technical_500_response(request, *exc_info)\n+            self.assertIn('RuntimeError', response.content.decode())\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_utils/test_debug_error_view_exceptions_inverted.py b/tests/test_utils/test_debug_error_view_exceptions_inverted.py\nnew file mode 100644\nindex 0000000..a9b6caa\n--- /dev/null\n+++ b/tests/test_utils/test_debug_error_view_exceptions_inverted.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase, RequestFactory\n+from django.views.debug import technical_500_response\n+import sys\n+\n+class DebugErrorViewExceptionsTest(TestCase):\n+    def test_suppress_context_not_respected(self):\n+        \"\"\"\n+        Test that the debug error view does not respect exc.__suppress_context__.\n+        \"\"\"\n+        request = RequestFactory().get('/')\n+        \n+        class TestView:\n+            def get(self, request, *args, **kwargs):\n+                try:\n+                    raise RuntimeError('my error')\n+                except Exception as exc:\n+                    raise ValueError('my new error') from None\n+\n+        try:\n+            TestView().get(request)\n+        except ValueError:\n+            exc_info = sys.exc_info()\n+            response = technical_500_response(request, *exc_info)\n+            # Alter the assertion to fail when the bug is observed\n+            if 'RuntimeError' in response.content.decode():\n+                raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}