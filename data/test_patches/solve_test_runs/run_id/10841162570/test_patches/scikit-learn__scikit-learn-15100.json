{
  "edit_test_file": "sklearn/feature_extraction/tests/test_text.py",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_strip_accents.py b/sklearn/feature_extraction/tests/test_strip_accents.py\nnew file mode 100644\nindex 0000000..ae21a0c\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_strip_accents.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+class TestStripAccentsUnicode(unittest.TestCase):\n+    def test_strip_accents_unicode_nfkd(self):\n+        # This string contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+        s1 = chr(241)\n+\n+        # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+        s2 = chr(110) + chr(771)\n+\n+        # The tilde is removed from s1, as expected\n+        self.assertEqual(strip_accents_unicode(s1), 'n')\n+\n+        # But strip_accents_unicode returns s2 unchanged\n+        self.assertEqual(strip_accents_unicode(s2), s2)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/feature_extraction/tests/test_strip_accents_inverted.py b/sklearn/feature_extraction/tests/test_strip_accents_inverted.py\nnew file mode 100644\nindex 0000000..5655241\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_strip_accents_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+class TestStripAccentsUnicode(unittest.TestCase):\n+    def test_strip_accents_unicode_nfkd(self):\n+        # This string contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+        s1 = chr(241)\n+\n+        # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+        s2 = chr(110) + chr(771)\n+\n+        # The tilde is removed from s1, as expected\n+        self.assertEqual(strip_accents_unicode(s1), 'n')\n+\n+        # The test should fail here if the bug is present\n+        # Expecting s2 to be normalized to 'n', but it remains unchanged\n+        self.assertEqual(strip_accents_unicode(s2), 'n', \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}