{
  "edit_test_file": "tests/test_testserver.py",
  "test_patch": "diff --git a/tests/test_proxy_authentication_bug.py b/tests/test_proxy_authentication_bug.py\nnew file mode 100644\nindex 0000000..cd4ef05\n--- /dev/null\n+++ b/tests/test_proxy_authentication_bug.py\n@@ -0,0 +1,18 @@\n+import unittest\n+import requests\n+from unittest.mock import patch\n+\n+class TestProxyAuthenticationBug(unittest.TestCase):\n+    def test_proxy_authentication_bug(self):\n+        proxies = {\n+            'http': 'http://user:pass@proxy.example.com:8080',\n+            'https': 'http://user:pass@proxy.example.com:8080',\n+        }\n+        \n+        with patch('requests.get') as mock_get:\n+            mock_get.return_value.status_code = 407\n+            response = requests.get('https://example.org/', proxies=proxies)\n+            self.assertEqual(response.status_code, 407)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_proxy_authentication_bug_inverted.py b/tests/test_proxy_authentication_bug_inverted.py\nnew file mode 100644\nindex 0000000..b10ed4d\n--- /dev/null\n+++ b/tests/test_proxy_authentication_bug_inverted.py\n@@ -0,0 +1,19 @@\n+import unittest\n+import requests\n+from unittest.mock import patch\n+\n+class TestProxyAuthenticationBug(unittest.TestCase):\n+    def test_proxy_authentication_bug(self):\n+        proxies = {\n+            'http': 'http://user:pass@proxy.example.com:8080',\n+            'https': 'http://user:pass@proxy.example.com:8080',\n+        }\n+        \n+        with patch('requests.get') as mock_get:\n+            mock_get.return_value.status_code = 407\n+            response = requests.get('https://example.org/', proxies=proxies)\n+            # Altered the assertion to expect a 200 status code, which should fail if the bug is present\n+            self.assertEqual(response.status_code, 200, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}