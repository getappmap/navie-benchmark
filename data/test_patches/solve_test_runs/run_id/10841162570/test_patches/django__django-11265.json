{
  "edit_test_file": "tests/filtered_relation/tests.py",
  "test_patch": "diff --git a/tests/filtered_relation/test_filteredrelation_exclude.py b/tests/filtered_relation/test_filteredrelation_exclude.py\nnew file mode 100644\nindex 0000000..92bf07f\n--- /dev/null\n+++ b/tests/filtered_relation/test_filteredrelation_exclude.py\n@@ -0,0 +1,11 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import FilteredRelation, Q\n+from django.test import TestCase\n+from .models import Author\n+\n+class FilteredRelationExcludeTests(TestCase):\n+    def test_exclude_on_annotated_filtered_relation(self):\n+        with self.assertRaises(FieldError):\n+            list(Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/filtered_relation/test_filteredrelation_exclude_inverted.py b/tests/filtered_relation/test_filteredrelation_exclude_inverted.py\nnew file mode 100644\nindex 0000000..090ac74\n--- /dev/null\n+++ b/tests/filtered_relation/test_filteredrelation_exclude_inverted.py\n@@ -0,0 +1,13 @@\n+from django.core.exceptions import FieldError\n+from django.db.models import FilteredRelation, Q\n+from django.test import TestCase\n+from .models import Author\n+\n+class FilteredRelationExcludeTests(TestCase):\n+    def test_exclude_on_annotated_filtered_relation(self):\n+        try:\n+            list(Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False))\n+        except FieldError:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}