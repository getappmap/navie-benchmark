{
  "edit_test_file": "tests/responses/test_fileresponse.py",
  "test_patch": "diff --git a/tests/responses/test_mime_type_guess.py b/tests/responses/test_mime_type_guess.py\nnew file mode 100644\nindex 0000000..30c69e9\n--- /dev/null\n+++ b/tests/responses/test_mime_type_guess.py\n@@ -0,0 +1,23 @@\n+import io\n+import os\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+class MimeTypeGuessTests(SimpleTestCase):\n+    def test_mime_type_guess_for_Z_and_br_files(self):\n+        \"\"\"\n+        Test that FileResponse incorrectly guesses the MIME type for files\n+        with extensions '.Z' and '.br'.\n+        \"\"\"\n+        test_files = [\n+            (\"test.html.Z\", \"text/html\"),\n+            (\"test.html.br\", \"text/html\"),\n+        ]\n+        for filename, expected_mime_type in test_files:\n+            with self.subTest(filename=filename):\n+                with open(filename, \"wb\") as f:\n+                    f.write(b\"dummy content\")\n+                with open(filename, \"rb\") as f:\n+                    response = FileResponse(f)\n+                    self.assertEqual(response.headers[\"Content-Type\"], expected_mime_type)\n+                os.remove(filename)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/responses/test_mime_type_guess_inverted.py b/tests/responses/test_mime_type_guess_inverted.py\nnew file mode 100644\nindex 0000000..5ca0d2a\n--- /dev/null\n+++ b/tests/responses/test_mime_type_guess_inverted.py\n@@ -0,0 +1,26 @@\n+import io\n+import os\n+from django.http import FileResponse\n+from django.test import SimpleTestCase\n+\n+class MimeTypeGuessTests(SimpleTestCase):\n+    def test_mime_type_guess_for_Z_and_br_files(self):\n+        \"\"\"\n+        Test that FileResponse incorrectly guesses the MIME type for files\n+        with extensions '.Z' and '.br'.\n+        \"\"\"\n+        test_files = [\n+            (\"test.html.Z\", \"application/x-compress\"),\n+            (\"test.html.br\", \"application/x-brotli\"),\n+        ]\n+        for filename, expected_mime_type in test_files:\n+            with self.subTest(filename=filename):\n+                with open(filename, \"wb\") as f:\n+                    f.write(b\"dummy content\")\n+                with open(filename, \"rb\") as f:\n+                    response = FileResponse(f)\n+                    # The test should now fail if the MIME type is incorrectly guessed as 'text/html'\n+                    if response.headers[\"Content-Type\"] == \"text/html\":\n+                        raise AssertionError(\"__BUG__HERE__\")\n+                    self.assertEqual(response.headers[\"Content-Type\"], expected_mime_type)\n+                os.remove(filename)\n\\ No newline at end of file\n"
}