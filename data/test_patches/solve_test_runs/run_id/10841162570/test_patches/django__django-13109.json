{
  "edit_test_file": "tests/nested_foreign_keys/tests.py",
  "test_patch": "diff --git a/tests/nested_foreign_keys/test_foreign_key_validation_using_base_manager.py b/tests/nested_foreign_keys/test_foreign_key_validation_using_base_manager.py\nnew file mode 100644\nindex 0000000..5028854\n--- /dev/null\n+++ b/tests/nested_foreign_keys/test_foreign_key_validation_using_base_manager.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django import forms\n+from django.db import models\n+\n+class ArticleManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False)\n+    objects = ArticleManager()\n+\n+class FavoriteArticle(models.Model):\n+    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+class FavoriteArticleForm(forms.ModelForm):\n+    class Meta:\n+        model = FavoriteArticle\n+        fields = '__all__'\n+\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.fields['article'].queryset = Article._base_manager.all()\n+\n+class ForeignKeyValidationTest(TestCase):\n+    def setUp(self):\n+        self.archived_article = Article.objects.create(title=\"Archived Article\", archived=True)\n+        self.favorite_article = FavoriteArticle(article=self.archived_article)\n+\n+    def test_foreign_key_validates_with_base_manager(self):\n+        form = FavoriteArticleForm(data={'article': self.archived_article.id})\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(form.errors['article'], ['article instance with id %d does not exist.' % self.archived_article.id])\n\\ No newline at end of file\n",
  "inverted_patch": null
}