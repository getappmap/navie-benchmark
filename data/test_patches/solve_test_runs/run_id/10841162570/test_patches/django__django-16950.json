{
  "edit_test_file": "tests/forms_tests/field_tests/test_uuidfield.py",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_inlines_with_uuidfield.py b/tests/forms_tests/field_tests/test_inlines_with_uuidfield.py\nnew file mode 100644\nindex 0000000..01bca66\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_inlines_with_uuidfield.py\n@@ -0,0 +1,57 @@\n+import uuid\n+from django.contrib import admin\n+from django.test import TestCase\n+from django.db import models\n+from django.forms.models import inlineformset_factory\n+\n+# Define the models as described in the issue\n+class UUIDModel(models.Model):\n+    pkid = models.BigAutoField(primary_key=True, editable=False)\n+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n+\n+    class Meta:\n+        abstract = True\n+\n+class Thing(UUIDModel):\n+    name = models.CharField(max_length=191)\n+\n+class SubThing(models.Model):\n+    name = models.CharField(max_length=191)\n+    thing = models.ForeignKey(\n+        Thing,\n+        to_field='id',\n+        on_delete=models.CASCADE,\n+        related_name='subthings',\n+    )\n+\n+# Define the admin classes as described in the issue\n+class SubThingInline(admin.StackedInline):\n+    model = SubThing\n+\n+@admin.register(Thing)\n+class ThingAdmin(admin.ModelAdmin):\n+    list_display = ('name',)\n+    ordering = ('pkid',)\n+    inlines = (SubThingInline,)\n+\n+# Test case to reproduce the issue\n+class AdminUUIDInlinesTest(TestCase):\n+    def test_uuidfield_default_value_issue(self):\n+        # Create a Thing instance\n+        thing = Thing.objects.create(name=\"Test Thing\")\n+\n+        # Prepare data for SubThing inline formset\n+        subthing_data = {\n+            'subthing_set-TOTAL_FORMS': '1',\n+            'subthing_set-INITIAL_FORMS': '0',\n+            'subthing_set-MAX_NUM_FORMS': '',\n+            'subthing_set-0-name': 'Test SubThing',\n+            'subthing_set-0-thing': thing.id,\n+        }\n+\n+        # Create the formset\n+        FormSet = inlineformset_factory(Thing, SubThing, fields='__all__')\n+        formset = FormSet(data=subthing_data, instance=thing)\n+\n+        # Assert that the formset is not valid due to the UUIDField issue\n+        self.assertFalse(formset.is_valid())\n\\ No newline at end of file\n",
  "inverted_patch": null
}