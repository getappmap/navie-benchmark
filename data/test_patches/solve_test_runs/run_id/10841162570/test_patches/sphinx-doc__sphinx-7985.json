{
  "edit_test_file": "tests/test_build_linkcheck.py",
  "test_patch": "diff --git a/tests/test_linkcheck_local_links.py b/tests/test_linkcheck_local_links.py\nnew file mode 100644\nindex 0000000..b435735\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links.py\n@@ -0,0 +1,53 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.testing.util import SphinxTestApp\n+import os\n+\n+class TestLinkcheckLocalLinks(unittest.TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the Sphinx project\n+        self.test_dir = os.path.abspath(os.path.dirname(__file__))\n+        self.src_dir = os.path.join(self.test_dir, 'test_project')\n+        os.makedirs(self.src_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project with a broken local link\n+        with open(os.path.join(self.src_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.src_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def test_linkcheck_local_links(self):\n+        # Run Sphinx linkcheck builder\n+        app = Sphinx(\n+            srcdir=self.src_dir,\n+            confdir=self.src_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctrees'),\n+            buildername='linkcheck'\n+        )\n+        app.build()\n+\n+        # Check the output for the expected issue\n+        output_file = os.path.join(self.test_dir, '_build', 'output.txt')\n+        with open(output_file, 'r') as f:\n+            output = f.read()\n+\n+        self.assertIn(\"doesntexist\", output, \"Local link was not checked as expected.\")\n+        self.assertIn(\"https://lkfqhlkghflkhs\", output, \"External link was not checked as expected.\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        import shutil\n+        shutil.rmtree(self.src_dir, ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_build'), ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_doctrees'), ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_linkcheck_local_links_inverted.py b/tests/test_linkcheck_local_links_inverted.py\nnew file mode 100644\nindex 0000000..bd71e9f\n--- /dev/null\n+++ b/tests/test_linkcheck_local_links_inverted.py\n@@ -0,0 +1,54 @@\n+import unittest\n+from sphinx.application import Sphinx\n+import os\n+import shutil\n+\n+class TestLinkcheckLocalLinks(unittest.TestCase):\n+    def setUp(self):\n+        # Setup a temporary directory for the Sphinx project\n+        self.test_dir = os.path.abspath(os.path.dirname(__file__))\n+        self.src_dir = os.path.join(self.test_dir, 'test_project')\n+        os.makedirs(self.src_dir, exist_ok=True)\n+\n+        # Create a minimal Sphinx project with a broken local link\n+        with open(os.path.join(self.src_dir, 'conf.py'), 'w') as f:\n+            f.write(\"master_doc = 'index'\\n\")\n+\n+        with open(os.path.join(self.src_dir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+    def test_linkcheck_local_links(self):\n+        # Run Sphinx linkcheck builder\n+        app = Sphinx(\n+            srcdir=self.src_dir,\n+            confdir=self.src_dir,\n+            outdir=os.path.join(self.test_dir, '_build'),\n+            doctreedir=os.path.join(self.test_dir, '_doctrees'),\n+            buildername='linkcheck'\n+        )\n+        app.build()\n+\n+        # Check the output for the expected issue\n+        output_file = os.path.join(self.test_dir, '_build', 'output.txt')\n+        with open(output_file, 'r') as f:\n+            output = f.read()\n+\n+        # Altered assertion to fail when the issue is observed\n+        if \"doesntexist\" in output:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertIn(\"https://lkfqhlkghflkhs\", output, \"External link was not checked as expected.\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        shutil.rmtree(self.src_dir, ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_build'), ignore_errors=True)\n+        shutil.rmtree(os.path.join(self.test_dir, '_doctrees'), ignore_errors=True)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}