{
  "edit_test_file": "lib/matplotlib/tests/test_subplots.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_shared_axes_bug.py b/lib/matplotlib/tests/test_shared_axes_bug.py\nnew file mode 100644\nindex 0000000..684bf3e\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_shared_axes_bug.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestSharedAxesBug(unittest.TestCase):\n+    def test_shared_axes_clear_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = any(label.get_visible() for label in ax.get_xticklabels())\n+            y_labels_visible = any(label.get_visible() for label in ax.get_yticklabels())\n+            self.assertTrue(x_labels_visible or y_labels_visible, \n+                            \"Tick labels that should be hidden are not visible\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_shared_axes_bug_inverted.py b/lib/matplotlib/tests/test_shared_axes_bug_inverted.py\nnew file mode 100644\nindex 0000000..06b5844\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_shared_axes_bug_inverted.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestSharedAxesBug(unittest.TestCase):\n+    def test_shared_axes_clear_bug(self):\n+        fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+        x = np.arange(0.0, 2 * np.pi, 0.01)\n+        y = np.sin(x)\n+\n+        for ax in axes.flatten():\n+            ax.clear()\n+            ax.plot(x, y)\n+\n+        # Check if the tick labels that should be hidden are visible\n+        for ax in axes.flatten():\n+            x_labels_visible = any(label.get_visible() for label in ax.get_xticklabels())\n+            y_labels_visible = any(label.get_visible() for label in ax.get_yticklabels())\n+            self.assertFalse(x_labels_visible or y_labels_visible, \n+                             \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}