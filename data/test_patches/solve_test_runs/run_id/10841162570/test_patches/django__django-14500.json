{
  "edit_test_file": "tests/migrations/test_executor.py",
  "test_patch": "diff --git a/tests/migrations/test_unapplied_squashed_migration.py b/tests/migrations/test_unapplied_squashed_migration.py\nnew file mode 100644\nindex 0000000..cb9b3b1\n--- /dev/null\n+++ b/tests/migrations/test_unapplied_squashed_migration.py\n@@ -0,0 +1,27 @@\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+from django.db import connection\n+\n+@override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+class UnappliedSquashedMigrationTest(TestCase):\n+    def test_squashed_migration_not_marked_as_unapplied(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not mark the squashed\n+        migration as unapplied when the replaced migration files are still\n+        present.\n+        \"\"\"\n+        recorder = MigrationRecorder(connection)\n+        # Apply the squashed migration\n+        recorder.record_applied(\"migrations\", \"0001_squashed_0002\")\n+        executor = MigrationExecutor(connection)\n+        # Unapply the squashed migration\n+        executor.migrate([(\"migrations\", None)])\n+        \n+        # Check if the squashed migration is still marked as applied\n+        applied_migrations = recorder.applied_migrations()\n+        self.assertIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            applied_migrations,\n+            \"Squashed migration should not be marked as unapplied.\"\n+        )\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/migrations/test_unapplied_squashed_migration_inverted.py b/tests/migrations/test_unapplied_squashed_migration_inverted.py\nnew file mode 100644\nindex 0000000..c04d192\n--- /dev/null\n+++ b/tests/migrations/test_unapplied_squashed_migration_inverted.py\n@@ -0,0 +1,27 @@\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations.recorder import MigrationRecorder\n+from django.test import TestCase, override_settings\n+from django.db import connection\n+\n+@override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+class UnappliedSquashedMigrationTest(TestCase):\n+    def test_squashed_migration_not_marked_as_unapplied(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not mark the squashed\n+        migration as unapplied when the replaced migration files are still\n+        present.\n+        \"\"\"\n+        recorder = MigrationRecorder(connection)\n+        # Apply the squashed migration\n+        recorder.record_applied(\"migrations\", \"0001_squashed_0002\")\n+        executor = MigrationExecutor(connection)\n+        # Unapply the squashed migration\n+        executor.migrate([(\"migrations\", None)])\n+        \n+        # Check if the squashed migration is still marked as applied\n+        applied_migrations = recorder.applied_migrations()\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            applied_migrations,\n+            \"__BUG__HERE__\"\n+        )\n\\ No newline at end of file\n"
}