{
  "edit_test_file": "tests/test_util_rst.py",
  "test_patch": "diff --git a/tests/test_rst_prolog_domain_directive.py b/tests/test_rst_prolog_domain_directive.py\nnew file mode 100644\nindex 0000000..959eeec\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive.py\n@@ -0,0 +1,54 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.util.docutils import new_document\n+from docutils.parsers.rst import Parser\n+from docutils.frontend import OptionParser\n+from docutils import nodes\n+\n+class TestRstPrologDomainDirective(unittest.TestCase):\n+    def setUp(self):\n+        # Set up a temporary directory for Sphinx build\n+        self.docs_dir = os.path.join(os.getcwd(), 'docs')\n+        os.makedirs(self.docs_dir, exist_ok=True)\n+\n+        # Create index.rst\n+        with open(os.path.join(self.docs_dir, 'index.rst'), 'w') as f:\n+            f.write('Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n')\n+\n+        # Create mypackage.rst with a domain directive as the first heading\n+        with open(os.path.join(self.docs_dir, 'mypackage.rst'), 'w') as f:\n+            f.write(':mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n')\n+\n+        # Create conf.py with rst_prolog\n+        with open(os.path.join(self.docs_dir, 'conf.py'), 'w') as f:\n+            f.write('rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n')\n+\n+    def test_domain_directive_heading(self):\n+        # Initialize Sphinx application\n+        app = Sphinx(\n+            srcdir=self.docs_dir,\n+            confdir=self.docs_dir,\n+            outdir=os.path.join(self.docs_dir, '_build'),\n+            doctreedir=os.path.join(self.docs_dir, '_doctrees'),\n+            buildername='html'\n+        )\n+        app.build()\n+\n+        # Check if the heading is missing in the generated HTML\n+        with open(os.path.join(self.docs_dir, '_build', 'index.html'), 'r') as f:\n+            html_content = f.read()\n+            self.assertNotIn('mypackage2', html_content)\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.docs_dir):\n+            for root, dirs, files in os.walk(self.docs_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.docs_dir)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_rst_prolog_domain_directive_inverted.py b/tests/test_rst_prolog_domain_directive_inverted.py\nnew file mode 100644\nindex 0000000..5ec3606\n--- /dev/null\n+++ b/tests/test_rst_prolog_domain_directive_inverted.py\n@@ -0,0 +1,51 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+\n+class TestRstPrologDomainDirective(unittest.TestCase):\n+    def setUp(self):\n+        # Set up a temporary directory for Sphinx build\n+        self.docs_dir = os.path.join(os.getcwd(), 'docs')\n+        os.makedirs(self.docs_dir, exist_ok=True)\n+\n+        # Create index.rst\n+        with open(os.path.join(self.docs_dir, 'index.rst'), 'w') as f:\n+            f.write('Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n')\n+\n+        # Create mypackage.rst with a domain directive as the first heading\n+        with open(os.path.join(self.docs_dir, 'mypackage.rst'), 'w') as f:\n+            f.write(':mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n')\n+\n+        # Create conf.py with rst_prolog\n+        with open(os.path.join(self.docs_dir, 'conf.py'), 'w') as f:\n+            f.write('rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n')\n+\n+    def test_domain_directive_heading(self):\n+        # Initialize Sphinx application\n+        app = Sphinx(\n+            srcdir=self.docs_dir,\n+            confdir=self.docs_dir,\n+            outdir=os.path.join(self.docs_dir, '_build'),\n+            doctreedir=os.path.join(self.docs_dir, '_doctrees'),\n+            buildername='html'\n+        )\n+        app.build()\n+\n+        # Check if the heading is present in the generated HTML\n+        with open(os.path.join(self.docs_dir, '_build', 'index.html'), 'r') as f:\n+            html_content = f.read()\n+            if 'mypackage2' not in html_content:\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        if os.path.exists(self.docs_dir):\n+            for root, dirs, files in os.walk(self.docs_dir, topdown=False):\n+                for name in files:\n+                    os.remove(os.path.join(root, name))\n+                for name in dirs:\n+                    os.rmdir(os.path.join(root, name))\n+            os.rmdir(self.docs_dir)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}