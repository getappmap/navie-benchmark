{
  "edit_test_file": "tests/queries/test_qs_combinators.py",
  "test_patch": "diff --git a/tests/queries/test_exists_subquery.py b/tests/queries/test_exists_subquery.py\nnew file mode 100644\nindex 0000000..ce911f1\n--- /dev/null\n+++ b/tests/queries/test_exists_subquery.py\n@@ -0,0 +1,10 @@\n+from django.core.exceptions import EmptyResultSet\n+from django.db import models\n+from django.test import TestCase\n+from .models import Number\n+\n+class ExistsSubqueryTests(TestCase):\n+    def test_filter_exists_subquery(self):\n+        with self.assertRaises(EmptyResultSet):\n+            qs = Number.objects.filter(~models.Exists(Number.objects.none()), num=5)\n+            print(qs.query)  # This should raise EmptyResultSet\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/queries/test_exists_subquery_inverted.py b/tests/queries/test_exists_subquery_inverted.py\nnew file mode 100644\nindex 0000000..da6a5a9\n--- /dev/null\n+++ b/tests/queries/test_exists_subquery_inverted.py\n@@ -0,0 +1,12 @@\n+from django.core.exceptions import EmptyResultSet\n+from django.db import models\n+from django.test import TestCase\n+from .models import Number\n+\n+class ExistsSubqueryTests(TestCase):\n+    def test_filter_exists_subquery(self):\n+        try:\n+            qs = Number.objects.filter(~models.Exists(Number.objects.none()), num=5)\n+            print(qs.query)  # This should raise EmptyResultSet\n+        except EmptyResultSet:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}