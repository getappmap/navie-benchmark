{
  "edit_test_file": "tests/admin_ordering/tests.py",
  "test_patch": "diff --git a/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\nnew file mode 100644\nindex 0000000..b49abf5\n--- /dev/null\n+++ b/tests/admin_ordering/test_formfield_for_manytomany_widget_override.py\n@@ -0,0 +1,28 @@\n+from django.contrib import admin\n+from django.forms import CheckboxSelectMultiple\n+from django.test import TestCase, RequestFactory\n+from .models import Band, Song\n+\n+class ManyToManyWidgetOverrideAdmin(admin.ModelAdmin):\n+    def formfield_for_manytomany(self, db_field, request, **kwargs):\n+        if db_field.name == 'other_interpreters':\n+            kwargs['widget'] = CheckboxSelectMultiple\n+        return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+class TestManyToManyWidgetOverride(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.band1 = Band.objects.create(name='Band 1', bio='', rank=1)\n+        cls.band2 = Band.objects.create(name='Band 2', bio='', rank=2)\n+        cls.song = Song.objects.create(band=cls.band1, name='Song 1', duration=300)\n+        cls.song.other_interpreters.add(cls.band2)\n+\n+    def test_widget_override(self):\n+        site = admin.AdminSite()\n+        site.register(Song, ManyToManyWidgetOverrideAdmin)\n+        request = RequestFactory().get('/')\n+        ma = site._registry[Song]\n+        form = ma.get_form(request)()\n+        widget = form.fields['other_interpreters'].widget\n+        # The test should pass if the widget is not overridden correctly\n+        self.assertNotIsInstance(widget, CheckboxSelectMultiple)\n\\ No newline at end of file\n",
  "inverted_patch": null
}