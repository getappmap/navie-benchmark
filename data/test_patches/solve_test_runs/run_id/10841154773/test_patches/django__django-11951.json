{
  "edit_test_file": "tests/bulk_create/tests.py",
  "test_patch": "diff --git a/tests/bulk_create/test_bulk_create_batch_size_override.py b/tests/bulk_create/test_bulk_create_batch_size_override.py\nnew file mode 100644\nindex 0000000..fe679f5\n--- /dev/null\n+++ b/tests/bulk_create/test_bulk_create_batch_size_override.py\n@@ -0,0 +1,14 @@\n+from django.test import TestCase\n+from .models import TwoFields\n+\n+class BulkCreateBatchSizeTests(TestCase):\n+    def test_bulk_create_batch_size_override(self):\n+        # Create a large number of objects to trigger the issue\n+        objs = [TwoFields(f1=i, f2=i) for i in range(0, 2000)]\n+        # Set a batch size that is too large and should cause an error\n+        batch_size = 2000\n+        with self.assertRaises(Exception) as context:\n+            TwoFields.objects.bulk_create(objs, batch_size=batch_size)\n+        \n+        # Check if the error is due to too many terms in compound SELECT\n+        self.assertIn('too many terms in compound SELECT', str(context.exception))\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/bulk_create/test_bulk_create_batch_size_override_inverted.py b/tests/bulk_create/test_bulk_create_batch_size_override_inverted.py\nnew file mode 100644\nindex 0000000..1a56640\n--- /dev/null\n+++ b/tests/bulk_create/test_bulk_create_batch_size_override_inverted.py\n@@ -0,0 +1,16 @@\n+from django.test import TestCase\n+from .models import TwoFields\n+\n+class BulkCreateBatchSizeTests(TestCase):\n+    def test_bulk_create_batch_size_override(self):\n+        # Create a large number of objects to trigger the issue\n+        objs = [TwoFields(f1=i, f2=i) for i in range(0, 2000)]\n+        # Set a batch size that is too large and should cause an error\n+        batch_size = 2000\n+        try:\n+            TwoFields.objects.bulk_create(objs, batch_size=batch_size)\n+            # If no exception is raised, the test should fail\n+            self.fail(\"__BUG__HERE__\")\n+        except Exception as e:\n+            # Check if the error is due to too many terms in compound SELECT\n+            self.assertNotIn('too many terms in compound SELECT', str(e), \"__BUG__HERE__\")\n\\ No newline at end of file\n"
}