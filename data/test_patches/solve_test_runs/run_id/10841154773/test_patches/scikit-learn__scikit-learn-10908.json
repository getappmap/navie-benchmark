{
  "edit_test_file": "sklearn/feature_extraction/tests/test_text.py",
  "test_patch": "diff --git a/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\nnew file mode 100644\nindex 0000000..8882651\n--- /dev/null\n+++ b/sklearn/feature_extraction/tests/test_count_vectorizer_vocabulary.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+class TestCountVectorizerVocabulary(unittest.TestCase):\n+    def test_get_feature_names_with_vocabulary(self):\n+        # Define a vocabulary\n+        vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+        \n+        # Initialize CountVectorizer with the vocabulary\n+        vectorizer = CountVectorizer(vocabulary=vocabulary)\n+        \n+        # Check that vocabulary_ is not set initially\n+        self.assertFalse(hasattr(vectorizer, \"vocabulary_\"))\n+        \n+        # Attempt to get feature names without fitting\n+        with self.assertRaises(NotFittedError):\n+            vectorizer.get_feature_names()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": null
}