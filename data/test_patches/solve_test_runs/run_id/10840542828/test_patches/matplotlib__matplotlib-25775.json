{
  "edit_test_file": "lib/matplotlib/tests/test_text.py",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiased.py b/lib/matplotlib/tests/test_text_antialiased.py\nnew file mode 100644\nindex 0000000..507bf69\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiased.py\n@@ -0,0 +1,19 @@\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestTextAntialiasing(unittest.TestCase):\n+    def test_text_antialiasing_issue(self):\n+        # Set the global antialiasing state\n+        mpl.rcParams['text.antialiased'] = False\n+\n+        # Create a figure and add text\n+        fig, ax = plt.subplots()\n+        text = ax.text(0.5, 0.5, 'Test Text')\n+\n+        # Check if the text object respects the global antialiasing state\n+        with self.assertRaises(AttributeError):\n+            text.get_antialiased()\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/lib/matplotlib/tests/test_text_antialiased_inverted.py b/lib/matplotlib/tests/test_text_antialiased_inverted.py\nnew file mode 100644\nindex 0000000..ca8dfcb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_text_antialiased_inverted.py\n@@ -0,0 +1,22 @@\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestTextAntialiasing(unittest.TestCase):\n+    def test_text_antialiasing_issue(self):\n+        # Set the global antialiasing state\n+        mpl.rcParams['text.antialiased'] = False\n+\n+        # Create a figure and add text\n+        fig, ax = plt.subplots()\n+        text = ax.text(0.5, 0.5, 'Test Text')\n+\n+        # Check if the text object respects the global antialiasing state\n+        # The test should now fail if the bug is observed\n+        try:\n+            text.get_antialiased()\n+        except AttributeError:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n"
}