{
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_ordering_issue.py b/tests/invalid_models_tests/test_ordering_issue.py\nnew file mode 100644\nindex 0000000..7dd0c41\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_ordering_issue.py\n@@ -0,0 +1,29 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n+\n+@isolate_apps('invalid_models_tests')\n+class TestOrderingIssue(SimpleTestCase):\n+    def test_ordering_with_nonexistent_lookup(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'supply__product__parent__isnull'.\",\n+                obj=Stock,\n+                id='models.E015',\n+            )\n+        ])\n\\ No newline at end of file\n",
  "inverted_patch": null
}