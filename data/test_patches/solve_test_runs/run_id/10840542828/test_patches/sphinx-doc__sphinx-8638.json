{
  "edit_test_file": "tests/test_ext_autodoc_autoclass.py",
  "test_patch": "diff --git a/tests/test_variable_link_resolution.py b/tests/test_variable_link_resolution.py\nnew file mode 100644\nindex 0000000..8a4d412\n--- /dev/null\n+++ b/tests/test_variable_link_resolution.py\n@@ -0,0 +1,40 @@\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_variable_link_resolution(app):\n+    # This test is designed to reproduce the issue where instance variables\n+    # link to other variables of the same name in the project.\n+    options = {'members': True, 'inherited-members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    \n+    # Check if the output incorrectly links to other variables of the same name\n+    # The expected output should not contain any links to unrelated variables\n+    expected_output = [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring foo',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+    \n+    # Assert that the actual output matches the expected output\n+    # If the issue is present, this assertion will fail\n+    assert list(actual) == expected_output\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/test_variable_link_resolution_inverted.py b/tests/test_variable_link_resolution_inverted.py\nnew file mode 100644\nindex 0000000..352fc86\n--- /dev/null\n+++ b/tests/test_variable_link_resolution_inverted.py\n@@ -0,0 +1,41 @@\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_variable_link_resolution(app):\n+    # This test is designed to reproduce the issue where instance variables\n+    # link to other variables of the same name in the project.\n+    options = {'members': True, 'inherited-members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    \n+    # Check if the output incorrectly links to other variables of the same name\n+    # The expected output should not contain any links to unrelated variables\n+    expected_output = [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring foo',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+    \n+    # Assert that the actual output does not match the expected output\n+    # If the issue is present, this assertion will fail with the specified error message\n+    if list(actual) == expected_output:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}