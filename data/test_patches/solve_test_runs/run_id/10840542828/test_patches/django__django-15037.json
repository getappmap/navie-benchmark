{
  "edit_test_file": "tests/contenttypes_tests/test_checks.py",
  "test_patch": "diff --git a/tests/contenttypes_tests/test_inspectdb_fk.py b/tests/contenttypes_tests/test_inspectdb_fk.py\nnew file mode 100644\nindex 0000000..d6c8f6b\n--- /dev/null\n+++ b/tests/contenttypes_tests/test_inspectdb_fk.py\n@@ -0,0 +1,24 @@\n+from io import StringIO\n+from unittest import TestCase, skipUnless\n+\n+from django.core.management import call_command\n+from django.db import connection\n+\n+class ForeignKeyInspectDBTests(TestCase):\n+    @skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific SQL')\n+    def test_foreign_key_to_specific_field(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute('CREATE TABLE foo (id serial primary key, other_id int UNIQUE)')\n+            cursor.execute('CREATE TABLE bar (id serial primary key, other_id int, '\n+                           'constraint myconst FOREIGN KEY(other_id) references foo(other_id))')\n+\n+        out = StringIO()\n+        try:\n+            call_command('inspectdb', stdout=out)\n+            output = out.getvalue()\n+            # Check if the generated model for 'bar' has 'other_id' as a ForeignKey to 'foo(other_id)'\n+            self.assertIn(\"other_id = models.ForeignKey(Foo, models.DO_NOTHING)\", output)\n+        finally:\n+            with connection.cursor() as cursor:\n+                cursor.execute('DROP TABLE bar')\n+                cursor.execute('DROP TABLE foo')\n\\ No newline at end of file\n",
  "inverted_patch": null
}