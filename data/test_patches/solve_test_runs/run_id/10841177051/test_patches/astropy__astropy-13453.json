{
  "edit_test_file": "astropy/io/ascii/tests/test_html.py",
  "test_patch": "diff --git a/astropy/io/ascii/tests/test_html_formats.py b/astropy/io/ascii/tests/test_html_formats.py\nnew file mode 100644\nindex 0000000..1ee7cde\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_html_formats.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from astropy.table import Table\n+from io import StringIO\n+\n+class TestHTMLFormatIssue(unittest.TestCase):\n+    def test_html_format_ignored(self):\n+        \"\"\"\n+        Test that the 'formats' argument is ignored when writing to HTML.\n+        \"\"\"\n+        # Generate table\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        tc = t.copy()  # Copy table\n+\n+        # Write HTML table with \"a\" column formatted to show 2 decimal places\n+        with StringIO() as sp:\n+            tc.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+            output = sp.getvalue()\n+\n+        # Check that the output is not formatted as expected\n+        self.assertIn('<td>1.23875234858e-24</td>', output)\n+        self.assertIn('<td>3.2348748432e-15</td>', output)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/astropy/io/ascii/tests/test_html_formats_inverted.py b/astropy/io/ascii/tests/test_html_formats_inverted.py\nnew file mode 100644\nindex 0000000..e9797f3\n--- /dev/null\n+++ b/astropy/io/ascii/tests/test_html_formats_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+from astropy.table import Table\n+from io import StringIO\n+\n+class TestHTMLFormatIssue(unittest.TestCase):\n+    def test_html_format_ignored(self):\n+        \"\"\"\n+        Test that the 'formats' argument is ignored when writing to HTML.\n+        \"\"\"\n+        # Generate table\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        tc = t.copy()  # Copy table\n+\n+        # Write HTML table with \"a\" column formatted to show 2 decimal places\n+        with StringIO() as sp:\n+            tc.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+            output = sp.getvalue()\n+\n+        # Check that the output is formatted as expected\n+        # This should fail if the bug is present\n+        if '<td>1.24e-24</td>' not in output or '<td>3.23e-15</td>' not in output:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}