{
  "edit_test_file": "sklearn/linear_model/tests/test_ridge.py",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_ridge_classifier_cv.py b/sklearn/linear_model/tests/test_ridge_classifier_cv.py\nnew file mode 100644\nindex 0000000..1cd00f9\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_ridge_classifier_cv.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+import unittest\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+class TestRidgeClassifierCVStoreCVValues(unittest.TestCase):\n+    def test_store_cv_values_parameter(self):\n+        # Test that RidgeClassifierCV raises a TypeError when store_cv_values is used\n+        X = np.random.randn(100, 30)\n+        y = np.random.normal(size=100)\n+        \n+        with self.assertRaises(TypeError) as context:\n+            RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True).fit(X, y)\n+        \n+        self.assertIn(\"__init__() got an unexpected keyword argument 'store_cv_values'\", str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py b/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py\nnew file mode 100644\nindex 0000000..ea71cf3\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_ridge_classifier_cv_inverted.py\n@@ -0,0 +1,18 @@\n+import numpy as np\n+import unittest\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+class TestRidgeClassifierCVStoreCVValues(unittest.TestCase):\n+    def test_store_cv_values_parameter(self):\n+        # Test that RidgeClassifierCV raises a TypeError when store_cv_values is used\n+        X = np.random.randn(100, 30)\n+        y = np.random.normal(size=100)\n+        \n+        try:\n+            RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True).fit(X, y)\n+        except TypeError as e:\n+            self.assertIn(\"__init__() got an unexpected keyword argument 'store_cv_values'\", str(e))\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n"
}