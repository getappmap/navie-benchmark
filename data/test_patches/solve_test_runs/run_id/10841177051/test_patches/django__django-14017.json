{
  "edit_test_file": "tests/generic_relations/tests.py",
  "test_patch": "diff --git a/tests/generic_relations/test_query_utils.py b/tests/generic_relations/test_query_utils.py\nnew file mode 100644\nindex 0000000..012bb07\n--- /dev/null\n+++ b/tests/generic_relations/test_query_utils.py\n@@ -0,0 +1,11 @@\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Mineral\n+\n+class QueryUtilsTests(TestCase):\n+    def test_q_exists_issue(self):\n+        \"\"\"\n+        Test that Q(...) & Exists(...) raises a TypeError.\n+        \"\"\"\n+        with self.assertRaises(TypeError):\n+            Q() & Exists(Mineral.objects.all())\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/generic_relations/test_query_utils_inverted.py b/tests/generic_relations/test_query_utils_inverted.py\nnew file mode 100644\nindex 0000000..a18e4b9\n--- /dev/null\n+++ b/tests/generic_relations/test_query_utils_inverted.py\n@@ -0,0 +1,13 @@\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Mineral\n+\n+class QueryUtilsTests(TestCase):\n+    def test_q_exists_issue(self):\n+        \"\"\"\n+        Test that Q(...) & Exists(...) raises a TypeError.\n+        \"\"\"\n+        try:\n+            Q() & Exists(Mineral.objects.all())\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n"
}