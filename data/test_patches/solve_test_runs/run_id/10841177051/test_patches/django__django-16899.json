{
  "edit_test_file": "tests/admin_checks/tests.py",
  "test_patch": "diff --git a/tests/admin_checks/test_modeladmin_readonly_fields_error_message.py b/tests/admin_checks/test_modeladmin_readonly_fields_error_message.py\nnew file mode 100644\nindex 0000000..e8eaa96\n--- /dev/null\n+++ b/tests/admin_checks/test_modeladmin_readonly_fields_error_message.py\n@@ -0,0 +1,24 @@\n+from django.contrib import admin\n+from django.contrib.admin import AdminSite\n+from django.core import checks\n+from django.test import SimpleTestCase\n+\n+from .models import City, State\n+\n+\n+class TestModelAdminReadonlyFieldsError(SimpleTestCase):\n+    def test_readonly_fields_error_message(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n+                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n\\ No newline at end of file\n",
  "inverted_patch": "diff --git a/tests/admin_checks/test_modeladmin_readonly_fields_error_message_inverted.py b/tests/admin_checks/test_modeladmin_readonly_fields_error_message_inverted.py\nnew file mode 100644\nindex 0000000..afd576e\n--- /dev/null\n+++ b/tests/admin_checks/test_modeladmin_readonly_fields_error_message_inverted.py\n@@ -0,0 +1,27 @@\n+from django.contrib import admin\n+from django.contrib.admin import AdminSite\n+from django.core import checks\n+from django.test import SimpleTestCase\n+\n+from .models import City, State\n+\n+\n+class TestModelAdminReadonlyFieldsError(SimpleTestCase):\n+    def test_readonly_fields_error_message(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n+                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        # Alter the test to fail when the issue is observed\n+        if errors == expected:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertNotEqual(errors, expected)\n\\ No newline at end of file\n"
}