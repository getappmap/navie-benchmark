{
  "edit_test_file": "tests/test_util_docutils.py",
  "test_patch": "diff --git a/tests/test_argument_default_value.py b/tests/test_argument_default_value.py\nnew file mode 100644\nindex 0000000..22ae953\n--- /dev/null\n+++ b/tests/test_argument_default_value.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from docutils.parsers.rst import Parser\n+from docutils.frontend import OptionParser\n+from docutils.utils import new_document\n+from docutils import nodes\n+\n+class TestArgumentDefaultValue(unittest.TestCase):\n+    def test_positional_only_argument_default_value(self):\n+        # Create a new document\n+        settings = OptionParser(components=(Parser,)).get_default_values()\n+        document = new_document('<test>', settings)\n+        \n+        # Parse the directive\n+        parser = Parser()\n+        parser.parse('.. py:function:: foo(a, b=0, /, c=1)', document)\n+        \n+        # Check the output\n+        # Expecting the default value for 'b' to be missing\n+        with self.assertRaises(AttributeError):\n+            function_node = document.next_node(nodes.desc)\n+            self.assertIsNone(function_node)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "inverted_patch": null
}