{
  "instance_id": "django__django-11206",
  "edit_test_file": "tests/utils_tests/test_numberformat.py",
  "code_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc..c718b94 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -31,14 +31,17 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n         # scientific notation to avoid high memory usage in {:f}'.format().\n         _, digits, exponent = number.as_tuple()\n         if abs(exponent) + len(digits) > 200:\n-            number = '{:e}'.format(number)\n-            coefficient, exponent = number.split('e')\n-            # Format the coefficient.\n-            coefficient = format(\n-                coefficient, decimal_sep, decimal_pos, grouping,\n-                thousand_sep, force_grouping, use_l10n,\n-            )\n-            return '{}e{}'.format(coefficient, exponent)\n+            if decimal_pos is not None and abs(exponent) >= decimal_pos:\n+                str_number = '0.' + '0' * decimal_pos\n+            else:\n+                number = '{:e}'.format(number)\n+                coefficient, exponent = number.split('e')\n+                # Format the coefficient.\n+                coefficient = format(\n+                    coefficient, decimal_sep, decimal_pos, grouping,\n+                    thousand_sep, force_grouping, use_l10n,\n+                )\n+                return '{}e{}'.format(coefficient, exponent)\n         else:\n             str_number = '{:f}'.format(number)\n     else:\n",
  "test_patch": "diff --git a/tests/utils_tests/test_decimal_rendering.py b/tests/utils_tests/test_decimal_rendering.py\nnew file mode 100644\nindex 0000000..10a0a8e\n--- /dev/null\n+++ b/tests/utils_tests/test_decimal_rendering.py\n@@ -0,0 +1,9 @@\n+from decimal import Decimal\n+from django.test import SimpleTestCase\n+from django.utils.numberformat import format as nformat\n+\n+class TestDecimalRendering(SimpleTestCase):\n+    def test_small_decimal_exponential_notation(self):\n+        # This test reproduces the issue where small decimals are rendered in exponential notation.\n+        result = nformat(Decimal('1e-200'), '.', decimal_pos=2)\n+        self.assertEqual(result, '1.00e-200')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_decimal_rendering_inverted.py b/tests/utils_tests/test_decimal_rendering_inverted.py\nnew file mode 100644\nindex 0000000..a315812\n--- /dev/null\n+++ b/tests/utils_tests/test_decimal_rendering_inverted.py\n@@ -0,0 +1,10 @@\n+from decimal import Decimal\n+from django.test import SimpleTestCase\n+from django.utils.numberformat import format as nformat\n+\n+class TestDecimalRendering(SimpleTestCase):\n+    def test_small_decimal_exponential_notation(self):\n+        # This test should fail when small decimals are rendered in exponential notation.\n+        result = nformat(Decimal('1e-200'), '.', decimal_pos=2)\n+        # The expected result should be '0.00' instead of '1.00e-200'\n+        self.assertEqual(result, '0.00', \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1182423,
  "num_received_chars": 50008,
  "elapsed_time": 380.4154996871948,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}