{
  "instance_id": "django__django-12039",
  "edit_test_file": "tests/indexes/tests.py",
  "code_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex cf90bb8..472c4ac 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -176,6 +176,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def _index_columns(self, table, columns, col_suffixes, opclasses):\n         if opclasses:\n+            col_suffixes = [suffix.strip() for suffix in col_suffixes]\n             return IndexColumns(table, columns, self.quote_name, col_suffixes=col_suffixes, opclasses=opclasses)\n         return super()._index_columns(table, columns, col_suffixes, opclasses)\n \n\ndiff --git a/django/db/models/indexes.py b/django/db/models/indexes.py\nindex 49f4989..3b4b970 100644\n--- a/django/db/models/indexes.py\n+++ b/django/db/models/indexes.py\n@@ -29,7 +29,7 @@ class Index:\n         self.fields = list(fields)\n         # A list of 2-tuple with the field name and ordering ('' or 'DESC').\n         self.fields_orders = [\n-            (field_name[1:], 'DESC') if field_name.startswith('-') else (field_name, '')\n+            (field_name[1:], ' DESC') if field_name.startswith('-') else (field_name, '')\n             for field_name in self.fields\n         ]\n         self.name = name or ''\n",
  "test_patch": "diff --git a/tests/indexes/test_whitespace_create_index.py b/tests/indexes/test_whitespace_create_index.py\nnew file mode 100644\nindex 0000000..f8a78dc\n--- /dev/null\n+++ b/tests/indexes/test_whitespace_create_index.py\n@@ -0,0 +1,19 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Index\n+from django.db.models.query_utils import Q\n+from django.test import TransactionTestCase\n+from .models import Article\n+\n+class WhitespaceCreateIndexTests(TransactionTestCase):\n+    available_apps = ['indexes']\n+\n+    def test_whitespace_in_create_index(self):\n+        index = Index(\n+            name='idx',\n+            fields=['-headline'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, schema_editor=editor))\n+            # Assert that the incorrect output is produced\n+            self.assertIn('\"headline\"DESC', sql)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/indexes/test_whitespace_create_index_inverted.py b/tests/indexes/test_whitespace_create_index_inverted.py\nnew file mode 100644\nindex 0000000..9e5606c\n--- /dev/null\n+++ b/tests/indexes/test_whitespace_create_index_inverted.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from django.db import connection\n+from django.db.models import Index\n+from django.test import TransactionTestCase\n+from .models import Article\n+\n+class WhitespaceCreateIndexTests(TransactionTestCase):\n+    available_apps = ['indexes']\n+\n+    def test_whitespace_in_create_index(self):\n+        index = Index(\n+            name='idx',\n+            fields=['-headline'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, schema_editor=editor))\n+            # Assert that the incorrect output is produced\n+            # Change the assertion to fail when the bug is observed\n+            if '\"headline\"DESC' in sql:\n+                raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 447705,
  "num_received_chars": 17553,
  "elapsed_time": 159.61909556388855,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}