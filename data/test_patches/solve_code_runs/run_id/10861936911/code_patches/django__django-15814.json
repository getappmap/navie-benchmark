{
  "instance_id": "django__django-15814",
  "edit_test_file": "tests/defer/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..931cf57 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -980,11 +980,11 @@ class QuerySet:\n         defaults = defaults or {}\n         params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}\n         params.update(defaults)\n-        property_names = self.model._meta._property_names\n+        property_names = self.model._meta.concrete_model._property_names\n         invalid_params = []\n         for param in params:\n             try:\n-                self.model._meta.get_field(param)\n+                self.model._meta.concrete_model._meta.get_field(param)\n             except exceptions.FieldDoesNotExist:\n                 # It's okay to use a model's property if it has a setter.\n                 if not (param in property_names and getattr(self.model, param).fset):\n\ndiff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 9b5824f..6bd9e9e 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -296,7 +296,7 @@ def select_related_descend(field, restricted, requested, load_fields, reverse=Fa\n                 msg = (\n                     \"Field %s.%s cannot be both deferred and traversed using \"\n                     \"select_related at the same time.\"\n-                ) % (field.model._meta.object_name, field.name)\n+                ) % (field.model._meta.concrete_model._meta.object_name, field.name)\n                 raise FieldError(msg)\n     return True\n \n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636..4d81096 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -311,10 +311,10 @@ class Query(BaseExpression):\n         \"\"\"\n         Return the Options instance (the model._meta) from which to start\n         processing. Normally, this is self.model._meta, but it can be changed\n-        by subclasses.\n+        by subclasses. For proxy models, return the concrete model's _meta.\n         \"\"\"\n         if self.model:\n-            return self.model._meta\n+            return self.model._meta.concrete_model._meta\n \n     def clone(self):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/defer/test_proxy_model_query_crash.py b/tests/defer/test_proxy_model_query_crash.py\nnew file mode 100644\nindex 0000000..78ba358\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/defer/test_proxy_model_query_crash_inverted.py b/tests/defer/test_proxy_model_query_crash_inverted.py\nnew file mode 100644\nindex 0000000..ec6866b\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash_inverted.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3146941,
  "num_received_chars": 110669,
  "elapsed_time": 811.404470205307,
  "lint_repair_count": 9,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 99589
}