{
  "instance_id": "django__django-12325",
  "edit_test_file": "tests/model_inheritance/tests.py",
  "code_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6b..80301c6 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -294,9 +294,13 @@ class Options:\n             self._expire_cache(reverse=False)\n \n     def setup_pk(self, field):\n-        if not self.pk and field.primary_key:\n-            self.pk = field\n-            field.serialize = False\n+        if not self.pk:\n+            if field.primary_key and field.remote_field and field.remote_field.parent_link:\n+                self.pk = field\n+                field.serialize = False\n+            elif field.primary_key:\n+                self.pk = field\n+                field.serialize = False\n \n     def setup_proxy(self, target):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/model_inheritance/test_mti_one_to_one_conflict.py b/tests/model_inheritance/test_mti_one_to_one_conflict.py\nnew file mode 100644\nindex 0000000..fe9e581\n--- /dev/null\n+++ b/tests/model_inheritance/test_mti_one_to_one_conflict.py\n@@ -0,0 +1,15 @@\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n+\n+class Document(models.Model):\n+    pass\n+\n+class MTIOnetoOneConfusionTest(TestCase):\n+    def test_mti_onetoone_confusion(self):\n+        with self.assertRaises(ImproperlyConfigured) as cm:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        self.assertIn(\"Add parent_link=True to model_inheritance.Picking.origin.\", str(cm.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_inheritance/test_mti_one_to_one_conflict_inverted.py b/tests/model_inheritance/test_mti_one_to_one_conflict_inverted.py\nnew file mode 100644\nindex 0000000..d74f657\n--- /dev/null\n+++ b/tests/model_inheritance/test_mti_one_to_one_conflict_inverted.py\n@@ -0,0 +1,16 @@\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n+\n+class Document(models.Model):\n+    pass\n+\n+class MTIOnetoOneConfusionTest(TestCase):\n+    def test_mti_onetoone_confusion(self):\n+        with self.assertRaises(ImproperlyConfigured) as cm:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        # Alter the assertion to ensure the test fails when the bug is observed\n+        self.assertNotIn(\"Add parent_link=True to model_inheritance.Picking.origin.\", str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1266224,
  "num_received_chars": 60768,
  "elapsed_time": 463.5494797229767,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}