{
  "instance_id": "django__django-15863",
  "edit_test_file": "tests/template_tests/filter_tests/test_floatformat.py",
  "code_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7a5b28d..602d56e 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -150,14 +150,17 @@ def floatformat(text, arg=-1):\n         elif last_char == \"u\":\n             use_l10n = False\n             arg = arg[:-1] or -1\n-    try:\n-        input_val = repr(text)\n-        d = Decimal(input_val)\n-    except InvalidOperation:\n+    if isinstance(text, Decimal):\n+        d = text\n+    else:\n         try:\n-            d = Decimal(str(float(text)))\n-        except (ValueError, InvalidOperation, TypeError):\n-            return \"\"\n+            input_val = repr(text)\n+            d = Decimal(input_val)\n+        except InvalidOperation:\n+            try:\n+                d = Decimal(str(float(text)))\n+            except (ValueError, InvalidOperation, TypeError):\n+                return \"\"\n     try:\n         p = int(arg)\n     except ValueError:\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_precision.py b/tests/template_tests/filter_tests/test_floatformat_precision.py\nnew file mode 100644\nindex 0000000..ed5bfca\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_precision.py\n@@ -0,0 +1,11 @@\n+from decimal import Decimal\n+from django.template import Template, Context\n+from django.test import SimpleTestCase\n+\n+class FloatformatPrecisionTests(SimpleTestCase):\n+    def test_floatformat_drops_precision(self):\n+        template = Template('{{ value|floatformat:20 }}')\n+        context = Context({'value': Decimal('42.12345678901234567890')})\n+        output = template.render(context)\n+        # The expected incorrect output due to the issue\n+        self.assertEqual(output, '42.12345678901234400000')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_floatformat_precision_inverted.py b/tests/template_tests/filter_tests/test_floatformat_precision_inverted.py\nnew file mode 100644\nindex 0000000..3d7066c\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_floatformat_precision_inverted.py\n@@ -0,0 +1,14 @@\n+from decimal import Decimal\n+from django.template import Template, Context\n+from django.test import SimpleTestCase\n+\n+class FloatformatPrecisionTests(SimpleTestCase):\n+    def test_floatformat_drops_precision(self):\n+        template = Template('{{ value|floatformat:20 }}')\n+        context = Context({'value': Decimal('42.12345678901234567890')})\n+        output = template.render(context)\n+        # The expected correct output should maintain precision\n+        expected_output = '42.12345678901234567890'\n+        if output != expected_output:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(output, expected_output)\n\\ No newline at end of file\n",
  "num_sent_chars": 139119,
  "num_received_chars": 4019,
  "elapsed_time": 37.665523290634155,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 32150
}