{
  "instance_id": "django__django-13410",
  "edit_test_file": "tests/files/tests.py",
  "code_patch": "diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b..4938347 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,15 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return True\n+            except OSError:\n+                return False\n",
  "test_patch": "diff --git a/tests/files/test_posix_lock_bug.py b/tests/files/test_posix_lock_bug.py\nnew file mode 100644\nindex 0000000..a4ea125\n--- /dev/null\n+++ b/tests/files/test_posix_lock_bug.py\n@@ -0,0 +1,19 @@\n+import os\n+import unittest\n+from django.core.files import locks\n+\n+class TestPosixLockBug(unittest.TestCase):\n+    def test_posix_lock_always_returns_false(self):\n+        # Create a temporary file\n+        with open('tempfile', 'wb') as f:\n+            # Attempt to acquire a non-blocking lock\n+            result = locks.lock(f, locks.LOCK_EX | locks.LOCK_NB)\n+            # Assert that the lock function incorrectly returns False\n+            self.assertFalse(result)\n+            # Clean up by unlocking\n+            locks.unlock(f)\n+        # Remove the temporary file\n+        os.remove('tempfile')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/files/test_posix_lock_bug_inverted.py b/tests/files/test_posix_lock_bug_inverted.py\nnew file mode 100644\nindex 0000000..6bccfb9\n--- /dev/null\n+++ b/tests/files/test_posix_lock_bug_inverted.py\n@@ -0,0 +1,20 @@\n+import os\n+import unittest\n+from django.core.files import locks\n+\n+class TestPosixLockBug(unittest.TestCase):\n+    def test_posix_lock_always_returns_false(self):\n+        # Create a temporary file\n+        with open('tempfile', 'wb') as f:\n+            # Attempt to acquire a non-blocking lock\n+            result = locks.lock(f, locks.LOCK_EX | locks.LOCK_NB)\n+            # Assert that the lock function should return True, but due to the bug, it returns False\n+            if not result:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            # Clean up by unlocking\n+            locks.unlock(f)\n+        # Remove the temporary file\n+        os.remove('tempfile')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 152704,
  "num_received_chars": 5397,
  "elapsed_time": 38.310948848724365,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}