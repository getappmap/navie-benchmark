{
  "instance_id": "django__django-14017",
  "edit_test_file": "tests/generic_relations/tests.py",
  "code_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa..9c6b933 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -64,6 +64,12 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        # Allow commutative behavior with non-Q objects like Exists\n+        if hasattr(other, '_combine'):\n+            return other._combine(self, self.AND)\n+        raise TypeError(f\"Unsupported operand type(s) for &: '{type(other).__name__}' and 'Q'\")\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n",
  "test_patch": "diff --git a/tests/generic_relations/test_query_utils.py b/tests/generic_relations/test_query_utils.py\nnew file mode 100644\nindex 0000000..012bb07\n--- /dev/null\n+++ b/tests/generic_relations/test_query_utils.py\n@@ -0,0 +1,11 @@\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Mineral\n+\n+class QueryUtilsTests(TestCase):\n+    def test_q_exists_issue(self):\n+        \"\"\"\n+        Test that Q(...) & Exists(...) raises a TypeError.\n+        \"\"\"\n+        with self.assertRaises(TypeError):\n+            Q() & Exists(Mineral.objects.all())\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/generic_relations/test_query_utils_inverted.py b/tests/generic_relations/test_query_utils_inverted.py\nnew file mode 100644\nindex 0000000..a18e4b9\n--- /dev/null\n+++ b/tests/generic_relations/test_query_utils_inverted.py\n@@ -0,0 +1,13 @@\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Mineral\n+\n+class QueryUtilsTests(TestCase):\n+    def test_q_exists_issue(self):\n+        \"\"\"\n+        Test that Q(...) & Exists(...) raises a TypeError.\n+        \"\"\"\n+        try:\n+            Q() & Exists(Mineral.objects.all())\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1119462,
  "num_received_chars": 49795,
  "elapsed_time": 539.460479259491,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 1355
}