{
  "instance_id": "django__django-13590",
  "edit_test_file": "tests/model_indexes/tests.py",
  "code_patch": "diff --git a/django/db/models/utils.py b/django/db/models/utils.py\nindex 764ca58..fe55350 100644\n--- a/django/db/models/utils.py\n+++ b/django/db/models/utils.py\n@@ -38,11 +38,18 @@ def unpickle_named_row(names, values):\n     return create_namedtuple_class(*names)(*values)\n \n \n+def reconstitute_namedtuple(namedtuple_class, values):\n+    \"\"\"\n+    Reconstitute a NamedTuple from a list of values using the unpacking operator.\n+    \"\"\"\n+    return namedtuple_class(*values)\n+\n+\n @functools.lru_cache()\n def create_namedtuple_class(*names):\n     # Cache type() with @lru_cache() since it's too slow to be called for every\n     # QuerySet evaluation.\n     def __reduce__(self):\n-        return unpickle_named_row, (names, tuple(self))\n+        return reconstitute_namedtuple, (type(self), tuple(self))\n \n     return type('Row', (namedtuple('Row', names),), {'__reduce__': __reduce__})\n",
  "test_patch": "diff --git a/tests/model_indexes/test_named_tuple_range.py b/tests/model_indexes/test_named_tuple_range.py\nnew file mode 100644\nindex 0000000..07c98eb\n--- /dev/null\n+++ b/tests/model_indexes/test_named_tuple_range.py\n@@ -0,0 +1,21 @@\n+from unittest import TestCase\n+from collections import namedtuple\n+from django.db import models\n+from django.core.exceptions import FieldError\n+\n+# Assuming a model named 'SampleModel' with a field 'value' exists\n+class SampleModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeTest(TestCase):\n+    def test_named_tuple_range_error(self):\n+        # Define a named tuple with two elements\n+        RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+        range_value = RangeTuple(1, 10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaises(TypeError) as context:\n+            SampleModel.objects.filter(value__range=range_value)\n+\n+        # Check if the error message matches the expected issue\n+        self.assertIn(\"__new__() missing 1 required positional argument: 'far'\", str(context.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_indexes/test_named_tuple_range_inverted.py b/tests/model_indexes/test_named_tuple_range_inverted.py\nnew file mode 100644\nindex 0000000..05979d2\n--- /dev/null\n+++ b/tests/model_indexes/test_named_tuple_range_inverted.py\n@@ -0,0 +1,20 @@\n+from unittest import TestCase\n+from collections import namedtuple\n+from django.db import models\n+\n+# Assuming a model named 'SampleModel' with a field 'value' exists\n+class SampleModel(models.Model):\n+    value = models.IntegerField()\n+\n+class NamedTupleRangeTest(TestCase):\n+    def test_named_tuple_range_error(self):\n+        # Define a named tuple with two elements\n+        RangeTuple = namedtuple('RangeTuple', ['near', 'far'])\n+        range_value = RangeTuple(1, 10)\n+\n+        # Attempt to use the named tuple in a range filter\n+        with self.assertRaises(TypeError) as context:\n+            SampleModel.objects.filter(value__range=range_value)\n+\n+        # Check if the error message matches the expected issue\n+        self.assertIn(\"__BUG__HERE__\", str(context.exception))\n\\ No newline at end of file\n",
  "num_sent_chars": 1400742,
  "num_received_chars": 57569,
  "elapsed_time": 543.9001898765564,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}