{
  "instance_id": "django__django-16333",
  "edit_test_file": "tests/model_forms/test_modelchoicefield.py",
  "code_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8..d4b1d48 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,8 +141,17 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()\n         return user\n \n+    def save_m2m(self):\n+        \"\"\"\n+        Save the many-to-many data for the form. This method is a no-op if\n+        commit=False is passed to the save() method.\n+        \"\"\"\n+        if hasattr(super(), 'save_m2m'):\n+            super().save_m2m()\n+\n \n class UserChangeForm(forms.ModelForm):\n     password = ReadOnlyPasswordHashField(\n",
  "test_patch": "diff --git a/tests/model_forms/test_usercreationform_m2m.py b/tests/model_forms/test_usercreationform_m2m.py\nnew file mode 100644\nindex 0000000..713f11d\n--- /dev/null\n+++ b/tests/model_forms/test_usercreationform_m2m.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.forms import UserCreationForm\n+from django.forms import ModelMultipleChoiceField\n+from django.db import models\n+\n+# Define a custom user model with a ManyToManyField\n+class Organization(models.Model):\n+    name = models.CharField(max_length=255)\n+\n+class CustomUserWithM2M(get_user_model()):\n+    organizations = models.ManyToManyField(Organization)\n+\n+# Define a form using the custom user model\n+class CustomUserCreationForm(UserCreationForm):\n+    class Meta(UserCreationForm.Meta):\n+        model = CustomUserWithM2M\n+        fields = UserCreationForm.Meta.fields + ('organizations',)\n+\n+class UserCreationFormM2MTest(TestCase):\n+    def test_user_creation_form_m2m(self):\n+        # Create some organizations\n+        org1 = Organization.objects.create(name=\"Org 1\")\n+        org2 = Organization.objects.create(name=\"Org 2\")\n+\n+        # Create a form instance with data including the ManyToManyField\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpassword123',\n+            'password2': 'testpassword123',\n+            'organizations': [org1.pk, org2.pk],\n+        }\n+        form = CustomUserCreationForm(data=form_data)\n+\n+        # Check if the form is valid\n+        self.assertTrue(form.is_valid())\n+\n+        # Save the form and check if the ManyToManyField data is saved\n+        user = form.save()\n+        self.assertEqual(list(user.organizations.all()), [])\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_forms/test_usercreationform_m2m_inverted.py b/tests/model_forms/test_usercreationform_m2m_inverted.py\nnew file mode 100644\nindex 0000000..219ff48\n--- /dev/null\n+++ b/tests/model_forms/test_usercreationform_m2m_inverted.py\n@@ -0,0 +1,43 @@\n+from django.test import TestCase\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.forms import UserCreationForm\n+from django.forms import ModelMultipleChoiceField\n+from django.db import models\n+\n+# Define a custom user model with a ManyToManyField\n+class Organization(models.Model):\n+    name = models.CharField(max_length=255)\n+\n+class CustomUserWithM2M(get_user_model()):\n+    organizations = models.ManyToManyField(Organization)\n+\n+# Define a form using the custom user model\n+class CustomUserCreationForm(UserCreationForm):\n+    class Meta(UserCreationForm.Meta):\n+        model = CustomUserWithM2M\n+        fields = UserCreationForm.Meta.fields + ('organizations',)\n+\n+class UserCreationFormM2MTest(TestCase):\n+    def test_user_creation_form_m2m(self):\n+        # Create some organizations\n+        org1 = Organization.objects.create(name=\"Org 1\")\n+        org2 = Organization.objects.create(name=\"Org 2\")\n+\n+        # Create a form instance with data including the ManyToManyField\n+        form_data = {\n+            'username': 'testuser',\n+            'password1': 'testpassword123',\n+            'password2': 'testpassword123',\n+            'organizations': [org1.pk, org2.pk],\n+        }\n+        form = CustomUserCreationForm(data=form_data)\n+\n+        # Check if the form is valid\n+        self.assertTrue(form.is_valid())\n+\n+        # Save the form and check if the ManyToManyField data is saved\n+        user = form.save()\n+        # Altered assertion to fail when the bug is observed\n+        if list(user.organizations.all()) == []:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(list(user.organizations.all()), [org1, org2])\n\\ No newline at end of file\n",
  "num_sent_chars": 381585,
  "num_received_chars": 3755,
  "elapsed_time": 49.76732897758484,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 249995
}