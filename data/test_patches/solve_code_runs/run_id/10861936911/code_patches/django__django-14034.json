{
  "instance_id": "django__django-14034",
  "edit_test_file": "tests/forms_tests/field_tests/test_multivaluefield.py",
  "code_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9e..a9fa2b7 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1023,10 +1023,11 @@ class MultiValueField(Field):\n             value = self.widget.decompress(value)\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n-                if self.required:\n-                    raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n+                # Check each sub-field's required status independently\n+                for i, field in enumerate(self.fields):\n+                    if field.required and (not value or value[i] in self.empty_values):\n+                        raise ValidationError(self.error_messages['required'], code='required')\n+                return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_inconsistentmultivaluefield.py b/tests/forms_tests/field_tests/test_inconsistentmultivaluefield.py\nnew file mode 100644\nindex 0000000..18bd416\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_inconsistentmultivaluefield.py\n@@ -0,0 +1,37 @@\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+from django.test import SimpleTestCase\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class InconsistentMultiValueFieldTest(SimpleTestCase):\n+    def test_inconsistent_multivaluefield(self):\n+        # Test case where both sub fields are empty\n+        form = F({'mf_0': '', 'mf_1': ''})\n+        self.assertTrue(form.is_valid(), \"Expected form to be invalid, but it was valid.\")\n+\n+        # Test case where one sub field is non-empty\n+        form = F({'mf_0': 'xxx', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid, but it was valid.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_inconsistentmultivaluefield_inverted.py b/tests/forms_tests/field_tests/test_inconsistentmultivaluefield_inverted.py\nnew file mode 100644\nindex 0000000..8053c8b\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_inconsistentmultivaluefield_inverted.py\n@@ -0,0 +1,37 @@\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+from django.test import SimpleTestCase\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class InconsistentMultiValueFieldTest(SimpleTestCase):\n+    def test_inconsistent_multivaluefield(self):\n+        # Test case where both sub fields are empty\n+        form = F({'mf_0': '', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"__BUG__HERE__\")\n+\n+        # Test case where one sub field is non-empty\n+        form = F({'mf_0': 'xxx', 'mf_1': ''})\n+        self.assertFalse(form.is_valid(), \"Expected form to be invalid, but it was valid.\")\n\\ No newline at end of file\n",
  "num_sent_chars": 256114,
  "num_received_chars": 15518,
  "elapsed_time": 116.44762420654297,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 12486
}