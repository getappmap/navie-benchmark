{
  "instance_id": "django__django-11433",
  "edit_test_file": "tests/forms_tests/widget_tests/test_clearablefileinput.py",
  "code_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 0ab2564..02edf8c 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -406,6 +406,10 @@ class BaseForm:\n             self.add_error(None, e)\n         else:\n             if cleaned_data is not None:\n+                # Prioritize cleaned_data over model defaults for missing fields\n+                for field in self.fields:\n+                    if field not in self.data and field in cleaned_data:\n+                        self.cleaned_data[field] = cleaned_data[field]\n                 self.cleaned_data = cleaned_data\n \n     def _post_clean(self):\n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py\nnew file mode 100644\nindex 0000000..59222d6\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.forms import Form, CharField\n+from django.core.exceptions import ValidationError\n+\n+class TestCleanedDataOverwrite(unittest.TestCase):\n+    def test_cleaned_data_overwrites_default(self):\n+        class SomeForm(Form):\n+            some_field = CharField(required=False)\n+\n+            def clean(self):\n+                cleaned_data = super().clean()\n+                # Simulate overwriting a default value with cleaned_data\n+                cleaned_data['some_field'] = 'new_value'\n+                return cleaned_data\n+\n+        form = SomeForm(data={})\n+        form.full_clean()\n+        # Check if the cleaned_data overwrites the default value\n+        self.assertEqual(form.cleaned_data['some_field'], 'new_value')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py\nnew file mode 100644\nindex 0000000..60355db\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from django.forms import Form, CharField\n+from django.core.exceptions import ValidationError\n+\n+class TestCleanedDataOverwrite(unittest.TestCase):\n+    def test_cleaned_data_overwrites_default(self):\n+        class SomeForm(Form):\n+            some_field = CharField(required=False)\n+\n+            def clean(self):\n+                cleaned_data = super().clean()\n+                # Simulate overwriting a default value with cleaned_data\n+                cleaned_data['some_field'] = 'new_value'\n+                return cleaned_data\n+\n+        form = SomeForm(data={})\n+        form.full_clean()\n+        # Check if the cleaned_data overwrites the default value\n+        # This should now fail if the bug is present\n+        if form.cleaned_data['some_field'] == 'new_value':\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1705232,
  "num_received_chars": 110853,
  "elapsed_time": 790.2794306278229,
  "lint_repair_count": 9,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}