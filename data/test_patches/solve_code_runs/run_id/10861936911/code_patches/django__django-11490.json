{
  "instance_id": "django__django-11490",
  "edit_test_file": "tests/queries/test_qs_combinators.py",
  "code_patch": "diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex fbc265d..dfdc7ed 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -56,6 +56,7 @@ class DeleteQuery(Query):\n         if not innerq_used_tables or innerq_used_tables == tuple(self.alias_map):\n             # There is only the base table in use in the query.\n             self.where = innerq.where\n+            self.select = innerq.select\n         else:\n             pk = query.model._meta.pk\n             if not connections[using].features.update_can_self_select:\n@@ -112,6 +113,7 @@ class UpdateQuery(Query):\n         query. This is the entry point for the public update() method on\n         querysets.\n         \"\"\"\n+        self.select = []  # Reset select clause to ensure it reflects current values\n         values_seq = []\n         for name, val in values.items():\n             field = self.get_meta().get_field(name)\n",
  "test_patch": "diff --git a/tests/queries/test_values_list_issue.py b/tests/queries/test_values_list_issue.py\nnew file mode 100644\nindex 0000000..c4ea759\n--- /dev/null\n+++ b/tests/queries/test_values_list_issue.py\n@@ -0,0 +1,15 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class TestValuesListIssue(TestCase):\n+    def test_composed_queries_values_list_issue(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        \n+        # Second evaluation with 'order' only, expecting the same result due to the issue\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, ('a', 2))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_values_list_issue_inverted.py b/tests/queries/test_values_list_issue_inverted.py\nnew file mode 100644\nindex 0000000..5b0466d\n--- /dev/null\n+++ b/tests/queries/test_values_list_issue_inverted.py\n@@ -0,0 +1,16 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class TestValuesListIssue(TestCase):\n+    def test_composed_queries_values_list_issue(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        \n+        # Second evaluation with 'order' only, expecting a different result\n+        # The test should fail here if the bug is present\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, (2,), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2252760,
  "num_received_chars": 164850,
  "elapsed_time": 1138.8525204658508,
  "lint_repair_count": 17,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}