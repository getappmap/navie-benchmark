{
  "instance_id": "django__django-11532",
  "edit_test_file": "tests/httpwrappers/tests.py",
  "code_patch": "diff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex e393b4c..4f9e119 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -13,6 +13,7 @@ from email.mime.text import MIMEText\n from email.utils import formatdate, getaddresses, make_msgid\n from io import BytesIO, StringIO\n from pathlib import Path\n+import idna\n \n from django.conf import settings\n from django.core.mail.utils import DNS_NAME\n@@ -257,7 +258,12 @@ class EmailMessage:\n             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)\n         if 'message-id' not in header_names:\n             # Use cached DNS_NAME for performance\n-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)\n+            domain = str(DNS_NAME)\n+            try:\n+                domain = idna.encode(domain).decode('ascii')\n+            except UnicodeError:\n+                pass\n+            msg['Message-ID'] = make_msgid(domain=domain)\n         for name, value in self.extra_headers.items():\n             if name.lower() != 'from':  # From is already handled\n                 msg[name] = value\n",
  "test_patch": "diff --git a/tests/httpwrappers/test_unicode_email_punycode.py b/tests/httpwrappers/test_unicode_email_punycode.py\nnew file mode 100644\nindex 0000000..85f0da6\n--- /dev/null\n+++ b/tests/httpwrappers/test_unicode_email_punycode.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from unittest.mock import patch\n+from django.core.mail import EmailMessage\n+\n+class TestUnicodeEmailPunycode(unittest.TestCase):\n+    def test_email_message_id_with_non_ascii_domain(self):\n+        with patch(\"django.core.mail.message.DNS_NAME\", \"\u6f22\u5b57\"):\n+            email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+            email.encoding = 'iso-8859-1'\n+            with self.assertRaises(UnicodeEncodeError):\n+                email.message()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/httpwrappers/test_unicode_email_punycode_inverted.py b/tests/httpwrappers/test_unicode_email_punycode_inverted.py\nnew file mode 100644\nindex 0000000..4dd52f4\n--- /dev/null\n+++ b/tests/httpwrappers/test_unicode_email_punycode_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from unittest.mock import patch\n+from django.core.mail import EmailMessage\n+\n+class TestUnicodeEmailPunycode(unittest.TestCase):\n+    def test_email_message_id_with_non_ascii_domain(self):\n+        with patch(\"django.core.mail.message.DNS_NAME\", \"\u6f22\u5b57\"):\n+            email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+            email.encoding = 'iso-8859-1'\n+            try:\n+                email.message()\n+            except UnicodeEncodeError:\n+                self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 158298,
  "num_received_chars": 8918,
  "elapsed_time": 61.828842878341675,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}