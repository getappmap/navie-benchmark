{
  "instance_id": "django__django-12774",
  "edit_test_file": "tests/constraints/tests.py",
  "code_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 98912a6..f4ec75b 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -88,6 +88,9 @@ class UniqueConstraint(BaseConstraint):\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n         return sql % tuple(schema_editor.quote_value(p) for p in params)\n \n+    def is_field_unique(self, field_name):\n+        return field_name in self.fields\n+\n     def constraint_sql(self, model, schema_editor):\n         fields = [model._meta.get_field(field_name).column for field_name in self.fields]\n         condition = self._get_condition_sql(model, schema_editor)\n\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0d..5806b76 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -26,6 +26,7 @@ from django.db.models.utils import resolve_callables\n from django.utils import timezone\n from django.utils.functional import cached_property, partition\n from django.utils.version import get_version\n+from django.db.models.constraints import UniqueConstraint\n \n # The maximum number of results to fetch in a get() query.\n MAX_GET_RESULTS = 21\n@@ -689,8 +690,16 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n-            raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n+        if field_name != 'pk':\n+            field = self.model._meta.get_field(field_name)\n+            if not field.unique:\n+                # Check if the field is part of a UniqueConstraint\n+                unique_constraint_found = any(\n+                    isinstance(constraint, UniqueConstraint) and constraint.is_field_unique(field_name)\n+                    for constraint in self.model._meta.constraints\n+                )\n+                if not unique_constraint_found:\n+                    raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n                 return {}\n",
  "test_patch": "diff --git a/tests/constraints/test_query_set_in_bulk_unique_constraint.py b/tests/constraints/test_query_set_in_bulk_unique_constraint.py\nnew file mode 100644\nindex 0000000..d1c4023\n--- /dev/null\n+++ b/tests/constraints/test_query_set_in_bulk_unique_constraint.py\n@@ -0,0 +1,14 @@\n+from django.db import models, IntegrityError\n+from django.test import TestCase\n+from .models import UniqueConstraintProduct\n+\n+class QuerySetInBulkUniqueConstraintTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.product1 = UniqueConstraintProduct.objects.create(name='product1', color='red')\n+        cls.product2 = UniqueConstraintProduct.objects.create(name='product2', color='blue')\n+\n+    def test_in_bulk_with_unique_constraint(self):\n+        msg = \"in_bulk()'s field_name must be a unique field but 'name' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            UniqueConstraintProduct.objects.in_bulk(field_name='name')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/constraints/test_query_set_in_bulk_unique_constraint_inverted.py b/tests/constraints/test_query_set_in_bulk_unique_constraint_inverted.py\nnew file mode 100644\nindex 0000000..8e142e5\n--- /dev/null\n+++ b/tests/constraints/test_query_set_in_bulk_unique_constraint_inverted.py\n@@ -0,0 +1,14 @@\n+from django.db import models, IntegrityError\n+from django.test import TestCase\n+from .models import UniqueConstraintProduct\n+\n+class QuerySetInBulkUniqueConstraintTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.product1 = UniqueConstraintProduct.objects.create(name='product1', color='red')\n+        cls.product2 = UniqueConstraintProduct.objects.create(name='product2', color='blue')\n+\n+    def test_in_bulk_with_unique_constraint(self):\n+        # Alter the test to fail when the issue is observed\n+        with self.assertRaisesMessage(ValueError, \"__BUG__HERE__\"):\n+            UniqueConstraintProduct.objects.in_bulk(field_name='name')\n\\ No newline at end of file\n",
  "num_sent_chars": 2049075,
  "num_received_chars": 99019,
  "elapsed_time": 627.5877678394318,
  "lint_repair_count": 16,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}