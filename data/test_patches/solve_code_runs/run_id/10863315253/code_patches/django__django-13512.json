{
  "instance_id": "django__django-13512",
  "edit_test_file": "tests/forms_tests/field_tests/test_jsonfield.py",
  "code_patch": "diff --git a/django/core/signing.py b/django/core/signing.py\nindex c6713c3..2a517ca 100644\n--- a/django/core/signing.py\n+++ b/django/core/signing.py\n@@ -84,7 +84,7 @@ class JSONSerializer:\n     signing.loads.\n     \"\"\"\n     def dumps(self, obj):\n-        return json.dumps(obj, separators=(',', ':')).encode('latin-1')\n+        return json.dumps(obj, separators=(',', ':'), ensure_ascii=False).encode('latin-1')\n \n     def loads(self, data):\n         return json.loads(data.decode('latin-1'))\n\ndiff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4c..66c039c 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n",
  "test_patch": "diff --git a/tests/forms_tests/field_tests/test_unicodejsonfield.py b/tests/forms_tests/field_tests/test_unicodejsonfield.py\nnew file mode 100644\nindex 0000000..023ac57\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_unicodejsonfield.py\n@@ -0,0 +1,16 @@\n+import json\n+from django.forms import Form, JSONField\n+from django.test import SimpleTestCase\n+\n+class AdminUnicodeJSONFieldTest(SimpleTestCase):\n+    def test_unicode_jsonfield_display(self):\n+        class JSONForm(Form):\n+            json_field = JSONField()\n+\n+        # Simulate form data with Chinese characters\n+        form_data = {'json_field': '\u4e2d\u56fd'}\n+        form = JSONForm(data=form_data)\n+\n+        # Check if the JSONField displays the unicode characters as ASCII\n+        serialized_value = json.dumps(form_data['json_field'])\n+        self.assertEqual(serialized_value, '\"\\\\u4e2d\\\\u56fd\"')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/field_tests/test_unicodejsonfield_inverted.py b/tests/forms_tests/field_tests/test_unicodejsonfield_inverted.py\nnew file mode 100644\nindex 0000000..958eaca\n--- /dev/null\n+++ b/tests/forms_tests/field_tests/test_unicodejsonfield_inverted.py\n@@ -0,0 +1,18 @@\n+import json\n+from django.forms import Form, JSONField\n+from django.test import SimpleTestCase\n+\n+class AdminUnicodeJSONFieldTest(SimpleTestCase):\n+    def test_unicode_jsonfield_display(self):\n+        class JSONForm(Form):\n+            json_field = JSONField()\n+\n+        # Simulate form data with Chinese characters\n+        form_data = {'json_field': '\u4e2d\u56fd'}\n+        form = JSONForm(data=form_data)\n+\n+        # Check if the JSONField displays the unicode characters as ASCII\n+        serialized_value = json.dumps(form_data['json_field'])\n+        # Alter the test to fail when the issue is observed\n+        if serialized_value == '\"\\\\u4e2d\\\\u56fd\"':\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 681749,
  "num_received_chars": 21735,
  "elapsed_time": 180.98986196517944,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}