{
  "instance_id": "django__django-11815",
  "edit_test_file": "tests/field_deconstruction/tests.py",
  "code_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd..2884b61 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        name_string, name_imports = serializer_factory(self.value.name).serialize()\n+        imports = {'import %s' % module, *name_imports}\n+        return \"%s.%s[%s]\" % (module, enum_class.__name__, name_string), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n",
  "test_patch": "diff --git a/tests/field_deconstruction/test_enum_migration_issue.py b/tests/field_deconstruction/test_enum_migration_issue.py\nnew file mode 100644\nindex 0000000..2c13a15\n--- /dev/null\n+++ b/tests/field_deconstruction/test_enum_migration_issue.py\n@@ -0,0 +1,21 @@\n+from enum import Enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class Status(Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+    def __str__(self):\n+        return self.name\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class EnumMigrationIssueTest(SimpleTestCase):\n+    def test_enum_migration_uses_value_instead_of_name(self):\n+        field = Item._meta.get_field('status')\n+        name, path, args, kwargs = field.deconstruct()\n+        # The issue is that the default is using the value of the Enum instead of its name\n+        self.assertEqual(kwargs['default'], Status('Good'))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/field_deconstruction/test_enum_migration_issue_inverted.py b/tests/field_deconstruction/test_enum_migration_issue_inverted.py\nnew file mode 100644\nindex 0000000..be2fe19\n--- /dev/null\n+++ b/tests/field_deconstruction/test_enum_migration_issue_inverted.py\n@@ -0,0 +1,24 @@\n+from enum import Enum\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class Status(Enum):\n+    GOOD = _('Good')\n+    BAD = _('Bad')\n+\n+    def __str__(self):\n+        return self.name\n+\n+class Item(models.Model):\n+    status = models.CharField(default=Status.GOOD, max_length=128)\n+\n+class EnumMigrationIssueTest(SimpleTestCase):\n+    def test_enum_migration_uses_value_instead_of_name(self):\n+        field = Item._meta.get_field('status')\n+        name, path, args, kwargs = field.deconstruct()\n+        # The issue is that the default is using the value of the Enum instead of its name\n+        # Alter the test to fail when the issue is observed\n+        if kwargs['default'] == Status('Good'):\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(kwargs['default'], Status['GOOD'])\n\\ No newline at end of file\n",
  "num_sent_chars": 768946,
  "num_received_chars": 26728,
  "elapsed_time": 191.25134801864624,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}