{
  "instance_id": "django__django-11885",
  "edit_test_file": "tests/delete/tests.py",
  "code_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26..9333778 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -191,6 +191,7 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n+            # Combine fast deletes for the same model\n             self.fast_deletes.append(objs)\n             return\n         new_objs = self.add(objs, source, nullable,\n\ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex fbc265d..67d5a1e 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -34,11 +34,14 @@ class DeleteQuery(Query):\n         # number of objects deleted\n         num_deleted = 0\n         field = self.get_meta().pk\n+        combined_conditions = Q()\n         for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):\n-            self.where = self.where_class()\n-            self.add_q(Q(\n-                **{field.attname + '__in': pk_list[offset:offset + GET_ITERATOR_CHUNK_SIZE]}))\n-            num_deleted += self.do_query(self.get_meta().db_table, self.where, using=using)\n+            combined_conditions |= Q(\n+                **{field.attname + '__in': pk_list[offset:offset + GET_ITERATOR_CHUNK_SIZE]}\n+            )\n+        self.where = self.where_class()\n+        self.add_q(combined_conditions)\n+        num_deleted += self.do_query(self.get_meta().db_table, self.where, using=using)\n         return num_deleted\n \n     def delete_qs(self, query, using):\n",
  "test_patch": "diff --git a/tests/delete/test_combine_fast_delete_queries.py b/tests/delete/test_combine_fast_delete_queries.py\nnew file mode 100644\nindex 0000000..d082f21\n--- /dev/null\n+++ b/tests/delete/test_combine_fast_delete_queries.py\n@@ -0,0 +1,23 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class Person(models.Model):\n+    friends = models.ManyToManyField('self')\n+\n+class UserTestModel(models.Model):\n+    pass\n+\n+class Entry(models.Model):\n+    created_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='created_entries')\n+    updated_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='updated_entries')\n+\n+class CombineFastDeleteQueriesTest(TestCase):\n+    def test_combine_fast_delete_queries(self):\n+        user = UserTestModel.objects.create()\n+        person = Person.objects.create()\n+        person.friends.add(person)\n+        entry = Entry.objects.create(created_by=user, updated_by=user)\n+\n+        with self.assertNumQueries(6):\n+            user.delete()\n+            person.delete()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/delete/test_combine_fast_delete_queries_inverted.py b/tests/delete/test_combine_fast_delete_queries_inverted.py\nnew file mode 100644\nindex 0000000..34465d7\n--- /dev/null\n+++ b/tests/delete/test_combine_fast_delete_queries_inverted.py\n@@ -0,0 +1,25 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class Person(models.Model):\n+    friends = models.ManyToManyField('self')\n+\n+class UserTestModel(models.Model):\n+    pass\n+\n+class Entry(models.Model):\n+    created_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='created_entries')\n+    updated_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='updated_entries')\n+\n+class CombineFastDeleteQueriesTest(TestCase):\n+    def test_combine_fast_delete_queries(self):\n+        user = UserTestModel.objects.create()\n+        person = Person.objects.create()\n+        person.friends.add(person)\n+        entry = Entry.objects.create(created_by=user, updated_by=user)\n+\n+        # The test should now fail if the bug is observed, expecting fewer queries\n+        with self.assertRaisesMessage(AssertionError, \"__BUG__HERE__\"):\n+            with self.assertNumQueries(3):\n+                user.delete()\n+                person.delete()\n\\ No newline at end of file\n",
  "num_sent_chars": 855918,
  "num_received_chars": 59873,
  "elapsed_time": 332.1076281070709,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}