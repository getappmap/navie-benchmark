{
  "instance_id": "django__django-14311",
  "edit_test_file": "tests/utils_tests/test_module_loading.py",
  "code_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5..0f2f7fc 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -142,6 +142,25 @@ def iter_modules_and_files(modules, extra_files):\n         if spec.has_location:\n             origin = spec.loader.archive if isinstance(spec.loader, zipimporter) else spec.origin\n             sys_file_paths.append(origin)\n+        elif hasattr(module, '__file__'):\n+            # Handle standalone modules that are not part of a package.\n+            sys_file_paths.append(module.__file__)\n+        if module.__name__ == '__main__':\n+            # __main__ (usually manage.py) doesn't always have a __spec__ set.\n+            # Handle this by falling back to using __file__, resolved below.\n+            # See https://docs.python.org/reference/import.html#main-spec\n+            # __file__ may not exists, e.g. when running ipdb debugger.\n+            if hasattr(module, '__file__'):\n+                sys_file_paths.append(module.__file__)\n+            continue\n+        if getattr(module, '__spec__', None) is None:\n+            continue\n+        spec = module.__spec__\n+        # Modules could be loaded from places without a concrete location. If\n+        # this is the case, skip them.\n+        if spec.has_location:\n+            origin = spec.loader.archive if isinstance(spec.loader, zipimporter) else spec.origin\n+            sys_file_paths.append(origin)\n \n     results = set()\n     for filename in itertools.chain(sys_file_paths, extra_files):\n",
  "test_patch": "diff --git a/tests/utils_tests/test_module_autoreload_issue.py b/tests/utils_tests/test_module_autoreload_issue.py\nnew file mode 100644\nindex 0000000..7bdaabd\n--- /dev/null\n+++ b/tests/utils_tests/test_module_autoreload_issue.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from unittest.mock import patch\n+from django.utils import autoreload\n+\n+class TestAutoreloadWithCustomModule(unittest.TestCase):\n+    def test_autoreload_with_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue with autoreloading when using `python -m custom_module runserver`.\n+        The test should pass when the issue is observed, i.e., when the incorrect arguments are produced.\n+        \"\"\"\n+        original_args = ['-m', 'custom_module.runserver']\n+        expected_args = ['-m', 'custom_module.runserver']\n+\n+        with patch('django.utils.autoreload.get_child_arguments', return_value=original_args):\n+            actual_args = autoreload.get_child_arguments()\n+            self.assertEqual(actual_args, expected_args, \"Autoreload arguments are incorrect for custom module.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_module_autoreload_issue_inverted.py b/tests/utils_tests/test_module_autoreload_issue_inverted.py\nnew file mode 100644\nindex 0000000..a9a036a\n--- /dev/null\n+++ b/tests/utils_tests/test_module_autoreload_issue_inverted.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from unittest.mock import patch\n+from django.utils import autoreload\n+\n+class TestAutoreloadWithCustomModule(unittest.TestCase):\n+    def test_autoreload_with_custom_module(self):\n+        \"\"\"\n+        Test to reproduce the issue with autoreloading when using `python -m custom_module runserver`.\n+        The test should fail when the issue is observed, i.e., when the incorrect arguments are produced.\n+        \"\"\"\n+        original_args = ['-m', 'custom_module.runserver']\n+        expected_args = ['-m', 'custom_module.runserver']\n+\n+        with patch('django.utils.autoreload.get_child_arguments', return_value=original_args):\n+            actual_args = autoreload.get_child_arguments()\n+            if actual_args == expected_args:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertNotEqual(actual_args, expected_args, \"Autoreload arguments are incorrect for custom module.\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1081269,
  "num_received_chars": 73383,
  "elapsed_time": 443.10542583465576,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}