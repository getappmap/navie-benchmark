{
  "instance_id": "django__django-11119",
  "edit_test_file": "tests/template_tests/filter_tests/test_autoescape.py",
  "code_patch": "diff --git a/django/template/engine.py b/django/template/engine.py\nindex dfaa67b..ff9ce58 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -160,7 +160,7 @@ class Engine:\n         if isinstance(context, Context):\n             return t.render(context)\n         else:\n-            return t.render(Context(context))\n+            return t.render(Context(context, autoescape=self.autoescape))\n \n     def select_template(self, template_name_list):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/template_tests/filter_tests/test_render_to_string_autoescape.py b/tests/template_tests/filter_tests/test_render_to_string_autoescape.py\nnew file mode 100644\nindex 0000000..6fa004b\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_render_to_string_autoescape.py\n@@ -0,0 +1,14 @@\n+from django.template import Engine, Context\n+from django.test import SimpleTestCase\n+\n+class EngineRenderToStringAutoescapeTests(SimpleTestCase):\n+    def test_render_to_string_autoescape_false(self):\n+        \"\"\"\n+        Test that Engine.render_to_string() does not honor the autoescape attribute.\n+        \"\"\"\n+        engine = Engine(autoescape=False)\n+        template_string = '{{ var }}'\n+        context = Context({'var': '<b>bold</b>'})\n+        output = engine.from_string(template_string).render(context)\n+        # The output should not be escaped, but due to the issue, it is.\n+        self.assertEqual(output, '&lt;b&gt;bold&lt;/b&gt;')\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/filter_tests/test_render_to_string_autoescape_inverted.py b/tests/template_tests/filter_tests/test_render_to_string_autoescape_inverted.py\nnew file mode 100644\nindex 0000000..3fd2d59\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_render_to_string_autoescape_inverted.py\n@@ -0,0 +1,17 @@\n+from django.template import Engine, Context\n+from django.test import SimpleTestCase\n+\n+class EngineRenderToStringAutoescapeTests(SimpleTestCase):\n+    def test_render_to_string_autoescape_false(self):\n+        \"\"\"\n+        Test that Engine.render_to_string() does not honor the autoescape attribute.\n+        \"\"\"\n+        engine = Engine(autoescape=False)\n+        template_string = '{{ var }}'\n+        context = Context({'var': '<b>bold</b>'})\n+        output = engine.from_string(template_string).render(context)\n+        # The output should not be escaped, but due to the issue, it is.\n+        # Alter the test to fail when the issue is observed.\n+        if output == '&lt;b&gt;bold&lt;/b&gt;':\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertEqual(output, '<b>bold</b>')\n\\ No newline at end of file\n",
  "num_sent_chars": 973441,
  "num_received_chars": 33687,
  "elapsed_time": 236.61522579193115,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}