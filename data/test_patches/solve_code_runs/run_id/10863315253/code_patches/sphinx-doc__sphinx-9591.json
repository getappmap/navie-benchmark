{
  "instance_id": "sphinx-doc__sphinx-9591",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47b..ec500bb 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -24,15 +24,19 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n-        if callable(obj):\n+        if callable(obj) or isinstance(obj, property):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n-            for param in sig.parameters.values():\n-                if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+            if isinstance(obj, property):\n+                if obj.fget and obj.fget.__annotations__.get('return'):\n+                    annotation['return'] = typing.stringify(obj.fget.__annotations__['return'])\n+            else:\n+                sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+                for param in sig.parameters.values():\n+                    if param.annotation is not param.empty:\n+                        annotation[param.name] = typing.stringify(param.annotation)\n+                if sig.return_annotation is not sig.empty:\n+                    annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_crossrefs.py b/tests/test_ext_autodoc_crossrefs.py\nnew file mode 100644\nindex 0000000..d70065e\n--- /dev/null\n+++ b/tests/test_ext_autodoc_crossrefs.py\n@@ -0,0 +1,15 @@\n+import pytest\n+from sphinx.ext.autodoc import Documenter\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_property_type_annotation_crossref(app: SphinxTestApp):\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check if the cross-reference for the property's type annotation is missing\n+    # This is the expected incorrect behavior as described in the issue\n+    assert '<span class=\"n\"><span class=\"pre\">Point</span></span>' not in content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_crossrefs_inverted.py b/tests/test_ext_autodoc_crossrefs_inverted.py\nnew file mode 100644\nindex 0000000..4dc3158\n--- /dev/null\n+++ b/tests/test_ext_autodoc_crossrefs_inverted.py\n@@ -0,0 +1,16 @@\n+import pytest\n+from sphinx.ext.autodoc import Documenter\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_property_type_annotation_crossref(app: SphinxTestApp):\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check if the cross-reference for the property's type annotation is present\n+    # This is the expected correct behavior, so the test should fail if the bug is observed\n+    if '<span class=\"n\"><span class=\"pre\">Point</span></span>' not in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2204957,
  "num_received_chars": 62086,
  "elapsed_time": 502.4432728290558,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 403571
}