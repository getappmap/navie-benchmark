{
  "instance_id": "django__django-16032",
  "edit_test_file": "tests/annotations/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..1a181f8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1588,7 +1588,10 @@ class QuerySet:\n         Return a query set with added aliases for extra data or aggregations.\n         \"\"\"\n         self._not_support_combined_queries(\"alias\")\n-        return self._annotate(args, kwargs, select=False)\n+        clone = self._annotate(args, kwargs, select=False)\n+        # Clear selected fields to prevent multiple columns in subqueries\n+        clone.query.set_values(())\n+        return clone\n \n     def _annotate(self, args, kwargs, select=True):\n         self._validate_values_are_expressions(\n\ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex d8a246d..4054211 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -156,6 +156,12 @@ class InsertQuery(Query):\n         self.fields = fields\n         self.objs = objs\n         self.raw = raw\n+        # Ensure only necessary fields are selected for subqueries\n+        self.clear_select_fields()\n+\n+    def clear_select_fields(self):\n+        \"\"\"Clear select fields to prevent multiple columns in subqueries.\"\"\"\n+        self.select = []\n \n \n class AggregateQuery(Query):\n",
  "test_patch": "diff --git a/tests/annotations/annotations_alias_bug_test.py b/tests/annotations/annotations_alias_bug_test.py\nnew file mode 100644\nindex 0000000..1c8a88c\n--- /dev/null\n+++ b/tests/annotations/annotations_alias_bug_test.py\n@@ -0,0 +1,21 @@\n+from django.db.models import Value\n+from django.test import TestCase\n+from .models import Book, Publisher\n+\n+class AnnotationAliasBugTest(TestCase):\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        with self.assertRaisesMessage(Exception, \"sub-select returns 10 columns - expected 1\"):\n+            list(publisher_books_qs)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/annotations/annotations_alias_bug_test_inverted.py b/tests/annotations/annotations_alias_bug_test_inverted.py\nnew file mode 100644\nindex 0000000..baf756c\n--- /dev/null\n+++ b/tests/annotations/annotations_alias_bug_test_inverted.py\n@@ -0,0 +1,23 @@\n+from django.db.models import Value\n+from django.test import TestCase\n+from .models import Book, Publisher\n+\n+class AnnotationAliasBugTest(TestCase):\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        # This test should now fail when the bug is observed\n+        with self.assertRaisesMessage(Exception, \"__BUG__HERE__\"):\n+            if list(publisher_books_qs):\n+                raise Exception(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1790503,
  "num_received_chars": 37552,
  "elapsed_time": 283.0701358318329,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 148981
}