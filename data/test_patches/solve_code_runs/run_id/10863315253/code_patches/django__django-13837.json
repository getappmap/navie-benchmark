{
  "instance_id": "django__django-13837",
  "edit_test_file": "tests/utils_tests/test_autoreload.py",
  "code_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f..bd96d42 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,33 +216,34 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n-    py_script = Path(sys.argv[0])\n+    import __main__\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    if getattr(__main__, '__spec__', None) is not None:\n+        # The server was started with `python -m package`.\n+        package_name = __main__.__spec__.parent\n+        args += ['-m', package_name]\n         args += sys.argv[1:]\n-    elif not py_script.exists():\n-        # sys.argv[0] may not exist for several reasons on Windows.\n-        # It may exist with a .exe extension or have a -script.py suffix.\n-        exe_entrypoint = py_script.with_suffix('.exe')\n-        if exe_entrypoint.exists():\n-            # Should be executed directly, ignoring sys.executable.\n-            # TODO: Remove str() when dropping support for PY37.\n-            # args parameter accepts path-like on Windows from Python 3.8.\n-            return [str(exe_entrypoint), *sys.argv[1:]]\n-        script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)\n-        if script_entrypoint.exists():\n-            # Should be executed as usual.\n-            # TODO: Remove str() when dropping support for PY37.\n-            # args parameter accepts path-like on Windows from Python 3.8.\n-            return [*args, str(script_entrypoint), *sys.argv[1:]]\n-        raise RuntimeError('Script %s does not exist.' % py_script)\n     else:\n-        args += sys.argv\n+        py_script = Path(sys.argv[0])\n+        if not py_script.exists():\n+            # sys.argv[0] may not exist for several reasons on Windows.\n+            # It may exist with a .exe extension or have a -script.py suffix.\n+            exe_entrypoint = py_script.with_suffix('.exe')\n+            if exe_entrypoint.exists():\n+                # Should be executed directly, ignoring sys.executable.\n+                # TODO: Remove str() when dropping support for PY37.\n+                # args parameter accepts path-like on Windows from Python 3.8.\n+                return [str(exe_entrypoint), *sys.argv[1:]]\n+            script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)\n+            if script_entrypoint.exists():\n+                # Should be executed as usual.\n+                # TODO: Remove str() when dropping support for PY37.\n+                # args parameter accepts path-like on Windows from Python 3.8.\n+                return [*args, str(script_entrypoint), *sys.argv[1:]]\n+            raise RuntimeError('Script %s does not exist.' % py_script)\n+        else:\n+            args += sys.argv\n     return args\n \n \n",
  "test_patch": "diff --git a/tests/utils_tests/test_autoreload_mod.py b/tests/utils_tests/test_autoreload_mod.py\nnew file mode 100644\nindex 0000000..33f8549\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_mod.py\n@@ -0,0 +1,14 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadCommand(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_get_child_arguments_with_non_django_package(self):\n+        with self.assertRaises(RuntimeError):\n+            autoreload.get_child_arguments()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_autoreload_mod_inverted.py b/tests/utils_tests/test_autoreload_mod_inverted.py\nnew file mode 100644\nindex 0000000..0325ae9\n--- /dev/null\n+++ b/tests/utils_tests/test_autoreload_mod_inverted.py\n@@ -0,0 +1,17 @@\n+import sys\n+import unittest\n+from unittest import mock\n+from django.utils import autoreload\n+\n+class TestAutoreloadCommand(unittest.TestCase):\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_get_child_arguments_with_non_django_package(self):\n+        # The test should now fail when the issue is observed\n+        try:\n+            autoreload.get_child_arguments()\n+        except RuntimeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 823540,
  "num_received_chars": 39778,
  "elapsed_time": 276.84604239463806,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}