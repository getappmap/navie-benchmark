{
  "instance_id": "django__django-15814",
  "edit_test_file": "tests/defer/tests.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb9..2ee0a89 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1726,6 +1726,9 @@ class QuerySet:\n             field = field.split(LOOKUP_SEP, 1)[0]\n             if field in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n+        # Ensure primary key is included for proxy models\n+        if self.model._meta.proxy:\n+            fields += (self.model._meta.concrete_model._meta.pk.name,)\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n         return clone\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636..dc797a5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1750,6 +1750,9 @@ class Query(BaseExpression):\n                         \" not permitted.\" % (names[pos + 1], name)\n                     )\n                 break\n+        # Adjust opts to use concrete model's opts for proxy models\n+        if opts.proxy:\n+            opts = opts.concrete_model._meta\n         return path, final_field, targets, names[pos + 1 :]\n \n     def setup_joins(\n",
  "test_patch": "diff --git a/tests/defer/test_proxy_model_query_crash.py b/tests/defer/test_proxy_model_query_crash.py\nnew file mode 100644\nindex 0000000..78ba358\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"'id' is not in list\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/defer/test_proxy_model_query_crash_inverted.py b/tests/defer/test_proxy_model_query_crash_inverted.py\nnew file mode 100644\nindex 0000000..ec6866b\n--- /dev/null\n+++ b/tests/defer/test_proxy_model_query_crash_inverted.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelQueryCrashTest(TestCase):\n+    def test_proxy_model_query_crash(self):\n+        \"\"\"\n+        Reproduce the crash when using select_related() and only() on a proxy model.\n+        \"\"\"\n+        with self.assertRaises(ValueError) as cm:\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2232882,
  "num_received_chars": 94943,
  "elapsed_time": 665.9040133953094,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 99589
}