{
  "instance_id": "django__django-12325",
  "edit_test_file": "tests/model_inheritance/tests.py",
  "code_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6b..56426ee 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -8,7 +8,7 @@ from django.conf import settings\n from django.core.exceptions import FieldDoesNotExist, ImproperlyConfigured\n from django.db import connections\n from django.db.models import Manager\n-from django.db.models.fields import AutoField\n+from django.db.models.fields import AutoField, OneToOneField\n from django.db.models.fields.proxy import OrderWrt\n from django.db.models.query_utils import PathInfo\n from django.utils.datastructures import ImmutableList, OrderedSet\n@@ -240,21 +240,21 @@ class Options:\n \n         if self.pk is None:\n             if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n+                # Iterate over all OneToOneFields to find the one with parent_link=True\n+                parent_link_fields = [\n+                    fld for fld in self.local_fields\n+                    if isinstance(fld, OneToOneField) and fld.remote_field.parent_link\n+                ]\n+                if parent_link_fields:\n+                    field = parent_link_fields[0]\n+                else:\n+                    # Fallback to the first parent link if no parent_link=True is found\n+                    field = next(iter(self.parents.values()))\n+                    already_created = [fld for fld in self.local_fields if fld.name == field.name]\n+                    if already_created:\n+                        field = already_created[0]\n                 field.primary_key = True\n                 self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n-                    raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n-                    )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n",
  "test_patch": "diff --git a/tests/model_inheritance/test_mti_one_to_one_conflict.py b/tests/model_inheritance/test_mti_one_to_one_conflict.py\nnew file mode 100644\nindex 0000000..fe9e581\n--- /dev/null\n+++ b/tests/model_inheritance/test_mti_one_to_one_conflict.py\n@@ -0,0 +1,15 @@\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n+\n+class Document(models.Model):\n+    pass\n+\n+class MTIOnetoOneConfusionTest(TestCase):\n+    def test_mti_onetoone_confusion(self):\n+        with self.assertRaises(ImproperlyConfigured) as cm:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        self.assertIn(\"Add parent_link=True to model_inheritance.Picking.origin.\", str(cm.exception))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_inheritance/test_mti_one_to_one_conflict_inverted.py b/tests/model_inheritance/test_mti_one_to_one_conflict_inverted.py\nnew file mode 100644\nindex 0000000..d74f657\n--- /dev/null\n+++ b/tests/model_inheritance/test_mti_one_to_one_conflict_inverted.py\n@@ -0,0 +1,16 @@\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n+\n+class Document(models.Model):\n+    pass\n+\n+class MTIOnetoOneConfusionTest(TestCase):\n+    def test_mti_onetoone_confusion(self):\n+        with self.assertRaises(ImproperlyConfigured) as cm:\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        # Alter the assertion to ensure the test fails when the bug is observed\n+        self.assertNotIn(\"Add parent_link=True to model_inheritance.Picking.origin.\", str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1564224,
  "num_received_chars": 96200,
  "elapsed_time": 560.1720983982086,
  "lint_repair_count": 13,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}