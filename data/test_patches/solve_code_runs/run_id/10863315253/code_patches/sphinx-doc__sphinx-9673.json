{
  "instance_id": "sphinx-doc__sphinx-9673",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47b..f2d4356 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -151,6 +151,8 @@ def augment_descriptions_with_types(\n             has_type.add(name)\n         elif parts[0] == 'return':\n             has_description.add('return')\n+            if 'return' in annotations and 'return' not in has_type:\n+                field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n \n",
  "test_patch": "diff --git a/tests/test_autodoc_typehints_description_target.py b/tests/test_autodoc_typehints_description_target.py\nnew file mode 100644\nindex 0000000..8cbce07\n--- /dev/null\n+++ b/tests/test_autodoc_typehints_description_target.py\n@@ -0,0 +1,40 @@\n+\"\"\"\n+    test_autodoc_typehints_description_target\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with Napoleon and autodoc_typehints_description_target.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ConfigError\n+\n+class TestAutodocTypehintsDescriptionTarget(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.confdir = self.srcdir\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+\n+    def test_autodoc_typehints_with_napoleon(self):\n+        with self.assertRaises(ConfigError):\n+            Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                buildername='text',\n+                confoverrides={\n+                    'extensions': ['sphinx.ext.autodoc', 'sphinx.ext.napoleon'],\n+                    'autodoc_typehints': 'description',\n+                    'autodoc_typehints_description_target': 'documented',\n+                    'napoleon_numpy_docstring': False,\n+                }\n+            )\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_autodoc_typehints_description_target_inverted.py b/tests/test_autodoc_typehints_description_target_inverted.py\nnew file mode 100644\nindex 0000000..5a11c42\n--- /dev/null\n+++ b/tests/test_autodoc_typehints_description_target_inverted.py\n@@ -0,0 +1,42 @@\n+\"\"\"\n+    test_autodoc_typehints_description_target\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension with Napoleon and autodoc_typehints_description_target.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ConfigError\n+\n+class TestAutodocTypehintsDescriptionTarget(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.confdir = self.srcdir\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+\n+    def test_autodoc_typehints_with_napoleon(self):\n+        try:\n+            Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                buildername='text',\n+                confoverrides={\n+                    'extensions': ['sphinx.ext.autodoc', 'sphinx.ext.napoleon'],\n+                    'autodoc_typehints': 'description',\n+                    'autodoc_typehints_description_target': 'documented',\n+                    'napoleon_numpy_docstring': False,\n+                }\n+            )\n+        except ConfigError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 844959,
  "num_received_chars": 57230,
  "elapsed_time": 309.4035589694977,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 6295
}