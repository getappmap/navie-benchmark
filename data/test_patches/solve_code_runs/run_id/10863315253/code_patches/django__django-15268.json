{
  "instance_id": "django__django-15268",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d..ef9fbe5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -491,6 +491,16 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n             kwargs\n         )\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            if not self.option_value and operation.option_value:\n+                return [operation]\n+            elif self.option_value and not operation.option_value:\n+                return [self]\n+            elif self.option_value and operation.option_value:\n+                return [self.__class__(self.name, operation.option_value)]\n+        return super().reduce(operation, app_label)\n+\n     def state_forwards(self, app_label, state):\n         state.alter_model_options(\n             app_label,\n",
  "test_patch": "diff --git a/tests/migrations/test_optimize_alter_operations.py b/tests/migrations/test_optimize_alter_operations.py\nnew file mode 100644\nindex 0000000..633682c\n--- /dev/null\n+++ b/tests/migrations/test_optimize_alter_operations.py\n@@ -0,0 +1,43 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class TestOptimizeAlterOperations(SimpleTestCase):\n+    def test_multiple_alter_operations_not_optimized(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are not optimized into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        expected_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, app_label='test_app')\n+\n+        self.assertEqual(optimized_operations, operations)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_optimize_alter_operations_inverted.py b/tests/migrations/test_optimize_alter_operations_inverted.py\nnew file mode 100644\nindex 0000000..5bee75b\n--- /dev/null\n+++ b/tests/migrations/test_optimize_alter_operations_inverted.py\n@@ -0,0 +1,45 @@\n+from django.db import migrations\n+from django.test import SimpleTestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+class TestOptimizeAlterOperations(SimpleTestCase):\n+    def test_multiple_alter_operations_not_optimized(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are not optimized into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        expected_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        optimizer = MigrationOptimizer()\n+        optimized_operations = optimizer.optimize(operations, app_label='test_app')\n+\n+        # Alter the assertion to fail when the bug is observed\n+        if optimized_operations == operations:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1289404,
  "num_received_chars": 89295,
  "elapsed_time": 934.7971258163452,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 4577
}