{
  "instance_id": "django__django-11490",
  "edit_test_file": "tests/queries/test_qs_combinators.py",
  "code_patch": "diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex fbc265d..7e29a4b 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -42,25 +42,35 @@ class DeleteQuery(Query):\n         return num_deleted\n \n     def delete_qs(self, query, using):\n-        \"\"\"\n-        Delete the queryset in one SQL query (if possible). For simple queries\n-        this is done by copying the query.query.where to self.query, for\n-        complex queries by using subquery.\n-        \"\"\"\n-        innerq = query.query\n-        # Make sure the inner query has at least one table in use.\n-        innerq.get_initial_alias()\n-        # The same for our new query.\n-        self.get_initial_alias()\n-        innerq_used_tables = tuple([t for t in innerq.alias_map if innerq.alias_refcount[t]])\n-        if not innerq_used_tables or innerq_used_tables == tuple(self.alias_map):\n-            # There is only the base table in use in the query.\n-            self.where = innerq.where\n-        else:\n-            pk = query.model._meta.pk\n-            if not connections[using].features.update_can_self_select:\n-                # We can't do the delete using subquery.\n-                values = list(query.values_list('pk', flat=True))\n+            \"\"\"\n+            Delete the queryset in one SQL query (if possible). For simple queries\n+            this is done by copying the query.query.where to self.query, for\n+            complex queries by using subquery.\n+            \"\"\"\n+            innerq = query.query\n+            # Make sure the inner query has at least one table in use.\n+            innerq.get_initial_alias()\n+            # The same for our new query.\n+            self.get_initial_alias()\n+            innerq_used_tables = tuple([t for t in innerq.alias_map if innerq.alias_refcount[t]])\n+            if not innerq_used_tables or innerq_used_tables == tuple(self.alias_map):\n+                # There is only the base table in use in the query.\n+                self.where = innerq.where\n+            else:\n+                pk = query.model._meta.pk\n+                if not connections[using].features.update_can_self_select:\n+                    # We can't do the delete using subquery.\n+                    values = list(query.values_list('pk', flat=True))\n+                else:\n+                    innerq.clear_select_clause()\n+                    innerq.select = [\n+                        pk.get_col(self.get_initial_alias())\n+                    ]\n+                    values = innerq\n+                self.where = self.where_class()\n+                self.add_q(Q(pk__in=values))\n+            cursor = self.get_compiler(using).execute_sql(CURSOR)\n+            return cursor.rowcount if cursor else 0\n                 if not values:\n                     return 0\n                 return self.delete_batch(values, using)\n@@ -180,6 +190,13 @@ class InsertQuery(Query):\n         self.objs = objs\n         self.raw = raw\n \n+    def clear_select_clause(self):\n+        \"\"\"\n+        Clear the select clause to ensure that the query can be recomputed\n+        with a new set of columns when values() or values_list() is called.\n+        \"\"\"\n+        self.select = []\n+\n \n class AggregateQuery(Query):\n     \"\"\"\n",
  "test_patch": "diff --git a/tests/queries/test_values_list_issue.py b/tests/queries/test_values_list_issue.py\nnew file mode 100644\nindex 0000000..c4ea759\n--- /dev/null\n+++ b/tests/queries/test_values_list_issue.py\n@@ -0,0 +1,15 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class TestValuesListIssue(TestCase):\n+    def test_composed_queries_values_list_issue(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        \n+        # Second evaluation with 'order' only, expecting the same result due to the issue\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, ('a', 2))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_values_list_issue_inverted.py b/tests/queries/test_values_list_issue_inverted.py\nnew file mode 100644\nindex 0000000..5b0466d\n--- /dev/null\n+++ b/tests/queries/test_values_list_issue_inverted.py\n@@ -0,0 +1,16 @@\n+from django.test import TestCase\n+from .models import ReservedName\n+\n+class TestValuesListIssue(TestCase):\n+    def test_composed_queries_values_list_issue(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # First evaluation with 'name' and 'order'\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        \n+        # Second evaluation with 'order' only, expecting a different result\n+        # The test should fail here if the bug is present\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, (2,), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1046377,
  "num_received_chars": 81613,
  "elapsed_time": 531.1559281349182,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}