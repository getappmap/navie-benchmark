{
  "instance_id": "django__django-15368",
  "edit_test_file": "tests/queries/test_bulk_update.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex f8d848e..f2f9797 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -670,7 +670,7 @@ class QuerySet:\n                 when_statements = []\n                 for obj in batch_objs:\n                     attr = getattr(obj, field.attname)\n-                    if not isinstance(attr, Expression):\n+                    if not hasattr(attr, 'resolve_expression'):\n                         attr = Value(attr, output_field=field)\n                     when_statements.append(When(pk=obj.pk, then=attr))\n                 case_statement = Case(*when_statements, output_field=field)\n",
  "test_patch": "diff --git a/tests/queries/test_bulk_update_F_expressions.py b/tests/queries/test_bulk_update_F_expressions.py\nnew file mode 100644\nindex 0000000..4310b85\n--- /dev/null\n+++ b/tests/queries/test_bulk_update_F_expressions.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Note\n+\n+class BulkUpdateFExpressionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.note = Note.objects.create(note='initial', misc='misc')\n+\n+    def test_f_expression_bulk_update(self):\n+        # Assign a plain F expression to a model instance field\n+        self.note.note = F('misc')\n+        # Save with bulk_update\n+        Note.objects.bulk_update([self.note], ['note'])\n+        # Refresh from db and check if the issue is reproduced\n+        self.note.refresh_from_db()\n+        self.assertEqual(self.note.note, 'F(misc)')  # Expecting the incorrect output\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_bulk_update_F_expressions_inverted.py b/tests/queries/test_bulk_update_F_expressions_inverted.py\nnew file mode 100644\nindex 0000000..9afba7a\n--- /dev/null\n+++ b/tests/queries/test_bulk_update_F_expressions_inverted.py\n@@ -0,0 +1,21 @@\n+import unittest\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Note\n+\n+class BulkUpdateFExpressionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.note = Note.objects.create(note='initial', misc='misc')\n+\n+    def test_f_expression_bulk_update(self):\n+        # Assign a plain F expression to a model instance field\n+        self.note.note = F('misc')\n+        # Save with bulk_update\n+        Note.objects.bulk_update([self.note], ['note'])\n+        # Refresh from db and check if the issue is reproduced\n+        self.note.refresh_from_db()\n+        # The test should now fail if the bug is present\n+        if self.note.note == 'F(misc)':\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertNotEqual(self.note.note, 'F(misc)')\n\\ No newline at end of file\n",
  "num_sent_chars": 872296,
  "num_received_chars": 14949,
  "elapsed_time": 139.1627016067505,
  "lint_repair_count": 0,
  "test_generation_attempts": 3,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}