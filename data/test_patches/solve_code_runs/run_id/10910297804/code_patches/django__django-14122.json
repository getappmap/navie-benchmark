{
  "instance_id": "django__django-14122",
  "edit_test_file": "tests/annotations/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 8507347..c858b6a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -137,6 +137,13 @@ class SQLCompiler:\n         seen = set()\n         expressions = self.collapse_group_by(expressions, having_group_by)\n \n+        # Exclude fields from Meta.ordering unless they are explicitly required\n+        meta_ordering_fields = set(self.query.get_meta().ordering or [])\n+        expressions = [\n+            expr for expr in expressions\n+            if expr not in meta_ordering_fields or expr in self.query.group_by\n+        ]\n+\n         for expr in expressions:\n             sql, params = self.compile(expr)\n             sql, params = expr.select_format(self, sql, params)\n",
  "test_patch": "diff --git a/tests/annotations/test_meta_ordering_group_by_issue.py b/tests/annotations/test_meta_ordering_group_by_issue.py\nnew file mode 100644\nindex 0000000..a5b5b75\n--- /dev/null\n+++ b/tests/annotations/test_meta_ordering_group_by_issue.py\n@@ -0,0 +1,25 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Count\n+\n+class OrderedObject(models.Model):\n+    name = models.CharField(max_length=255)\n+    number = models.IntegerField(default=0)\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class MetaOrderingGroupByIssueTestCase(TestCase):\n+    def test_group_by_excludes_meta_ordering(self):\n+        # Create test data\n+        OrderedObject.objects.create(name='A', number=1)\n+        OrderedObject.objects.create(name='B', number=2)\n+        OrderedObject.objects.create(name='A', number=3)\n+\n+        # Perform aggregation with GROUP BY\n+        queryset = OrderedObject.objects.values('number').annotate(count=Count('id'))\n+\n+        # Check if the GROUP BY clause incorrectly includes Meta.ordering fields\n+        # The expected result should not group by 'name' field\n+        expected_result = [{'number': 1, 'count': 1}, {'number': 2, 'count': 1}, {'number': 3, 'count': 1}]\n+        self.assertEqual(list(queryset), expected_result)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/annotations/test_meta_ordering_group_by_issue_inverted.py b/tests/annotations/test_meta_ordering_group_by_issue_inverted.py\nnew file mode 100644\nindex 0000000..6614ee9\n--- /dev/null\n+++ b/tests/annotations/test_meta_ordering_group_by_issue_inverted.py\n@@ -0,0 +1,28 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Count\n+\n+class OrderedObject(models.Model):\n+    name = models.CharField(max_length=255)\n+    number = models.IntegerField(default=0)\n+\n+    class Meta:\n+        ordering = ['name']\n+\n+class MetaOrderingGroupByIssueTestCase(TestCase):\n+    def test_group_by_excludes_meta_ordering(self):\n+        # Create test data\n+        OrderedObject.objects.create(name='A', number=1)\n+        OrderedObject.objects.create(name='B', number=2)\n+        OrderedObject.objects.create(name='A', number=3)\n+\n+        # Perform aggregation with GROUP BY\n+        queryset = OrderedObject.objects.values('number').annotate(count=Count('id'))\n+\n+        # Check if the GROUP BY clause incorrectly includes Meta.ordering fields\n+        # The expected result should not group by 'name' field\n+        expected_result = [{'number': 1, 'count': 1}, {'number': 2, 'count': 1}, {'number': 3, 'count': 1}]\n+        \n+        # Alter the test to fail when the issue is observed\n+        if list(queryset) == expected_result:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2214463,
  "num_received_chars": 111590,
  "elapsed_time": 1042.334084033966,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}