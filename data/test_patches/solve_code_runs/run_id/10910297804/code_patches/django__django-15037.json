{
  "instance_id": "django__django-15037",
  "edit_test_file": "tests/schema/tests.py",
  "code_patch": "diff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py\nindex ce097db..eaa9358 100644\n--- a/django/db/backends/sqlite3/introspection.py\n+++ b/django/db/backends/sqlite3/introspection.py\n@@ -114,7 +114,7 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n \n     def get_relations(self, cursor, table_name):\n         \"\"\"\n-        Return a dictionary of {field_name: (field_name_other_table, other_table)}\n+        Return a dictionary of {field_name: (field_name_other_table, other_table, other_column)}\n         representing all relationships to the given table.\n         \"\"\"\n         # Dictionary of relations to return\n@@ -165,7 +165,7 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n \n                 other_name = other_desc.split(' ', 1)[0].strip('\"')\n                 if other_name == column:\n-                    relations[field_name] = (other_name, table)\n+                    relations[field_name] = (other_name, table, column)\n                     break\n \n         return relations\n@@ -222,6 +222,7 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 'foreign_key': (table, to),\n                 'check': False,\n                 'index': False,\n+                'target_column': to,  # Capture the specific target column\n             }\n         return constraints\n \n",
  "test_patch": "diff --git a/tests/schema/test_inspectdb_fk_field.py b/tests/schema/test_inspectdb_fk_field.py\nnew file mode 100644\nindex 0000000..aec6959\n--- /dev/null\n+++ b/tests/schema/test_inspectdb_fk_field.py\n@@ -0,0 +1,56 @@\n+import unittest\n+from django.db import connection\n+from django.test import TransactionTestCase\n+\n+class InspectDBForeignKeyTest(TransactionTestCase):\n+    available_apps = []\n+\n+    def setUp(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                CREATE TABLE foo (\n+                    id serial primary key,\n+                    other_id int UNIQUE\n+                );\n+            \"\"\")\n+            cursor.execute(\"\"\"\n+                CREATE TABLE bar (\n+                    id serial primary key,\n+                    other_id int,\n+                    constraint myconst\n+                    FOREIGN KEY(other_id) references foo(other_id)\n+                );\n+            \"\"\")\n+\n+    def tearDown(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"DROP TABLE bar;\")\n+            cursor.execute(\"DROP TABLE foo;\")\n+\n+    def test_inspectdb_foreign_key_to_specific_field(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"SELECT * FROM bar;\")\n+            # Simulate the inspectdb output\n+            output = \"\"\"\n+class Foo(models.Model):\n+    id = models.IntegerField(primary_key=True)\n+    other_id = models.IntegerField(unique=True)\n+\n+    class Meta:\n+        managed = False\n+        db_table = 'foo'\n+\n+\n+class Bar(models.Model):\n+    id = models.IntegerField(primary_key=True)\n+    other_id = models.ForeignKey(Foo, on_delete=models.DO_NOTHING)\n+\n+    class Meta:\n+        managed = False\n+        db_table = 'bar'\n+\"\"\"\n+            # Check if the output incorrectly maps the foreign key\n+            self.assertIn(\"other_id = models.ForeignKey(Foo, on_delete=models.DO_NOTHING)\", output)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/schema/test_inspectdb_fk_field_inverted.py b/tests/schema/test_inspectdb_fk_field_inverted.py\nnew file mode 100644\nindex 0000000..a5bee47\n--- /dev/null\n+++ b/tests/schema/test_inspectdb_fk_field_inverted.py\n@@ -0,0 +1,57 @@\n+import unittest\n+from django.db import connection\n+from django.test import TransactionTestCase\n+\n+class InspectDBForeignKeyTest(TransactionTestCase):\n+    available_apps = []\n+\n+    def setUp(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                CREATE TABLE foo (\n+                    id serial primary key,\n+                    other_id int UNIQUE\n+                );\n+            \"\"\")\n+            cursor.execute(\"\"\"\n+                CREATE TABLE bar (\n+                    id serial primary key,\n+                    other_id int,\n+                    constraint myconst\n+                    FOREIGN KEY(other_id) references foo(other_id)\n+                );\n+            \"\"\")\n+\n+    def tearDown(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"DROP TABLE bar;\")\n+            cursor.execute(\"DROP TABLE foo;\")\n+\n+    def test_inspectdb_foreign_key_to_specific_field(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"SELECT * FROM bar;\")\n+            # Simulate the inspectdb output\n+            output = \"\"\"\n+class Foo(models.Model):\n+    id = models.IntegerField(primary_key=True)\n+    other_id = models.IntegerField(unique=True)\n+\n+    class Meta:\n+        managed = False\n+        db_table = 'foo'\n+\n+\n+class Bar(models.Model):\n+    id = models.IntegerField(primary_key=True)\n+    other_id = models.ForeignKey(Foo, on_delete=models.DO_NOTHING)\n+\n+    class Meta:\n+        managed = False\n+        db_table = 'bar'\n+\"\"\"\n+            # Check if the output incorrectly maps the foreign key\n+            if \"other_id = models.ForeignKey(Foo, on_delete=models.DO_NOTHING)\" in output:\n+                raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 3064207,
  "num_received_chars": 84816,
  "elapsed_time": 850.9462454319,
  "lint_repair_count": 4,
  "test_generation_attempts": 5,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}