{
  "instance_id": "django__django-11555",
  "edit_test_file": "tests/invalid_models_tests/test_models.py",
  "code_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96..47506c8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -267,7 +267,10 @@ class SQLCompiler:\n         elif self.query.order_by:\n             ordering = self.query.order_by\n         elif self.query.get_meta().ordering:\n-            ordering = self.query.get_meta().ordering\n+            ordering = [\n+                field if isinstance(field, OrderBy) else OrderBy(field)\n+                for field in self.query.get_meta().ordering\n+            ]\n             self._meta_ordering = ordering\n         else:\n             ordering = []\n@@ -293,7 +296,10 @@ class SQLCompiler:\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n-            col, order = get_order_dir(field, asc)\n+            if isinstance(field, OrderBy):\n+                col, order = field.expression.name, 'DESC' if field.descending else 'ASC'\n+            else:\n+                col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n \n             if col in self.query.annotation_select:\n",
  "test_patch": "diff --git a/tests/invalid_models_tests/test_meta_ordering_bug.py b/tests/invalid_models_tests/test_meta_ordering_bug.py\nnew file mode 100644\nindex 0000000..ee2bc2d\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_meta_ordering_bug.py\n@@ -0,0 +1,20 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.expressions import F, OrderBy\n+\n+class Parent(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        abstract = True\n+        ordering = [OrderBy(F('name'), descending=True)]\n+\n+class Child(Parent):\n+    pass\n+\n+class OrderExpressionBugTest(TestCase):\n+    def test_order_by_parent_model_with_meta_ordering_expression(self):\n+        # This should raise an exception due to the ordering expression in the parent model's Meta class.\n+        with self.assertRaises(Exception):\n+            list(Child.objects.order_by('name'))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/invalid_models_tests/test_meta_ordering_bug_inverted.py b/tests/invalid_models_tests/test_meta_ordering_bug_inverted.py\nnew file mode 100644\nindex 0000000..ba3cdcc\n--- /dev/null\n+++ b/tests/invalid_models_tests/test_meta_ordering_bug_inverted.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models.expressions import F, OrderBy\n+\n+class Parent(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        abstract = True\n+        ordering = [OrderBy(F('name'), descending=True)]\n+\n+class Child(Parent):\n+    pass\n+\n+class OrderExpressionBugTest(TestCase):\n+    def test_order_by_parent_model_with_meta_ordering_expression(self):\n+        # This should now fail with the error message \"__BUG__HERE__\" when the issue is observed.\n+        try:\n+            list(Child.objects.order_by('name'))\n+        except Exception:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3650564,
  "num_received_chars": 78001,
  "elapsed_time": 900.4443581104279,
  "lint_repair_count": 14,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}