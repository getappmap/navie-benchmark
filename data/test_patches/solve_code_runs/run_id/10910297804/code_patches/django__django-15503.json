{
  "instance_id": "django__django-15503",
  "edit_test_file": "tests/model_fields/test_jsonfield.py",
  "code_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700..bc3b88a 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -237,6 +237,12 @@ class HasKey(HasKeyLookup):\n     postgres_operator = \"?\"\n     prepare_rhs = False\n \n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor in {\"sqlite\", \"mysql\", \"oracle\"}:\n+            rhs_params = [str(json.loads(value)) if isinstance(value, str) and value.isdigit() else value for value in rhs_params]\n+        return rhs, rhs_params\n+\n \n class HasKeys(HasKeyLookup):\n     lookup_name = \"has_keys\"\n@@ -246,12 +252,24 @@ class HasKeys(HasKeyLookup):\n     def get_prep_lookup(self):\n         return [str(item) for item in self.rhs]\n \n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor in {\"sqlite\", \"mysql\", \"oracle\"}:\n+            rhs_params = [str(json.loads(value)) if isinstance(value, str) and value.isdigit() else value for value in rhs_params]\n+        return rhs, rhs_params\n+\n \n class HasAnyKeys(HasKeys):\n     lookup_name = \"has_any_keys\"\n     postgres_operator = \"?|\"\n     logical_operator = \" OR \"\n \n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor in {\"sqlite\", \"mysql\", \"oracle\"}:\n+            rhs_params = [str(json.loads(value)) if isinstance(value, str) and value.isdigit() else value for value in rhs_params]\n+        return rhs, rhs_params\n+\n \n class CaseInsensitiveMixin:\n     \"\"\"\n",
  "test_patch": "diff --git a/tests/model_fields/test_jsonfield_has_keys_numeric.py b/tests/model_fields/test_jsonfield_has_keys_numeric.py\nnew file mode 100644\nindex 0000000..f05b1a1\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_has_keys_numeric.py\n@@ -0,0 +1,18 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        self.assertEqual(c2, 0, \"Should not find entry with numeric key '1111' on SQLite\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py b/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py\nnew file mode 100644\nindex 0000000..68c3fed\n--- /dev/null\n+++ b/tests/model_fields/test_jsonfield_has_keys_numeric_inverted.py\n@@ -0,0 +1,18 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+class JsonFieldHasKeyTestCase(TestCase):\n+    def setUp(self) -> None:\n+        test = JsonFieldHasKeyTest(data={'foo': 'bar'})\n+        test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n+        test.save()\n+        test2.save()\n+\n+    def test_json_field_has_key(self):\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        self.assertEqual(c2, 1, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2404038,
  "num_received_chars": 94264,
  "elapsed_time": 763.3726756572723,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}