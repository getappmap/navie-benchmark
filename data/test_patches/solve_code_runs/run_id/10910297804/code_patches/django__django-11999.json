{
  "instance_id": "django__django-11999",
  "edit_test_file": "tests/model_inheritance/test_abstract_inheritance.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff..cd9b600 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -939,6 +939,11 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n \n     def _get_FIELD_display(self, field):\n+        # Check if a custom display method is defined on the instance\n+        custom_display_method = f'get_{field.name}_display'\n+        if hasattr(self, custom_display_method):\n+            return getattr(self, custom_display_method)()\n+\n         value = getattr(self, field.attname)\n         # force_str() to coerce lazy strings.\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n",
  "test_patch": "diff --git a/tests/model_inheritance/test_override_get_foo_display.py b/tests/model_inheritance/test_override_get_foo_display.py\nnew file mode 100644\nindex 0000000..09203e4\n--- /dev/null\n+++ b/tests/model_inheritance/test_override_get_foo_display.py\n@@ -0,0 +1,16 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(\"foo\", choices=[(1, 'foo'), (2, 'bar')], max_length=10)\n+\n+    def __str__(self):\n+        return self.get_foo_bar_display()\n+\n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n+class OverrideGetFooDisplayTest(TestCase):\n+    def test_override_get_foo_display(self):\n+        instance = FooBar(foo_bar=1)\n+        self.assertEqual(str(instance), \"foo\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_inheritance/test_override_get_foo_display_inverted.py b/tests/model_inheritance/test_override_get_foo_display_inverted.py\nnew file mode 100644\nindex 0000000..ee85bd8\n--- /dev/null\n+++ b/tests/model_inheritance/test_override_get_foo_display_inverted.py\n@@ -0,0 +1,17 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(\"foo\", choices=[(1, 'foo'), (2, 'bar')], max_length=10)\n+\n+    def __str__(self):\n+        return self.get_foo_bar_display()\n+\n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n+class OverrideGetFooDisplayTest(TestCase):\n+    def test_override_get_foo_display(self):\n+        instance = FooBar(foo_bar=1)\n+        # The test should fail here if the bug is present, expecting \"something\" but Django 2.2+ returns \"foo\"\n+        self.assertEqual(str(instance), \"something\", \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1621207,
  "num_received_chars": 36329,
  "elapsed_time": 440.13574624061584,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}