{
  "instance_id": "django__django-15022",
  "edit_test_file": "tests/postgres_tests/test_search.py",
  "code_patch": "diff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt\nindex 5caea60..cbabb5c 100644\n--- a/docs/ref/contrib/admin/index.txt\n+++ b/docs/ref/contrib/admin/index.txt\n@@ -1390,18 +1390,20 @@ templates used by the :class:`ModelAdmin` views:\n                 queryset, may_have_duplicates = super().get_search_results(\n                     request, queryset, search_term,\n                 )\n-                try:\n-                    search_term_as_int = int(search_term)\n-                except ValueError:\n-                    pass\n-                else:\n-                    queryset |= self.model.objects.filter(age=search_term_as_int)\n+                search_terms = search_term.split()\n+                for term in search_terms:\n+                    try:\n+                        term_as_int = int(term)\n+                    except ValueError:\n+                        queryset = queryset.filter(name__icontains=term)\n+                    else:\n+                        queryset |= self.model.objects.filter(age=term_as_int)\n                 return queryset, may_have_duplicates\n \n-    This implementation is more efficient than ``search_fields =\n-    ('name', '=age')`` which results in a string comparison for the numeric\n-    field, for example ``... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')``\n-    on PostgreSQL.\n+            This implementation is more efficient than ``search_fields =\n+            ('name', '=age')`` which results in a string comparison for the numeric\n+            field, for example ``... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')``\n+            on PostgreSQL.\n \n .. method:: ModelAdmin.save_related(request, form, formsets, change)\n \n",
  "test_patch": "diff --git a/tests/postgres_tests/test_admin_changelist_query_optimization.py b/tests/postgres_tests/test_admin_changelist_query_optimization.py\nnew file mode 100644\nindex 0000000..0496e06\n--- /dev/null\n+++ b/tests/postgres_tests/test_admin_changelist_query_optimization.py\n@@ -0,0 +1,34 @@\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin.options import ModelAdmin\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class Client(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    contact_person = models.CharField(_('contact person'), max_length=256, blank=True, null=True)\n+\n+class ClientOffice(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    client = models.ForeignKey(Client, verbose_name=_('client'), on_delete=models.CASCADE)\n+\n+class ClientAdmin(ModelAdmin):\n+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')\n+\n+class MockRequest:\n+    GET = {}\n+\n+class TestAdminChangelistQueryOptimization(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.client_admin = ClientAdmin(Client, self.site)\n+\n+    def test_unnecessary_joins_in_admin_changelist_query(self):\n+        request = MockRequest()\n+        request.GET['q'] = 'word1 word2 word3 word4'\n+        queryset = self.client_admin.get_search_results(request, Client.objects.all(), request.GET['q'])[0]\n+        sql_query = str(queryset.query)\n+        # Check if the number of joins is greater than expected\n+        self.assertGreater(sql_query.count('JOIN'), 3)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/postgres_tests/test_admin_changelist_query_optimization_inverted.py b/tests/postgres_tests/test_admin_changelist_query_optimization_inverted.py\nnew file mode 100644\nindex 0000000..cdbc255\n--- /dev/null\n+++ b/tests/postgres_tests/test_admin_changelist_query_optimization_inverted.py\n@@ -0,0 +1,35 @@\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.admin.options import ModelAdmin\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class Client(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    contact_person = models.CharField(_('contact person'), max_length=256, blank=True, null=True)\n+\n+class ClientOffice(models.Model):\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    client = models.ForeignKey(Client, verbose_name=_('client'), on_delete=models.CASCADE)\n+\n+class ClientAdmin(ModelAdmin):\n+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')\n+\n+class MockRequest:\n+    GET = {}\n+\n+class TestAdminChangelistQueryOptimization(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.client_admin = ClientAdmin(Client, self.site)\n+\n+    def test_unnecessary_joins_in_admin_changelist_query(self):\n+        request = MockRequest()\n+        request.GET['q'] = 'word1 word2 word3 word4'\n+        queryset = self.client_admin.get_search_results(request, Client.objects.all(), request.GET['q'])[0]\n+        sql_query = str(queryset.query)\n+        # Check if the number of joins is greater than expected\n+        if sql_query.count('JOIN') > 3:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2283912,
  "num_received_chars": 107934,
  "elapsed_time": 857.0337376594543,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}