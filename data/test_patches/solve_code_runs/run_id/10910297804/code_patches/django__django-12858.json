{
  "instance_id": "django__django-12858",
  "edit_test_file": "tests/model_regress/tests.py",
  "code_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6c9e9d3..8f79f56 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1736,6 +1736,8 @@ class Model(metaclass=ModelBase):\n             _cls = cls\n             fld = None\n             for part in field.split(LOOKUP_SEP):\n+                if part in {'isnull', 'exact', 'iexact', 'contains', 'icontains', 'gt', 'gte', 'lt', 'lte', 'startswith', 'istartswith', 'endswith', 'iendswith'}:\n+                    continue\n                 try:\n                     # pk is an alias that won't be found by opts.get_field.\n                     if part == 'pk':\n@@ -1775,6 +1777,8 @@ class Model(metaclass=ModelBase):\n         invalid_fields.extend(fields - valid_fields)\n \n         for invalid_field in invalid_fields:\n+            if any(part in {'isnull', 'exact', 'iexact', 'contains', 'icontains', 'gt', 'gte', 'lt', 'lte', 'startswith', 'istartswith', 'endswith', 'iendswith'} for part in invalid_field.split(LOOKUP_SEP)):\n+                continue\n             errors.append(\n                 checks.Error(\n                     \"'ordering' refers to the nonexistent field, related \"\n",
  "test_patch": "diff --git a/tests/model_regress/test_ordering_issue_E015.py b/tests/model_regress/test_ordering_issue_E015.py\nnew file mode 100644\nindex 0000000..b90d41a\n--- /dev/null\n+++ b/tests/model_regress/test_ordering_issue_E015.py\n@@ -0,0 +1,31 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class Product(models.Model):\n+    parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+class Supply(models.Model):\n+    product = models.ForeignKey(Product, models.CASCADE)\n+\n+class Stock(models.Model):\n+    supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+class OrderingIssueE015Tests(SimpleTestCase):\n+    def test_ordering_with_nonexistent_lookup(self):\n+        class StockWithInvalidOrdering(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        errors = StockWithInvalidOrdering.check()\n+        self.assertIn(\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'supply__product__parent__isnull'.\",\n+                obj=StockWithInvalidOrdering,\n+                id='models.E015',\n+            ),\n+            errors\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_regress/test_ordering_issue_E015_inverted.py b/tests/model_regress/test_ordering_issue_E015_inverted.py\nnew file mode 100644\nindex 0000000..c886763\n--- /dev/null\n+++ b/tests/model_regress/test_ordering_issue_E015_inverted.py\n@@ -0,0 +1,25 @@\n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class Product(models.Model):\n+    parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+class Supply(models.Model):\n+    product = models.ForeignKey(Product, models.CASCADE)\n+\n+class Stock(models.Model):\n+    supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+class OrderingIssueE015Tests(SimpleTestCase):\n+    def test_ordering_with_nonexistent_lookup(self):\n+        class StockWithInvalidOrdering(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        errors = StockWithInvalidOrdering.check()\n+        # Alter the test to fail when the issue is observed\n+        if any(error.id == 'models.E015' for error in errors):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 352157,
  "num_received_chars": 6770,
  "elapsed_time": 58.98101615905762,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}