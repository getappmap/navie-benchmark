{
  "instance_id": "django__django-11433",
  "edit_test_file": "tests/forms_tests/widget_tests/test_clearablefileinput.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd3..f983eaf 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -39,24 +39,27 @@ def construct_instance(form, instance, fields=None, exclude=None):\n     cleaned_data = form.cleaned_data\n     file_field_list = []\n     for f in opts.fields:\n-        if not f.editable or isinstance(f, models.AutoField) \\\n-                or f.name not in cleaned_data:\n+        if not f.editable or isinstance(f, models.AutoField):\n             continue\n         if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\n-        # Leave defaults for fields that aren't in POST data, except for\n-        # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+        # Use cleaned_data if available, otherwise fall back to defaults.\n+        if f.name in cleaned_data:\n+            value = cleaned_data[f.name]\n+        elif (f.has_default() and\n+              form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n             continue\n+        else:\n+            value = f.get_default()\n+        \n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n         if isinstance(f, models.FileField):\n             file_field_list.append(f)\n         else:\n-            f.save_form_data(instance, cleaned_data[f.name])\n+            f.save_form_data(instance, value)\n \n     for f in file_field_list:\n         f.save_form_data(instance, cleaned_data[f.name])\n",
  "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py\nnew file mode 100644\nindex 0000000..59222d6\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite.py\n@@ -0,0 +1,22 @@\n+import unittest\n+from django.forms import Form, CharField\n+from django.core.exceptions import ValidationError\n+\n+class TestCleanedDataOverwrite(unittest.TestCase):\n+    def test_cleaned_data_overwrites_default(self):\n+        class SomeForm(Form):\n+            some_field = CharField(required=False)\n+\n+            def clean(self):\n+                cleaned_data = super().clean()\n+                # Simulate overwriting a default value with cleaned_data\n+                cleaned_data['some_field'] = 'new_value'\n+                return cleaned_data\n+\n+        form = SomeForm(data={})\n+        form.full_clean()\n+        # Check if the cleaned_data overwrites the default value\n+        self.assertEqual(form.cleaned_data['some_field'], 'new_value')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py\nnew file mode 100644\nindex 0000000..60355db\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_cleaneddata_overwrite_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+from django.forms import Form, CharField\n+from django.core.exceptions import ValidationError\n+\n+class TestCleanedDataOverwrite(unittest.TestCase):\n+    def test_cleaned_data_overwrites_default(self):\n+        class SomeForm(Form):\n+            some_field = CharField(required=False)\n+\n+            def clean(self):\n+                cleaned_data = super().clean()\n+                # Simulate overwriting a default value with cleaned_data\n+                cleaned_data['some_field'] = 'new_value'\n+                return cleaned_data\n+\n+        form = SomeForm(data={})\n+        form.full_clean()\n+        # Check if the cleaned_data overwrites the default value\n+        # This should now fail if the bug is present\n+        if form.cleaned_data['some_field'] == 'new_value':\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1612631,
  "num_received_chars": 37910,
  "elapsed_time": 579.8512716293335,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}