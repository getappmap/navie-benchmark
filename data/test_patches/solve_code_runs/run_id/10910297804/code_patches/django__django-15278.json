{
  "instance_id": "django__django-15278",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 4343ea1..9cb7480 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -201,6 +201,25 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         # transaction explicitly rather than simply disable autocommit.\n         return self.in_atomic_block\n \n+    def add_nullable_unique_column(self, table_name, column_name, column_type):\n+        \"\"\"\n+        Add a nullable column with a UNIQUE constraint to an existing table.\n+        This involves creating a new table with the desired schema, copying\n+        data, and renaming the table.\n+        \"\"\"\n+        with self.cursor() as cursor:\n+            # Create a new table with the additional column\n+            cursor.execute(f\"\"\"\n+                CREATE TABLE new_{table_name} AS\n+                SELECT *, NULL AS {column_name} FROM {table_name};\n+            \"\"\")\n+            # Drop the old table\n+            cursor.execute(f\"DROP TABLE {table_name};\")\n+            # Rename the new table to the original table name\n+            cursor.execute(f\"ALTER TABLE new_{table_name} RENAME TO {table_name};\")\n+            # Add the UNIQUE constraint\n+            cursor.execute(f\"CREATE UNIQUE INDEX {table_name}_{column_name}_uniq ON {table_name}({column_name});\")\n+\n     def _set_autocommit(self, autocommit):\n         if autocommit:\n             level = None\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1884777,
  "num_received_chars": 26271,
  "elapsed_time": 238.36341738700867,
  "lint_repair_count": 1,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}