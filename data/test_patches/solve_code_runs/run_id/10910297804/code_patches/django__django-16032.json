{
  "instance_id": "django__django-16032",
  "edit_test_file": "tests/annotations/tests.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8419dc0..f59f81a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1920,7 +1920,9 @@ class Query(BaseExpression):\n     def _gen_col_aliases(cls, exprs):\n         yield from (expr.alias for expr in cls._gen_cols(exprs))\n \n-    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):\n+    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, for_subquery=False):\n+        if for_subquery:\n+            self.clear_select_for_subquery()\n         annotation = self.annotations.get(name)\n         if annotation is not None:\n             if not allow_joins:\n@@ -2431,6 +2433,15 @@ class Query(BaseExpression):\n         self.values_select = tuple(field_names)\n         self.add_fields(field_names, True)\n \n+    def clear_select_for_subquery(self):\n+        \"\"\"\n+        Clear non-essential fields from the SELECT clause when transitioning\n+        to a subquery used with __in.\n+        \"\"\"\n+        self.clear_select_fields()\n+        self.set_extra_mask(())\n+        self.set_annotation_mask(())\n+\n     @property\n     def annotation_select(self):\n         \"\"\"\n",
  "test_patch": "diff --git a/tests/annotations/annotations_alias_bug_test.py b/tests/annotations/annotations_alias_bug_test.py\nnew file mode 100644\nindex 0000000..1c8a88c\n--- /dev/null\n+++ b/tests/annotations/annotations_alias_bug_test.py\n@@ -0,0 +1,21 @@\n+from django.db.models import Value\n+from django.test import TestCase\n+from .models import Book, Publisher\n+\n+class AnnotationAliasBugTest(TestCase):\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        with self.assertRaisesMessage(Exception, \"sub-select returns 10 columns - expected 1\"):\n+            list(publisher_books_qs)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/annotations/annotations_alias_bug_test_inverted.py b/tests/annotations/annotations_alias_bug_test_inverted.py\nnew file mode 100644\nindex 0000000..baf756c\n--- /dev/null\n+++ b/tests/annotations/annotations_alias_bug_test_inverted.py\n@@ -0,0 +1,23 @@\n+from django.db.models import Value\n+from django.test import TestCase\n+from .models import Book, Publisher\n+\n+class AnnotationAliasBugTest(TestCase):\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        # This test should now fail when the bug is observed\n+        with self.assertRaisesMessage(Exception, \"__BUG__HERE__\"):\n+            if list(publisher_books_qs):\n+                raise Exception(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1630320,
  "num_received_chars": 93156,
  "elapsed_time": 657.505704164505,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}