{
  "instance_id": "django__django-12663",
  "edit_test_file": "tests/utils_tests/test_functional.py",
  "code_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9fe0c9a..48254c5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -41,6 +41,7 @@ from django.db.models.sql.where import (\n )\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import cached_property\n+from django.utils.functional import SimpleLazyObject\n from django.utils.tree import Node\n \n __all__ = ['Query', 'RawQuery']\n@@ -1060,6 +1061,9 @@ class Query(BaseExpression):\n         return sql, params\n \n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+        if isinstance(value, SimpleLazyObject):\n+            # Resolve the SimpleLazyObject to its actual value\n+            value = value()\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(\n                 self, reuse=can_reuse, allow_joins=allow_joins,\n",
  "test_patch": "diff --git a/tests/utils_tests/test_lazyobject_regression.py b/tests/utils_tests/test_lazyobject_regression.py\nnew file mode 100644\nindex 0000000..85462f1\n--- /dev/null\n+++ b/tests/utils_tests/test_lazyobject_regression.py\n@@ -0,0 +1,27 @@\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.db.models import OuterRef, Subquery\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n+\n+class A(models.Model):\n+    pass\n+\n+class B(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE)\n+\n+class C(models.Model):\n+    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n+\n+class BugTestCase(TestCase):\n+    def test_bug(self):\n+        owner_user = (\n+            B.objects.filter(a=OuterRef(\"pk\"))\n+            .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+            .values(\"owner_user\")\n+        )\n+        user = SimpleLazyObject(lambda: User.objects.create_user(\"testuser\"))\n+        with self.assertRaises(TypeError):\n+            A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+                owner_user=user\n+            )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/utils_tests/test_lazyobject_regression_inverted.py b/tests/utils_tests/test_lazyobject_regression_inverted.py\nnew file mode 100644\nindex 0000000..9fb5dde\n--- /dev/null\n+++ b/tests/utils_tests/test_lazyobject_regression_inverted.py\n@@ -0,0 +1,29 @@\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.db.models import OuterRef, Subquery\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n+\n+class A(models.Model):\n+    pass\n+\n+class B(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE)\n+\n+class C(models.Model):\n+    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n+\n+class BugTestCase(TestCase):\n+    def test_bug(self):\n+        owner_user = (\n+            B.objects.filter(a=OuterRef(\"pk\"))\n+            .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+            .values(\"owner_user\")\n+        )\n+        user = SimpleLazyObject(lambda: User.objects.create_user(\"testuser\"))\n+        try:\n+            A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+                owner_user=user\n+            )\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2457658,
  "num_received_chars": 68518,
  "elapsed_time": 705.1647930145264,
  "lint_repair_count": 6,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}