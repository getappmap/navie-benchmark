{
  "instance_id": "django__django-16100",
  "edit_test_file": "tests/admin_changelist/tests.py",
  "code_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5f07a42..4fc6a75 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1916,6 +1916,7 @@ class ModelAdmin(BaseModelAdmin):\n         The 'change list' admin view for this model.\n         \"\"\"\n         from django.contrib.admin.views.main import ERROR_FLAG\n+        from django.db import transaction\n \n         app_label = self.opts.app_label\n         if not self.has_view_or_change_permission(request):\n@@ -2010,26 +2011,27 @@ class ModelAdmin(BaseModelAdmin):\n                 request.POST, request.FILES, queryset=modified_objects\n             )\n             if formset.is_valid():\n-                changecount = 0\n-                for form in formset.forms:\n-                    if form.has_changed():\n-                        obj = self.save_form(request, form, change=True)\n-                        self.save_model(request, obj, form, change=True)\n-                        self.save_related(request, form, formsets=[], change=True)\n-                        change_msg = self.construct_change_message(request, form, None)\n-                        self.log_change(request, obj, change_msg)\n-                        changecount += 1\n-\n-                if changecount:\n-                    msg = ngettext(\n-                        \"%(count)s %(name)s was changed successfully.\",\n-                        \"%(count)s %(name)s were changed successfully.\",\n-                        changecount,\n-                    ) % {\n-                        \"count\": changecount,\n-                        \"name\": model_ngettext(self.opts, changecount),\n-                    }\n-                    self.message_user(request, msg, messages.SUCCESS)\n+                with transaction.atomic():\n+                    changecount = 0\n+                    for form in formset.forms:\n+                        if form.has_changed():\n+                            obj = self.save_form(request, form, change=True)\n+                            self.save_model(request, obj, form, change=True)\n+                            self.save_related(request, form, formsets=[], change=True)\n+                            change_msg = self.construct_change_message(request, form, None)\n+                            self.log_change(request, obj, change_msg)\n+                            changecount += 1\n+\n+                    if changecount:\n+                        msg = ngettext(\n+                            \"%(count)s %(name)s was changed successfully.\",\n+                            \"%(count)s %(name)s were changed successfully.\",\n+                            changecount,\n+                        ) % {\n+                            \"count\": changecount,\n+                            \"name\": model_ngettext(self.opts, changecount),\n+                        }\n+                        self.message_user(request, msg, messages.SUCCESS)\n \n                 return HttpResponseRedirect(request.get_full_path())\n \n",
  "test_patch": "diff --git a/tests/admin_changelist/test_changelist_transaction_handling.py b/tests/admin_changelist/test_changelist_transaction_handling.py\nnew file mode 100644\nindex 0000000..45f11de\n--- /dev/null\n+++ b/tests/admin_changelist/test_changelist_transaction_handling.py\n@@ -0,0 +1,52 @@\n+import datetime\n+from django.contrib import admin\n+from django.contrib.auth.models import User\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+from django.db import transaction, IntegrityError\n+\n+from .models import Child, Parent\n+from .admin import ChildAdmin\n+from .admin import site as custom_site\n+\n+\n+@override_settings(ROOT_URLCONF=\"admin_changelist.urls\")\n+class ChangeListTransactionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username=\"super\", email=\"a@b.com\", password=\"xxx\"\n+        )\n+        cls.parent = Parent.objects.create(name=\"parent\")\n+        cls.child = Child.objects.create(name=\"child\", parent=cls.parent)\n+\n+    def test_changelist_view_transaction_handling(self):\n+        \"\"\"\n+        Test that changelist_view does not handle transactions properly.\n+        \"\"\"\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_child_changelist\")\n+\n+        # Simulate a transaction error during list_editable processing\n+        with transaction.atomic():\n+            try:\n+                response = self.client.post(\n+                    changelist_url,\n+                    {\n+                        \"form-TOTAL_FORMS\": \"1\",\n+                        \"form-INITIAL_FORMS\": \"1\",\n+                        \"form-MIN_NUM_FORMS\": \"0\",\n+                        \"form-MAX_NUM_FORMS\": \"1000\",\n+                        \"form-0-id\": str(self.child.pk),\n+                        \"form-0-name\": \"new name\",\n+                        \"_save\": \"Save\",\n+                    },\n+                )\n+                # Simulate an error that should cause a rollback\n+                raise IntegrityError(\"Simulated transaction error\")\n+            except IntegrityError:\n+                pass\n+\n+        # Check if the name change was not saved due to transaction rollback\n+        self.child.refresh_from_db()\n+        self.assertEqual(self.child.name, \"child\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/admin_changelist/test_changelist_transaction_handling_inverted.py b/tests/admin_changelist/test_changelist_transaction_handling_inverted.py\nnew file mode 100644\nindex 0000000..9250cb8\n--- /dev/null\n+++ b/tests/admin_changelist/test_changelist_transaction_handling_inverted.py\n@@ -0,0 +1,54 @@\n+import datetime\n+from django.contrib import admin\n+from django.contrib.auth.models import User\n+from django.test import TestCase, override_settings\n+from django.urls import reverse\n+from django.db import transaction, IntegrityError\n+\n+from .models import Child, Parent\n+from .admin import ChildAdmin\n+from .admin import site as custom_site\n+\n+\n+@override_settings(ROOT_URLCONF=\"admin_changelist.urls\")\n+class ChangeListTransactionTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username=\"super\", email=\"a@b.com\", password=\"xxx\"\n+        )\n+        cls.parent = Parent.objects.create(name=\"parent\")\n+        cls.child = Child.objects.create(name=\"child\", parent=cls.parent)\n+\n+    def test_changelist_view_transaction_handling(self):\n+        \"\"\"\n+        Test that changelist_view does not handle transactions properly.\n+        \"\"\"\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_child_changelist\")\n+\n+        # Simulate a transaction error during list_editable processing\n+        with transaction.atomic():\n+            try:\n+                response = self.client.post(\n+                    changelist_url,\n+                    {\n+                        \"form-TOTAL_FORMS\": \"1\",\n+                        \"form-INITIAL_FORMS\": \"1\",\n+                        \"form-MIN_NUM_FORMS\": \"0\",\n+                        \"form-MAX_NUM_FORMS\": \"1000\",\n+                        \"form-0-id\": str(self.child.pk),\n+                        \"form-0-name\": \"new name\",\n+                        \"_save\": \"Save\",\n+                    },\n+                )\n+                # Simulate an error that should cause a rollback\n+                raise IntegrityError(\"Simulated transaction error\")\n+            except IntegrityError:\n+                pass\n+\n+        # Check if the name change was not saved due to transaction rollback\n+        self.child.refresh_from_db()\n+        if self.child.name == \"child\":\n+            raise AssertionError(\"__BUG__HERE__\")\n+        self.assertNotEqual(self.child.name, \"child\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3679613,
  "num_received_chars": 103969,
  "elapsed_time": 889.7169535160065,
  "lint_repair_count": 12,
  "test_generation_attempts": 3,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}