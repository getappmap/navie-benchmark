{
  "instance_id": "django__django-11885",
  "edit_test_file": "tests/delete/tests.py",
  "code_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26..af1586d 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -151,7 +151,7 @@ class Collector:\n             all(link == from_field for link in opts.concrete_model._meta.parents.values()) and\n             # Foreign keys pointing to this model.\n             all(\n-                related.field.remote_field.on_delete is DO_NOTHING\n+                related.field.remote_field.on_delete in {DO_NOTHING, CASCADE}\n                 for related in get_candidate_relations_to_delete(opts)\n             ) and (\n                 # Something like generic foreign key.\n",
  "test_patch": "diff --git a/tests/delete/test_combine_fast_delete_queries.py b/tests/delete/test_combine_fast_delete_queries.py\nnew file mode 100644\nindex 0000000..d082f21\n--- /dev/null\n+++ b/tests/delete/test_combine_fast_delete_queries.py\n@@ -0,0 +1,23 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class Person(models.Model):\n+    friends = models.ManyToManyField('self')\n+\n+class UserTestModel(models.Model):\n+    pass\n+\n+class Entry(models.Model):\n+    created_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='created_entries')\n+    updated_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='updated_entries')\n+\n+class CombineFastDeleteQueriesTest(TestCase):\n+    def test_combine_fast_delete_queries(self):\n+        user = UserTestModel.objects.create()\n+        person = Person.objects.create()\n+        person.friends.add(person)\n+        entry = Entry.objects.create(created_by=user, updated_by=user)\n+\n+        with self.assertNumQueries(6):\n+            user.delete()\n+            person.delete()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/delete/test_combine_fast_delete_queries_inverted.py b/tests/delete/test_combine_fast_delete_queries_inverted.py\nnew file mode 100644\nindex 0000000..34465d7\n--- /dev/null\n+++ b/tests/delete/test_combine_fast_delete_queries_inverted.py\n@@ -0,0 +1,25 @@\n+from django.test import TestCase\n+from django.db import models\n+\n+class Person(models.Model):\n+    friends = models.ManyToManyField('self')\n+\n+class UserTestModel(models.Model):\n+    pass\n+\n+class Entry(models.Model):\n+    created_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='created_entries')\n+    updated_by = models.ForeignKey(UserTestModel, on_delete=models.CASCADE, related_name='updated_entries')\n+\n+class CombineFastDeleteQueriesTest(TestCase):\n+    def test_combine_fast_delete_queries(self):\n+        user = UserTestModel.objects.create()\n+        person = Person.objects.create()\n+        person.friends.add(person)\n+        entry = Entry.objects.create(created_by=user, updated_by=user)\n+\n+        # The test should now fail if the bug is observed, expecting fewer queries\n+        with self.assertRaisesMessage(AssertionError, \"__BUG__HERE__\"):\n+            with self.assertNumQueries(3):\n+                user.delete()\n+                person.delete()\n\\ No newline at end of file\n",
  "num_sent_chars": 2287674,
  "num_received_chars": 127137,
  "elapsed_time": 1164.2732532024384,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}