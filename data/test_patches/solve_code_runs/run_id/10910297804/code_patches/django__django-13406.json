{
  "instance_id": "django__django-13406",
  "edit_test_file": "tests/queries/test_qs_combinators.py",
  "code_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b48d0df..b9f72f4 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -238,7 +238,11 @@ class QuerySet:\n     def __getstate__(self):\n         # Force the cache to be fully populated.\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        state = {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        # Include _fields and values_select in the state for serialization\n+        state['_fields'] = self._fields\n+        state['values_select'] = self.query.values_select\n+        return state\n \n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n@@ -258,6 +262,9 @@ class QuerySet:\n                 stacklevel=2,\n             )\n         self.__dict__.update(state)\n+        # Restore _fields and values_select during deserialization\n+        self._fields = state.get('_fields', None)\n+        self.query.values_select = state.get('values_select', [])\n \n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n",
  "test_patch": "diff --git a/tests/queries/test_queryset_pickling_issue.py b/tests/queries/test_queryset_pickling_issue.py\nnew file mode 100644\nindex 0000000..596d93f\n--- /dev/null\n+++ b/tests/queries/test_queryset_pickling_issue.py\n@@ -0,0 +1,28 @@\n+import pickle\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Sum\n+\n+class Toy(models.Model):\n+    name = models.CharField(max_length=16)\n+    material = models.CharField(max_length=16)\n+    price = models.PositiveIntegerField()\n+\n+class QuerysetPicklingIssueTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_queryset_pickling_issue(self):\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        self.assertEqual(type(prices[0]), dict)\n+\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+\n+        with self.assertRaises(AttributeError) as cm:\n+            _ = prices2[0].id\n+\n+        self.assertEqual(str(cm.exception), \"'NoneType' object has no attribute 'attname'\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/queries/test_queryset_pickling_issue_inverted.py b/tests/queries/test_queryset_pickling_issue_inverted.py\nnew file mode 100644\nindex 0000000..ad348d5\n--- /dev/null\n+++ b/tests/queries/test_queryset_pickling_issue_inverted.py\n@@ -0,0 +1,30 @@\n+import pickle\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Sum\n+\n+class Toy(models.Model):\n+    name = models.CharField(max_length=16)\n+    material = models.CharField(max_length=16)\n+    price = models.PositiveIntegerField()\n+\n+class QuerysetPicklingIssueTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_queryset_pickling_issue(self):\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        self.assertEqual(type(prices[0]), dict)\n+\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+\n+        # Altered the test to fail when the issue is observed\n+        with self.assertRaises(AttributeError) as cm:\n+            _ = prices2[0].id\n+\n+        # Check for the specific error message to indicate the bug\n+        self.assertEqual(str(cm.exception), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2984890,
  "num_received_chars": 82569,
  "elapsed_time": 764.2223970890045,
  "lint_repair_count": 11,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}