{
  "instance_id": "django__django-11749",
  "edit_test_file": "tests/template_tests/test_parser.py",
  "code_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e647..ac65609 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -131,10 +131,10 @@ def call_command(command_name, *args, **options):\n \n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n+    # to parse_args(), including those in mutually exclusive groups.\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions if (opt.required or any(group.required for group in parser._mutually_exclusive_groups if opt in group._group_actions)) and opt.dest in options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n",
  "test_patch": "diff --git a/tests/template_tests/test_mutually_exclusive_group.py b/tests/template_tests/test_mutually_exclusive_group.py\nnew file mode 100644\nindex 0000000..f745c21\n--- /dev/null\n+++ b/tests/template_tests/test_mutually_exclusive_group.py\n@@ -0,0 +1,27 @@\n+from django.core.management import call_command, CommandError\n+from django.core.management.base import BaseCommand\n+from django.test import SimpleTestCase\n+from io import StringIO\n+import argparse\n+\n+class MyCommand(BaseCommand):\n+    help = 'Test command for mutually exclusive group'\n+\n+    def add_arguments(self, parser):\n+        shop = parser.add_mutually_exclusive_group(required=True)\n+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\n+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\n+\n+    def handle(self, *args, **options):\n+        if options['shop_id']:\n+            self.stdout.write(f\"Shop ID: {options['shop_id']}\")\n+        elif options['shop_name']:\n+            self.stdout.write(f\"Shop Name: {options['shop_name']}\")\n+\n+class MutuallyExclusiveGroupTest(SimpleTestCase):\n+    def test_call_command_with_kwargs(self):\n+        \"\"\"\n+        Test that call_command fails when argument of required mutually exclusive group is passed in kwargs.\n+        \"\"\"\n+        with self.assertRaisesMessage(CommandError, \"Error: one of the arguments --shop-id --shop is required\"):\n+            call_command(MyCommand(), shop_id=1)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/template_tests/test_mutually_exclusive_group_inverted.py b/tests/template_tests/test_mutually_exclusive_group_inverted.py\nnew file mode 100644\nindex 0000000..d62fdc9\n--- /dev/null\n+++ b/tests/template_tests/test_mutually_exclusive_group_inverted.py\n@@ -0,0 +1,27 @@\n+from django.core.management import call_command, CommandError\n+from django.core.management.base import BaseCommand\n+from django.test import SimpleTestCase\n+from io import StringIO\n+import argparse\n+\n+class MyCommand(BaseCommand):\n+    help = 'Test command for mutually exclusive group'\n+\n+    def add_arguments(self, parser):\n+        shop = parser.add_mutually_exclusive_group(required=True)\n+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\n+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\n+\n+    def handle(self, *args, **options):\n+        if options['shop_id']:\n+            self.stdout.write(f\"Shop ID: {options['shop_id']}\")\n+        elif options['shop_name']:\n+            self.stdout.write(f\"Shop Name: {options['shop_name']}\")\n+\n+class MutuallyExclusiveGroupTest(SimpleTestCase):\n+    def test_call_command_with_kwargs(self):\n+        \"\"\"\n+        Test that call_command fails when argument of required mutually exclusive group is passed in kwargs.\n+        \"\"\"\n+        with self.assertRaisesMessage(CommandError, \"__BUG__HERE__\"):\n+            call_command(MyCommand(), shop_id=1)\n\\ No newline at end of file\n",
  "num_sent_chars": 1965016,
  "num_received_chars": 69111,
  "elapsed_time": 750.4410700798035,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}