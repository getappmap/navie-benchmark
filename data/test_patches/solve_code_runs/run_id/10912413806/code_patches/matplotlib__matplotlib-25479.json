{
  "instance_id": "matplotlib__matplotlib-25479",
  "edit_test_file": "lib/matplotlib/tests/test_streamplot.py",
  "code_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db..26acbe5 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -286,10 +286,11 @@ def _get_cmap(name=None, lut=None):\n     if isinstance(name, colors.Colormap):\n         return name\n     _api.check_in_list(sorted(_colormaps), name=name)\n+    cmap = _colormaps[name]\n     if lut is None:\n-        return _colormaps[name]\n+        return cmap\n     else:\n-        return _colormaps[name].resampled(lut)\n+        return cmap.resampled(lut)\n \n # do it in two steps like this so we can have an un-deprecated version in\n # pyplot.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_colormap_name_handling.py b/lib/matplotlib/tests/test_colormap_name_handling.py\nnew file mode 100644\nindex 0000000..f9f0123\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_colormap_name_handling.py\n@@ -0,0 +1,24 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+from matplotlib import colormaps as cm\n+from matplotlib.colors import LinearSegmentedColormap\n+\n+class TestColormapNameHandling(unittest.TestCase):\n+    def test_colormap_name_handling(self):\n+        # Create and register a new colormap\n+        my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],\n+                        [2.3e-03, 1.3e-03, 1.8e-02],\n+                        [3.3e-03, 2.3e-03, 2.4e-02]]\n+        my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)\n+        cm.register(name='my_cmap_name', cmap=my_cmap)\n+\n+        # Set the colormap and attempt to use it\n+        plt.set_cmap('my_cmap_name')\n+        with self.assertRaises(ValueError) as context:\n+            plt.imshow([[1, 1], [2, 2]])\n+\n+        # Check if the error message contains the expected colormap name\n+        self.assertIn('some_cmap_name', str(context.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_colormap_name_handling_inverted.py b/lib/matplotlib/tests/test_colormap_name_handling_inverted.py\nnew file mode 100644\nindex 0000000..bc604d8\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_colormap_name_handling_inverted.py\n@@ -0,0 +1,25 @@\n+import unittest\n+import matplotlib.pyplot as plt\n+from matplotlib import colormaps as cm\n+from matplotlib.colors import LinearSegmentedColormap\n+\n+class TestColormapNameHandling(unittest.TestCase):\n+    def test_colormap_name_handling(self):\n+        # Create and register a new colormap\n+        my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],\n+                        [2.3e-03, 1.3e-03, 1.8e-02],\n+                        [3.3e-03, 2.3e-03, 2.4e-02]]\n+        my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)\n+        cm.register(name='my_cmap_name', cmap=my_cmap)\n+\n+        # Set the colormap and attempt to use it\n+        plt.set_cmap('my_cmap_name')\n+        with self.assertRaises(ValueError) as context:\n+            plt.imshow([[1, 1], [2, 2]])\n+\n+        # Check if the error message contains the expected colormap name\n+        # Altered to fail when the issue is observed\n+        self.assertNotIn('my_cmap_name', str(context.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2901495,
  "num_received_chars": 95650,
  "elapsed_time": 731.3872997760773,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}