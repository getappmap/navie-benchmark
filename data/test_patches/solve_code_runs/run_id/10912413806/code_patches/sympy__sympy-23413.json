{
  "instance_id": "sympy__sympy-23413",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/polys/matrices/normalforms.py b/sympy/polys/matrices/normalforms.py\nindex 30f5534..2bc9f3d 100644\n--- a/sympy/polys/matrices/normalforms.py\n+++ b/sympy/polys/matrices/normalforms.py\n@@ -226,6 +226,9 @@ def _hermite_normal_form(A):\n                 u, v, d = _gcdex(A[i][k], A[i][j])\n                 r, s = A[i][k] // d, A[i][j] // d\n                 add_columns(A, k, j, u, v, -s, r)\n+        # Ensure the pivot is positive\n+        if A[i][k] < 0:\n+            A[i][k] = -A[i][k]\n         b = A[i][k]\n         # Do not want the pivot entry to be negative.\n         if b < 0:\n@@ -397,7 +400,7 @@ def hermite_normal_form(A, *, D=None, check_rank=False):\n     \"\"\"\n     if not A.domain.is_ZZ:\n         raise DMDomainError('Matrix must be over domain ZZ.')\n-    if D is not None and (not check_rank or A.convert_to(QQ).rank() == A.shape[0]):\n-        return _hermite_normal_form_modulo_D(A, D)\n-    else:\n-        return _hermite_normal_form(A)\n+    if D is not None:\n+        if not check_rank or A.convert_to(QQ).rank() == A.shape[0]:\n+            return _hermite_normal_form_modulo_D(A, D)\n+    return _hermite_normal_form(A)\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1677834,
  "num_received_chars": 18433,
  "elapsed_time": 301.23989701271057,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}