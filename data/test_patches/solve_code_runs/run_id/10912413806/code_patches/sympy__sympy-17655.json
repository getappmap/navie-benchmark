{
  "instance_id": "sympy__sympy-17655",
  "edit_test_file": "sympy/geometry/tests/test_point.py",
  "code_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c4..e1379e0 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -198,6 +198,8 @@ def __add__(self, other):\n \n         >>> Point(1, 2) + (.1, .2)\n         Point2D(1.1, 2.2)\n+        >>> Point(1, 2) + 2 * Point(0.1, 0.2)\n+        Point2D(1.2, 2.4)\n \n         If this is not desired, the `translate` method can be used or\n         another Point can be added:\n@@ -213,6 +215,19 @@ def __add__(self, other):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy.core.mul import Mul\n+\n+        if isinstance(other, Mul):\n+            # Check if the Mul object is a multiplication of a number and a Point\n+            scalar, point = None, None\n+            for arg in other.args:\n+                if isinstance(arg, Point):\n+                    point = arg\n+                elif arg.is_number:\n+                    scalar = arg\n+            if scalar is not None and point is not None:\n+                other = Point([scalar * coord for coord in point.args], evaluate=False)\n+\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n@@ -268,12 +283,28 @@ def __mul__(self, factor):\n         Point2D(11/10, 11/5)\n         >>> Point(1, 2)*11/10\n         Point2D(11/10, 11/5)\n+        >>> 2 * Point(1, 2)\n+        Point2D(2, 4)\n \n         See Also\n         ========\n \n         sympy.geometry.point.Point.scale\n         \"\"\"\n+        from sympy.core.mul import Mul\n+\n+        if isinstance(factor, Mul):\n+            # Check if the Mul object is a multiplication of a number and a Point\n+            scalar, point = None, None\n+            for arg in factor.args:\n+                if isinstance(arg, Point):\n+                    point = arg\n+                elif arg.is_number:\n+                    scalar = arg\n+            if scalar is not None and point is not None:\n+                factor = scalar\n+                self = point\n+\n         factor = sympify(factor)\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n",
  "test_patch": "diff --git a/sympy/geometry/tests/test_arithmetic_operations.py b/sympy/geometry/tests/test_arithmetic_operations.py\nnew file mode 100644\nindex 0000000..277a84a\n--- /dev/null\n+++ b/sympy/geometry/tests/test_arithmetic_operations.py\n@@ -0,0 +1,16 @@\n+import sympy\n+from sympy import geometry as ge\n+from sympy.geometry.exceptions import GeometryError\n+from sympy.utilities.pytest import raises\n+\n+def test_point_multiplication_issue():\n+    point1 = ge.Point(0, 0)\n+    point2 = ge.Point(1, 1)\n+\n+    # This line works fine\n+    result1 = point1 + point2 * sympy.sympify(2.0)\n+    assert result1 == ge.Point(2, 2)\n+\n+    # This line raises an exception\n+    with raises(GeometryError):\n+        point1 + sympy.sympify(2.0) * point2\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/geometry/tests/test_arithmetic_operations_inverted.py b/sympy/geometry/tests/test_arithmetic_operations_inverted.py\nnew file mode 100644\nindex 0000000..994006f\n--- /dev/null\n+++ b/sympy/geometry/tests/test_arithmetic_operations_inverted.py\n@@ -0,0 +1,17 @@\n+import sympy\n+from sympy import geometry as ge\n+from sympy.geometry.exceptions import GeometryError\n+\n+def test_point_multiplication_issue():\n+    point1 = ge.Point(0, 0)\n+    point2 = ge.Point(1, 1)\n+\n+    # This line works fine\n+    result1 = point1 + point2 * sympy.sympify(2.0)\n+    assert result1 == ge.Point(2, 2)\n+\n+    # This line should now fail with a specific error message\n+    try:\n+        point1 + sympy.sympify(2.0) * point2\n+    except GeometryError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3113744,
  "num_received_chars": 85246,
  "elapsed_time": 1081.5547597408295,
  "lint_repair_count": 12,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}