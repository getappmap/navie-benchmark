{
  "instance_id": "pylint-dev__pylint-7080",
  "edit_test_file": "tests/checkers/unittest_design.py",
  "code_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 5cacc03..725100a 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -57,6 +57,7 @@ def _is_ignored_file(\n         basename in ignore_list\n         or _is_in_ignore_list_re(basename, ignore_list_re)\n         or _is_in_ignore_list_re(element, ignore_list_paths_re)\n+        or any(re.match(pattern, element) for pattern in ignore_list_paths_re)\n     )\n \n \n@@ -73,6 +74,11 @@ def expand_modules(\n     errors: list[ErrorDescriptionDict] = []\n     path = sys.path.copy()\n \n+    # Apply ignore-paths logic before processing\n+    files_or_modules = [\n+        f for f in files_or_modules if not _is_ignored_file(f, ignore_list, ignore_list_re, ignore_list_paths_re)\n+    ]\n+\n     for something in files_or_modules:\n         basename = os.path.basename(something)\n         if _is_ignored_file(\n",
  "test_patch": "diff --git a/tests/checkers/unittest_ignore_paths.py b/tests/checkers/unittest_ignore_paths.py\nnew file mode 100644\nindex 0000000..8c14d73\n--- /dev/null\n+++ b/tests/checkers/unittest_ignore_paths.py\n@@ -0,0 +1,37 @@\n+import os\n+import unittest\n+from unittest.mock import patch\n+from pylint.lint import Run\n+\n+class TestIgnorePathsBug(unittest.TestCase):\n+    @patch('pylint.lint.Run')\n+    def test_ignore_paths_ignored_with_recursive(self, mock_run):\n+        \"\"\"Test that ignore-paths is ignored when --recursive=y is used.\"\"\"\n+        # Simulate the pylint output when ignore-paths is ignored\n+        mock_run.return_value.linter.reporter.messages = [\n+            {\n+                'msg_id': 'R2044',\n+                'path': 'src/gen/about.py',\n+                'line': 2,\n+                'msg': 'Line with empty comment',\n+            },\n+            {\n+                'msg_id': 'C0103',\n+                'path': 'src/gen/about.py',\n+                'line': 12,\n+                'msg': 'Class name \"Ui_AboutAutoSplitWidget\" doesn\\'t conform to pattern',\n+            },\n+        ]\n+\n+        # Run pylint with the --recursive=y option\n+        with self.assertRaises(SystemExit) as cm:\n+            Run(['--recursive=y', 'src/'])\n+\n+        # Check that the exit code is 1, indicating an error\n+        self.assertEqual(cm.exception.code, 1)\n+\n+        # Verify that the messages contain the expected output\n+        self.assertIn('src/gen/about.py', [msg['path'] for msg in mock_run.return_value.linter.reporter.messages])\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/checkers/unittest_ignore_paths_inverted.py b/tests/checkers/unittest_ignore_paths_inverted.py\nnew file mode 100644\nindex 0000000..a969c8f\n--- /dev/null\n+++ b/tests/checkers/unittest_ignore_paths_inverted.py\n@@ -0,0 +1,38 @@\n+import os\n+import unittest\n+from unittest.mock import patch\n+from pylint.lint import Run\n+\n+class TestIgnorePathsBug(unittest.TestCase):\n+    @patch('pylint.lint.Run')\n+    def test_ignore_paths_ignored_with_recursive(self, mock_run):\n+        \"\"\"Test that ignore-paths is ignored when --recursive=y is used.\"\"\"\n+        # Simulate the pylint output when ignore-paths is ignored\n+        mock_run.return_value.linter.reporter.messages = [\n+            {\n+                'msg_id': 'R2044',\n+                'path': 'src/gen/about.py',\n+                'line': 2,\n+                'msg': 'Line with empty comment',\n+            },\n+            {\n+                'msg_id': 'C0103',\n+                'path': 'src/gen/about.py',\n+                'line': 12,\n+                'msg': 'Class name \"Ui_AboutAutoSplitWidget\" doesn\\'t conform to pattern',\n+            },\n+        ]\n+\n+        # Run pylint with the --recursive=y option\n+        with self.assertRaises(SystemExit) as cm:\n+            Run(['--recursive=y', 'src/'])\n+\n+        # Check that the exit code is 1, indicating an error\n+        self.assertEqual(cm.exception.code, 1)\n+\n+        # Verify that the messages contain the expected output\n+        # This assertion should now fail if the bug is present\n+        self.assertNotIn('src/gen/about.py', [msg['path'] for msg in mock_run.return_value.linter.reporter.messages], \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1847436,
  "num_received_chars": 71902,
  "elapsed_time": 522.5678496360779,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}