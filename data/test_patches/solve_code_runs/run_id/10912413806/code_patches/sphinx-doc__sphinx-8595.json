{
  "instance_id": "sphinx-doc__sphinx-8595",
  "edit_test_file": "tests/test_ext_apidoc.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d796..de157e5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,7 +1074,10 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+            if self.__all__ is not None and len(self.__all__) == 0:\n+                # Skip all members if __all__ is explicitly empty\n+                return True, []\n+            elif not self.__all__:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_all_handling.py b/tests/test_ext_autodoc_all_handling.py\nnew file mode 100644\nindex 0000000..af16e51\n--- /dev/null\n+++ b/tests/test_ext_autodoc_all_handling.py\n@@ -0,0 +1,44 @@\n+import os\n+import sys\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.testing.path import path\n+from io import StringIO\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_empty_all(app, status, warning):\n+    # Create a temporary directory for the test\n+    srcdir = path(app.srcdir)\n+    example_py = srcdir / 'example.py'\n+    index_rst = srcdir / 'index.rst'\n+\n+    # Write the example.py file with an empty __all__ attribute\n+    example_py.write_text(\"\"\"\n+__all__ = []\n+\n+def foo():\n+    \"docstring\"\n+\n+def bar():\n+    \"docstring\"\n+\n+def baz():\n+    \"docstring\"\n+\"\"\")\n+\n+    # Write the index.rst file to include the example module\n+    index_rst.write_text(\"\"\"\n+.. automodule:: example\n+   :members:\n+\"\"\")\n+\n+    # Build the documentation\n+    app.builder.build_all()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check that foo, bar, and baz are incorrectly shown\n+    assert 'foo' in content\n+    assert 'bar' in content\n+    assert 'baz' in content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_all_handling_inverted.py b/tests/test_ext_autodoc_all_handling_inverted.py\nnew file mode 100644\nindex 0000000..91ca66f\n--- /dev/null\n+++ b/tests/test_ext_autodoc_all_handling_inverted.py\n@@ -0,0 +1,44 @@\n+import os\n+import sys\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.testing.path import path\n+from io import StringIO\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_empty_all(app, status, warning):\n+    # Create a temporary directory for the test\n+    srcdir = path(app.srcdir)\n+    example_py = srcdir / 'example.py'\n+    index_rst = srcdir / 'index.rst'\n+\n+    # Write the example.py file with an empty __all__ attribute\n+    example_py.write_text(\"\"\"\n+__all__ = []\n+\n+def foo():\n+    \"docstring\"\n+\n+def bar():\n+    \"docstring\"\n+\n+def baz():\n+    \"docstring\"\n+\"\"\")\n+\n+    # Write the index.rst file to include the example module\n+    index_rst.write_text(\"\"\"\n+.. automodule:: example\n+   :members:\n+\"\"\")\n+\n+    # Build the documentation\n+    app.builder.build_all()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check that foo, bar, and baz are incorrectly shown\n+    # This should now fail if the bug is present\n+    if 'foo' in content or 'bar' in content or 'baz' in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2085400,
  "num_received_chars": 50235,
  "elapsed_time": 550.3778955936432,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}