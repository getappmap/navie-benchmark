{
  "instance_id": "sympy__sympy-20428",
  "edit_test_file": "sympy/polys/tests/test_densetools.py",
  "code_patch": "diff --git a/sympy/polys/polyclasses.py b/sympy/polys/polyclasses.py\nindex 238a0f0..6eb7f65 100644\n--- a/sympy/polys/polyclasses.py\n+++ b/sympy/polys/polyclasses.py\n@@ -65,6 +65,7 @@ def _perify_factors(per, result, include):\n     dmp_mul_ground,\n     dmp_quo_ground,\n     dmp_exquo_ground,\n+    dmp_strip,  # Import dmp_strip to prevent linter errors\n     dmp_abs,\n     dup_neg, dmp_neg,\n     dup_add, dmp_add,\n@@ -586,6 +587,7 @@ def l1_norm(f):\n     def clear_denoms(f):\n         \"\"\"Clear denominators, but keep the ground domain. \"\"\"\n         coeff, F = dmp_clear_denoms(f.rep, f.lev, f.dom)\n+        F = dmp_strip(F, f.lev)  # Ensure the DMP is stripped of leading zeros\n         return coeff, f.per(F)\n \n     def integrate(f, m=1, j=0):\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_denoms.py b/sympy/polys/tests/test_denoms.py\nnew file mode 100644\nindex 0000000..9970d06\n--- /dev/null\n+++ b/sympy/polys/tests/test_denoms.py\n@@ -0,0 +1,15 @@\n+from sympy import symbols, sympify, Poly\n+from sympy.testing.pytest import raises\n+\n+def test_clear_denoms_issue():\n+    x = symbols(\"x\")\n+    f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+    coeff, bad_poly = f.clear_denoms()\n+\n+    # Check if the bad_poly behaves inconsistently\n+    assert bad_poly.is_zero == False\n+    assert bad_poly.as_expr().is_zero == True\n+\n+    # Check if terms_gcd raises an IndexError\n+    with raises(IndexError):\n+        bad_poly.terms_gcd()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_denoms_inverted.py b/sympy/polys/tests/test_denoms_inverted.py\nnew file mode 100644\nindex 0000000..4801837\n--- /dev/null\n+++ b/sympy/polys/tests/test_denoms_inverted.py\n@@ -0,0 +1,15 @@\n+from sympy import symbols, sympify, Poly\n+from sympy.testing.pytest import raises\n+\n+def test_clear_denoms_issue():\n+    x = symbols(\"x\")\n+    f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+    coeff, bad_poly = f.clear_denoms()\n+\n+    # Check if the bad_poly behaves inconsistently\n+    assert bad_poly.is_zero == True, \"__BUG__HERE__\"\n+    assert bad_poly.as_expr().is_zero == True\n+\n+    # Check if terms_gcd raises an IndexError\n+    with raises(IndexError):\n+        bad_poly.terms_gcd()\n\\ No newline at end of file\n",
  "num_sent_chars": 2329877,
  "num_received_chars": 54360,
  "elapsed_time": 838.0963249206543,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}