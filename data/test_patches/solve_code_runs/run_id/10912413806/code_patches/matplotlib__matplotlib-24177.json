{
  "instance_id": "matplotlib__matplotlib-24177",
  "edit_test_file": "lib/matplotlib/tests/test_category.py",
  "code_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 2412f81..8d5a943 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6831,6 +6831,9 @@ such objects\n             if bottom is None:\n                 bottom = 0\n \n+            if density:\n+                tops = tops / np.diff(bins) / tops.sum()\n+\n             y[1:2*len(bins)-1:2] = y[2:2*len(bins):2] = bottom\n             y[2*len(bins)-1:] = y[1:2*len(bins)-1][::-1]\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_histogram_density.py b/lib/matplotlib/tests/test_histogram_density.py\nnew file mode 100644\nindex 0000000..7f408dd\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_histogram_density.py\n@@ -0,0 +1,22 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestHistogramDensity(unittest.TestCase):\n+    def test_hist_density_scaling(self):\n+        scale = 1.2\n+        test_random = np.random.randn(100000) * scale\n+\n+        fig, ax = plt.subplots(1, 2, figsize=(20, 10))\n+        hist_bar = ax[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+        hist_step = ax[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+\n+        # Check if the maximum density value for 'step' is less than 'bar'\n+        max_density_bar = max(hist_bar[0])\n+        max_density_step = max(hist_step[0])\n+\n+        self.assertEqual(max_density_step, max_density_bar,\n+                         \"Density for 'step' histtype is not auto-scaled correctly.\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_histogram_density_inverted.py b/lib/matplotlib/tests/test_histogram_density_inverted.py\nnew file mode 100644\nindex 0000000..2c86b44\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_histogram_density_inverted.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import unittest\n+\n+class TestHistogramDensity(unittest.TestCase):\n+    def test_hist_density_scaling(self):\n+        scale = 1.2\n+        test_random = np.random.randn(100000) * scale\n+\n+        fig, ax = plt.subplots(1, 2, figsize=(20, 10))\n+        hist_bar = ax[0].hist(test_random, bins=100, density=True, histtype=\"bar\")\n+        hist_step = ax[1].hist(test_random, bins=100, density=True, histtype=\"step\")\n+\n+        # Check if the maximum density value for 'step' is less than 'bar'\n+        max_density_bar = max(hist_bar[0])\n+        max_density_step = max(hist_step[0])\n+\n+        # Alter the test to fail when the issue is observed\n+        if max_density_step == max_density_bar:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 541757,
  "num_received_chars": 5539,
  "elapsed_time": 69.00237917900085,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}