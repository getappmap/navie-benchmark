{
  "instance_id": "pydata__xarray-2905",
  "edit_test_file": "xarray/tests/test_utils.py",
  "code_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 45553eb..279660d 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -855,17 +855,21 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n-            if value.ndim > len(dims):\n-                raise ValueError(\n-                    \"shape mismatch: value array of shape %s could not be \"\n-                    \"broadcast to indexing result with %s dimensions\"\n-                    % (value.shape, len(dims))\n-                )\n-            if value.ndim == 0:\n-                value = Variable((), value)\n+            if hasattr(value, 'values') and self.dtype == object:\n+                # Allow storage of custom objects with a 'values' property in object arrays\n+                value = value\n             else:\n-                value = Variable(dims[-value.ndim :], value)\n+                value = as_compatible_data(value)\n+                if value.ndim > len(dims):\n+                    raise ValueError(\n+                        \"shape mismatch: value array of shape %s could not be \"\n+                        \"broadcast to indexing result with %s dimensions\"\n+                        % (value.shape, len(dims))\n+                    )\n+                if value.ndim == 0:\n+                    value = Variable((), value)\n+                else:\n+                    value = Variable(dims[-value.ndim :], value)\n         # broadcast to become assignable\n         value = value.set_dims(dims).data\n \n",
  "test_patch": "diff --git a/xarray/tests/test_variable_setitem.py b/xarray/tests/test_variable_setitem.py\nnew file mode 100644\nindex 0000000..77a0ef7\n--- /dev/null\n+++ b/xarray/tests/test_variable_setitem.py\n@@ -0,0 +1,15 @@\n+import numpy as np\n+import xarray as xr\n+from xarray.tests import assert_array_equal\n+\n+def test_variable_setitem_coercion():\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Assert the incorrect behavior to reproduce the issue\n+    assert_array_equal(bad_indexed.values, np.array([np.array(5)], dtype=object))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_variable_setitem_inverted.py b/xarray/tests/test_variable_setitem_inverted.py\nnew file mode 100644\nindex 0000000..608425e\n--- /dev/null\n+++ b/xarray/tests/test_variable_setitem_inverted.py\n@@ -0,0 +1,17 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_variable_setitem_coercion():\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Assert the incorrect behavior to reproduce the issue\n+    # This should now fail when the bug is observed\n+    with pytest.raises(AssertionError, match=\"__BUG__HERE__\"):\n+        assert bad_indexed.values == np.array([HasValues()], dtype=object)\n\\ No newline at end of file\n",
  "num_sent_chars": 1737501,
  "num_received_chars": 32207,
  "elapsed_time": 322.857084274292,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}