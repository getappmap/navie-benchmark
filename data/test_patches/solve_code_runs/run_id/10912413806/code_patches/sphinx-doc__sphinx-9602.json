{
  "instance_id": "sphinx-doc__sphinx-9602",
  "edit_test_file": "tests/test_util_typing.py",
  "code_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex f824450..b236436 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -5079,6 +5079,7 @@ class DefinitionParser(BaseParser):\n         #  | boolean-literal -> \"false\" | \"true\"\n         #  | pointer-literal -> \"nullptr\"\n         #  | user-defined-literal\n+        #  | literal-annotation -> \"Literal[...]\"\n \n         def _udl(literal: ASTLiteral) -> ASTLiteral:\n             if not self.match(udl_identifier_re):\n@@ -5089,6 +5090,14 @@ class DefinitionParser(BaseParser):\n             return ASTUserDefinedLiteral(literal, ident)\n \n         self.skip_ws()\n+        if self.skip_word('Literal'):\n+            # Handle Literal annotations by skipping the content\n+            # and returning a placeholder literal\n+            self.skip_ws()\n+            if self.skip_string('['):\n+                while not self.skip_string(']'):\n+                    self.pos += 1\n+                return ASTLiteral()  # Placeholder for Literal\n         if self.skip_word('nullptr'):\n             return ASTPointerLiteral()\n         if self.skip_word('true'):\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_literal.py b/tests/test_ext_autodoc_literal.py\nnew file mode 100644\nindex 0000000..cb3fd44\n--- /dev/null\n+++ b/tests/test_ext_autodoc_literal.py\n@@ -0,0 +1,31 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ConfigError\n+from unittest import mock\n+import os\n+\n+class TestAutodocLiteral(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.confdir = self.srcdir\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+        self.buildername = 'html'\n+        self.warning = mock.Mock()\n+\n+    def test_literal_annotation(self):\n+        with self.assertRaises(ConfigError) as cm:\n+            app = Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                self.buildername,\n+                warning=self.warning,\n+                freshenv=True,\n+            )\n+            app.build()\n+        self.assertIn(\"config directory doesn't contain a conf.py file\", str(cm.exception))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_literal_inverted.py b/tests/test_ext_autodoc_literal_inverted.py\nnew file mode 100644\nindex 0000000..a9d924e\n--- /dev/null\n+++ b/tests/test_ext_autodoc_literal_inverted.py\n@@ -0,0 +1,32 @@\n+import unittest\n+from sphinx.application import Sphinx\n+from sphinx.errors import ConfigError\n+from unittest import mock\n+import os\n+\n+class TestAutodocLiteral(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath(os.path.dirname(__file__))\n+        self.confdir = self.srcdir\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.doctreedir = os.path.join(self.outdir, 'doctrees')\n+        self.buildername = 'html'\n+        self.warning = mock.Mock()\n+\n+    def test_literal_annotation(self):\n+        with self.assertRaises(ConfigError) as cm:\n+            app = Sphinx(\n+                self.srcdir,\n+                self.confdir,\n+                self.outdir,\n+                self.doctreedir,\n+                self.buildername,\n+                warning=self.warning,\n+                freshenv=True,\n+            )\n+            app.build()\n+        # Altered assertion to make the test fail when the issue is observed\n+        self.assertNotIn(\"config directory doesn't contain a conf.py file\", str(cm.exception), \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 3274204,
  "num_received_chars": 69453,
  "elapsed_time": 665.6731207370758,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}