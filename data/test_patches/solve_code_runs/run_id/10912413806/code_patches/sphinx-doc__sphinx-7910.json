{
  "instance_id": "sphinx-doc__sphinx-7910",
  "edit_test_file": "tests/test_pycode.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9300a2c..cd9a532 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -13,6 +13,7 @@\n import importlib\n import re\n import warnings\n+from functools import unwrap\n from inspect import Parameter, Signature\n from types import ModuleType\n from typing import (\n@@ -314,6 +315,15 @@ class Documenter:\n                            type='autodoc')\n             return False\n \n+        # Attempt to unwrap the method to get the original function\n+        if self.objtype == 'method' and base == '__init__':\n+            try:\n+                original_method = unwrap(self.object)\n+                if hasattr(original_method, '__globals__'):\n+                    self.object = original_method\n+            except Exception:\n+                pass\n+\n         # support explicit module and class name separation via ::\n         if explicit_modname is not None:\n             modname = explicit_modname[:-2]\n",
  "test_patch": "diff --git a/tests/test_decorated_init_doc.py b/tests/test_decorated_init_doc.py\nnew file mode 100644\nindex 0000000..ed3db90\n--- /dev/null\n+++ b/tests/test_decorated_init_doc.py\n@@ -0,0 +1,35 @@\n+import unittest\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon import _process_docstring\n+from sphinx.application import Sphinx\n+from unittest.mock import Mock\n+import functools\n+\n+class TestDecoratedInitDoc(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        # Mock Sphinx application and config\n+        app = Mock(spec=Sphinx)\n+        app.config = Config(napoleon_include_init_with_doc=True)\n+\n+        # Define a class with a decorated __init__ method\n+        class SampleClass:\n+            @functools.wraps\n+            def __init__(self):\n+                \"\"\"This is the init docstring.\"\"\"\n+                pass\n+\n+        # Mock the parameters for _process_docstring\n+        what = 'class'\n+        name = 'SampleClass.__init__'\n+        obj = SampleClass.__init__\n+        options = Mock()\n+        lines = []\n+\n+        # Process the docstring\n+        _process_docstring(app, what, name, obj, options, lines)\n+\n+        # Assert that the docstring is not included in the lines\n+        self.assertNotIn(\"This is the init docstring.\", lines)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_decorated_init_doc_inverted.py b/tests/test_decorated_init_doc_inverted.py\nnew file mode 100644\nindex 0000000..6ba519e\n--- /dev/null\n+++ b/tests/test_decorated_init_doc_inverted.py\n@@ -0,0 +1,37 @@\n+import unittest\n+from sphinx.ext.napoleon import Config\n+from sphinx.ext.napoleon import _process_docstring\n+from sphinx.application import Sphinx\n+from unittest.mock import Mock\n+import functools\n+\n+class TestDecoratedInitDoc(unittest.TestCase):\n+    def test_decorated_init_not_documented(self):\n+        # Mock Sphinx application and config\n+        app = Mock(spec=Sphinx)\n+        app.config = Config(napoleon_include_init_with_doc=True)\n+\n+        # Define a class with a decorated __init__ method\n+        class SampleClass:\n+            @functools.wraps\n+            def __init__(self):\n+                \"\"\"This is the init docstring.\"\"\"\n+                pass\n+\n+        # Mock the parameters for _process_docstring\n+        what = 'class'\n+        name = 'SampleClass.__init__'\n+        obj = SampleClass.__init__\n+        options = Mock()\n+        lines = []\n+\n+        # Process the docstring\n+        _process_docstring(app, what, name, obj, options, lines)\n+\n+        # Assert that the docstring is included in the lines\n+        # This assertion should fail if the bug is present\n+        if \"This is the init docstring.\" not in lines:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2780144,
  "num_received_chars": 81299,
  "elapsed_time": 798.8122928142548,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}