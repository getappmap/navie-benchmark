{
  "instance_id": "sphinx-doc__sphinx-8056",
  "edit_test_file": "tests/test_ext_autodoc_events.py",
  "code_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06..22c4928 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -245,26 +245,26 @@ class GoogleDocstring:\n         return lines\n \n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n-                       ) -> Tuple[str, str, List[str]]:\n+                       ) -> List[Tuple[str, str, List[str]]]:\n         line = next(self._line_iter)\n \n         before, colon, after = self._partition_field_on_colon(line)\n-        _name, _type, _desc = before, '', after\n+        _names, _type, _desc = before.split(','), '', after\n \n         if parse_type:\n             match = _google_typed_arg_regex.match(before)\n             if match:\n-                _name = match.group(1)\n+                _names = match.group(1).split(',')\n                 _type = match.group(2)\n \n-        _name = self._escape_args_and_kwargs(_name)\n+        _names = [self._escape_args_and_kwargs(name.strip()) for name in _names]\n \n         if prefer_type and not _type:\n-            _type, _name = _name, _type\n+            _type, _names = _names, _type\n         indent = self._get_indent(line) + 1\n         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n         _descs = self.__class__(_descs, self._config).lines()\n-        return _name, _type, _descs\n+        return [(name, _type, _descs) for name in _names]\n \n     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                         ) -> List[Tuple[str, str, List[str]]]:\n@@ -403,18 +403,20 @@ class GoogleDocstring:\n                 lines.append(':%s %s: %s' % (type_role, _name, _type))\n         return lines + ['']\n \n-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n+    def _format_field(self, _name: Union[str, List[str]], _type: str, _desc: List[str]) -> List[str]:\n         _desc = self._strip_empty(_desc)\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n+        if isinstance(_name, list):\n+            _name = ', '.join(f'**{name}**' for name in _name)\n         if _name:\n             if _type:\n                 if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+                    field = '%s (%s)%s' % (_name, _type, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    field = '%s (*%s*)%s' % (_name, _type, separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                field = '%s%s' % (_name, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n",
  "test_patch": "diff --git a/tests/test_render_docstring.py b/tests/test_render_docstring.py\nnew file mode 100644\nindex 0000000..1423baa\n--- /dev/null\n+++ b/tests/test_render_docstring.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from sphinx.ext.napoleon import _process_docstring\n+\n+class TestRenderDocstring(unittest.TestCase):\n+    def test_combined_parameters_rendering(self):\n+        # Simulate the docstring with combined parameters\n+        docstring_lines = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Expected incorrect output as described in the issue\n+        expected_output = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Process the docstring using the _process_docstring function\n+        # We use a mock app object with necessary config attributes\n+        class MockApp:\n+            class Config:\n+                napoleon_numpy_docstring = True\n+                napoleon_google_docstring = False\n+                napoleon_custom_sections = None\n+            config = Config()\n+\n+        _process_docstring(MockApp(), None, None, None, None, docstring_lines)\n+\n+        # Assert that the processed docstring matches the expected incorrect output\n+        self.assertEqual(docstring_lines, expected_output)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_render_docstring_inverted.py b/tests/test_render_docstring_inverted.py\nnew file mode 100644\nindex 0000000..abe1127\n--- /dev/null\n+++ b/tests/test_render_docstring_inverted.py\n@@ -0,0 +1,33 @@\n+import unittest\n+from sphinx.ext.napoleon import _process_docstring\n+\n+class TestRenderDocstring(unittest.TestCase):\n+    def test_combined_parameters_rendering(self):\n+        # Simulate the docstring with combined parameters\n+        docstring_lines = [\n+            \"x1, x2 : array_like, optional\",\n+            \"    Input arrays, description of `x1`, `x2`.\"\n+        ]\n+\n+        # Expected correct output as described in the issue\n+        expected_output = [\n+            \"- x1, x2 (_array_like, optional_)  -  Input arrays, description of x1, x2.\"\n+        ]\n+\n+        # Process the docstring using the _process_docstring function\n+        # We use a mock app object with necessary config attributes\n+        class MockApp:\n+            class Config:\n+                napoleon_numpy_docstring = True\n+                napoleon_google_docstring = False\n+                napoleon_custom_sections = None\n+            config = Config()\n+\n+        _process_docstring(MockApp(), None, None, None, None, docstring_lines)\n+\n+        # Assert that the processed docstring matches the expected correct output\n+        # This should fail if the bug is present\n+        self.assertEqual(docstring_lines, expected_output, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2190499,
  "num_received_chars": 55993,
  "elapsed_time": 452.41487550735474,
  "lint_repair_count": 5,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}