{
  "instance_id": "sphinx-doc__sphinx-7757",
  "edit_test_file": "tests/test_util_docutils.py",
  "code_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex fc1136a..66f5a4f 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -150,6 +150,8 @@ def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n         if param.kind != param.POSITIONAL_ONLY and last_kind == param.POSITIONAL_ONLY:\n             # PEP-570: Separator for Positional Only Parameter: /\n             params += addnodes.desc_parameter('', '', addnodes.desc_sig_operator('', '/'))\n+        if param.default is not param.empty:\n+            params += addnodes.desc_parameter('', f'{param.name}={param.default}')\n         if param.kind == param.KEYWORD_ONLY and last_kind in (param.POSITIONAL_OR_KEYWORD,\n                                                               param.POSITIONAL_ONLY,\n                                                               None):\n\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 15f0d66..3ccbe6c 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -471,6 +471,8 @@ def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,\n         if param.kind != param.POSITIONAL_ONLY and last_kind == param.POSITIONAL_ONLY:\n             # PEP-570: Separator for Positional Only Parameter: /\n             args.append('/')\n+        if param.default is not param.empty:\n+            args.append(f\"{param.name}={param.default}\")\n         if param.kind == param.KEYWORD_ONLY and last_kind in (param.POSITIONAL_OR_KEYWORD,\n                                                               param.POSITIONAL_ONLY,\n                                                               None):\n",
  "test_patch": "diff --git a/tests/test_function_defaults.py b/tests/test_function_defaults.py\nnew file mode 100644\nindex 0000000..92eac5f\n--- /dev/null\n+++ b/tests/test_function_defaults.py\n@@ -0,0 +1,28 @@\n+import unittest\n+from docutils.parsers.rst import Parser\n+from docutils.frontend import OptionParser\n+from docutils.utils import new_document\n+from docutils import nodes\n+\n+class TestFunctionDefaults(unittest.TestCase):\n+    def test_positional_only_argument_default_value(self):\n+        # Create a new document\n+        settings = OptionParser(components=(Parser,)).get_default_values()\n+        document = new_document('<test document>', settings)\n+        \n+        # Define the RST content with a function directive\n+        rst_content = \"\"\"\n+        .. py:function:: foo(a, b=0, /, c=1)\n+        \"\"\"\n+        \n+        # Parse the RST content\n+        parser = Parser()\n+        parser.parse(rst_content, document)\n+        \n+        # Check the parsed document for the expected default value\n+        # This is where the issue is reproduced: the default value for 'b' is missing\n+        function_node = document.traverse(nodes.section)\n+        self.assertEqual(len(function_node), 0, \"Expected no sections due to missing default value for 'b'\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_function_defaults_inverted.py b/tests/test_function_defaults_inverted.py\nnew file mode 100644\nindex 0000000..acfaaec\n--- /dev/null\n+++ b/tests/test_function_defaults_inverted.py\n@@ -0,0 +1,29 @@\n+import unittest\n+from docutils.parsers.rst import Parser\n+from docutils.frontend import OptionParser\n+from docutils.utils import new_document\n+from docutils import nodes\n+\n+class TestFunctionDefaults(unittest.TestCase):\n+    def test_positional_only_argument_default_value(self):\n+        # Create a new document\n+        settings = OptionParser(components=(Parser,)).get_default_values()\n+        document = new_document('<test document>', settings)\n+        \n+        # Define the RST content with a function directive\n+        rst_content = \"\"\"\n+        .. py:function:: foo(a, b=0, /, c=1)\n+        \"\"\"\n+        \n+        # Parse the RST content\n+        parser = Parser()\n+        parser.parse(rst_content, document)\n+        \n+        # Check the parsed document for the expected default value\n+        # This is where the issue is reproduced: the default value for 'b' is missing\n+        function_node = document.traverse(nodes.section)\n+        if len(function_node) == 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2721087,
  "num_received_chars": 77178,
  "elapsed_time": 700.6352627277374,
  "lint_repair_count": 9,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}