{
  "instance_id": "sphinx-doc__sphinx-7889",
  "edit_test_file": "tests/test_ext_autodoc_mock.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 98a3a3a..f94ece2 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -68,8 +68,12 @@ class _MockObject:\n         return self.__display_name__\n \n \n+from typing import TypeVar\n+\n def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                    attributes: Any = None) -> Any:\n+    if isinstance(name, TypeVar):\n+        name = str(name)\n     attrs = {'__module__': module, '__display_name__': module + '.' + name}\n     attrs.update(attributes or {})\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_generic_typing.py b/tests/test_ext_autodoc_generic_typing.py\nnew file mode 100644\nindex 0000000..b15b0a8\n--- /dev/null\n+++ b/tests/test_ext_autodoc_generic_typing.py\n@@ -0,0 +1,14 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _make_subclass\n+from typing import TypeVar\n+\n+T = TypeVar('T')\n+\n+class TestAutodocGenericTyping(unittest.TestCase):\n+    def test_generic_typing_typeerror(self):\n+        \"\"\"Test that a TypeError is raised for generic-typed classes.\"\"\"\n+        with self.assertRaises(TypeError):\n+            _make_subclass('GenericClass', 'module', superclass=T)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_generic_typing_inverted.py b/tests/test_ext_autodoc_generic_typing_inverted.py\nnew file mode 100644\nindex 0000000..1973a3d\n--- /dev/null\n+++ b/tests/test_ext_autodoc_generic_typing_inverted.py\n@@ -0,0 +1,16 @@\n+import unittest\n+from sphinx.ext.autodoc.mock import _make_subclass\n+from typing import TypeVar\n+\n+T = TypeVar('T')\n+\n+class TestAutodocGenericTyping(unittest.TestCase):\n+    def test_generic_typing_typeerror(self):\n+        \"\"\"Test that a TypeError is raised for generic-typed classes.\"\"\"\n+        try:\n+            _make_subclass('GenericClass', 'module', superclass=T)\n+        except TypeError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2879888,
  "num_received_chars": 48615,
  "elapsed_time": 414.4974715709686,
  "lint_repair_count": 10,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}