{
  "instance_id": "scikit-learn__scikit-learn-12973",
  "edit_test_file": "sklearn/manifold/tests/test_isomap.py",
  "code_patch": "diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 03b34a0..dd6d8b5 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1490,18 +1490,24 @@ class LassoLarsIC(LassoLars):\n         y : array-like, shape (n_samples,)\n             target values. Will be cast to X's dtype if necessary\n \n-        copy_X : boolean, optional, default True\n-            If ``True``, X will be copied; else, it may be overwritten.\n+        copy_X : boolean, optional, default None\n+            If ``None``, the class-level copy_X attribute is used. If ``True``, \n+            X will be copied; else, it may be overwritten.\n \n         Returns\n         -------\n         self : object\n             returns an instance of self.\n         \"\"\"\n+        if copy_X is None:\n+            copy_X = self.copy_X\n+        else:\n+            self.copy_X = copy_X\n+\n         X, y = check_X_y(X, y, y_numeric=True)\n \n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(\n-            X, y, self.fit_intercept, self.normalize, self.copy_X)\n+            X, y, self.fit_intercept, self.normalize, copy_X)\n         max_iter = self.max_iter\n \n         Gram = self.precompute\n",
  "test_patch": "diff --git a/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py\nnew file mode 100644\nindex 0000000..1a9dcdd\n--- /dev/null\n+++ b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior.py\n@@ -0,0 +1,24 @@\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from numpy.testing import assert_array_equal\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    # Create a simple dataset\n+    X = np.array([[1, 2], [3, 4], [5, 6]])\n+    y = np.array([1, 2, 3])\n+\n+    # Create a copy of X to check if it gets modified\n+    X_original = X.copy()\n+\n+    # Initialize LassoLarsIC with copy_X=False\n+    lasso_lars_ic = LassoLarsIC(copy_X=False)\n+\n+    # Fit the model\n+    lasso_lars_ic.fit(X, y)\n+\n+    # Check if X has been modified\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified despite copy_X=False\")\n+\n+    # Now fit with copy_X=True and check if X is still unmodified\n+    lasso_lars_ic.fit(X, y, copy_X=True)\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified with copy_X=True\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py\nnew file mode 100644\nindex 0000000..d0d13dd\n--- /dev/null\n+++ b/sklearn/manifold/tests/test_lasso_lars_ic_copy_x_behavior_inverted.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+from numpy.testing import assert_array_equal, assert_raises\n+\n+def test_lasso_lars_ic_copy_x_behavior():\n+    # Create a simple dataset\n+    X = np.array([[1, 2], [3, 4], [5, 6]])\n+    y = np.array([1, 2, 3])\n+\n+    # Create a copy of X to check if it gets modified\n+    X_original = X.copy()\n+\n+    # Initialize LassoLarsIC with copy_X=False\n+    lasso_lars_ic = LassoLarsIC(copy_X=False)\n+\n+    # Fit the model\n+    lasso_lars_ic.fit(X, y)\n+\n+    # Check if X has been modified\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified despite copy_X=False\")\n+\n+    # Now fit with copy_X=True and check if X is still unmodified\n+    lasso_lars_ic.fit(X, y, copy_X=True)\n+    assert_array_equal(X, X_original, err_msg=\"X has been modified with copy_X=True\")\n+\n+    # Test for the bug: Fit with copy_X=False and expect X to be modified\n+    lasso_lars_ic.fit(X, y, copy_X=False)\n+    with assert_raises(AssertionError, match=\"__BUG__HERE__\"):\n+        assert_array_equal(X, X_original, err_msg=\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1698112,
  "num_received_chars": 35629,
  "elapsed_time": 310.5149917602539,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}