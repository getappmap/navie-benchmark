{
  "instance_id": "pytest-dev__pytest-10081",
  "edit_test_file": "testing/example_scripts/unittest/test_setup_skip_class.py",
  "code_patch": "diff --git a/doc/en/example/pythoncollection.rst b/doc/en/example/pythoncollection.rst\nindex b9c2386..a9143bb 100644\n--- a/doc/en/example/pythoncollection.rst\n+++ b/doc/en/example/pythoncollection.rst\n@@ -55,12 +55,16 @@ You can run all of the tests within ``tests/`` *except* for ``tests/foobar/test_\n by invoking ``pytest`` with ``--deselect tests/foobar/test_foobar_01.py::test_a``.\n ``pytest`` allows multiple ``--deselect`` options.\n \n+Handling `unittest.TestCase` with `--pdb`\n+-----------------------------------------\n+\n+When executing tests with `pytest --pdb`, be aware that the `tearDown` method of `unittest.TestCase` classes marked with `unittest.skip` at the class level may still be executed. This is contrary to the expected behavior where skipped tests should bypass all setup, test, and teardown methods. \n+\n+To prevent `tearDown` from executing in such cases, ensure that your test framework respects skip decorators even under specific execution flags like `--pdb`. As a workaround, consider adding explicit checks for skip conditions within your `tearDown` methods to avoid unintended actions during debugging.\n+\n Keeping duplicate paths specified from command line\n ----------------------------------------------------\n \n-Default behavior of ``pytest`` is to ignore duplicate paths specified from the command line.\n-Example:\n-\n .. code-block:: pytest\n \n     pytest path_a path_a\n",
  "test_patch": "diff --git a/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown.py b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown.py\nnew file mode 100644\nindex 0000000..190ea7f\n--- /dev/null\n+++ b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown.py\n@@ -0,0 +1,23 @@\n+import unittest\n+\n+@unittest.skip(\"hello\")\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        pass\n+\n+    def test_one(self):\n+        pass\n+\n+    def tearDown(self):\n+        raise NameError(\"Name 'xxx' is not defined\")\n+\n+def test_teardown_with_skip_class():\n+    test_case = MyTestCase(methodName='test_one')\n+    try:\n+        test_case.setUp()\n+        test_case.test_one()\n+    finally:\n+        try:\n+            test_case.tearDown()\n+        except NameError as e:\n+            assert str(e) == \"Name 'xxx' is not defined\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown_inverted.py b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown_inverted.py\nnew file mode 100644\nindex 0000000..8cbdf23\n--- /dev/null\n+++ b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+\n+@unittest.skip(\"hello\")\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        pass\n+\n+    def test_one(self):\n+        pass\n+\n+    def tearDown(self):\n+        raise NameError(\"Name 'xxx' is not defined\")\n+\n+def test_teardown_with_skip_class():\n+    test_case = MyTestCase(methodName='test_one')\n+    try:\n+        test_case.setUp()\n+        test_case.test_one()\n+    finally:\n+        try:\n+            test_case.tearDown()\n+        except NameError as e:\n+            assert str(e) == \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1976128,
  "num_received_chars": 43636,
  "elapsed_time": 379.8432550430298,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}