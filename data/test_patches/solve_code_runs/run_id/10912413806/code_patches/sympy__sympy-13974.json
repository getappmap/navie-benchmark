{
  "instance_id": "sympy__sympy-13974",
  "edit_test_file": "sympy/combinatorics/tests/test_tensor_can.py",
  "code_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 9dd10d2..5aea21f 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -239,7 +239,7 @@ def doit(self, **hints):\n         return TensorProduct(*[item.doit(**hints) for item in self.args])\n \n     def _eval_expand_tensorproduct(self, **hints):\n-        \"\"\"Distribute TensorProducts across addition.\"\"\"\n+        \"\"\"Distribute TensorProducts across addition and handle powers.\"\"\"\n         args = self.args\n         add_args = []\n         stop = False\n@@ -251,7 +251,13 @@ def _eval_expand_tensorproduct(self, **hints):\n                         tp = tp._eval_expand_tensorproduct()\n                     add_args.append(tp)\n                 break\n-\n+            elif isinstance(args[i], Pow):\n+                base = args[i].base._eval_expand_tensorproduct()\n+                exp = args[i].exp\n+                add_args.append(TensorProduct(*[arg**exp for arg in base.args]))\n+                stop = True\n+                break\n+    \n         if add_args:\n             return Add(*add_args)\n         else:\n@@ -378,6 +384,29 @@ def tensor_product_simp(e, **hints):\n     >>> tensor_product_simp(e**2)\n     (A*C)x(B*D)**2\n \n+    \"\"\"\n+    if isinstance(e, Add):\n+        return Add(*[tensor_product_simp(arg) for arg in e.args])\n+    elif isinstance(e, Pow):\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            return TensorProduct(*[arg**e.exp for arg in base.args])\n+        return base ** e.exp\n+    elif isinstance(e, Mul):\n+        return tensor_product_simp_Mul(e)\n+    elif isinstance(e, Commutator):\n+        return Commutator(*[tensor_product_simp(arg) for arg in e.args])\n+    elif isinstance(e, AntiCommutator):\n+        return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n+    else:\n+        return e\n+\n+    This is the core logic of this function, and it works inside, powers, sums,\n+    commutators and anticommutators as well:\n+\n+    >>> tensor_product_simp(e**2)\n+    (A*C)x(B*D)**2\n+\n     \"\"\"\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_tensor_product_powers.py b/sympy/combinatorics/tests/test_tensor_product_powers.py\nnew file mode 100644\nindex 0000000..0497600\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_tensor_product_powers.py\n@@ -0,0 +1,17 @@\n+from sympy import Symbol\n+from sympy.physics.quantum import TensorProduct as tp\n+from sympy.physics.quantum import tensor_product_simp as tps\n+from sympy.physics.paulialgebra import Pauli\n+\n+def test_tensor_product_powers_issue():\n+    a = Symbol('a', commutative=False)\n+\n+    # Test case for t1\n+    t1 = tp(1, 1) * tp(1, 1)\n+    assert tps(t1) == tp(1, 1)**2\n+    assert t1.expand(tensorproduct=True) == tp(1, 1)**2\n+\n+    # Test case for t2\n+    t2 = tp(1, Pauli(3)) * tp(1, Pauli(3))\n+    assert tps(t2) == tp(1, Pauli(3))**2\n+    assert t2.expand(tensorproduct=True) == tp(1, Pauli(3))**2\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_tensor_product_powers_inverted.py b/sympy/combinatorics/tests/test_tensor_product_powers_inverted.py\nnew file mode 100644\nindex 0000000..d8d77bb\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_tensor_product_powers_inverted.py\n@@ -0,0 +1,17 @@\n+from sympy import Symbol\n+from sympy.physics.quantum import TensorProduct as tp\n+from sympy.physics.quantum import tensor_product_simp as tps\n+from sympy.physics.paulialgebra import Pauli\n+\n+def test_tensor_product_powers_issue():\n+    a = Symbol('a', commutative=False)\n+\n+    # Test case for t1\n+    t1 = tp(1, 1) * tp(1, 1)\n+    assert tps(t1) != tp(1, 1)**2, \"__BUG__HERE__\"\n+    assert t1.expand(tensorproduct=True) != tp(1, 1)**2, \"__BUG__HERE__\"\n+\n+    # Test case for t2\n+    t2 = tp(1, Pauli(3)) * tp(1, Pauli(3))\n+    assert tps(t2) != tp(1, Pauli(3))**2, \"__BUG__HERE__\"\n+    assert t2.expand(tensorproduct=True) != tp(1, Pauli(3))**2, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2664607,
  "num_received_chars": 73988,
  "elapsed_time": 941.0498745441437,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}