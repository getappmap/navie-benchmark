{
  "instance_id": "sympy__sympy-16792",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb1..d9d71c4 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -421,14 +421,17 @@ def _partition_args(self, args):\n                 py_args.append(arg)\n             else:\n                 py_args.append(arg)\n-        # Find arguments that are array dimensions. These can be inferred\n-        # locally in the Cython code.\n+        # Ensure all array arguments are treated as such, even if not used in expr\n             if isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n                 dims = [d[1] + 1 for d in arg.dimensions]\n                 sym_dims = [(i, d) for (i, d) in enumerate(dims) if\n                             isinstance(d, Symbol)]\n                 for (i, d) in sym_dims:\n                     py_inferred[d] = (arg.name, i)\n+            elif isinstance(arg, InputArgument) and not arg.dimensions:\n+                # Treat unused array arguments as arrays\n+                if isinstance(arg.name, IndexedBase):\n+                    py_inferred[arg.name] = (arg.name, 0)\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1852467,
  "num_received_chars": 26090,
  "elapsed_time": 230.88989329338074,
  "lint_repair_count": 0,
  "test_generation_attempts": 9,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}