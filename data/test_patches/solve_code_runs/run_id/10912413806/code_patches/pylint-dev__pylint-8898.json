{
  "instance_id": "pylint-dev__pylint-8898",
  "edit_test_file": "tests/lint/test_run_pylint.py",
  "code_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 30a5fd1..9ff1f7a 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,10 +112,10 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a semicolon separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    for pattern in value.split(';'):\n+        patterns.append(_regex_transformer(pattern.strip()))\n     return patterns\n \n \n\ndiff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py\nindex b99c947..32c3a1b 100644\n--- a/pylint/config/arguments_manager.py\n+++ b/pylint/config/arguments_manager.py\n@@ -25,6 +25,7 @@ from pylint.config.argument import (\n     _StoreNewNamesArgument,\n     _StoreOldNamesArgument,\n     _StoreTrueArgument,\n+    _regexp_csv_transfomer,  # Ensure the modified transformer is imported\n )\n from pylint.config.exceptions import (\n     UnrecognizedArgumentAction,\n",
  "test_patch": "diff --git a/tests/lint/test_bad_names_rgxs.py b/tests/lint/test_bad_names_rgxs.py\nnew file mode 100644\nindex 0000000..724b3b4\n--- /dev/null\n+++ b/tests/lint/test_bad_names_rgxs.py\n@@ -0,0 +1,20 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n+\n+from pathlib import Path\n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pylint import run_pylint\n+\n+def test_bad_names_rgxs_mangles_regex_with_commas(capsys: CaptureFixture[str], tmp_path: Path) -> None:\n+    \"\"\"Reproduce issue where bad-names-rgxs with commas causes pylint to crash.\"\"\"\n+    test_file = tmp_path / \"testpylintrc\"\n+    with open(test_file, \"w\", encoding=\"utf-8\") as f:\n+        f.write(\"[BASIC]\\nbad-names-rgxs=(foo{1,3})\")\n+\n+    with pytest.raises(SystemExit) as ex:\n+        run_pylint([\"--rcfile\", f\"{test_file}\", \"foo.py\"])\n+    captured = capsys.readouterr()\n+    assert \"missing ), unterminated subpattern\" in captured.err\n+    assert ex.value.code != 0\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/lint/test_bad_names_rgxs_inverted.py b/tests/lint/test_bad_names_rgxs_inverted.py\nnew file mode 100644\nindex 0000000..cd32810\n--- /dev/null\n+++ b/tests/lint/test_bad_names_rgxs_inverted.py\n@@ -0,0 +1,20 @@\n+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n+# For details: https://github.com/pylint-dev/pylint/blob/main/LICENSE\n+# Copyright (c) https://github.com/pylint-dev/pylint/blob/main/CONTRIBUTORS.txt\n+\n+from pathlib import Path\n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pylint import run_pylint\n+\n+def test_bad_names_rgxs_mangles_regex_with_commas(capsys: CaptureFixture[str], tmp_path: Path) -> None:\n+    \"\"\"Reproduce issue where bad-names-rgxs with commas causes pylint to crash.\"\"\"\n+    test_file = tmp_path / \"testpylintrc\"\n+    with open(test_file, \"w\", encoding=\"utf-8\") as f:\n+        f.write(\"[BASIC]\\nbad-names-rgxs=(foo{1,3})\")\n+\n+    with pytest.raises(SystemExit) as ex:\n+        run_pylint([\"--rcfile\", f\"{test_file}\", \"foo.py\"])\n+    captured = capsys.readouterr()\n+    assert \"missing ), unterminated subpattern\" not in captured.err, \"__BUG__HERE__\"\n+    assert ex.value.code != 0\n\\ No newline at end of file\n",
  "num_sent_chars": 510394,
  "num_received_chars": 9722,
  "elapsed_time": 76.58436036109924,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}