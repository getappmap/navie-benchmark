{
  "instance_id": "sphinx-doc__sphinx-10323",
  "edit_test_file": "tests/test_build_texinfo.py",
  "code_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex dc44ed3..2591550 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,14 +343,22 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Determine the indentation level of the first line of the included code\n+            first_line_indent = len(lines[0]) - len(lines[0].lstrip())\n+            # Apply the same indentation to the prepend content\n+            indented_prepend = ' ' * first_line_indent + prepend\n+            lines.insert(0, indented_prepend + '\\n')\n \n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            # Determine the indentation level of the last line of the included code\n+            last_line_indent = len(lines[-1]) - len(lines[-1].lstrip())\n+            # Apply the same indentation to the append content\n+            indented_append = ' ' * last_line_indent + append\n+            lines.append(indented_append + '\\n')\n \n         return lines\n \n",
  "test_patch": "diff --git a/tests/test_literalinclude_indent.py b/tests/test_literalinclude_indent.py\nnew file mode 100644\nindex 0000000..f49d6a9\n--- /dev/null\n+++ b/tests/test_literalinclude_indent.py\n@@ -0,0 +1,61 @@\n+import os\n+from unittest import TestCase\n+from sphinx.directives.code import LiteralIncludeReader\n+from sphinx.config import Config\n+\n+class TestLiteralIncludeIndent(TestCase):\n+    def setUp(self):\n+        self.config = Config({}, {})\n+        self.test_file_path = os.path.join(os.path.dirname(__file__), 'pom.xml')\n+        with open(self.test_file_path, 'w') as f:\n+            f.write(\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.8.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+          <debug>true</debug>\n+          <encoding>UTF-8</encoding>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>com.github.ekryd.sortpom</groupId>\n+        <artifactId>sortpom-maven-plugin</artifactId>\n+        <version>2.15.0</version>\n+        <configuration>\n+          <verifyFailOn>strict</verifyFailOn>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\"\"\")\n+\n+    def tearDown(self):\n+        os.remove(self.test_file_path)\n+\n+    def test_literalinclude_prepend_indent(self):\n+        options = {\n+            'language': 'xml',\n+            'prepend': '</plugin>',\n+            'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+            'end-at': '</plugin>'\n+        }\n+        reader = LiteralIncludeReader(self.test_file_path, options, self.config)\n+        content, _ = reader.read()\n+\n+        expected_output = \"\"\"<plugin>\n+        <groupId>com.github.ekryd.sortpom</groupId>\n+        <artifactId>sortpom-maven-plugin</artifactId>\n+        <version>2.15.0</version>\n+        <configuration>\n+          <verifyFailOn>strict</verifyFailOn>\n+        </configuration>\n+      </plugin>\"\"\"\n+\n+        # Assert that the output is incorrectly indented\n+        self.assertNotEqual(content.strip(), expected_output.strip())\n\\ No newline at end of file\n",
  "test_inverted_patch": null,
  "num_sent_chars": 3344251,
  "num_received_chars": 74957,
  "elapsed_time": 708.3755638599396,
  "lint_repair_count": 2,
  "test_generation_attempts": 9,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}