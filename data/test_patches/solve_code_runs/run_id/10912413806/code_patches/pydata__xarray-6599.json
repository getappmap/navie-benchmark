{
  "instance_id": "pydata__xarray-6599",
  "edit_test_file": "xarray/tests/test_missing.py",
  "code_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe0..043f4e2 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1918,17 +1918,17 @@ def polyval(\n \n \n def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n-    \"\"\"Converts all datetime64 variables to float64\n+    \"\"\"Converts all datetime64 and timedelta64 variables to float64\n \n     Parameters\n     ----------\n     data : DataArray or Dataset\n-        Variables with possible datetime dtypes.\n+        Variables with possible datetime or timedelta dtypes.\n \n     Returns\n     -------\n     DataArray or Dataset\n-        Variables with datetime64 dtypes converted to float64.\n+        Variables with datetime64 and timedelta64 dtypes converted to float64.\n     \"\"\"\n     from .dataset import Dataset\n \n@@ -1941,6 +1941,8 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # Handle timedelta64\n+            return x.copy(data=x.data.astype('timedelta64[ns]').astype(float))\n         return x\n \n     if isinstance(data, Dataset):\n",
  "test_patch": "diff --git a/xarray/tests/test_polyval_timedelta64_issue.py b/xarray/tests/test_polyval_timedelta64_issue.py\nnew file mode 100644\nindex 0000000..6972c11\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta64_issue.py\n@@ -0,0 +1,56 @@\n+import numpy as np\n+import xarray as xr\n+from xarray.testing import assert_allclose\n+\n+def test_polyval_with_timedelta64():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    # Expected output for the stable version\n+    expected = xr.DataArray(\n+        [\n+            [4447392.16, 1450539.74, 5299608.57],\n+            [4505537.25588366, 1448882.82238152, 5250846.359196],\n+            [4563174.92026797, 1446979.12250014, 5201491.44401733],\n+            [4620298.31815291, 1444829.59596699, 5151549.377964],\n+            [4676900.67053846, 1442435.23739315, 5101025.78153601],\n+            [4732975.25442459, 1439797.08038974, 5049926.34223336],\n+        ],\n+        dims=(\"azimuth_time\", \"axis\"),\n+        coords={\"azimuth_time\": azimuth_time, \"axis\": [0, 1, 2]},\n+    )\n+\n+    # Actual output from the current version\n+    actual = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Assert that the actual output is incorrect\n+    try:\n+        assert_allclose(actual, expected)\n+    except AssertionError:\n+        pass  # Test passes if the assertion fails, indicating the issue is reproduced\n+    else:\n+        raise AssertionError(\"The issue was not reproduced, the outputs are unexpectedly close.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_polyval_timedelta64_issue_inverted.py b/xarray/tests/test_polyval_timedelta64_issue_inverted.py\nnew file mode 100644\nindex 0000000..53aaf2a\n--- /dev/null\n+++ b/xarray/tests/test_polyval_timedelta64_issue_inverted.py\n@@ -0,0 +1,54 @@\n+import numpy as np\n+import xarray as xr\n+from xarray.testing import assert_allclose\n+\n+def test_polyval_with_timedelta64():\n+    values = np.array(\n+        [\n+            \"2021-04-01T05:25:19.000000000\",\n+            \"2021-04-01T05:25:29.000000000\",\n+            \"2021-04-01T05:25:39.000000000\",\n+            \"2021-04-01T05:25:49.000000000\",\n+            \"2021-04-01T05:25:59.000000000\",\n+            \"2021-04-01T05:26:09.000000000\",\n+        ],\n+        dtype=\"datetime64[ns]\",\n+    )\n+    azimuth_time = xr.DataArray(\n+        values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n+    )\n+\n+    polyfit_coefficients = xr.DataArray(\n+        [\n+            [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+            [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+            [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+            [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+            [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+        ],\n+        dims=(\"degree\", \"axis\"),\n+        coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+    )\n+\n+    # Expected output for the stable version\n+    expected = xr.DataArray(\n+        [\n+            [4447392.16, 1450539.74, 5299608.57],\n+            [4505537.25588366, 1448882.82238152, 5250846.359196],\n+            [4563174.92026797, 1446979.12250014, 5201491.44401733],\n+            [4620298.31815291, 1444829.59596699, 5151549.377964],\n+            [4676900.67053846, 1442435.23739315, 5101025.78153601],\n+            [4732975.25442459, 1439797.08038974, 5049926.34223336],\n+        ],\n+        dims=(\"azimuth_time\", \"axis\"),\n+        coords={\"azimuth_time\": azimuth_time, \"axis\": [0, 1, 2]},\n+    )\n+\n+    # Actual output from the current version\n+    actual = xr.polyval(azimuth_time, polyfit_coefficients)\n+\n+    # Assert that the actual output is incorrect\n+    try:\n+        assert_allclose(actual, expected)\n+    except AssertionError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1672183,
  "num_received_chars": 50555,
  "elapsed_time": 457.4053645133972,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}