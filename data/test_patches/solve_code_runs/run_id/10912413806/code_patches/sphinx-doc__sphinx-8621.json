{
  "instance_id": "sphinx-doc__sphinx-8621",
  "edit_test_file": "tests/test_roles.py",
  "code_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 2d3042f..c17d5a9 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -375,18 +375,27 @@ def menusel_role(typ: str, rawtext: str, text: str, lineno: int, inliner: Inline\n \n class GUILabel(SphinxRole):\n     amp_re = re.compile(r'(?<!&)&(?![&\\s])')\n+    kbd_separator_re = re.compile(r'(?<!\\\\)([-+^])')\n \n     def run(self) -> Tuple[List[Node], List[system_message]]:\n         node = nodes.inline(rawtext=self.rawtext, classes=[self.name])\n-        spans = self.amp_re.split(self.text)\n-        node += nodes.Text(spans.pop(0))\n-        for span in spans:\n-            span = span.replace('&&', '&')\n-\n-            letter = nodes.Text(span[0])\n-            accelerator = nodes.inline('', '', letter, classes=['accelerator'])\n-            node += accelerator\n-            node += nodes.Text(span[1:])\n+        if self.name == 'kbd':\n+            spans = self.kbd_separator_re.split(self.text)\n+            for i, span in enumerate(spans):\n+                if i % 2 == 0:\n+                    node += nodes.inline('', '', nodes.Text(span), classes=['kbd'])\n+                else:\n+                    node += nodes.Text(span)\n+        else:\n+            spans = self.amp_re.split(self.text)\n+            node += nodes.Text(spans.pop(0))\n+            for span in spans:\n+                span = span.replace('&&', '&')\n+\n+                letter = nodes.Text(span[0])\n+                accelerator = nodes.inline('', '', letter, classes=['accelerator'])\n+                node += accelerator\n+                node += nodes.Text(span[1:])\n \n         return [node], []\n \n",
  "test_patch": "diff --git a/tests/test_kbd_html_output.py b/tests/test_kbd_html_output.py\nnew file mode 100644\nindex 0000000..33f8be1\n--- /dev/null\n+++ b/tests/test_kbd_html_output.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from docutils import nodes\n+from sphinx.util.docutils import ReferenceRole\n+\n+class TestKbdRoleHTML(unittest.TestCase):\n+    def test_kbd_role_with_separators(self):\n+        # Create a mock inliner\n+        class MockInliner:\n+            document = nodes.document('', '')\n+\n+        # Create a mock ReferenceRole\n+        class MockReferenceRole(ReferenceRole):\n+            def run(self):\n+                return [nodes.literal(self.text, self.text)], []\n+\n+        # Test case 1: Single keystroke with '-'\n+        role = MockReferenceRole()\n+        result, _ = role('kbd', '-', '-', 0, MockInliner())\n+        self.assertEqual(result[0].astext(), '-')\n+\n+        # Test case 2: Single keystroke with '+'\n+        result, _ = role('kbd', '+', '+', 0, MockInliner())\n+        self.assertEqual(result[0].astext(), '+')\n+\n+        # Test case 3: Compound keystroke with 'Shift-+'\n+        result, _ = role('kbd', 'Shift-+', 'Shift-+', 0, MockInliner())\n+        self.assertEqual(result[0].astext(), 'Shift-+')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_kbd_html_output_inverted.py b/tests/test_kbd_html_output_inverted.py\nnew file mode 100644\nindex 0000000..383c414\n--- /dev/null\n+++ b/tests/test_kbd_html_output_inverted.py\n@@ -0,0 +1,30 @@\n+import unittest\n+from docutils import nodes\n+from sphinx.util.docutils import ReferenceRole\n+\n+class TestKbdRoleHTML(unittest.TestCase):\n+    def test_kbd_role_with_separators(self):\n+        # Create a mock inliner\n+        class MockInliner:\n+            document = nodes.document('', '')\n+\n+        # Create a mock ReferenceRole\n+        class MockReferenceRole(ReferenceRole):\n+            def run(self):\n+                return [nodes.literal(self.text, self.text)], []\n+\n+        # Test case 1: Single keystroke with '-'\n+        role = MockReferenceRole()\n+        result, _ = role('kbd', '-', '-', 0, MockInliner())\n+        self.assertNotEqual(result[0].astext(), '-', \"__BUG__HERE__\")\n+\n+        # Test case 2: Single keystroke with '+'\n+        result, _ = role('kbd', '+', '+', 0, MockInliner())\n+        self.assertNotEqual(result[0].astext(), '+', \"__BUG__HERE__\")\n+\n+        # Test case 3: Compound keystroke with 'Shift-+'\n+        result, _ = role('kbd', 'Shift-+', 'Shift-+', 0, MockInliner())\n+        self.assertNotEqual(result[0].astext(), 'Shift-+', \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2412565,
  "num_received_chars": 55188,
  "elapsed_time": 456.9148507118225,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}