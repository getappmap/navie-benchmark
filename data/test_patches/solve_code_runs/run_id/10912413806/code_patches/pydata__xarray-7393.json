{
  "instance_id": "pydata__xarray-7393",
  "edit_test_file": "xarray/tests/test_indexes.py",
  "code_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 3d4bf0a..87c7457 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4507,6 +4507,7 @@ class Dataset(\n         new_variables: dict[Hashable, Variable] = {}\n         stacked_var_names: list[Hashable] = []\n         drop_indexes: list[Hashable] = []\n+        original_dtypes: dict[Hashable, np.dtype] = {dim: self[dim].dtype for dim in dims}\n \n         for name, var in self.variables.items():\n             if any(d in var.dims for d in dims):\n@@ -4515,6 +4516,10 @@ class Dataset(\n                 shape = [self.dims[d] for d in vdims]\n                 exp_var = var.set_dims(vdims, shape)\n                 stacked_var = exp_var.stack(**{new_dim: dims})\n+                # Ensure dtype consistency\n+                for dim in dims:\n+                    if stacked_var[dim].dtype != original_dtypes[dim]:\n+                        stacked_var[dim] = stacked_var[dim].astype(original_dtypes[dim])\n                 new_variables[name] = stacked_var\n                 stacked_var_names.append(name)\n             else:\n",
  "test_patch": "diff --git a/xarray/tests/test_stack_dtype.py b/xarray/tests/test_stack_dtype.py\nnew file mode 100644\nindex 0000000..915f952\n--- /dev/null\n+++ b/xarray/tests/test_stack_dtype.py\n@@ -0,0 +1,12 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestStackDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        # The test should pass if the dtype changes from int32 to int64, which is the issue described\n+        self.assertFalse(ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_stack_dtype_inverted.py b/xarray/tests/test_stack_dtype_inverted.py\nnew file mode 100644\nindex 0000000..0ef9c25\n--- /dev/null\n+++ b/xarray/tests/test_stack_dtype_inverted.py\n@@ -0,0 +1,13 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestStackDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        # The test should fail if the dtype changes from int32 to int64, which is the issue described\n+        if ds['a'].values.dtype != ds.stack(b=('a',))['a'].values.dtype:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 3771875,
  "num_received_chars": 54246,
  "elapsed_time": 474.78052616119385,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}