{
  "instance_id": "sphinx-doc__sphinx-9367",
  "edit_test_file": "tests/test_util_template.py",
  "code_patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex f541ec0..8d448f1 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -214,7 +214,11 @@ class _UnparseVisitor(ast.NodeVisitor):\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n         if node.elts:\n-            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n+            if len(node.elts) == 1:\n+                # Handle single-element tuple with a trailing comma\n+                return \"(\" + self.visit(node.elts[0]) + \",)\"\n+            else:\n+                return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n         else:\n             return \"()\"\n \n",
  "test_patch": "diff --git a/tests/test_tuple_rendering.py b/tests/test_tuple_rendering.py\nnew file mode 100644\nindex 0000000..19c319a\n--- /dev/null\n+++ b/tests/test_tuple_rendering.py\n@@ -0,0 +1,17 @@\n+import unittest\n+from sphinx.pycode import ast\n+\n+class TestTupleRendering(unittest.TestCase):\n+    def test_single_element_tuple_rendering(self):\n+        # This is the test case to reproduce the issue\n+        source = \"(1,)\"\n+        expected = \"(1,)\"  # The expected incorrect output is \"(1)\" instead of \"(1,)\"\n+        \n+        module = ast.parse(source)\n+        result = ast.unparse(module.body[0].value, source)\n+        \n+        # Assert that the incorrect output is produced\n+        self.assertEqual(result, \"(1)\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_tuple_rendering_inverted.py b/tests/test_tuple_rendering_inverted.py\nnew file mode 100644\nindex 0000000..845b477\n--- /dev/null\n+++ b/tests/test_tuple_rendering_inverted.py\n@@ -0,0 +1,18 @@\n+import unittest\n+from sphinx.pycode import ast\n+\n+class TestTupleRendering(unittest.TestCase):\n+    def test_single_element_tuple_rendering(self):\n+        # This is the test case to reproduce the issue\n+        source = \"(1,)\"\n+        expected = \"(1,)\"  # The expected correct output is \"(1,)\" with the trailing comma\n+        \n+        module = ast.parse(source)\n+        result = ast.unparse(module.body[0].value, source)\n+        \n+        # Assert that the correct output is produced\n+        # This should fail if the bug is present\n+        self.assertEqual(result, expected, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 108895,
  "num_received_chars": 3447,
  "elapsed_time": 34.412421226501465,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 1584
}