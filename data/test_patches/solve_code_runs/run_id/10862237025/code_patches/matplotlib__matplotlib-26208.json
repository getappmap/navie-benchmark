{
  "instance_id": "matplotlib__matplotlib-26208",
  "edit_test_file": "lib/matplotlib/tests/test_transforms.py",
  "code_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/parasite_axes.py b/lib/mpl_toolkits/axes_grid1/parasite_axes.py\nindex cafd06a..a03d0c5 100644\n--- a/lib/mpl_toolkits/axes_grid1/parasite_axes.py\n+++ b/lib/mpl_toolkits/axes_grid1/parasite_axes.py\n@@ -161,6 +161,10 @@ class HostAxesBase:\n         self.axis[\"right\"].set_visible(False)\n         ax.axis[\"right\"].set_visible(True)\n         ax.axis[\"left\", \"top\", \"bottom\"].set_visible(False)\n+        \n+        # Ensure dataLim of the primary axis is preserved\n+        ax.ignore_existing_data_limits = True\n+        \n         return ax\n \n     def twiny(self, axes_class=None):\n@@ -203,6 +207,12 @@ class HostAxesBase:\n         ax = parasite_axes_class_factory(axes_class)(self, **kwargs)\n         self.parasites.append(ax)\n         ax._remove_method = self._remove_any_twin\n+        \n+        # Preserve the data limits of the primary axis\n+        if getattr(ax, 'ignore_existing_data_limits', False):\n+            ax.ignore_existing_data_limits = False\n+            ax.dataLim.set(self.dataLim)\n+        \n         return ax\n \n     def _remove_any_twin(self, ax):\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_twinx_stackplot_bug.py b/lib/matplotlib/tests/test_twinx_stackplot_bug.py\nnew file mode 100644\nindex 0000000..5656eec\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_twinx_stackplot_bug.py\n@@ -0,0 +1,29 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestTwinxStackplotBug(unittest.TestCase):\n+    def test_datalim_inf_with_twinx_and_stackplot(self):\n+        def print_datalim(*ax):\n+            return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+        df1_index = ['16 May', '17 May']\n+        df1_values = [-22.717708333333402, 26.584999999999937]\n+        df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+        fig, ax1 = plt.subplots()\n+\n+        ax1.stackplot(df1_index, df1_values)\n+        initial_datalim = print_datalim(ax1)\n+\n+        ax2 = ax1.twinx()\n+        datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+        ax2.plot(df1_index, df2_values)\n+        final_datalim = print_datalim(ax1, ax2)\n+\n+        # Assert that the dataLim of ax1 becomes inf after plotting on ax2\n+        self.assertTrue(np.isinf(final_datalim[0]).all())\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py b/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py\nnew file mode 100644\nindex 0000000..b4a2ffb\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_twinx_stackplot_bug_inverted.py\n@@ -0,0 +1,31 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import unittest\n+\n+class TestTwinxStackplotBug(unittest.TestCase):\n+    def test_datalim_inf_with_twinx_and_stackplot(self):\n+        def print_datalim(*ax):\n+            return [ax_.dataLim.intervaly for ax_ in ax]\n+\n+        df1_index = ['16 May', '17 May']\n+        df1_values = [-22.717708333333402, 26.584999999999937]\n+        df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+        fig, ax1 = plt.subplots()\n+\n+        ax1.stackplot(df1_index, df1_values)\n+        initial_datalim = print_datalim(ax1)\n+\n+        ax2 = ax1.twinx()\n+        datalim_after_twinx = print_datalim(ax1, ax2)\n+\n+        ax2.plot(df1_index, df2_values)\n+        final_datalim = print_datalim(ax1, ax2)\n+\n+        # Assert that the dataLim of ax1 does not become inf after plotting on ax2\n+        # This should fail if the bug is present\n+        if np.isinf(final_datalim[0]).all():\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1654450,
  "num_received_chars": 87406,
  "elapsed_time": 1096.7606527805328,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}