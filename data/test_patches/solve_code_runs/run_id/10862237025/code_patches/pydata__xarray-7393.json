{
  "instance_id": "pydata__xarray-7393",
  "edit_test_file": "xarray/tests/test_indexes.py",
  "code_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex f3f03c9..d04f38d 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -707,7 +707,7 @@ class PandasMultiIndex(PandasIndex):\n                 )\n \n         split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n-        labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\")\n+        labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\", dtype=split_labels[0].dtype)\n         labels = [x.ravel() for x in labels_mesh]\n \n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 118e7c4..0cb81fe 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -289,8 +289,7 @@ def as_compatible_data(data, fastpath=False):\n         return data\n \n     # validate whether the data is valid data types.\n-    data = np.asarray(data)\n-\n+    data = np.asarray(data, dtype=getattr(data, 'dtype', None))\n     if isinstance(data, np.ndarray) and data.dtype.kind in \"OMm\":\n         data = _possibly_convert_objects(data)\n     return _maybe_wrap_data(data)\n",
  "test_patch": "diff --git a/xarray/tests/test_stack_dtype.py b/xarray/tests/test_stack_dtype.py\nnew file mode 100644\nindex 0000000..915f952\n--- /dev/null\n+++ b/xarray/tests/test_stack_dtype.py\n@@ -0,0 +1,12 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestStackDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        # The test should pass if the dtype changes from int32 to int64, which is the issue described\n+        self.assertFalse(ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_stack_dtype_inverted.py b/xarray/tests/test_stack_dtype_inverted.py\nnew file mode 100644\nindex 0000000..0ef9c25\n--- /dev/null\n+++ b/xarray/tests/test_stack_dtype_inverted.py\n@@ -0,0 +1,13 @@\n+import xarray as xr\n+import numpy as np\n+import unittest\n+\n+class TestStackDtype(unittest.TestCase):\n+    def test_stack_casts_int32_to_int64(self):\n+        ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+        # The test should fail if the dtype changes from int32 to int64, which is the issue described\n+        if ds['a'].values.dtype != ds.stack(b=('a',))['a'].values.dtype:\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 7360410,
  "num_received_chars": 88180,
  "elapsed_time": 1343.7184901237488,
  "lint_repair_count": 3,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 85962
}