{
  "instance_id": "sphinx-doc__sphinx-8595",
  "edit_test_file": "tests/test_ext_apidoc.py",
  "code_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 767ef31..2170c43 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -144,6 +144,7 @@ def unwrap_all(obj: Any, *, stop: Callable = None) -> Any:\n def getall(obj: Any) -> Optional[Sequence[str]]:\n     \"\"\"Get __all__ attribute of the module as dict.\n \n+    Return an empty list if given *obj* has an empty __all__.\n     Return None if given *obj* does not have __all__.\n     Raises AttributeError if given *obj* raises an error on accessing __all__.\n     Raises ValueError if given *obj* have invalid __all__.\n@@ -151,11 +152,12 @@ def getall(obj: Any) -> Optional[Sequence[str]]:\n     __all__ = safe_getattr(obj, '__all__', None)\n     if __all__ is None:\n         return None\n+    elif isinstance(__all__, (list, tuple)) and all(isinstance(e, str) for e in __all__):\n+        return __all__\n+    elif isinstance(__all__, (list, tuple)) and len(__all__) == 0:\n+        return []\n     else:\n-        if (isinstance(__all__, (list, tuple)) and all(isinstance(e, str) for e in __all__)):\n-            return __all__\n-        else:\n-            raise ValueError(__all__)\n+        raise ValueError(__all__)\n \n \n def getannotations(obj: Any) -> Mapping[str, Any]:\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_all_handling.py b/tests/test_ext_autodoc_all_handling.py\nnew file mode 100644\nindex 0000000..af16e51\n--- /dev/null\n+++ b/tests/test_ext_autodoc_all_handling.py\n@@ -0,0 +1,44 @@\n+import os\n+import sys\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.testing.path import path\n+from io import StringIO\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_empty_all(app, status, warning):\n+    # Create a temporary directory for the test\n+    srcdir = path(app.srcdir)\n+    example_py = srcdir / 'example.py'\n+    index_rst = srcdir / 'index.rst'\n+\n+    # Write the example.py file with an empty __all__ attribute\n+    example_py.write_text(\"\"\"\n+__all__ = []\n+\n+def foo():\n+    \"docstring\"\n+\n+def bar():\n+    \"docstring\"\n+\n+def baz():\n+    \"docstring\"\n+\"\"\")\n+\n+    # Write the index.rst file to include the example module\n+    index_rst.write_text(\"\"\"\n+.. automodule:: example\n+   :members:\n+\"\"\")\n+\n+    # Build the documentation\n+    app.builder.build_all()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check that foo, bar, and baz are incorrectly shown\n+    assert 'foo' in content\n+    assert 'bar' in content\n+    assert 'baz' in content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_all_handling_inverted.py b/tests/test_ext_autodoc_all_handling_inverted.py\nnew file mode 100644\nindex 0000000..91ca66f\n--- /dev/null\n+++ b/tests/test_ext_autodoc_all_handling_inverted.py\n@@ -0,0 +1,44 @@\n+import os\n+import sys\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.testing.path import path\n+from io import StringIO\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_empty_all(app, status, warning):\n+    # Create a temporary directory for the test\n+    srcdir = path(app.srcdir)\n+    example_py = srcdir / 'example.py'\n+    index_rst = srcdir / 'index.rst'\n+\n+    # Write the example.py file with an empty __all__ attribute\n+    example_py.write_text(\"\"\"\n+__all__ = []\n+\n+def foo():\n+    \"docstring\"\n+\n+def bar():\n+    \"docstring\"\n+\n+def baz():\n+    \"docstring\"\n+\"\"\")\n+\n+    # Write the index.rst file to include the example module\n+    index_rst.write_text(\"\"\"\n+.. automodule:: example\n+   :members:\n+\"\"\")\n+\n+    # Build the documentation\n+    app.builder.build_all()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check that foo, bar, and baz are incorrectly shown\n+    # This should now fail if the bug is present\n+    if 'foo' in content or 'bar' in content or 'baz' in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2292269,
  "num_received_chars": 54660,
  "elapsed_time": 702.6067838668823,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 324635
}