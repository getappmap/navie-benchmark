{
  "instance_id": "sphinx-doc__sphinx-11510",
  "edit_test_file": "tests/test_directive_code.py",
  "code_patch": "diff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf..8ef30de 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -112,6 +112,25 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         # emit \"source-read\" event\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+\n+        # Ensure modifications are applied to included files\n+        if '.. include::' in content:\n+            for line in content.splitlines():\n+                if line.strip().startswith('.. include::'):\n+                    included_file = line.split('::')[1].strip()\n+                    included_content = self.read_included_file(included_file, env)\n+                    content = content.replace(line, included_content)\n+\n+        return arg[0]\n+\n+    def read_included_file(self, filename: str, env: BuildEnvironment) -> str:\n+        \"\"\"Read and process an included file.\"\"\"\n+        with open(filename, 'r', encoding='utf-8') as f:\n+            included_content = f.read()\n+\n+        # emit \"source-read\" event for included file\n+        arg = [included_content]\n+        env.events.emit('source-read', filename, arg)\n         return arg[0]\n \n \n",
  "test_patch": "diff --git a/tests/test_source_read_include.py b/tests/test_source_read_include.py\nnew file mode 100644\nindex 0000000..ad99005\n--- /dev/null\n+++ b/tests/test_source_read_include.py\n@@ -0,0 +1,78 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+\n+class TestSourceReadInclude(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath('.')\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.confdir = self.srcdir\n+        self.doctreedir = os.path.join(self.outdir, '.doctrees')\n+        self.buildername = 'html'\n+\n+        # Create necessary files for the test\n+        os.makedirs(self.outdir, exist_ok=True)\n+        with open(os.path.join(self.srcdir, 'conf.py'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+import sys\n+import os\n+\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = [\n+    'my-extension'\n+]\n+\"\"\")\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+This is a test\n+==============\n+\n+.. include:: something-to-include.rst\n+\n+&REPLACE_ME;\n+\"\"\")\n+        with open(os.path.join(self.srcdir, 'something-to-include.rst'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+Testing\n+=======\n+\n+&REPLACE_ME;\n+\"\"\")\n+        with open(os.path.join(self.srcdir, 'my-extension.py'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+from sphinx.application import Sphinx\n+\n+def subst_vars_replace(app: Sphinx, docname, source):\n+    result = source[0]\n+    result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+    source[0] = result\n+\n+def setup(app: Sphinx):\n+    app.connect('source-read', subst_vars_replace)\n+    return dict(\n+        version='1.0',\n+        parallel_read_safe=True,\n+        parallel_write_safe=True\n+    )\n+\"\"\")\n+\n+    def test_source_read_include(self):\n+        app = Sphinx(\n+            srcdir=self.srcdir,\n+            confdir=self.confdir,\n+            outdir=self.outdir,\n+            doctreedir=self.doctreedir,\n+            buildername=self.buildername,\n+            confoverrides={'extensions': ['my-extension']},\n+        )\n+        app.build()\n+\n+        # Check if the issue is reproduced\n+        with open(os.path.join(self.outdir, 'index.html'), 'r', encoding='utf-8') as f:\n+            content = f.read()\n+            self.assertIn('&amp;REPLACE_ME;', content)\n+            self.assertIn('REPLACED', content)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_source_read_include_inverted.py b/tests/test_source_read_include_inverted.py\nnew file mode 100644\nindex 0000000..0f08924\n--- /dev/null\n+++ b/tests/test_source_read_include_inverted.py\n@@ -0,0 +1,80 @@\n+import os\n+import unittest\n+from sphinx.application import Sphinx\n+\n+class TestSourceReadInclude(unittest.TestCase):\n+    def setUp(self):\n+        self.srcdir = os.path.abspath('.')\n+        self.outdir = os.path.join(self.srcdir, '_build')\n+        self.confdir = self.srcdir\n+        self.doctreedir = os.path.join(self.outdir, '.doctrees')\n+        self.buildername = 'html'\n+\n+        # Create necessary files for the test\n+        os.makedirs(self.outdir, exist_ok=True)\n+        with open(os.path.join(self.srcdir, 'conf.py'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+import sys\n+import os\n+\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = [\n+    'my-extension'\n+]\n+\"\"\")\n+        with open(os.path.join(self.srcdir, 'index.rst'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+This is a test\n+==============\n+\n+.. include:: something-to-include.rst\n+\n+&REPLACE_ME;\n+\"\"\")\n+        with open(os.path.join(self.srcdir, 'something-to-include.rst'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+Testing\n+=======\n+\n+&REPLACE_ME;\n+\"\"\")\n+        with open(os.path.join(self.srcdir, 'my-extension.py'), 'w', encoding='utf-8') as f:\n+            f.write(\"\"\"\n+from sphinx.application import Sphinx\n+\n+def subst_vars_replace(app: Sphinx, docname, source):\n+    result = source[0]\n+    result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+    source[0] = result\n+\n+def setup(app: Sphinx):\n+    app.connect('source-read', subst_vars_replace)\n+    return dict(\n+        version='1.0',\n+        parallel_read_safe=True,\n+        parallel_write_safe=True\n+    )\n+\"\"\")\n+\n+    def test_source_read_include(self):\n+        app = Sphinx(\n+            srcdir=self.srcdir,\n+            confdir=self.confdir,\n+            outdir=self.outdir,\n+            doctreedir=self.doctreedir,\n+            buildername=self.buildername,\n+            confoverrides={'extensions': ['my-extension']},\n+        )\n+        app.build()\n+\n+        # Check if the issue is reproduced\n+        with open(os.path.join(self.outdir, 'index.html'), 'r', encoding='utf-8') as f:\n+            content = f.read()\n+            # Alter the test to fail when the issue is observed\n+            if '&amp;REPLACE_ME;' in content:\n+                raise AssertionError(\"__BUG__HERE__\")\n+            self.assertIn('REPLACED', content)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1212920,
  "num_received_chars": 81820,
  "elapsed_time": 1064.1984167099,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}