{
  "instance_id": "pydata__xarray-4075",
  "edit_test_file": "xarray/tests/test_weighted.py",
  "code_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 996d2e4..db3cf6e 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,10 @@ class Weighted:\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        # Ensure weights are numerical for correct sum calculation\n+        numerical_weights = self.weights.astype(float)\n+\n+        sum_of_weights = self._reduce(mask, numerical_weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n",
  "test_patch": "diff --git a/xarray/tests/test_weighted_mean_bug.py b/xarray/tests/test_weighted_mean_bug.py\nnew file mode 100644\nindex 0000000..18fd327\n--- /dev/null\n+++ b/xarray/tests/test_weighted_mean_bug.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWeightedMeanBug(unittest.TestCase):\n+    def test_weighted_mean_with_boolean_weights(self):\n+        # Setup the data and weights\n+        dta = xr.DataArray([1.0, 1.0, 1.0])\n+        wgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool))\n+\n+        # Perform the weighted mean operation\n+        result = dta.weighted(wgt).mean()\n+\n+        # Assert that the incorrect output is produced\n+        expected_result = xr.DataArray(2.0)\n+        self.assertEqual(result.values, expected_result.values)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_weighted_mean_bug_inverted.py b/xarray/tests/test_weighted_mean_bug_inverted.py\nnew file mode 100644\nindex 0000000..24e282d\n--- /dev/null\n+++ b/xarray/tests/test_weighted_mean_bug_inverted.py\n@@ -0,0 +1,20 @@\n+import numpy as np\n+import xarray as xr\n+import unittest\n+\n+class TestWeightedMeanBug(unittest.TestCase):\n+    def test_weighted_mean_with_boolean_weights(self):\n+        # Setup the data and weights\n+        dta = xr.DataArray([1.0, 1.0, 1.0])\n+        wgt = xr.DataArray(np.array([1, 1, 0], dtype=bool))\n+\n+        # Perform the weighted mean operation\n+        result = dta.weighted(wgt).mean()\n+\n+        # Assert that the correct output is produced\n+        expected_result = xr.DataArray(1.0)\n+        if not np.array_equal(result.values, expected_result.values):\n+            raise AssertionError(\"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 153295,
  "num_received_chars": 4393,
  "elapsed_time": 65.04811692237854,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}