{
  "instance_id": "sympy__sympy-14976",
  "edit_test_file": "sympy/utilities/tests/test_lambdify.py",
  "code_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea2..b184c91 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -353,6 +353,8 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     \"\"\"\n     from sympy.core.symbol import Symbol\n     from sympy.utilities.iterables import flatten\n+    from sympy import Rational\n+    import mpmath\n \n     # If the user hasn't specified any modules, use what is available.\n     module_provided = True\n@@ -398,6 +400,8 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n+            # Convert rational numbers to mpmath equivalents\n+            expr = expr.xreplace({r: mpmath.mpf(r) for r in expr.atoms(Rational)})\n         elif _module_present('numpy', namespaces):\n             from sympy.printing.pycode import NumPyPrinter as Printer\n         elif _module_present('numexpr', namespaces):\n",
  "test_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals.py b/sympy/utilities/tests/test_lambdify_rationals.py\nnew file mode 100644\nindex 0000000..f0291f7\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals.py\n@@ -0,0 +1,13 @@\n+import inspect\n+from sympy import Eq, rf, S, lambdify, symbols\n+from sympy.external import import_module\n+\n+mpmath = import_module('mpmath')\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert \"RisingFactorial\" in source_code\n+    assert \"232/3\" in source_code\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/utilities/tests/test_lambdify_rationals_inverted.py b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\nnew file mode 100644\nindex 0000000..cdc62f1\n--- /dev/null\n+++ b/sympy/utilities/tests/test_lambdify_rationals_inverted.py\n@@ -0,0 +1,14 @@\n+import inspect\n+from sympy import Eq, rf, S, lambdify, symbols\n+from sympy.external import import_module\n+\n+mpmath = import_module('mpmath')\n+\n+def test_lambdify_mpmath_rationals():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    # Altered the test to fail when the issue is observed\n+    if \"RisingFactorial\" in source_code and \"232/3\" in source_code:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 2575243,
  "num_received_chars": 1102176,
  "elapsed_time": 4661.37375164032,
  "lint_repair_count": 27,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}