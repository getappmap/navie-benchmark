{
  "instance_id": "sphinx-doc__sphinx-9461",
  "edit_test_file": "tests/test_ext_autodoc_autoproperty.py",
  "code_patch": "diff --git a/doc/usage/extensions/example_google.py b/doc/usage/extensions/example_google.py\nindex 5fde6e2..bc0bea2 100644\n--- a/doc/usage/extensions/example_google.py\n+++ b/doc/usage/extensions/example_google.py\n@@ -75,6 +75,18 @@ def function_with_pep484_type_annotations(param1: int, param2: str) -> bool:\n     \"\"\"\n \n \n+def is_classmethod_property(obj):\n+    \"\"\"Check if the object is a classmethod property.\"\"\"\n+    return isinstance(obj, classmethod) and isinstance(obj.__func__, property)\n+\n+\n+def get_classmethod_property_docstring(obj):\n+    \"\"\"Retrieve the docstring for a classmethod property.\"\"\"\n+    if is_classmethod_property(obj):\n+        return obj.__func__.__doc__\n+    return None\n+\n+\n def module_level_function(param1, param2=None, *args, **kwargs):\n     \"\"\"This is an example of a module level function.\n \n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_classproperty.py b/tests/test_ext_autodoc_classproperty.py\nnew file mode 100644\nindex 0000000..e3383e5\n--- /dev/null\n+++ b/tests/test_ext_autodoc_classproperty.py\n@@ -0,0 +1,21 @@\n+\"\"\"\n+    test_ext_autodoc_classproperty\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for class properties. This test reproduces the issue\n+    where methods decorated with @classmethod and @property do not get documented.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_class_properties(app):\n+    actual = do_autodoc(app, 'property', 'target.properties.MetaClass.metaclass_class_property')\n+    # Expecting the output to be empty or incorrect due to the issue\n+    assert list(actual) == []\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_classproperty_inverted.py b/tests/test_ext_autodoc_classproperty_inverted.py\nnew file mode 100644\nindex 0000000..f761997\n--- /dev/null\n+++ b/tests/test_ext_autodoc_classproperty_inverted.py\n@@ -0,0 +1,24 @@\n+\"\"\"\n+    test_ext_autodoc_classproperty\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test the autodoc extension for class properties. This test reproduces the issue\n+    where methods decorated with @classmethod and @property do not get documented.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from .test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_class_properties(app):\n+    actual = do_autodoc(app, 'property', 'target.properties.MetaClass.metaclass_class_property')\n+    # The test should now fail if the issue is observed\n+    if list(actual) == []:\n+        raise AssertionError(\"__BUG__HERE__\")\n+    # If the output is not empty, the test should pass\n+    assert list(actual) != []\n\\ No newline at end of file\n",
  "num_sent_chars": 2160443,
  "num_received_chars": 119027,
  "elapsed_time": 822.455979347229,
  "lint_repair_count": 8,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 20495
}