{
  "instance_id": "sympy__sympy-19040",
  "edit_test_file": "sympy/core/tests/test_exprtools.py",
  "code_patch": "diff --git a/sympy/polys/numberfields.py b/sympy/polys/numberfields.py\nindex d10f04e..54f2090 100644\n--- a/sympy/polys/numberfields.py\n+++ b/sympy/polys/numberfields.py\n@@ -43,7 +43,7 @@\n \n \n \n-def _choose_factor(factors, x, v, dom=QQ, prec=200, bound=5):\n+def _choose_factor(factors, x, v, dom=QQ, prec=200, bound=5, extension=None):\n     \"\"\"\n     Return a factor having root ``v``\n     It is assumed that one of the factors has root ``v``.\n@@ -53,6 +53,9 @@ def _choose_factor(factors, x, v, dom=QQ, prec=200, bound=5):\n     if len(factors) == 1:\n         return factors[0]\n \n+    if extension:\n+        factors = [f for f in factors if f.has(*extension)]\n+\n     points = {x:v}\n     symbols = dom.symbols if hasattr(dom, 'symbols') else []\n     t = QQ(1, 10)\n@@ -202,7 +205,7 @@ def _minimal_polynomial_sq(p, n, x):\n     result = _choose_factor(factors, x, pn)\n     return result\n \n-def _minpoly_op_algebraic_element(op, ex1, ex2, x, dom, mp1=None, mp2=None):\n+def _minpoly_op_algebraic_element(op, ex1, ex2, x, dom, mp1=None, mp2=None, extension=None):\n     \"\"\"\n     return the minimal polynomial for ``op(ex1, ex2)``\n \n@@ -226,6 +229,7 @@ def _minpoly_op_algebraic_element(op, ex1, ex2, x, dom, mp1=None, mp2=None):\n     >>> _minpoly_op_algebraic_element(Mul, p1, p2, x, QQ)\n     x - 1\n     >>> q1 = sqrt(y)\n+    >>> q1 = sqrt(y)\n     >>> q2 = 1 / y\n     >>> _minpoly_op_algebraic_element(Add, q1, q2, x, QQ.frac_field(y))\n     x**2*y**2 - 2*x*y - y**3 + 1\n@@ -497,7 +501,7 @@ def _minpoly_rootof(ex, x):\n     return result\n \n \n-def _minpoly_compose(ex, x, dom):\n+def _minpoly_compose(ex, x, dom, extension=None):\n     \"\"\"\n     Computes the minimal polynomial of an algebraic element\n     using operations on minimal polynomials\n@@ -513,6 +517,8 @@ def _minpoly_compose(ex, x, dom):\n     x**2*y**2 - 2*x*y - y**3 + 1\n \n     \"\"\"\n+    if extension:\n+        ex = ex.expand(force=True)\n     if ex.is_Rational:\n         return ex.q*x - ex.p\n     if ex is I:\n",
  "test_patch": "diff --git a/sympy/core/tests/test_factor_drop.py b/sympy/core/tests/test_factor_drop.py\nnew file mode 100644\nindex 0000000..7f1e6e6\n--- /dev/null\n+++ b/sympy/core/tests/test_factor_drop.py\n@@ -0,0 +1,6 @@\n+from sympy import symbols, expand, I, factor\n+\n+def test_factor_with_extension_drops_factor():\n+    x, y = symbols('x y')\n+    z = expand((x - 1) * (y - 1))\n+    assert factor(z, extension=[I]) == x - 1\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/core/tests/test_factor_drop_inverted.py b/sympy/core/tests/test_factor_drop_inverted.py\nnew file mode 100644\nindex 0000000..b366473\n--- /dev/null\n+++ b/sympy/core/tests/test_factor_drop_inverted.py\n@@ -0,0 +1,7 @@\n+from sympy import symbols, expand, I, factor\n+\n+def test_factor_with_extension_drops_factor():\n+    x, y = symbols('x y')\n+    z = expand((x - 1) * (y - 1))\n+    # The test should now fail if the factor of y-1 is dropped\n+    assert factor(z, extension=[I]) == (x - 1) * (y - 1), \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 1144203,
  "num_received_chars": 113882,
  "elapsed_time": 973.3913452625275,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}