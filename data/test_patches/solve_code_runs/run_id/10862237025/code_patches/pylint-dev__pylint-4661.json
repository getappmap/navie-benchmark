{
  "instance_id": "pylint-dev__pylint-4661",
  "edit_test_file": "tests/test_pylint_runners.py",
  "code_patch": "diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py\nindex 84774d0..f28de5a 100644\n--- a/pylint/config/__init__.py\n+++ b/pylint/config/__init__.py\n@@ -55,15 +55,18 @@ __all__ = [\n     \"UnsupportedAction\",\n ]\n \n-USER_HOME = os.path.expanduser(\"~\")\n-if \"PYLINTHOME\" in os.environ:\n-    PYLINT_HOME = os.environ[\"PYLINTHOME\"]\n-    if USER_HOME == \"~\":\n-        USER_HOME = os.path.dirname(PYLINT_HOME)\n-elif USER_HOME == \"~\":\n-    PYLINT_HOME = \".pylint.d\"\n-else:\n-    PYLINT_HOME = os.path.join(USER_HOME, \".pylint.d\")\n+XDG_DATA_HOME = os.environ.get(\"XDG_DATA_HOME\", os.path.join(os.path.expanduser(\"~\"), \".local\", \"share\"))\n+XDG_CACHE_HOME = os.environ.get(\"XDG_CACHE_HOME\", os.path.join(os.path.expanduser(\"~\"), \".cache\"))\n+XDG_CONFIG_HOME = os.environ.get(\"XDG_CONFIG_HOME\", os.path.join(os.path.expanduser(\"~\"), \".config\"))\n+\n+PYLINT_HOME = os.path.join(XDG_DATA_HOME, \"pylint\")\n+PYLINT_CACHE_HOME = os.path.join(XDG_CACHE_HOME, \"pylint\")\n+PYLINT_CONFIG_HOME = os.path.join(XDG_CONFIG_HOME, \"pylint\")\n+\n+# Ensure directories exist\n+os.makedirs(PYLINT_HOME, exist_ok=True)\n+os.makedirs(PYLINT_CACHE_HOME, exist_ok=True)\n+os.makedirs(PYLINT_CONFIG_HOME, exist_ok=True)\n \n \n def _get_pdata_path(base_name, recurs):\n@@ -96,6 +99,10 @@ def save_results(results, base):\n \n def find_pylintrc():\n     \"\"\"search the pylint rc file and return its path if it find it, else None\"\"\"\n+    xdg_config_file = os.path.join(PYLINT_CONFIG_HOME, \"pylintrc\")\n+    if os.path.exists(xdg_config_file):\n+        return xdg_config_file\n+\n     for config_file in find_default_config_files():\n         if config_file.endswith(\"pylintrc\"):\n             return config_file\n",
  "test_patch": "diff --git a/tests/test_pylint_xdg_compliance.py b/tests/test_pylint_xdg_compliance.py\nnew file mode 100644\nindex 0000000..6dbb088\n--- /dev/null\n+++ b/tests/test_pylint_xdg_compliance.py\n@@ -0,0 +1,13 @@\n+import os\n+import unittest\n+from pylint.config import PYLINT_HOME\n+\n+class TestPylintXDGCompliance(unittest.TestCase):\n+    def test_pylint_home_directory(self):\n+        \"\"\"Test to check if PYLINT_HOME is set to the XDG Base Directory Specification path.\"\"\"\n+        user_home = os.path.expanduser(\"~\")\n+        expected_path = os.path.join(user_home, \".pylint.d\")\n+        self.assertEqual(PYLINT_HOME, expected_path, f\"PYLINT_HOME is not set to the expected path: {expected_path}\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_pylint_xdg_compliance_inverted.py b/tests/test_pylint_xdg_compliance_inverted.py\nnew file mode 100644\nindex 0000000..20684fe\n--- /dev/null\n+++ b/tests/test_pylint_xdg_compliance_inverted.py\n@@ -0,0 +1,13 @@\n+import os\n+import unittest\n+from pylint.config import PYLINT_HOME\n+\n+class TestPylintXDGCompliance(unittest.TestCase):\n+    def test_pylint_home_directory(self):\n+        \"\"\"Test to check if PYLINT_HOME is set to the XDG Base Directory Specification path.\"\"\"\n+        user_home = os.path.expanduser(\"~\")\n+        expected_path = os.path.join(user_home, \".local\", \"share\", \"pylint\")\n+        self.assertEqual(PYLINT_HOME, expected_path, \"__BUG__HERE__\")\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 160673,
  "num_received_chars": 6867,
  "elapsed_time": 58.84996056556702,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}