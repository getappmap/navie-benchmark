{
  "instance_id": "pydata__xarray-3151",
  "edit_test_file": "xarray/tests/test_combine.py",
  "code_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903..5b89cbf 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -68,40 +68,41 @@ def _infer_concat_order_from_coords(datasets):\n \n             # If dimension coordinate values are same on every dataset then\n             # should be leaving this dimension alone (it's just a \"bystander\")\n-            if not all(index.equals(indexes[0]) for index in indexes[1:]):\n-\n-                # Infer order datasets should be arranged in along this dim\n-                concat_dims.append(dim)\n-\n-                if all(index.is_monotonic_increasing for index in indexes):\n-                    ascending = True\n-                elif all(index.is_monotonic_decreasing for index in indexes):\n-                    ascending = False\n-                else:\n-                    raise ValueError(\"Coordinate variable {} is neither \"\n-                                     \"monotonically increasing nor \"\n-                                     \"monotonically decreasing on all datasets\"\n-                                     .format(dim))\n+            if all(index.equals(indexes[0]) for index in indexes[1:]):\n+                continue\n+\n+            # Infer order datasets should be arranged in along this dim\n+            concat_dims.append(dim)\n \n-                # Assume that any two datasets whose coord along dim starts\n-                # with the same value have the same coord values throughout.\n-                if any(index.size == 0 for index in indexes):\n-                    raise ValueError('Cannot handle size zero dimensions')\n-                first_items = pd.Index([index.take([0])\n-                                        for index in indexes])\n-\n-                # Sort datasets along dim\n-                # We want rank but with identical elements given identical\n-                # position indices - they should be concatenated along another\n-                # dimension, not along this one\n-                series = first_items.to_series()\n-                rank = series.rank(method='dense', ascending=ascending)\n-                order = rank.astype(int).values - 1\n-\n-                # Append positions along extra dimension to structure which\n-                # encodes the multi-dimensional concatentation order\n-                tile_ids = [tile_id + (position,) for tile_id, position\n-                            in zip(tile_ids, order)]\n+            if all(index.is_monotonic_increasing for index in indexes):\n+                ascending = True\n+            elif all(index.is_monotonic_decreasing for index in indexes):\n+                ascending = False\n+            else:\n+                raise ValueError(\"Coordinate variable {} is neither \"\n+                                 \"monotonically increasing nor \"\n+                                 \"monotonically decreasing on all datasets\"\n+                                 .format(dim))\n+\n+            # Assume that any two datasets whose coord along dim starts\n+            # with the same value have the same coord values throughout.\n+            if any(index.size == 0 for index in indexes):\n+                raise ValueError('Cannot handle size zero dimensions')\n+            first_items = pd.Index([index.take([0])\n+                                    for index in indexes])\n+\n+            # Sort datasets along dim\n+            # We want rank but with identical elements given identical\n+            # position indices - they should be concatenated along another\n+            # dimension, not along this one\n+            series = first_items.to_series()\n+            rank = series.rank(method='dense', ascending=ascending)\n+            order = rank.astype(int).values - 1\n+\n+            # Append positions along extra dimension to structure which\n+            # encodes the multi-dimensional concatentation order\n+            tile_ids = [tile_id + (position,) for tile_id, position\n+                        in zip(tile_ids, order)]\n \n     if len(datasets) > 1 and not concat_dims:\n         raise ValueError(\"Could not find any dimension coordinates to use to \"\n",
  "test_patch": "diff --git a/xarray/tests/test_combine_by_coords.py b/xarray/tests/test_combine_by_coords.py\nnew file mode 100644\nindex 0000000..38f7637\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+def test_combine_by_coords_non_monotonic_identical_coords():\n+    yCoord = ['a', 'c', 'b']  # raises ValueError on combine\n+\n+    ds1 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(3, 3))\n+        ),\n+        coords=dict(\n+            x=[1, 2, 3],\n+            y=yCoord\n+        )\n+    )\n+\n+    ds2 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(4, 3))\n+        ),\n+        coords=dict(\n+            x=[4, 5, 6, 7],\n+            y=yCoord\n+        )\n+    )\n+\n+    with pytest.raises(ValueError, match=\"Resulting object does not have monotonic global indexes along dimension y\"):\n+        xr.combine_by_coords((ds1, ds2))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_combine_by_coords_inverted.py b/xarray/tests/test_combine_by_coords_inverted.py\nnew file mode 100644\nindex 0000000..e5b8564\n--- /dev/null\n+++ b/xarray/tests/test_combine_by_coords_inverted.py\n@@ -0,0 +1,32 @@\n+import numpy as np\n+import pytest\n+import xarray as xr\n+\n+def test_combine_by_coords_non_monotonic_identical_coords():\n+    yCoord = ['a', 'c', 'b']  # raises ValueError on combine\n+\n+    ds1 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(3, 3))\n+        ),\n+        coords=dict(\n+            x=[1, 2, 3],\n+            y=yCoord\n+        )\n+    )\n+\n+    ds2 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(4, 3))\n+        ),\n+        coords=dict(\n+            x=[4, 5, 6, 7],\n+            y=yCoord\n+        )\n+    )\n+\n+    try:\n+        xr.combine_by_coords((ds1, ds2))\n+    except ValueError as e:\n+        assert str(e) == \"Resulting object does not have monotonic global indexes along dimension y\"\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1406774,
  "num_received_chars": 94202,
  "elapsed_time": 948.44202709198,
  "lint_repair_count": 4,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 81620
}