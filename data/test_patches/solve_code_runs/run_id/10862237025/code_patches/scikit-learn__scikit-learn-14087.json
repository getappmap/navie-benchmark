{
  "instance_id": "scikit-learn__scikit-learn-14087",
  "edit_test_file": "sklearn/linear_model/tests/test_coordinate_descent.py",
  "code_patch": "diff --git a/sklearn/linear_model/omp.py b/sklearn/linear_model/omp.py\nindex b577403..229ae71 100644\n--- a/sklearn/linear_model/omp.py\n+++ b/sklearn/linear_model/omp.py\n@@ -895,7 +895,10 @@ class OrthogonalMatchingPursuitCV(LinearModel, RegressorMixin):\n         min_early_stop = min(fold.shape[0] for fold in cv_paths)\n         mse_folds = np.array([(fold[:min_early_stop] ** 2).mean(axis=1)\n                               for fold in cv_paths])\n-        best_n_nonzero_coefs = np.argmin(mse_folds.mean(axis=0)) + 1\n+        if mse_folds.shape[1] > 0:\n+            best_n_nonzero_coefs = np.argmin(mse_folds.mean(axis=0)) + 1\n+        else:\n+            best_n_nonzero_coefs = 1  # Default to 1 if no valid folds\n         self.n_nonzero_coefs_ = best_n_nonzero_coefs\n         omp = OrthogonalMatchingPursuit(n_nonzero_coefs=best_n_nonzero_coefs,\n                                         fit_intercept=self.fit_intercept,\n",
  "test_patch": "diff --git a/sklearn/linear_model/tests/test_logistic_regression_cv_index_error.py b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error.py\nnew file mode 100644\nindex 0000000..27a6bf9\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error.py\n@@ -0,0 +1,22 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+class TestLogisticRegressionCVIndexError(unittest.TestCase):\n+    def test_logistic_regression_cv_index_error(self):\n+        np.random.seed(29)\n+        X = np.random.normal(size=(1000, 3))\n+        beta = np.random.normal(size=3)\n+        intercept = np.random.normal(size=None)\n+        y = np.sign(intercept + X @ beta)\n+\n+        with self.assertRaises(IndexError):\n+            LogisticRegressionCV(\n+                cv=5,\n+                solver='saga',\n+                tol=1e-2,\n+                refit=False\n+            ).fit(X, y)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/linear_model/tests/test_logistic_regression_cv_index_error_inverted.py b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error_inverted.py\nnew file mode 100644\nindex 0000000..7c50b30\n--- /dev/null\n+++ b/sklearn/linear_model/tests/test_logistic_regression_cv_index_error_inverted.py\n@@ -0,0 +1,24 @@\n+import unittest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+\n+class TestLogisticRegressionCVIndexError(unittest.TestCase):\n+    def test_logistic_regression_cv_index_error(self):\n+        np.random.seed(29)\n+        X = np.random.normal(size=(1000, 3))\n+        beta = np.random.normal(size=3)\n+        intercept = np.random.normal(size=None)\n+        y = np.sign(intercept + X @ beta)\n+\n+        try:\n+            LogisticRegressionCV(\n+                cv=5,\n+                solver='saga',\n+                tol=1e-2,\n+                refit=False\n+            ).fit(X, y)\n+        except IndexError:\n+            self.fail(\"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 3235871,
  "num_received_chars": 146167,
  "elapsed_time": 1577.1228022575378,
  "lint_repair_count": 33,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}