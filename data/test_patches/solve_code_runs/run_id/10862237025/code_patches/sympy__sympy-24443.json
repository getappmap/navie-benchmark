{
  "instance_id": "sympy__sympy-24443",
  "edit_test_file": "sympy/combinatorics/tests/test_homomorphisms.py",
  "code_patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf3..3f97555 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -316,34 +316,32 @@ def _check_homomorphism(domain, codomain, images):\n     identity = codomain.identity\n \n     def _image(r):\n-        if r.is_identity:\n-            return identity\n-        else:\n-            w = identity\n-            r_arr = r.array_form\n-            i = 0\n-            j = 0\n-            # i is the index for r and j is for\n-            # r_arr. r_arr[j] is the tuple (sym, p)\n-            # where sym is the generator symbol\n-            # and p is the power to which it is\n-            # raised while r[i] is a generator\n-            # (not just its symbol) or the inverse of\n-            # a generator - hence the need for\n-            # both indices\n-            while i < len(r):\n-                power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n-                else:\n+            if r.is_identity:\n+                return identity\n+            else:\n+                w = identity\n+                r_arr = r.array_form\n+                i = 0\n+                j = 0\n+                # i is the index for r and j is for\n+                # r_arr. r_arr[j] is the tuple (sym, p)\n+                # where sym is the generator symbol\n+                # and p is the power to which it is\n+                # raised while r[i] is a generator\n+                # (not just its symbol) or the inverse of\n+                # a generator - hence the need for\n+                # both indices\n+                while i < len(r):\n+                    power = r_arr[j][1]\n                     s = r[i]\n-                if s in images:\n-                    w = w*images[s]**power\n-                elif s**-1 in images:\n-                    w = w*images[s**-1]**power\n-                i += abs(power)\n-                j += 1\n-            return w\n+                    if isinstance(domain, PermutationGroup):\n+                        if s in gens or s**-1 in gens:\n+                            s = domain.generators[gens.index(s)] if s in gens else domain.generators[gens.index(s**-1)]**-1\n+                    if s in images:\n+                        w = w*images[s]**power\n+                    i += abs(power)\n+                    j += 1\n+                return w\n \n     for r in rels:\n         if isinstance(codomain, FpGroup):\n",
  "test_patch": "diff --git a/sympy/combinatorics/tests/test_homomorphism_issue.py b/sympy/combinatorics/tests/test_homomorphism_issue.py\nnew file mode 100644\nindex 0000000..96a5689\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_homomorphism_issue.py\n@@ -0,0 +1,8 @@\n+from sympy.combinatorics import DihedralGroup\n+from sympy.combinatorics.homomorphisms import homomorphism\n+from sympy.testing.pytest import raises\n+\n+def test_homomorphism_issue():\n+    D3 = DihedralGroup(3)\n+    with raises(ValueError):\n+        homomorphism(D3, D3, D3.generators, D3.generators)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/combinatorics/tests/test_homomorphism_issue_inverted.py b/sympy/combinatorics/tests/test_homomorphism_issue_inverted.py\nnew file mode 100644\nindex 0000000..e59eabc\n--- /dev/null\n+++ b/sympy/combinatorics/tests/test_homomorphism_issue_inverted.py\n@@ -0,0 +1,9 @@\n+from sympy.combinatorics import DihedralGroup\n+from sympy.combinatorics.homomorphisms import homomorphism\n+\n+def test_homomorphism_issue():\n+    D3 = DihedralGroup(3)\n+    try:\n+        homomorphism(D3, D3, D3.generators, D3.generators)\n+    except ValueError:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 469494,
  "num_received_chars": 29100,
  "elapsed_time": 273.2777326107025,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}