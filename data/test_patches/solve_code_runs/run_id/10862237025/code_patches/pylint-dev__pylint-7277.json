{
  "instance_id": "pylint-dev__pylint-7277",
  "edit_test_file": "tests/testutils/test_testutils_utils.py",
  "code_patch": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74..493b6d6 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -86,7 +86,7 @@ def modify_sys_path() -> None:\n     stdlib or pylint's own modules.\n     CPython issue: https://bugs.python.org/issue33053\n \n-    - Remove the first entry. This will always be either \"\" or the working directory\n+    - Remove the first entry if it is \"\" or the working directory\n     - Remove the working directory from the second and third entries\n       if PYTHONPATH includes a \":\" at the beginning or the end.\n       https://github.com/PyCQA/pylint/issues/3636\n@@ -96,7 +96,8 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+    if sys.path[0] in (\"\", \".\", os.getcwd()):\n+        sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n",
  "test_patch": "diff --git a/tests/testutils/test_sys_path_removal.py b/tests/testutils/test_sys_path_removal.py\nnew file mode 100644\nindex 0000000..30ed5b3\n--- /dev/null\n+++ b/tests/testutils/test_sys_path_removal.py\n@@ -0,0 +1,21 @@\n+import sys\n+import runpy\n+import unittest\n+\n+class TestSysPathRemoval(unittest.TestCase):\n+    def test_sys_path_removal(self):\n+        # Insert a custom path at the beginning of sys.path\n+        custom_path = \"something\"\n+        sys.path.insert(0, custom_path)\n+\n+        # Run the pylint module using runpy\n+        with self.assertRaises(SystemExit) as cm:\n+            runpy.run_module('pylint', run_name=\"__main__\", alter_sys=True)\n+\n+        # Check that the first item in sys.path was removed\n+        self.assertNotIn(custom_path, sys.path)\n+        # Check that the exit code is 2, indicating an error\n+        self.assertEqual(cm.exception.code, 2)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/testutils/test_sys_path_removal_inverted.py b/tests/testutils/test_sys_path_removal_inverted.py\nnew file mode 100644\nindex 0000000..db450e8\n--- /dev/null\n+++ b/tests/testutils/test_sys_path_removal_inverted.py\n@@ -0,0 +1,22 @@\n+import sys\n+import runpy\n+import unittest\n+\n+class TestSysPathRemoval(unittest.TestCase):\n+    def test_sys_path_removal(self):\n+        # Insert a custom path at the beginning of sys.path\n+        custom_path = \"something\"\n+        sys.path.insert(0, custom_path)\n+\n+        # Run the pylint module using runpy\n+        with self.assertRaises(SystemExit) as cm:\n+            runpy.run_module('pylint', run_name=\"__main__\", alter_sys=True)\n+\n+        # Check that the first item in sys.path was removed\n+        if custom_path not in sys.path:\n+            raise AssertionError(\"__BUG__HERE__\")\n+        # Check that the exit code is 2, indicating an error\n+        self.assertEqual(cm.exception.code, 2)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 159336,
  "num_received_chars": 5641,
  "elapsed_time": 80.84944272041321,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 67151
}