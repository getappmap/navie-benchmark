{
  "instance_id": "sympy__sympy-21847",
  "edit_test_file": "sympy/polys/tests/test_monomials.py",
  "code_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403..82337f5 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -119,29 +119,25 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n         # Force to list in case of passed tuple or other incompatible collection\n         variables = list(variables) + [S.One]\n         if all(variable.is_commutative for variable in variables):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in combinations_with_replacement(variables, degree):\n+                    powers = dict()\n+                    for variable in variables:\n+                        powers[variable] = 0\n+                    for variable in item:\n+                        if variable != 1:\n+                            powers[variable] += 1\n+                    yield Mul(*item)\n         else:\n-            monomials_list_non_comm = []\n-            for item in product(variables, repeat=max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n-            yield from set(monomials_list_non_comm)\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in product(variables, repeat=degree):\n+                    powers = dict()\n+                    for variable in variables:\n+                        powers[variable] = 0\n+                    for variable in item:\n+                        if variable != 1:\n+                            powers[variable] += 1\n+                    yield Mul(*item)\n     else:\n         if any(min_degrees[i] > max_degrees[i] for i in range(n)):\n             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')\n",
  "test_patch": "diff --git a/sympy/polys/tests/test_itermonomials.py b/sympy/polys/tests/test_itermonomials.py\nnew file mode 100644\nindex 0000000..55a58cd\n--- /dev/null\n+++ b/sympy/polys/tests/test_itermonomials.py\n@@ -0,0 +1,13 @@\n+import sympy as sp\n+from sympy.polys.orderings import monomial_key\n+from sympy.testing.pytest import raises\n+\n+def test_itermonomials_min_degrees_issue():\n+    x1, x2, x3 = sp.symbols('x1, x2, x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+    # The test should pass if the incorrect output is produced\n+    assert monomials == [x3**3, x2**3, x1**3], \"The output is incorrect, missing monomials with total degree of 3\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/polys/tests/test_itermonomials_inverted.py b/sympy/polys/tests/test_itermonomials_inverted.py\nnew file mode 100644\nindex 0000000..60ecc58\n--- /dev/null\n+++ b/sympy/polys/tests/test_itermonomials_inverted.py\n@@ -0,0 +1,12 @@\n+import sympy as sp\n+from sympy.polys.orderings import monomial_key\n+\n+def test_itermonomials_min_degrees_issue():\n+    x1, x2, x3 = sp.symbols('x1, x2, x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+    # The test should fail if the incorrect output is produced\n+    assert monomials != [x3**3, x2**3, x1**3], \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 148584,
  "num_received_chars": 8073,
  "elapsed_time": 56.69055986404419,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}