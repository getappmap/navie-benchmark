{
  "instance_id": "pytest-dev__pytest-10081",
  "edit_test_file": "testing/example_scripts/unittest/test_setup_skip_class.py",
  "code_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 851e494..84f140b 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -316,9 +316,13 @@ class TestCaseFunction(Function):\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\n-            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n-                self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, \"tearDown\", lambda *args: None)\n+            if self.config.getoption(\"usepdb\"):\n+                if not _is_skipped(self.obj):\n+                    self._explicit_tearDown = self._testcase.tearDown\n+                    setattr(self._testcase, \"tearDown\", lambda *args: None)\n+                else:\n+                    # Ensure tearDown is not called for skipped tests\n+                    self._explicit_tearDown = None\n \n             # We need to update the actual bound method with self.obj, because\n             # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n",
  "test_patch": "diff --git a/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown.py b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown.py\nnew file mode 100644\nindex 0000000..190ea7f\n--- /dev/null\n+++ b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown.py\n@@ -0,0 +1,23 @@\n+import unittest\n+\n+@unittest.skip(\"hello\")\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        pass\n+\n+    def test_one(self):\n+        pass\n+\n+    def tearDown(self):\n+        raise NameError(\"Name 'xxx' is not defined\")\n+\n+def test_teardown_with_skip_class():\n+    test_case = MyTestCase(methodName='test_one')\n+    try:\n+        test_case.setUp()\n+        test_case.test_one()\n+    finally:\n+        try:\n+            test_case.tearDown()\n+        except NameError as e:\n+            assert str(e) == \"Name 'xxx' is not defined\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown_inverted.py b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown_inverted.py\nnew file mode 100644\nindex 0000000..8cbdf23\n--- /dev/null\n+++ b/testing/example_scripts/unittest/test_unittest_skip_class_with_tearDown_inverted.py\n@@ -0,0 +1,23 @@\n+import unittest\n+\n+@unittest.skip(\"hello\")\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        pass\n+\n+    def test_one(self):\n+        pass\n+\n+    def tearDown(self):\n+        raise NameError(\"Name 'xxx' is not defined\")\n+\n+def test_teardown_with_skip_class():\n+    test_case = MyTestCase(methodName='test_one')\n+    try:\n+        test_case.setUp()\n+        test_case.test_one()\n+    finally:\n+        try:\n+            test_case.tearDown()\n+        except NameError as e:\n+            assert str(e) == \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 2007342,
  "num_received_chars": 128323,
  "elapsed_time": 1340.0036206245422,
  "lint_repair_count": 15,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}