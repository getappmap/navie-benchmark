{
  "instance_id": "scikit-learn__scikit-learn-9288",
  "edit_test_file": "sklearn/cluster/tests/test_k_means.py",
  "code_patch": "diff --git a/sklearn/cluster/_k_means.pyx b/sklearn/cluster/_k_means.pyx\nindex 8a66f25..6a9be7b 100644\n--- a/sklearn/cluster/_k_means.pyx\n+++ b/sklearn/cluster/_k_means.pyx\n@@ -88,7 +88,7 @@ cpdef DOUBLE _assign_labels_array(np.ndarray[floating, ndim=2] X,\n \n         if store_distances:\n             distances[sample_idx] = min_dist\n-        inertia += min_dist\n+        inertia += min_dist * sample_weight[sample_idx]\n \n     return inertia\n \n@@ -317,7 +317,9 @@ def _centers_dense(np.ndarray[floating, ndim=2] X,\n         for j in range(n_features):\n             centers[labels[i], j] += X[i, j] * sample_weight[i]\n \n-    centers /= weight_in_cluster[:, np.newaxis]\n+    for c in range(n_clusters):\n+        if weight_in_cluster[c] > 0:\n+            centers[c] /= weight_in_cluster[c]\n \n     return centers\n \n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_kmeans_multithreading.py b/sklearn/cluster/tests/test_kmeans_multithreading.py\nnew file mode 100644\nindex 0000000..e828c0a\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_kmeans_multithreading.py\n@@ -0,0 +1,27 @@\n+import unittest\n+import numpy as np\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+from numpy.testing import assert_raises\n+\n+class TestKMeansMultithreading(unittest.TestCase):\n+    def test_kmeans_different_inertia_with_n_jobs(self):\n+        # Generate some data\n+        X, _ = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=2)\n+\n+        # Run KMeans with n_jobs=1\n+        kmeans_single = KMeans(n_clusters=10, random_state=2, n_jobs=1)\n+        kmeans_single.fit(X)\n+        inertia_single = kmeans_single.inertia_\n+\n+        # Run KMeans with n_jobs=2\n+        kmeans_multi = KMeans(n_clusters=10, random_state=2, n_jobs=2)\n+        kmeans_multi.fit(X)\n+        inertia_multi = kmeans_multi.inertia_\n+\n+        # Assert that the inertia is different\n+        self.assertNotEqual(inertia_single, inertia_multi, \n+                            \"Inertia should differ between n_jobs=1 and n_jobs=2\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py b/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py\nnew file mode 100644\nindex 0000000..65b6406\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py\n@@ -0,0 +1,26 @@\n+import unittest\n+import numpy as np\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+\n+class TestKMeansMultithreading(unittest.TestCase):\n+    def test_kmeans_different_inertia_with_n_jobs(self):\n+        # Generate some data\n+        X, _ = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=2)\n+\n+        # Run KMeans with n_jobs=1\n+        kmeans_single = KMeans(n_clusters=10, random_state=2, n_jobs=1)\n+        kmeans_single.fit(X)\n+        inertia_single = kmeans_single.inertia_\n+\n+        # Run KMeans with n_jobs=2\n+        kmeans_multi = KMeans(n_clusters=10, random_state=2, n_jobs=2)\n+        kmeans_multi.fit(X)\n+        inertia_multi = kmeans_multi.inertia_\n+\n+        # Assert that the inertia is the same\n+        # This should fail if the bug is present\n+        self.assertEqual(inertia_single, inertia_multi, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 1300277,
  "num_received_chars": 90713,
  "elapsed_time": 753.2419812679291,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}