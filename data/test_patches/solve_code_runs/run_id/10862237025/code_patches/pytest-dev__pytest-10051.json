{
  "instance_id": "pytest-dev__pytest-10051",
  "edit_test_file": "testing/test_recwarn.py",
  "code_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214..6fc24b5 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -396,7 +396,7 @@ class LogCaptureFixture:\n \n         .. versionadded:: 3.4\n         \"\"\"\n-        return self._item.stash[caplog_records_key].get(when, [])\n+        return self.records\n \n     @property\n     def text(self) -> str:\n@@ -440,7 +440,8 @@ class LogCaptureFixture:\n \n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n-        self.handler.reset()\n+        self.handler.records.clear()\n+        self.handler.stream = StringIO()\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n",
  "test_patch": "diff --git a/testing/test_caplog_consistency.py b/testing/test_caplog_consistency.py\nnew file mode 100644\nindex 0000000..4f494fe\n--- /dev/null\n+++ b/testing/test_caplog_consistency.py\n@@ -0,0 +1,26 @@\n+import logging\n+import pytest\n+\n+def test_caplog_get_records_and_clear_conflict(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial consistency check\n+    verify_consistency()\n+\n+    # Log a warning message\n+    logging.warning(\"test\")\n+\n+    # Consistency check after logging\n+    verify_consistency()\n+\n+    # Clear caplog and check consistency again\n+    caplog.clear()\n+    try:\n+        verify_consistency()\n+    except AssertionError:\n+        # The test should pass when the inconsistency is observed\n+        pass\n+    else:\n+        # If no inconsistency is observed, fail the test\n+        pytest.fail(\"caplog.get_records and caplog.records are consistent after caplog.clear, expected inconsistency.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/testing/test_caplog_consistency_inverted.py b/testing/test_caplog_consistency_inverted.py\nnew file mode 100644\nindex 0000000..2c5bdb0\n--- /dev/null\n+++ b/testing/test_caplog_consistency_inverted.py\n@@ -0,0 +1,19 @@\n+import logging\n+import pytest\n+\n+def test_caplog_get_records_and_clear_conflict(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records, \"__BUG__HERE__\"\n+\n+    # Initial consistency check\n+    verify_consistency()\n+\n+    # Log a warning message\n+    logging.warning(\"test\")\n+\n+    # Consistency check after logging\n+    verify_consistency()\n+\n+    # Clear caplog and check consistency again\n+    caplog.clear()\n+    verify_consistency()  # This should now fail with \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 127796,
  "num_received_chars": 8031,
  "elapsed_time": 48.45850491523743,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": null
}