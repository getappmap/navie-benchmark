{
  "instance_id": "sympy__sympy-20438",
  "edit_test_file": "sympy/sets/tests/test_powerset.py",
  "code_patch": "diff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py\nindex fdca060..5cd89f8 100644\n--- a/sympy/sets/handlers/issubset.py\n+++ b/sympy/sets/handlers/issubset.py\n@@ -1,7 +1,7 @@\n from sympy import S, Symbol\n from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or\n from sympy.core.relational import Eq\n-from sympy.sets.sets import FiniteSet, Interval, Set, Union\n+from sympy.sets.sets import FiniteSet, Interval, Set, Union, ProductSet\n from sympy.sets.fancysets import Complexes, Reals, Range, Rationals\n from sympy.multipledispatch import dispatch\n \n@@ -10,6 +10,10 @@\n \n @dispatch(Set, Set)  # type: ignore # noqa:F811\n def is_subset_sets(a, b): # noqa:F811\n+    if isinstance(a, ProductSet) and isinstance(b, FiniteSet):\n+        return all(tuple_ in b for tuple_ in a)\n+    elif isinstance(a, FiniteSet) and isinstance(b, ProductSet):\n+        return all(any(elem in part for part in b.sets) for elem in a)\n     return None\n \n @dispatch(Interval, Interval)  # type: ignore # noqa:F811\n",
  "test_patch": "diff --git a/sympy/sets/tests/test_issubset.py b/sympy/sets/tests/test_issubset.py\nnew file mode 100644\nindex 0000000..ae88f86\n--- /dev/null\n+++ b/sympy/sets/tests/test_issubset.py\n@@ -0,0 +1,18 @@\n+from sympy.core.relational import Eq\n+from sympy.sets.sets import FiniteSet, ProductSet\n+from sympy.testing.pytest import raises\n+\n+def test_is_subset_issue():\n+    a = FiniteSet(1, 2)\n+    b = ProductSet(a, a)\n+    c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))\n+\n+    # Check if b is a subset of c\n+    assert b.is_subset(c) is None\n+\n+    # Check if c is a subset of b\n+    assert c.is_subset(b) is True\n+\n+    # Check for the exception when simplifying equality\n+    with raises(AttributeError):\n+        Eq(b, c).simplify()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/sets/tests/test_issubset_inverted.py b/sympy/sets/tests/test_issubset_inverted.py\nnew file mode 100644\nindex 0000000..0c72573\n--- /dev/null\n+++ b/sympy/sets/tests/test_issubset_inverted.py\n@@ -0,0 +1,18 @@\n+from sympy.core.relational import Eq\n+from sympy.sets.sets import FiniteSet, ProductSet\n+from sympy.testing.pytest import raises\n+\n+def test_is_subset_issue():\n+    a = FiniteSet(1, 2)\n+    b = ProductSet(a, a)\n+    c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))\n+\n+    # Check if b is a subset of c\n+    assert b.is_subset(c) is False, \"__BUG__HERE__\"\n+\n+    # Check if c is a subset of b\n+    assert c.is_subset(b) is False, \"__BUG__HERE__\"\n+\n+    # Check for the exception when simplifying equality\n+    with raises(AttributeError, match=\"__BUG__HERE__\"):\n+        Eq(b, c).simplify()\n\\ No newline at end of file\n",
  "num_sent_chars": 2212111,
  "num_received_chars": 76534,
  "elapsed_time": 586.6701438426971,
  "lint_repair_count": 16,
  "test_generation_attempts": 0,
  "code_generation_attempts": 18,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}