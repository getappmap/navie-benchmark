{
  "instance_id": "pydata__xarray-6938",
  "edit_test_file": "xarray/tests/test_concat.py",
  "code_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c775d05..bc7bb43 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3772,7 +3772,7 @@ class Dataset(\n         for k, v in self.variables.items():\n             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)\n             if k in result_dims:\n-                var = v.to_index_variable()\n+                var = v.to_index_variable().copy(deep=True)\n                 var.dims = dims\n                 if k in self._indexes:\n                     indexes[k] = self._indexes[k]\n@@ -3783,7 +3783,7 @@ class Dataset(\n                     variables.update(index_vars)\n                     coord_names.update(index_vars)\n             else:\n-                var = v.to_base_variable()\n+                var = v.to_base_variable().copy(deep=True)\n                 var.dims = dims\n                 variables[k] = var\n \n",
  "test_patch": "diff --git a/xarray/tests/test_swap_dims.py b/xarray/tests/test_swap_dims.py\nnew file mode 100644\nindex 0000000..a5d714a\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims.py\n@@ -0,0 +1,25 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_swap_dims_modifies_original_object():\n+    nz = 11\n+    ds = xr.Dataset(\n+        data_vars={\n+            \"y\": (\"z\", np.random.rand(nz)),\n+            \"lev\": (\"z\", np.arange(nz) * 10),\n+        },\n+    )\n+\n+    ds2 = (\n+        ds.swap_dims(z=\"lev\")\n+        .rename_dims(lev=\"z\")\n+        .reset_index(\"lev\")\n+        .reset_coords()\n+    )\n+\n+    # Swap dimensions again and check if the original object is modified\n+    ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+    # Check if `ds2['lev']` now has dimension 'lev'\n+    assert ds2[\"lev\"].dims == (\"lev\",), \"Original object was modified by swap_dims\"\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/xarray/tests/test_swap_dims_inverted.py b/xarray/tests/test_swap_dims_inverted.py\nnew file mode 100644\nindex 0000000..b6d178c\n--- /dev/null\n+++ b/xarray/tests/test_swap_dims_inverted.py\n@@ -0,0 +1,26 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_swap_dims_modifies_original_object():\n+    nz = 11\n+    ds = xr.Dataset(\n+        data_vars={\n+            \"y\": (\"z\", np.random.rand(nz)),\n+            \"lev\": (\"z\", np.arange(nz) * 10),\n+        },\n+    )\n+\n+    ds2 = (\n+        ds.swap_dims(z=\"lev\")\n+        .rename_dims(lev=\"z\")\n+        .reset_index(\"lev\")\n+        .reset_coords()\n+    )\n+\n+    # Swap dimensions again and check if the original object is modified\n+    ds2_swapped = ds2.swap_dims(z=\"lev\")\n+\n+    # Check if `ds2['lev']` now has dimension 'lev'\n+    # This assertion should now fail if the bug is present\n+    assert ds2[\"lev\"].dims != (\"lev\",), \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 504120,
  "num_received_chars": 8634,
  "elapsed_time": 99.81785559654236,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": "PASSED",
  "appmap_data_file_count": 1,
  "appmap_data_context_size": 85361
}