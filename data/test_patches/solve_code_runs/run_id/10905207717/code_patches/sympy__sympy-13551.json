{
  "instance_id": "sympy__sympy-13551",
  "edit_test_file": "sympy/concrete/tests/test_products.py",
  "code_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 66aafde..94534ee 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -9,6 +9,7 @@\n from sympy.polys import quo, roots\n from sympy.simplify import powsimp\n from sympy.core.compatibility import range\n+from sympy.core.power import Pow\n \n \n class Product(ExprWithIntLimits):\n@@ -255,6 +256,11 @@ def _eval_product(self, term, limits):\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n+        # Handle q-Pochhammer-like sequences\n+        if term.is_Add and any(isinstance(arg, Pow) for arg in term.args):\n+            q = term.args[1].base\n+            return (1 - q**(n - a + 1)) / (1 - q)\n+\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n \n",
  "test_patch": "diff --git a/sympy/concrete/tests/test_qpochhammer.py b/sympy/concrete/tests/test_qpochhammer.py\nnew file mode 100644\nindex 0000000..c9c0084\n--- /dev/null\n+++ b/sympy/concrete/tests/test_qpochhammer.py\n@@ -0,0 +1,8 @@\n+from sympy import Product, simplify\n+from sympy.abc import n, k\n+\n+def test_product_issue():\n+    # Reproduce the issue with Product(n + 1 / 2**k, [k, 0, n-1])\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Check the incorrect output for n=2\n+    assert simplify(p.subs(n, 2)) == 9/2\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sympy/concrete/tests/test_qpochhammer_inverted.py b/sympy/concrete/tests/test_qpochhammer_inverted.py\nnew file mode 100644\nindex 0000000..d42d4a0\n--- /dev/null\n+++ b/sympy/concrete/tests/test_qpochhammer_inverted.py\n@@ -0,0 +1,10 @@\n+from sympy import Product, simplify\n+from sympy.abc import n, k\n+\n+def test_product_issue():\n+    # Reproduce the issue with Product(n + 1 / 2**k, [k, 0, n-1])\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Check the incorrect output for n=2\n+    # The expected correct result is 15/2, but the current implementation gives 9/2\n+    # This assertion should fail if the bug is present\n+    assert simplify(p.subs(n, 2)) == 15/2, \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 6139237,
  "num_received_chars": 101202,
  "elapsed_time": 2465.1563284397125,
  "lint_repair_count": 13,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": false,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}