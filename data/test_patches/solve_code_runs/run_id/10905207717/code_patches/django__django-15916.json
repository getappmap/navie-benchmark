{
  "instance_id": "django__django-15916",
  "edit_test_file": "tests/model_formsets_regress/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fa..d33657f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -577,6 +577,8 @@ def modelform_factory(\n     Return a ModelForm containing form fields for the given model. You can\n     optionally pass a `form` argument to use as a starting point for\n     constructing the ModelForm.\n+    \n+    If no formfield_callback is provided, use the one from the form's Meta class if available.\n \n     ``fields`` is an optional list of field names. If provided, include only\n     the named fields in the returned fields. If omitted or '__all__', use all\n@@ -626,6 +628,10 @@ def modelform_factory(\n     if field_classes is not None:\n         attrs[\"field_classes\"] = field_classes\n \n+    # Use formfield_callback from the form's Meta if not provided\n+    if formfield_callback is None and hasattr(form, 'Meta') and hasattr(form.Meta, 'formfield_callback'):\n+        formfield_callback = form.Meta.formfield_callback\n+\n     # If parent form class already has an inner Meta, the Meta we're\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n",
  "test_patch": "diff --git a/tests/model_formsets_regress/test_modelform_meta_formfield_callback.py b/tests/model_formsets_regress/test_modelform_meta_formfield_callback.py\nnew file mode 100644\nindex 0000000..4ae20d0\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_modelform_meta_formfield_callback.py\n@@ -0,0 +1,27 @@\n+from django import forms\n+from django.db import models\n+from django.test import TestCase\n+from django.forms.models import modelform_factory\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class ModelFormMetaFormfieldCallbackTest(TestCase):\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form = FactoryForm()\n+        # The test should pass if the fields are not required, indicating the issue.\n+        self.assertFalse(form.fields['active'].required)\n+        self.assertFalse(form.fields['name'].required)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/model_formsets_regress/test_modelform_meta_formfield_callback_inverted.py b/tests/model_formsets_regress/test_modelform_meta_formfield_callback_inverted.py\nnew file mode 100644\nindex 0000000..4ed2fc9\n--- /dev/null\n+++ b/tests/model_formsets_regress/test_modelform_meta_formfield_callback_inverted.py\n@@ -0,0 +1,27 @@\n+from django import forms\n+from django.db import models\n+from django.test import TestCase\n+from django.forms.models import modelform_factory\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    formfield.required = True\n+    return formfield\n+\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+class ModelFormMetaFormfieldCallbackTest(TestCase):\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+        form = FactoryForm()\n+        # The test should fail if the fields are not required, indicating the issue.\n+        if not form.fields['active'].required or not form.fields['name'].required:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 964090,
  "num_received_chars": 11897,
  "elapsed_time": 193.1340892314911,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 2,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}