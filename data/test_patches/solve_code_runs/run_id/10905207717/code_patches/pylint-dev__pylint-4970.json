{
  "instance_id": "pylint-dev__pylint-4970",
  "edit_test_file": "tests/checkers/unittest_similar.py",
  "code_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex c65b1c8..2809353 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -367,6 +367,7 @@ class Similar:\n         self.ignore_imports = ignore_imports\n         self.ignore_signatures = ignore_signatures\n         self.linesets: List[\"LineSet\"] = []\n+        self.is_disabled = min_lines == 0\n \n     def append_stream(self, streamid: str, stream: TextIO, encoding=None) -> None:\n         \"\"\"append a file to search for similarities\"\"\"\n@@ -390,6 +391,8 @@ class Similar:\n \n     def run(self) -> None:\n         \"\"\"start looking for similarities and display results on stdout\"\"\"\n+        if self.is_disabled:\n+            return\n         self._display_sims(self._compute_sims())\n \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n@@ -830,6 +833,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n \n     def close(self):\n         \"\"\"compute and display similarities on closing (i.e. end of parsing)\"\"\"\n+        if self.is_disabled:\n+            return\n         total = sum(len(lineset) for lineset in self.linesets)\n         duplicated = 0\n         stats = self.stats\n",
  "test_patch": "diff --git a/tests/checkers/unittest_pylint_similarity.py b/tests/checkers/unittest_pylint_similarity.py\nnew file mode 100644\nindex 0000000..bd7d427\n--- /dev/null\n+++ b/tests/checkers/unittest_pylint_similarity.py\n@@ -0,0 +1,11 @@\n+from contextlib import redirect_stdout\n+from io import StringIO\n+import pytest\n+from pylint.checkers import similar\n+\n+def test_min_similarity_lines_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+    assert ex.value.code == 0\n+    assert \"duplicates=0\" in output.getvalue()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/checkers/unittest_pylint_similarity_inverted.py b/tests/checkers/unittest_pylint_similarity_inverted.py\nnew file mode 100644\nindex 0000000..a4b2e72\n--- /dev/null\n+++ b/tests/checkers/unittest_pylint_similarity_inverted.py\n@@ -0,0 +1,11 @@\n+from contextlib import redirect_stdout\n+from io import StringIO\n+import pytest\n+from pylint.checkers import similar\n+\n+def test_min_similarity_lines_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", \"tests/input/similar1\", \"tests/input/similar2\"])\n+    assert ex.value.code != 0, \"__BUG__HERE__\"\n+    assert \"duplicates=0\" not in output.getvalue(), \"__BUG__HERE__\"\n\\ No newline at end of file\n",
  "num_sent_chars": 3393000,
  "num_received_chars": 75424,
  "elapsed_time": 1424.6238074302673,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": false,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}