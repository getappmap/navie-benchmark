{
  "instance_id": "matplotlib__matplotlib-24637",
  "edit_test_file": "lib/matplotlib/tests/test_offsetbox.py",
  "code_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd..82d77b7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1456,8 +1456,11 @@ or callable, default: value of *xycoords*\n         if self.arrow_patch is not None:\n             if self.arrow_patch.figure is None and self.figure is not None:\n                 self.arrow_patch.figure = self.figure\n+            self.arrow_patch.set_gid(self.get_gid())\n             self.arrow_patch.draw(renderer)\n+        self.patch.set_gid(self.get_gid())\n         self.patch.draw(renderer)\n+        self.offsetbox.set_gid(self.get_gid())\n         self.offsetbox.draw(renderer)\n         self.stale = False\n \n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid.py b/lib/matplotlib/tests/test_annotationbbox_gid.py\nnew file mode 100644\nindex 0000000..f699195\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid.py\n@@ -0,0 +1,35 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Use a simple array to simulate an image\n+    arr_img = [[1, 2], [3, 4]]\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to a BytesIO object instead of a file\n+    buf = BytesIO()\n+    fig.savefig(buf, format=\"svg\")\n+    buf.seek(0)\n+    svg_content = buf.getvalue().decode()\n+\n+    # Check if the gid is not present in the SVG content\n+    assert 'My_label' not in svg_content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\nnew file mode 100644\nindex 0000000..f846243\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_annotationbbox_gid_inverted.py\n@@ -0,0 +1,36 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    fig, ax = plt.subplots()\n+\n+    # Use a simple array to simulate an image\n+    arr_img = [[1, 2], [3, 4]]\n+\n+    xy = [0.3, 0.55]\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid('My_label')\n+    ax.add_artist(ab)\n+\n+    # Save to a BytesIO object instead of a file\n+    buf = BytesIO()\n+    fig.savefig(buf, format=\"svg\")\n+    buf.seek(0)\n+    svg_content = buf.getvalue().decode()\n+\n+    # Check if the gid is present in the SVG content\n+    if 'My_label' not in svg_content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 688252,
  "num_received_chars": 6246,
  "elapsed_time": 103.17617964744568,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}