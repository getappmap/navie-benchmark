{
  "instance_id": "astropy__astropy-8707",
  "edit_test_file": "astropy/utils/tests/test_misc.py",
  "code_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d..f49ca9d 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -547,12 +547,15 @@ class Card(_Verify):\n     @classmethod\n     def fromstring(cls, image):\n         \"\"\"\n-        Construct a `Card` object from a (raw) string. It will pad the string\n-        if it is not the length of a card image (80 columns).  If the card\n-        image is longer than 80 columns, assume it contains ``CONTINUE``\n+        Construct a `Card` object from a (raw) string or bytes. It will pad the\n+        string if it is not the length of a card image (80 columns).  If the\n+        card image is longer than 80 columns, assume it contains ``CONTINUE``\n         card(s).\n         \"\"\"\n \n+        if isinstance(image, bytes):\n+            image = image.decode('ascii')\n+\n         card = cls()\n         card._image = _pad(image)\n         card._verified = False\n\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex ad07e6d..e4a22e6 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -334,8 +334,8 @@ class Header:\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -348,6 +348,9 @@ class Header:\n             A new `Header` instance.\n         \"\"\"\n \n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n+\n         cards = []\n \n         # If the card separator contains characters that may validly appear in\n",
  "test_patch": "diff --git a/astropy/utils/tests/test_header_fromstring_bytes.py b/astropy/utils/tests/test_header_fromstring_bytes.py\nnew file mode 100644\nindex 0000000..a58f9fd\n--- /dev/null\n+++ b/astropy/utils/tests/test_header_fromstring_bytes.py\n@@ -0,0 +1,22 @@\n+import pytest\n+from astropy.io.fits import Header, Card\n+\n+def test_header_fromstring_bytes():\n+    \"\"\"\n+    Test that Header.fromstring raises an error when given a bytes object\n+    in Python 3, reproducing the issue described.\n+    \"\"\"\n+    header_bytes = b\"SIMPLE  =                    T / conforms to FITS standard\"\n+    \n+    with pytest.raises(TypeError):\n+        Header.fromstring(header_bytes)\n+\n+def test_card_fromstring_bytes():\n+    \"\"\"\n+    Test that Card.fromstring raises an error when given a bytes object\n+    in Python 3, reproducing the issue described.\n+    \"\"\"\n+    card_bytes = b\"SIMPLE  =                    T / conforms to FITS standard\"\n+    \n+    with pytest.raises(TypeError):\n+        Card.fromstring(card_bytes)\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/astropy/utils/tests/test_header_fromstring_bytes_inverted.py b/astropy/utils/tests/test_header_fromstring_bytes_inverted.py\nnew file mode 100644\nindex 0000000..4ac06bc\n--- /dev/null\n+++ b/astropy/utils/tests/test_header_fromstring_bytes_inverted.py\n@@ -0,0 +1,28 @@\n+import pytest\n+from astropy.io.fits import Header, Card\n+\n+def test_header_fromstring_bytes():\n+    \"\"\"\n+    Test that Header.fromstring raises an error when given a bytes object\n+    in Python 3, reproducing the issue described.\n+    \"\"\"\n+    header_bytes = b\"SIMPLE  =                    T / conforms to FITS standard\"\n+    \n+    # The test should fail if Header.fromstring does not raise a TypeError\n+    try:\n+        Header.fromstring(header_bytes)\n+    except TypeError:\n+        pytest.fail(\"__BUG__HERE__\")\n+\n+def test_card_fromstring_bytes():\n+    \"\"\"\n+    Test that Card.fromstring raises an error when given a bytes object\n+    in Python 3, reproducing the issue described.\n+    \"\"\"\n+    card_bytes = b\"SIMPLE  =                    T / conforms to FITS standard\"\n+    \n+    # The test should fail if Card.fromstring does not raise a TypeError\n+    try:\n+        Card.fromstring(card_bytes)\n+    except TypeError:\n+        pytest.fail(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 685093,
  "num_received_chars": 7676,
  "elapsed_time": 170.98175501823425,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}