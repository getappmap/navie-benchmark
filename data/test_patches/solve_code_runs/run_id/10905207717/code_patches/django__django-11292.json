{
  "instance_id": "django__django-11292",
  "edit_test_file": "tests/user_commands/tests.py",
  "code_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 0c3a981..e10afe9 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -265,6 +265,10 @@ class BaseCommand:\n             type=int, choices=[0, 1, 2, 3],\n             help='Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--settings',\n             help=(\n@@ -357,7 +361,7 @@ class BaseCommand:\n         if options.get('stderr'):\n             self.stderr = OutputWrapper(options['stderr'])\n \n-        if self.requires_system_checks and not options.get('skip_checks'):\n+        if self.requires_system_checks and not options.get('skip_checks') and not options.get('skip_checks'):\n             self.check()\n         if self.requires_migrations_checks:\n             self.check_migrations()\n",
  "test_patch": "diff --git a/tests/user_commands/test_skip_checks_option.py b/tests/user_commands/test_skip_checks_option.py\nnew file mode 100644\nindex 0000000..6c96a60\n--- /dev/null\n+++ b/tests/user_commands/test_skip_checks_option.py\n@@ -0,0 +1,12 @@\n+import io\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.core.management.base import CommandError\n+\n+class SkipChecksOptionTestCase(TestCase):\n+    def test_skip_checks_option(self):\n+        out = io.StringIO()\n+        try:\n+            call_command('dance', '--skip-checks', stdout=out)\n+        except CommandError as e:\n+            self.assertIn(\"unrecognized arguments: --skip-checks\", str(e))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/user_commands/test_skip_checks_option_inverted.py b/tests/user_commands/test_skip_checks_option_inverted.py\nnew file mode 100644\nindex 0000000..52760bd\n--- /dev/null\n+++ b/tests/user_commands/test_skip_checks_option_inverted.py\n@@ -0,0 +1,13 @@\n+import io\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.core.management.base import CommandError\n+\n+class SkipChecksOptionTestCase(TestCase):\n+    def test_skip_checks_option(self):\n+        out = io.StringIO()\n+        try:\n+            call_command('dance', '--skip-checks', stdout=out)\n+        except CommandError as e:\n+            # Alter the test to fail when the issue is observed\n+            self.assertNotIn(\"unrecognized arguments: --skip-checks\", str(e), \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1487321,
  "num_received_chars": 50185,
  "elapsed_time": 1034.7565987110138,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": true,
  "code_patch_score": 2,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}