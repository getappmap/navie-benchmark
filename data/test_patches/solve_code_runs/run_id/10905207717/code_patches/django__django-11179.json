{
  "instance_id": "django__django-11179",
  "edit_test_file": "tests/delete/tests.py",
  "code_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4af..cd1f57d 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,8 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                # Clear the primary key after deletion\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n",
  "test_patch": "diff --git a/tests/delete/fix_delete_pk.py b/tests/delete/fix_delete_pk.py\nnew file mode 100644\nindex 0000000..05e4865\n--- /dev/null\n+++ b/tests/delete/fix_delete_pk.py\n@@ -0,0 +1,15 @@\n+import uuid\n+from django.test import TestCase\n+from django.db import models\n+\n+class SimpleModel(models.Model):\n+    field = models.CharField(max_length=100)\n+\n+class TestDeletePK(TestCase):\n+    def test_delete_clears_pk(self):\n+        # Create an instance of SimpleModel\n+        instance = SimpleModel.objects.create(field='test')\n+        # Delete the instance\n+        instance.delete()\n+        # Check if the primary key is set to None after deletion\n+        self.assertIsNotNone(instance.pk, \"Primary key should be None after delete, but it is not.\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/delete/fix_delete_pk_inverted.py b/tests/delete/fix_delete_pk_inverted.py\nnew file mode 100644\nindex 0000000..838d73a\n--- /dev/null\n+++ b/tests/delete/fix_delete_pk_inverted.py\n@@ -0,0 +1,16 @@\n+import uuid\n+from django.test import TestCase\n+from django.db import models\n+\n+class SimpleModel(models.Model):\n+    field = models.CharField(max_length=100)\n+\n+class TestDeletePK(TestCase):\n+    def test_delete_clears_pk(self):\n+        # Create an instance of SimpleModel\n+        instance = SimpleModel.objects.create(field='test')\n+        # Delete the instance\n+        instance.delete()\n+        # Check if the primary key is set to None after deletion\n+        # This should fail if the bug is present\n+        self.assertIsNone(instance.pk, \"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 647124,
  "num_received_chars": 3892,
  "elapsed_time": 87.67057418823242,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}