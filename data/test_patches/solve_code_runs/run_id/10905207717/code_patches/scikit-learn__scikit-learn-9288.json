{
  "instance_id": "scikit-learn__scikit-learn-9288",
  "edit_test_file": "sklearn/cluster/tests/test_k_means.py",
  "code_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex b7fbdf7..761d306 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -378,7 +378,7 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n                 best_n_iter = n_iter_\n     else:\n         # parallelisation of k-means runs\n-        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n+        seeds = sorted(random_state.randint(np.iinfo(np.int32).max, size=n_init))  # Ensure consistent order\n         results = Parallel(n_jobs=n_jobs, verbose=0)(\n             delayed(kmeans_single)(X, sample_weight, n_clusters,\n                                    max_iter=max_iter, init=init,\n@@ -387,7 +387,7 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n                                    x_squared_norms=x_squared_norms,\n                                    # Change seed to ensure variety\n                                    random_state=seed)\n-            for seed in seeds)\n+            for seed in sorted(seeds))  # Ensure consistent order\n         # Get results with the lowest inertia\n         labels, inertia, centers, n_iters = zip(*results)\n         best = np.argmin(inertia)\n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_kmeans_multithreading.py b/sklearn/cluster/tests/test_kmeans_multithreading.py\nnew file mode 100644\nindex 0000000..e828c0a\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_kmeans_multithreading.py\n@@ -0,0 +1,27 @@\n+import unittest\n+import numpy as np\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+from numpy.testing import assert_raises\n+\n+class TestKMeansMultithreading(unittest.TestCase):\n+    def test_kmeans_different_inertia_with_n_jobs(self):\n+        # Generate some data\n+        X, _ = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=2)\n+\n+        # Run KMeans with n_jobs=1\n+        kmeans_single = KMeans(n_clusters=10, random_state=2, n_jobs=1)\n+        kmeans_single.fit(X)\n+        inertia_single = kmeans_single.inertia_\n+\n+        # Run KMeans with n_jobs=2\n+        kmeans_multi = KMeans(n_clusters=10, random_state=2, n_jobs=2)\n+        kmeans_multi.fit(X)\n+        inertia_multi = kmeans_multi.inertia_\n+\n+        # Assert that the inertia is different\n+        self.assertNotEqual(inertia_single, inertia_multi, \n+                            \"Inertia should differ between n_jobs=1 and n_jobs=2\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py b/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py\nnew file mode 100644\nindex 0000000..65b6406\n--- /dev/null\n+++ b/sklearn/cluster/tests/test_kmeans_multithreading_inverted.py\n@@ -0,0 +1,26 @@\n+import unittest\n+import numpy as np\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+\n+class TestKMeansMultithreading(unittest.TestCase):\n+    def test_kmeans_different_inertia_with_n_jobs(self):\n+        # Generate some data\n+        X, _ = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=2)\n+\n+        # Run KMeans with n_jobs=1\n+        kmeans_single = KMeans(n_clusters=10, random_state=2, n_jobs=1)\n+        kmeans_single.fit(X)\n+        inertia_single = kmeans_single.inertia_\n+\n+        # Run KMeans with n_jobs=2\n+        kmeans_multi = KMeans(n_clusters=10, random_state=2, n_jobs=2)\n+        kmeans_multi.fit(X)\n+        inertia_multi = kmeans_multi.inertia_\n+\n+        # Assert that the inertia is the same\n+        # This should fail if the bug is present\n+        self.assertEqual(inertia_single, inertia_multi, \"__BUG__HERE__\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\\ No newline at end of file\n",
  "num_sent_chars": 2137095,
  "num_received_chars": 35505,
  "elapsed_time": 738.3646728992462,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 6,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}