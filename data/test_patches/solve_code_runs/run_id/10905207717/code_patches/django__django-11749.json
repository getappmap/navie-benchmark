{
  "instance_id": "django__django-11749",
  "edit_test_file": null,
  "code_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e647..c5d9f79 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -129,6 +129,17 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n \n+    # Handle mutually exclusive groups\n+    for group in parser._mutually_exclusive_groups:\n+        if group.required:\n+            # Check if any of the group's options are in arg_options\n+            if not any(opt.dest in arg_options for opt in group._group_actions):\n+                # If none are present, raise an error\n+                raise CommandError(\n+                    \"One of the arguments in the mutually exclusive group is required: %s\" %\n+                    ', '.join(min(opt.option_strings) for opt in group._group_actions)\n+                )\n+\n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 324461,
  "num_received_chars": 8635,
  "elapsed_time": 112.19268155097961,
  "lint_repair_count": 0,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}