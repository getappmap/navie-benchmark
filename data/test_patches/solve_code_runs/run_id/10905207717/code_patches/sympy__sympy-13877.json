{
  "instance_id": "sympy__sympy-13877",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 97cde62..fbb4e12 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -380,11 +380,13 @@ def cofactor_matrix(self, method=\"berkowitz\"):\n         return self._new(self.rows, self.cols,\n                          lambda i, j: self.cofactor(i, j, method))\n \n-    def det(self, method=\"bareiss\"):\n+    def det(self, method=None):\n         \"\"\"Computes the determinant of a matrix.  If the matrix\n         is at most 3x3, a hard-coded formula is used.\n         Otherwise, the determinant using the method `method`.\n \n+        If the matrix contains symbolic entries, the Berkowitz\n+        algorithm is used by default to avoid NaN issues.\n \n         Possible values for \"method\":\n           bareis\n@@ -392,7 +394,9 @@ def det(self, method=\"bareiss\"):\n           lu\n         \"\"\"\n \n-        # sanitize `method`\n+        # Determine method based on matrix content\n+        if method is None:\n+            method = \"berkowitz\" if any(isinstance(e, Symbol) for e in self) else \"bareiss\"\n         method = method.lower()\n         if method == \"bareis\":\n             method = \"bareiss\"\n@@ -401,9 +405,6 @@ def det(self, method=\"bareiss\"):\n         if method not in (\"bareiss\", \"berkowitz\", \"lu\"):\n             raise ValueError(\"Determinant method '%s' unrecognized\" % method)\n \n-        # if methods were made internal and all determinant calculations\n-        # passed through here, then these lines could be factored out of\n-        # the method routines\n         if self.rows != self.cols:\n             raise NonSquareMatrixError()\n \n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 954399,
  "num_received_chars": 18666,
  "elapsed_time": 384.6268048286438,
  "lint_repair_count": 1,
  "test_generation_attempts": 0,
  "code_generation_attempts": 1,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}