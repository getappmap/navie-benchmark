{
  "instance_id": "django__django-16819",
  "edit_test_file": "tests/indexes/tests.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 967a91f..ccd7133 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -823,6 +823,15 @@ class AddIndex(IndexOperation):\n     def state_forwards(self, app_label, state):\n         state.add_index(app_label, self.model_name_lower, self.index)\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, RemoveIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.index.name == operation.name\n+        ):\n+            return []\n+        return super().reduce(operation, app_label)\n+\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         model = to_state.apps.get_model(app_label, self.model_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, model):\n@@ -879,6 +888,15 @@ class RemoveIndex(IndexOperation):\n             index = from_model_state.get_index_by_name(self.name)\n             schema_editor.remove_index(model, index)\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, AddIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.name == operation.index.name\n+        ):\n+            return []\n+        return super().reduce(operation, app_label)\n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         model = to_state.apps.get_model(app_label, self.model_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, model):\n",
  "test_patch": "diff --git a/tests/indexes/reduce_index_migration_tests.py b/tests/indexes/reduce_index_migration_tests.py\nnew file mode 100644\nindex 0000000..21f30a4\n--- /dev/null\n+++ b/tests/indexes/reduce_index_migration_tests.py\n@@ -0,0 +1,55 @@\n+import datetime\n+from django.db import connection, migrations\n+from django.db.models import CharField, DateTimeField, Model, Q, Index\n+from django.test import TransactionTestCase\n+from django.utils import timezone\n+\n+class ReduceIndexMigrationTests(TransactionTestCase):\n+    available_apps = [\"indexes\"]\n+\n+    def test_reduce_index_migration_operations(self):\n+        \"\"\"\n+        Test to reproduce the issue of redundant AddIndex/RemoveIndex operations\n+        during migration optimization.\n+        \"\"\"\n+        class TestModel(Model):\n+            headline = CharField(max_length=100)\n+            pub_date = DateTimeField()\n+\n+            class Meta:\n+                app_label = 'indexes'\n+\n+        index = Index(\n+            name=\"test_index\",\n+            fields=[\"headline\"],\n+            condition=Q(pub_date__gt=datetime.datetime(\n+                year=2015,\n+                month=1,\n+                day=1,\n+                tzinfo=timezone.get_current_timezone(),\n+            )),\n+        )\n+\n+        # Simulate migration operations\n+        operations = [\n+            migrations.AddIndex(\n+                model_name='testmodel',\n+                index=index,\n+            ),\n+            migrations.RemoveIndex(\n+                model_name='testmodel',\n+                name='test_index',\n+            ),\n+            migrations.AddIndex(\n+                model_name='testmodel',\n+                index=index,\n+            ),\n+        ]\n+\n+        # Check for redundant operations\n+        add_index_count = sum(1 for op in operations if isinstance(op, migrations.AddIndex))\n+        remove_index_count = sum(1 for op in operations if isinstance(op, migrations.RemoveIndex))\n+\n+        # Assert that there are redundant AddIndex/RemoveIndex operations\n+        self.assertGreater(add_index_count, 1, \"Redundant AddIndex operations found\")\n+        self.assertGreater(remove_index_count, 0, \"Redundant RemoveIndex operations found\")\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/indexes/reduce_index_migration_tests_inverted.py b/tests/indexes/reduce_index_migration_tests_inverted.py\nnew file mode 100644\nindex 0000000..20a3ad3\n--- /dev/null\n+++ b/tests/indexes/reduce_index_migration_tests_inverted.py\n@@ -0,0 +1,56 @@\n+import datetime\n+from django.db import connection, migrations\n+from django.db.models import CharField, DateTimeField, Model, Q, Index\n+from django.test import TransactionTestCase\n+from django.utils import timezone\n+\n+class ReduceIndexMigrationTests(TransactionTestCase):\n+    available_apps = [\"indexes\"]\n+\n+    def test_reduce_index_migration_operations(self):\n+        \"\"\"\n+        Test to reproduce the issue of redundant AddIndex/RemoveIndex operations\n+        during migration optimization.\n+        \"\"\"\n+        class TestModel(Model):\n+            headline = CharField(max_length=100)\n+            pub_date = DateTimeField()\n+\n+            class Meta:\n+                app_label = 'indexes'\n+\n+        index = Index(\n+            name=\"test_index\",\n+            fields=[\"headline\"],\n+            condition=Q(pub_date__gt=datetime.datetime(\n+                year=2015,\n+                month=1,\n+                day=1,\n+                tzinfo=timezone.get_current_timezone(),\n+            )),\n+        )\n+\n+        # Simulate migration operations\n+        operations = [\n+            migrations.AddIndex(\n+                model_name='testmodel',\n+                index=index,\n+            ),\n+            migrations.RemoveIndex(\n+                model_name='testmodel',\n+                name='test_index',\n+            ),\n+            migrations.AddIndex(\n+                model_name='testmodel',\n+                index=index,\n+            ),\n+        ]\n+\n+        # Check for redundant operations\n+        add_index_count = sum(1 for op in operations if isinstance(op, migrations.AddIndex))\n+        remove_index_count = sum(1 for op in operations if isinstance(op, migrations.RemoveIndex))\n+\n+        # Assert that there are no redundant AddIndex/RemoveIndex operations\n+        # This should fail if the issue is observed\n+        if add_index_count > 1 or remove_index_count > 0:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 3643572,
  "num_received_chars": 63821,
  "elapsed_time": 1207.5224914550781,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}