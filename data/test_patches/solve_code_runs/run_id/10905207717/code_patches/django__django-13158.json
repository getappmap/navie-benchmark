{
  "instance_id": "django__django-13158",
  "edit_test_file": "tests/generic_relations/tests.py",
  "code_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex ab611af..db97bf2 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1323,7 +1323,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         if self.required and not value:\n             raise ValidationError(self.error_messages['required'], code='required')\n         elif not self.required and not value:\n-            return self.queryset.none()\n+            # Ensure that an empty submission results in an empty queryset\n+            return self.queryset.none() if not self.queryset.query.combinator else self.queryset.model.objects.none()\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(\n                 self.error_messages['invalid_list'],\n",
  "test_patch": "diff --git a/tests/generic_relations/test_query_union_behavior.py b/tests/generic_relations/test_query_union_behavior.py\nnew file mode 100644\nindex 0000000..182a33e\n--- /dev/null\n+++ b/tests/generic_relations/test_query_union_behavior.py\n@@ -0,0 +1,40 @@\n+from django.test import TestCase\n+from django import forms\n+from django.db import models\n+\n+class Publication(models.Model):\n+    pass\n+\n+class Article(models.Model):\n+    publications = models.ManyToManyField(to=Publication, blank=True, null=True)\n+\n+class ArticleForm(forms.ModelForm):\n+    publications = forms.ModelMultipleChoiceField(\n+        Publication.objects.filter(id__lt=2).union(\n+            Publication.objects.filter(id__gt=5)\n+        ),\n+        required=False,\n+    )\n+\n+    class Meta:\n+        model = Article\n+        fields = [\"publications\"]\n+\n+class QueryUnionBehaviorTest(TestCase):\n+    def test_queryset_none_on_combined_queries(self):\n+        # Create some publications\n+        pub1 = Publication.objects.create()\n+        pub2 = Publication.objects.create()\n+        pub3 = Publication.objects.create()\n+        pub4 = Publication.objects.create()\n+        pub5 = Publication.objects.create()\n+        pub6 = Publication.objects.create()\n+        pub7 = Publication.objects.create()\n+\n+        # Create an article with no publications selected\n+        form = ArticleForm(data={'publications': []})\n+        self.assertTrue(form.is_valid())\n+        article = form.save()\n+\n+        # Check if all publications are added when the form is submitted empty\n+        self.assertEqual(list(article.publications.all()), list(Publication.objects.filter(id__lt=2).union(Publication.objects.filter(id__gt=5))))\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/generic_relations/test_query_union_behavior_inverted.py b/tests/generic_relations/test_query_union_behavior_inverted.py\nnew file mode 100644\nindex 0000000..78690db\n--- /dev/null\n+++ b/tests/generic_relations/test_query_union_behavior_inverted.py\n@@ -0,0 +1,42 @@\n+from django.test import TestCase\n+from django import forms\n+from django.db import models\n+\n+class Publication(models.Model):\n+    pass\n+\n+class Article(models.Model):\n+    publications = models.ManyToManyField(to=Publication, blank=True, null=True)\n+\n+class ArticleForm(forms.ModelForm):\n+    publications = forms.ModelMultipleChoiceField(\n+        Publication.objects.filter(id__lt=2).union(\n+            Publication.objects.filter(id__gt=5)\n+        ),\n+        required=False,\n+    )\n+\n+    class Meta:\n+        model = Article\n+        fields = [\"publications\"]\n+\n+class QueryUnionBehaviorTest(TestCase):\n+    def test_queryset_none_on_combined_queries(self):\n+        # Create some publications\n+        pub1 = Publication.objects.create()\n+        pub2 = Publication.objects.create()\n+        pub3 = Publication.objects.create()\n+        pub4 = Publication.objects.create()\n+        pub5 = Publication.objects.create()\n+        pub6 = Publication.objects.create()\n+        pub7 = Publication.objects.create()\n+\n+        # Create an article with no publications selected\n+        form = ArticleForm(data={'publications': []})\n+        self.assertTrue(form.is_valid())\n+        article = form.save()\n+\n+        # Check if no publications are added when the form is submitted empty\n+        # This should fail if the bug is present, as it incorrectly adds all publications\n+        if list(article.publications.all()) == list(Publication.objects.filter(id__lt=2).union(Publication.objects.filter(id__gt=5))):\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 1669882,
  "num_received_chars": 19669,
  "elapsed_time": 374.1694746017456,
  "lint_repair_count": 2,
  "test_generation_attempts": 0,
  "code_generation_attempts": 3,
  "pass_to_pass": true,
  "pass_to_fail": true,
  "fail_to_pass": true,
  "code_patch_score": 3,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}