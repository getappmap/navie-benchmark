{
  "instance_id": "sphinx-doc__sphinx-9591",
  "edit_test_file": "tests/test_ext_autodoc_configs.py",
  "code_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 938f976..276046e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2684,6 +2684,35 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n         else:\n             return False\n \n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if inspect.isabstractmethod(self.object):\n+            self.add_line('   :abstractmethod:', sourcename)\n+        if self.isclassmethod:\n+            self.add_line('   :classmethod:', sourcename)\n+\n+        if safe_getattr(self.object, 'fget', None):  # property\n+            func = self.object.fget\n+        elif safe_getattr(self.object, 'func', None):  # cached_property\n+            func = self.object.func\n+        else:\n+            func = None\n+\n+        if func and self.config.autodoc_typehints != 'none':\n+            try:\n+                signature = inspect.signature(func,\n+                                              type_aliases=self.config.autodoc_type_aliases)\n+                if signature.return_annotation is not Parameter.empty:\n+                    objrepr = stringify_typehint(signature.return_annotation)\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n+            except TypeError as exc:\n+                logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n+                               self.fullname, exc)\n+                return None\n+            except ValueError:\n+                return None\n+\n     def import_object(self, raiseerror: bool = False) -> bool:\n         \"\"\"Check the exisitence of uninitialized instance attribute when failed to import\n         the attribute.\"\"\"\n",
  "test_patch": "diff --git a/tests/test_ext_autodoc_crossrefs.py b/tests/test_ext_autodoc_crossrefs.py\nnew file mode 100644\nindex 0000000..d70065e\n--- /dev/null\n+++ b/tests/test_ext_autodoc_crossrefs.py\n@@ -0,0 +1,15 @@\n+import pytest\n+from sphinx.ext.autodoc import Documenter\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_property_type_annotation_crossref(app: SphinxTestApp):\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check if the cross-reference for the property's type annotation is missing\n+    # This is the expected incorrect behavior as described in the issue\n+    assert '<span class=\"n\"><span class=\"pre\">Point</span></span>' not in content\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/test_ext_autodoc_crossrefs_inverted.py b/tests/test_ext_autodoc_crossrefs_inverted.py\nnew file mode 100644\nindex 0000000..4dc3158\n--- /dev/null\n+++ b/tests/test_ext_autodoc_crossrefs_inverted.py\n@@ -0,0 +1,16 @@\n+import pytest\n+from sphinx.ext.autodoc import Documenter\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_property_type_annotation_crossref(app: SphinxTestApp):\n+    # Build the documentation\n+    app.build()\n+\n+    # Read the generated HTML content\n+    content = (app.outdir / 'index.html').read_text()\n+\n+    # Check if the cross-reference for the property's type annotation is present\n+    # This is the expected correct behavior, so the test should fail if the bug is observed\n+    if '<span class=\"n\"><span class=\"pre\">Point</span></span>' not in content:\n+        raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 4787478,
  "num_received_chars": 63302,
  "elapsed_time": 1298.4559638500214,
  "lint_repair_count": 7,
  "test_generation_attempts": 0,
  "code_generation_attempts": 9,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null
}