{
  "instance_id": "sympy__sympy-24066",
  "edit_test_file": null,
  "code_patch": "diff --git a/sympy/physics/units/quantities.py b/sympy/physics/units/quantities.py\nindex 4f18d36..73c2d1e 100644\n--- a/sympy/physics/units/quantities.py\n+++ b/sympy/physics/units/quantities.py\n@@ -207,8 +207,19 @@ def _collect_factor_and_dimension(expr, unit_system=\"SI\"):\n             active_deprecations_target=\"deprecated-quantity-methods\",\n         )\n         from sympy.physics.units import UnitSystem\n+        from sympy.physics.units.dimensions import Dimension\n+        from sympy import exp\n+\n         unit_system = UnitSystem.get_unit_system(unit_system)\n-        return unit_system._collect_factor_and_dimension(expr)\n+        factor, dimension = unit_system._collect_factor_and_dimension(expr)\n+\n+        # Enhance dimensionless detection for exponential functions\n+        if isinstance(expr, exp):\n+            base_factor, base_dim = unit_system._collect_factor_and_dimension(expr.args[0])\n+            if unit_system.get_dimension_system().is_dimensionless(base_dim):\n+                dimension = Dimension(1)\n+\n+        return factor, dimension\n \n     def _latex(self, printer):\n         if self._latex_repr:\n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 1234625,
  "num_received_chars": 37908,
  "elapsed_time": 344.8466167449951,
  "lint_repair_count": 1,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null,
  "code_patch_issue-46": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c..2eaa6e5 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -168,7 +168,9 @@ def _collect_factor_and_dimension(self, expr):\n             factor, dim = self._collect_factor_and_dimension(expr.base)\n             exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n-                exp_dim = 1\n+                exp_dim = Dimension(1)\n+            else:\n+                raise ValueError(\"Exponent must be dimensionless, got dimension: {}\".format(exp_dim))\n             return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n"
}