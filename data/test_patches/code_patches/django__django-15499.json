{
  "instance_id": "django__django-15499",
  "edit_test_file": "tests/migrations/test_optimizer.py",
  "code_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31b..8a5c043 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\n",
  "test_patch": "diff --git a/tests/migrations/test_optimize_create_alter_model.py b/tests/migrations/test_optimize_create_alter_model.py\nnew file mode 100644\nindex 0000000..b546a2f\n--- /dev/null\n+++ b/tests/migrations/test_optimize_create_alter_model.py\n@@ -0,0 +1,53 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+from django.test import SimpleTestCase\n+\n+from .models import EmptyManager, UnicodeModel\n+\n+class OptimizeCreateAlterModelTests(SimpleTestCase):\n+    def optimize(self, operations, app_label):\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label), optimizer._iterations\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def assertOptimizesTo(self, operations, expected, app_label=None):\n+        result, _ = self.optimize(operations, app_label or \"migrations\")\n+        result = [self.serialize(f) for f in result]\n+        expected = [self.serialize(f) for f in expected]\n+        self.assertEqual(expected, result)\n+\n+    def test_create_model_alter_managers(self):\n+        \"\"\"\n+        Test that CreateModel followed by AlterModelManagers does not optimize\n+        to just CreateModel with managers.\n+        \"\"\"\n+        managers = [(\"objects\", EmptyManager())]\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    name=\"Foo\",\n+                    fields=[(\"name\", models.CharField(max_length=255))],\n+                    options={\"verbose_name\": \"Foo\"},\n+                    bases=(UnicodeModel,),\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=managers,\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    name=\"Foo\",\n+                    fields=[(\"name\", models.CharField(max_length=255))],\n+                    options={\"verbose_name\": \"Foo\"},\n+                    bases=(UnicodeModel,),\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=managers,\n+                ),\n+            ],\n+        )\n\\ No newline at end of file\n",
  "test_inverted_patch": "diff --git a/tests/migrations/test_optimize_create_alter_model_inverted.py b/tests/migrations/test_optimize_create_alter_model_inverted.py\nnew file mode 100644\nindex 0000000..e91762b\n--- /dev/null\n+++ b/tests/migrations/test_optimize_create_alter_model_inverted.py\n@@ -0,0 +1,53 @@\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.serializer import serializer_factory\n+from django.test import SimpleTestCase\n+\n+from .models import EmptyManager, UnicodeModel\n+\n+class OptimizeCreateAlterModelTests(SimpleTestCase):\n+    def optimize(self, operations, app_label):\n+        optimizer = MigrationOptimizer()\n+        return optimizer.optimize(operations, app_label), optimizer._iterations\n+\n+    def serialize(self, value):\n+        return serializer_factory(value).serialize()[0]\n+\n+    def assertOptimizesTo(self, operations, expected, app_label=None):\n+        result, _ = self.optimize(operations, app_label or \"migrations\")\n+        result = [self.serialize(f) for f in result]\n+        expected = [self.serialize(f) for f in expected]\n+        self.assertEqual(expected, result)\n+\n+    def test_create_model_alter_managers(self):\n+        \"\"\"\n+        Test that CreateModel followed by AlterModelManagers does not optimize\n+        to just CreateModel with managers.\n+        \"\"\"\n+        managers = [(\"objects\", EmptyManager())]\n+        try:\n+            self.assertOptimizesTo(\n+                [\n+                    migrations.CreateModel(\n+                        name=\"Foo\",\n+                        fields=[(\"name\", models.CharField(max_length=255))],\n+                        options={\"verbose_name\": \"Foo\"},\n+                        bases=(UnicodeModel,),\n+                    ),\n+                    migrations.AlterModelManagers(\n+                        name=\"Foo\",\n+                        managers=managers,\n+                    ),\n+                ],\n+                [\n+                    migrations.CreateModel(\n+                        name=\"Foo\",\n+                        fields=[(\"name\", models.CharField(max_length=255))],\n+                        options={\"verbose_name\": \"Foo\"},\n+                        bases=(UnicodeModel,),\n+                        managers=managers,  # Expecting managers to be included in CreateModel\n+                    ),\n+                ],\n+            )\n+        except AssertionError:\n+            raise AssertionError(\"__BUG__HERE__\")\n\\ No newline at end of file\n",
  "num_sent_chars": 993171,
  "num_received_chars": 40472,
  "elapsed_time": 244.42932677268982,
  "lint_repair_count": 4,
  "test_generation_attempts": 3,
  "code_generation_attempts": 4,
  "pass_to_pass": true,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 1,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null,
  "code_patch_issue-46": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 04e651e..f270c21 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -406,8 +406,27 @@ class MigrationAutodetector:\n         # Optimize migrations\n         for app_label, migrations in self.migrations.items():\n             for migration in migrations:\n+                # Optimize CreateModel followed by AlterModelManagers\n+                optimized_operations = []\n+                skip_next = False\n+                for i, operation in enumerate(migration.operations):\n+                    if skip_next:\n+                        skip_next = False\n+                        continue\n+                    if (\n+                        isinstance(operation, operations.CreateModel)\n+                        and i + 1 < len(migration.operations)\n+                        and isinstance(migration.operations[i + 1], operations.AlterModelManagers)\n+                    ):\n+                        create_model_op = operation\n+                        alter_managers_op = migration.operations[i + 1]\n+                        create_model_op.managers = alter_managers_op.managers\n+                        optimized_operations.append(create_model_op)\n+                        skip_next = True\n+                    else:\n+                        optimized_operations.append(operation)\n                 migration.operations = MigrationOptimizer().optimize(\n-                    migration.operations, app_label\n+                    optimized_operations, app_label\n                 )\n \n     def check_dependency(self, operation, dependency):\n"
}