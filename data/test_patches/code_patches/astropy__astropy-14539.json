{
  "instance_id": "astropy__astropy-14539",
  "edit_test_file": null,
  "code_patch": "diff --git a/astropy/io/fits/hdu/table.py b/astropy/io/fits/hdu/table.py\nindex 997f504..7ef1026 100644\n--- a/astropy/io/fits/hdu/table.py\n+++ b/astropy/io/fits/hdu/table.py\n@@ -959,9 +959,14 @@ class BinTableHDU(_TableBaseHDU):\n                             if not len(coldata):\n                                 continue\n \n+                            # Ensure consistent comparison by normalizing VLA data\n+                            coldata = np.ascontiguousarray(coldata)\n                             csum = self._compute_checksum(coldata, csum)\n             else:\n-                csum = self._compute_checksum(data._get_heap_data(), csum)\n+                heap_data = data._get_heap_data()\n+                # Normalize heap data for consistent comparison\n+                heap_data = np.ascontiguousarray(heap_data)\n+                csum = self._compute_checksum(heap_data, csum)\n \n             return csum\n \n",
  "test_patch": null,
  "test_inverted_patch": null,
  "num_sent_chars": 2159733,
  "num_received_chars": 64848,
  "elapsed_time": 642.4871914386749,
  "lint_repair_count": 2,
  "test_generation_attempts": 9,
  "code_generation_attempts": 4,
  "pass_to_pass": false,
  "pass_to_fail": false,
  "fail_to_pass": false,
  "code_patch_score": 0,
  "appmap_data_test_status": null,
  "appmap_data_file_count": null,
  "appmap_data_context_size": null,
  "code_patch_issue-46": "diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 100cdf1..8062655 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -31,7 +31,7 @@ from .card import BLANK_CARD, Card\n \n # HDUList is used in one of the doctests\n from .hdu.hdulist import HDUList, fitsopen  # pylint: disable=W0611\n-from .hdu.table import _TableLikeHDU\n+from .hdu.table import _TableLikeHDU, TableDataDiff\n from .header import Header\n from .util import path_like\n \n@@ -605,6 +605,16 @@ class HDUDiff(_BaseDiff):\n             # be closed by .close()\n             self.diff_data.a = None\n             self.diff_data.b = None\n+        elif isinstance(self.a.data, np.ndarray) and isinstance(self.b.data, np.ndarray):\n+            # Handle variable-length arrays (VLAs) correctly\n+            if self.a.data.dtype == np.object_ and self.b.data.dtype == np.object_:\n+                self.diff_data = TableDataDiff.fromdiff(self, self.a.data, self.b.data)\n+            else:\n+                self.diff_data = RawDataDiff.fromdiff(self, self.a.data, self.b.data)\n+            # Clean up references to (possibly) memmapped arrays so they can\n+            # be closed by .close()\n+            self.diff_data.a = None\n+            self.diff_data.b = None\n         elif not self.diff_extension_types:\n             # Don't diff the data for unequal extension types that are not\n             # recognized image or table types\n@@ -1080,9 +1090,17 @@ class ImageDataDiff(_BaseDiff):\n             rtol = self.rtol\n             atol = self.atol\n \n-        diffs = where_not_allclose(self.a, self.b, atol=atol, rtol=rtol)\n+        # Handle variable-length arrays (VLAs) correctly\n+        if self.a.dtype == np.object_ and self.b.dtype == np.object_:\n+            diffs = [\n+                (i, (a_val, b_val))\n+                for i, (a_val, b_val) in enumerate(zip(self.a, self.b))\n+                if not np.array_equal(a_val, b_val)\n+            ]\n+        else:\n+            diffs = where_not_allclose(self.a, self.b, atol=atol, rtol=rtol)\n \n-        self.diff_total = len(diffs[0])\n+        self.diff_total = len(diffs[0]) if isinstance(diffs, tuple) else len(diffs)\n \n         if self.diff_total == 0:\n             # Then we're done\n@@ -1096,7 +1114,7 @@ class ImageDataDiff(_BaseDiff):\n         self.diff_pixels = [\n             (idx, (self.a[idx], self.b[idx]))\n             for idx in islice(zip(*diffs), 0, numdiffs)\n-        ]\n+        ] if isinstance(diffs, tuple) else diffs[:numdiffs]\n         self.diff_ratio = float(self.diff_total) / float(len(self.a.flat))\n \n     def _report(self):\n"
}